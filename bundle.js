/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 563:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(864);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(352);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body {
  margin: 0;
  padding: 0;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  /* background-color: black; */
  touch-action: none;
}
html {
  touch-action: none;
  width: 100%;
  height: 100%;
}
body{
  margin: 0px;
  width: 100%;
  height: 100%;
}

canvas {
  max-width: 100%;
  max-height: 100%;
  /* width: 100%;
  height: 100%; */
  touch-action: none;
}
`, "",{"version":3,"sources":["webpack://./public/style.css"],"names":[],"mappings":"AAAA;EACE,SAAS;EACT,UAAU;EACV,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,6BAA6B;EAC7B,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;AACd;AACA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB;iBACe;EACf,kBAAkB;AACpB","sourcesContent":["body {\n  margin: 0;\n  padding: 0;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* background-color: black; */\n  touch-action: none;\n}\nhtml {\n  touch-action: none;\n  width: 100%;\n  height: 100%;\n}\nbody{\n  margin: 0px;\n  width: 100%;\n  height: 100%;\n}\n\ncanvas {\n  max-width: 100%;\n  max-height: 100%;\n  /* width: 100%;\n  height: 100%; */\n  touch-action: none;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 352:
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ 864:
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ 956:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

!function(e,t){ true?t(exports):0}(this,(function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var r=0;t.length>r;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function i(e,t,i){return t&&r(e.prototype,t),i&&r(e,i),e}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function o(e,t,r){return(o=a()?Reflect.construct:function(e,t,r){var i=[null];i.push.apply(i,t);var s=new(Function.bind.apply(e,i));return r&&n(s,r.prototype),s}).apply(null,arguments)}function u(e){var t="function"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||-1===Function.toString.call(e).indexOf("[native code]"))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return o(e,arguments,s(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),n(r,e)})(e)}function c(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}var p="app",l="user",f="team",m="dropboxapi.com",h="dropbox.com",d={api:"api",notify:"bolt",content:"api-content"},_={};function g(e){var t="000".concat(e.charCodeAt(0).toString(16)).slice(-4);return"\\u".concat(t)}_.accountSetProfilePhoto=function(e){return this.request("account/set_profile_photo",e,"user","api","rpc","account_info.write")},_.authTokenFromOauth1=function(e){return this.request("auth/token/from_oauth1",e,"app","api","rpc",null)},_.authTokenRevoke=function(){return this.request("auth/token/revoke",null,"user","api","rpc",null)},_.checkApp=function(e){return this.request("check/app",e,"app","api","rpc",null)},_.checkUser=function(e){return this.request("check/user",e,"user","api","rpc","account_info.read")},_.contactsDeleteManualContacts=function(){return this.request("contacts/delete_manual_contacts",null,"user","api","rpc","contacts.write")},_.contactsDeleteManualContactsBatch=function(e){return this.request("contacts/delete_manual_contacts_batch",e,"user","api","rpc","contacts.write")},_.filePropertiesPropertiesAdd=function(e){return this.request("file_properties/properties/add",e,"user","api","rpc","files.metadata.write")},_.filePropertiesPropertiesOverwrite=function(e){return this.request("file_properties/properties/overwrite",e,"user","api","rpc","files.metadata.write")},_.filePropertiesPropertiesRemove=function(e){return this.request("file_properties/properties/remove",e,"user","api","rpc","files.metadata.write")},_.filePropertiesPropertiesSearch=function(e){return this.request("file_properties/properties/search",e,"user","api","rpc","files.metadata.read")},_.filePropertiesPropertiesSearchContinue=function(e){return this.request("file_properties/properties/search/continue",e,"user","api","rpc","files.metadata.read")},_.filePropertiesPropertiesUpdate=function(e){return this.request("file_properties/properties/update",e,"user","api","rpc","files.metadata.write")},_.filePropertiesTemplatesAddForTeam=function(e){return this.request("file_properties/templates/add_for_team",e,"team","api","rpc","files.team_metadata.write")},_.filePropertiesTemplatesAddForUser=function(e){return this.request("file_properties/templates/add_for_user",e,"user","api","rpc","files.metadata.write")},_.filePropertiesTemplatesGetForTeam=function(e){return this.request("file_properties/templates/get_for_team",e,"team","api","rpc","files.team_metadata.write")},_.filePropertiesTemplatesGetForUser=function(e){return this.request("file_properties/templates/get_for_user",e,"user","api","rpc","files.metadata.read")},_.filePropertiesTemplatesListForTeam=function(){return this.request("file_properties/templates/list_for_team",null,"team","api","rpc","files.team_metadata.write")},_.filePropertiesTemplatesListForUser=function(){return this.request("file_properties/templates/list_for_user",null,"user","api","rpc","files.metadata.read")},_.filePropertiesTemplatesRemoveForTeam=function(e){return this.request("file_properties/templates/remove_for_team",e,"team","api","rpc","files.team_metadata.write")},_.filePropertiesTemplatesRemoveForUser=function(e){return this.request("file_properties/templates/remove_for_user",e,"user","api","rpc","files.metadata.write")},_.filePropertiesTemplatesUpdateForTeam=function(e){return this.request("file_properties/templates/update_for_team",e,"team","api","rpc","files.team_metadata.write")},_.filePropertiesTemplatesUpdateForUser=function(e){return this.request("file_properties/templates/update_for_user",e,"user","api","rpc","files.metadata.write")},_.fileRequestsCount=function(){return this.request("file_requests/count",null,"user","api","rpc","file_requests.read")},_.fileRequestsCreate=function(e){return this.request("file_requests/create",e,"user","api","rpc","file_requests.write")},_.fileRequestsDelete=function(e){return this.request("file_requests/delete",e,"user","api","rpc","file_requests.write")},_.fileRequestsDeleteAllClosed=function(){return this.request("file_requests/delete_all_closed",null,"user","api","rpc","file_requests.write")},_.fileRequestsGet=function(e){return this.request("file_requests/get",e,"user","api","rpc","file_requests.read")},_.fileRequestsListV2=function(e){return this.request("file_requests/list_v2",e,"user","api","rpc","file_requests.read")},_.fileRequestsList=function(){return this.request("file_requests/list",null,"user","api","rpc","file_requests.read")},_.fileRequestsListContinue=function(e){return this.request("file_requests/list/continue",e,"user","api","rpc","file_requests.read")},_.fileRequestsUpdate=function(e){return this.request("file_requests/update",e,"user","api","rpc","file_requests.write")},_.filesAlphaGetMetadata=function(e){return this.request("files/alpha/get_metadata",e,"user","api","rpc","files.metadata.read")},_.filesAlphaUpload=function(e){return this.request("files/alpha/upload",e,"user","content","upload","files.content.write")},_.filesCopyV2=function(e){return this.request("files/copy_v2",e,"user","api","rpc","files.content.write")},_.filesCopy=function(e){return this.request("files/copy",e,"user","api","rpc","files.content.write")},_.filesCopyBatchV2=function(e){return this.request("files/copy_batch_v2",e,"user","api","rpc","files.content.write")},_.filesCopyBatch=function(e){return this.request("files/copy_batch",e,"user","api","rpc","files.content.write")},_.filesCopyBatchCheckV2=function(e){return this.request("files/copy_batch/check_v2",e,"user","api","rpc","files.content.write")},_.filesCopyBatchCheck=function(e){return this.request("files/copy_batch/check",e,"user","api","rpc","files.content.write")},_.filesCopyReferenceGet=function(e){return this.request("files/copy_reference/get",e,"user","api","rpc","files.content.write")},_.filesCopyReferenceSave=function(e){return this.request("files/copy_reference/save",e,"user","api","rpc","files.content.write")},_.filesCreateFolderV2=function(e){return this.request("files/create_folder_v2",e,"user","api","rpc","files.content.write")},_.filesCreateFolder=function(e){return this.request("files/create_folder",e,"user","api","rpc","files.content.write")},_.filesCreateFolderBatch=function(e){return this.request("files/create_folder_batch",e,"user","api","rpc","files.content.write")},_.filesCreateFolderBatchCheck=function(e){return this.request("files/create_folder_batch/check",e,"user","api","rpc","files.content.write")},_.filesDeleteV2=function(e){return this.request("files/delete_v2",e,"user","api","rpc","files.content.write")},_.filesDelete=function(e){return this.request("files/delete",e,"user","api","rpc","files.content.write")},_.filesDeleteBatch=function(e){return this.request("files/delete_batch",e,"user","api","rpc","files.content.write")},_.filesDeleteBatchCheck=function(e){return this.request("files/delete_batch/check",e,"user","api","rpc","files.content.write")},_.filesDownload=function(e){return this.request("files/download",e,"user","content","download","files.content.read")},_.filesDownloadZip=function(e){return this.request("files/download_zip",e,"user","content","download","files.content.read")},_.filesExport=function(e){return this.request("files/export",e,"user","content","download","files.content.read")},_.filesGetFileLockBatch=function(e){return this.request("files/get_file_lock_batch",e,"user","api","rpc","files.content.read")},_.filesGetMetadata=function(e){return this.request("files/get_metadata",e,"user","api","rpc","files.metadata.read")},_.filesGetPreview=function(e){return this.request("files/get_preview",e,"user","content","download","files.content.read")},_.filesGetTemporaryLink=function(e){return this.request("files/get_temporary_link",e,"user","api","rpc","files.content.read")},_.filesGetTemporaryUploadLink=function(e){return this.request("files/get_temporary_upload_link",e,"user","api","rpc","files.content.write")},_.filesGetThumbnail=function(e){return this.request("files/get_thumbnail",e,"user","content","download","files.content.read")},_.filesGetThumbnailV2=function(e){return this.request("files/get_thumbnail_v2",e,"app, user","content","download","files.content.read")},_.filesGetThumbnailBatch=function(e){return this.request("files/get_thumbnail_batch",e,"user","content","rpc","files.content.read")},_.filesListFolder=function(e){return this.request("files/list_folder",e,"app, user","api","rpc","files.metadata.read")},_.filesListFolderContinue=function(e){return this.request("files/list_folder/continue",e,"app, user","api","rpc","files.metadata.read")},_.filesListFolderGetLatestCursor=function(e){return this.request("files/list_folder/get_latest_cursor",e,"user","api","rpc","files.metadata.read")},_.filesListFolderLongpoll=function(e){return this.request("files/list_folder/longpoll",e,"noauth","notify","rpc","files.metadata.read")},_.filesListRevisions=function(e){return this.request("files/list_revisions",e,"user","api","rpc","files.metadata.read")},_.filesLockFileBatch=function(e){return this.request("files/lock_file_batch",e,"user","api","rpc","files.content.write")},_.filesMoveV2=function(e){return this.request("files/move_v2",e,"user","api","rpc","files.content.write")},_.filesMove=function(e){return this.request("files/move",e,"user","api","rpc","files.content.write")},_.filesMoveBatchV2=function(e){return this.request("files/move_batch_v2",e,"user","api","rpc","files.content.write")},_.filesMoveBatch=function(e){return this.request("files/move_batch",e,"user","api","rpc","files.content.write")},_.filesMoveBatchCheckV2=function(e){return this.request("files/move_batch/check_v2",e,"user","api","rpc","files.content.write")},_.filesMoveBatchCheck=function(e){return this.request("files/move_batch/check",e,"user","api","rpc","files.content.write")},_.filesPaperCreate=function(e){return this.request("files/paper/create",e,"user","api","upload","files.content.write")},_.filesPaperUpdate=function(e){return this.request("files/paper/update",e,"user","api","upload","files.content.write")},_.filesPermanentlyDelete=function(e){return this.request("files/permanently_delete",e,"user","api","rpc","files.permanent_delete")},_.filesPropertiesAdd=function(e){return this.request("files/properties/add",e,"user","api","rpc","files.metadata.write")},_.filesPropertiesOverwrite=function(e){return this.request("files/properties/overwrite",e,"user","api","rpc","files.metadata.write")},_.filesPropertiesRemove=function(e){return this.request("files/properties/remove",e,"user","api","rpc","files.metadata.write")},_.filesPropertiesTemplateGet=function(e){return this.request("files/properties/template/get",e,"user","api","rpc","files.metadata.read")},_.filesPropertiesTemplateList=function(){return this.request("files/properties/template/list",null,"user","api","rpc","files.metadata.read")},_.filesPropertiesUpdate=function(e){return this.request("files/properties/update",e,"user","api","rpc","files.metadata.write")},_.filesRestore=function(e){return this.request("files/restore",e,"user","api","rpc","files.content.write")},_.filesSaveUrl=function(e){return this.request("files/save_url",e,"user","api","rpc","files.content.write")},_.filesSaveUrlCheckJobStatus=function(e){return this.request("files/save_url/check_job_status",e,"user","api","rpc","files.content.write")},_.filesSearch=function(e){return this.request("files/search",e,"user","api","rpc","files.metadata.read")},_.filesSearchV2=function(e){return this.request("files/search_v2",e,"user","api","rpc","files.metadata.read")},_.filesSearchContinueV2=function(e){return this.request("files/search/continue_v2",e,"user","api","rpc","files.metadata.read")},_.filesTagsAdd=function(e){return this.request("files/tags/add",e,"user","api","rpc","files.metadata.write")},_.filesTagsGet=function(e){return this.request("files/tags/get",e,"user","api","rpc","files.metadata.read")},_.filesTagsRemove=function(e){return this.request("files/tags/remove",e,"user","api","rpc","files.metadata.write")},_.filesUnlockFileBatch=function(e){return this.request("files/unlock_file_batch",e,"user","api","rpc","files.content.write")},_.filesUpload=function(e){return this.request("files/upload",e,"user","content","upload","files.content.write")},_.filesUploadSessionAppendV2=function(e){return this.request("files/upload_session/append_v2",e,"user","content","upload","files.content.write")},_.filesUploadSessionAppend=function(e){return this.request("files/upload_session/append",e,"user","content","upload","files.content.write")},_.filesUploadSessionFinish=function(e){return this.request("files/upload_session/finish",e,"user","content","upload","files.content.write")},_.filesUploadSessionFinishBatch=function(e){return this.request("files/upload_session/finish_batch",e,"user","api","rpc","files.content.write")},_.filesUploadSessionFinishBatchV2=function(e){return this.request("files/upload_session/finish_batch_v2",e,"user","api","rpc","files.content.write")},_.filesUploadSessionFinishBatchCheck=function(e){return this.request("files/upload_session/finish_batch/check",e,"user","api","rpc","files.content.write")},_.filesUploadSessionStart=function(e){return this.request("files/upload_session/start",e,"user","content","upload","files.content.write")},_.filesUploadSessionStartBatch=function(e){return this.request("files/upload_session/start_batch",e,"user","api","rpc","files.content.write")},_.openidUserinfo=function(e){return this.request("openid/userinfo",e,"user","api","rpc","openid")},_.paperDocsArchive=function(e){return this.request("paper/docs/archive",e,"user","api","rpc","files.content.write")},_.paperDocsCreate=function(e){return this.request("paper/docs/create",e,"user","api","upload","files.content.write")},_.paperDocsDownload=function(e){return this.request("paper/docs/download",e,"user","api","download","files.content.read")},_.paperDocsFolderUsersList=function(e){return this.request("paper/docs/folder_users/list",e,"user","api","rpc","sharing.read")},_.paperDocsFolderUsersListContinue=function(e){return this.request("paper/docs/folder_users/list/continue",e,"user","api","rpc","sharing.read")},_.paperDocsGetFolderInfo=function(e){return this.request("paper/docs/get_folder_info",e,"user","api","rpc","sharing.read")},_.paperDocsList=function(e){return this.request("paper/docs/list",e,"user","api","rpc","files.metadata.read")},_.paperDocsListContinue=function(e){return this.request("paper/docs/list/continue",e,"user","api","rpc","files.metadata.read")},_.paperDocsPermanentlyDelete=function(e){return this.request("paper/docs/permanently_delete",e,"user","api","rpc","files.permanent_delete")},_.paperDocsSharingPolicyGet=function(e){return this.request("paper/docs/sharing_policy/get",e,"user","api","rpc","sharing.read")},_.paperDocsSharingPolicySet=function(e){return this.request("paper/docs/sharing_policy/set",e,"user","api","rpc","sharing.write")},_.paperDocsUpdate=function(e){return this.request("paper/docs/update",e,"user","api","upload","files.content.write")},_.paperDocsUsersAdd=function(e){return this.request("paper/docs/users/add",e,"user","api","rpc","sharing.write")},_.paperDocsUsersList=function(e){return this.request("paper/docs/users/list",e,"user","api","rpc","sharing.read")},_.paperDocsUsersListContinue=function(e){return this.request("paper/docs/users/list/continue",e,"user","api","rpc","sharing.read")},_.paperDocsUsersRemove=function(e){return this.request("paper/docs/users/remove",e,"user","api","rpc","sharing.write")},_.paperFoldersCreate=function(e){return this.request("paper/folders/create",e,"user","api","rpc","files.content.write")},_.sharingAddFileMember=function(e){return this.request("sharing/add_file_member",e,"user","api","rpc","sharing.write")},_.sharingAddFolderMember=function(e){return this.request("sharing/add_folder_member",e,"user","api","rpc","sharing.write")},_.sharingCheckJobStatus=function(e){return this.request("sharing/check_job_status",e,"user","api","rpc","sharing.write")},_.sharingCheckRemoveMemberJobStatus=function(e){return this.request("sharing/check_remove_member_job_status",e,"user","api","rpc","sharing.write")},_.sharingCheckShareJobStatus=function(e){return this.request("sharing/check_share_job_status",e,"user","api","rpc","sharing.write")},_.sharingCreateSharedLink=function(e){return this.request("sharing/create_shared_link",e,"user","api","rpc","sharing.write")},_.sharingCreateSharedLinkWithSettings=function(e){return this.request("sharing/create_shared_link_with_settings",e,"user","api","rpc","sharing.write")},_.sharingGetFileMetadata=function(e){return this.request("sharing/get_file_metadata",e,"user","api","rpc","sharing.read")},_.sharingGetFileMetadataBatch=function(e){return this.request("sharing/get_file_metadata/batch",e,"user","api","rpc","sharing.read")},_.sharingGetFolderMetadata=function(e){return this.request("sharing/get_folder_metadata",e,"user","api","rpc","sharing.read")},_.sharingGetSharedLinkFile=function(e){return this.request("sharing/get_shared_link_file",e,"user","content","download","sharing.read")},_.sharingGetSharedLinkMetadata=function(e){return this.request("sharing/get_shared_link_metadata",e,"app, user","api","rpc","sharing.read")},_.sharingGetSharedLinks=function(e){return this.request("sharing/get_shared_links",e,"user","api","rpc","sharing.read")},_.sharingListFileMembers=function(e){return this.request("sharing/list_file_members",e,"user","api","rpc","sharing.read")},_.sharingListFileMembersBatch=function(e){return this.request("sharing/list_file_members/batch",e,"user","api","rpc","sharing.read")},_.sharingListFileMembersContinue=function(e){return this.request("sharing/list_file_members/continue",e,"user","api","rpc","sharing.read")},_.sharingListFolderMembers=function(e){return this.request("sharing/list_folder_members",e,"user","api","rpc","sharing.read")},_.sharingListFolderMembersContinue=function(e){return this.request("sharing/list_folder_members/continue",e,"user","api","rpc","sharing.read")},_.sharingListFolders=function(e){return this.request("sharing/list_folders",e,"user","api","rpc","sharing.read")},_.sharingListFoldersContinue=function(e){return this.request("sharing/list_folders/continue",e,"user","api","rpc","sharing.read")},_.sharingListMountableFolders=function(e){return this.request("sharing/list_mountable_folders",e,"user","api","rpc","sharing.read")},_.sharingListMountableFoldersContinue=function(e){return this.request("sharing/list_mountable_folders/continue",e,"user","api","rpc","sharing.read")},_.sharingListReceivedFiles=function(e){return this.request("sharing/list_received_files",e,"user","api","rpc","sharing.read")},_.sharingListReceivedFilesContinue=function(e){return this.request("sharing/list_received_files/continue",e,"user","api","rpc","sharing.read")},_.sharingListSharedLinks=function(e){return this.request("sharing/list_shared_links",e,"user","api","rpc","sharing.read")},_.sharingModifySharedLinkSettings=function(e){return this.request("sharing/modify_shared_link_settings",e,"user","api","rpc","sharing.write")},_.sharingMountFolder=function(e){return this.request("sharing/mount_folder",e,"user","api","rpc","sharing.write")},_.sharingRelinquishFileMembership=function(e){return this.request("sharing/relinquish_file_membership",e,"user","api","rpc","sharing.write")},_.sharingRelinquishFolderMembership=function(e){return this.request("sharing/relinquish_folder_membership",e,"user","api","rpc","sharing.write")},_.sharingRemoveFileMember=function(e){return this.request("sharing/remove_file_member",e,"user","api","rpc","sharing.write")},_.sharingRemoveFileMember2=function(e){return this.request("sharing/remove_file_member_2",e,"user","api","rpc","sharing.write")},_.sharingRemoveFolderMember=function(e){return this.request("sharing/remove_folder_member",e,"user","api","rpc","sharing.write")},_.sharingRevokeSharedLink=function(e){return this.request("sharing/revoke_shared_link",e,"user","api","rpc","sharing.write")},_.sharingSetAccessInheritance=function(e){return this.request("sharing/set_access_inheritance",e,"user","api","rpc","sharing.write")},_.sharingShareFolder=function(e){return this.request("sharing/share_folder",e,"user","api","rpc","sharing.write")},_.sharingTransferFolder=function(e){return this.request("sharing/transfer_folder",e,"user","api","rpc","sharing.write")},_.sharingUnmountFolder=function(e){return this.request("sharing/unmount_folder",e,"user","api","rpc","sharing.write")},_.sharingUnshareFile=function(e){return this.request("sharing/unshare_file",e,"user","api","rpc","sharing.write")},_.sharingUnshareFolder=function(e){return this.request("sharing/unshare_folder",e,"user","api","rpc","sharing.write")},_.sharingUpdateFileMember=function(e){return this.request("sharing/update_file_member",e,"user","api","rpc","sharing.write")},_.sharingUpdateFolderMember=function(e){return this.request("sharing/update_folder_member",e,"user","api","rpc","sharing.write")},_.sharingUpdateFolderPolicy=function(e){return this.request("sharing/update_folder_policy",e,"user","api","rpc","sharing.write")},_.teamDevicesListMemberDevices=function(e){return this.request("team/devices/list_member_devices",e,"team","api","rpc","sessions.list")},_.teamDevicesListMembersDevices=function(e){return this.request("team/devices/list_members_devices",e,"team","api","rpc","sessions.list")},_.teamDevicesListTeamDevices=function(e){return this.request("team/devices/list_team_devices",e,"team","api","rpc","sessions.list")},_.teamDevicesRevokeDeviceSession=function(e){return this.request("team/devices/revoke_device_session",e,"team","api","rpc","sessions.modify")},_.teamDevicesRevokeDeviceSessionBatch=function(e){return this.request("team/devices/revoke_device_session_batch",e,"team","api","rpc","sessions.modify")},_.teamFeaturesGetValues=function(e){return this.request("team/features/get_values",e,"team","api","rpc","team_info.read")},_.teamGetInfo=function(){return this.request("team/get_info",null,"team","api","rpc","team_info.read")},_.teamGroupsCreate=function(e){return this.request("team/groups/create",e,"team","api","rpc","groups.write")},_.teamGroupsDelete=function(e){return this.request("team/groups/delete",e,"team","api","rpc","groups.write")},_.teamGroupsGetInfo=function(e){return this.request("team/groups/get_info",e,"team","api","rpc","groups.read")},_.teamGroupsJobStatusGet=function(e){return this.request("team/groups/job_status/get",e,"team","api","rpc","groups.write")},_.teamGroupsList=function(e){return this.request("team/groups/list",e,"team","api","rpc","groups.read")},_.teamGroupsListContinue=function(e){return this.request("team/groups/list/continue",e,"team","api","rpc","groups.read")},_.teamGroupsMembersAdd=function(e){return this.request("team/groups/members/add",e,"team","api","rpc","groups.write")},_.teamGroupsMembersList=function(e){return this.request("team/groups/members/list",e,"team","api","rpc","groups.read")},_.teamGroupsMembersListContinue=function(e){return this.request("team/groups/members/list/continue",e,"team","api","rpc","groups.read")},_.teamGroupsMembersRemove=function(e){return this.request("team/groups/members/remove",e,"team","api","rpc","groups.write")},_.teamGroupsMembersSetAccessType=function(e){return this.request("team/groups/members/set_access_type",e,"team","api","rpc","groups.write")},_.teamGroupsUpdate=function(e){return this.request("team/groups/update",e,"team","api","rpc","groups.write")},_.teamLegalHoldsCreatePolicy=function(e){return this.request("team/legal_holds/create_policy",e,"team","api","rpc","team_data.governance.write")},_.teamLegalHoldsGetPolicy=function(e){return this.request("team/legal_holds/get_policy",e,"team","api","rpc","team_data.governance.write")},_.teamLegalHoldsListHeldRevisions=function(e){return this.request("team/legal_holds/list_held_revisions",e,"team","api","rpc","team_data.governance.write")},_.teamLegalHoldsListHeldRevisionsContinue=function(e){return this.request("team/legal_holds/list_held_revisions_continue",e,"team","api","rpc","team_data.governance.write")},_.teamLegalHoldsListPolicies=function(e){return this.request("team/legal_holds/list_policies",e,"team","api","rpc","team_data.governance.write")},_.teamLegalHoldsReleasePolicy=function(e){return this.request("team/legal_holds/release_policy",e,"team","api","rpc","team_data.governance.write")},_.teamLegalHoldsUpdatePolicy=function(e){return this.request("team/legal_holds/update_policy",e,"team","api","rpc","team_data.governance.write")},_.teamLinkedAppsListMemberLinkedApps=function(e){return this.request("team/linked_apps/list_member_linked_apps",e,"team","api","rpc","sessions.list")},_.teamLinkedAppsListMembersLinkedApps=function(e){return this.request("team/linked_apps/list_members_linked_apps",e,"team","api","rpc","sessions.list")},_.teamLinkedAppsListTeamLinkedApps=function(e){return this.request("team/linked_apps/list_team_linked_apps",e,"team","api","rpc","sessions.list")},_.teamLinkedAppsRevokeLinkedApp=function(e){return this.request("team/linked_apps/revoke_linked_app",e,"team","api","rpc","sessions.modify")},_.teamLinkedAppsRevokeLinkedAppBatch=function(e){return this.request("team/linked_apps/revoke_linked_app_batch",e,"team","api","rpc","sessions.modify")},_.teamMemberSpaceLimitsExcludedUsersAdd=function(e){return this.request("team/member_space_limits/excluded_users/add",e,"team","api","rpc","members.write")},_.teamMemberSpaceLimitsExcludedUsersList=function(e){return this.request("team/member_space_limits/excluded_users/list",e,"team","api","rpc","members.read")},_.teamMemberSpaceLimitsExcludedUsersListContinue=function(e){return this.request("team/member_space_limits/excluded_users/list/continue",e,"team","api","rpc","members.read")},_.teamMemberSpaceLimitsExcludedUsersRemove=function(e){return this.request("team/member_space_limits/excluded_users/remove",e,"team","api","rpc","members.write")},_.teamMemberSpaceLimitsGetCustomQuota=function(e){return this.request("team/member_space_limits/get_custom_quota",e,"team","api","rpc","members.read")},_.teamMemberSpaceLimitsRemoveCustomQuota=function(e){return this.request("team/member_space_limits/remove_custom_quota",e,"team","api","rpc","members.write")},_.teamMemberSpaceLimitsSetCustomQuota=function(e){return this.request("team/member_space_limits/set_custom_quota",e,"team","api","rpc","members.read")},_.teamMembersAddV2=function(e){return this.request("team/members/add_v2",e,"team","api","rpc","members.write")},_.teamMembersAdd=function(e){return this.request("team/members/add",e,"team","api","rpc","members.write")},_.teamMembersAddJobStatusGetV2=function(e){return this.request("team/members/add/job_status/get_v2",e,"team","api","rpc","members.write")},_.teamMembersAddJobStatusGet=function(e){return this.request("team/members/add/job_status/get",e,"team","api","rpc","members.write")},_.teamMembersDeleteProfilePhotoV2=function(e){return this.request("team/members/delete_profile_photo_v2",e,"team","api","rpc","members.write")},_.teamMembersDeleteProfilePhoto=function(e){return this.request("team/members/delete_profile_photo",e,"team","api","rpc","members.write")},_.teamMembersGetAvailableTeamMemberRoles=function(){return this.request("team/members/get_available_team_member_roles",null,"team","api","rpc","members.read")},_.teamMembersGetInfoV2=function(e){return this.request("team/members/get_info_v2",e,"team","api","rpc","members.read")},_.teamMembersGetInfo=function(e){return this.request("team/members/get_info",e,"team","api","rpc","members.read")},_.teamMembersListV2=function(e){return this.request("team/members/list_v2",e,"team","api","rpc","members.read")},_.teamMembersList=function(e){return this.request("team/members/list",e,"team","api","rpc","members.read")},_.teamMembersListContinueV2=function(e){return this.request("team/members/list/continue_v2",e,"team","api","rpc","members.read")},_.teamMembersListContinue=function(e){return this.request("team/members/list/continue",e,"team","api","rpc","members.read")},_.teamMembersMoveFormerMemberFiles=function(e){return this.request("team/members/move_former_member_files",e,"team","api","rpc","members.write")},_.teamMembersMoveFormerMemberFilesJobStatusCheck=function(e){return this.request("team/members/move_former_member_files/job_status/check",e,"team","api","rpc","members.write")},_.teamMembersRecover=function(e){return this.request("team/members/recover",e,"team","api","rpc","members.delete")},_.teamMembersRemove=function(e){return this.request("team/members/remove",e,"team","api","rpc","members.delete")},_.teamMembersRemoveJobStatusGet=function(e){return this.request("team/members/remove/job_status/get",e,"team","api","rpc","members.delete")},_.teamMembersSecondaryEmailsAdd=function(e){return this.request("team/members/secondary_emails/add",e,"team","api","rpc","members.write")},_.teamMembersSecondaryEmailsDelete=function(e){return this.request("team/members/secondary_emails/delete",e,"team","api","rpc","members.write")},_.teamMembersSecondaryEmailsResendVerificationEmails=function(e){return this.request("team/members/secondary_emails/resend_verification_emails",e,"team","api","rpc","members.write")},_.teamMembersSendWelcomeEmail=function(e){return this.request("team/members/send_welcome_email",e,"team","api","rpc","members.write")},_.teamMembersSetAdminPermissionsV2=function(e){return this.request("team/members/set_admin_permissions_v2",e,"team","api","rpc","members.write")},_.teamMembersSetAdminPermissions=function(e){return this.request("team/members/set_admin_permissions",e,"team","api","rpc","members.write")},_.teamMembersSetProfileV2=function(e){return this.request("team/members/set_profile_v2",e,"team","api","rpc","members.write")},_.teamMembersSetProfile=function(e){return this.request("team/members/set_profile",e,"team","api","rpc","members.write")},_.teamMembersSetProfilePhotoV2=function(e){return this.request("team/members/set_profile_photo_v2",e,"team","api","rpc","members.write")},_.teamMembersSetProfilePhoto=function(e){return this.request("team/members/set_profile_photo",e,"team","api","rpc","members.write")},_.teamMembersSuspend=function(e){return this.request("team/members/suspend",e,"team","api","rpc","members.write")},_.teamMembersUnsuspend=function(e){return this.request("team/members/unsuspend",e,"team","api","rpc","members.write")},_.teamNamespacesList=function(e){return this.request("team/namespaces/list",e,"team","api","rpc","team_data.member")},_.teamNamespacesListContinue=function(e){return this.request("team/namespaces/list/continue",e,"team","api","rpc","team_data.member")},_.teamPropertiesTemplateAdd=function(e){return this.request("team/properties/template/add",e,"team","api","rpc","files.team_metadata.write")},_.teamPropertiesTemplateGet=function(e){return this.request("team/properties/template/get",e,"team","api","rpc","files.team_metadata.write")},_.teamPropertiesTemplateList=function(){return this.request("team/properties/template/list",null,"team","api","rpc","files.team_metadata.write")},_.teamPropertiesTemplateUpdate=function(e){return this.request("team/properties/template/update",e,"team","api","rpc","files.team_metadata.write")},_.teamReportsGetActivity=function(e){return this.request("team/reports/get_activity",e,"team","api","rpc","team_info.read")},_.teamReportsGetDevices=function(e){return this.request("team/reports/get_devices",e,"team","api","rpc","team_info.read")},_.teamReportsGetMembership=function(e){return this.request("team/reports/get_membership",e,"team","api","rpc","team_info.read")},_.teamReportsGetStorage=function(e){return this.request("team/reports/get_storage",e,"team","api","rpc","team_info.read")},_.teamSharingAllowlistAdd=function(e){return this.request("team/sharing_allowlist/add",e,"team","api","rpc","team_info.write")},_.teamSharingAllowlistList=function(e){return this.request("team/sharing_allowlist/list",e,"team","api","rpc","team_info.read")},_.teamSharingAllowlistListContinue=function(e){return this.request("team/sharing_allowlist/list/continue",e,"team","api","rpc","team_info.read")},_.teamSharingAllowlistRemove=function(e){return this.request("team/sharing_allowlist/remove",e,"team","api","rpc","team_info.write")},_.teamTeamFolderActivate=function(e){return this.request("team/team_folder/activate",e,"team","api","rpc","team_data.content.write")},_.teamTeamFolderArchive=function(e){return this.request("team/team_folder/archive",e,"team","api","rpc","team_data.content.write")},_.teamTeamFolderArchiveCheck=function(e){return this.request("team/team_folder/archive/check",e,"team","api","rpc","team_data.content.write")},_.teamTeamFolderCreate=function(e){return this.request("team/team_folder/create",e,"team","api","rpc","team_data.content.write")},_.teamTeamFolderGetInfo=function(e){return this.request("team/team_folder/get_info",e,"team","api","rpc","team_data.content.read")},_.teamTeamFolderList=function(e){return this.request("team/team_folder/list",e,"team","api","rpc","team_data.content.read")},_.teamTeamFolderListContinue=function(e){return this.request("team/team_folder/list/continue",e,"team","api","rpc","team_data.content.read")},_.teamTeamFolderPermanentlyDelete=function(e){return this.request("team/team_folder/permanently_delete",e,"team","api","rpc","team_data.content.write")},_.teamTeamFolderRename=function(e){return this.request("team/team_folder/rename",e,"team","api","rpc","team_data.content.write")},_.teamTeamFolderUpdateSyncSettings=function(e){return this.request("team/team_folder/update_sync_settings",e,"team","api","rpc","team_data.content.write")},_.teamTokenGetAuthenticatedAdmin=function(){return this.request("team/token/get_authenticated_admin",null,"team","api","rpc","team_info.read")},_.teamLogGetEvents=function(e){return this.request("team_log/get_events",e,"team","api","rpc","events.read")},_.teamLogGetEventsContinue=function(e){return this.request("team_log/get_events/continue",e,"team","api","rpc","events.read")},_.usersFeaturesGetValues=function(e){return this.request("users/features/get_values",e,"user","api","rpc","account_info.read")},_.usersGetAccount=function(e){return this.request("users/get_account",e,"user","api","rpc","sharing.read")},_.usersGetAccountBatch=function(e){return this.request("users/get_account_batch",e,"user","api","rpc","sharing.read")},_.usersGetCurrentAccount=function(){return this.request("users/get_current_account",null,"user","api","rpc","account_info.read")},_.usersGetSpaceUsage=function(){return this.request("users/get_space_usage",null,"user","api","rpc","account_info.read")};var q=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:m,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";return r?(t!==m&&void 0!==d[e]&&(e=d[e],r="-"),"https://".concat(e).concat(r).concat(t,"/2/")):"https://".concat(t,"/2/")},b=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:h;return e!==h&&(e="meta-".concat(e)),"https://".concat(e,"/oauth2/authorize")},v=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:m,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".",r="api";return e!==m&&(r=d[r],t="-"),"https://".concat(r).concat(t).concat(e,"/oauth2/token")};function w(e){return JSON.stringify(e).replace(/[\u007f-\uffff]/g,g)}function k(e){return new Date(Date.now()+1e3*e)}function y(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||"undefined"=="object"||"undefined"!=typeof window}function A(){return"undefined"!=typeof window}function S(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope}function C(e){return e.toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}var T,L,M,P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}(u,e);var r,i,o=(r=u,i=a(),function(){var e,t=s(r);if(i){var n=s(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function u(e,r,i){var s;return t(this,u),(s=o.call(this,"Response failed with a ".concat(e," code"))).name="DropboxResponseError",s.status=e,s.headers=r,s.error=i,s}return u}(u(Error)),R=function e(r,i,s){t(this,e),this.status=r,this.headers=i,this.result=s};function F(e){return e.text().then((function(t){var r;try{r=JSON.parse(t)}catch(e){r=t}throw new P(e.status,e.headers,r)}))}function D(e){return e.ok?e.text().then((function(t){var r;try{r=JSON.parse(t)}catch(e){r=t}return new R(e.status,e.headers,r)})):F(e)}var G=["legacy","offline","online"],U=["code","token"],x=["none","user","team"],E=function(){function e(r){t(this,e),r=r||{},A()?(T=window.fetch.bind(window),L=window.crypto||window.msCrypto):S()?(T=self.fetch.bind(self),L=self.crypto):(T=__webpack_require__(898),L=__webpack_require__(90)),M="undefined"==typeof TextEncoder?(__webpack_require__(974).TextEncoder):TextEncoder,this.fetch=r.fetch||T,this.accessToken=r.accessToken,this.accessTokenExpiresAt=r.accessTokenExpiresAt,this.refreshToken=r.refreshToken,this.clientId=r.clientId,this.clientSecret=r.clientSecret,this.domain=r.domain,this.domainDelimiter=r.domainDelimiter,this.customHeaders=r.customHeaders,this.dataOnBody=r.dataOnBody}return i(e,[{key:"setAccessToken",value:function(e){this.accessToken=e}},{key:"getAccessToken",value:function(){return this.accessToken}},{key:"setClientId",value:function(e){this.clientId=e}},{key:"getClientId",value:function(){return this.clientId}},{key:"setClientSecret",value:function(e){this.clientSecret=e}},{key:"getClientSecret",value:function(){return this.clientSecret}},{key:"getRefreshToken",value:function(){return this.refreshToken}},{key:"setRefreshToken",value:function(e){this.refreshToken=e}},{key:"getAccessTokenExpiresAt",value:function(){return this.accessTokenExpiresAt}},{key:"setAccessTokenExpiresAt",value:function(e){this.accessTokenExpiresAt=e}},{key:"setCodeVerifier",value:function(e){this.codeVerifier=e}},{key:"getCodeVerifier",value:function(){return this.codeVerifier}},{key:"generateCodeChallenge",value:function(){var e,t=this,r=(new M).encode(this.codeVerifier);if(A()||S())return L.subtle.digest("SHA-256",r).then((function(r){var i=btoa(String.fromCharCode.apply(null,new Uint8Array(r)));e=C(i).substr(0,128),t.codeChallenge=e}));var i=L.createHash("sha256").update(r).digest();return e=C(i),this.codeChallenge=e,Promise.resolve()}},{key:"generatePKCECodes",value:function(){var e;if(A()||S()){var t=new Uint8Array(128),r=L.getRandomValues(t);e=C(btoa(r)).substr(0,128)}else{e=C(L.randomBytes(128)).substr(0,128)}return this.codeVerifier=e,this.generateCodeChallenge()}},{key:"getAuthenticationUrl",value:function(e,t){var r,i=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"token",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"none",u=arguments.length>6&&void 0!==arguments[6]&&arguments[6],c=this.getClientId(),p=b(this.domain);if(!c)throw Error("A client id is required. You can set the client id using .setClientId().");if("code"!==s&&!e)throw Error("A redirect uri is required.");if(!U.includes(s))throw Error("Authorization type must be code or token");if(n&&!G.includes(n))throw Error("Token Access Type must be legacy, offline, or online");if(a&&!(a instanceof Array))throw Error("Scope must be an array of strings");if(!x.includes(o))throw Error("includeGrantedScopes must be none, user, or team");return r="code"===s?"".concat(p,"?response_type=code&client_id=").concat(c):"".concat(p,"?response_type=token&client_id=").concat(c),e&&(r+="&redirect_uri=".concat(e)),t&&(r+="&state=".concat(t)),n&&(r+="&token_access_type=".concat(n)),a&&(r+="&scope=".concat(a.join(" "))),"none"!==o&&(r+="&include_granted_scopes=".concat(o)),u?this.generatePKCECodes().then((function(){return r+="&code_challenge_method=S256",r+="&code_challenge=".concat(i.codeChallenge)})):Promise.resolve(r)}},{key:"getAccessTokenFromCode",value:function(e,t){var r=this.getClientId(),i=this.getClientSecret();if(!r)throw Error("A client id is required. You can set the client id using .setClientId().");var s=v(this.domain,this.domainDelimiter);if(s+="?grant_type=authorization_code",s+="&code=".concat(t),s+="&client_id=".concat(r),i)s+="&client_secret=".concat(i);else{if(!this.codeVerifier)throw Error("You must use PKCE when generating the authorization URL to not include a client secret");s+="&code_verifier=".concat(this.codeVerifier)}e&&(s+="&redirect_uri=".concat(e));return this.fetch(s,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then((function(e){return D(e)}))}},{key:"checkAndRefreshAccessToken",value:function(){var e=this.getRefreshToken()&&this.getClientId(),t=!this.getAccessTokenExpiresAt()||new Date(Date.now()+3e5)>=this.getAccessTokenExpiresAt(),r=!this.getAccessToken();return(t||r)&&e?this.refreshAccessToken():Promise.resolve()}},{key:"refreshAccessToken",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,r=this.getClientId(),i=this.getClientSecret();if(!r)throw Error("A client id is required. You can set the client id using .setClientId().");if(t&&!(t instanceof Array))throw Error("Scope must be an array of strings");var s=v(this.domain,this.domainDelimiter),n={headers:{"Content-Type":"application/json"},method:"POST"};if(this.dataOnBody){var a={grant_type:"refresh_token",client_id:r,refresh_token:this.getRefreshToken()};i&&(a.client_secret=i),t&&(a.scope=t.join(" ")),n.body=a}else s+="?grant_type=refresh_token&refresh_token=".concat(this.getRefreshToken()),s+="&client_id=".concat(r),i&&(s+="&client_secret=".concat(i)),t&&(s+="&scope=".concat(t.join(" ")));return this.fetch(s,n).then((function(e){return D(e)})).then((function(t){e.setAccessToken(t.result.access_token),e.setAccessTokenExpiresAt(k(t.result.expires_in))}))}}]),e}(),B="undefined"==typeof btoa?function(e){return Buffer.from(e).toString("base64")}:btoa;e.Dropbox=function(){function e(r){t(this,e),this.auth=(r=r||{}).auth?r.auth:new E(r),this.fetch=r.fetch||this.auth.fetch,this.selectUser=r.selectUser,this.selectAdmin=r.selectAdmin,this.pathRoot=r.pathRoot,this.domain=r.domain||this.auth.domain,this.domainDelimiter=r.domainDelimiter||this.auth.domainDelimiter,this.customHeaders=r.customHeaders||this.auth.customHeaders,Object.assign(this,_)}return i(e,[{key:"request",value:function(e,t,r,i,s){switch(s){case"rpc":return this.rpcRequest(e,t,r,i);case"download":return this.downloadRequest(e,t,r,i);case"upload":return this.uploadRequest(e,t,r,i);default:throw Error("Invalid request style: ".concat(s))}}},{key:"rpcRequest",value:function(e,t,r,i){var s=this;return this.auth.checkAndRefreshAccessToken().then((function(){var e={method:"POST",body:t?JSON.stringify(t):null,headers:{}};return t&&(e.headers["Content-Type"]="application/json"),s.setAuthHeaders(r,e),s.setCommonHeaders(e),e})).then((function(t){return s.fetch(q(i,s.domain,s.domainDelimiter)+e,t)})).then((function(e){return D(e)}))}},{key:"downloadRequest",value:function(e,t,r,i){var s=this;return this.auth.checkAndRefreshAccessToken().then((function(){var e={method:"POST",headers:{"Dropbox-API-Arg":w(t)}};return s.setAuthHeaders(r,e),s.setCommonHeaders(e),e})).then((function(t){return s.fetch(q(i,s.domain,s.domainDelimiter)+e,t)})).then((function(e){return function(e){return e.ok?new Promise((function(t){y()?e.blob().then((function(e){return t(e)})):e.buffer().then((function(e){return t(e)}))})).then((function(t){var r=JSON.parse(e.headers.get("dropbox-api-result"));return y()?r.fileBlob=t:r.fileBinary=t,new R(e.status,e.headers,r)})):F(e)}(e)}))}},{key:"uploadRequest",value:function(e,t,r,i){var s=this;return this.auth.checkAndRefreshAccessToken().then((function(){var e=t.contents;delete t.contents;var i={body:e,method:"POST",headers:{"Content-Type":"application/octet-stream","Dropbox-API-Arg":w(t)}};return s.setAuthHeaders(r,i),s.setCommonHeaders(i),i})).then((function(t){return s.fetch(q(i,s.domain,s.domainDelimiter)+e,t)})).then((function(e){return D(e)}))}},{key:"setAuthHeaders",value:function(e,t){if(e.split(",").length>1){var r=e.replace(" ","").split(",");r.includes(l)&&this.auth.getAccessToken()?e=l:r.includes(f)&&this.auth.getAccessToken()?e=f:r.includes(p)&&(e=p)}switch(e){case p:if(this.auth.clientId&&this.auth.clientSecret){var i=B("".concat(this.auth.clientId,":").concat(this.auth.clientSecret));t.headers.Authorization="Basic ".concat(i)}break;case f:case l:this.auth.getAccessToken()&&(t.headers.Authorization="Bearer ".concat(this.auth.getAccessToken()));break;case"noauth":case"cookie":break;default:throw Error("Unhandled auth type: ".concat(e))}}},{key:"setCommonHeaders",value:function(e){var t=this;(this.selectUser&&(e.headers["Dropbox-API-Select-User"]=this.selectUser),this.selectAdmin&&(e.headers["Dropbox-API-Select-Admin"]=this.selectAdmin),this.pathRoot&&(e.headers["Dropbox-API-Path-Root"]=this.pathRoot),this.customHeaders)&&Object.keys(this.customHeaders).forEach((function(r){e.headers[r]=t.customHeaders[r]}))}}]),e}(),e.DropboxAuth=E,e.DropboxResponse=R,e.DropboxResponseError=P,Object.defineProperty(e,"__esModule",{value:!0})}));


/***/ }),

/***/ 720:
/***/ ((module) => {

"use strict";


module.exports = earcut;
module.exports["default"] = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode || outerNode.next === outerNode.prev) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);

            removeNode(ear);

            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

    var p = c.next;
    while (p !== a) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(x0, y0, minX, minY, invSize),
        maxZ = zOrder(x1, y1, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return filterPoints(p);
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
        return outerNode;
    }

    var bridgeReverse = splitPolygon(bridge, hole);

    // filter collinear points around the cuts
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m;

    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if (locallyInside(p, hole) &&
                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    } while (p !== stop);

    return m;
}

// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&
           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&
           (bx - px) * (cy - py) >= (cx - px) * (by - py);
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    var o1 = sign(area(p1, q1, p2));
    var o2 = sign(area(p1, q1, q2));
    var o3 = sign(area(p2, q2, p1));
    var o4 = sign(area(p2, q2, q1));

    if (o1 !== o2 && o3 !== o4) return true; // general case

    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

    return false;
}

// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}

function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = 0;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),

/***/ 587:
/***/ (function(module) {

"use strict";
/*

 Copyright 2000, Silicon Graphics, Inc. All Rights Reserved.
 Copyright 2015, Google Inc. All Rights Reserved.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to
 deal in the Software without restriction, including without limitation the
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice including the dates of first publication and
 either this permission notice or a reference to http://oss.sgi.com/projects/FreeB/
 shall be included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Original Code. The Original Code is: OpenGL Sample Implementation,
 Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
 Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
 Copyright in any portions created by third parties is as indicated
 elsewhere herein. All Rights Reserved.
*/
var n;function t(a,b){return a.b===b.b&&a.a===b.a}function u(a,b){return a.b<b.b||a.b===b.b&&a.a<=b.a}function v(a,b,c){var d=b.b-a.b,e=c.b-b.b;return 0<d+e?d<e?b.a-a.a+d/(d+e)*(a.a-c.a):b.a-c.a+e/(d+e)*(c.a-a.a):0}function x(a,b,c){var d=b.b-a.b,e=c.b-b.b;return 0<d+e?(b.a-c.a)*d+(b.a-a.a)*e:0}function z(a,b){return a.a<b.a||a.a===b.a&&a.b<=b.b}function aa(a,b,c){var d=b.a-a.a,e=c.a-b.a;return 0<d+e?d<e?b.b-a.b+d/(d+e)*(a.b-c.b):b.b-c.b+e/(d+e)*(c.b-a.b):0}
function ba(a,b,c){var d=b.a-a.a,e=c.a-b.a;return 0<d+e?(b.b-c.b)*d+(b.b-a.b)*e:0}function ca(a){return u(a.b.a,a.a)}function da(a){return u(a.a,a.b.a)}function A(a,b,c,d){a=0>a?0:a;c=0>c?0:c;return a<=c?0===c?(b+d)/2:b+a/(a+c)*(d-b):d+c/(a+c)*(b-d)};function ea(a){var b=B(a.b);C(b,a.c);C(b.b,a.c);D(b,a.a);return b}function E(a,b){var c=!1,d=!1;a!==b&&(b.a!==a.a&&(d=!0,F(b.a,a.a)),b.d!==a.d&&(c=!0,G(b.d,a.d)),H(b,a),d||(C(b,a.a),a.a.c=a),c||(D(b,a.d),a.d.a=a))}function I(a){var b=a.b,c=!1;a.d!==a.b.d&&(c=!0,G(a.d,a.b.d));a.c===a?F(a.a,null):(a.b.d.a=J(a),a.a.c=a.c,H(a,J(a)),c||D(a,a.d));b.c===b?(F(b.a,null),G(b.d,null)):(a.d.a=J(b),b.a.c=b.c,H(b,J(b)));fa(a)}
function K(a){var b=B(a),c=b.b;H(b,a.e);b.a=a.b.a;C(c,b.a);b.d=c.d=a.d;b=b.b;H(a.b,J(a.b));H(a.b,b);a.b.a=b.a;b.b.a.c=b.b;b.b.d=a.b.d;b.f=a.f;b.b.f=a.b.f;return b}function L(a,b){var c=!1,d=B(a),e=d.b;b.d!==a.d&&(c=!0,G(b.d,a.d));H(d,a.e);H(e,b);d.a=a.b.a;e.a=b.a;d.d=e.d=a.d;a.d.a=e;c||D(d,a.d);return d}function B(a){var b=new M,c=new M,d=a.b.h;c.h=d;d.b.h=b;b.h=a;a.b.h=c;b.b=c;b.c=b;b.e=c;c.b=b;c.c=c;return c.e=b}function H(a,b){var c=a.c,d=b.c;c.b.e=b;d.b.e=a;a.c=d;b.c=c}
function C(a,b){var c=b.f,d=new N(b,c);c.e=d;b.f=d;c=d.c=a;do c.a=d,c=c.c;while(c!==a)}function D(a,b){var c=b.d,d=new ga(b,c);c.b=d;b.d=d;d.a=a;d.c=b.c;c=a;do c.d=d,c=c.e;while(c!==a)}function fa(a){var b=a.h;a=a.b.h;b.b.h=a;a.b.h=b}function F(a,b){var c=a.c,d=c;do d.a=b,d=d.c;while(d!==c);c=a.f;d=a.e;d.f=c;c.e=d}function G(a,b){var c=a.a,d=c;do d.d=b,d=d.e;while(d!==c);c=a.d;d=a.b;d.d=c;c.b=d};function ha(a){var b=0;Math.abs(a[1])>Math.abs(a[0])&&(b=1);Math.abs(a[2])>Math.abs(a[b])&&(b=2);return b};var O=4*1E150;function P(a,b){a.f+=b.f;a.b.f+=b.b.f}function ia(a,b,c){a=a.a;b=b.a;c=c.a;if(b.b.a===a)return c.b.a===a?u(b.a,c.a)?0>=x(c.b.a,b.a,c.a):0<=x(b.b.a,c.a,b.a):0>=x(c.b.a,a,c.a);if(c.b.a===a)return 0<=x(b.b.a,a,b.a);b=v(b.b.a,a,b.a);a=v(c.b.a,a,c.a);return b>=a}function Q(a){a.a.i=null;var b=a.e;b.a.c=b.c;b.c.a=b.a;a.e=null}function ja(a,b){I(a.a);a.c=!1;a.a=b;b.i=a}function ka(a){var b=a.a.a;do a=R(a);while(a.a.a===b);a.c&&(b=L(S(a).a.b,a.a.e),ja(a,b),a=R(a));return a}
function la(a,b,c){var d=new ma;d.a=c;d.e=na(a.f,b.e,d);return c.i=d}function oa(a,b){switch(a.s){case 100130:return 0!==(b&1);case 100131:return 0!==b;case 100132:return 0<b;case 100133:return 0>b;case 100134:return 2<=b||-2>=b}return!1}function pa(a){var b=a.a,c=b.d;c.c=a.d;c.a=b;Q(a)}function T(a,b,c){a=b;for(b=b.a;a!==c;){a.c=!1;var d=S(a),e=d.a;if(e.a!==b.a){if(!d.c){pa(a);break}e=L(b.c.b,e.b);ja(d,e)}b.c!==e&&(E(J(e),e),E(b,e));pa(a);b=d.a;a=d}return b}
function U(a,b,c,d,e,f){var g=!0;do la(a,b,c.b),c=c.c;while(c!==d);for(null===e&&(e=S(b).a.b.c);;){d=S(b);c=d.a.b;if(c.a!==e.a)break;c.c!==e&&(E(J(c),c),E(J(e),c));d.f=b.f-c.f;d.d=oa(a,d.f);b.b=!0;!g&&qa(a,b)&&(P(c,e),Q(b),I(e));g=!1;b=d;e=c}b.b=!0;f&&ra(a,b)}function sa(a,b,c,d,e){var f=[b.g[0],b.g[1],b.g[2]];b.d=null;b.d=a.o?a.o(f,c,d,a.c)||null:null;null===b.d&&(e?a.n||(V(a,100156),a.n=!0):b.d=c[0])}
function ta(a,b,c){var d=[null,null,null,null];d[0]=b.a.d;d[1]=c.a.d;sa(a,b.a,d,[.5,.5,0,0],!1);E(b,c)}function ua(a,b,c,d,e){var f=Math.abs(b.b-a.b)+Math.abs(b.a-a.a),g=Math.abs(c.b-a.b)+Math.abs(c.a-a.a),h=e+1;d[e]=.5*g/(f+g);d[h]=.5*f/(f+g);a.g[0]+=d[e]*b.g[0]+d[h]*c.g[0];a.g[1]+=d[e]*b.g[1]+d[h]*c.g[1];a.g[2]+=d[e]*b.g[2]+d[h]*c.g[2]}
function qa(a,b){var c=S(b),d=b.a,e=c.a;if(u(d.a,e.a)){if(0<x(e.b.a,d.a,e.a))return!1;if(!t(d.a,e.a))K(e.b),E(d,J(e)),b.b=c.b=!0;else if(d.a!==e.a){var c=a.e,f=d.a.h;if(0<=f){var c=c.b,g=c.d,h=c.e,k=c.c,l=k[f];g[l]=g[c.a];k[g[l]]=l;l<=--c.a&&(1>=l?W(c,l):u(h[g[l>>1]],h[g[l]])?W(c,l):va(c,l));h[f]=null;k[f]=c.b;c.b=f}else for(c.c[-(f+1)]=null;0<c.a&&null===c.c[c.d[c.a-1]];)--c.a;ta(a,J(e),d)}}else{if(0>x(d.b.a,e.a,d.a))return!1;R(b).b=b.b=!0;K(d.b);E(J(e),d)}return!0}
function wa(a,b){var c=S(b),d=b.a,e=c.a,f=d.a,g=e.a,h=d.b.a,k=e.b.a,l=new N;x(h,a.a,f);x(k,a.a,g);if(f===g||Math.min(f.a,h.a)>Math.max(g.a,k.a))return!1;if(u(f,g)){if(0<x(k,f,g))return!1}else if(0>x(h,g,f))return!1;var r=h,p=f,q=k,y=g,m,w;u(r,p)||(m=r,r=p,p=m);u(q,y)||(m=q,q=y,y=m);u(r,q)||(m=r,r=q,q=m,m=p,p=y,y=m);u(q,p)?u(p,y)?(m=v(r,q,p),w=v(q,p,y),0>m+w&&(m=-m,w=-w),l.b=A(m,q.b,w,p.b)):(m=x(r,q,p),w=-x(r,y,p),0>m+w&&(m=-m,w=-w),l.b=A(m,q.b,w,y.b)):l.b=(q.b+p.b)/2;z(r,p)||(m=r,r=p,p=m);z(q,y)||
(m=q,q=y,y=m);z(r,q)||(m=r,r=q,q=m,m=p,p=y,y=m);z(q,p)?z(p,y)?(m=aa(r,q,p),w=aa(q,p,y),0>m+w&&(m=-m,w=-w),l.a=A(m,q.a,w,p.a)):(m=ba(r,q,p),w=-ba(r,y,p),0>m+w&&(m=-m,w=-w),l.a=A(m,q.a,w,y.a)):l.a=(q.a+p.a)/2;u(l,a.a)&&(l.b=a.a.b,l.a=a.a.a);r=u(f,g)?f:g;u(r,l)&&(l.b=r.b,l.a=r.a);if(t(l,f)||t(l,g))return qa(a,b),!1;if(!t(h,a.a)&&0<=x(h,a.a,l)||!t(k,a.a)&&0>=x(k,a.a,l)){if(k===a.a)return K(d.b),E(e.b,d),b=ka(b),d=S(b).a,T(a,S(b),c),U(a,b,J(d),d,d,!0),!0;if(h===a.a){K(e.b);E(d.e,J(e));f=c=b;g=f.a.b.a;
do f=R(f);while(f.a.b.a===g);b=f;f=S(b).a.b.c;c.a=J(e);e=T(a,c,null);U(a,b,e.c,d.b.c,f,!0);return!0}0<=x(h,a.a,l)&&(R(b).b=b.b=!0,K(d.b),d.a.b=a.a.b,d.a.a=a.a.a);0>=x(k,a.a,l)&&(b.b=c.b=!0,K(e.b),e.a.b=a.a.b,e.a.a=a.a.a);return!1}K(d.b);K(e.b);E(J(e),d);d.a.b=l.b;d.a.a=l.a;d.a.h=xa(a.e,d.a);d=d.a;e=[0,0,0,0];l=[f.d,h.d,g.d,k.d];d.g[0]=d.g[1]=d.g[2]=0;ua(d,f,h,e,0);ua(d,g,k,e,2);sa(a,d,l,e,!0);R(b).b=b.b=c.b=!0;return!1}
function ra(a,b){for(var c=S(b);;){for(;c.b;)b=c,c=S(c);if(!b.b&&(c=b,b=R(b),null===b||!b.b))break;b.b=!1;var d=b.a,e=c.a,f;if(f=d.b.a!==e.b.a)a:{f=b;var g=S(f),h=f.a,k=g.a,l=void 0;if(u(h.b.a,k.b.a)){if(0>x(h.b.a,k.b.a,h.a)){f=!1;break a}R(f).b=f.b=!0;l=K(h);E(k.b,l);l.d.c=f.d}else{if(0<x(k.b.a,h.b.a,k.a)){f=!1;break a}f.b=g.b=!0;l=K(k);E(h.e,k.b);l.b.d.c=f.d}f=!0}f&&(c.c?(Q(c),I(e),c=S(b),e=c.a):b.c&&(Q(b),I(d),b=R(c),d=b.a));if(d.a!==e.a)if(d.b.a===e.b.a||b.c||c.c||d.b.a!==a.a&&e.b.a!==a.a)qa(a,
b);else if(wa(a,b))break;d.a===e.a&&d.b.a===e.b.a&&(P(e,d),Q(b),I(d),b=R(c))}}
function ya(a,b){a.a=b;for(var c=b.c;null===c.i;)if(c=c.c,c===b.c){var c=a,d=b,e=new ma;e.a=d.c.b;var f=c.f,g=f.a;do g=g.a;while(null!==g.b&&!f.c(f.b,e,g.b));var f=g.b,h=S(f),e=f.a,g=h.a;if(0===x(e.b.a,d,e.a))e=f.a,t(e.a,d)||t(e.b.a,d)||(K(e.b),f.c&&(I(e.c),f.c=!1),E(d.c,e),ya(c,d));else{var k=u(g.b.a,e.b.a)?f:h,h=void 0;f.d||k.c?(k===f?h=L(d.c.b,e.e):h=L(g.b.c.b,d.c).b,k.c?ja(k,h):(e=c,f=la(c,f,h),f.f=R(f).f+f.a.f,f.d=oa(e,f.f)),ya(c,d)):U(c,f,d.c,d.c,null,!0)}return}c=ka(c.i);e=S(c);f=e.a;e=T(a,
e,null);if(e.c===f){var f=e,e=f.c,g=S(c),h=c.a,k=g.a,l=!1;h.b.a!==k.b.a&&wa(a,c);t(h.a,a.a)&&(E(J(e),h),c=ka(c),e=S(c).a,T(a,S(c),g),l=!0);t(k.a,a.a)&&(E(f,J(k)),f=T(a,g,null),l=!0);l?U(a,c,f.c,e,e,!0):(u(k.a,h.a)?d=J(k):d=h,d=L(f.c.b,d),U(a,c,d,d.c,d.c,!1),d.b.i.c=!0,ra(a,c))}else U(a,c,e.c,f,f,!0)}function za(a,b){var c=new ma,d=ea(a.b);d.a.b=O;d.a.a=b;d.b.a.b=-O;d.b.a.a=b;a.a=d.b.a;c.a=d;c.f=0;c.d=!1;c.c=!1;c.h=!0;c.b=!1;d=a.f;d=na(d,d.a,c);c.e=d};function Aa(a){this.a=new Ba;this.b=a;this.c=ia}function na(a,b,c){do b=b.c;while(null!==b.b&&!a.c(a.b,b.b,c));a=new Ba(c,b.a,b);b.a.c=a;return b.a=a};function Ba(a,b,c){this.b=a||null;this.a=b||this;this.c=c||this};function X(){this.d=Y;this.p=this.b=this.q=null;this.j=[0,0,0];this.s=100130;this.n=!1;this.o=this.a=this.e=this.f=null;this.m=!1;this.c=this.r=this.i=this.k=this.l=this.h=null}var Y=0;n=X.prototype;n.x=function(){Z(this,Y)};n.B=function(a,b){switch(a){case 100142:return;case 100140:switch(b){case 100130:case 100131:case 100132:case 100133:case 100134:this.s=b;return}break;case 100141:this.m=!!b;return;default:V(this,100900);return}V(this,100901)};
n.y=function(a){switch(a){case 100142:return 0;case 100140:return this.s;case 100141:return this.m;default:V(this,100900)}return!1};n.A=function(a,b,c){this.j[0]=a;this.j[1]=b;this.j[2]=c};
n.z=function(a,b){var c=b?b:null;switch(a){case 100100:case 100106:this.h=c;break;case 100104:case 100110:this.l=c;break;case 100101:case 100107:this.k=c;break;case 100102:case 100108:this.i=c;break;case 100103:case 100109:this.p=c;break;case 100105:case 100111:this.o=c;break;case 100112:this.r=c;break;default:V(this,100900)}};
n.C=function(a,b){var c=!1,d=[0,0,0];Z(this,2);for(var e=0;3>e;++e){var f=a[e];-1E150>f&&(f=-1E150,c=!0);1E150<f&&(f=1E150,c=!0);d[e]=f}c&&V(this,100155);c=this.q;null===c?(c=ea(this.b),E(c,c.b)):(K(c),c=c.e);c.a.d=b;c.a.g[0]=d[0];c.a.g[1]=d[1];c.a.g[2]=d[2];c.f=1;c.b.f=-1;this.q=c};n.u=function(a){Z(this,Y);this.d=1;this.b=new Ca;this.c=a};n.t=function(){Z(this,1);this.d=2;this.q=null};n.v=function(){Z(this,2);this.d=1};
n.w=function(){Z(this,1);this.d=Y;var a=this.j[0],b=this.j[1],c=this.j[2],d=!1,e=[a,b,c];if(0===a&&0===b&&0===c){for(var b=[-2*1E150,-2*1E150,-2*1E150],f=[2*1E150,2*1E150,2*1E150],c=[],g=[],d=this.b.c,a=d.e;a!==d;a=a.e)for(var h=0;3>h;++h){var k=a.g[h];k<f[h]&&(f[h]=k,g[h]=a);k>b[h]&&(b[h]=k,c[h]=a)}a=0;b[1]-f[1]>b[0]-f[0]&&(a=1);b[2]-f[2]>b[a]-f[a]&&(a=2);if(f[a]>=b[a])e[0]=0,e[1]=0,e[2]=1;else{b=0;f=g[a];c=c[a];g=[0,0,0];f=[f.g[0]-c.g[0],f.g[1]-c.g[1],f.g[2]-c.g[2]];h=[0,0,0];for(a=d.e;a!==d;a=
a.e)h[0]=a.g[0]-c.g[0],h[1]=a.g[1]-c.g[1],h[2]=a.g[2]-c.g[2],g[0]=f[1]*h[2]-f[2]*h[1],g[1]=f[2]*h[0]-f[0]*h[2],g[2]=f[0]*h[1]-f[1]*h[0],k=g[0]*g[0]+g[1]*g[1]+g[2]*g[2],k>b&&(b=k,e[0]=g[0],e[1]=g[1],e[2]=g[2]);0>=b&&(e[0]=e[1]=e[2]=0,e[ha(f)]=1)}d=!0}g=ha(e);a=this.b.c;b=(g+1)%3;c=(g+2)%3;g=0<e[g]?1:-1;for(e=a.e;e!==a;e=e.e)e.b=e.g[b],e.a=g*e.g[c];if(d){e=0;d=this.b.a;for(a=d.b;a!==d;a=a.b)if(b=a.a,!(0>=b.f)){do e+=(b.a.b-b.b.a.b)*(b.a.a+b.b.a.a),b=b.e;while(b!==a.a)}if(0>e)for(e=this.b.c,d=e.e;d!==
e;d=d.e)d.a=-d.a}this.n=!1;e=this.b.b;for(a=e.h;a!==e;a=d)if(d=a.h,b=a.e,t(a.a,a.b.a)&&a.e.e!==a&&(ta(this,b,a),I(a),a=b,b=a.e),b.e===a){if(b!==a){if(b===d||b===d.b)d=d.h;I(b)}if(a===d||a===d.b)d=d.h;I(a)}this.e=e=new Da;d=this.b.c;for(a=d.e;a!==d;a=a.e)a.h=xa(e,a);Ea(e);this.f=new Aa(this);za(this,-O);for(za(this,O);null!==(e=Fa(this.e));){for(;;){a:if(a=this.e,0===a.a)d=Ga(a.b);else if(d=a.c[a.d[a.a-1]],0!==a.b.a&&(a=Ga(a.b),u(a,d))){d=a;break a}if(null===d||!t(d,e))break;d=Fa(this.e);ta(this,e.c,
d.c)}ya(this,e)}this.a=this.f.a.a.b.a.a;for(e=0;null!==(d=this.f.a.a.b);)d.h||++e,Q(d);this.f=null;e=this.e;e.b=null;e.d=null;this.e=e.c=null;e=this.b;for(a=e.a.b;a!==e.a;a=d)d=a.b,a=a.a,a.e.e===a&&(P(a.c,a),I(a));if(!this.n){e=this.b;if(this.m)for(a=e.b.h;a!==e.b;a=d)d=a.h,a.b.d.c!==a.d.c?a.f=a.d.c?1:-1:I(a);else for(a=e.a.b;a!==e.a;a=d)if(d=a.b,a.c){for(a=a.a;u(a.b.a,a.a);a=a.c.b);for(;u(a.a,a.b.a);a=a.e);b=a.c.b;for(c=void 0;a.e!==b;)if(u(a.b.a,b.a)){for(;b.e!==a&&(ca(b.e)||0>=x(b.a,b.b.a,b.e.b.a));)c=
L(b.e,b),b=c.b;b=b.c.b}else{for(;b.e!==a&&(da(a.c.b)||0<=x(a.b.a,a.a,a.c.b.a));)c=L(a,a.c.b),a=c.b;a=a.e}for(;b.e.e!==a;)c=L(b.e,b),b=c.b}if(this.h||this.i||this.k||this.l)if(this.m)for(e=this.b,d=e.a.b;d!==e.a;d=d.b){if(d.c){this.h&&this.h(2,this.c);a=d.a;do this.k&&this.k(a.a.d,this.c),a=a.e;while(a!==d.a);this.i&&this.i(this.c)}}else{e=this.b;d=!!this.l;a=!1;b=-1;for(c=e.a.d;c!==e.a;c=c.d)if(c.c){a||(this.h&&this.h(4,this.c),a=!0);g=c.a;do d&&(f=g.b.d.c?0:1,b!==f&&(b=f,this.l&&this.l(!!b,this.c))),
this.k&&this.k(g.a.d,this.c),g=g.e;while(g!==c.a)}a&&this.i&&this.i(this.c)}if(this.r){e=this.b;for(a=e.a.b;a!==e.a;a=d)if(d=a.b,!a.c){b=a.a;c=b.e;g=void 0;do g=c,c=g.e,g.d=null,null===g.b.d&&(g.c===g?F(g.a,null):(g.a.c=g.c,H(g,J(g))),f=g.b,f.c===f?F(f.a,null):(f.a.c=f.c,H(f,J(f))),fa(g));while(g!==b);b=a.d;a=a.b;a.d=b;b.b=a}this.r(this.b);this.c=this.b=null;return}}this.b=this.c=null};
function Z(a,b){if(a.d!==b)for(;a.d!==b;)if(a.d<b)switch(a.d){case Y:V(a,100151);a.u(null);break;case 1:V(a,100152),a.t()}else switch(a.d){case 2:V(a,100154);a.v();break;case 1:V(a,100153),a.w()}}function V(a,b){a.p&&a.p(b,a.c)};function ga(a,b){this.b=a||this;this.d=b||this;this.a=null;this.c=!1};function M(){this.h=this;this.i=this.d=this.a=this.e=this.c=this.b=null;this.f=0}function J(a){return a.b.e};function Ca(){this.c=new N;this.a=new ga;this.b=new M;this.d=new M;this.b.b=this.d;this.d.b=this.b};function N(a,b){this.e=a||this;this.f=b||this;this.d=this.c=null;this.g=[0,0,0];this.h=this.a=this.b=0};function Da(){this.c=[];this.d=null;this.a=0;this.e=!1;this.b=new Ha}function Ea(a){a.d=[];for(var b=0;b<a.a;b++)a.d[b]=b;a.d.sort(function(a){return function(b,e){return u(a[b],a[e])?1:-1}}(a.c));a.e=!0;Ia(a.b)}function xa(a,b){if(a.e){var c=a.b,d=++c.a;2*d>c.f&&(c.f*=2,c.c=Ja(c.c,c.f+1));var e;0===c.b?e=d:(e=c.b,c.b=c.c[c.b]);c.e[e]=b;c.c[e]=d;c.d[d]=e;c.h&&va(c,d);return e}c=a.a++;a.c[c]=b;return-(c+1)}
function Fa(a){if(0===a.a)return Ka(a.b);var b=a.c[a.d[a.a-1]];if(0!==a.b.a&&u(Ga(a.b),b))return Ka(a.b);do--a.a;while(0<a.a&&null===a.c[a.d[a.a-1]]);return b};function Ha(){this.d=Ja([0],33);this.e=[null,null];this.c=[0,0];this.a=0;this.f=32;this.b=0;this.h=!1;this.d[1]=1}function Ja(a,b){for(var c=Array(b),d=0;d<a.length;d++)c[d]=a[d];for(;d<b;d++)c[d]=0;return c}function Ia(a){for(var b=a.a;1<=b;--b)W(a,b);a.h=!0}function Ga(a){return a.e[a.d[1]]}function Ka(a){var b=a.d,c=a.e,d=a.c,e=b[1],f=c[e];0<a.a&&(b[1]=b[a.a],d[b[1]]=1,c[e]=null,d[e]=a.b,a.b=e,0<--a.a&&W(a,1));return f}
function W(a,b){for(var c=a.d,d=a.e,e=a.c,f=b,g=c[f];;){var h=f<<1;h<a.a&&u(d[c[h+1]],d[c[h]])&&(h+=1);var k=c[h];if(h>a.a||u(d[g],d[k])){c[f]=g;e[g]=f;break}c[f]=k;e[k]=f;f=h}}function va(a,b){for(var c=a.d,d=a.e,e=a.c,f=b,g=c[f];;){var h=f>>1,k=c[h];if(0===h||u(d[k],d[g])){c[f]=g;e[g]=f;break}c[f]=k;e[k]=f;f=h}};function ma(){this.e=this.a=null;this.f=0;this.c=this.b=this.h=this.d=!1}function S(a){return a.e.c.b}function R(a){return a.e.a.b};this.libtess={GluTesselator:X,windingRule:{GLU_TESS_WINDING_ODD:100130,GLU_TESS_WINDING_NONZERO:100131,GLU_TESS_WINDING_POSITIVE:100132,GLU_TESS_WINDING_NEGATIVE:100133,GLU_TESS_WINDING_ABS_GEQ_TWO:100134},primitiveType:{GL_LINE_LOOP:2,GL_TRIANGLES:4,GL_TRIANGLE_STRIP:5,GL_TRIANGLE_FAN:6},errorType:{GLU_TESS_MISSING_BEGIN_POLYGON:100151,GLU_TESS_MISSING_END_POLYGON:100153,GLU_TESS_MISSING_BEGIN_CONTOUR:100152,GLU_TESS_MISSING_END_CONTOUR:100154,GLU_TESS_COORD_TOO_LARGE:100155,GLU_TESS_NEED_COMBINE_CALLBACK:100156},
gluEnum:{GLU_TESS_MESH:100112,GLU_TESS_TOLERANCE:100142,GLU_TESS_WINDING_RULE:100140,GLU_TESS_BOUNDARY_ONLY:100141,GLU_INVALID_ENUM:100900,GLU_INVALID_VALUE:100901,GLU_TESS_BEGIN:100100,GLU_TESS_VERTEX:100101,GLU_TESS_END:100102,GLU_TESS_ERROR:100103,GLU_TESS_EDGE_FLAG:100104,GLU_TESS_COMBINE:100105,GLU_TESS_BEGIN_DATA:100106,GLU_TESS_VERTEX_DATA:100107,GLU_TESS_END_DATA:100108,GLU_TESS_ERROR_DATA:100109,GLU_TESS_EDGE_FLAG_DATA:100110,GLU_TESS_COMBINE_DATA:100111}};X.prototype.gluDeleteTess=X.prototype.x;
X.prototype.gluTessProperty=X.prototype.B;X.prototype.gluGetTessProperty=X.prototype.y;X.prototype.gluTessNormal=X.prototype.A;X.prototype.gluTessCallback=X.prototype.z;X.prototype.gluTessVertex=X.prototype.C;X.prototype.gluTessBeginPolygon=X.prototype.u;X.prototype.gluTessBeginContour=X.prototype.t;X.prototype.gluTessEndContour=X.prototype.v;X.prototype.gluTessEndPolygon=X.prototype.w; if (true) { module.exports = this.libtess; }


/***/ }),

/***/ 898:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof __webpack_require__.g !== 'undefined') { return __webpack_require__.g; }
	throw new Error('unable to locate global object');
}

var globalObject = getGlobal();

module.exports = exports = globalObject.fetch;

// Needed for TypeScript and Webpack.
if (globalObject.fetch) {
	exports["default"] = globalObject.fetch.bind(globalObject);
}

exports.Headers = globalObject.Headers;
exports.Request = globalObject.Request;
exports.Response = globalObject.Response;


/***/ }),

/***/ 379:
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 569:
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ 216:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ 565:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 795:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ 589:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ 445:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>capture</title><path d=\"M4 2v28h24v-28h-24zM24 22h-16v-16h16v16z\"></path></svg>"

/***/ }),

/***/ 399:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>copy</title><path d=\"M4 12h16v16h-16v-16zM12 4v4h12v12h4v-16h-16z\"></path></svg>"

/***/ }),

/***/ 28:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>download</title><path d=\"M16.001 19.314l-8.485-8.485 2.828-2.829 5.657 5.657 5.657-5.657 2.828 2.828-8.485 8.486zM8 28h16v-4h-16v4z\"></path></svg>"

/***/ }),

/***/ 461:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>forbid</title><path d=\"M18.828 16l4.243 4.243-2.828 2.828-4.243-4.243-4.243 4.243-2.828-2.828 4.243-4.243-4.243-4.243 2.828-2.828 4.243 4.243 4.243-4.243 2.828 2.828-4.243 4.243z\"></path></svg>"

/***/ }),

/***/ 485:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>launch</title><path d=\"M24 24h-6v4h-4v-4h-6l4-4v-13l4-4 4 4v13l4 4z\"></path></svg>"

/***/ }),

/***/ 713:
/***/ ((module) => {

module.exports = "<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 525.86 431.95\"><path d=\"M385,607.38,148.64,422.62l61.57-78.8L367.78,467l228-291.57L674.5,237Z\" transform=\"translate(-148.64 -175.43)\"></path></svg>"

/***/ }),

/***/ 797:
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 125\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M50,4.5C24.8,4.5,4.5,24.8,4.5,50S24.8,95.5,50,95.5S95.5,75.2,95.5,50S75.2,4.5,50,4.5z M70.8,53.3L40.5,71 c-0.6,0.4-1.3,0.5-1.9,0.5c-0.6,0-1.3-0.1-1.9-0.5c-1.1-0.6-1.9-1.9-1.9-3.3V32.3c0-1.4,0.8-2.7,1.9-3.3c1.1-0.6,2.7-0.6,3.8,0 l30.4,17.7c1.1,0.6,1.8,1.9,1.8,3.3S71.9,52.7,70.8,53.3z\"></path><text x=\"0\" y=\"115\" fill=\"#000000\" font-size=\"5px\" font-weight=\"bold\" font-family=\"&#x27;Helvetica Neue&#x27;, Helvetica, Arial-Unicode, Arial, Sans-serif\">Created by Focus</text><text x=\"0\" y=\"120\" fill=\"#000000\" font-size=\"5px\" font-weight=\"bold\" font-family=\"&#x27;Helvetica Neue&#x27;, Helvetica, Arial-Unicode, Arial, Sans-serif\">from the Noun Project</text></svg>"

/***/ }),

/***/ 801:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>plug</title><path d=\"M22 11v-8h-12v8h-2v14h6v4h4v-4h6v-14h-2zM18 11h-4v-4h4v4z\"></path></svg>"

/***/ }),

/***/ 56:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>redo</title><path d=\"M28 24v4h-24v-20h10.071l-3.657-3.654 2.828-2.826 8.485 8.485-8.485 8.484-2.828-2.83 3.657-3.659h-6.071v12h20z\"></path></svg>"

/***/ }),

/***/ 866:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>resize</title><path d=\"M28 12v-8h-8v2h-8v-2h-8v8h2v8h-2v8h8v-2h8v2h8v-8h-2v-8h2zM22 20h-2v2h-8v-2h-2v-8h2v-2h8v2h2v8z\"></path></svg>"

/***/ }),

/***/ 878:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>solve</title><path d=\"M28 12v4h-4v6h-6v4h-4v-4h-6v-6h-4v-4h4v-6h6v4h4v-4h6v6h4z\"></path></svg>"

/***/ }),

/***/ 179:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>time</title><path d=\"M22 18h-8v-8h4v4h4v4zM30 2v28h-28v-28h28zM26 6h-20v20h20v-20z\"></path></svg>"

/***/ }),

/***/ 897:
/***/ ((module) => {

module.exports = "<svg fill=\"#000000\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><title>undo</title><path d=\"M28 8v20h-24v-4h20v-12h-6.071l3.657 3.66-2.828 2.83-8.485-8.484 8.485-8.485 2.828 2.826-3.657 3.653h10.071z\"></path></svg>"

/***/ }),

/***/ 737:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/c9ec27466feec6639c0e7cdd798e5707.webp");

/***/ }),

/***/ 616:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/11d1819c329097bd42d612af51984ebf.webp");

/***/ }),

/***/ 130:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/f582214ff3350f1957d2e5f71ac6089c.webp");

/***/ }),

/***/ 229:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/f06932ac516f7c72ce848dfe5a1557ca.webp");

/***/ }),

/***/ 949:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/f7442041cb9d6db02b7f80e9a3aa298f.webp");

/***/ }),

/***/ 157:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/2ee5dd2f76544899d917464f1c7ed687.webp");

/***/ }),

/***/ 928:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/images/320fc7b7b1a658588d5b020a90c3ee26.webp");

/***/ }),

/***/ 385:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\nvec3 mul3( in mat3 m, in vec3 v ){return vec3(dot(v,m[0]),dot(v,m[1]),dot(v,m[2]));}\\n\\nvec3 mul3( in vec3 v, in mat3 m ){return mul3(m,v);}\\n\\nvec3 srgb2oklab(vec3 c) {\\n    \\n    mat3 m1 = mat3(\\n        0.4122214708,0.5363325363,0.0514459929,\\n        0.2119034982,0.6806995451,0.1073969566,\\n        0.0883024619,0.2817188376,0.6299787005\\n    );\\n    \\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = pow(lms,vec3(1./3.));\\n\\n    mat3 m2 = mat3(\\n        +0.2104542553,+0.7936177850,-0.0040720468,\\n        +1.9779984951,-2.4285922050,+0.4505937099,\\n        +0.0259040371,+0.7827717662,-0.8086757660\\n    );\\n    \\n    return mul3(m2,lms);\\n}\\n\\nvec3 oklab2srgb(vec3 c)\\n{\\n    mat3 m1 = mat3(\\n        1.0000000000,+0.3963377774,+0.2158037573,\\n        1.0000000000,-0.1055613458,-0.0638541728,\\n        1.0000000000,-0.0894841775,-1.2914855480\\n    );\\n\\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = lms * lms * lms;\\n  \\n    mat3 m2 = mat3(\\n        +4.0767416621,-3.3077115913,+0.2309699292,\\n        -1.2684380046,+2.6097574011,-0.3413193965,\\n        -0.0041960863,-0.7034186147,+1.7076147010\\n    );\\n    return mul3(m2,lms);\\n}\\n\\nvec3 lab2lch( in vec3 c ){return vec3(c.x,sqrt((c.y*c.y) + (c.z * c.z)),atan(c.z,c.y));}\\n\\nvec3 lch2lab( in vec3 c ){return vec3(c.x,c.y*cos(c.z),c.y*sin(c.z));}\\n\\nvec3 srgb_to_oklch( in vec3 c ) { return lab2lch(srgb2oklab(c)); }\\nvec3 oklch_to_srgb( in vec3 c ) { return oklab2srgb(lch2lab(c)); }\\n\\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\\n\\nfloat luma(vec4 color) { return dot(color.rgb, vec3(0.299, 0.587, 0.114)); }\\n\\nvec4 rgb2cmyki(in vec3 c) { float k = max(max(c.r, c.g), c.b); return min(vec4(c.rgb / k, k), 1.0); }\\n\\nvec3 cmyki2rgb(in vec4 c) { return c.rgb * c.a; }\\n\\nvec3 lerpHSV(in vec3 hsv1, in vec3 hsv2, in float rate)\\n{\\n    float hue = (mod(mod((hsv2.x-hsv1.x), 1.) + 1.5, 1.)-0.5)*rate + hsv1.x;\\n    return vec3(hue, mix(hsv1.yz, hsv2.yz, rate));\\n}\\n\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvec3 rgb2hsv(vec3 c)\\n{\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n    float d = q.x - min(q.w, q.y);\\n    float e = 1.0e-10;\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\nvec3 hsv2rgbSmooth( in vec3 hsv )\\n{\\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n\\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\\n\\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\\n}\\n\\nvec3 hueShift(vec3 col, vec3 hsv){\\n    vec3 h = rgb2hsv(col);\\n    h.x += hsv.x;\\n\\n    h.y *= hsv.y;\\n    h.z *= hsv.z;\\n\\n    return hsv2rgbSmooth(h);\\n}\\n\\nuint seed = 11425u;\\n\\nuint hash_u(uint _a) {\\n   uint a = _a;\\n   a ^= a >> 16;\\n   a *= 0x7feb352du;\\n   a ^= a >> 15;\\n   a *= 0x846ca68bu;\\n   a ^= a >> 16;\\n   return a; \\n }\\nfloat hash_f(){ uint s = hash_u(seed); seed = s;return ( float( s ) / float( 0xffffffffu ) ); }\\nvec2 hash_v2(){ return vec2(hash_f(), hash_f()); }\\nvec3 hash_v3(){ return vec3(hash_f(), hash_f(), hash_f()); }\\nvec4 hash_v4(){ return vec4(hash_f(), hash_f(), hash_f(), hash_f()); }\\n\\nfloat hash_f_s(uint s){ s = hash_u(s); return ( float( s ) / float( 0xffffffffu ) ); }\\n// vec2 hash_22_s(uvec2 s){ uint _s = hash_u(s.x) + hash_u(s.y); return vec2(hash_f_s(_s.x), hash_f_s(_s.y)); }\\nfloat hash_21_s(ivec2 _s_){ \\n  uvec2 s = uvec2(_s_);\\n  uint _s = hash_u(s.x + hash_u(s.y)) + hash_u(s.y + hash_u(s.x)); \\n  return hash_f_s(_s); \\n}\\n// vec3 hash_23_s(){ return vec3(hash_f_s(), hash_f_s(), hash_f_s()); }\\n// vec4 hash_24_s(){ return vec4(hash_f_s(), hash_f_s(), hash_f_s(), hash_f_s()); }\\n\\nfloat valueNoise( in vec2 p ){\\n    p += 100.;\\n    ivec2 i = ivec2(floor( p ));\\n    vec2 f = fract( p );\\n\\n    // cubic interpolant\\n    vec2 u = f*f*(3.0-2.0*f);\\n\\n    return mix( mix( hash_21_s( i + ivec2(0,0) ), \\n                     hash_21_s( i + ivec2(1,0) ), u.x),\\n                mix( hash_21_s( i + ivec2(0,1) ), \\n                     hash_21_s( i + ivec2(1,1) ), u.x), u.y);\\n}\\n\\nuniform int brush_texture_idx;\\nuniform vec3 tex_hsv_dynamics;\\nuniform vec2 tex_stretch;\\n\\nin vec2 uv;\\nin vec4 vCol;\\nout vec4 col;\\n// float sdBox( in vec2 p, in vec2 b ) {\\n//     vec2 d = abs(p)-b;\\n//     return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\\n// }\\n\\nvec4 sample_brush_tex(int idx, vec2 uv){\\n  if(idx == 0){\\n    return texture(brush_texture[0],uv,-1.);\\n  }\\n  if(idx == 1){\\n    return texture(brush_texture[1],uv,-1.);\\n  }\\n  if(idx == 2){\\n    return texture(brush_texture[2],uv,-1.);\\n  }\\n  if(idx == 3){\\n    return texture(brush_texture[3],uv,-1.);\\n  }\\n  if(idx == 4){\\n    return texture(brush_texture[4],uv,-1.);\\n  }\\n  if(idx == 5){\\n    return texture(brush_texture[5],uv,-1.);\\n  }\\n  if(idx == 6){\\n    return texture(brush_texture[6],uv,-1.);\\n  } \\n  // if(idx == 7){\\n  //   return texture(brush_texture[7],uv);\\n  // }\\n  // if(idx == 8){\\n  //   return texture(brush_texture_8,uv);\\n  // }\\n  // if(idx == 9){\\n  //   return texture(brush_texture_9,uv);\\n  // }\\n  // if(idx == 10){\\n  //   return texture(brush_texture_10,uv);\\n  // }\\n  // if(idx == 11){\\n  //   return texture(brush_texture_11,uv);\\n  // }\\n  // if(idx == 12){\\n  //   return texture(brush_texture_12,uv);\\n  // }\\n}\\n\\nfloat sdBox(vec2 p, vec2 sz){\\n    p = abs(p) - sz;\\n    return max(p.x,p.y);\\n}\\nvoid main() {\\n  col = vec4(1);\\n  // col.xyz = stroke_col.xyz;\\n  \\n  vec2 u = uv - 0.5;\\n  \\n  vec2 boxSz = vec2(0.49);\\n\\n  col = vCol;\\n  {\\n    col.xyz = srgb_to_oklch(col.xyz);\\n\\n    vec2 nuv = uv*2120.;\\n    nuv *= tex_stretch;\\n    float n = (valueNoise(nuv)*2. - 1.);\\n\\n    col.z += 5.5*n * tex_hsv_dynamics.z;\\n    col.x += n * tex_hsv_dynamics.x;\\n    col.y += n * tex_hsv_dynamics.y;\\n    // col.x -= valueNoise(uv*120.)*0.6;\\n\\n    col.x = clamp(col.x, 0., 1.);\\n    col.y = clamp(col.y, 0., 1.);\\n    // col.z = clamp(col.z, 0., acos(-1.)*2.);\\n    col.z = mod(col.z, acos(-1.)*2.);\\n    col.xyz = oklch_to_srgb(col.xyz);\\n  }\\n  \\n  {\\n    // col.w = smoothstep(1.,0.,(rect_sdf)/abs(fwidth(rect_sdf)));\\n    vec2 dx = dFdx(uv.xy);\\n    vec2 dy = dFdy(uv.xy);\\n    \\n    float sd = sdBox(u,boxSz);\\n    sd = sdBox(u,boxSz - fwidth(sd));\\n    // float sd = sdBox(u,boxSz);\\n\\n    float fw = fwidth((sd));\\n    \\n    #define render(pos)  (1.-step(0.,sdBox(pos,boxSz)))\\n        \\n\\n    \\n    if(fw < 0.004){\\n      col.w *= smoothstep(1.,0.,(sd)/fw);\\n    } else{\\n        float w = 0.;\\n        float _Bias = 1.;\\n        vec2 uvOffsets = vec2(0.125, 0.375);\\n        vec2 offsetUV = vec2(0.0, 0.0);\\n\\n        offsetUV.xy = u.xy + uvOffsets.x * dx + uvOffsets.y * dy;\\n        w += render(offsetUV.xy);\\n        offsetUV.xy = u.xy - uvOffsets.x * dx - uvOffsets.y * dy;\\n        w += render(offsetUV.xy);\\n        offsetUV.xy = u.xy + uvOffsets.y * dx - uvOffsets.x * dy;\\n        w += render(offsetUV.xy);\\n        offsetUV.xy = u.xy - uvOffsets.y * dx + uvOffsets.x * dy;\\n        w += render(offsetUV.xy);\\n        \\n        uvOffsets = uvOffsets * rot(0.25*acos(-1.));\\n        offsetUV.xy = u.xy + uvOffsets.x * dx + uvOffsets.y * dy;\\n        w += render(offsetUV.xy);\\n        offsetUV.xy = u.xy - uvOffsets.x * dx - uvOffsets.y * dy;\\n        w += render(offsetUV.xy);\\n        offsetUV.xy = u.xy + uvOffsets.y * dx - uvOffsets.x * dy;\\n        w += render(offsetUV.xy);\\n        offsetUV.xy = u.xy - uvOffsets.y * dx + uvOffsets.x * dy;\\n        w += render(offsetUV.xy);\\n\\n        w /= 8.;\\n        col.w *= w;\\n        //col.x = 1.;\\n    }\\n\\n    col.w *= sample_brush_tex(brush_texture_idx, uv).w;\\n    // col.w *= texture(brush_texture[1],uv,-4.).w;\\n  }\\n  // col.xyz = uv.xyx;\\n  // col.w *= sample_brush_tex(1, uv).w;\\n  // col.w *= pow(texture(brush_texture[brush_texture_idx],uv).w,1.0);\\n  // col.xyz /= pow(max(col.w,0.001),0.2);\\n  // col.w = length(uv - 0.5) < 0.25 ? 1. : 0.; \\n  // col.xyz = uv.xyx;\\n\\n  // col.xyz = texture(canvas,uv).xyz;\\n}\";";

/***/ }),

/***/ 580:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\nout vec2 uv;\\n\\nlayout(location = 0) in vec4 pos;\\nlayout(location = 1) in vec4 col;\\nout vec4 vCol;\\nvoid main(){\\n  // gl_Position.xy *= brush_sz;\\n  gl_Position = vec4(pos.xy,0,1);\\n  \\n  vCol = col;\\n\\n  uv = pos.zw;\\n}  \";";

/***/ }),

/***/ 175:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\nvec2 css_contain(vec2 u, vec2 input_res, vec2 tex_res){\\n\\tfloat input_ratio = (input_res.x/input_res.y);\\n\\tfloat tex_ratio = (tex_res.x/tex_res.y);\\n\\tfloat ratio = input_ratio / tex_ratio;\\n\\t\\n\\tif(ratio < 1.){\\n\\t\\t// gl_Position.x -= ( 1. - 1./ratio)*0.5;\\n\\t\\tu.x *= ratio;\\n\\t} else {\\n\\t\\t// gl_Position.y -= ( 1. - ratio)*0.5;\\n\\t\\tu.y /= ratio;\\n\\t}\\n  return u;\\n}\\n\\nvec2 ndc_aspect_correct(vec2 u, vec2 r){\\n\\tif(r.x < r.y){\\n\\t\\tu.y /= r.y/r.x;\\n\\t} else {\\n\\t\\tu.x /= r.x/r.y;\\n\\t}\\n  return u;\\n}\\n\\nin vec2 uv;\\nout vec4 col;\\nvoid main() {\\n  col = vec4(1);\\n  // col.xyz = stroke_col.xyz;\\n  \\n  vec2 u = uv;\\n  u = abs(u) \\n    // - 0.5*ndc_aspect_correct(vec2(1),R)\\n    - 0.5/css_contain(vec2(1), canvasR,R);\\n  ;\\n  float rect_sdf = max(u.x,u.y);\\n  // float fw = abs(fwidth(rect_sdf));\\n  // rect_sdf += fw;\\n  rect_sdf = -1.;\\n  if(rect_sdf >0.)\\n    col.xyz = vec3(0);\\n\\n  col.w = 1.;\\n}\";";

/***/ }),

/***/ 218:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\nvec2 css_contain(vec2 u, vec2 input_res, vec2 tex_res){\\n\\tfloat input_ratio = (input_res.x/input_res.y);\\n\\tfloat tex_ratio = (tex_res.x/tex_res.y);\\n\\tfloat ratio = input_ratio / tex_ratio;\\n\\t\\n\\tif(ratio < 1.){\\n\\t\\t// gl_Position.x -= ( 1. - 1./ratio)*0.5;\\n\\t\\tu.x *= ratio;\\n\\t} else {\\n\\t\\t// gl_Position.y -= ( 1. - ratio)*0.5;\\n\\t\\tu.y /= ratio;\\n\\t}\\n  return u;\\n}\\n\\nvec2 ndc_aspect_correct(vec2 u, vec2 r){\\n\\tif(r.x < r.y){\\n\\t\\tu.y /= r.y/r.x;\\n\\t} else {\\n\\t\\tu.x /= r.x/r.y;\\n\\t}\\n  return u;\\n}\\n\\nuniform float zoom;\\nuniform vec2 brush_sz;\\nout vec2 uv;\\nvoid main(){\\n  gl_Position = vec4(positions[gl_VertexID],0,1);\\n  uv = gl_Position.xy;\\n  // gl_Position.xy *= css_contain(brush_sz*0.25*zoom, canvasR,R);\\n  // gl_Position.xy *= brush_sz*0.5*zoom;\\n  // gl_Position.xy /= css_contain(vec2(1), canvasR,R);\\n\\n  gl_Position.xy *= brush_sz*0.2125*zoom;\\n\\n  vec2 aspect_correction;\\n  if (canvasR.x > canvasR.y) {\\n    aspect_correction.x = canvasR.y / canvasR.x;\\n    aspect_correction.y = 1.;\\n  } else {\\n    aspect_correction.x = 1.;\\n    aspect_correction.y = canvasR.x / canvasR.y;\\n  }\\n  gl_Position.xy *= aspect_correction;\\n  \\n  // gl_Position.xy *= brush_sz*0.5*zoom*ndc_aspect_correct(vec2(1), canvasR);\\n  // gl_Position.xy /= css_contain(vec2(1), R,canvasR);\\n  \\n  // float asp_canvas = canvasR.x/canvasR.y;\\n  // float asp_screen = R.x/R.y;\\n  \\n  // if(asp_canvas < asp_screen){\\n  //   gl_Position.x *= asp_canvas/asp_screen;\\n  // } else {\\n  //   gl_Position.y *= asp_screen/asp_canvas;\\n  // }\\n  gl_Position.xy = css_contain(gl_Position.xy,canvasR,R);\\n\\n  // gl_Position.xy *= ndc_aspect_correct(vec2(1), canvasR);\\n}  \";";

/***/ }),

/***/ 7:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\n#ifndef SPECTRAL\\n#define SPECTRAL\\n\\nconst int SPECTRAL_SIZE = 38;\\nconst float SPECTRAL_GAMMA = 2.4;\\nconst float SPECTRAL_EPSILON = 0.0001;\\n\\nfloat spectral_uncompand(float x) {\\n  return (x < 0.04045) ? x / 12.92 : pow((x + 0.055) / 1.055, SPECTRAL_GAMMA);\\n}\\n\\nfloat spectral_compand(float x) {\\n  return (x < 0.0031308) ? x * 12.92 : 1.055 * pow(x, 1.0 / SPECTRAL_GAMMA) - 0.055;\\n}\\n\\nvec3 spectral_srgb_to_linear(vec3 srgb) {\\n    return vec3(spectral_uncompand(srgb[0]), spectral_uncompand(srgb[1]), spectral_uncompand(srgb[2]));\\n}\\n\\nvec3 spectral_linear_to_srgb(vec3 lrgb) {\\n    return clamp(vec3(spectral_compand(lrgb[0]), spectral_compand(lrgb[1]), spectral_compand(lrgb[2])), 0.0, 1.0);\\n}\\n\\nvoid spectral_upsampling(vec3 lrgb, out float w, out float c, out float m, out float y, out float r, out float g, out float b) {\\n    w = min(lrgb.r, min(lrgb.g, lrgb.b));\\n\\n    lrgb -= w;\\n\\n    c = min(lrgb.g, lrgb.b);\\n    m = min(lrgb.r, lrgb.b);\\n    y = min(lrgb.r, lrgb.g);\\n    r = min(max(0., lrgb.r - lrgb.b), max(0., lrgb.r - lrgb.g));\\n    g = min(max(0., lrgb.g - lrgb.b), max(0., lrgb.g - lrgb.r));\\n    b = min(max(0., lrgb.b - lrgb.g), max(0., lrgb.b - lrgb.r));\\n}\\n\\nvoid spectral_linear_to_reflectance(vec3 lrgb, inout float R[SPECTRAL_SIZE]) {\\n    float w, c, m, y, r, g, b;\\n    \\n    spectral_upsampling(lrgb, w, c, m, y, r, g, b);\\n    \\n     R[0] = max(SPECTRAL_EPSILON, w + c * 0.96853629 + m * 0.51567122 + y * 0.02055257 + r * 0.03147571 + g * 0.49108579 + b * 0.97901834);\\n     R[1] = max(SPECTRAL_EPSILON, w + c * 0.96855103 + m * 0.54015520 + y * 0.02059936 + r * 0.03146636 + g * 0.46944057 + b * 0.97901649);\\n     R[2] = max(SPECTRAL_EPSILON, w + c * 0.96859338 + m * 0.62645502 + y * 0.02062723 + r * 0.03140624 + g * 0.40165780 + b * 0.97901118);\\n     R[3] = max(SPECTRAL_EPSILON, w + c * 0.96877345 + m * 0.75595012 + y * 0.02073387 + r * 0.03119611 + g * 0.24490420 + b * 0.97892146);\\n     R[4] = max(SPECTRAL_EPSILON, w + c * 0.96942204 + m * 0.92826996 + y * 0.02114202 + r * 0.03053888 + g * 0.06826880 + b * 0.97858555);\\n     R[5] = max(SPECTRAL_EPSILON, w + c * 0.97143709 + m * 0.97223624 + y * 0.02233154 + r * 0.02856855 + g * 0.02732883 + b * 0.97743705);\\n     R[6] = max(SPECTRAL_EPSILON, w + c * 0.97541862 + m * 0.98616174 + y * 0.02556857 + r * 0.02459485 + g * 0.01360600 + b * 0.97428075);\\n     R[7] = max(SPECTRAL_EPSILON, w + c * 0.98074186 + m * 0.98955255 + y * 0.03330189 + r * 0.01929520 + g * 0.01000187 + b * 0.96663223);\\n     R[8] = max(SPECTRAL_EPSILON, w + c * 0.98580992 + m * 0.98676237 + y * 0.05185294 + r * 0.01423112 + g * 0.01284127 + b * 0.94822893);\\n     R[9] = max(SPECTRAL_EPSILON, w + c * 0.98971194 + m * 0.97312575 + y * 0.10087639 + r * 0.01033111 + g * 0.02636635 + b * 0.89937713);\\n    R[10] = max(SPECTRAL_EPSILON, w + c * 0.99238027 + m * 0.91944277 + y * 0.24000413 + r * 0.00765876 + g * 0.07058713 + b * 0.76070164);\\n    R[11] = max(SPECTRAL_EPSILON, w + c * 0.99409844 + m * 0.32564851 + y * 0.53589066 + r * 0.00593693 + g * 0.70421692 + b * 0.46420440);\\n    R[12] = max(SPECTRAL_EPSILON, w + c * 0.99517200 + m * 0.13820628 + y * 0.79874659 + r * 0.00485616 + g * 0.85473994 + b * 0.20123039);\\n    R[13] = max(SPECTRAL_EPSILON, w + c * 0.99576545 + m * 0.05015143 + y * 0.91186529 + r * 0.00426186 + g * 0.95081565 + b * 0.08808402);\\n    R[14] = max(SPECTRAL_EPSILON, w + c * 0.99593552 + m * 0.02912336 + y * 0.95399623 + r * 0.00409039 + g * 0.97170370 + b * 0.04592894);\\n    R[15] = max(SPECTRAL_EPSILON, w + c * 0.99564041 + m * 0.02421691 + y * 0.97137099 + r * 0.00438375 + g * 0.97651888 + b * 0.02860373);\\n    R[16] = max(SPECTRAL_EPSILON, w + c * 0.99464769 + m * 0.02660696 + y * 0.97939505 + r * 0.00537525 + g * 0.97429245 + b * 0.02060067);\\n    R[17] = max(SPECTRAL_EPSILON, w + c * 0.99229579 + m * 0.03407586 + y * 0.98345207 + r * 0.00772962 + g * 0.97012917 + b * 0.01656701);\\n    R[18] = max(SPECTRAL_EPSILON, w + c * 0.98638762 + m * 0.04835936 + y * 0.98553736 + r * 0.01366120 + g * 0.94258630 + b * 0.01451549);\\n    R[19] = max(SPECTRAL_EPSILON, w + c * 0.96829712 + m * 0.00011720 + y * 0.98648905 + r * 0.03181352 + g * 0.99989207 + b * 0.01357964);\\n    R[20] = max(SPECTRAL_EPSILON, w + c * 0.89228016 + m * 0.00008554 + y * 0.98674535 + r * 0.10791525 + g * 0.99989891 + b * 0.01331243);\\n    R[21] = max(SPECTRAL_EPSILON, w + c * 0.53740239 + m * 0.85267882 + y * 0.98657555 + r * 0.46249516 + g * 0.13823139 + b * 0.01347661);\\n    R[22] = max(SPECTRAL_EPSILON, w + c * 0.15360445 + m * 0.93188793 + y * 0.98611877 + r * 0.84604333 + g * 0.06968113 + b * 0.01387181);\\n    R[23] = max(SPECTRAL_EPSILON, w + c * 0.05705719 + m * 0.94810268 + y * 0.98559942 + r * 0.94275572 + g * 0.05628787 + b * 0.01435472);\\n    R[24] = max(SPECTRAL_EPSILON, w + c * 0.03126539 + m * 0.94200977 + y * 0.98507063 + r * 0.96860996 + g * 0.06111561 + b * 0.01479836);\\n    R[25] = max(SPECTRAL_EPSILON, w + c * 0.02205445 + m * 0.91478045 + y * 0.98460039 + r * 0.97783966 + g * 0.08987709 + b * 0.01515250);\\n    R[26] = max(SPECTRAL_EPSILON, w + c * 0.01802271 + m * 0.87065445 + y * 0.98425301 + r * 0.98187757 + g * 0.13656016 + b * 0.01540513);\\n    R[27] = max(SPECTRAL_EPSILON, w + c * 0.01613460 + m * 0.78827548 + y * 0.98403909 + r * 0.98377315 + g * 0.22169624 + b * 0.01557233);\\n    R[28] = max(SPECTRAL_EPSILON, w + c * 0.01520947 + m * 0.65738359 + y * 0.98388535 + r * 0.98470202 + g * 0.32176956 + b * 0.01565710);\\n    R[29] = max(SPECTRAL_EPSILON, w + c * 0.01475977 + m * 0.59909403 + y * 0.98376116 + r * 0.98515481 + g * 0.36157329 + b * 0.01571025);\\n    R[30] = max(SPECTRAL_EPSILON, w + c * 0.01454263 + m * 0.56817268 + y * 0.98368246 + r * 0.98537114 + g * 0.48361920 + b * 0.01571916);\\n    R[31] = max(SPECTRAL_EPSILON, w + c * 0.01444459 + m * 0.54031997 + y * 0.98365023 + r * 0.98546685 + g * 0.46488579 + b * 0.01572133);\\n    R[32] = max(SPECTRAL_EPSILON, w + c * 0.01439897 + m * 0.52110241 + y * 0.98361309 + r * 0.98550011 + g * 0.47440306 + b * 0.01572502);\\n    R[33] = max(SPECTRAL_EPSILON, w + c * 0.01437620 + m * 0.51041094 + y * 0.98357259 + r * 0.98551031 + g * 0.48576990 + b * 0.01571717);\\n    R[34] = max(SPECTRAL_EPSILON, w + c * 0.01436343 + m * 0.50526577 + y * 0.98353856 + r * 0.98550741 + g * 0.49267971 + b * 0.01571905);\\n    R[35] = max(SPECTRAL_EPSILON, w + c * 0.01435687 + m * 0.50255080 + y * 0.98351247 + r * 0.98551323 + g * 0.49625685 + b * 0.01571059);\\n    R[36] = max(SPECTRAL_EPSILON, w + c * 0.01435370 + m * 0.50126452 + y * 0.98350101 + r * 0.98551563 + g * 0.49807754 + b * 0.01569728);\\n    R[37] = max(SPECTRAL_EPSILON, w + c * 0.01435408 + m * 0.50083021 + y * 0.98350852 + r * 0.98551547 + g * 0.49889859 + b * 0.01570020);\\n}\\n\\nvec3 spectral_xyz_to_srgb(vec3 xyz) {\\n    mat3 XYZ_RGB;\\n\\n    XYZ_RGB[0] = vec3( 3.24306333, -1.53837619, -0.49893282);\\n    XYZ_RGB[1] = vec3(-0.96896309,  1.87542451,  0.04154303);\\n    XYZ_RGB[2] = vec3( 0.05568392, -0.20417438,  1.05799454);\\n    \\n    float r = dot(XYZ_RGB[0], xyz);\\n    float g = dot(XYZ_RGB[1], xyz);\\n    float b = dot(XYZ_RGB[2], xyz);\\n\\n    return spectral_linear_to_srgb(vec3(r, g, b));\\n}\\n\\nvec3 spectral_reflectance_to_xyz(float R[SPECTRAL_SIZE]) {\\n    vec3 xyz = vec3(0.0);\\n    \\n    xyz +=  R[0] * vec3(0.00006469, 0.00000184, 0.00030502);\\n    xyz +=  R[1] * vec3(0.00021941, 0.00000621, 0.00103681);\\n    xyz +=  R[2] * vec3(0.00112057, 0.00003101, 0.00531314);\\n    xyz +=  R[3] * vec3(0.00376661, 0.00010475, 0.01795439);\\n    xyz +=  R[4] * vec3(0.01188055, 0.00035364, 0.05707758);\\n    xyz +=  R[5] * vec3(0.02328644, 0.00095147, 0.11365162);\\n    xyz +=  R[6] * vec3(0.03455942, 0.00228226, 0.17335873);\\n    xyz +=  R[7] * vec3(0.03722379, 0.00420733, 0.19620658);\\n    xyz +=  R[8] * vec3(0.03241838, 0.00668880, 0.18608237);\\n    xyz +=  R[9] * vec3(0.02123321, 0.00988840, 0.13995048);\\n    xyz += R[10] * vec3(0.01049099, 0.01524945, 0.08917453);\\n    xyz += R[11] * vec3(0.00329584, 0.02141831, 0.04789621);\\n    xyz += R[12] * vec3(0.00050704, 0.03342293, 0.02814563);\\n    xyz += R[13] * vec3(0.00094867, 0.05131001, 0.01613766);\\n    xyz += R[14] * vec3(0.00627372, 0.07040208, 0.00775910);\\n    xyz += R[15] * vec3(0.01686462, 0.08783871, 0.00429615);\\n    xyz += R[16] * vec3(0.02868965, 0.09424905, 0.00200551);\\n    xyz += R[17] * vec3(0.04267481, 0.09795667, 0.00086147);\\n    xyz += R[18] * vec3(0.05625475, 0.09415219, 0.00036904);\\n    xyz += R[19] * vec3(0.06947040, 0.08678102, 0.00019143);\\n    xyz += R[20] * vec3(0.08305315, 0.07885653, 0.00014956);\\n    xyz += R[21] * vec3(0.08612610, 0.06352670, 0.00009231);\\n    xyz += R[22] * vec3(0.09046614, 0.05374142, 0.00006813);\\n    xyz += R[23] * vec3(0.08500387, 0.04264606, 0.00002883);\\n    xyz += R[24] * vec3(0.07090667, 0.03161735, 0.00001577);\\n    xyz += R[25] * vec3(0.05062889, 0.02088521, 0.00000394);\\n    xyz += R[26] * vec3(0.03547396, 0.01386011, 0.00000158);\\n    xyz += R[27] * vec3(0.02146821, 0.00810264, 0.00000000);\\n    xyz += R[28] * vec3(0.01251646, 0.00463010, 0.00000000);\\n    xyz += R[29] * vec3(0.00680458, 0.00249138, 0.00000000);\\n    xyz += R[30] * vec3(0.00346457, 0.00125930, 0.00000000);\\n    xyz += R[31] * vec3(0.00149761, 0.00054165, 0.00000000);\\n    xyz += R[32] * vec3(0.00076970, 0.00027795, 0.00000000);\\n    xyz += R[33] * vec3(0.00040737, 0.00014711, 0.00000000);\\n    xyz += R[34] * vec3(0.00016901, 0.00006103, 0.00000000);\\n    xyz += R[35] * vec3(0.00009522, 0.00003439, 0.00000000);\\n    xyz += R[36] * vec3(0.00004903, 0.00001771, 0.00000000);\\n    xyz += R[37] * vec3(0.00002000, 0.00000722, 0.00000000);\\n\\n    return xyz;\\n}\\n\\nfloat spectral_linear_to_concentration(float l1, float l2, float t) {\\n    float t1 = l1 * pow(1.0 - t, 2.0);\\n    float t2 = l2 * pow(t, 2.0);\\n\\n    return t2 / (t1 + t2);\\n}\\n\\nvec3 spectral_mix(vec3 color1, vec3 color2, float t) {\\n    vec3 lrgb1 = spectral_srgb_to_linear(color1);\\n    vec3 lrgb2 = spectral_srgb_to_linear(color2);\\n\\n    float R1[SPECTRAL_SIZE];\\n    float R2[SPECTRAL_SIZE];\\n\\n    spectral_linear_to_reflectance(lrgb1, R1);\\n    spectral_linear_to_reflectance(lrgb2, R2);\\n\\n    float l1 = spectral_reflectance_to_xyz(R1)[1];\\n    float l2 = spectral_reflectance_to_xyz(R2)[1];\\n\\n    t = spectral_linear_to_concentration(l1, l2, t);\\n\\n    float R[SPECTRAL_SIZE];\\n\\n    for (int i = 0; i < SPECTRAL_SIZE; i++) {\\n      float KS = (1.0 - t) * (pow(1.0 - R1[i], 2.0) / (2.0 * R1[i])) + t * (pow(1.0 - R2[i], 2.0) / (2.0 * R2[i]));\\n      float KM = 1.0 + KS - sqrt(pow(KS, 2.0) + 2.0 * KS);\\n\\n      //Saunderson correction\\n      // let S = ((1.0 - K1) * (1.0 - K2) * KM) / (1.0 - K2 * KM);\\n\\n      R[i] = KM;\\n    }\\n\\n    return spectral_xyz_to_srgb(spectral_reflectance_to_xyz(R));\\n}\\n\\nvec4 spectral_mix(vec4 color1, vec4 color2, float t) {\\n    return vec4(spectral_mix(color1.rgb, color2.rgb, t), mix(color1.a, color2.a, t));\\n}\\n\\n#endif\\n\\nvec3 mul3( in mat3 m, in vec3 v ){return vec3(dot(v,m[0]),dot(v,m[1]),dot(v,m[2]));}\\n\\nvec3 mul3( in vec3 v, in mat3 m ){return mul3(m,v);}\\n\\nvec3 srgb2oklab(vec3 c) {\\n    \\n    mat3 m1 = mat3(\\n        0.4122214708,0.5363325363,0.0514459929,\\n        0.2119034982,0.6806995451,0.1073969566,\\n        0.0883024619,0.2817188376,0.6299787005\\n    );\\n    \\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = pow(lms,vec3(1./3.));\\n\\n    mat3 m2 = mat3(\\n        +0.2104542553,+0.7936177850,-0.0040720468,\\n        +1.9779984951,-2.4285922050,+0.4505937099,\\n        +0.0259040371,+0.7827717662,-0.8086757660\\n    );\\n    \\n    return mul3(m2,lms);\\n}\\n\\nvec3 oklab2srgb(vec3 c)\\n{\\n    mat3 m1 = mat3(\\n        1.0000000000,+0.3963377774,+0.2158037573,\\n        1.0000000000,-0.1055613458,-0.0638541728,\\n        1.0000000000,-0.0894841775,-1.2914855480\\n    );\\n\\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = lms * lms * lms;\\n  \\n    mat3 m2 = mat3(\\n        +4.0767416621,-3.3077115913,+0.2309699292,\\n        -1.2684380046,+2.6097574011,-0.3413193965,\\n        -0.0041960863,-0.7034186147,+1.7076147010\\n    );\\n    return mul3(m2,lms);\\n}\\n\\nvec3 lab2lch( in vec3 c ){return vec3(c.x,sqrt((c.y*c.y) + (c.z * c.z)),atan(c.z,c.y));}\\n\\nvec3 lch2lab( in vec3 c ){return vec3(c.x,c.y*cos(c.z),c.y*sin(c.z));}\\n\\nvec3 srgb_to_oklch( in vec3 c ) { return lab2lch(srgb2oklab(c)); }\\nvec3 oklch_to_srgb( in vec3 c ) { return oklab2srgb(lch2lab(c)); }\\n\\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\\n\\nfloat luma(vec4 color) { return dot(color.rgb, vec3(0.299, 0.587, 0.114)); }\\n\\nvec4 rgb2cmyki(in vec3 c) { float k = max(max(c.r, c.g), c.b); return min(vec4(c.rgb / k, k), 1.0); }\\n\\nvec3 cmyki2rgb(in vec4 c) { return c.rgb * c.a; }\\n\\nvec3 lerpHSV(in vec3 hsv1, in vec3 hsv2, in float rate)\\n{\\n    float hue = (mod(mod((hsv2.x-hsv1.x), 1.) + 1.5, 1.)-0.5)*rate + hsv1.x;\\n    return vec3(hue, mix(hsv1.yz, hsv2.yz, rate));\\n}\\n\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvec3 rgb2hsv(vec3 c)\\n{\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n    float d = q.x - min(q.w, q.y);\\n    float e = 1.0e-10;\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\nvec3 hsv2rgbSmooth( in vec3 hsv )\\n{\\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n\\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\\n\\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\\n}\\n\\nvec3 hueShift(vec3 col, vec3 hsv){\\n    vec3 h = rgb2hsv(col);\\n    h.x += hsv.x;\\n\\n    h.y *= hsv.y;\\n    h.z *= hsv.z;\\n\\n    return hsv2rgbSmooth(h);\\n}\\n\\nvec4 blend_brushstroke(vec4 col, vec4 stroke, int blending_colour_space){\\n  // col.xyz = mix(col.xyz, stroke.xyz, stroke.w); \\n  \\n  int mode = blending_colour_space;\\n  \\n  if(stroke.w > 0.00000001){\\n    // float interpolant = stroke.w;\\n    stroke.xyz = stroke.xyz/max(stroke.w,0.001);\\n    \\n    if(mode == 0){\\n      col.xyz = spectral_mix(col.xyz, clamp(stroke.xyz,0.00001,0.99999), stroke.w);\\n      if(stroke.w > 0.99999)\\n        col.xyz = stroke.xyz;\\n    } else if(mode == 1){\\n      col.xyz = srgb_to_oklch( col.xyz );\\n      stroke.xyz = srgb_to_oklch( stroke.xyz );\\n      col.xy = mix(col.xy, stroke.xy,stroke.w);\\n      float tau = acos(-1.) * 2.;\\n      float h_a = stroke.z;\\n      float h_b = stroke.z + tau;\\n      float dist_a = abs(col.z - h_a);\\n      float dist_b = abs(col.z - h_b);\\n      if(dist_a < dist_b){\\n        col.z = mix(col.z, h_a, stroke.w);\\n      } else {\\n        col.z = mix(col.z, h_b, stroke.w);\\n      }\\n      col.z = mod(col.z, tau);\\n      // col.z = max(col.z)\\n      // if(isnan(col.z)){\\n      //   col.z = 1.;\\n      // }\\n\\n      col.xyz = oklch_to_srgb( col.xyz );\\n      col.xyz = clamp(col.xyz,0.,1.);\\n    \\n    } else {\\n      col.xyz = mix(col.xyz, stroke.xyz, stroke.w);\\n    }\\n    col.w = max(col.w, stroke.w);\\n  }\\n\\n  return col; \\n}\\n\\n// uniform float pong_idx;\\nuniform int amogus;\\nuniform int blending_colour_space;\\nin vec2 uv;\\nout vec4 col;\\nvoid main() {\\n  // col = texture(canvas_back,uv);\\n  \\n  col = texture(canvas_a,uv);\\n  col.w = 1.;\\n\\n    // col.xyzw = vec4(1);\\n\\n  vec4 temp_tex = texture(temp_tex,uv);\\n  // col.xyz = mix(col.xyz, temp_tex.xyz, temp_tex.w);\\n \\n  if(temp_tex.w > 0.000001)\\n    col = blend_brushstroke(col,temp_tex,blending_colour_space); \\n}      \";";

/***/ }),

/***/ 275:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\nout vec2 uv;\\n\\nvec2 css_contain(vec2 u, vec2 input_res, vec2 tex_res){\\n\\tfloat input_ratio = (input_res.x/input_res.y);\\n\\tfloat tex_ratio = (tex_res.x/tex_res.y);\\n\\tfloat ratio = input_ratio / tex_ratio;\\n\\t\\n\\tif(ratio < 1.){\\n\\t\\t// gl_Position.x -= ( 1. - 1./ratio)*0.5;\\n\\t\\tu.x *= ratio;\\n\\t} else {\\n\\t\\t// gl_Position.y -= ( 1. - ratio)*0.5;\\n\\t\\tu.y /= ratio;\\n\\t}\\n  return u;\\n}\\n\\nvec2 ndc_aspect_correct(vec2 u, vec2 r){\\n\\tif(r.x < r.y){\\n\\t\\tu.y /= r.y/r.x;\\n\\t} else {\\n\\t\\tu.x /= r.x/r.y;\\n\\t}\\n  return u;\\n}\\n\\nvoid main(){\\n  uv = positions[gl_VertexID];\\n  uv = uv*0.5 + 0.5;\\n  gl_Position = vec4(positions[gl_VertexID],0,1);\\n  // gl_Position.xy = css_contain(gl_Position.xy, canvasR, R);\\n}  \";";

/***/ }),

/***/ 493:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\n#ifndef SPECTRAL\\n#define SPECTRAL\\n\\nconst int SPECTRAL_SIZE = 38;\\nconst float SPECTRAL_GAMMA = 2.4;\\nconst float SPECTRAL_EPSILON = 0.0001;\\n\\nfloat spectral_uncompand(float x) {\\n  return (x < 0.04045) ? x / 12.92 : pow((x + 0.055) / 1.055, SPECTRAL_GAMMA);\\n}\\n\\nfloat spectral_compand(float x) {\\n  return (x < 0.0031308) ? x * 12.92 : 1.055 * pow(x, 1.0 / SPECTRAL_GAMMA) - 0.055;\\n}\\n\\nvec3 spectral_srgb_to_linear(vec3 srgb) {\\n    return vec3(spectral_uncompand(srgb[0]), spectral_uncompand(srgb[1]), spectral_uncompand(srgb[2]));\\n}\\n\\nvec3 spectral_linear_to_srgb(vec3 lrgb) {\\n    return clamp(vec3(spectral_compand(lrgb[0]), spectral_compand(lrgb[1]), spectral_compand(lrgb[2])), 0.0, 1.0);\\n}\\n\\nvoid spectral_upsampling(vec3 lrgb, out float w, out float c, out float m, out float y, out float r, out float g, out float b) {\\n    w = min(lrgb.r, min(lrgb.g, lrgb.b));\\n\\n    lrgb -= w;\\n\\n    c = min(lrgb.g, lrgb.b);\\n    m = min(lrgb.r, lrgb.b);\\n    y = min(lrgb.r, lrgb.g);\\n    r = min(max(0., lrgb.r - lrgb.b), max(0., lrgb.r - lrgb.g));\\n    g = min(max(0., lrgb.g - lrgb.b), max(0., lrgb.g - lrgb.r));\\n    b = min(max(0., lrgb.b - lrgb.g), max(0., lrgb.b - lrgb.r));\\n}\\n\\nvoid spectral_linear_to_reflectance(vec3 lrgb, inout float R[SPECTRAL_SIZE]) {\\n    float w, c, m, y, r, g, b;\\n    \\n    spectral_upsampling(lrgb, w, c, m, y, r, g, b);\\n    \\n     R[0] = max(SPECTRAL_EPSILON, w + c * 0.96853629 + m * 0.51567122 + y * 0.02055257 + r * 0.03147571 + g * 0.49108579 + b * 0.97901834);\\n     R[1] = max(SPECTRAL_EPSILON, w + c * 0.96855103 + m * 0.54015520 + y * 0.02059936 + r * 0.03146636 + g * 0.46944057 + b * 0.97901649);\\n     R[2] = max(SPECTRAL_EPSILON, w + c * 0.96859338 + m * 0.62645502 + y * 0.02062723 + r * 0.03140624 + g * 0.40165780 + b * 0.97901118);\\n     R[3] = max(SPECTRAL_EPSILON, w + c * 0.96877345 + m * 0.75595012 + y * 0.02073387 + r * 0.03119611 + g * 0.24490420 + b * 0.97892146);\\n     R[4] = max(SPECTRAL_EPSILON, w + c * 0.96942204 + m * 0.92826996 + y * 0.02114202 + r * 0.03053888 + g * 0.06826880 + b * 0.97858555);\\n     R[5] = max(SPECTRAL_EPSILON, w + c * 0.97143709 + m * 0.97223624 + y * 0.02233154 + r * 0.02856855 + g * 0.02732883 + b * 0.97743705);\\n     R[6] = max(SPECTRAL_EPSILON, w + c * 0.97541862 + m * 0.98616174 + y * 0.02556857 + r * 0.02459485 + g * 0.01360600 + b * 0.97428075);\\n     R[7] = max(SPECTRAL_EPSILON, w + c * 0.98074186 + m * 0.98955255 + y * 0.03330189 + r * 0.01929520 + g * 0.01000187 + b * 0.96663223);\\n     R[8] = max(SPECTRAL_EPSILON, w + c * 0.98580992 + m * 0.98676237 + y * 0.05185294 + r * 0.01423112 + g * 0.01284127 + b * 0.94822893);\\n     R[9] = max(SPECTRAL_EPSILON, w + c * 0.98971194 + m * 0.97312575 + y * 0.10087639 + r * 0.01033111 + g * 0.02636635 + b * 0.89937713);\\n    R[10] = max(SPECTRAL_EPSILON, w + c * 0.99238027 + m * 0.91944277 + y * 0.24000413 + r * 0.00765876 + g * 0.07058713 + b * 0.76070164);\\n    R[11] = max(SPECTRAL_EPSILON, w + c * 0.99409844 + m * 0.32564851 + y * 0.53589066 + r * 0.00593693 + g * 0.70421692 + b * 0.46420440);\\n    R[12] = max(SPECTRAL_EPSILON, w + c * 0.99517200 + m * 0.13820628 + y * 0.79874659 + r * 0.00485616 + g * 0.85473994 + b * 0.20123039);\\n    R[13] = max(SPECTRAL_EPSILON, w + c * 0.99576545 + m * 0.05015143 + y * 0.91186529 + r * 0.00426186 + g * 0.95081565 + b * 0.08808402);\\n    R[14] = max(SPECTRAL_EPSILON, w + c * 0.99593552 + m * 0.02912336 + y * 0.95399623 + r * 0.00409039 + g * 0.97170370 + b * 0.04592894);\\n    R[15] = max(SPECTRAL_EPSILON, w + c * 0.99564041 + m * 0.02421691 + y * 0.97137099 + r * 0.00438375 + g * 0.97651888 + b * 0.02860373);\\n    R[16] = max(SPECTRAL_EPSILON, w + c * 0.99464769 + m * 0.02660696 + y * 0.97939505 + r * 0.00537525 + g * 0.97429245 + b * 0.02060067);\\n    R[17] = max(SPECTRAL_EPSILON, w + c * 0.99229579 + m * 0.03407586 + y * 0.98345207 + r * 0.00772962 + g * 0.97012917 + b * 0.01656701);\\n    R[18] = max(SPECTRAL_EPSILON, w + c * 0.98638762 + m * 0.04835936 + y * 0.98553736 + r * 0.01366120 + g * 0.94258630 + b * 0.01451549);\\n    R[19] = max(SPECTRAL_EPSILON, w + c * 0.96829712 + m * 0.00011720 + y * 0.98648905 + r * 0.03181352 + g * 0.99989207 + b * 0.01357964);\\n    R[20] = max(SPECTRAL_EPSILON, w + c * 0.89228016 + m * 0.00008554 + y * 0.98674535 + r * 0.10791525 + g * 0.99989891 + b * 0.01331243);\\n    R[21] = max(SPECTRAL_EPSILON, w + c * 0.53740239 + m * 0.85267882 + y * 0.98657555 + r * 0.46249516 + g * 0.13823139 + b * 0.01347661);\\n    R[22] = max(SPECTRAL_EPSILON, w + c * 0.15360445 + m * 0.93188793 + y * 0.98611877 + r * 0.84604333 + g * 0.06968113 + b * 0.01387181);\\n    R[23] = max(SPECTRAL_EPSILON, w + c * 0.05705719 + m * 0.94810268 + y * 0.98559942 + r * 0.94275572 + g * 0.05628787 + b * 0.01435472);\\n    R[24] = max(SPECTRAL_EPSILON, w + c * 0.03126539 + m * 0.94200977 + y * 0.98507063 + r * 0.96860996 + g * 0.06111561 + b * 0.01479836);\\n    R[25] = max(SPECTRAL_EPSILON, w + c * 0.02205445 + m * 0.91478045 + y * 0.98460039 + r * 0.97783966 + g * 0.08987709 + b * 0.01515250);\\n    R[26] = max(SPECTRAL_EPSILON, w + c * 0.01802271 + m * 0.87065445 + y * 0.98425301 + r * 0.98187757 + g * 0.13656016 + b * 0.01540513);\\n    R[27] = max(SPECTRAL_EPSILON, w + c * 0.01613460 + m * 0.78827548 + y * 0.98403909 + r * 0.98377315 + g * 0.22169624 + b * 0.01557233);\\n    R[28] = max(SPECTRAL_EPSILON, w + c * 0.01520947 + m * 0.65738359 + y * 0.98388535 + r * 0.98470202 + g * 0.32176956 + b * 0.01565710);\\n    R[29] = max(SPECTRAL_EPSILON, w + c * 0.01475977 + m * 0.59909403 + y * 0.98376116 + r * 0.98515481 + g * 0.36157329 + b * 0.01571025);\\n    R[30] = max(SPECTRAL_EPSILON, w + c * 0.01454263 + m * 0.56817268 + y * 0.98368246 + r * 0.98537114 + g * 0.48361920 + b * 0.01571916);\\n    R[31] = max(SPECTRAL_EPSILON, w + c * 0.01444459 + m * 0.54031997 + y * 0.98365023 + r * 0.98546685 + g * 0.46488579 + b * 0.01572133);\\n    R[32] = max(SPECTRAL_EPSILON, w + c * 0.01439897 + m * 0.52110241 + y * 0.98361309 + r * 0.98550011 + g * 0.47440306 + b * 0.01572502);\\n    R[33] = max(SPECTRAL_EPSILON, w + c * 0.01437620 + m * 0.51041094 + y * 0.98357259 + r * 0.98551031 + g * 0.48576990 + b * 0.01571717);\\n    R[34] = max(SPECTRAL_EPSILON, w + c * 0.01436343 + m * 0.50526577 + y * 0.98353856 + r * 0.98550741 + g * 0.49267971 + b * 0.01571905);\\n    R[35] = max(SPECTRAL_EPSILON, w + c * 0.01435687 + m * 0.50255080 + y * 0.98351247 + r * 0.98551323 + g * 0.49625685 + b * 0.01571059);\\n    R[36] = max(SPECTRAL_EPSILON, w + c * 0.01435370 + m * 0.50126452 + y * 0.98350101 + r * 0.98551563 + g * 0.49807754 + b * 0.01569728);\\n    R[37] = max(SPECTRAL_EPSILON, w + c * 0.01435408 + m * 0.50083021 + y * 0.98350852 + r * 0.98551547 + g * 0.49889859 + b * 0.01570020);\\n}\\n\\nvec3 spectral_xyz_to_srgb(vec3 xyz) {\\n    mat3 XYZ_RGB;\\n\\n    XYZ_RGB[0] = vec3( 3.24306333, -1.53837619, -0.49893282);\\n    XYZ_RGB[1] = vec3(-0.96896309,  1.87542451,  0.04154303);\\n    XYZ_RGB[2] = vec3( 0.05568392, -0.20417438,  1.05799454);\\n    \\n    float r = dot(XYZ_RGB[0], xyz);\\n    float g = dot(XYZ_RGB[1], xyz);\\n    float b = dot(XYZ_RGB[2], xyz);\\n\\n    return spectral_linear_to_srgb(vec3(r, g, b));\\n}\\n\\nvec3 spectral_reflectance_to_xyz(float R[SPECTRAL_SIZE]) {\\n    vec3 xyz = vec3(0.0);\\n    \\n    xyz +=  R[0] * vec3(0.00006469, 0.00000184, 0.00030502);\\n    xyz +=  R[1] * vec3(0.00021941, 0.00000621, 0.00103681);\\n    xyz +=  R[2] * vec3(0.00112057, 0.00003101, 0.00531314);\\n    xyz +=  R[3] * vec3(0.00376661, 0.00010475, 0.01795439);\\n    xyz +=  R[4] * vec3(0.01188055, 0.00035364, 0.05707758);\\n    xyz +=  R[5] * vec3(0.02328644, 0.00095147, 0.11365162);\\n    xyz +=  R[6] * vec3(0.03455942, 0.00228226, 0.17335873);\\n    xyz +=  R[7] * vec3(0.03722379, 0.00420733, 0.19620658);\\n    xyz +=  R[8] * vec3(0.03241838, 0.00668880, 0.18608237);\\n    xyz +=  R[9] * vec3(0.02123321, 0.00988840, 0.13995048);\\n    xyz += R[10] * vec3(0.01049099, 0.01524945, 0.08917453);\\n    xyz += R[11] * vec3(0.00329584, 0.02141831, 0.04789621);\\n    xyz += R[12] * vec3(0.00050704, 0.03342293, 0.02814563);\\n    xyz += R[13] * vec3(0.00094867, 0.05131001, 0.01613766);\\n    xyz += R[14] * vec3(0.00627372, 0.07040208, 0.00775910);\\n    xyz += R[15] * vec3(0.01686462, 0.08783871, 0.00429615);\\n    xyz += R[16] * vec3(0.02868965, 0.09424905, 0.00200551);\\n    xyz += R[17] * vec3(0.04267481, 0.09795667, 0.00086147);\\n    xyz += R[18] * vec3(0.05625475, 0.09415219, 0.00036904);\\n    xyz += R[19] * vec3(0.06947040, 0.08678102, 0.00019143);\\n    xyz += R[20] * vec3(0.08305315, 0.07885653, 0.00014956);\\n    xyz += R[21] * vec3(0.08612610, 0.06352670, 0.00009231);\\n    xyz += R[22] * vec3(0.09046614, 0.05374142, 0.00006813);\\n    xyz += R[23] * vec3(0.08500387, 0.04264606, 0.00002883);\\n    xyz += R[24] * vec3(0.07090667, 0.03161735, 0.00001577);\\n    xyz += R[25] * vec3(0.05062889, 0.02088521, 0.00000394);\\n    xyz += R[26] * vec3(0.03547396, 0.01386011, 0.00000158);\\n    xyz += R[27] * vec3(0.02146821, 0.00810264, 0.00000000);\\n    xyz += R[28] * vec3(0.01251646, 0.00463010, 0.00000000);\\n    xyz += R[29] * vec3(0.00680458, 0.00249138, 0.00000000);\\n    xyz += R[30] * vec3(0.00346457, 0.00125930, 0.00000000);\\n    xyz += R[31] * vec3(0.00149761, 0.00054165, 0.00000000);\\n    xyz += R[32] * vec3(0.00076970, 0.00027795, 0.00000000);\\n    xyz += R[33] * vec3(0.00040737, 0.00014711, 0.00000000);\\n    xyz += R[34] * vec3(0.00016901, 0.00006103, 0.00000000);\\n    xyz += R[35] * vec3(0.00009522, 0.00003439, 0.00000000);\\n    xyz += R[36] * vec3(0.00004903, 0.00001771, 0.00000000);\\n    xyz += R[37] * vec3(0.00002000, 0.00000722, 0.00000000);\\n\\n    return xyz;\\n}\\n\\nfloat spectral_linear_to_concentration(float l1, float l2, float t) {\\n    float t1 = l1 * pow(1.0 - t, 2.0);\\n    float t2 = l2 * pow(t, 2.0);\\n\\n    return t2 / (t1 + t2);\\n}\\n\\nvec3 spectral_mix(vec3 color1, vec3 color2, float t) {\\n    vec3 lrgb1 = spectral_srgb_to_linear(color1);\\n    vec3 lrgb2 = spectral_srgb_to_linear(color2);\\n\\n    float R1[SPECTRAL_SIZE];\\n    float R2[SPECTRAL_SIZE];\\n\\n    spectral_linear_to_reflectance(lrgb1, R1);\\n    spectral_linear_to_reflectance(lrgb2, R2);\\n\\n    float l1 = spectral_reflectance_to_xyz(R1)[1];\\n    float l2 = spectral_reflectance_to_xyz(R2)[1];\\n\\n    t = spectral_linear_to_concentration(l1, l2, t);\\n\\n    float R[SPECTRAL_SIZE];\\n\\n    for (int i = 0; i < SPECTRAL_SIZE; i++) {\\n      float KS = (1.0 - t) * (pow(1.0 - R1[i], 2.0) / (2.0 * R1[i])) + t * (pow(1.0 - R2[i], 2.0) / (2.0 * R2[i]));\\n      float KM = 1.0 + KS - sqrt(pow(KS, 2.0) + 2.0 * KS);\\n\\n      //Saunderson correction\\n      // let S = ((1.0 - K1) * (1.0 - K2) * KM) / (1.0 - K2 * KM);\\n\\n      R[i] = KM;\\n    }\\n\\n    return spectral_xyz_to_srgb(spectral_reflectance_to_xyz(R));\\n}\\n\\nvec4 spectral_mix(vec4 color1, vec4 color2, float t) {\\n    return vec4(spectral_mix(color1.rgb, color2.rgb, t), mix(color1.a, color2.a, t));\\n}\\n\\n#endif\\n\\nvec3 mul3( in mat3 m, in vec3 v ){return vec3(dot(v,m[0]),dot(v,m[1]),dot(v,m[2]));}\\n\\nvec3 mul3( in vec3 v, in mat3 m ){return mul3(m,v);}\\n\\nvec3 srgb2oklab(vec3 c) {\\n    \\n    mat3 m1 = mat3(\\n        0.4122214708,0.5363325363,0.0514459929,\\n        0.2119034982,0.6806995451,0.1073969566,\\n        0.0883024619,0.2817188376,0.6299787005\\n    );\\n    \\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = pow(lms,vec3(1./3.));\\n\\n    mat3 m2 = mat3(\\n        +0.2104542553,+0.7936177850,-0.0040720468,\\n        +1.9779984951,-2.4285922050,+0.4505937099,\\n        +0.0259040371,+0.7827717662,-0.8086757660\\n    );\\n    \\n    return mul3(m2,lms);\\n}\\n\\nvec3 oklab2srgb(vec3 c)\\n{\\n    mat3 m1 = mat3(\\n        1.0000000000,+0.3963377774,+0.2158037573,\\n        1.0000000000,-0.1055613458,-0.0638541728,\\n        1.0000000000,-0.0894841775,-1.2914855480\\n    );\\n\\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = lms * lms * lms;\\n  \\n    mat3 m2 = mat3(\\n        +4.0767416621,-3.3077115913,+0.2309699292,\\n        -1.2684380046,+2.6097574011,-0.3413193965,\\n        -0.0041960863,-0.7034186147,+1.7076147010\\n    );\\n    return mul3(m2,lms);\\n}\\n\\nvec3 lab2lch( in vec3 c ){return vec3(c.x,sqrt((c.y*c.y) + (c.z * c.z)),atan(c.z,c.y));}\\n\\nvec3 lch2lab( in vec3 c ){return vec3(c.x,c.y*cos(c.z),c.y*sin(c.z));}\\n\\nvec3 srgb_to_oklch( in vec3 c ) { return lab2lch(srgb2oklab(c)); }\\nvec3 oklch_to_srgb( in vec3 c ) { return oklab2srgb(lch2lab(c)); }\\n\\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\\n\\nfloat luma(vec4 color) { return dot(color.rgb, vec3(0.299, 0.587, 0.114)); }\\n\\nvec4 rgb2cmyki(in vec3 c) { float k = max(max(c.r, c.g), c.b); return min(vec4(c.rgb / k, k), 1.0); }\\n\\nvec3 cmyki2rgb(in vec4 c) { return c.rgb * c.a; }\\n\\nvec3 lerpHSV(in vec3 hsv1, in vec3 hsv2, in float rate)\\n{\\n    float hue = (mod(mod((hsv2.x-hsv1.x), 1.) + 1.5, 1.)-0.5)*rate + hsv1.x;\\n    return vec3(hue, mix(hsv1.yz, hsv2.yz, rate));\\n}\\n\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvec3 rgb2hsv(vec3 c)\\n{\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n    float d = q.x - min(q.w, q.y);\\n    float e = 1.0e-10;\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\nvec3 hsv2rgbSmooth( in vec3 hsv )\\n{\\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n\\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\\n\\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\\n}\\n\\nvec3 hueShift(vec3 col, vec3 hsv){\\n    vec3 h = rgb2hsv(col);\\n    h.x += hsv.x;\\n\\n    h.y *= hsv.y;\\n    h.z *= hsv.z;\\n\\n    return hsv2rgbSmooth(h);\\n}\\n\\nvec4 blend_brushstroke(vec4 col, vec4 stroke, int blending_colour_space){\\n  // col.xyz = mix(col.xyz, stroke.xyz, stroke.w); \\n  \\n  int mode = blending_colour_space;\\n  \\n  if(stroke.w > 0.00000001){\\n    // float interpolant = stroke.w;\\n    stroke.xyz = stroke.xyz/max(stroke.w,0.001);\\n    \\n    if(mode == 0){\\n      col.xyz = spectral_mix(col.xyz, clamp(stroke.xyz,0.00001,0.99999), stroke.w);\\n      if(stroke.w > 0.99999)\\n        col.xyz = stroke.xyz;\\n    } else if(mode == 1){\\n      col.xyz = srgb_to_oklch( col.xyz );\\n      stroke.xyz = srgb_to_oklch( stroke.xyz );\\n      col.xy = mix(col.xy, stroke.xy,stroke.w);\\n      float tau = acos(-1.) * 2.;\\n      float h_a = stroke.z;\\n      float h_b = stroke.z + tau;\\n      float dist_a = abs(col.z - h_a);\\n      float dist_b = abs(col.z - h_b);\\n      if(dist_a < dist_b){\\n        col.z = mix(col.z, h_a, stroke.w);\\n      } else {\\n        col.z = mix(col.z, h_b, stroke.w);\\n      }\\n      col.z = mod(col.z, tau);\\n      // col.z = max(col.z)\\n      // if(isnan(col.z)){\\n      //   col.z = 1.;\\n      // }\\n\\n      col.xyz = oklch_to_srgb( col.xyz );\\n      col.xyz = clamp(col.xyz,0.,1.);\\n    \\n    } else {\\n      col.xyz = mix(col.xyz, stroke.xyz, stroke.w);\\n    }\\n    col.w = max(col.w, stroke.w);\\n  }\\n\\n  return col; \\n}\\n\\n// uniform float pong_idx;\\nuniform int amogus;\\nuniform int blending_colour_space;\\nin vec2 uv;\\nout vec4 col;\\nvoid main() {\\n  // col = texture(canvas_back,uv);\\n  \\n  col = texture(canvas_b,uv);\\n  col.w = 1.;\\n\\n    // col.xyzw = vec4(1);\\n\\n  vec4 temp_tex = texture(temp_tex,uv);\\n  // col.xyz = mix(col.xyz, temp_tex.xyz, temp_tex.w);\\n \\n  if(temp_tex.w > 0.000001)\\n    col = blend_brushstroke(col,temp_tex,blending_colour_space); \\n}      \";";

/***/ }),

/***/ 754:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\nuint seed = 11425u;\\n\\nuint hash_u(uint _a) {\\n   uint a = _a;\\n   a ^= a >> 16;\\n   a *= 0x7feb352du;\\n   a ^= a >> 15;\\n   a *= 0x846ca68bu;\\n   a ^= a >> 16;\\n   return a; \\n }\\nfloat hash_f(){ uint s = hash_u(seed); seed = s;return ( float( s ) / float( 0xffffffffu ) ); }\\nvec2 hash_v2(){ return vec2(hash_f(), hash_f()); }\\nvec3 hash_v3(){ return vec3(hash_f(), hash_f(), hash_f()); }\\nvec4 hash_v4(){ return vec4(hash_f(), hash_f(), hash_f(), hash_f()); }\\n\\nfloat hash_f_s(uint s){ s = hash_u(s); return ( float( s ) / float( 0xffffffffu ) ); }\\n// vec2 hash_22_s(uvec2 s){ uint _s = hash_u(s.x) + hash_u(s.y); return vec2(hash_f_s(_s.x), hash_f_s(_s.y)); }\\nfloat hash_21_s(ivec2 _s_){ \\n  uvec2 s = uvec2(_s_);\\n  uint _s = hash_u(s.x + hash_u(s.y)) + hash_u(s.y + hash_u(s.x)); \\n  return hash_f_s(_s); \\n}\\n// vec3 hash_23_s(){ return vec3(hash_f_s(), hash_f_s(), hash_f_s()); }\\n// vec4 hash_24_s(){ return vec4(hash_f_s(), hash_f_s(), hash_f_s(), hash_f_s()); }\\n\\nfloat valueNoise( in vec2 p ){\\n    p += 100.;\\n    ivec2 i = ivec2(floor( p ));\\n    vec2 f = fract( p );\\n\\n    // cubic interpolant\\n    vec2 u = f*f*(3.0-2.0*f);\\n\\n    return mix( mix( hash_21_s( i + ivec2(0,0) ), \\n                     hash_21_s( i + ivec2(1,0) ), u.x),\\n                mix( hash_21_s( i + ivec2(0,1) ), \\n                     hash_21_s( i + ivec2(1,1) ), u.x), u.y);\\n}\\n\\nvec3 mul3( in mat3 m, in vec3 v ){return vec3(dot(v,m[0]),dot(v,m[1]),dot(v,m[2]));}\\n\\nvec3 mul3( in vec3 v, in mat3 m ){return mul3(m,v);}\\n\\nvec3 srgb2oklab(vec3 c) {\\n    \\n    mat3 m1 = mat3(\\n        0.4122214708,0.5363325363,0.0514459929,\\n        0.2119034982,0.6806995451,0.1073969566,\\n        0.0883024619,0.2817188376,0.6299787005\\n    );\\n    \\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = pow(lms,vec3(1./3.));\\n\\n    mat3 m2 = mat3(\\n        +0.2104542553,+0.7936177850,-0.0040720468,\\n        +1.9779984951,-2.4285922050,+0.4505937099,\\n        +0.0259040371,+0.7827717662,-0.8086757660\\n    );\\n    \\n    return mul3(m2,lms);\\n}\\n\\nvec3 oklab2srgb(vec3 c)\\n{\\n    mat3 m1 = mat3(\\n        1.0000000000,+0.3963377774,+0.2158037573,\\n        1.0000000000,-0.1055613458,-0.0638541728,\\n        1.0000000000,-0.0894841775,-1.2914855480\\n    );\\n\\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = lms * lms * lms;\\n  \\n    mat3 m2 = mat3(\\n        +4.0767416621,-3.3077115913,+0.2309699292,\\n        -1.2684380046,+2.6097574011,-0.3413193965,\\n        -0.0041960863,-0.7034186147,+1.7076147010\\n    );\\n    return mul3(m2,lms);\\n}\\n\\nvec3 lab2lch( in vec3 c ){return vec3(c.x,sqrt((c.y*c.y) + (c.z * c.z)),atan(c.z,c.y));}\\n\\nvec3 lch2lab( in vec3 c ){return vec3(c.x,c.y*cos(c.z),c.y*sin(c.z));}\\n\\nvec3 srgb_to_oklch( in vec3 c ) { return lab2lch(srgb2oklab(c)); }\\nvec3 oklch_to_srgb( in vec3 c ) { return oklab2srgb(lch2lab(c)); }\\n\\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\\n\\nfloat luma(vec4 color) { return dot(color.rgb, vec3(0.299, 0.587, 0.114)); }\\n\\nvec4 rgb2cmyki(in vec3 c) { float k = max(max(c.r, c.g), c.b); return min(vec4(c.rgb / k, k), 1.0); }\\n\\nvec3 cmyki2rgb(in vec4 c) { return c.rgb * c.a; }\\n\\nvec3 lerpHSV(in vec3 hsv1, in vec3 hsv2, in float rate)\\n{\\n    float hue = (mod(mod((hsv2.x-hsv1.x), 1.) + 1.5, 1.)-0.5)*rate + hsv1.x;\\n    return vec3(hue, mix(hsv1.yz, hsv2.yz, rate));\\n}\\n\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvec3 rgb2hsv(vec3 c)\\n{\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n    float d = q.x - min(q.w, q.y);\\n    float e = 1.0e-10;\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\nvec3 hsv2rgbSmooth( in vec3 hsv )\\n{\\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n\\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\\n\\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\\n}\\n\\nvec3 hueShift(vec3 col, vec3 hsv){\\n    vec3 h = rgb2hsv(col);\\n    h.x += hsv.x;\\n\\n    h.y *= hsv.y;\\n    h.z *= hsv.z;\\n\\n    return hsv2rgbSmooth(h);\\n}\\n\\nuniform vec3 picked_col;\\n\\nin vec2 uv;\\nout vec4 col;\\nvoid main() {\\n  // col = vec4(1);\\n  col.xyz = picked_col;\\n  \\n  vec2 u = uv;\\n  u = abs(u) - 0.8;\\n  float rect_sdf = max(u.x,u.y);\\n  // float fw = abs(fwidth(rect_sdf));\\n  // rect_sdf += fw;\\n  if(rect_sdf >0.)\\n    col.xyz = vec3(1);\\n\\n  col.w = 1.;\\n  // col.xyz *= 1.;\\n  // col.xyz = vec3(1);\\n}\";";

/***/ }),

/***/ 451:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\nvec2 css_contain(vec2 u, vec2 input_res, vec2 tex_res){\\n\\tfloat input_ratio = (input_res.x/input_res.y);\\n\\tfloat tex_ratio = (tex_res.x/tex_res.y);\\n\\tfloat ratio = input_ratio / tex_ratio;\\n\\t\\n\\tif(ratio < 1.){\\n\\t\\t// gl_Position.x -= ( 1. - 1./ratio)*0.5;\\n\\t\\tu.x *= ratio;\\n\\t} else {\\n\\t\\t// gl_Position.y -= ( 1. - ratio)*0.5;\\n\\t\\tu.y /= ratio;\\n\\t}\\n  return u;\\n}\\n\\nvec2 ndc_aspect_correct(vec2 u, vec2 r){\\n\\tif(r.x < r.y){\\n\\t\\tu.y /= r.y/r.x;\\n\\t} else {\\n\\t\\tu.x /= r.x/r.y;\\n\\t}\\n  return u;\\n}\\n\\nuniform vec2 picker_pos;\\nout vec2 uv;\\nvoid main(){\\n  gl_Position = vec4(positions[gl_VertexID],0,1);\\n  uv = gl_Position.xy;\\n  gl_Position.xy *= ndc_aspect_correct(vec2(0.05), R);\\n  gl_Position.xy += picker_pos;\\n}\";";

/***/ }),

/***/ 38:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\n\\n#ifndef SPECTRAL\\n#define SPECTRAL\\n\\nconst int SPECTRAL_SIZE = 38;\\nconst float SPECTRAL_GAMMA = 2.4;\\nconst float SPECTRAL_EPSILON = 0.0001;\\n\\nfloat spectral_uncompand(float x) {\\n  return (x < 0.04045) ? x / 12.92 : pow((x + 0.055) / 1.055, SPECTRAL_GAMMA);\\n}\\n\\nfloat spectral_compand(float x) {\\n  return (x < 0.0031308) ? x * 12.92 : 1.055 * pow(x, 1.0 / SPECTRAL_GAMMA) - 0.055;\\n}\\n\\nvec3 spectral_srgb_to_linear(vec3 srgb) {\\n    return vec3(spectral_uncompand(srgb[0]), spectral_uncompand(srgb[1]), spectral_uncompand(srgb[2]));\\n}\\n\\nvec3 spectral_linear_to_srgb(vec3 lrgb) {\\n    return clamp(vec3(spectral_compand(lrgb[0]), spectral_compand(lrgb[1]), spectral_compand(lrgb[2])), 0.0, 1.0);\\n}\\n\\nvoid spectral_upsampling(vec3 lrgb, out float w, out float c, out float m, out float y, out float r, out float g, out float b) {\\n    w = min(lrgb.r, min(lrgb.g, lrgb.b));\\n\\n    lrgb -= w;\\n\\n    c = min(lrgb.g, lrgb.b);\\n    m = min(lrgb.r, lrgb.b);\\n    y = min(lrgb.r, lrgb.g);\\n    r = min(max(0., lrgb.r - lrgb.b), max(0., lrgb.r - lrgb.g));\\n    g = min(max(0., lrgb.g - lrgb.b), max(0., lrgb.g - lrgb.r));\\n    b = min(max(0., lrgb.b - lrgb.g), max(0., lrgb.b - lrgb.r));\\n}\\n\\nvoid spectral_linear_to_reflectance(vec3 lrgb, inout float R[SPECTRAL_SIZE]) {\\n    float w, c, m, y, r, g, b;\\n    \\n    spectral_upsampling(lrgb, w, c, m, y, r, g, b);\\n    \\n     R[0] = max(SPECTRAL_EPSILON, w + c * 0.96853629 + m * 0.51567122 + y * 0.02055257 + r * 0.03147571 + g * 0.49108579 + b * 0.97901834);\\n     R[1] = max(SPECTRAL_EPSILON, w + c * 0.96855103 + m * 0.54015520 + y * 0.02059936 + r * 0.03146636 + g * 0.46944057 + b * 0.97901649);\\n     R[2] = max(SPECTRAL_EPSILON, w + c * 0.96859338 + m * 0.62645502 + y * 0.02062723 + r * 0.03140624 + g * 0.40165780 + b * 0.97901118);\\n     R[3] = max(SPECTRAL_EPSILON, w + c * 0.96877345 + m * 0.75595012 + y * 0.02073387 + r * 0.03119611 + g * 0.24490420 + b * 0.97892146);\\n     R[4] = max(SPECTRAL_EPSILON, w + c * 0.96942204 + m * 0.92826996 + y * 0.02114202 + r * 0.03053888 + g * 0.06826880 + b * 0.97858555);\\n     R[5] = max(SPECTRAL_EPSILON, w + c * 0.97143709 + m * 0.97223624 + y * 0.02233154 + r * 0.02856855 + g * 0.02732883 + b * 0.97743705);\\n     R[6] = max(SPECTRAL_EPSILON, w + c * 0.97541862 + m * 0.98616174 + y * 0.02556857 + r * 0.02459485 + g * 0.01360600 + b * 0.97428075);\\n     R[7] = max(SPECTRAL_EPSILON, w + c * 0.98074186 + m * 0.98955255 + y * 0.03330189 + r * 0.01929520 + g * 0.01000187 + b * 0.96663223);\\n     R[8] = max(SPECTRAL_EPSILON, w + c * 0.98580992 + m * 0.98676237 + y * 0.05185294 + r * 0.01423112 + g * 0.01284127 + b * 0.94822893);\\n     R[9] = max(SPECTRAL_EPSILON, w + c * 0.98971194 + m * 0.97312575 + y * 0.10087639 + r * 0.01033111 + g * 0.02636635 + b * 0.89937713);\\n    R[10] = max(SPECTRAL_EPSILON, w + c * 0.99238027 + m * 0.91944277 + y * 0.24000413 + r * 0.00765876 + g * 0.07058713 + b * 0.76070164);\\n    R[11] = max(SPECTRAL_EPSILON, w + c * 0.99409844 + m * 0.32564851 + y * 0.53589066 + r * 0.00593693 + g * 0.70421692 + b * 0.46420440);\\n    R[12] = max(SPECTRAL_EPSILON, w + c * 0.99517200 + m * 0.13820628 + y * 0.79874659 + r * 0.00485616 + g * 0.85473994 + b * 0.20123039);\\n    R[13] = max(SPECTRAL_EPSILON, w + c * 0.99576545 + m * 0.05015143 + y * 0.91186529 + r * 0.00426186 + g * 0.95081565 + b * 0.08808402);\\n    R[14] = max(SPECTRAL_EPSILON, w + c * 0.99593552 + m * 0.02912336 + y * 0.95399623 + r * 0.00409039 + g * 0.97170370 + b * 0.04592894);\\n    R[15] = max(SPECTRAL_EPSILON, w + c * 0.99564041 + m * 0.02421691 + y * 0.97137099 + r * 0.00438375 + g * 0.97651888 + b * 0.02860373);\\n    R[16] = max(SPECTRAL_EPSILON, w + c * 0.99464769 + m * 0.02660696 + y * 0.97939505 + r * 0.00537525 + g * 0.97429245 + b * 0.02060067);\\n    R[17] = max(SPECTRAL_EPSILON, w + c * 0.99229579 + m * 0.03407586 + y * 0.98345207 + r * 0.00772962 + g * 0.97012917 + b * 0.01656701);\\n    R[18] = max(SPECTRAL_EPSILON, w + c * 0.98638762 + m * 0.04835936 + y * 0.98553736 + r * 0.01366120 + g * 0.94258630 + b * 0.01451549);\\n    R[19] = max(SPECTRAL_EPSILON, w + c * 0.96829712 + m * 0.00011720 + y * 0.98648905 + r * 0.03181352 + g * 0.99989207 + b * 0.01357964);\\n    R[20] = max(SPECTRAL_EPSILON, w + c * 0.89228016 + m * 0.00008554 + y * 0.98674535 + r * 0.10791525 + g * 0.99989891 + b * 0.01331243);\\n    R[21] = max(SPECTRAL_EPSILON, w + c * 0.53740239 + m * 0.85267882 + y * 0.98657555 + r * 0.46249516 + g * 0.13823139 + b * 0.01347661);\\n    R[22] = max(SPECTRAL_EPSILON, w + c * 0.15360445 + m * 0.93188793 + y * 0.98611877 + r * 0.84604333 + g * 0.06968113 + b * 0.01387181);\\n    R[23] = max(SPECTRAL_EPSILON, w + c * 0.05705719 + m * 0.94810268 + y * 0.98559942 + r * 0.94275572 + g * 0.05628787 + b * 0.01435472);\\n    R[24] = max(SPECTRAL_EPSILON, w + c * 0.03126539 + m * 0.94200977 + y * 0.98507063 + r * 0.96860996 + g * 0.06111561 + b * 0.01479836);\\n    R[25] = max(SPECTRAL_EPSILON, w + c * 0.02205445 + m * 0.91478045 + y * 0.98460039 + r * 0.97783966 + g * 0.08987709 + b * 0.01515250);\\n    R[26] = max(SPECTRAL_EPSILON, w + c * 0.01802271 + m * 0.87065445 + y * 0.98425301 + r * 0.98187757 + g * 0.13656016 + b * 0.01540513);\\n    R[27] = max(SPECTRAL_EPSILON, w + c * 0.01613460 + m * 0.78827548 + y * 0.98403909 + r * 0.98377315 + g * 0.22169624 + b * 0.01557233);\\n    R[28] = max(SPECTRAL_EPSILON, w + c * 0.01520947 + m * 0.65738359 + y * 0.98388535 + r * 0.98470202 + g * 0.32176956 + b * 0.01565710);\\n    R[29] = max(SPECTRAL_EPSILON, w + c * 0.01475977 + m * 0.59909403 + y * 0.98376116 + r * 0.98515481 + g * 0.36157329 + b * 0.01571025);\\n    R[30] = max(SPECTRAL_EPSILON, w + c * 0.01454263 + m * 0.56817268 + y * 0.98368246 + r * 0.98537114 + g * 0.48361920 + b * 0.01571916);\\n    R[31] = max(SPECTRAL_EPSILON, w + c * 0.01444459 + m * 0.54031997 + y * 0.98365023 + r * 0.98546685 + g * 0.46488579 + b * 0.01572133);\\n    R[32] = max(SPECTRAL_EPSILON, w + c * 0.01439897 + m * 0.52110241 + y * 0.98361309 + r * 0.98550011 + g * 0.47440306 + b * 0.01572502);\\n    R[33] = max(SPECTRAL_EPSILON, w + c * 0.01437620 + m * 0.51041094 + y * 0.98357259 + r * 0.98551031 + g * 0.48576990 + b * 0.01571717);\\n    R[34] = max(SPECTRAL_EPSILON, w + c * 0.01436343 + m * 0.50526577 + y * 0.98353856 + r * 0.98550741 + g * 0.49267971 + b * 0.01571905);\\n    R[35] = max(SPECTRAL_EPSILON, w + c * 0.01435687 + m * 0.50255080 + y * 0.98351247 + r * 0.98551323 + g * 0.49625685 + b * 0.01571059);\\n    R[36] = max(SPECTRAL_EPSILON, w + c * 0.01435370 + m * 0.50126452 + y * 0.98350101 + r * 0.98551563 + g * 0.49807754 + b * 0.01569728);\\n    R[37] = max(SPECTRAL_EPSILON, w + c * 0.01435408 + m * 0.50083021 + y * 0.98350852 + r * 0.98551547 + g * 0.49889859 + b * 0.01570020);\\n}\\n\\nvec3 spectral_xyz_to_srgb(vec3 xyz) {\\n    mat3 XYZ_RGB;\\n\\n    XYZ_RGB[0] = vec3( 3.24306333, -1.53837619, -0.49893282);\\n    XYZ_RGB[1] = vec3(-0.96896309,  1.87542451,  0.04154303);\\n    XYZ_RGB[2] = vec3( 0.05568392, -0.20417438,  1.05799454);\\n    \\n    float r = dot(XYZ_RGB[0], xyz);\\n    float g = dot(XYZ_RGB[1], xyz);\\n    float b = dot(XYZ_RGB[2], xyz);\\n\\n    return spectral_linear_to_srgb(vec3(r, g, b));\\n}\\n\\nvec3 spectral_reflectance_to_xyz(float R[SPECTRAL_SIZE]) {\\n    vec3 xyz = vec3(0.0);\\n    \\n    xyz +=  R[0] * vec3(0.00006469, 0.00000184, 0.00030502);\\n    xyz +=  R[1] * vec3(0.00021941, 0.00000621, 0.00103681);\\n    xyz +=  R[2] * vec3(0.00112057, 0.00003101, 0.00531314);\\n    xyz +=  R[3] * vec3(0.00376661, 0.00010475, 0.01795439);\\n    xyz +=  R[4] * vec3(0.01188055, 0.00035364, 0.05707758);\\n    xyz +=  R[5] * vec3(0.02328644, 0.00095147, 0.11365162);\\n    xyz +=  R[6] * vec3(0.03455942, 0.00228226, 0.17335873);\\n    xyz +=  R[7] * vec3(0.03722379, 0.00420733, 0.19620658);\\n    xyz +=  R[8] * vec3(0.03241838, 0.00668880, 0.18608237);\\n    xyz +=  R[9] * vec3(0.02123321, 0.00988840, 0.13995048);\\n    xyz += R[10] * vec3(0.01049099, 0.01524945, 0.08917453);\\n    xyz += R[11] * vec3(0.00329584, 0.02141831, 0.04789621);\\n    xyz += R[12] * vec3(0.00050704, 0.03342293, 0.02814563);\\n    xyz += R[13] * vec3(0.00094867, 0.05131001, 0.01613766);\\n    xyz += R[14] * vec3(0.00627372, 0.07040208, 0.00775910);\\n    xyz += R[15] * vec3(0.01686462, 0.08783871, 0.00429615);\\n    xyz += R[16] * vec3(0.02868965, 0.09424905, 0.00200551);\\n    xyz += R[17] * vec3(0.04267481, 0.09795667, 0.00086147);\\n    xyz += R[18] * vec3(0.05625475, 0.09415219, 0.00036904);\\n    xyz += R[19] * vec3(0.06947040, 0.08678102, 0.00019143);\\n    xyz += R[20] * vec3(0.08305315, 0.07885653, 0.00014956);\\n    xyz += R[21] * vec3(0.08612610, 0.06352670, 0.00009231);\\n    xyz += R[22] * vec3(0.09046614, 0.05374142, 0.00006813);\\n    xyz += R[23] * vec3(0.08500387, 0.04264606, 0.00002883);\\n    xyz += R[24] * vec3(0.07090667, 0.03161735, 0.00001577);\\n    xyz += R[25] * vec3(0.05062889, 0.02088521, 0.00000394);\\n    xyz += R[26] * vec3(0.03547396, 0.01386011, 0.00000158);\\n    xyz += R[27] * vec3(0.02146821, 0.00810264, 0.00000000);\\n    xyz += R[28] * vec3(0.01251646, 0.00463010, 0.00000000);\\n    xyz += R[29] * vec3(0.00680458, 0.00249138, 0.00000000);\\n    xyz += R[30] * vec3(0.00346457, 0.00125930, 0.00000000);\\n    xyz += R[31] * vec3(0.00149761, 0.00054165, 0.00000000);\\n    xyz += R[32] * vec3(0.00076970, 0.00027795, 0.00000000);\\n    xyz += R[33] * vec3(0.00040737, 0.00014711, 0.00000000);\\n    xyz += R[34] * vec3(0.00016901, 0.00006103, 0.00000000);\\n    xyz += R[35] * vec3(0.00009522, 0.00003439, 0.00000000);\\n    xyz += R[36] * vec3(0.00004903, 0.00001771, 0.00000000);\\n    xyz += R[37] * vec3(0.00002000, 0.00000722, 0.00000000);\\n\\n    return xyz;\\n}\\n\\nfloat spectral_linear_to_concentration(float l1, float l2, float t) {\\n    float t1 = l1 * pow(1.0 - t, 2.0);\\n    float t2 = l2 * pow(t, 2.0);\\n\\n    return t2 / (t1 + t2);\\n}\\n\\nvec3 spectral_mix(vec3 color1, vec3 color2, float t) {\\n    vec3 lrgb1 = spectral_srgb_to_linear(color1);\\n    vec3 lrgb2 = spectral_srgb_to_linear(color2);\\n\\n    float R1[SPECTRAL_SIZE];\\n    float R2[SPECTRAL_SIZE];\\n\\n    spectral_linear_to_reflectance(lrgb1, R1);\\n    spectral_linear_to_reflectance(lrgb2, R2);\\n\\n    float l1 = spectral_reflectance_to_xyz(R1)[1];\\n    float l2 = spectral_reflectance_to_xyz(R2)[1];\\n\\n    t = spectral_linear_to_concentration(l1, l2, t);\\n\\n    float R[SPECTRAL_SIZE];\\n\\n    for (int i = 0; i < SPECTRAL_SIZE; i++) {\\n      float KS = (1.0 - t) * (pow(1.0 - R1[i], 2.0) / (2.0 * R1[i])) + t * (pow(1.0 - R2[i], 2.0) / (2.0 * R2[i]));\\n      float KM = 1.0 + KS - sqrt(pow(KS, 2.0) + 2.0 * KS);\\n\\n      //Saunderson correction\\n      // let S = ((1.0 - K1) * (1.0 - K2) * KM) / (1.0 - K2 * KM);\\n\\n      R[i] = KM;\\n    }\\n\\n    return spectral_xyz_to_srgb(spectral_reflectance_to_xyz(R));\\n}\\n\\nvec4 spectral_mix(vec4 color1, vec4 color2, float t) {\\n    return vec4(spectral_mix(color1.rgb, color2.rgb, t), mix(color1.a, color2.a, t));\\n}\\n\\n#endif\\n\\nvec3 mul3( in mat3 m, in vec3 v ){return vec3(dot(v,m[0]),dot(v,m[1]),dot(v,m[2]));}\\n\\nvec3 mul3( in vec3 v, in mat3 m ){return mul3(m,v);}\\n\\nvec3 srgb2oklab(vec3 c) {\\n    \\n    mat3 m1 = mat3(\\n        0.4122214708,0.5363325363,0.0514459929,\\n        0.2119034982,0.6806995451,0.1073969566,\\n        0.0883024619,0.2817188376,0.6299787005\\n    );\\n    \\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = pow(lms,vec3(1./3.));\\n\\n    mat3 m2 = mat3(\\n        +0.2104542553,+0.7936177850,-0.0040720468,\\n        +1.9779984951,-2.4285922050,+0.4505937099,\\n        +0.0259040371,+0.7827717662,-0.8086757660\\n    );\\n    \\n    return mul3(m2,lms);\\n}\\n\\nvec3 oklab2srgb(vec3 c)\\n{\\n    mat3 m1 = mat3(\\n        1.0000000000,+0.3963377774,+0.2158037573,\\n        1.0000000000,-0.1055613458,-0.0638541728,\\n        1.0000000000,-0.0894841775,-1.2914855480\\n    );\\n\\n    vec3 lms = mul3(m1,c);\\n    \\n    lms = lms * lms * lms;\\n  \\n    mat3 m2 = mat3(\\n        +4.0767416621,-3.3077115913,+0.2309699292,\\n        -1.2684380046,+2.6097574011,-0.3413193965,\\n        -0.0041960863,-0.7034186147,+1.7076147010\\n    );\\n    return mul3(m2,lms);\\n}\\n\\nvec3 lab2lch( in vec3 c ){return vec3(c.x,sqrt((c.y*c.y) + (c.z * c.z)),atan(c.z,c.y));}\\n\\nvec3 lch2lab( in vec3 c ){return vec3(c.x,c.y*cos(c.z),c.y*sin(c.z));}\\n\\nvec3 srgb_to_oklch( in vec3 c ) { return lab2lch(srgb2oklab(c)); }\\nvec3 oklch_to_srgb( in vec3 c ) { return oklab2srgb(lch2lab(c)); }\\n\\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\\n\\nfloat luma(vec4 color) { return dot(color.rgb, vec3(0.299, 0.587, 0.114)); }\\n\\nvec4 rgb2cmyki(in vec3 c) { float k = max(max(c.r, c.g), c.b); return min(vec4(c.rgb / k, k), 1.0); }\\n\\nvec3 cmyki2rgb(in vec4 c) { return c.rgb * c.a; }\\n\\nvec3 lerpHSV(in vec3 hsv1, in vec3 hsv2, in float rate)\\n{\\n    float hue = (mod(mod((hsv2.x-hsv1.x), 1.) + 1.5, 1.)-0.5)*rate + hsv1.x;\\n    return vec3(hue, mix(hsv1.yz, hsv2.yz, rate));\\n}\\n\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\nvec3 rgb2hsv(vec3 c)\\n{\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n    float d = q.x - min(q.w, q.y);\\n    float e = 1.0e-10;\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\nvec3 hsv2rgbSmooth( in vec3 hsv )\\n{\\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n\\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\\n\\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\\n}\\n\\nvec3 hueShift(vec3 col, vec3 hsv){\\n    vec3 h = rgb2hsv(col);\\n    h.x += hsv.x;\\n\\n    h.y *= hsv.y;\\n    h.z *= hsv.z;\\n\\n    return hsv2rgbSmooth(h);\\n}\\n\\nvec4 blend_brushstroke(vec4 col, vec4 stroke, int blending_colour_space){\\n  // col.xyz = mix(col.xyz, stroke.xyz, stroke.w); \\n  \\n  int mode = blending_colour_space;\\n  \\n  if(stroke.w > 0.00000001){\\n    // float interpolant = stroke.w;\\n    stroke.xyz = stroke.xyz/max(stroke.w,0.001);\\n    \\n    if(mode == 0){\\n      col.xyz = spectral_mix(col.xyz, clamp(stroke.xyz,0.00001,0.99999), stroke.w);\\n      if(stroke.w > 0.99999)\\n        col.xyz = stroke.xyz;\\n    } else if(mode == 1){\\n      col.xyz = srgb_to_oklch( col.xyz );\\n      stroke.xyz = srgb_to_oklch( stroke.xyz );\\n      col.xy = mix(col.xy, stroke.xy,stroke.w);\\n      float tau = acos(-1.) * 2.;\\n      float h_a = stroke.z;\\n      float h_b = stroke.z + tau;\\n      float dist_a = abs(col.z - h_a);\\n      float dist_b = abs(col.z - h_b);\\n      if(dist_a < dist_b){\\n        col.z = mix(col.z, h_a, stroke.w);\\n      } else {\\n        col.z = mix(col.z, h_b, stroke.w);\\n      }\\n      col.z = mod(col.z, tau);\\n      // col.z = max(col.z)\\n      // if(isnan(col.z)){\\n      //   col.z = 1.;\\n      // }\\n\\n      col.xyz = oklch_to_srgb( col.xyz );\\n      col.xyz = clamp(col.xyz,0.,1.);\\n    \\n    } else {\\n      col.xyz = mix(col.xyz, stroke.xyz, stroke.w);\\n    }\\n    col.w = max(col.w, stroke.w);\\n  }\\n\\n  return col; \\n}\\n\\nuniform int blending_colour_space;\\nin vec2 uv;\\nout vec4 col;\\n\\nvec4 sample_tex_mobile(sampler2D tex, vec2 fruv, ivec2 ifuv){\\n  ivec3 st = ivec3(1,1,0);\\n  return mix(\\n    mix(\\n      texelFetch(tex,ifuv,0),\\n      texelFetch(tex,ifuv + st.xz,0),\\n      // smoothstep(0.,1.,fruv.x)\\n      fruv.x\\n    ),\\n    mix(\\n      texelFetch(tex,ifuv + st.zy,0),\\n      texelFetch(tex,ifuv + st.xy,0),\\n      // smoothstep(0.,1.,fruv.x)\\n      fruv.x\\n    ),\\n    // smoothstep(0.,1.,fruv.y)\\n    fruv.y\\n  );\\n}\\nvec4 sample_tex_desktop(sampler2D tex, vec2 uv){\\n\\n    vec2 dx = dFdx(uv.xy);\\n    vec2 dy = dFdy(uv.xy);\\n\\n    vec2 textureRes = vec2(textureSize(tex,0));\\n\\n    dx *= clamp( 0.5 * log2(dot(dx * textureRes, dx * textureRes)), 0., 1.);\\n    dy *= clamp( 0.5 * log2(dot(dy * textureRes, dy * textureRes)), 0., 1.);\\n\\n    float _Bias = -1.;\\n    vec2 uvOffsets = vec2(0.125, 0.375);\\n    vec2 offsetUV = vec2(0.0, 0.0);\\n    \\n    vec4 col = vec4(0);\\n    // supersampled using 2x2 rotated grid\\n    // half4 col = 0;\\n    offsetUV.xy = uv.xy + uvOffsets.x * dx + uvOffsets.y * dy;\\n    col += texture(tex, offsetUV, _Bias);\\n    offsetUV.xy = uv.xy - uvOffsets.x * dx - uvOffsets.y * dy;\\n    col += texture(tex, offsetUV, _Bias);\\n    offsetUV.xy = uv.xy + uvOffsets.y * dx - uvOffsets.x * dy;\\n    col += texture(tex, offsetUV, _Bias);\\n    offsetUV.xy = uv.xy - uvOffsets.y * dx + uvOffsets.x * dy;\\n    col += texture(tex, offsetUV, _Bias);\\n    col *= 0.25;\\n    return col;\\n}\\nvoid main() {\\n  col = vec4(1);\\n  \\n  vec4 _temp_tex;\\n  \\n  if(is_on_mobile > 0.5){\\n    ivec2 ifuv = ivec2(uv*canvasR);\\n    vec2 fruv = fract(uv*canvasR);\\n\\n    col.xyz = sample_tex_mobile(canvas_back, fruv, ifuv).xyz;\\n    _temp_tex = sample_tex_mobile(temp_tex, fruv, ifuv);\\n  } else {\\n    col.xyz = sample_tex_desktop(canvas_back,uv).xyz;\\n    // col.xyz = texture(canvas_back, uv).xyz;\\n    // _temp_tex = texture(temp_tex, uv);    \\n\\n    ivec2 ifuv = ivec2(uv*canvasR);\\n    vec2 fruv = fract(uv*canvasR);\\n\\n    // _temp_tex = sample_tex_desktop(temp_tex,uv);\\n    // _temp_tex = texelFetch(temp_tex,ivec2(uv*canvasR),0);\\n    _temp_tex = texture(temp_tex,uv);\\n\\n    // _temp_tex = sample_tex_mobile(temp_tex, fruv, ifuv);    \\n  }\\n\\n  // // if(temp_tex.w > 0.)\\n  if(_temp_tex.w > 0.0)\\n    col = blend_brushstroke(\\n      col,\\n      _temp_tex,\\n      blending_colour_space\\n    );\\n \\n    \\n  col = pow(col,vec4(0.454545454545)); \\n  col.w = 1.;\\n}    \\n\\n  \\n  \\n\\t\\t \";";

/***/ }),

/***/ 929:
/***/ ((module) => {

"use strict";
module.exports = "export default \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n// uniform float time;\\n// uniform float frame;\\n// uniform float zoom;\\n// uniform vec2 panning;\\n// uniform vec2 R;\\n// uniform vec2 canvasR;\\n// uniform vec4 stroke_col;\\n// uniform vec2 stroke_pos;\\n// uniform float stroke_opacity;\\n// uniform vec3 tex_lch_dynamics;\\n// uniform vec2 tex_stretch;\\n// uniform vec2 tilt;\\n// uniform vec2 brush_sz;\\n// uniform float pressure;\\nuniform sampler2D canvas_back;\\nuniform sampler2D temp_tex;\\nuniform sampler2D canvas_a;\\nuniform sampler2D canvas_b;\\n\\nuniform sampler2D brush_texture[7];\\n\\n// uniform sampler2D brush_texture_0;\\n// uniform sampler2D brush_texture_1;\\n// uniform sampler2D brush_texture_2;\\n// uniform sampler2D brush_texture_3;\\n// uniform sampler2D brush_texture_4;\\n// uniform sampler2D brush_texture_5;\\n// uniform sampler2D brush_texture_6;\\n// uniform sampler2D brush_texture_7;\\n// uniform sampler2D brush_texture_8;\\n// uniform sampler2D brush_texture_9;\\n// uniform sampler2D brush_texture_10;\\n// uniform sampler2D brush_texture_11;\\n// uniform sampler2D brush_texture_12;\\n\\n// uniform float canvas_idx;\\nuniform Settings {\\n  vec2 canvasR;\\n  vec2 R;\\n  float time;\\n  float canvas_idx;\\n  float is_on_mobile;\\n};\\n\\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\\nvec2[] positions = vec2[4](\\n  vec2(-1, -1), vec2(1, -1), vec2(-1, 1),vec2(1, 1)\\n);\\nout vec2 uv;\\n\\nvec2 css_contain(vec2 u, vec2 input_res, vec2 tex_res){\\n\\tfloat input_ratio = (input_res.x/input_res.y);\\n\\tfloat tex_ratio = (tex_res.x/tex_res.y);\\n\\tfloat ratio = input_ratio / tex_ratio;\\n\\t\\n\\tif(ratio < 1.){\\n\\t\\t// gl_Position.x -= ( 1. - 1./ratio)*0.5;\\n\\t\\tu.x *= ratio;\\n\\t} else {\\n\\t\\t// gl_Position.y -= ( 1. - ratio)*0.5;\\n\\t\\tu.y /= ratio;\\n\\t}\\n  return u;\\n}\\n\\nvec2 ndc_aspect_correct(vec2 u, vec2 r){\\n\\tif(r.x < r.y){\\n\\t\\tu.y /= r.y/r.x;\\n\\t} else {\\n\\t\\tu.x /= r.x/r.y;\\n\\t}\\n  return u;\\n}\\n\\nuniform float zoom;\\nuniform vec2 panning;\\nvoid main(){\\n  uv = positions[gl_VertexID];\\n  uv = uv*0.5 + 0.5;\\n\\n  gl_Position = vec4(positions[gl_VertexID],0,1);\\n  gl_Position.xy += panning/css_contain(vec2(1), canvasR, R);\\n  gl_Position.xy = css_contain(gl_Position.xy, canvasR, R);\\n  gl_Position.xy *= zoom;\\n}  \\n\\t\\t\\t\\n\";";

/***/ }),

/***/ 90:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 974:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 302:
/***/ (function(module) {

/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */

(function (global, factory) {
     true ? module.exports = factory() :
    0;
})(this, (function () { 'use strict';

    var limit$2 = function (x, min, max) {
        if ( min === void 0 ) min=0;
        if ( max === void 0 ) max=1;

        return x < min ? min : x > max ? max : x;
    };

    var limit$1 = limit$2;

    var clip_rgb$3 = function (rgb) {
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for (var i=0; i<=3; i++) {
            if (i < 3) {
                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }
                rgb[i] = limit$1(rgb[i], 0, 255);
            } else if (i === 3) {
                rgb[i] = limit$1(rgb[i], 0, 1);
            }
        }
        return rgb;
    };

    // ported from jQuery's $.type
    var classToType = {};
    for (var i$1 = 0, list$1 = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i$1 < list$1.length; i$1 += 1) {
        var name = list$1[i$1];

        classToType[("[object " + name + "]")] = name.toLowerCase();
    }
    var type$p = function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || "object";
    };

    var type$o = type$p;

    var unpack$B = function (args, keyOrder) {
        if ( keyOrder === void 0 ) keyOrder=null;

    	// if called with more than 3 arguments, we return the arguments
        if (args.length >= 3) { return Array.prototype.slice.call(args); }
        // with less than 3 args we check if first arg is object
        // and use the keyOrder string to extract and sort properties
    	if (type$o(args[0]) == 'object' && keyOrder) {
    		return keyOrder.split('')
    			.filter(function (k) { return args[0][k] !== undefined; })
    			.map(function (k) { return args[0][k]; });
    	}
    	// otherwise we just return the first argument
    	// (which we suppose is an array of args)
        return args[0];
    };

    var type$n = type$p;

    var last$4 = function (args) {
        if (args.length < 2) { return null; }
        var l = args.length-1;
        if (type$n(args[l]) == 'string') { return args[l].toLowerCase(); }
        return null;
    };

    var PI$2 = Math.PI;

    var utils = {
    	clip_rgb: clip_rgb$3,
    	limit: limit$2,
    	type: type$p,
    	unpack: unpack$B,
    	last: last$4,
    	PI: PI$2,
    	TWOPI: PI$2*2,
    	PITHIRD: PI$2/3,
    	DEG2RAD: PI$2 / 180,
    	RAD2DEG: 180 / PI$2
    };

    var input$h = {
    	format: {},
    	autodetect: []
    };

    var last$3 = utils.last;
    var clip_rgb$2 = utils.clip_rgb;
    var type$m = utils.type;
    var _input = input$h;

    var Color$D = function Color() {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var me = this;
        if (type$m(args[0]) === 'object' &&
            args[0].constructor &&
            args[0].constructor === this.constructor) {
            // the argument is already a Color instance
            return args[0];
        }

        // last argument could be the mode
        var mode = last$3(args);
        var autodetect = false;

        if (!mode) {
            autodetect = true;
            if (!_input.sorted) {
                _input.autodetect = _input.autodetect.sort(function (a,b) { return b.p - a.p; });
                _input.sorted = true;
            }
            // auto-detect format
            for (var i = 0, list = _input.autodetect; i < list.length; i += 1) {
                var chk = list[i];

                mode = chk.test.apply(chk, args);
                if (mode) { break; }
            }
        }

        if (_input.format[mode]) {
            var rgb = _input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));
            me._rgb = clip_rgb$2(rgb);
        } else {
            throw new Error('unknown format: '+args);
        }

        // add alpha channel
        if (me._rgb.length === 3) { me._rgb.push(1); }
    };

    Color$D.prototype.toString = function toString () {
        if (type$m(this.hex) == 'function') { return this.hex(); }
        return ("[" + (this._rgb.join(',')) + "]");
    };

    var Color_1 = Color$D;

    var chroma$k = function () {
    	var args = [], len = arguments.length;
    	while ( len-- ) args[ len ] = arguments[ len ];

    	return new (Function.prototype.bind.apply( chroma$k.Color, [ null ].concat( args) ));
    };

    chroma$k.Color = Color_1;
    chroma$k.version = '2.4.2';

    var chroma_1 = chroma$k;

    var unpack$A = utils.unpack;
    var max$2 = Math.max;

    var rgb2cmyk$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$A(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r = r / 255;
        g = g / 255;
        b = b / 255;
        var k = 1 - max$2(r,max$2(g,b));
        var f = k < 1 ? 1 / (1-k) : 0;
        var c = (1-r-k) * f;
        var m = (1-g-k) * f;
        var y = (1-b-k) * f;
        return [c,m,y,k];
    };

    var rgb2cmyk_1 = rgb2cmyk$1;

    var unpack$z = utils.unpack;

    var cmyk2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$z(args, 'cmyk');
        var c = args[0];
        var m = args[1];
        var y = args[2];
        var k = args[3];
        var alpha = args.length > 4 ? args[4] : 1;
        if (k === 1) { return [0,0,0,alpha]; }
        return [
            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r
            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g
            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b
            alpha
        ];
    };

    var cmyk2rgb_1 = cmyk2rgb;

    var chroma$j = chroma_1;
    var Color$C = Color_1;
    var input$g = input$h;
    var unpack$y = utils.unpack;
    var type$l = utils.type;

    var rgb2cmyk = rgb2cmyk_1;

    Color$C.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
    };

    chroma$j.cmyk = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$C, [ null ].concat( args, ['cmyk']) ));
    };

    input$g.format.cmyk = cmyk2rgb_1;

    input$g.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$y(args, 'cmyk');
            if (type$l(args) === 'array' && args.length === 4) {
                return 'cmyk';
            }
        }
    });

    var unpack$x = utils.unpack;
    var last$2 = utils.last;
    var rnd = function (a) { return Math.round(a*100)/100; };

    /*
     * supported arguments:
     * - hsl2css(h,s,l)
     * - hsl2css(h,s,l,a)
     * - hsl2css([h,s,l], mode)
     * - hsl2css([h,s,l,a], mode)
     * - hsl2css({h,s,l,a}, mode)
     */
    var hsl2css$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var hsla = unpack$x(args, 'hsla');
        var mode = last$2(args) || 'lsa';
        hsla[0] = rnd(hsla[0] || 0);
        hsla[1] = rnd(hsla[1]*100) + '%';
        hsla[2] = rnd(hsla[2]*100) + '%';
        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {
            hsla[3] = hsla.length > 3 ? hsla[3] : 1;
            mode = 'hsla';
        } else {
            hsla.length = 3;
        }
        return (mode + "(" + (hsla.join(',')) + ")");
    };

    var hsl2css_1 = hsl2css$1;

    var unpack$w = utils.unpack;

    /*
     * supported arguments:
     * - rgb2hsl(r,g,b)
     * - rgb2hsl(r,g,b,a)
     * - rgb2hsl([r,g,b])
     * - rgb2hsl([r,g,b,a])
     * - rgb2hsl({r,g,b,a})
     */
    var rgb2hsl$3 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$w(args, 'rgba');
        var r = args[0];
        var g = args[1];
        var b = args[2];

        r /= 255;
        g /= 255;
        b /= 255;

        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);

        var l = (max + min) / 2;
        var s, h;

        if (max === min){
            s = 0;
            h = Number.NaN;
        } else {
            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
        }

        if (r == max) { h = (g - b) / (max - min); }
        else if (g == max) { h = 2 + (b - r) / (max - min); }
        else if (b == max) { h = 4 + (r - g) / (max - min); }

        h *= 60;
        if (h < 0) { h += 360; }
        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }
        return [h,s,l];
    };

    var rgb2hsl_1 = rgb2hsl$3;

    var unpack$v = utils.unpack;
    var last$1 = utils.last;
    var hsl2css = hsl2css_1;
    var rgb2hsl$2 = rgb2hsl_1;
    var round$6 = Math.round;

    /*
     * supported arguments:
     * - rgb2css(r,g,b)
     * - rgb2css(r,g,b,a)
     * - rgb2css([r,g,b], mode)
     * - rgb2css([r,g,b,a], mode)
     * - rgb2css({r,g,b,a}, mode)
     */
    var rgb2css$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgba = unpack$v(args, 'rgba');
        var mode = last$1(args) || 'rgb';
        if (mode.substr(0,3) == 'hsl') {
            return hsl2css(rgb2hsl$2(rgba), mode);
        }
        rgba[0] = round$6(rgba[0]);
        rgba[1] = round$6(rgba[1]);
        rgba[2] = round$6(rgba[2]);
        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {
            rgba[3] = rgba.length > 3 ? rgba[3] : 1;
            mode = 'rgba';
        }
        return (mode + "(" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + ")");
    };

    var rgb2css_1 = rgb2css$1;

    var unpack$u = utils.unpack;
    var round$5 = Math.round;

    var hsl2rgb$1 = function () {
        var assign;

        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        args = unpack$u(args, 'hsl');
        var h = args[0];
        var s = args[1];
        var l = args[2];
        var r,g,b;
        if (s === 0) {
            r = g = b = l*255;
        } else {
            var t3 = [0,0,0];
            var c = [0,0,0];
            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;
            var t1 = 2 * l - t2;
            var h_ = h / 360;
            t3[0] = h_ + 1/3;
            t3[1] = h_;
            t3[2] = h_ - 1/3;
            for (var i=0; i<3; i++) {
                if (t3[i] < 0) { t3[i] += 1; }
                if (t3[i] > 1) { t3[i] -= 1; }
                if (6 * t3[i] < 1)
                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }
                else if (2 * t3[i] < 1)
                    { c[i] = t2; }
                else if (3 * t3[i] < 2)
                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }
                else
                    { c[i] = t1; }
            }
            (assign = [round$5(c[0]*255),round$5(c[1]*255),round$5(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);
        }
        if (args.length > 3) {
            // keep alpha channel
            return [r,g,b,args[3]];
        }
        return [r,g,b,1];
    };

    var hsl2rgb_1 = hsl2rgb$1;

    var hsl2rgb = hsl2rgb_1;
    var input$f = input$h;

    var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
    var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
    var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
    var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
    var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
    var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;

    var round$4 = Math.round;

    var css2rgb$1 = function (css) {
        css = css.toLowerCase().trim();
        var m;

        if (input$f.format.named) {
            try {
                return input$f.format.named(css);
            } catch (e) {
                // eslint-disable-next-line
            }
        }

        // rgb(250,20,0)
        if ((m = css.match(RE_RGB))) {
            var rgb = m.slice(1,4);
            for (var i=0; i<3; i++) {
                rgb[i] = +rgb[i];
            }
            rgb[3] = 1;  // default alpha
            return rgb;
        }

        // rgba(250,20,0,0.4)
        if ((m = css.match(RE_RGBA))) {
            var rgb$1 = m.slice(1,5);
            for (var i$1=0; i$1<4; i$1++) {
                rgb$1[i$1] = +rgb$1[i$1];
            }
            return rgb$1;
        }

        // rgb(100%,0%,0%)
        if ((m = css.match(RE_RGB_PCT))) {
            var rgb$2 = m.slice(1,4);
            for (var i$2=0; i$2<3; i$2++) {
                rgb$2[i$2] = round$4(rgb$2[i$2] * 2.55);
            }
            rgb$2[3] = 1;  // default alpha
            return rgb$2;
        }

        // rgba(100%,0%,0%,0.4)
        if ((m = css.match(RE_RGBA_PCT))) {
            var rgb$3 = m.slice(1,5);
            for (var i$3=0; i$3<3; i$3++) {
                rgb$3[i$3] = round$4(rgb$3[i$3] * 2.55);
            }
            rgb$3[3] = +rgb$3[3];
            return rgb$3;
        }

        // hsl(0,100%,50%)
        if ((m = css.match(RE_HSL))) {
            var hsl = m.slice(1,4);
            hsl[1] *= 0.01;
            hsl[2] *= 0.01;
            var rgb$4 = hsl2rgb(hsl);
            rgb$4[3] = 1;
            return rgb$4;
        }

        // hsla(0,100%,50%,0.5)
        if ((m = css.match(RE_HSLA))) {
            var hsl$1 = m.slice(1,4);
            hsl$1[1] *= 0.01;
            hsl$1[2] *= 0.01;
            var rgb$5 = hsl2rgb(hsl$1);
            rgb$5[3] = +m[4];  // default alpha = 1
            return rgb$5;
        }
    };

    css2rgb$1.test = function (s) {
        return RE_RGB.test(s) ||
            RE_RGBA.test(s) ||
            RE_RGB_PCT.test(s) ||
            RE_RGBA_PCT.test(s) ||
            RE_HSL.test(s) ||
            RE_HSLA.test(s);
    };

    var css2rgb_1 = css2rgb$1;

    var chroma$i = chroma_1;
    var Color$B = Color_1;
    var input$e = input$h;
    var type$k = utils.type;

    var rgb2css = rgb2css_1;
    var css2rgb = css2rgb_1;

    Color$B.prototype.css = function(mode) {
        return rgb2css(this._rgb, mode);
    };

    chroma$i.css = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$B, [ null ].concat( args, ['css']) ));
    };

    input$e.format.css = css2rgb;

    input$e.autodetect.push({
        p: 5,
        test: function (h) {
            var rest = [], len = arguments.length - 1;
            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

            if (!rest.length && type$k(h) === 'string' && css2rgb.test(h)) {
                return 'css';
            }
        }
    });

    var Color$A = Color_1;
    var chroma$h = chroma_1;
    var input$d = input$h;
    var unpack$t = utils.unpack;

    input$d.format.gl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgb = unpack$t(args, 'rgba');
        rgb[0] *= 255;
        rgb[1] *= 255;
        rgb[2] *= 255;
        return rgb;
    };

    chroma$h.gl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$A, [ null ].concat( args, ['gl']) ));
    };

    Color$A.prototype.gl = function() {
        var rgb = this._rgb;
        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];
    };

    var unpack$s = utils.unpack;

    var rgb2hcg$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$s(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var c = delta * 100 / 255;
        var _g = min / (255 - delta) * 100;
        var h;
        if (delta === 0) {
            h = Number.NaN;
        } else {
            if (r === max) { h = (g - b) / delta; }
            if (g === max) { h = 2+(b - r) / delta; }
            if (b === max) { h = 4+(r - g) / delta; }
            h *= 60;
            if (h < 0) { h += 360; }
        }
        return [h, c, _g];
    };

    var rgb2hcg_1 = rgb2hcg$1;

    var unpack$r = utils.unpack;
    var floor$3 = Math.floor;

    /*
     * this is basically just HSV with some minor tweaks
     *
     * hue.. [0..360]
     * chroma .. [0..1]
     * grayness .. [0..1]
     */

    var hcg2rgb = function () {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;

        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        args = unpack$r(args, 'hcg');
        var h = args[0];
        var c = args[1];
        var _g = args[2];
        var r,g,b;
        _g = _g * 255;
        var _c = c * 255;
        if (c === 0) {
            r = g = b = _g;
        } else {
            if (h === 360) { h = 0; }
            if (h > 360) { h -= 360; }
            if (h < 0) { h += 360; }
            h /= 60;
            var i = floor$3(h);
            var f = h - i;
            var p = _g * (1 - c);
            var q = p + _c * (1 - f);
            var t = p + _c * f;
            var v = p + _c;
            switch (i) {
                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break
                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break
                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break
                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break
                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break
                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break
            }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    var hcg2rgb_1 = hcg2rgb;

    var unpack$q = utils.unpack;
    var type$j = utils.type;
    var chroma$g = chroma_1;
    var Color$z = Color_1;
    var input$c = input$h;

    var rgb2hcg = rgb2hcg_1;

    Color$z.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
    };

    chroma$g.hcg = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$z, [ null ].concat( args, ['hcg']) ));
    };

    input$c.format.hcg = hcg2rgb_1;

    input$c.autodetect.push({
        p: 1,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$q(args, 'hcg');
            if (type$j(args) === 'array' && args.length === 3) {
                return 'hcg';
            }
        }
    });

    var unpack$p = utils.unpack;
    var last = utils.last;
    var round$3 = Math.round;

    var rgb2hex$2 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$p(args, 'rgba');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var a = ref[3];
        var mode = last(args) || 'auto';
        if (a === undefined) { a = 1; }
        if (mode === 'auto') {
            mode = a < 1 ? 'rgba' : 'rgb';
        }
        r = round$3(r);
        g = round$3(g);
        b = round$3(b);
        var u = r << 16 | g << 8 | b;
        var str = "000000" + u.toString(16); //#.toUpperCase();
        str = str.substr(str.length - 6);
        var hxa = '0' + round$3(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        switch (mode.toLowerCase()) {
            case 'rgba': return ("#" + str + hxa);
            case 'argb': return ("#" + hxa + str);
            default: return ("#" + str);
        }
    };

    var rgb2hex_1 = rgb2hex$2;

    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;

    var hex2rgb$1 = function (hex) {
        if (hex.match(RE_HEX)) {
            // remove optional leading #
            if (hex.length === 4 || hex.length === 7) {
                hex = hex.substr(1);
            }
            // expand short-notation to full six-digit
            if (hex.length === 3) {
                hex = hex.split('');
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            }
            var u = parseInt(hex, 16);
            var r = u >> 16;
            var g = u >> 8 & 0xFF;
            var b = u & 0xFF;
            return [r,g,b,1];
        }

        // match rgba hex format, eg #FF000077
        if (hex.match(RE_HEXA)) {
            if (hex.length === 5 || hex.length === 9) {
                // remove optional leading #
                hex = hex.substr(1);
            }
            // expand short-notation to full eight-digit
            if (hex.length === 4) {
                hex = hex.split('');
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];
            }
            var u$1 = parseInt(hex, 16);
            var r$1 = u$1 >> 24 & 0xFF;
            var g$1 = u$1 >> 16 & 0xFF;
            var b$1 = u$1 >> 8 & 0xFF;
            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;
            return [r$1,g$1,b$1,a];
        }

        // we used to check for css colors here
        // if _input.css? and rgb = _input.css hex
        //     return rgb

        throw new Error(("unknown hex color: " + hex));
    };

    var hex2rgb_1 = hex2rgb$1;

    var chroma$f = chroma_1;
    var Color$y = Color_1;
    var type$i = utils.type;
    var input$b = input$h;

    var rgb2hex$1 = rgb2hex_1;

    Color$y.prototype.hex = function(mode) {
        return rgb2hex$1(this._rgb, mode);
    };

    chroma$f.hex = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$y, [ null ].concat( args, ['hex']) ));
    };

    input$b.format.hex = hex2rgb_1;
    input$b.autodetect.push({
        p: 4,
        test: function (h) {
            var rest = [], len = arguments.length - 1;
            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

            if (!rest.length && type$i(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {
                return 'hex';
            }
        }
    });

    var unpack$o = utils.unpack;
    var TWOPI$2 = utils.TWOPI;
    var min$2 = Math.min;
    var sqrt$4 = Math.sqrt;
    var acos = Math.acos;

    var rgb2hsi$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
        */
        var ref = unpack$o(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var h;
        var min_ = min$2(r,g,b);
        var i = (r+g+b) / 3;
        var s = i > 0 ? 1 - min_/i : 0;
        if (s === 0) {
            h = NaN;
        } else {
            h = ((r-g)+(r-b)) / 2;
            h /= sqrt$4((r-g)*(r-g) + (r-b)*(g-b));
            h = acos(h);
            if (b > g) {
                h = TWOPI$2 - h;
            }
            h /= TWOPI$2;
        }
        return [h*360,s,i];
    };

    var rgb2hsi_1 = rgb2hsi$1;

    var unpack$n = utils.unpack;
    var limit = utils.limit;
    var TWOPI$1 = utils.TWOPI;
    var PITHIRD = utils.PITHIRD;
    var cos$4 = Math.cos;

    /*
     * hue [0..360]
     * saturation [0..1]
     * intensity [0..1]
     */
    var hsi2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
        */
        args = unpack$n(args, 'hsi');
        var h = args[0];
        var s = args[1];
        var i = args[2];
        var r,g,b;

        if (isNaN(h)) { h = 0; }
        if (isNaN(s)) { s = 0; }
        // normalize hue
        if (h > 360) { h -= 360; }
        if (h < 0) { h += 360; }
        h /= 360;
        if (h < 1/3) {
            b = (1-s)/3;
            r = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;
            g = 1 - (b+r);
        } else if (h < 2/3) {
            h -= 1/3;
            r = (1-s)/3;
            g = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;
            b = 1 - (r+g);
        } else {
            h -= 2/3;
            g = (1-s)/3;
            b = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;
            r = 1 - (g+b);
        }
        r = limit(i*r*3);
        g = limit(i*g*3);
        b = limit(i*b*3);
        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];
    };

    var hsi2rgb_1 = hsi2rgb;

    var unpack$m = utils.unpack;
    var type$h = utils.type;
    var chroma$e = chroma_1;
    var Color$x = Color_1;
    var input$a = input$h;

    var rgb2hsi = rgb2hsi_1;

    Color$x.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
    };

    chroma$e.hsi = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$x, [ null ].concat( args, ['hsi']) ));
    };

    input$a.format.hsi = hsi2rgb_1;

    input$a.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$m(args, 'hsi');
            if (type$h(args) === 'array' && args.length === 3) {
                return 'hsi';
            }
        }
    });

    var unpack$l = utils.unpack;
    var type$g = utils.type;
    var chroma$d = chroma_1;
    var Color$w = Color_1;
    var input$9 = input$h;

    var rgb2hsl$1 = rgb2hsl_1;

    Color$w.prototype.hsl = function() {
        return rgb2hsl$1(this._rgb);
    };

    chroma$d.hsl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$w, [ null ].concat( args, ['hsl']) ));
    };

    input$9.format.hsl = hsl2rgb_1;

    input$9.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$l(args, 'hsl');
            if (type$g(args) === 'array' && args.length === 3) {
                return 'hsl';
            }
        }
    });

    var unpack$k = utils.unpack;
    var min$1 = Math.min;
    var max$1 = Math.max;

    /*
     * supported arguments:
     * - rgb2hsv(r,g,b)
     * - rgb2hsv([r,g,b])
     * - rgb2hsv({r,g,b})
     */
    var rgb2hsl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$k(args, 'rgb');
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var min_ = min$1(r, g, b);
        var max_ = max$1(r, g, b);
        var delta = max_ - min_;
        var h,s,v;
        v = max_ / 255.0;
        if (max_ === 0) {
            h = Number.NaN;
            s = 0;
        } else {
            s = delta / max_;
            if (r === max_) { h = (g - b) / delta; }
            if (g === max_) { h = 2+(b - r) / delta; }
            if (b === max_) { h = 4+(r - g) / delta; }
            h *= 60;
            if (h < 0) { h += 360; }
        }
        return [h, s, v]
    };

    var rgb2hsv$1 = rgb2hsl;

    var unpack$j = utils.unpack;
    var floor$2 = Math.floor;

    var hsv2rgb = function () {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;

        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        args = unpack$j(args, 'hsv');
        var h = args[0];
        var s = args[1];
        var v = args[2];
        var r,g,b;
        v *= 255;
        if (s === 0) {
            r = g = b = v;
        } else {
            if (h === 360) { h = 0; }
            if (h > 360) { h -= 360; }
            if (h < 0) { h += 360; }
            h /= 60;

            var i = floor$2(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));

            switch (i) {
                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break
                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break
                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break
                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break
                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break
                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break
            }
        }
        return [r,g,b,args.length > 3?args[3]:1];
    };

    var hsv2rgb_1 = hsv2rgb;

    var unpack$i = utils.unpack;
    var type$f = utils.type;
    var chroma$c = chroma_1;
    var Color$v = Color_1;
    var input$8 = input$h;

    var rgb2hsv = rgb2hsv$1;

    Color$v.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
    };

    chroma$c.hsv = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$v, [ null ].concat( args, ['hsv']) ));
    };

    input$8.format.hsv = hsv2rgb_1;

    input$8.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$i(args, 'hsv');
            if (type$f(args) === 'array' && args.length === 3) {
                return 'hsv';
            }
        }
    });

    var labConstants = {
        // Corresponds roughly to RGB brighter/darker
        Kn: 18,

        // D65 standard referent
        Xn: 0.950470,
        Yn: 1,
        Zn: 1.088830,

        t0: 0.137931034,  // 4 / 29
        t1: 0.206896552,  // 6 / 29
        t2: 0.12841855,   // 3 * t1 * t1
        t3: 0.008856452,  // t1 * t1 * t1
    };

    var LAB_CONSTANTS$3 = labConstants;
    var unpack$h = utils.unpack;
    var pow$a = Math.pow;

    var rgb2lab$2 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$h(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2xyz(r,g,b);
        var x = ref$1[0];
        var y = ref$1[1];
        var z = ref$1[2];
        var l = 116 * y - 16;
        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];
    };

    var rgb_xyz = function (r) {
        if ((r /= 255) <= 0.04045) { return r / 12.92; }
        return pow$a((r + 0.055) / 1.055, 2.4);
    };

    var xyz_lab = function (t) {
        if (t > LAB_CONSTANTS$3.t3) { return pow$a(t, 1 / 3); }
        return t / LAB_CONSTANTS$3.t2 + LAB_CONSTANTS$3.t0;
    };

    var rgb2xyz = function (r,g,b) {
        r = rgb_xyz(r);
        g = rgb_xyz(g);
        b = rgb_xyz(b);
        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS$3.Xn);
        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS$3.Yn);
        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS$3.Zn);
        return [x,y,z];
    };

    var rgb2lab_1 = rgb2lab$2;

    var LAB_CONSTANTS$2 = labConstants;
    var unpack$g = utils.unpack;
    var pow$9 = Math.pow;

    /*
     * L* [0..100]
     * a [-100..100]
     * b [-100..100]
     */
    var lab2rgb$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$g(args, 'lab');
        var l = args[0];
        var a = args[1];
        var b = args[2];
        var x,y,z, r,g,b_;

        y = (l + 16) / 116;
        x = isNaN(a) ? y : y + a / 500;
        z = isNaN(b) ? y : y - b / 200;

        y = LAB_CONSTANTS$2.Yn * lab_xyz(y);
        x = LAB_CONSTANTS$2.Xn * lab_xyz(x);
        z = LAB_CONSTANTS$2.Zn * lab_xyz(z);

        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB
        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);

        return [r,g,b_,args.length > 3 ? args[3] : 1];
    };

    var xyz_rgb = function (r) {
        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$9(r, 1 / 2.4) - 0.055)
    };

    var lab_xyz = function (t) {
        return t > LAB_CONSTANTS$2.t1 ? t * t * t : LAB_CONSTANTS$2.t2 * (t - LAB_CONSTANTS$2.t0)
    };

    var lab2rgb_1 = lab2rgb$1;

    var unpack$f = utils.unpack;
    var type$e = utils.type;
    var chroma$b = chroma_1;
    var Color$u = Color_1;
    var input$7 = input$h;

    var rgb2lab$1 = rgb2lab_1;

    Color$u.prototype.lab = function() {
        return rgb2lab$1(this._rgb);
    };

    chroma$b.lab = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$u, [ null ].concat( args, ['lab']) ));
    };

    input$7.format.lab = lab2rgb_1;

    input$7.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$f(args, 'lab');
            if (type$e(args) === 'array' && args.length === 3) {
                return 'lab';
            }
        }
    });

    var unpack$e = utils.unpack;
    var RAD2DEG = utils.RAD2DEG;
    var sqrt$3 = Math.sqrt;
    var atan2$2 = Math.atan2;
    var round$2 = Math.round;

    var lab2lch$2 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$e(args, 'lab');
        var l = ref[0];
        var a = ref[1];
        var b = ref[2];
        var c = sqrt$3(a * a + b * b);
        var h = (atan2$2(b, a) * RAD2DEG + 360) % 360;
        if (round$2(c*10000) === 0) { h = Number.NaN; }
        return [l, c, h];
    };

    var lab2lch_1 = lab2lch$2;

    var unpack$d = utils.unpack;
    var rgb2lab = rgb2lab_1;
    var lab2lch$1 = lab2lch_1;

    var rgb2lch$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$d(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2lab(r,g,b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch$1(l,a,b_);
    };

    var rgb2lch_1 = rgb2lch$1;

    var unpack$c = utils.unpack;
    var DEG2RAD = utils.DEG2RAD;
    var sin$3 = Math.sin;
    var cos$3 = Math.cos;

    var lch2lab$2 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        /*
        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
        These formulas were invented by David Dalrymple to obtain maximum contrast without going
        out of gamut if the parameters are in the range 0-1.

        A saturation multiplier was added by Gregor Aisch
        */
        var ref = unpack$c(args, 'lch');
        var l = ref[0];
        var c = ref[1];
        var h = ref[2];
        if (isNaN(h)) { h = 0; }
        h = h * DEG2RAD;
        return [l, cos$3(h) * c, sin$3(h) * c]
    };

    var lch2lab_1 = lch2lab$2;

    var unpack$b = utils.unpack;
    var lch2lab$1 = lch2lab_1;
    var lab2rgb = lab2rgb_1;

    var lch2rgb$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$b(args, 'lch');
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab$1 (l,c,h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = lab2rgb (L,a,b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    var lch2rgb_1 = lch2rgb$1;

    var unpack$a = utils.unpack;
    var lch2rgb = lch2rgb_1;

    var hcl2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var hcl = unpack$a(args, 'hcl').reverse();
        return lch2rgb.apply(void 0, hcl);
    };

    var hcl2rgb_1 = hcl2rgb;

    var unpack$9 = utils.unpack;
    var type$d = utils.type;
    var chroma$a = chroma_1;
    var Color$t = Color_1;
    var input$6 = input$h;

    var rgb2lch = rgb2lch_1;

    Color$t.prototype.lch = function() { return rgb2lch(this._rgb); };
    Color$t.prototype.hcl = function() { return rgb2lch(this._rgb).reverse(); };

    chroma$a.lch = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$t, [ null ].concat( args, ['lch']) ));
    };
    chroma$a.hcl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$t, [ null ].concat( args, ['hcl']) ));
    };

    input$6.format.lch = lch2rgb_1;
    input$6.format.hcl = hcl2rgb_1;

    ['lch','hcl'].forEach(function (m) { return input$6.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$9(args, m);
            if (type$d(args) === 'array' && args.length === 3) {
                return m;
            }
        }
    }); });

    /**
    	X11 color names

    	http://www.w3.org/TR/css3-color/#svg-color
    */

    var w3cx11$1 = {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflower: '#6495ed',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        laserlemon: '#ffff54',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrod: '#fafad2',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        maroon2: '#7f0000',
        maroon3: '#b03060',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        purple2: '#7f007f',
        purple3: '#a020f0',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32'
    };

    var w3cx11_1 = w3cx11$1;

    var Color$s = Color_1;
    var input$5 = input$h;
    var type$c = utils.type;

    var w3cx11 = w3cx11_1;
    var hex2rgb = hex2rgb_1;
    var rgb2hex = rgb2hex_1;

    Color$s.prototype.name = function() {
        var hex = rgb2hex(this._rgb, 'rgb');
        for (var i = 0, list = Object.keys(w3cx11); i < list.length; i += 1) {
            var n = list[i];

            if (w3cx11[n] === hex) { return n.toLowerCase(); }
        }
        return hex;
    };

    input$5.format.named = function (name) {
        name = name.toLowerCase();
        if (w3cx11[name]) { return hex2rgb(w3cx11[name]); }
        throw new Error('unknown color name: '+name);
    };

    input$5.autodetect.push({
        p: 5,
        test: function (h) {
            var rest = [], len = arguments.length - 1;
            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

            if (!rest.length && type$c(h) === 'string' && w3cx11[h.toLowerCase()]) {
                return 'named';
            }
        }
    });

    var unpack$8 = utils.unpack;

    var rgb2num$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$8(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        return (r << 16) + (g << 8) + b;
    };

    var rgb2num_1 = rgb2num$1;

    var type$b = utils.type;

    var num2rgb = function (num) {
        if (type$b(num) == "number" && num >= 0 && num <= 0xFFFFFF) {
            var r = num >> 16;
            var g = (num >> 8) & 0xFF;
            var b = num & 0xFF;
            return [r,g,b,1];
        }
        throw new Error("unknown num color: "+num);
    };

    var num2rgb_1 = num2rgb;

    var chroma$9 = chroma_1;
    var Color$r = Color_1;
    var input$4 = input$h;
    var type$a = utils.type;

    var rgb2num = rgb2num_1;

    Color$r.prototype.num = function() {
        return rgb2num(this._rgb);
    };

    chroma$9.num = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$r, [ null ].concat( args, ['num']) ));
    };

    input$4.format.num = num2rgb_1;

    input$4.autodetect.push({
        p: 5,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            if (args.length === 1 && type$a(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {
                return 'num';
            }
        }
    });

    var chroma$8 = chroma_1;
    var Color$q = Color_1;
    var input$3 = input$h;
    var unpack$7 = utils.unpack;
    var type$9 = utils.type;
    var round$1 = Math.round;

    Color$q.prototype.rgb = function(rnd) {
        if ( rnd === void 0 ) rnd=true;

        if (rnd === false) { return this._rgb.slice(0,3); }
        return this._rgb.slice(0,3).map(round$1);
    };

    Color$q.prototype.rgba = function(rnd) {
        if ( rnd === void 0 ) rnd=true;

        return this._rgb.slice(0,4).map(function (v,i) {
            return i<3 ? (rnd === false ? v : round$1(v)) : v;
        });
    };

    chroma$8.rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$q, [ null ].concat( args, ['rgb']) ));
    };

    input$3.format.rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgba = unpack$7(args, 'rgba');
        if (rgba[3] === undefined) { rgba[3] = 1; }
        return rgba;
    };

    input$3.autodetect.push({
        p: 3,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$7(args, 'rgba');
            if (type$9(args) === 'array' && (args.length === 3 ||
                args.length === 4 && type$9(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {
                return 'rgb';
            }
        }
    });

    /*
     * Based on implementation by Neil Bartlett
     * https://github.com/neilbartlett/color-temperature
     */

    var log$1 = Math.log;

    var temperature2rgb$1 = function (kelvin) {
        var temp = kelvin / 100;
        var r,g,b;
        if (temp < 66) {
            r = 255;
            g = temp < 6 ? 0 : -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log$1(g);
            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log$1(b);
        } else {
            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log$1(r);
            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log$1(g);
            b = 255;
        }
        return [r,g,b,1];
    };

    var temperature2rgb_1 = temperature2rgb$1;

    /*
     * Based on implementation by Neil Bartlett
     * https://github.com/neilbartlett/color-temperature
     **/

    var temperature2rgb = temperature2rgb_1;
    var unpack$6 = utils.unpack;
    var round = Math.round;

    var rgb2temperature$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgb = unpack$6(args, 'rgb');
        var r = rgb[0], b = rgb[2];
        var minTemp = 1000;
        var maxTemp = 40000;
        var eps = 0.4;
        var temp;
        while (maxTemp - minTemp > eps) {
            temp = (maxTemp + minTemp) * 0.5;
            var rgb$1 = temperature2rgb(temp);
            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {
                maxTemp = temp;
            } else {
                minTemp = temp;
            }
        }
        return round(temp);
    };

    var rgb2temperature_1 = rgb2temperature$1;

    var chroma$7 = chroma_1;
    var Color$p = Color_1;
    var input$2 = input$h;

    var rgb2temperature = rgb2temperature_1;

    Color$p.prototype.temp =
    Color$p.prototype.kelvin =
    Color$p.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
    };

    chroma$7.temp =
    chroma$7.kelvin =
    chroma$7.temperature = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$p, [ null ].concat( args, ['temp']) ));
    };

    input$2.format.temp =
    input$2.format.kelvin =
    input$2.format.temperature = temperature2rgb_1;

    var unpack$5 = utils.unpack;
    var cbrt = Math.cbrt;
    var pow$8 = Math.pow;
    var sign$1 = Math.sign;

    var rgb2oklab$2 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        // OKLab color space implementation taken from
        // https://bottosson.github.io/posts/oklab/
        var ref = unpack$5(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = [rgb2lrgb(r / 255), rgb2lrgb(g / 255), rgb2lrgb(b / 255)];
        var lr = ref$1[0];
        var lg = ref$1[1];
        var lb = ref$1[2];
        var l = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);
        var m = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);
        var s = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);

        return [
            0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,
            1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,
            0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s
        ];
    };

    var rgb2oklab_1 = rgb2oklab$2;

    function rgb2lrgb(c) {
        var abs = Math.abs(c);
        if (abs < 0.04045) {
            return c / 12.92;
        }
        return (sign$1(c) || 1) * pow$8((abs + 0.055) / 1.055, 2.4);
    }

    var unpack$4 = utils.unpack;
    var pow$7 = Math.pow;
    var sign = Math.sign;

    /*
     * L* [0..100]
     * a [-100..100]
     * b [-100..100]
     */
    var oklab2rgb$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$4(args, 'lab');
        var L = args[0];
        var a = args[1];
        var b = args[2];

        var l = pow$7(L + 0.3963377774 * a + 0.2158037573 * b, 3);
        var m = pow$7(L - 0.1055613458 * a - 0.0638541728 * b, 3);
        var s = pow$7(L - 0.0894841775 * a - 1.291485548 * b, 3);

        return [
            255 * lrgb2rgb(+4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s),
            255 * lrgb2rgb(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s),
            255 * lrgb2rgb(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s),
            args.length > 3 ? args[3] : 1
        ];
    };

    var oklab2rgb_1 = oklab2rgb$1;

    function lrgb2rgb(c) {
        var abs = Math.abs(c);
        if (abs > 0.0031308) {
            return (sign(c) || 1) * (1.055 * pow$7(abs, 1 / 2.4) - 0.055);
        }
        return c * 12.92;
    }

    var unpack$3 = utils.unpack;
    var type$8 = utils.type;
    var chroma$6 = chroma_1;
    var Color$o = Color_1;
    var input$1 = input$h;

    var rgb2oklab$1 = rgb2oklab_1;

    Color$o.prototype.oklab = function () {
        return rgb2oklab$1(this._rgb);
    };

    chroma$6.oklab = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$o, [ null ].concat( args, ['oklab']) ));
    };

    input$1.format.oklab = oklab2rgb_1;

    input$1.autodetect.push({
        p: 3,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$3(args, 'oklab');
            if (type$8(args) === 'array' && args.length === 3) {
                return 'oklab';
            }
        }
    });

    var unpack$2 = utils.unpack;
    var rgb2oklab = rgb2oklab_1;
    var lab2lch = lab2lch_1;

    var rgb2oklch$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$2(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2oklab(r, g, b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch(l, a, b_);
    };

    var rgb2oklch_1 = rgb2oklch$1;

    var unpack$1 = utils.unpack;
    var lch2lab = lch2lab_1;
    var oklab2rgb = oklab2rgb_1;

    var oklch2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$1(args, 'lch');
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab(l, c, h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = oklab2rgb(L, a, b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    var oklch2rgb_1 = oklch2rgb;

    var unpack = utils.unpack;
    var type$7 = utils.type;
    var chroma$5 = chroma_1;
    var Color$n = Color_1;
    var input = input$h;

    var rgb2oklch = rgb2oklch_1;

    Color$n.prototype.oklch = function () {
        return rgb2oklch(this._rgb);
    };

    chroma$5.oklch = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color$n, [ null ].concat( args, ['oklch']) ));
    };

    input.format.oklch = oklch2rgb_1;

    input.autodetect.push({
        p: 3,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack(args, 'oklch');
            if (type$7(args) === 'array' && args.length === 3) {
                return 'oklch';
            }
        }
    });

    var Color$m = Color_1;
    var type$6 = utils.type;

    Color$m.prototype.alpha = function(a, mutate) {
        if ( mutate === void 0 ) mutate=false;

        if (a !== undefined && type$6(a) === 'number') {
            if (mutate) {
                this._rgb[3] = a;
                return this;
            }
            return new Color$m([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');
        }
        return this._rgb[3];
    };

    var Color$l = Color_1;

    Color$l.prototype.clipped = function() {
        return this._rgb._clipped || false;
    };

    var Color$k = Color_1;
    var LAB_CONSTANTS$1 = labConstants;

    Color$k.prototype.darken = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	var me = this;
    	var lab = me.lab();
    	lab[0] -= LAB_CONSTANTS$1.Kn * amount;
    	return new Color$k(lab, 'lab').alpha(me.alpha(), true);
    };

    Color$k.prototype.brighten = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	return this.darken(-amount);
    };

    Color$k.prototype.darker = Color$k.prototype.darken;
    Color$k.prototype.brighter = Color$k.prototype.brighten;

    var Color$j = Color_1;

    Color$j.prototype.get = function (mc) {
        var ref = mc.split('.');
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);
            if (i > -1) { return src[i]; }
            throw new Error(("unknown channel " + channel + " in mode " + mode));
        } else {
            return src;
        }
    };

    var Color$i = Color_1;
    var type$5 = utils.type;
    var pow$6 = Math.pow;

    var EPS = 1e-7;
    var MAX_ITER = 20;

    Color$i.prototype.luminance = function(lum) {
        if (lum !== undefined && type$5(lum) === 'number') {
            if (lum === 0) {
                // return pure black
                return new Color$i([0,0,0,this._rgb[3]], 'rgb');
            }
            if (lum === 1) {
                // return pure white
                return new Color$i([255,255,255,this._rgb[3]], 'rgb');
            }
            // compute new color using...
            var cur_lum = this.luminance();
            var mode = 'rgb';
            var max_iter = MAX_ITER;

            var test = function (low, high) {
                var mid = low.interpolate(high, 0.5, mode);
                var lm = mid.luminance();
                if (Math.abs(lum - lm) < EPS || !max_iter--) {
                    // close enough
                    return mid;
                }
                return lm > lum ? test(low, mid) : test(mid, high);
            };

            var rgb = (cur_lum > lum ? test(new Color$i([0,0,0]), this) : test(this, new Color$i([255,255,255]))).rgb();
            return new Color$i(rgb.concat( [this._rgb[3]]));
        }
        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));
    };


    var rgb2luminance = function (r,g,b) {
        // relative luminance
        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        r = luminance_x(r);
        g = luminance_x(g);
        b = luminance_x(b);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    };

    var luminance_x = function (x) {
        x /= 255;
        return x <= 0.03928 ? x/12.92 : pow$6((x+0.055)/1.055, 2.4);
    };

    var interpolator$1 = {};

    var Color$h = Color_1;
    var type$4 = utils.type;
    var interpolator = interpolator$1;

    var mix$1 = function (col1, col2, f) {
        if ( f === void 0 ) f=0.5;
        var rest = [], len = arguments.length - 3;
        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];

        var mode = rest[0] || 'lrgb';
        if (!interpolator[mode] && !rest.length) {
            // fall back to the first supported mode
            mode = Object.keys(interpolator)[0];
        }
        if (!interpolator[mode]) {
            throw new Error(("interpolation mode " + mode + " is not defined"));
        }
        if (type$4(col1) !== 'object') { col1 = new Color$h(col1); }
        if (type$4(col2) !== 'object') { col2 = new Color$h(col2); }
        return interpolator[mode](col1, col2, f)
            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
    };

    var Color$g = Color_1;
    var mix = mix$1;

    Color$g.prototype.mix =
    Color$g.prototype.interpolate = function(col2, f) {
    	if ( f === void 0 ) f=0.5;
    	var rest = [], len = arguments.length - 2;
    	while ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];

    	return mix.apply(void 0, [ this, col2, f ].concat( rest ));
    };

    var Color$f = Color_1;

    Color$f.prototype.premultiply = function(mutate) {
    	if ( mutate === void 0 ) mutate=false;

    	var rgb = this._rgb;
    	var a = rgb[3];
    	if (mutate) {
    		this._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];
    		return this;
    	} else {
    		return new Color$f([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');
    	}
    };

    var Color$e = Color_1;
    var LAB_CONSTANTS = labConstants;

    Color$e.prototype.saturate = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	var me = this;
    	var lch = me.lch();
    	lch[1] += LAB_CONSTANTS.Kn * amount;
    	if (lch[1] < 0) { lch[1] = 0; }
    	return new Color$e(lch, 'lch').alpha(me.alpha(), true);
    };

    Color$e.prototype.desaturate = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	return this.saturate(-amount);
    };

    var Color$d = Color_1;
    var type$3 = utils.type;

    Color$d.prototype.set = function (mc, value, mutate) {
        if ( mutate === void 0 ) mutate = false;

        var ref = mc.split('.');
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);
            if (i > -1) {
                if (type$3(value) == 'string') {
                    switch (value.charAt(0)) {
                        case '+':
                            src[i] += +value;
                            break;
                        case '-':
                            src[i] += +value;
                            break;
                        case '*':
                            src[i] *= +value.substr(1);
                            break;
                        case '/':
                            src[i] /= +value.substr(1);
                            break;
                        default:
                            src[i] = +value;
                    }
                } else if (type$3(value) === 'number') {
                    src[i] = value;
                } else {
                    throw new Error("unsupported value for Color.set");
                }
                var out = new Color$d(src, mode);
                if (mutate) {
                    this._rgb = out._rgb;
                    return this;
                }
                return out;
            }
            throw new Error(("unknown channel " + channel + " in mode " + mode));
        } else {
            return src;
        }
    };

    var Color$c = Color_1;

    var rgb = function (col1, col2, f) {
        var xyz0 = col1._rgb;
        var xyz1 = col2._rgb;
        return new Color$c(
            xyz0[0] + f * (xyz1[0]-xyz0[0]),
            xyz0[1] + f * (xyz1[1]-xyz0[1]),
            xyz0[2] + f * (xyz1[2]-xyz0[2]),
            'rgb'
        )
    };

    // register interpolator
    interpolator$1.rgb = rgb;

    var Color$b = Color_1;
    var sqrt$2 = Math.sqrt;
    var pow$5 = Math.pow;

    var lrgb = function (col1, col2, f) {
        var ref = col1._rgb;
        var x1 = ref[0];
        var y1 = ref[1];
        var z1 = ref[2];
        var ref$1 = col2._rgb;
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        return new Color$b(
            sqrt$2(pow$5(x1,2) * (1-f) + pow$5(x2,2) * f),
            sqrt$2(pow$5(y1,2) * (1-f) + pow$5(y2,2) * f),
            sqrt$2(pow$5(z1,2) * (1-f) + pow$5(z2,2) * f),
            'rgb'
        )
    };

    // register interpolator
    interpolator$1.lrgb = lrgb;

    var Color$a = Color_1;

    var lab = function (col1, col2, f) {
        var xyz0 = col1.lab();
        var xyz1 = col2.lab();
        return new Color$a(
            xyz0[0] + f * (xyz1[0]-xyz0[0]),
            xyz0[1] + f * (xyz1[1]-xyz0[1]),
            xyz0[2] + f * (xyz1[2]-xyz0[2]),
            'lab'
        )
    };

    // register interpolator
    interpolator$1.lab = lab;

    var Color$9 = Color_1;

    var _hsx = function (col1, col2, f, m) {
        var assign, assign$1;

        var xyz0, xyz1;
        if (m === 'hsl') {
            xyz0 = col1.hsl();
            xyz1 = col2.hsl();
        } else if (m === 'hsv') {
            xyz0 = col1.hsv();
            xyz1 = col2.hsv();
        } else if (m === 'hcg') {
            xyz0 = col1.hcg();
            xyz1 = col2.hcg();
        } else if (m === 'hsi') {
            xyz0 = col1.hsi();
            xyz1 = col2.hsi();
        } else if (m === 'lch' || m === 'hcl') {
            m = 'hcl';
            xyz0 = col1.hcl();
            xyz1 = col2.hcl();
        } else if (m === 'oklch') {
            xyz0 = col1.oklch().reverse();
            xyz1 = col2.oklch().reverse();
        }

        var hue0, hue1, sat0, sat1, lbv0, lbv1;
        if (m.substr(0, 1) === 'h' || m === 'oklch') {
            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);
            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);
        }

        var sat, hue, lbv, dh;

        if (!isNaN(hue0) && !isNaN(hue1)) {
            // both colors have hue
            if (hue1 > hue0 && hue1 - hue0 > 180) {
                dh = hue1 - (hue0 + 360);
            } else if (hue1 < hue0 && hue0 - hue1 > 180) {
                dh = hue1 + 360 - hue0;
            } else {
                dh = hue1 - hue0;
            }
            hue = hue0 + f * dh;
        } else if (!isNaN(hue0)) {
            hue = hue0;
            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }
        } else if (!isNaN(hue1)) {
            hue = hue1;
            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }
        } else {
            hue = Number.NaN;
        }

        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }
        lbv = lbv0 + f * (lbv1 - lbv0);
        return m === 'oklch' ? new Color$9([lbv, sat, hue], m) : new Color$9([hue, sat, lbv], m);
    };

    var interpolate_hsx$5 = _hsx;

    var lch = function (col1, col2, f) {
    	return interpolate_hsx$5(col1, col2, f, 'lch');
    };

    // register interpolator
    interpolator$1.lch = lch;
    interpolator$1.hcl = lch;

    var Color$8 = Color_1;

    var num = function (col1, col2, f) {
        var c1 = col1.num();
        var c2 = col2.num();
        return new Color$8(c1 + f * (c2-c1), 'num')
    };

    // register interpolator
    interpolator$1.num = num;

    var interpolate_hsx$4 = _hsx;

    var hcg = function (col1, col2, f) {
    	return interpolate_hsx$4(col1, col2, f, 'hcg');
    };

    // register interpolator
    interpolator$1.hcg = hcg;

    var interpolate_hsx$3 = _hsx;

    var hsi = function (col1, col2, f) {
    	return interpolate_hsx$3(col1, col2, f, 'hsi');
    };

    // register interpolator
    interpolator$1.hsi = hsi;

    var interpolate_hsx$2 = _hsx;

    var hsl = function (col1, col2, f) {
    	return interpolate_hsx$2(col1, col2, f, 'hsl');
    };

    // register interpolator
    interpolator$1.hsl = hsl;

    var interpolate_hsx$1 = _hsx;

    var hsv = function (col1, col2, f) {
    	return interpolate_hsx$1(col1, col2, f, 'hsv');
    };

    // register interpolator
    interpolator$1.hsv = hsv;

    var Color$7 = Color_1;

    var oklab = function (col1, col2, f) {
        var xyz0 = col1.oklab();
        var xyz1 = col2.oklab();
        return new Color$7(
            xyz0[0] + f * (xyz1[0] - xyz0[0]),
            xyz0[1] + f * (xyz1[1] - xyz0[1]),
            xyz0[2] + f * (xyz1[2] - xyz0[2]),
            'oklab'
        );
    };

    // register interpolator
    interpolator$1.oklab = oklab;

    var interpolate_hsx = _hsx;

    var oklch = function (col1, col2, f) {
        return interpolate_hsx(col1, col2, f, 'oklch');
    };

    // register interpolator
    interpolator$1.oklch = oklch;

    var Color$6 = Color_1;
    var clip_rgb$1 = utils.clip_rgb;
    var pow$4 = Math.pow;
    var sqrt$1 = Math.sqrt;
    var PI$1 = Math.PI;
    var cos$2 = Math.cos;
    var sin$2 = Math.sin;
    var atan2$1 = Math.atan2;

    var average = function (colors, mode, weights) {
        if ( mode === void 0 ) mode='lrgb';
        if ( weights === void 0 ) weights=null;

        var l = colors.length;
        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }
        // normalize weights
        var k = l / weights.reduce(function(a, b) { return a + b; });
        weights.forEach(function (w,i) { weights[i] *= k; });
        // convert colors to Color objects
        colors = colors.map(function (c) { return new Color$6(c); });
        if (mode === 'lrgb') {
            return _average_lrgb(colors, weights)
        }
        var first = colors.shift();
        var xyz = first.get(mode);
        var cnt = [];
        var dx = 0;
        var dy = 0;
        // initial color
        for (var i=0; i<xyz.length; i++) {
            xyz[i] = (xyz[i] || 0) * weights[0];
            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);
            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
                var A = xyz[i] / 180 * PI$1;
                dx += cos$2(A) * weights[0];
                dy += sin$2(A) * weights[0];
            }
        }

        var alpha = first.alpha() * weights[0];
        colors.forEach(function (c,ci) {
            var xyz2 = c.get(mode);
            alpha += c.alpha() * weights[ci+1];
            for (var i=0; i<xyz.length; i++) {
                if (!isNaN(xyz2[i])) {
                    cnt[i] += weights[ci+1];
                    if (mode.charAt(i) === 'h') {
                        var A = xyz2[i] / 180 * PI$1;
                        dx += cos$2(A) * weights[ci+1];
                        dy += sin$2(A) * weights[ci+1];
                    } else {
                        xyz[i] += xyz2[i] * weights[ci+1];
                    }
                }
            }
        });

        for (var i$1=0; i$1<xyz.length; i$1++) {
            if (mode.charAt(i$1) === 'h') {
                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;
                while (A$1 < 0) { A$1 += 360; }
                while (A$1 >= 360) { A$1 -= 360; }
                xyz[i$1] = A$1;
            } else {
                xyz[i$1] = xyz[i$1]/cnt[i$1];
            }
        }
        alpha /= l;
        return (new Color$6(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);
    };


    var _average_lrgb = function (colors, weights) {
        var l = colors.length;
        var xyz = [0,0,0,0];
        for (var i=0; i < colors.length; i++) {
            var col = colors[i];
            var f = weights[i] / l;
            var rgb = col._rgb;
            xyz[0] += pow$4(rgb[0],2) * f;
            xyz[1] += pow$4(rgb[1],2) * f;
            xyz[2] += pow$4(rgb[2],2) * f;
            xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt$1(xyz[0]);
        xyz[1] = sqrt$1(xyz[1]);
        xyz[2] = sqrt$1(xyz[2]);
        if (xyz[3] > 0.9999999) { xyz[3] = 1; }
        return new Color$6(clip_rgb$1(xyz));
    };

    // minimal multi-purpose interface

    // @requires utils color analyze

    var chroma$4 = chroma_1;
    var type$2 = utils.type;

    var pow$3 = Math.pow;

    var scale$2 = function(colors) {

        // constructor
        var _mode = 'rgb';
        var _nacol = chroma$4('#ccc');
        var _spread = 0;
        // const _fixed = false;
        var _domain = [0, 1];
        var _pos = [];
        var _padding = [0,0];
        var _classes = false;
        var _colors = [];
        var _out = false;
        var _min = 0;
        var _max = 1;
        var _correctLightness = false;
        var _colorCache = {};
        var _useCache = true;
        var _gamma = 1;

        // private methods

        var setColors = function(colors) {
            colors = colors || ['#fff', '#000'];
            if (colors && type$2(colors) === 'string' && chroma$4.brewer &&
                chroma$4.brewer[colors.toLowerCase()]) {
                colors = chroma$4.brewer[colors.toLowerCase()];
            }
            if (type$2(colors) === 'array') {
                // handle single color
                if (colors.length === 1) {
                    colors = [colors[0], colors[0]];
                }
                // make a copy of the colors
                colors = colors.slice(0);
                // convert to chroma classes
                for (var c=0; c<colors.length; c++) {
                    colors[c] = chroma$4(colors[c]);
                }
                // auto-fill color position
                _pos.length = 0;
                for (var c$1=0; c$1<colors.length; c$1++) {
                    _pos.push(c$1/(colors.length-1));
                }
            }
            resetCache();
            return _colors = colors;
        };

        var getClass = function(value) {
            if (_classes != null) {
                var n = _classes.length-1;
                var i = 0;
                while (i < n && value >= _classes[i]) {
                    i++;
                }
                return i-1;
            }
            return 0;
        };

        var tMapLightness = function (t) { return t; };
        var tMapDomain = function (t) { return t; };

        // const classifyValue = function(value) {
        //     let val = value;
        //     if (_classes.length > 2) {
        //         const n = _classes.length-1;
        //         const i = getClass(value);
        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class
        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class
        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));
        //     }
        //     return val;
        // };

        var getColor = function(val, bypassMap) {
            var col, t;
            if (bypassMap == null) { bypassMap = false; }
            if (isNaN(val) || (val === null)) { return _nacol; }
            if (!bypassMap) {
                if (_classes && (_classes.length > 2)) {
                    // find the class
                    var c = getClass(val);
                    t = c / (_classes.length-2);
                } else if (_max !== _min) {
                    // just interpolate between min/max
                    t = (val - _min) / (_max - _min);
                } else {
                    t = 1;
                }
            } else {
                t = val;
            }

            // domain map
            t = tMapDomain(t);

            if (!bypassMap) {
                t = tMapLightness(t);  // lightness correction
            }

            if (_gamma !== 1) { t = pow$3(t, _gamma); }

            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));

            t = Math.min(1, Math.max(0, t));

            var k = Math.floor(t * 10000);

            if (_useCache && _colorCache[k]) {
                col = _colorCache[k];
            } else {
                if (type$2(_colors) === 'array') {
                    //for i in [0.._pos.length-1]
                    for (var i=0; i<_pos.length; i++) {
                        var p = _pos[i];
                        if (t <= p) {
                            col = _colors[i];
                            break;
                        }
                        if ((t >= p) && (i === (_pos.length-1))) {
                            col = _colors[i];
                            break;
                        }
                        if (t > p && t < _pos[i+1]) {
                            t = (t-p)/(_pos[i+1]-p);
                            col = chroma$4.interpolate(_colors[i], _colors[i+1], t, _mode);
                            break;
                        }
                    }
                } else if (type$2(_colors) === 'function') {
                    col = _colors(t);
                }
                if (_useCache) { _colorCache[k] = col; }
            }
            return col;
        };

        var resetCache = function () { return _colorCache = {}; };

        setColors(colors);

        // public interface

        var f = function(v) {
            var c = chroma$4(getColor(v));
            if (_out && c[_out]) { return c[_out](); } else { return c; }
        };

        f.classes = function(classes) {
            if (classes != null) {
                if (type$2(classes) === 'array') {
                    _classes = classes;
                    _domain = [classes[0], classes[classes.length-1]];
                } else {
                    var d = chroma$4.analyze(_domain);
                    if (classes === 0) {
                        _classes = [d.min, d.max];
                    } else {
                        _classes = chroma$4.limits(d, 'e', classes);
                    }
                }
                return f;
            }
            return _classes;
        };


        f.domain = function(domain) {
            if (!arguments.length) {
                return _domain;
            }
            _min = domain[0];
            _max = domain[domain.length-1];
            _pos = [];
            var k = _colors.length;
            if ((domain.length === k) && (_min !== _max)) {
                // update positions
                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {
                    var d = list[i];

                  _pos.push((d-_min) / (_max-_min));
                }
            } else {
                for (var c=0; c<k; c++) {
                    _pos.push(c/(k-1));
                }
                if (domain.length > 2) {
                    // set domain map
                    var tOut = domain.map(function (d,i) { return i/(domain.length-1); });
                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });
                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {
                        tMapDomain = function (t) {
                            if (t <= 0 || t >= 1) { return t; }
                            var i = 0;
                            while (t >= tBreaks[i+1]) { i++; }
                            var f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);
                            var out = tOut[i] + f * (tOut[i+1] - tOut[i]);
                            return out;
                        };
                    }

                }
            }
            _domain = [_min, _max];
            return f;
        };

        f.mode = function(_m) {
            if (!arguments.length) {
                return _mode;
            }
            _mode = _m;
            resetCache();
            return f;
        };

        f.range = function(colors, _pos) {
            setColors(colors);
            return f;
        };

        f.out = function(_o) {
            _out = _o;
            return f;
        };

        f.spread = function(val) {
            if (!arguments.length) {
                return _spread;
            }
            _spread = val;
            return f;
        };

        f.correctLightness = function(v) {
            if (v == null) { v = true; }
            _correctLightness = v;
            resetCache();
            if (_correctLightness) {
                tMapLightness = function(t) {
                    var L0 = getColor(0, true).lab()[0];
                    var L1 = getColor(1, true).lab()[0];
                    var pol = L0 > L1;
                    var L_actual = getColor(t, true).lab()[0];
                    var L_ideal = L0 + ((L1 - L0) * t);
                    var L_diff = L_actual - L_ideal;
                    var t0 = 0;
                    var t1 = 1;
                    var max_iter = 20;
                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {
                        (function() {
                            if (pol) { L_diff *= -1; }
                            if (L_diff < 0) {
                                t0 = t;
                                t += (t1 - t) * 0.5;
                            } else {
                                t1 = t;
                                t += (t0 - t) * 0.5;
                            }
                            L_actual = getColor(t, true).lab()[0];
                            return L_diff = L_actual - L_ideal;
                        })();
                    }
                    return t;
                };
            } else {
                tMapLightness = function (t) { return t; };
            }
            return f;
        };

        f.padding = function(p) {
            if (p != null) {
                if (type$2(p) === 'number') {
                    p = [p,p];
                }
                _padding = p;
                return f;
            } else {
                return _padding;
            }
        };

        f.colors = function(numColors, out) {
            // If no arguments are given, return the original colors that were provided
            if (arguments.length < 2) { out = 'hex'; }
            var result = [];

            if (arguments.length === 0) {
                result = _colors.slice(0);

            } else if (numColors === 1) {
                result = [f(0.5)];

            } else if (numColors > 1) {
                var dm = _domain[0];
                var dd = _domain[1] - dm;
                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });

            } else { // returns all colors based on the defined classes
                colors = [];
                var samples = [];
                if (_classes && (_classes.length > 2)) {
                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {
                        samples.push((_classes[i-1]+_classes[i])*0.5);
                    }
                } else {
                    samples = _domain;
                }
                result = samples.map(function (v) { return f(v); });
            }

            if (chroma$4[out]) {
                result = result.map(function (c) { return c[out](); });
            }
            return result;
        };

        f.cache = function(c) {
            if (c != null) {
                _useCache = c;
                return f;
            } else {
                return _useCache;
            }
        };

        f.gamma = function(g) {
            if (g != null) {
                _gamma = g;
                return f;
            } else {
                return _gamma;
            }
        };

        f.nodata = function(d) {
            if (d != null) {
                _nacol = chroma$4(d);
                return f;
            } else {
                return _nacol;
            }
        };

        return f;
    };

    function __range__(left, right, inclusive) {
      var range = [];
      var ascending = left < right;
      var end = !inclusive ? right : ascending ? right + 1 : right - 1;
      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {
        range.push(i);
      }
      return range;
    }

    //
    // interpolates between a set of colors uzing a bezier spline
    //

    // @requires utils lab
    var Color$5 = Color_1;

    var scale$1 = scale$2;

    // nth row of the pascal triangle
    var binom_row = function(n) {
        var row = [1, 1];
        for (var i = 1; i < n; i++) {
            var newrow = [1];
            for (var j = 1; j <= row.length; j++) {
                newrow[j] = (row[j] || 0) + row[j - 1];
            }
            row = newrow;
        }
        return row;
    };

    var bezier = function(colors) {
        var assign, assign$1, assign$2;

        var I, lab0, lab1, lab2;
        colors = colors.map(function (c) { return new Color$5(c); });
        if (colors.length === 2) {
            // linear interpolation
            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);
            I = function(t) {
                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));
                return new Color$5(lab, 'lab');
            };
        } else if (colors.length === 3) {
            // quadratic bezier interpolation
            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);
            I = function(t) {
                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));
                return new Color$5(lab, 'lab');
            };
        } else if (colors.length === 4) {
            // cubic bezier interpolation
            var lab3;
            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);
            I = function(t) {
                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));
                return new Color$5(lab, 'lab');
            };
        } else if (colors.length >= 5) {
            // general case (degree n bezier)
            var labs, row, n;
            labs = colors.map(function (c) { return c.lab(); });
            n = colors.length - 1;
            row = binom_row(n);
            I = function (t) {
                var u = 1 - t;
                var lab = ([0, 1, 2].map(function (i) { return labs.reduce(function (sum, el, j) { return (sum + row[j] * Math.pow( u, (n - j) ) * Math.pow( t, j ) * el[i]); }, 0); }));
                return new Color$5(lab, 'lab');
            };
        } else {
            throw new RangeError("No point in running bezier with only one color.")
        }
        return I;
    };

    var bezier_1 = function (colors) {
        var f = bezier(colors);
        f.scale = function () { return scale$1(f); };
        return f;
    };

    /*
     * interpolates between a set of colors uzing a bezier spline
     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/
     */

    var chroma$3 = chroma_1;

    var blend = function (bottom, top, mode) {
        if (!blend[mode]) {
            throw new Error('unknown blend mode ' + mode);
        }
        return blend[mode](bottom, top);
    };

    var blend_f = function (f) { return function (bottom,top) {
            var c0 = chroma$3(top).rgb();
            var c1 = chroma$3(bottom).rgb();
            return chroma$3.rgb(f(c0, c1));
        }; };

    var each = function (f) { return function (c0, c1) {
            var out = [];
            out[0] = f(c0[0], c1[0]);
            out[1] = f(c0[1], c1[1]);
            out[2] = f(c0[2], c1[2]);
            return out;
        }; };

    var normal = function (a) { return a; };
    var multiply = function (a,b) { return a * b / 255; };
    var darken = function (a,b) { return a > b ? b : a; };
    var lighten = function (a,b) { return a > b ? a : b; };
    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };
    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };
    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };
    var dodge = function (a,b) {
        if (a === 255) { return 255; }
        a = 255 * (b / 255) / (1 - a / 255);
        return a > 255 ? 255 : a
    };

    // # add = (a,b) ->
    // #     if (a + b > 255) then 255 else a + b

    blend.normal = blend_f(each(normal));
    blend.multiply = blend_f(each(multiply));
    blend.screen = blend_f(each(screen));
    blend.overlay = blend_f(each(overlay));
    blend.darken = blend_f(each(darken));
    blend.lighten = blend_f(each(lighten));
    blend.dodge = blend_f(each(dodge));
    blend.burn = blend_f(each(burn));
    // blend.add = blend_f(each(add));

    var blend_1 = blend;

    // cubehelix interpolation
    // based on D.A. Green "A colour scheme for the display of astronomical intensity images"
    // http://astron-soc.in/bulletin/11June/289392011.pdf

    var type$1 = utils.type;
    var clip_rgb = utils.clip_rgb;
    var TWOPI = utils.TWOPI;
    var pow$2 = Math.pow;
    var sin$1 = Math.sin;
    var cos$1 = Math.cos;
    var chroma$2 = chroma_1;

    var cubehelix = function(start, rotations, hue, gamma, lightness) {
        if ( start === void 0 ) start=300;
        if ( rotations === void 0 ) rotations=-1.5;
        if ( hue === void 0 ) hue=1;
        if ( gamma === void 0 ) gamma=1;
        if ( lightness === void 0 ) lightness=[0,1];

        var dh = 0, dl;
        if (type$1(lightness) === 'array') {
            dl = lightness[1] - lightness[0];
        } else {
            dl = 0;
            lightness = [lightness, lightness];
        }

        var f = function(fract) {
            var a = TWOPI * (((start+120)/360) + (rotations * fract));
            var l = pow$2(lightness[0] + (dl * fract), gamma);
            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;
            var amp = (h * l * (1-l)) / 2;
            var cos_a = cos$1(a);
            var sin_a = sin$1(a);
            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));
            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));
            var b = l + (amp * (+1.97294 * cos_a));
            return chroma$2(clip_rgb([r*255,g*255,b*255,1]));
        };

        f.start = function(s) {
            if ((s == null)) { return start; }
            start = s;
            return f;
        };

        f.rotations = function(r) {
            if ((r == null)) { return rotations; }
            rotations = r;
            return f;
        };

        f.gamma = function(g) {
            if ((g == null)) { return gamma; }
            gamma = g;
            return f;
        };

        f.hue = function(h) {
            if ((h == null)) { return hue; }
            hue = h;
            if (type$1(hue) === 'array') {
                dh = hue[1] - hue[0];
                if (dh === 0) { hue = hue[1]; }
            } else {
                dh = 0;
            }
            return f;
        };

        f.lightness = function(h) {
            if ((h == null)) { return lightness; }
            if (type$1(h) === 'array') {
                lightness = h;
                dl = h[1] - h[0];
            } else {
                lightness = [h,h];
                dl = 0;
            }
            return f;
        };

        f.scale = function () { return chroma$2.scale(f); };

        f.hue(hue);

        return f;
    };

    var Color$4 = Color_1;
    var digits = '0123456789abcdef';

    var floor$1 = Math.floor;
    var random = Math.random;

    var random_1 = function () {
        var code = '#';
        for (var i=0; i<6; i++) {
            code += digits.charAt(floor$1(random() * 16));
        }
        return new Color$4(code, 'hex');
    };

    var type = type$p;
    var log = Math.log;
    var pow$1 = Math.pow;
    var floor = Math.floor;
    var abs$1 = Math.abs;


    var analyze = function (data, key) {
        if ( key === void 0 ) key=null;

        var r = {
            min: Number.MAX_VALUE,
            max: Number.MAX_VALUE*-1,
            sum: 0,
            values: [],
            count: 0
        };
        if (type(data) === 'object') {
            data = Object.values(data);
        }
        data.forEach(function (val) {
            if (key && type(val) === 'object') { val = val[key]; }
            if (val !== undefined && val !== null && !isNaN(val)) {
                r.values.push(val);
                r.sum += val;
                if (val < r.min) { r.min = val; }
                if (val > r.max) { r.max = val; }
                r.count += 1;
            }
        });

        r.domain = [r.min, r.max];

        r.limits = function (mode, num) { return limits(r, mode, num); };

        return r;
    };


    var limits = function (data, mode, num) {
        if ( mode === void 0 ) mode='equal';
        if ( num === void 0 ) num=7;

        if (type(data) == 'array') {
            data = analyze(data);
        }
        var min = data.min;
        var max = data.max;
        var values = data.values.sort(function (a,b) { return a-b; });

        if (num === 1) { return [min,max]; }

        var limits = [];

        if (mode.substr(0,1) === 'c') { // continuous
            limits.push(min);
            limits.push(max);
        }

        if (mode.substr(0,1) === 'e') { // equal interval
            limits.push(min);
            for (var i=1; i<num; i++) {
                limits.push(min+((i/num)*(max-min)));
            }
            limits.push(max);
        }

        else if (mode.substr(0,1) === 'l') { // log scale
            if (min <= 0) {
                throw new Error('Logarithmic scales are only possible for values > 0');
            }
            var min_log = Math.LOG10E * log(min);
            var max_log = Math.LOG10E * log(max);
            limits.push(min);
            for (var i$1=1; i$1<num; i$1++) {
                limits.push(pow$1(10, min_log + ((i$1/num) * (max_log - min_log))));
            }
            limits.push(max);
        }

        else if (mode.substr(0,1) === 'q') { // quantile scale
            limits.push(min);
            for (var i$2=1; i$2<num; i$2++) {
                var p = ((values.length-1) * i$2)/num;
                var pb = floor(p);
                if (pb === p) {
                    limits.push(values[pb]);
                } else { // p > pb
                    var pr = p - pb;
                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));
                }
            }
            limits.push(max);

        }

        else if (mode.substr(0,1) === 'k') { // k-means clustering
            /*
            implementation based on
            http://code.google.com/p/figue/source/browse/trunk/figue.js#336
            simplified for 1-d input values
            */
            var cluster;
            var n = values.length;
            var assignments = new Array(n);
            var clusterSizes = new Array(num);
            var repeat = true;
            var nb_iters = 0;
            var centroids = null;

            // get seed values
            centroids = [];
            centroids.push(min);
            for (var i$3=1; i$3<num; i$3++) {
                centroids.push(min + ((i$3/num) * (max-min)));
            }
            centroids.push(max);

            while (repeat) {
                // assignment step
                for (var j=0; j<num; j++) {
                    clusterSizes[j] = 0;
                }
                for (var i$4=0; i$4<n; i$4++) {
                    var value = values[i$4];
                    var mindist = Number.MAX_VALUE;
                    var best = (void 0);
                    for (var j$1=0; j$1<num; j$1++) {
                        var dist = abs$1(centroids[j$1]-value);
                        if (dist < mindist) {
                            mindist = dist;
                            best = j$1;
                        }
                        clusterSizes[best]++;
                        assignments[i$4] = best;
                    }
                }

                // update centroids step
                var newCentroids = new Array(num);
                for (var j$2=0; j$2<num; j$2++) {
                    newCentroids[j$2] = null;
                }
                for (var i$5=0; i$5<n; i$5++) {
                    cluster = assignments[i$5];
                    if (newCentroids[cluster] === null) {
                        newCentroids[cluster] = values[i$5];
                    } else {
                        newCentroids[cluster] += values[i$5];
                    }
                }
                for (var j$3=0; j$3<num; j$3++) {
                    newCentroids[j$3] *= 1/clusterSizes[j$3];
                }

                // check convergence
                repeat = false;
                for (var j$4=0; j$4<num; j$4++) {
                    if (newCentroids[j$4] !== centroids[j$4]) {
                        repeat = true;
                        break;
                    }
                }

                centroids = newCentroids;
                nb_iters++;

                if (nb_iters > 200) {
                    repeat = false;
                }
            }

            // finished k-means clustering
            // the next part is borrowed from gabrielflor.it
            var kClusters = {};
            for (var j$5=0; j$5<num; j$5++) {
                kClusters[j$5] = [];
            }
            for (var i$6=0; i$6<n; i$6++) {
                cluster = assignments[i$6];
                kClusters[cluster].push(values[i$6]);
            }
            var tmpKMeansBreaks = [];
            for (var j$6=0; j$6<num; j$6++) {
                tmpKMeansBreaks.push(kClusters[j$6][0]);
                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);
            }
            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });
            limits.push(tmpKMeansBreaks[0]);
            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {
                var v = tmpKMeansBreaks[i$7];
                if (!isNaN(v) && (limits.indexOf(v) === -1)) {
                    limits.push(v);
                }
            }
        }
        return limits;
    };

    var analyze_1 = {analyze: analyze, limits: limits};

    var Color$3 = Color_1;


    var contrast = function (a, b) {
        // WCAG contrast ratio
        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
        a = new Color$3(a);
        b = new Color$3(b);
        var l1 = a.luminance();
        var l2 = b.luminance();
        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
    };

    var Color$2 = Color_1;
    var sqrt = Math.sqrt;
    var pow = Math.pow;
    var min = Math.min;
    var max = Math.max;
    var atan2 = Math.atan2;
    var abs = Math.abs;
    var cos = Math.cos;
    var sin = Math.sin;
    var exp = Math.exp;
    var PI = Math.PI;

    var deltaE = function(a, b, Kl, Kc, Kh) {
        if ( Kl === void 0 ) Kl=1;
        if ( Kc === void 0 ) Kc=1;
        if ( Kh === void 0 ) Kh=1;

        // Delta E (CIE 2000)
        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html
        var rad2deg = function(rad) {
            return 360 * rad / (2 * PI);
        };
        var deg2rad = function(deg) {
            return (2 * PI * deg) / 360;
        };
        a = new Color$2(a);
        b = new Color$2(b);
        var ref = Array.from(a.lab());
        var L1 = ref[0];
        var a1 = ref[1];
        var b1 = ref[2];
        var ref$1 = Array.from(b.lab());
        var L2 = ref$1[0];
        var a2 = ref$1[1];
        var b2 = ref$1[2];
        var avgL = (L1 + L2)/2;
        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));
        var C2 = sqrt(pow(a2, 2) + pow(b2, 2));
        var avgC = (C1 + C2)/2;
        var G = 0.5*(1-sqrt(pow(avgC, 7)/(pow(avgC, 7) + pow(25, 7))));
        var a1p = a1*(1+G);
        var a2p = a2*(1+G);
        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));
        var C2p = sqrt(pow(a2p, 2) + pow(b2, 2));
        var avgCp = (C1p + C2p)/2;
        var arctan1 = rad2deg(atan2(b1, a1p));
        var arctan2 = rad2deg(atan2(b2, a2p));
        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;
        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;
        var avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360)/2 : (h1p + h2p)/2;
        var T = 1 - 0.17*cos(deg2rad(avgHp - 30)) + 0.24*cos(deg2rad(2*avgHp)) + 0.32*cos(deg2rad(3*avgHp + 6)) - 0.2*cos(deg2rad(4*avgHp - 63));
        var deltaHp = h2p - h1p;
        deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;
        deltaHp = 2*sqrt(C1p*C2p)*sin(deg2rad(deltaHp)/2);
        var deltaL = L2 - L1;
        var deltaCp = C2p - C1p;    
        var sl = 1 + (0.015*pow(avgL - 50, 2))/sqrt(20 + pow(avgL - 50, 2));
        var sc = 1 + 0.045*avgCp;
        var sh = 1 + 0.015*avgCp*T;
        var deltaTheta = 30*exp(-pow((avgHp - 275)/25, 2));
        var Rc = 2*sqrt(pow(avgCp, 7)/(pow(avgCp, 7) + pow(25, 7)));
        var Rt = -Rc*sin(2*deg2rad(deltaTheta));
        var result = sqrt(pow(deltaL/(Kl*sl), 2) + pow(deltaCp/(Kc*sc), 2) + pow(deltaHp/(Kh*sh), 2) + Rt*(deltaCp/(Kc*sc))*(deltaHp/(Kh*sh)));
        return max(0, min(100, result));
    };

    var Color$1 = Color_1;

    // simple Euclidean distance
    var distance = function(a, b, mode) {
        if ( mode === void 0 ) mode='lab';

        // Delta E (CIE 1976)
        // see http://www.brucelindbloom.com/index.html?Equations.html
        a = new Color$1(a);
        b = new Color$1(b);
        var l1 = a.get(mode);
        var l2 = b.get(mode);
        var sum_sq = 0;
        for (var i in l1) {
            var d = (l1[i] || 0) - (l2[i] || 0);
            sum_sq += d*d;
        }
        return Math.sqrt(sum_sq);
    };

    var Color = Color_1;

    var valid = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        try {
            new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));
            return true;
        } catch (e) {
            return false;
        }
    };

    // some pre-defined color scales:
    var chroma$1 = chroma_1;

    var scale = scale$2;

    var scales = {
    	cool: function cool() { return scale([chroma$1.hsl(180,1,.9), chroma$1.hsl(250,.7,.4)]) },
    	hot: function hot() { return scale(['#000','#f00','#ff0','#fff']).mode('rgb') }
    };

    /**
        ColorBrewer colors for chroma.js

        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
        Pennsylvania State University.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software distributed
        under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
        CONDITIONS OF ANY KIND, either express or implied. See the License for the
        specific language governing permissions and limitations under the License.
    */

    var colorbrewer = {
        // sequential
        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],

        // diverging

        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],

        // qualitative

        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],
    };

    // add lowercase aliases for case-insensitive matches
    for (var i = 0, list = Object.keys(colorbrewer); i < list.length; i += 1) {
        var key = list[i];

        colorbrewer[key.toLowerCase()] = colorbrewer[key];
    }

    var colorbrewer_1 = colorbrewer;

    var chroma = chroma_1;

    // feel free to comment out anything to rollup
    // a smaller chroma.js built

    // io --> convert colors

















    // operators --> modify existing Colors










    // interpolators












    // generators -- > create new colors
    chroma.average = average;
    chroma.bezier = bezier_1;
    chroma.blend = blend_1;
    chroma.cubehelix = cubehelix;
    chroma.mix = chroma.interpolate = mix$1;
    chroma.random = random_1;
    chroma.scale = scale$2;

    // other utility methods
    chroma.analyze = analyze_1.analyze;
    chroma.contrast = contrast;
    chroma.deltaE = deltaE;
    chroma.distance = distance;
    chroma.limits = analyze_1.limits;
    chroma.valid = valid;

    // scale
    chroma.scales = scales;

    // colors
    chroma.colors = w3cx11_1;
    chroma.brewer = colorbrewer_1;

    var chroma_js = chroma;

    return chroma_js;

}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// UNUSED EXPORTS: default

;// CONCATENATED MODULE: ./public/JetBrainsMono-Regular.ttf
/* harmony default export */ const JetBrainsMono_Regular = (__webpack_require__.p + "73fb7b7f0e68b372adfeceffe115890a.ttf");
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(379);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(795);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(569);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(565);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(216);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(589);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./public/style.css
var style = __webpack_require__(563);
;// CONCATENATED MODULE: ./public/style.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(style/* default */.Z, options);




       /* harmony default export */ const public_style = (style/* default */.Z && style/* default */.Z.locals ? style/* default */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/environment.js


const is_client = typeof window !== 'undefined';

/** @type {() => number} */
let environment_now = (/* unused pure expression or super */ null && (is_client ? () => window.performance.now() : () => Date.now()));

let environment_raf = (/* unused pure expression or super */ null && (is_client ? (cb) => requestAnimationFrame(cb) : noop));

// used internally for testing
/** @returns {void} */
function set_now(fn) {
	environment_now = fn;
}

/** @returns {void} */
function set_raf(fn) {
	environment_raf = fn;
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/loop.js


const tasks = new Set();

/**
 * @param {number} now
 * @returns {void}
 */
function run_tasks(now) {
	tasks.forEach((task) => {
		if (!task.c(now)) {
			tasks.delete(task);
			task.f();
		}
	});
	if (tasks.size !== 0) raf(run_tasks);
}

/**
 * For testing purposes only!
 * @returns {void}
 */
function clear_loops() {
	tasks.clear();
}

/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 * @param {import('./private.js').TaskCallback} callback
 * @returns {import('./private.js').Task}
 */
function loop_loop(callback) {
	/** @type {import('./private.js').TaskEntry} */
	let task;
	if (tasks.size === 0) raf(run_tasks);
	return {
		promise: new Promise((fulfill) => {
			tasks.add((task = { c: callback, f: fulfill }));
		}),
		abort() {
			tasks.delete(task);
		}
	};
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/globals.js
/** @type {typeof globalThis} */
const globals =
	typeof window !== 'undefined'
		? window
		: typeof globalThis !== 'undefined'
		? globalThis
		: // @ts-ignore Node typings have this
		  global;

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js


/**
 * Resize observer singleton.
 * One listener per element only!
 * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ
 */
class ResizeObserverSingleton {
	/**
	 * @private
	 * @readonly
	 * @type {WeakMap<Element, import('./private.js').Listener>}
	 */
	_listeners = "WeakMap" in globals ? new WeakMap() : undefined;

	/**
	 * @private
	 * @type {ResizeObserver}
	 */
	_observer = undefined;

	/** @type {ResizeObserverOptions} */
	options;

	/** @param {ResizeObserverOptions} options */
	constructor(options) {
		this.options = options;
	}

	/**
	 * @param {Element} element
	 * @param {import('./private.js').Listener} listener
	 * @returns {() => void}
	 */
	observe(element, listener) {
		this._listeners.set(element, listener);
		this._getObserver().observe(element, this.options);
		return () => {
			this._listeners.delete(element);
			this._observer.unobserve(element); // this line can probably be removed
		};
	}

	/**
	 * @private
	 */
	_getObserver() {
		return (
			this._observer ??
			(this._observer = new ResizeObserver((entries) => {
				for (const entry of entries) {
					ResizeObserverSingleton.entries.set(entry.target, entry);
					this._listeners.get(entry.target)?.(entry);
				}
			}))
		);
	}
}

// Needs to be written like this to pass the tree-shake-test
ResizeObserverSingleton.entries = "WeakMap" in globals ? new WeakMap() : undefined;

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/dom.js


// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
// at the end of hydration without touching the remaining nodes.
let is_hydrating = false;

/**
 * @returns {void}
 */
function start_hydrating() {
	is_hydrating = true;
}

/**
 * @returns {void}
 */
function end_hydrating() {
	is_hydrating = false;
}

/**
 * @param {number} low
 * @param {number} high
 * @param {(index: number) => number} key
 * @param {number} value
 * @returns {number}
 */
function upper_bound(low, high, key, value) {
	// Return first index of value larger than input value in the range [low, high)
	while (low < high) {
		const mid = low + ((high - low) >> 1);
		if (key(mid) <= value) {
			low = mid + 1;
		} else {
			high = mid;
		}
	}
	return low;
}

/**
 * @param {NodeEx} target
 * @returns {void}
 */
function init_hydrate(target) {
	if (target.hydrate_init) return;
	target.hydrate_init = true;
	// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>

	let children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);
	// If target is <head>, there may be children without claim_order
	if (target.nodeName === 'HEAD') {
		const myChildren = [];
		for (let i = 0; i < children.length; i++) {
			const node = children[i];
			if (node.claim_order !== undefined) {
				myChildren.push(node);
			}
		}
		children = myChildren;
	}
	/*
	 * Reorder claimed children optimally.
	 * We can reorder claimed children optimally by finding the longest subsequence of
	 * nodes that are already claimed in order and only moving the rest. The longest
	 * subsequence of nodes that are claimed in order can be found by
	 * computing the longest increasing subsequence of .claim_order values.
	 *
	 * This algorithm is optimal in generating the least amount of reorder operations
	 * possible.
	 *
	 * Proof:
	 * We know that, given a set of reordering operations, the nodes that do not move
	 * always form an increasing subsequence, since they do not move among each other
	 * meaning that they must be already ordered among each other. Thus, the maximal
	 * set of nodes that do not move form a longest increasing subsequence.
	 */
	// Compute longest increasing subsequence
	// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
	const m = new Int32Array(children.length + 1);
	// Predecessor indices + 1
	const p = new Int32Array(children.length);
	m[0] = -1;
	let longest = 0;
	for (let i = 0; i < children.length; i++) {
		const current = children[i].claim_order;
		// Find the largest subsequence length such that it ends in a value less than our current value
		// upper_bound returns first greater value, so we subtract one
		// with fast path for when we are on the current longest subsequence
		const seqLen =
			(longest > 0 && children[m[longest]].claim_order <= current
				? longest + 1
				: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;
		p[i] = m[seqLen] + 1;
		const newLen = seqLen + 1;
		// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
		m[newLen] = i;
		longest = Math.max(newLen, longest);
	}
	// The longest increasing subsequence of nodes (initially reversed)

	/**
	 * @type {NodeEx2[]}
	 */
	const lis = [];
	// The rest of the nodes, nodes that will be moved

	/**
	 * @type {NodeEx2[]}
	 */
	const toMove = [];
	let last = children.length - 1;
	for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
		lis.push(children[cur - 1]);
		for (; last >= cur; last--) {
			toMove.push(children[last]);
		}
		last--;
	}
	for (; last >= 0; last--) {
		toMove.push(children[last]);
	}
	lis.reverse();
	// We sort the nodes being moved to guarantee that their insertion order matches the claim order
	toMove.sort((a, b) => a.claim_order - b.claim_order);
	// Finally, we move the nodes
	for (let i = 0, j = 0; i < toMove.length; i++) {
		while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
			j++;
		}
		const anchor = j < lis.length ? lis[j] : null;
		target.insertBefore(toMove[i], anchor);
	}
}

/**
 * @param {Node} target
 * @param {Node} node
 * @returns {void}
 */
function append(target, node) {
	target.appendChild(node);
}

/**
 * @param {Node} target
 * @param {string} style_sheet_id
 * @param {string} styles
 * @returns {void}
 */
function append_styles(target, style_sheet_id, styles) {
	const append_styles_to = dom_get_root_for_style(target);
	if (!append_styles_to.getElementById(style_sheet_id)) {
		const style = dom_element('style');
		style.id = style_sheet_id;
		style.textContent = styles;
		append_stylesheet(append_styles_to, style);
	}
}

/**
 * @param {Node} node
 * @returns {ShadowRoot | Document}
 */
function dom_get_root_for_style(node) {
	if (!node) return document;
	const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
	if (root && /** @type {ShadowRoot} */ (root).host) {
		return /** @type {ShadowRoot} */ (root);
	}
	return node.ownerDocument;
}

/**
 * @param {Node} node
 * @returns {CSSStyleSheet}
 */
function dom_append_empty_stylesheet(node) {
	const style_element = dom_element('style');
	// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,
	// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.
	// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.
	// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.
	// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.
	style_element.textContent = '/* empty */';
	append_stylesheet(dom_get_root_for_style(node), style_element);
	return style_element.sheet;
}

/**
 * @param {ShadowRoot | Document} node
 * @param {HTMLStyleElement} style
 * @returns {CSSStyleSheet}
 */
function append_stylesheet(node, style) {
	append(/** @type {Document} */ (node).head || node, style);
	return style.sheet;
}

/**
 * @param {NodeEx} target
 * @param {NodeEx} node
 * @returns {void}
 */
function dom_append_hydration(target, node) {
	if (is_hydrating) {
		init_hydrate(target);
		if (
			target.actual_end_child === undefined ||
			(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)
		) {
			target.actual_end_child = target.firstChild;
		}
		// Skip nodes of undefined ordering
		while (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {
			target.actual_end_child = target.actual_end_child.nextSibling;
		}
		if (node !== target.actual_end_child) {
			// We only insert if the ordering of this node should be modified or the parent node is not target
			if (node.claim_order !== undefined || node.parentNode !== target) {
				target.insertBefore(node, target.actual_end_child);
			}
		} else {
			target.actual_end_child = node.nextSibling;
		}
	} else if (node.parentNode !== target || node.nextSibling !== null) {
		target.appendChild(node);
	}
}

/**
 * @param {Node} target
 * @param {Node} node
 * @param {Node} [anchor]
 * @returns {void}
 */
function insert(target, node, anchor) {
	target.insertBefore(node, anchor || null);
}

/**
 * @param {NodeEx} target
 * @param {NodeEx} node
 * @param {NodeEx} [anchor]
 * @returns {void}
 */
function dom_insert_hydration(target, node, anchor) {
	if (is_hydrating && !anchor) {
		dom_append_hydration(target, node);
	} else if (node.parentNode !== target || node.nextSibling != anchor) {
		target.insertBefore(node, anchor || null);
	}
}

/**
 * @param {Node} node
 * @returns {void}
 */
function dom_detach(node) {
	if (node.parentNode) {
		node.parentNode.removeChild(node);
	}
}

/**
 * @returns {void} */
function destroy_each(iterations, detaching) {
	for (let i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d(detaching);
	}
}

/**
 * @template {keyof HTMLElementTagNameMap} K
 * @param {K} name
 * @returns {HTMLElementTagNameMap[K]}
 */
function dom_element(name) {
	return document.createElement(name);
}

/**
 * @template {keyof HTMLElementTagNameMap} K
 * @param {K} name
 * @param {string} is
 * @returns {HTMLElementTagNameMap[K]}
 */
function element_is(name, is) {
	return document.createElement(name, { is });
}

/**
 * @template T
 * @template {keyof T} K
 * @param {T} obj
 * @param {K[]} exclude
 * @returns {Pick<T, Exclude<keyof T, K>>}
 */
function object_without_properties(obj, exclude) {
	const target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});
	for (const k in obj) {
		if (
			has_prop(obj, k) &&
			// @ts-ignore
			exclude.indexOf(k) === -1
		) {
			// @ts-ignore
			target[k] = obj[k];
		}
	}
	return target;
}

/**
 * @template {keyof SVGElementTagNameMap} K
 * @param {K} name
 * @returns {SVGElement}
 */
function svg_element(name) {
	return document.createElementNS('http://www.w3.org/2000/svg', name);
}

/**
 * @param {string} data
 * @returns {Text}
 */
function dom_text(data) {
	return document.createTextNode(data);
}

/**
 * @returns {Text} */
function space() {
	return dom_text(' ');
}

/**
 * @returns {Text} */
function empty() {
	return dom_text('');
}

/**
 * @param {string} content
 * @returns {Comment}
 */
function comment(content) {
	return document.createComment(content);
}

/**
 * @param {EventTarget} node
 * @param {string} event
 * @param {EventListenerOrEventListenerObject} handler
 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
 * @returns {() => void}
 */
function listen(node, event, handler, options) {
	node.addEventListener(event, handler, options);
	return () => node.removeEventListener(event, handler, options);
}

/**
 * @returns {(event: any) => any} */
function prevent_default(fn) {
	return function (event) {
		event.preventDefault();
		// @ts-ignore
		return fn.call(this, event);
	};
}

/**
 * @returns {(event: any) => any} */
function stop_propagation(fn) {
	return function (event) {
		event.stopPropagation();
		// @ts-ignore
		return fn.call(this, event);
	};
}

/**
 * @returns {(event: any) => any} */
function stop_immediate_propagation(fn) {
	return function (event) {
		event.stopImmediatePropagation();
		// @ts-ignore
		return fn.call(this, event);
	};
}

/**
 * @returns {(event: any) => void} */
function dom_self(fn) {
	return function (event) {
		// @ts-ignore
		if (event.target === this) fn.call(this, event);
	};
}

/**
 * @returns {(event: any) => void} */
function trusted(fn) {
	return function (event) {
		// @ts-ignore
		if (event.isTrusted) fn.call(this, event);
	};
}

/**
 * @param {Element} node
 * @param {string} attribute
 * @param {string} [value]
 * @returns {void}
 */
function attr(node, attribute, value) {
	if (value == null) node.removeAttribute(attribute);
	else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
/**
 * List of attributes that should always be set through the attr method,
 * because updating them through the property setter doesn't work reliably.
 * In the example of `width`/`height`, the problem is that the setter only
 * accepts numeric values, but the attribute can also be set to a string like `50%`.
 * If this list becomes too big, rethink this approach.
 */
const always_set_through_set_attribute = (/* unused pure expression or super */ null && (['width', 'height']));

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {{ [x: string]: string }} attributes
 * @returns {void}
 */
function set_attributes(node, attributes) {
	// @ts-ignore
	const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
	for (const key in attributes) {
		if (attributes[key] == null) {
			node.removeAttribute(key);
		} else if (key === 'style') {
			node.style.cssText = attributes[key];
		} else if (key === '__value') {
			/** @type {any} */ (node).value = node[key] = attributes[key];
		} else if (
			descriptors[key] &&
			descriptors[key].set &&
			always_set_through_set_attribute.indexOf(key) === -1
		) {
			node[key] = attributes[key];
		} else {
			attr(node, key, attributes[key]);
		}
	}
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {{ [x: string]: string }} attributes
 * @returns {void}
 */
function set_svg_attributes(node, attributes) {
	for (const key in attributes) {
		attr(node, key, attributes[key]);
	}
}

/**
 * @param {Record<string, unknown>} data_map
 * @returns {void}
 */
function set_custom_element_data_map(node, data_map) {
	Object.keys(data_map).forEach((key) => {
		set_custom_element_data(node, key, data_map[key]);
	});
}

/**
 * @returns {void} */
function set_custom_element_data(node, prop, value) {
	if (prop in node) {
		node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
	} else {
		attr(node, prop, value);
	}
}

/**
 * @param {string} tag
 */
function set_dynamic_element_data(tag) {
	return /-/.test(tag) ? set_custom_element_data_map : set_attributes;
}

/**
 * @returns {void}
 */
function xlink_attr(node, attribute, value) {
	node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
}

/**
 * @param {HTMLElement} node
 * @returns {string}
 */
function get_svelte_dataset(node) {
	return node.dataset.svelteH;
}

/**
 * @returns {unknown[]} */
function get_binding_group_value(group, __value, checked) {
	const value = new Set();
	for (let i = 0; i < group.length; i += 1) {
		if (group[i].checked) value.add(group[i].__value);
	}
	if (!checked) {
		value.delete(__value);
	}
	return Array.from(value);
}

/**
 * @param {HTMLInputElement[]} group
 * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}
 */
function init_binding_group(group) {
	/**
	 * @type {HTMLInputElement[]} */
	let _inputs;
	return {
		/* push */ p(...inputs) {
			_inputs = inputs;
			_inputs.forEach((input) => group.push(input));
		},
		/* remove */ r() {
			_inputs.forEach((input) => group.splice(group.indexOf(input), 1));
		}
	};
}

/**
 * @param {number[]} indexes
 * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}
 */
function init_binding_group_dynamic(group, indexes) {
	/**
	 * @type {HTMLInputElement[]} */
	let _group = get_binding_group(group);

	/**
	 * @type {HTMLInputElement[]} */
	let _inputs;

	function get_binding_group(group) {
		for (let i = 0; i < indexes.length; i++) {
			group = group[indexes[i]] = group[indexes[i]] || [];
		}
		return group;
	}

	/**
	 * @returns {void} */
	function push() {
		_inputs.forEach((input) => _group.push(input));
	}

	/**
	 * @returns {void} */
	function remove() {
		_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));
	}
	return {
		/* update */ u(new_indexes) {
			indexes = new_indexes;
			const new_group = get_binding_group(group);
			if (new_group !== _group) {
				remove();
				_group = new_group;
				push();
			}
		},
		/* push */ p(...inputs) {
			_inputs = inputs;
			push();
		},
		/* remove */ r: remove
	};
}

/**
 * @returns {number} */
function to_number(value) {
	return value === '' ? null : +value;
}

/**
 * @returns {any[]} */
function time_ranges_to_array(ranges) {
	const array = [];
	for (let i = 0; i < ranges.length; i += 1) {
		array.push({ start: ranges.start(i), end: ranges.end(i) });
	}
	return array;
}

/**
 * @param {Element} element
 * @returns {ChildNode[]}
 */
function children(element) {
	return Array.from(element.childNodes);
}

/**
 * @param {ChildNodeArray} nodes
 * @returns {void}
 */
function init_claim_info(nodes) {
	if (nodes.claim_info === undefined) {
		nodes.claim_info = { last_index: 0, total_claimed: 0 };
	}
}

/**
 * @template {ChildNodeEx} R
 * @param {ChildNodeArray} nodes
 * @param {(node: ChildNodeEx) => node is R} predicate
 * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} processNode
 * @param {() => R} createNode
 * @param {boolean} dontUpdateLastIndex
 * @returns {R}
 */
function claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {
	// Try to find nodes in an order such that we lengthen the longest increasing subsequence
	init_claim_info(nodes);
	const resultNode = (() => {
		// We first try to find an element after the previous one
		for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {
			const node = nodes[i];
			if (predicate(node)) {
				const replacement = processNode(node);
				if (replacement === undefined) {
					nodes.splice(i, 1);
				} else {
					nodes[i] = replacement;
				}
				if (!dontUpdateLastIndex) {
					nodes.claim_info.last_index = i;
				}
				return node;
			}
		}
		// Otherwise, we try to find one before
		// We iterate in reverse so that we don't go too far back
		for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {
			const node = nodes[i];
			if (predicate(node)) {
				const replacement = processNode(node);
				if (replacement === undefined) {
					nodes.splice(i, 1);
				} else {
					nodes[i] = replacement;
				}
				if (!dontUpdateLastIndex) {
					nodes.claim_info.last_index = i;
				} else if (replacement === undefined) {
					// Since we spliced before the last_index, we decrease it
					nodes.claim_info.last_index--;
				}
				return node;
			}
		}
		// If we can't find any matching node, we create a new one
		return createNode();
	})();
	resultNode.claim_order = nodes.claim_info.total_claimed;
	nodes.claim_info.total_claimed += 1;
	return resultNode;
}

/**
 * @param {ChildNodeArray} nodes
 * @param {string} name
 * @param {{ [key: string]: boolean }} attributes
 * @param {(name: string) => Element | SVGElement} create_element
 * @returns {Element | SVGElement}
 */
function claim_element_base(nodes, name, attributes, create_element) {
	return claim_node(
		nodes,
		/** @returns {node is Element | SVGElement} */
		(node) => node.nodeName === name,
		/** @param {Element} node */
		(node) => {
			const remove = [];
			for (let j = 0; j < node.attributes.length; j++) {
				const attribute = node.attributes[j];
				if (!attributes[attribute.name]) {
					remove.push(attribute.name);
				}
			}
			remove.forEach((v) => node.removeAttribute(v));
			return undefined;
		},
		() => create_element(name)
	);
}

/**
 * @param {ChildNodeArray} nodes
 * @param {string} name
 * @param {{ [key: string]: boolean }} attributes
 * @returns {Element | SVGElement}
 */
function claim_element(nodes, name, attributes) {
	return claim_element_base(nodes, name, attributes, dom_element);
}

/**
 * @param {ChildNodeArray} nodes
 * @param {string} name
 * @param {{ [key: string]: boolean }} attributes
 * @returns {Element | SVGElement}
 */
function claim_svg_element(nodes, name, attributes) {
	return claim_element_base(nodes, name, attributes, svg_element);
}

/**
 * @param {ChildNodeArray} nodes
 * @returns {Text}
 */
function claim_text(nodes, data) {
	return claim_node(
		nodes,
		/** @returns {node is Text} */
		(node) => node.nodeType === 3,
		/** @param {Text} node */
		(node) => {
			const dataStr = '' + data;
			if (node.data.startsWith(dataStr)) {
				if (node.data.length !== dataStr.length) {
					return node.splitText(dataStr.length);
				}
			} else {
				node.data = dataStr;
			}
		},
		() => dom_text(data),
		true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements
	);
}

/**
 * @returns {Text} */
function claim_space(nodes) {
	return claim_text(nodes, ' ');
}

/**
 * @param {ChildNodeArray} nodes
 * @returns {Comment}
 */
function claim_comment(nodes, data) {
	return claim_node(
		nodes,
		/** @returns {node is Comment} */
		(node) => node.nodeType === 8,
		/** @param {Comment} node */
		(node) => {
			node.data = '' + data;
			return undefined;
		},
		() => comment(data),
		true
	);
}

function find_comment(nodes, text, start) {
	for (let i = start; i < nodes.length; i += 1) {
		const node = nodes[i];
		if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {
			return i;
		}
	}
	return nodes.length;
}

/**
 * @param {boolean} is_svg
 * @returns {HtmlTagHydration}
 */
function claim_html_tag(nodes, is_svg) {
	// find html opening tag
	const start_index = find_comment(nodes, 'HTML_TAG_START', 0);
	const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);
	if (start_index === end_index) {
		return new HtmlTagHydration(undefined, is_svg);
	}
	init_claim_info(nodes);
	const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);
	dom_detach(html_tag_nodes[0]);
	dom_detach(html_tag_nodes[html_tag_nodes.length - 1]);
	const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);
	for (const n of claimed_nodes) {
		n.claim_order = nodes.claim_info.total_claimed;
		nodes.claim_info.total_claimed += 1;
	}
	return new HtmlTagHydration(claimed_nodes, is_svg);
}

/**
 * @param {Text} text
 * @param {unknown} data
 * @returns {void}
 */
function set_data(text, data) {
	data = '' + data;
	if (text.data === data) return;
	text.data = /** @type {string} */ (data);
}

/**
 * @param {Text} text
 * @param {unknown} data
 * @returns {void}
 */
function set_data_contenteditable(text, data) {
	data = '' + data;
	if (text.wholeText === data) return;
	text.data = /** @type {string} */ (data);
}

/**
 * @param {Text} text
 * @param {unknown} data
 * @param {string} attr_value
 * @returns {void}
 */
function set_data_maybe_contenteditable(text, data, attr_value) {
	if (~contenteditable_truthy_values.indexOf(attr_value)) {
		set_data_contenteditable(text, data);
	} else {
		set_data(text, data);
	}
}

/**
 * @returns {void} */
function set_input_value(input, value) {
	input.value = value == null ? '' : value;
}

/**
 * @returns {void} */
function set_input_type(input, type) {
	try {
		input.type = type;
	} catch (e) {
		// do nothing
	}
}

/**
 * @returns {void} */
function set_style(node, key, value, important) {
	if (value == null) {
		node.style.removeProperty(key);
	} else {
		node.style.setProperty(key, value, important ? 'important' : '');
	}
}

/**
 * @returns {void} */
function select_option(select, value, mounting) {
	for (let i = 0; i < select.options.length; i += 1) {
		const option = select.options[i];
		if (option.__value === value) {
			option.selected = true;
			return;
		}
	}
	if (!mounting || value !== undefined) {
		select.selectedIndex = -1; // no option should be selected
	}
}

/**
 * @returns {void} */
function select_options(select, value) {
	for (let i = 0; i < select.options.length; i += 1) {
		const option = select.options[i];
		option.selected = ~value.indexOf(option.__value);
	}
}

function select_value(select) {
	const selected_option = select.querySelector(':checked');
	return selected_option && selected_option.__value;
}

function select_multiple_value(select) {
	return [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);
}
// unfortunately this can't be a constant as that wouldn't be tree-shakeable
// so we cache the result instead

/**
 * @type {boolean} */
let crossorigin;

/**
 * @returns {boolean} */
function is_crossorigin() {
	if (crossorigin === undefined) {
		crossorigin = false;
		try {
			if (typeof window !== 'undefined' && window.parent) {
				void window.parent.document;
			}
		} catch (error) {
			crossorigin = true;
		}
	}
	return crossorigin;
}

/**
 * @param {HTMLElement} node
 * @param {() => void} fn
 * @returns {() => void}
 */
function add_iframe_resize_listener(node, fn) {
	const computed_style = getComputedStyle(node);
	if (computed_style.position === 'static') {
		node.style.position = 'relative';
	}
	const iframe = dom_element('iframe');
	iframe.setAttribute(
		'style',
		'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
			'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'
	);
	iframe.setAttribute('aria-hidden', 'true');
	iframe.tabIndex = -1;
	const crossorigin = is_crossorigin();

	/**
	 * @type {() => void}
	 */
	let unsubscribe;
	if (crossorigin) {
		iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
		unsubscribe = listen(
			window,
			'message',
			/** @param {MessageEvent} event */ (event) => {
				if (event.source === iframe.contentWindow) fn();
			}
		);
	} else {
		iframe.src = 'about:blank';
		iframe.onload = () => {
			unsubscribe = listen(iframe.contentWindow, 'resize', fn);
			// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)
			// see https://github.com/sveltejs/svelte/issues/4233
			fn();
		};
	}
	append(node, iframe);
	return () => {
		if (crossorigin) {
			unsubscribe();
		} else if (unsubscribe && iframe.contentWindow) {
			unsubscribe();
		}
		dom_detach(iframe);
	};
}
const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({
	box: 'content-box'
});
const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({
	box: 'border-box'
});
const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(
	{ box: 'device-pixel-content-box' }
);


/**
 * @returns {void} */
function toggle_class(element, name, toggle) {
	// The `!!` is required because an `undefined` flag means flipping the current state.
	element.classList.toggle(name, !!toggle);
}

/**
 * @template T
 * @param {string} type
 * @param {T} [detail]
 * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]
 * @returns {CustomEvent<T>}
 */
function dom_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
	return new CustomEvent(type, { detail, bubbles, cancelable });
}

/**
 * @param {string} selector
 * @param {HTMLElement} parent
 * @returns {ChildNodeArray}
 */
function query_selector_all(selector, parent = document.body) {
	return Array.from(parent.querySelectorAll(selector));
}

/**
 * @param {string} nodeId
 * @param {HTMLElement} head
 * @returns {any[]}
 */
function head_selector(nodeId, head) {
	const result = [];
	let started = 0;
	for (const node of head.childNodes) {
		if (node.nodeType === 8 /* comment node */) {
			const comment = node.textContent.trim();
			if (comment === `HEAD_${nodeId}_END`) {
				started -= 1;
				result.push(node);
			} else if (comment === `HEAD_${nodeId}_START`) {
				started += 1;
				result.push(node);
			}
		} else if (started > 0) {
			result.push(node);
		}
	}
	return result;
}
/** */
class HtmlTag {
	/**
	 * @private
	 * @default false
	 */
	is_svg = false;
	// parent for creating node
	/** */
	e = undefined;
	// html tag nodes
	/** */
	n = undefined;
	// target
	/** */
	t = undefined;
	// anchor
	/** */
	a = undefined;
	constructor(is_svg = false) {
		this.is_svg = is_svg;
		this.e = this.n = null;
	}

	/**
	 * @param {string} html
	 * @returns {void}
	 */
	c(html) {
		this.h(html);
	}

	/**
	 * @param {string} html
	 * @param {HTMLElement | SVGElement} target
	 * @param {HTMLElement | SVGElement} anchor
	 * @returns {void}
	 */
	m(html, target, anchor = null) {
		if (!this.e) {
			if (this.is_svg)
				this.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));
			/** #7364  target for <template> may be provided as #document-fragment(11) */ else
				this.e = dom_element(
					/** @type {keyof HTMLElementTagNameMap} */ (
						target.nodeType === 11 ? 'TEMPLATE' : target.nodeName
					)
				);
			this.t =
				target.tagName !== 'TEMPLATE'
					? target
					: /** @type {HTMLTemplateElement} */ (target).content;
			this.c(html);
		}
		this.i(anchor);
	}

	/**
	 * @param {string} html
	 * @returns {void}
	 */
	h(html) {
		this.e.innerHTML = html;
		this.n = Array.from(
			this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes
		);
	}

	/**
	 * @returns {void} */
	i(anchor) {
		for (let i = 0; i < this.n.length; i += 1) {
			insert(this.t, this.n[i], anchor);
		}
	}

	/**
	 * @param {string} html
	 * @returns {void}
	 */
	p(html) {
		this.d();
		this.h(html);
		this.i(this.a);
	}

	/**
	 * @returns {void} */
	d() {
		this.n.forEach(dom_detach);
	}
}

/**
 * @extends HtmlTag */
class HtmlTagHydration extends (/* unused pure expression or super */ null && (HtmlTag)) {
	// hydration claimed nodes
	/** */
	l = undefined;
	constructor(claimed_nodes, is_svg = false) {
		super(is_svg);
		this.e = this.n = null;
		this.l = claimed_nodes;
	}

	/**
	 * @param {string} html
	 * @returns {void}
	 */
	c(html) {
		if (this.l) {
			this.n = this.l;
		} else {
			super.c(html);
		}
	}

	/**
	 * @returns {void} */
	i(anchor) {
		for (let i = 0; i < this.n.length; i += 1) {
			dom_insert_hydration(this.t, this.n[i], anchor);
		}
	}
}

/**
 * @param {NamedNodeMap} attributes
 * @returns {{}}
 */
function attribute_to_object(attributes) {
	const result = {};
	for (const attribute of attributes) {
		result[attribute.name] = attribute.value;
	}
	return result;
}

/**
 * @param {HTMLElement} element
 * @returns {{}}
 */
function get_custom_elements_slots(element) {
	const result = {};
	element.childNodes.forEach(
		/** @param {Element} node */ (node) => {
			result[node.slot || 'default'] = true;
		}
	);
	return result;
}

function construct_svelte_component(component, props) {
	return new component(props);
}

/**
 * @typedef {Node & {
 * 	claim_order?: number;
 * 	hydrate_init?: true;
 * 	actual_end_child?: NodeEx;
 * 	childNodes: NodeListOf<NodeEx>;
 * }} NodeEx
 */

/** @typedef {ChildNode & NodeEx} ChildNodeEx */

/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */

/**
 * @typedef {ChildNodeEx[] & {
 * 	claim_info?: {
 * 		last_index: number;
 * 		total_claimed: number;
 * 	};
 * }} ChildNodeArray
 */

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/style_manager.js



// we need to store the information for multiple documents because a Svelte application could also contain iframes
// https://github.com/sveltejs/svelte/issues/3624
/** @type {Map<Document | ShadowRoot, import('./private.d.ts').StyleInformation>} */
const managed_styles = new Map();

let active = 0;

// https://github.com/darkskyapp/string-hash/blob/master/index.js
/**
 * @param {string} str
 * @returns {number}
 */
function hash(str) {
	let hash = 5381;
	let i = str.length;
	while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
	return hash >>> 0;
}

/**
 * @param {Document | ShadowRoot} doc
 * @param {Element & ElementCSSInlineStyle} node
 * @returns {{ stylesheet: any; rules: {}; }}
 */
function create_style_information(doc, node) {
	const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
	managed_styles.set(doc, info);
	return info;
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {number} a
 * @param {number} b
 * @param {number} duration
 * @param {number} delay
 * @param {(t: number) => number} ease
 * @param {(t: number, u: number) => string} fn
 * @param {number} uid
 * @returns {string}
 */
function style_manager_create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
	const step = 16.666 / duration;
	let keyframes = '{\n';
	for (let p = 0; p <= 1; p += step) {
		const t = a + (b - a) * ease(p);
		keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
	}
	const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
	const name = `__svelte_${hash(rule)}_${uid}`;
	const doc = get_root_for_style(node);
	const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
	if (!rules[name]) {
		rules[name] = true;
		stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
	}
	const animation = node.style.animation || '';
	node.style.animation = `${
		animation ? `${animation}, ` : ''
	}${name} ${duration}ms linear ${delay}ms 1 both`;
	active += 1;
	return name;
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {string} [name]
 * @returns {void}
 */
function style_manager_delete_rule(node, name) {
	const previous = (node.style.animation || '').split(', ');
	const next = previous.filter(
		name
			? (anim) => anim.indexOf(name) < 0 // remove specific animation
			: (anim) => anim.indexOf('__svelte') === -1 // remove all Svelte animations
	);
	const deleted = previous.length - next.length;
	if (deleted) {
		node.style.animation = next.join(', ');
		active -= deleted;
		if (!active) clear_rules();
	}
}

/** @returns {void} */
function clear_rules() {
	raf(() => {
		if (active) return;
		managed_styles.forEach((info) => {
			const { ownerNode } = info.stylesheet;
			// there is no ownerNode if it runs on jsdom.
			if (ownerNode) detach(ownerNode);
		});
		managed_styles.clear();
	});
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/animations.js





/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {import('./private.js').PositionRect} from
 * @param {import('./private.js').AnimationFn} fn
 */
function create_animation(node, from, fn, params) {
	if (!from) return noop;
	const to = node.getBoundingClientRect();
	if (
		from.left === to.left &&
		from.right === to.right &&
		from.top === to.top &&
		from.bottom === to.bottom
	)
		return noop;
	const {
		delay = 0,
		duration = 300,
		easing = linear,
		// @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
		start: start_time = now() + delay,
		// @ts-ignore todo:
		end = start_time + duration,
		tick = noop,
		css
	} = fn(node, { from, to }, params);
	let running = true;
	let started = false;
	let name;
	/** @returns {void} */
	function start() {
		if (css) {
			name = create_rule(node, 0, 1, duration, delay, easing, css);
		}
		if (!delay) {
			started = true;
		}
	}
	/** @returns {void} */
	function stop() {
		if (css) delete_rule(node, name);
		running = false;
	}
	loop((now) => {
		if (!started && now >= start_time) {
			started = true;
		}
		if (started && now >= end) {
			tick(1, 0);
			stop();
		}
		if (!running) {
			return false;
		}
		if (started) {
			const p = now - start_time;
			const t = 0 + 1 * easing(p / duration);
			tick(t, 1 - t);
		}
		return true;
	});
	start();
	tick(0, 1);
	return stop;
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @returns {void}
 */
function fix_position(node) {
	const style = getComputedStyle(node);
	if (style.position !== 'absolute' && style.position !== 'fixed') {
		const { width, height } = style;
		const a = node.getBoundingClientRect();
		node.style.position = 'absolute';
		node.style.width = width;
		node.style.height = height;
		add_transform(node, a);
	}
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {import('./private.js').PositionRect} a
 * @returns {void}
 */
function add_transform(node, a) {
	const b = node.getBoundingClientRect();
	if (a.left !== b.left || a.top !== b.top) {
		const style = getComputedStyle(node);
		const transform = style.transform === 'none' ? '' : style.transform;
		node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
	}
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/utils.js
/** @returns {void} */
function utils_noop() {}

const identity = (x) => x;

/**
 * @template T
 * @template S
 * @param {T} tar
 * @param {S} src
 * @returns {T & S}
 */
function utils_assign(tar, src) {
	// @ts-ignore
	for (const k in src) tar[k] = src[k];
	return /** @type {T & S} */ (tar);
}

// Adapted from https://github.com/then/is-promise/blob/master/index.js
// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE
/**
 * @param {any} value
 * @returns {value is PromiseLike<any>}
 */
function utils_is_promise(value) {
	return (
		!!value &&
		(typeof value === 'object' || typeof value === 'function') &&
		typeof (/** @type {any} */ (value).then) === 'function'
	);
}

/** @returns {void} */
function add_location(element, file, line, column, char) {
	element.__svelte_meta = {
		loc: { file, line, column, char }
	};
}

function run(fn) {
	return fn();
}

function utils_blank_object() {
	return Object.create(null);
}

/**
 * @param {Function[]} fns
 * @returns {void}
 */
function utils_run_all(fns) {
	fns.forEach(run);
}

/**
 * @param {any} thing
 * @returns {thing is Function}
 */
function utils_is_function(thing) {
	return typeof thing === 'function';
}

/** @returns {boolean} */
function safe_not_equal(a, b) {
	return a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';
}

let src_url_equal_anchor;

/** @returns {boolean} */
function src_url_equal(element_src, url) {
	if (!src_url_equal_anchor) {
		src_url_equal_anchor = document.createElement('a');
	}
	src_url_equal_anchor.href = url;
	return element_src === src_url_equal_anchor.href;
}

/** @returns {boolean} */
function not_equal(a, b) {
	return a != a ? b == b : a !== b;
}

/** @returns {boolean} */
function is_empty(obj) {
	return Object.keys(obj).length === 0;
}

/** @returns {void} */
function validate_store(store, name) {
	if (store != null && typeof store.subscribe !== 'function') {
		throw new Error(`'${name}' is not a store with a 'subscribe' method`);
	}
}

function utils_subscribe(store, ...callbacks) {
	if (store == null) {
		for (const callback of callbacks) {
			callback(undefined);
		}
		return utils_noop;
	}
	const unsub = store.subscribe(...callbacks);
	return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}

/**
 * Get the current value from a store by subscribing and immediately unsubscribing.
 *
 * https://svelte.dev/docs/svelte-store#get
 * @template T
 * @param {import('../store/public.js').Readable<T>} store
 * @returns {T}
 */
function get_store_value(store) {
	let value;
	utils_subscribe(store, (_) => (value = _))();
	return value;
}

/** @returns {void} */
function component_subscribe(component, store, callback) {
	component.$$.on_destroy.push(utils_subscribe(store, callback));
}

function create_slot(definition, ctx, $$scope, fn) {
	if (definition) {
		const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
		return definition[0](slot_ctx);
	}
}

function get_slot_context(definition, ctx, $$scope, fn) {
	return definition[1] && fn ? utils_assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}

function get_slot_changes(definition, $$scope, dirty, fn) {
	if (definition[2] && fn) {
		const lets = definition[2](fn(dirty));
		if ($$scope.dirty === undefined) {
			return lets;
		}
		if (typeof lets === 'object') {
			const merged = [];
			const len = Math.max($$scope.dirty.length, lets.length);
			for (let i = 0; i < len; i += 1) {
				merged[i] = $$scope.dirty[i] | lets[i];
			}
			return merged;
		}
		return $$scope.dirty | lets;
	}
	return $$scope.dirty;
}

/** @returns {void} */
function update_slot_base(
	slot,
	slot_definition,
	ctx,
	$$scope,
	slot_changes,
	get_slot_context_fn
) {
	if (slot_changes) {
		const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
		slot.p(slot_context, slot_changes);
	}
}

/** @returns {void} */
function update_slot(
	slot,
	slot_definition,
	ctx,
	$$scope,
	dirty,
	get_slot_changes_fn,
	get_slot_context_fn
) {
	const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
	update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);
}

/** @returns {any[] | -1} */
function get_all_dirty_from_scope($$scope) {
	if ($$scope.ctx.length > 32) {
		const dirty = [];
		const length = $$scope.ctx.length / 32;
		for (let i = 0; i < length; i++) {
			dirty[i] = -1;
		}
		return dirty;
	}
	return -1;
}

/** @returns {{}} */
function exclude_internal_props(props) {
	const result = {};
	for (const k in props) if (k[0] !== '$') result[k] = props[k];
	return result;
}

/** @returns {{}} */
function compute_rest_props(props, keys) {
	const rest = {};
	keys = new Set(keys);
	for (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];
	return rest;
}

/** @returns {{}} */
function compute_slots(slots) {
	const result = {};
	for (const key in slots) {
		result[key] = true;
	}
	return result;
}

/** @returns {(this: any, ...args: any[]) => void} */
function once(fn) {
	let ran = false;
	return function (...args) {
		if (ran) return;
		ran = true;
		fn.call(this, ...args);
	};
}

function null_to_empty(value) {
	return value == null ? '' : value;
}

function set_store_value(store, ret, value) {
	store.set(value);
	return ret;
}

const utils_has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

function action_destroyer(action_result) {
	return action_result && utils_is_function(action_result.destroy) ? action_result.destroy : utils_noop;
}

/** @param {number | string} value
 * @returns {[number, string]}
 */
function split_css_unit(value) {
	const split = typeof value === 'string' && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
	return split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];
}

const utils_contenteditable_truthy_values = (/* unused pure expression or super */ null && (['', true, 1, 'true', 'contenteditable']));

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/lifecycle.js


let lifecycle_current_component;

/** @returns {void} */
function lifecycle_set_current_component(component) {
	lifecycle_current_component = component;
}

function lifecycle_get_current_component() {
	if (!lifecycle_current_component) throw new Error('Function called outside component initialization');
	return lifecycle_current_component;
}

/**
 * Schedules a callback to run immediately before the component is updated after any state change.
 *
 * The first time the callback runs will be before the initial `onMount`
 *
 * https://svelte.dev/docs/svelte#beforeupdate
 * @param {() => any} fn
 * @returns {void}
 */
function beforeUpdate(fn) {
	lifecycle_get_current_component().$$.before_update.push(fn);
}

/**
 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
 * it can be called from an external module).
 *
 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
 *
 * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
 *
 * https://svelte.dev/docs/svelte#onmount
 * @template T
 * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn
 * @returns {void}
 */
function onMount(fn) {
	lifecycle_get_current_component().$$.on_mount.push(fn);
}

/**
 * Schedules a callback to run immediately after the component has been updated.
 *
 * The first time the callback runs will be after the initial `onMount`
 *
 * https://svelte.dev/docs/svelte#afterupdate
 * @param {() => any} fn
 * @returns {void}
 */
function afterUpdate(fn) {
	lifecycle_get_current_component().$$.after_update.push(fn);
}

/**
 * Schedules a callback to run immediately before the component is unmounted.
 *
 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
 * only one that runs inside a server-side component.
 *
 * https://svelte.dev/docs/svelte#ondestroy
 * @param {() => any} fn
 * @returns {void}
 */
function onDestroy(fn) {
	lifecycle_get_current_component().$$.on_destroy.push(fn);
}

/**
 * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
 *
 * Component events created with `createEventDispatcher` create a
 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
 * property and can contain any type of data.
 *
 * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:
 * ```ts
 * const dispatch = createEventDispatcher<{
 *  loaded: never; // does not take a detail argument
 *  change: string; // takes a detail argument of type string, which is required
 *  optional: number | null; // takes an optional detail argument of type number
 * }>();
 * ```
 *
 * https://svelte.dev/docs/svelte#createeventdispatcher
 * @template {Record<string, any>} [EventMap=any]
 * @returns {import('./public.js').EventDispatcher<EventMap>}
 */
function createEventDispatcher() {
	const component = lifecycle_get_current_component();
	return (type, detail, { cancelable = false } = {}) => {
		const callbacks = component.$$.callbacks[type];
		if (callbacks) {
			// TODO are there situations where events could be dispatched
			// in a server (non-DOM) environment?
			const event = custom_event(/** @type {string} */ (type), detail, { cancelable });
			callbacks.slice().forEach((fn) => {
				fn.call(component, event);
			});
			return !event.defaultPrevented;
		}
		return true;
	};
}

/**
 * Associates an arbitrary `context` object with the current component and the specified `key`
 * and returns that object. The context is then available to children of the component
 * (including slotted content) with `getContext`.
 *
 * Like lifecycle functions, this must be called during component initialisation.
 *
 * https://svelte.dev/docs/svelte#setcontext
 * @template T
 * @param {any} key
 * @param {T} context
 * @returns {T}
 */
function setContext(key, context) {
	lifecycle_get_current_component().$$.context.set(key, context);
	return context;
}

/**
 * Retrieves the context that belongs to the closest parent component with the specified `key`.
 * Must be called during component initialisation.
 *
 * https://svelte.dev/docs/svelte#getcontext
 * @template T
 * @param {any} key
 * @returns {T}
 */
function getContext(key) {
	return lifecycle_get_current_component().$$.context.get(key);
}

/**
 * Retrieves the whole context map that belongs to the closest parent component.
 * Must be called during component initialisation. Useful, for example, if you
 * programmatically create a component and want to pass the existing context to it.
 *
 * https://svelte.dev/docs/svelte#getallcontexts
 * @template {Map<any, any>} [T=Map<any, any>]
 * @returns {T}
 */
function getAllContexts() {
	return lifecycle_get_current_component().$$.context;
}

/**
 * Checks whether a given `key` has been set in the context of a parent component.
 * Must be called during component initialisation.
 *
 * https://svelte.dev/docs/svelte#hascontext
 * @param {any} key
 * @returns {boolean}
 */
function hasContext(key) {
	return lifecycle_get_current_component().$$.context.has(key);
}

// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
/**
 * @param component
 * @param event
 * @returns {void}
 */
function bubble(component, event) {
	const callbacks = component.$$.callbacks[event.type];
	if (callbacks) {
		// @ts-ignore
		callbacks.slice().forEach((fn) => fn.call(this, event));
	}
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/scheduler.js



const dirty_components = [];
const intros = { enabled: false };
const binding_callbacks = [];

let render_callbacks = [];

const flush_callbacks = [];

const resolved_promise = /* @__PURE__ */ Promise.resolve();

let update_scheduled = false;

/** @returns {void} */
function schedule_update() {
	if (!update_scheduled) {
		update_scheduled = true;
		resolved_promise.then(scheduler_flush);
	}
}

/** @returns {Promise<void>} */
function tick() {
	schedule_update();
	return resolved_promise;
}

/** @returns {void} */
function scheduler_add_render_callback(fn) {
	render_callbacks.push(fn);
}

/** @returns {void} */
function add_flush_callback(fn) {
	flush_callbacks.push(fn);
}

// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();

let flushidx = 0; // Do *not* move this inside the flush() function

/** @returns {void} */
function scheduler_flush() {
	// Do not reenter flush while dirty components are updated, as this can
	// result in an infinite loop. Instead, let the inner flush handle it.
	// Reentrancy is ok afterwards for bindings etc.
	if (flushidx !== 0) {
		return;
	}
	const saved_component = lifecycle_current_component;
	do {
		// first, call beforeUpdate functions
		// and update components
		try {
			while (flushidx < dirty_components.length) {
				const component = dirty_components[flushidx];
				flushidx++;
				lifecycle_set_current_component(component);
				scheduler_update(component.$$);
			}
		} catch (e) {
			// reset dirty state to not end up in a deadlocked state and then rethrow
			dirty_components.length = 0;
			flushidx = 0;
			throw e;
		}
		lifecycle_set_current_component(null);
		dirty_components.length = 0;
		flushidx = 0;
		while (binding_callbacks.length) binding_callbacks.pop()();
		// then, once components are updated, call
		// afterUpdate functions. This may cause
		// subsequent updates...
		for (let i = 0; i < render_callbacks.length; i += 1) {
			const callback = render_callbacks[i];
			if (!seen_callbacks.has(callback)) {
				// ...so guard against infinite loops
				seen_callbacks.add(callback);
				callback();
			}
		}
		render_callbacks.length = 0;
	} while (dirty_components.length);
	while (flush_callbacks.length) {
		flush_callbacks.pop()();
	}
	update_scheduled = false;
	seen_callbacks.clear();
	lifecycle_set_current_component(saved_component);
}

/** @returns {void} */
function scheduler_update($$) {
	if ($$.fragment !== null) {
		$$.update();
		utils_run_all($$.before_update);
		const dirty = $$.dirty;
		$$.dirty = [-1];
		$$.fragment && $$.fragment.p($$.ctx, dirty);
		$$.after_update.forEach(scheduler_add_render_callback);
	}
}

/**
 * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
 * @param {Function[]} fns
 * @returns {void}
 */
function flush_render_callbacks(fns) {
	const filtered = [];
	const targets = [];
	render_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));
	targets.forEach((c) => c());
	render_callbacks = filtered;
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/transitions.js







/**
 * @type {Promise<void> | null}
 */
let promise;

/**
 * @returns {Promise<void>}
 */
function wait() {
	if (!promise) {
		promise = Promise.resolve();
		promise.then(() => {
			promise = null;
		});
	}
	return promise;
}

/**
 * @param {Element} node
 * @param {INTRO | OUTRO | boolean} direction
 * @param {'start' | 'end'} kind
 * @returns {void}
 */
function dispatch(node, direction, kind) {
	node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}

const outroing = new Set();

/**
 * @type {Outro}
 */
let outros;

/**
 * @returns {void} */
function transitions_group_outros() {
	outros = {
		r: 0,
		c: [],
		p: outros // parent group
	};
}

/**
 * @returns {void} */
function transitions_check_outros() {
	if (!outros.r) {
		run_all(outros.c);
	}
	outros = outros.p;
}

/**
 * @param {import('./private.js').Fragment} block
 * @param {0 | 1} [local]
 * @returns {void}
 */
function transitions_transition_in(block, local) {
	if (block && block.i) {
		outroing.delete(block);
		block.i(local);
	}
}

/**
 * @param {import('./private.js').Fragment} block
 * @param {0 | 1} local
 * @param {0 | 1} [detach]
 * @param {() => void} [callback]
 * @returns {void}
 */
function transitions_transition_out(block, local, detach, callback) {
	if (block && block.o) {
		if (outroing.has(block)) return;
		outroing.add(block);
		outros.c.push(() => {
			outroing.delete(block);
			if (callback) {
				if (detach) block.d(1);
				callback();
			}
		});
		block.o(local);
	} else if (callback) {
		callback();
	}
}

/**
 * @type {import('../transition/public.js').TransitionConfig}
 */
const null_transition = { duration: 0 };

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {TransitionFn} fn
 * @param {any} params
 * @returns {{ start(): void; invalidate(): void; end(): void; }}
 */
function create_in_transition(node, fn, params) {
	/**
	 * @type {TransitionOptions} */
	const options = { direction: 'in' };
	let config = fn(node, params, options);
	let running = false;
	let animation_name;
	let task;
	let uid = 0;

	/**
	 * @returns {void} */
	function cleanup() {
		if (animation_name) delete_rule(node, animation_name);
	}

	/**
	 * @returns {void} */
	function go() {
		const {
			delay = 0,
			duration = 300,
			easing = linear,
			tick = noop,
			css
		} = config || null_transition;
		if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
		tick(0, 1);
		const start_time = now() + delay;
		const end_time = start_time + duration;
		if (task) task.abort();
		running = true;
		add_render_callback(() => dispatch(node, true, 'start'));
		task = loop((now) => {
			if (running) {
				if (now >= end_time) {
					tick(1, 0);
					dispatch(node, true, 'end');
					cleanup();
					return (running = false);
				}
				if (now >= start_time) {
					const t = easing((now - start_time) / duration);
					tick(t, 1 - t);
				}
			}
			return running;
		});
	}
	let started = false;
	return {
		start() {
			if (started) return;
			started = true;
			delete_rule(node);
			if (is_function(config)) {
				config = config(options);
				wait().then(go);
			} else {
				go();
			}
		},
		invalidate() {
			started = false;
		},
		end() {
			if (running) {
				cleanup();
				running = false;
			}
		}
	};
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {TransitionFn} fn
 * @param {any} params
 * @returns {{ end(reset: any): void; }}
 */
function create_out_transition(node, fn, params) {
	/** @type {TransitionOptions} */
	const options = { direction: 'out' };
	let config = fn(node, params, options);
	let running = true;
	let animation_name;
	const group = outros;
	group.r += 1;
	/** @type {boolean} */
	let original_inert_value;

	/**
	 * @returns {void} */
	function go() {
		const {
			delay = 0,
			duration = 300,
			easing = linear,
			tick = noop,
			css
		} = config || null_transition;

		if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);

		const start_time = now() + delay;
		const end_time = start_time + duration;
		add_render_callback(() => dispatch(node, false, 'start'));

		if ('inert' in node) {
			original_inert_value = /** @type {HTMLElement} */ (node).inert;
			node.inert = true;
		}

		loop((now) => {
			if (running) {
				if (now >= end_time) {
					tick(0, 1);
					dispatch(node, false, 'end');
					if (!--group.r) {
						// this will result in `end()` being called,
						// so we don't need to clean up here
						run_all(group.c);
					}
					return false;
				}
				if (now >= start_time) {
					const t = easing((now - start_time) / duration);
					tick(1 - t, t);
				}
			}
			return running;
		});
	}

	if (is_function(config)) {
		wait().then(() => {
			// @ts-ignore
			config = config(options);
			go();
		});
	} else {
		go();
	}

	return {
		end(reset) {
			if (reset && 'inert' in node) {
				node.inert = original_inert_value;
			}
			if (reset && config.tick) {
				config.tick(1, 0);
			}
			if (running) {
				if (animation_name) delete_rule(node, animation_name);
				running = false;
			}
		}
	};
}

/**
 * @param {Element & ElementCSSInlineStyle} node
 * @param {TransitionFn} fn
 * @param {any} params
 * @param {boolean} intro
 * @returns {{ run(b: 0 | 1): void; end(): void; }}
 */
function create_bidirectional_transition(node, fn, params, intro) {
	/**
	 * @type {TransitionOptions} */
	const options = { direction: 'both' };
	let config = fn(node, params, options);
	let t = intro ? 0 : 1;

	/**
	 * @type {Program | null} */
	let running_program = null;

	/**
	 * @type {PendingProgram | null} */
	let pending_program = null;
	let animation_name = null;

	/** @type {boolean} */
	let original_inert_value;

	/**
	 * @returns {void} */
	function clear_animation() {
		if (animation_name) delete_rule(node, animation_name);
	}

	/**
	 * @param {PendingProgram} program
	 * @param {number} duration
	 * @returns {Program}
	 */
	function init(program, duration) {
		const d = /** @type {Program['d']} */ (program.b - t);
		duration *= Math.abs(d);
		return {
			a: t,
			b: program.b,
			d,
			duration,
			start: program.start,
			end: program.start + duration,
			group: program.group
		};
	}

	/**
	 * @param {INTRO | OUTRO} b
	 * @returns {void}
	 */
	function go(b) {
		const {
			delay = 0,
			duration = 300,
			easing = linear,
			tick = noop,
			css
		} = config || null_transition;

		/**
		 * @type {PendingProgram} */
		const program = {
			start: now() + delay,
			b
		};

		if (!b) {
			// @ts-ignore todo: improve typings
			program.group = outros;
			outros.r += 1;
		}

		if ('inert' in node) {
			if (b) {
				if (original_inert_value !== undefined) {
					// aborted/reversed outro — restore previous inert value
					node.inert = original_inert_value;
				}
			} else {
				original_inert_value = /** @type {HTMLElement} */ (node).inert;
				node.inert = true;
			}
		}

		if (running_program || pending_program) {
			pending_program = program;
		} else {
			// if this is an intro, and there's a delay, we need to do
			// an initial tick and/or apply CSS animation immediately
			if (css) {
				clear_animation();
				animation_name = create_rule(node, t, b, duration, delay, easing, css);
			}
			if (b) tick(0, 1);
			running_program = init(program, duration);
			add_render_callback(() => dispatch(node, b, 'start'));
			loop((now) => {
				if (pending_program && now > pending_program.start) {
					running_program = init(pending_program, duration);
					pending_program = null;
					dispatch(node, running_program.b, 'start');
					if (css) {
						clear_animation();
						animation_name = create_rule(
							node,
							t,
							running_program.b,
							running_program.duration,
							0,
							easing,
							config.css
						);
					}
				}
				if (running_program) {
					if (now >= running_program.end) {
						tick((t = running_program.b), 1 - t);
						dispatch(node, running_program.b, 'end');
						if (!pending_program) {
							// we're done
							if (running_program.b) {
								// intro — we can tidy up immediately
								clear_animation();
							} else {
								// outro — needs to be coordinated
								if (!--running_program.group.r) run_all(running_program.group.c);
							}
						}
						running_program = null;
					} else if (now >= running_program.start) {
						const p = now - running_program.start;
						t = running_program.a + running_program.d * easing(p / running_program.duration);
						tick(t, 1 - t);
					}
				}
				return !!(running_program || pending_program);
			});
		}
	}
	return {
		run(b) {
			if (is_function(config)) {
				wait().then(() => {
					const opts = { direction: b ? 'in' : 'out' };
					// @ts-ignore
					config = config(opts);
					go(b);
				});
			} else {
				go(b);
			}
		},
		end() {
			clear_animation();
			running_program = pending_program = null;
		}
	};
}

/** @typedef {1} INTRO */
/** @typedef {0} OUTRO */
/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */
/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */

/**
 * @typedef {Object} Outro
 * @property {number} r
 * @property {Function[]} c
 * @property {Object} p
 */

/**
 * @typedef {Object} PendingProgram
 * @property {number} start
 * @property {INTRO|OUTRO} b
 * @property {Outro} [group]
 */

/**
 * @typedef {Object} Program
 * @property {number} a
 * @property {INTRO|OUTRO} b
 * @property {1|-1} d
 * @property {number} duration
 * @property {number} start
 * @property {number} end
 * @property {Outro} [group]
 */

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/await_block.js





/**
 * @template T
 * @param {Promise<T>} promise
 * @param {import('./private.js').PromiseInfo<T>} info
 * @returns {boolean}
 */
function handle_promise(promise, info) {
	const token = (info.token = {});
	/**
	 * @param {import('./private.js').FragmentFactory} type
	 * @param {0 | 1 | 2} index
	 * @param {number} [key]
	 * @param {any} [value]
	 * @returns {void}
	 */
	function update(type, index, key, value) {
		if (info.token !== token) return;
		info.resolved = value;
		let child_ctx = info.ctx;
		if (key !== undefined) {
			child_ctx = child_ctx.slice();
			child_ctx[key] = value;
		}
		const block = type && (info.current = type)(child_ctx);
		let needs_flush = false;
		if (info.block) {
			if (info.blocks) {
				info.blocks.forEach((block, i) => {
					if (i !== index && block) {
						group_outros();
						transition_out(block, 1, 1, () => {
							if (info.blocks[i] === block) {
								info.blocks[i] = null;
							}
						});
						check_outros();
					}
				});
			} else {
				info.block.d(1);
			}
			block.c();
			transition_in(block, 1);
			block.m(info.mount(), info.anchor);
			needs_flush = true;
		}
		info.block = block;
		if (info.blocks) info.blocks[index] = block;
		if (needs_flush) {
			flush();
		}
	}
	if (is_promise(promise)) {
		const current_component = get_current_component();
		promise.then(
			(value) => {
				set_current_component(current_component);
				update(info.then, 1, info.value, value);
				set_current_component(null);
			},
			(error) => {
				set_current_component(current_component);
				update(info.catch, 2, info.error, error);
				set_current_component(null);
				if (!info.hasCatch) {
					throw error;
				}
			}
		);
		// if we previously had a then/catch block, destroy it
		if (info.current !== info.pending) {
			update(info.pending, 0);
			return true;
		}
	} else {
		if (info.current !== info.then) {
			update(info.then, 1, info.value, promise);
			return true;
		}
		info.resolved = /** @type {T} */ (promise);
	}
}

/** @returns {void} */
function update_await_block_branch(info, ctx, dirty) {
	const child_ctx = ctx.slice();
	const { resolved } = info;
	if (info.current === info.then) {
		child_ctx[info.value] = resolved;
	}
	if (info.current === info.catch) {
		child_ctx[info.error] = resolved;
	}
	info.block.p(child_ctx, dirty);
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/each.js



// general each functions:

function each_ensure_array_like(array_like_or_iterator) {
	return array_like_or_iterator?.length !== undefined
		? array_like_or_iterator
		: Array.from(array_like_or_iterator);
}

// keyed each functions:

/** @returns {void} */
function destroy_block(block, lookup) {
	block.d(1);
	lookup.delete(block.key);
}

/** @returns {void} */
function outro_and_destroy_block(block, lookup) {
	transition_out(block, 1, 1, () => {
		lookup.delete(block.key);
	});
}

/** @returns {void} */
function fix_and_destroy_block(block, lookup) {
	block.f();
	destroy_block(block, lookup);
}

/** @returns {void} */
function fix_and_outro_and_destroy_block(block, lookup) {
	block.f();
	outro_and_destroy_block(block, lookup);
}

/** @returns {any[]} */
function update_keyed_each(
	old_blocks,
	dirty,
	get_key,
	dynamic,
	ctx,
	list,
	lookup,
	node,
	destroy,
	create_each_block,
	next,
	get_context
) {
	let o = old_blocks.length;
	let n = list.length;
	let i = o;
	const old_indexes = {};
	while (i--) old_indexes[old_blocks[i].key] = i;
	const new_blocks = [];
	const new_lookup = new Map();
	const deltas = new Map();
	const updates = [];
	i = n;
	while (i--) {
		const child_ctx = get_context(ctx, list, i);
		const key = get_key(child_ctx);
		let block = lookup.get(key);
		if (!block) {
			block = create_each_block(key, child_ctx);
			block.c();
		} else if (dynamic) {
			// defer updates until all the DOM shuffling is done
			updates.push(() => block.p(child_ctx, dirty));
		}
		new_lookup.set(key, (new_blocks[i] = block));
		if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
	}
	const will_move = new Set();
	const did_move = new Set();
	/** @returns {void} */
	function insert(block) {
		transition_in(block, 1);
		block.m(node, next);
		lookup.set(block.key, block);
		next = block.first;
		n--;
	}
	while (o && n) {
		const new_block = new_blocks[n - 1];
		const old_block = old_blocks[o - 1];
		const new_key = new_block.key;
		const old_key = old_block.key;
		if (new_block === old_block) {
			// do nothing
			next = new_block.first;
			o--;
			n--;
		} else if (!new_lookup.has(old_key)) {
			// remove old block
			destroy(old_block, lookup);
			o--;
		} else if (!lookup.has(new_key) || will_move.has(new_key)) {
			insert(new_block);
		} else if (did_move.has(old_key)) {
			o--;
		} else if (deltas.get(new_key) > deltas.get(old_key)) {
			did_move.add(new_key);
			insert(new_block);
		} else {
			will_move.add(old_key);
			o--;
		}
	}
	while (o--) {
		const old_block = old_blocks[o];
		if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
	}
	while (n) insert(new_blocks[n - 1]);
	run_all(updates);
	return new_blocks;
}

/** @returns {void} */
function validate_each_keys(ctx, list, get_context, get_key) {
	const keys = new Map();
	for (let i = 0; i < list.length; i++) {
		const key = get_key(get_context(ctx, list, i));
		if (keys.has(key)) {
			let value = '';
			try {
				value = `with value '${String(key)}' `;
			} catch (e) {
				// can't stringify
			}
			throw new Error(
				`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(
					key
				)} and ${i} ${value}are duplicates`
			);
		}
		keys.set(key, i);
	}
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/shared/boolean_attributes.js
const _boolean_attributes = /** @type {const} */ ([
	'allowfullscreen',
	'allowpaymentrequest',
	'async',
	'autofocus',
	'autoplay',
	'checked',
	'controls',
	'default',
	'defer',
	'disabled',
	'formnovalidate',
	'hidden',
	'inert',
	'ismap',
	'loop',
	'multiple',
	'muted',
	'nomodule',
	'novalidate',
	'open',
	'playsinline',
	'readonly',
	'required',
	'reversed',
	'selected'
]);

/**
 * List of HTML boolean attributes (e.g. `<input disabled>`).
 * Source: https://html.spec.whatwg.org/multipage/indices.html
 *
 * @type {Set<string>}
 */
const boolean_attributes_boolean_attributes = new Set([..._boolean_attributes]);

/** @typedef {typeof _boolean_attributes[number]} BooleanAttributes */

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/ssr.js






const invalid_attribute_name_character =
	/[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
// https://infra.spec.whatwg.org/#noncharacter

/** @returns {string} */
function spread(args, attrs_to_add) {
	const attributes = Object.assign({}, ...args);
	if (attrs_to_add) {
		const classes_to_add = attrs_to_add.classes;
		const styles_to_add = attrs_to_add.styles;
		if (classes_to_add) {
			if (attributes.class == null) {
				attributes.class = classes_to_add;
			} else {
				attributes.class += ' ' + classes_to_add;
			}
		}
		if (styles_to_add) {
			if (attributes.style == null) {
				attributes.style = style_object_to_string(styles_to_add);
			} else {
				attributes.style = style_object_to_string(
					merge_ssr_styles(attributes.style, styles_to_add)
				);
			}
		}
	}
	let str = '';
	Object.keys(attributes).forEach((name) => {
		if (invalid_attribute_name_character.test(name)) return;
		const value = attributes[name];
		if (value === true) str += ' ' + name;
		else if (boolean_attributes.has(name.toLowerCase())) {
			if (value) str += ' ' + name;
		} else if (value != null) {
			str += ` ${name}="${value}"`;
		}
	});
	return str;
}

/** @returns {{}} */
function merge_ssr_styles(style_attribute, style_directive) {
	const style_object = {};
	for (const individual_style of style_attribute.split(';')) {
		const colon_index = individual_style.indexOf(':');
		const name = individual_style.slice(0, colon_index).trim();
		const value = individual_style.slice(colon_index + 1).trim();
		if (!name) continue;
		style_object[name] = value;
	}
	for (const name in style_directive) {
		const value = style_directive[name];
		if (value) {
			style_object[name] = value;
		} else {
			delete style_object[name];
		}
	}
	return style_object;
}

const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;

/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 * @param {unknown} value
 * @returns {string}
 */
function ssr_escape(value, is_attr = false) {
	const str = String(value);
	const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
	pattern.lastIndex = 0;
	let escaped = '';
	let last = 0;
	while (pattern.test(str)) {
		const i = pattern.lastIndex - 1;
		const ch = str[i];
		escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
		last = i + 1;
	}
	return escaped + str.substring(last);
}

function escape_attribute_value(value) {
	// keep booleans, null, and undefined for the sake of `spread`
	const should_escape = typeof value === 'string' || (value && typeof value === 'object');
	return should_escape ? ssr_escape(value, true) : value;
}

/** @returns {{}} */
function escape_object(obj) {
	const result = {};
	for (const key in obj) {
		result[key] = escape_attribute_value(obj[key]);
	}
	return result;
}

/** @returns {string} */
function each(items, fn) {
	items = ensure_array_like(items);
	let str = '';
	for (let i = 0; i < items.length; i += 1) {
		str += fn(items[i], i);
	}
	return str;
}

const missing_component = {
	$$render: () => ''
};

function validate_component(component, name) {
	if (!component || !component.$$render) {
		if (name === 'svelte:component') name += ' this={...}';
		throw new Error(
			`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`
		);
	}
	return component;
}

/** @returns {string} */
function debug(file, line, column, values) {
	console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console
	console.log(values); // eslint-disable-line no-console
	return '';
}

let on_destroy;

/** @returns {{ render: (props?: {}, { $$slots, context }?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; }; $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any; }} */
function create_ssr_component(fn) {
	function $$render(result, props, bindings, slots, context) {
		const parent_component = current_component;
		const $$ = {
			on_destroy,
			context: new Map(context || (parent_component ? parent_component.$$.context : [])),
			// these will be immediately discarded
			on_mount: [],
			before_update: [],
			after_update: [],
			callbacks: blank_object()
		};
		set_current_component({ $$ });
		const html = fn(result, props, bindings, slots);
		set_current_component(parent_component);
		return html;
	}
	return {
		render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
			on_destroy = [];
			const result = { title: '', head: '', css: new Set() };
			const html = $$render(result, props, {}, $$slots, context);
			run_all(on_destroy);
			return {
				html,
				css: {
					code: Array.from(result.css)
						.map((css) => css.code)
						.join('\n'),
					map: null // TODO
				},
				head: result.title + result.head
			};
		},
		$$render
	};
}

/** @returns {string} */
function add_attribute(name, value, boolean) {
	if (value == null || (boolean && !value)) return '';
	const assignment = boolean && value === true ? '' : `="${ssr_escape(value, true)}"`;
	return ` ${name}${assignment}`;
}

/** @returns {string} */
function add_classes(classes) {
	return classes ? ` class="${classes}"` : '';
}

/** @returns {string} */
function style_object_to_string(style_object) {
	return Object.keys(style_object)
		.filter((key) => style_object[key])
		.map((key) => `${key}: ${escape_attribute_value(style_object[key])};`)
		.join(' ');
}

/** @returns {string} */
function add_styles(style_object) {
	const styles = style_object_to_string(style_object);
	return styles ? ` style="${styles}"` : '';
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/Component.js






/** @returns {void} */
function bind(component, name, callback) {
	const index = component.$$.props[name];
	if (index !== undefined) {
		component.$$.bound[index] = callback;
		callback(component.$$.ctx[index]);
	}
}

/** @returns {void} */
function create_component(block) {
	block && block.c();
}

/** @returns {void} */
function claim_component(block, parent_nodes) {
	block && block.l(parent_nodes);
}

/** @returns {void} */
function mount_component(component, target, anchor) {
	const { fragment, after_update } = component.$$;
	fragment && fragment.m(target, anchor);
	// onMount happens before the initial afterUpdate
	scheduler_add_render_callback(() => {
		const new_on_destroy = component.$$.on_mount.map(run).filter(utils_is_function);
		// if the component was destroyed immediately
		// it will update the `$$.on_destroy` reference to `null`.
		// the destructured on_destroy may still reference to the old array
		if (component.$$.on_destroy) {
			component.$$.on_destroy.push(...new_on_destroy);
		} else {
			// Edge case - component was destroyed immediately,
			// most likely as a result of a binding initialising
			utils_run_all(new_on_destroy);
		}
		component.$$.on_mount = [];
	});
	after_update.forEach(scheduler_add_render_callback);
}

/** @returns {void} */
function destroy_component(component, detaching) {
	const $$ = component.$$;
	if ($$.fragment !== null) {
		flush_render_callbacks($$.after_update);
		utils_run_all($$.on_destroy);
		$$.fragment && $$.fragment.d(detaching);
		// TODO null out other refs, including component.$$ (but need to
		// preserve final state?)
		$$.on_destroy = $$.fragment = null;
		$$.ctx = [];
	}
}

/** @returns {void} */
function make_dirty(component, i) {
	if (component.$$.dirty[0] === -1) {
		dirty_components.push(component);
		schedule_update();
		component.$$.dirty.fill(0);
	}
	component.$$.dirty[(i / 31) | 0] |= 1 << i % 31;
}

/** @returns {void} */
function init(
	component,
	options,
	instance,
	create_fragment,
	not_equal,
	props,
	append_styles,
	dirty = [-1]
) {
	const parent_component = lifecycle_current_component;
	lifecycle_set_current_component(component);
	/** @type {import('./private.js').T$$} */
	const $$ = (component.$$ = {
		fragment: null,
		ctx: [],
		// state
		props,
		update: utils_noop,
		not_equal,
		bound: utils_blank_object(),
		// lifecycle
		on_mount: [],
		on_destroy: [],
		on_disconnect: [],
		before_update: [],
		after_update: [],
		context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
		// everything else
		callbacks: utils_blank_object(),
		dirty,
		skip_bound: false,
		root: options.target || parent_component.$$.root
	});
	append_styles && append_styles($$.root);
	let ready = false;
	$$.ctx = instance
		? instance(component, options.props || {}, (i, ret, ...rest) => {
				const value = rest.length ? rest[0] : ret;
				if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {
					if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
					if (ready) make_dirty(component, i);
				}
				return ret;
		  })
		: [];
	$$.update();
	ready = true;
	utils_run_all($$.before_update);
	// `false` as a special case of no DOM component
	$$.fragment = create_fragment ? create_fragment($$.ctx) : false;
	if (options.target) {
		if (options.hydrate) {
			start_hydrating();
			const nodes = children(options.target);
			// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
			$$.fragment && $$.fragment.l(nodes);
			nodes.forEach(dom_detach);
		} else {
			// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
			$$.fragment && $$.fragment.c();
		}
		if (options.intro) transitions_transition_in(component.$$.fragment);
		mount_component(component, options.target, options.anchor);
		end_hydrating();
		scheduler_flush();
	}
	lifecycle_set_current_component(parent_component);
}

let SvelteElement;

if (typeof HTMLElement === 'function') {
	SvelteElement = class extends HTMLElement {
		$$componentCtor;
		$$slots;
		$$component;
		$$connected = false;
		$$data = {};
		$$reflecting = false;
		/** @type {Record<string, CustomElementPropDefinition>} */
		$$props_definition = {};
		/** @type {Record<string, Function[]>} */
		$$listeners = {};
		/** @type {Map<Function, Function>} */
		$$listener_unsubscribe_fns = new Map();

		constructor($$componentCtor, $$slots, use_shadow_dom) {
			super();
			this.$$componentCtor = $$componentCtor;
			this.$$slots = $$slots;
			if (use_shadow_dom) {
				this.attachShadow({ mode: 'open' });
			}
		}

		addEventListener(type, listener, options) {
			// We can't determine upfront if the event is a custom event or not, so we have to
			// listen to both. If someone uses a custom event with the same name as a regular
			// browser event, this fires twice - we can't avoid that.
			this.$$listeners[type] = this.$$listeners[type] || [];
			this.$$listeners[type].push(listener);
			if (this.$$component) {
				const unsub = this.$$component.$on(type, listener);
				this.$$listener_unsubscribe_fns.set(listener, unsub);
			}
			super.addEventListener(type, listener, options);
		}

		removeEventListener(type, listener, options) {
			super.removeEventListener(type, listener, options);
			if (this.$$component) {
				const unsub = this.$$listener_unsubscribe_fns.get(listener);
				if (unsub) {
					unsub();
					this.$$listener_unsubscribe_fns.delete(listener);
				}
			}
		}

		async connectedCallback() {
			this.$$connected = true;
			if (!this.$$component) {
				// We wait one tick to let possible child slot elements be created/mounted
				await Promise.resolve();
				if (!this.$$connected) {
					return;
				}
				function create_slot(name) {
					return () => {
						let node;
						const obj = {
							c: function create() {
								node = document.createElement('slot');
								if (name !== 'default') {
									node.setAttribute('name', name);
								}
							},
							/**
							 * @param {HTMLElement} target
							 * @param {HTMLElement} [anchor]
							 */
							m: function mount(target, anchor) {
								insert(target, node, anchor);
							},
							d: function destroy(detaching) {
								if (detaching) {
									dom_detach(node);
								}
							}
						};
						return obj;
					};
				}
				const $$slots = {};
				const existing_slots = get_custom_elements_slots(this);
				for (const name of this.$$slots) {
					if (name in existing_slots) {
						$$slots[name] = [create_slot(name)];
					}
				}
				for (const attribute of this.attributes) {
					// this.$$data takes precedence over this.attributes
					const name = this.$$get_prop_name(attribute.name);
					if (!(name in this.$$data)) {
						this.$$data[name] = get_custom_element_value(
							name,
							attribute.value,
							this.$$props_definition,
							'toProp'
						);
					}
				}
				this.$$component = new this.$$componentCtor({
					target: this.shadowRoot || this,
					props: {
						...this.$$data,
						$$slots,
						$$scope: {
							ctx: []
						}
					}
				});
				for (const type in this.$$listeners) {
					for (const listener of this.$$listeners[type]) {
						const unsub = this.$$component.$on(type, listener);
						this.$$listener_unsubscribe_fns.set(listener, unsub);
					}
				}
				this.$$listeners = {};
			}
		}

		// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
		// and setting attributes through setAttribute etc, this is helpful
		attributeChangedCallback(attr, _oldValue, newValue) {
			if (this.$$reflecting) return;
			attr = this.$$get_prop_name(attr);
			this.$$data[attr] = get_custom_element_value(
				attr,
				newValue,
				this.$$props_definition,
				'toProp'
			);
			this.$$component?.$set({ [attr]: this.$$data[attr] });
		}

		disconnectedCallback() {
			this.$$connected = false;
			// In a microtask, because this could be a move within the DOM
			Promise.resolve().then(() => {
				if (!this.$$connected) {
					this.$$component.$destroy();
					this.$$component = undefined;
				}
			});
		}

		$$get_prop_name(attribute_name) {
			return (
				Object.keys(this.$$props_definition).find(
					(key) =>
						this.$$props_definition[key].attribute === attribute_name ||
						(!this.$$props_definition[key].attribute && key.toLowerCase() === attribute_name)
				) || attribute_name
			);
		}
	};
}

/**
 * @param {string} prop
 * @param {any} value
 * @param {Record<string, CustomElementPropDefinition>} props_definition
 * @param {'toAttribute' | 'toProp'} [transform]
 */
function get_custom_element_value(prop, value, props_definition, transform) {
	const type = props_definition[prop]?.type;
	value = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;
	if (!transform || !props_definition[prop]) {
		return value;
	} else if (transform === 'toAttribute') {
		switch (type) {
			case 'Object':
			case 'Array':
				return value == null ? null : JSON.stringify(value);
			case 'Boolean':
				return value ? '' : null;
			case 'Number':
				return value == null ? null : value;
			default:
				return value;
		}
	} else {
		switch (type) {
			case 'Object':
			case 'Array':
				return value && JSON.parse(value);
			case 'Boolean':
				return value; // conversion already handled above
			case 'Number':
				return value != null ? +value : value;
			default:
				return value;
		}
	}
}

/**
 * @internal
 *
 * Turn a Svelte component into a custom element.
 * @param {import('./public.js').ComponentType} Component  A Svelte component constructor
 * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe
 * @param {string[]} slots  The slots to create
 * @param {string[]} accessors  Other accessors besides the ones for props the component has
 * @param {boolean} use_shadow_dom  Whether to use shadow DOM
 */
function create_custom_element(
	Component,
	props_definition,
	slots,
	accessors,
	use_shadow_dom
) {
	const Class = class extends SvelteElement {
		constructor() {
			super(Component, slots, use_shadow_dom);
			this.$$props_definition = props_definition;
		}
		static get observedAttributes() {
			return Object.keys(props_definition).map((key) =>
				(props_definition[key].attribute || key).toLowerCase()
			);
		}
	};
	Object.keys(props_definition).forEach((prop) => {
		Object.defineProperty(Class.prototype, prop, {
			get() {
				return this.$$component && prop in this.$$component
					? this.$$component[prop]
					: this.$$data[prop];
			},
			set(value) {
				value = get_custom_element_value(prop, value, props_definition);
				this.$$data[prop] = value;
				this.$$component?.$set({ [prop]: value });
				if (props_definition[prop].reflect) {
					this.$$reflecting = true;
					const attribute_value = get_custom_element_value(
						prop,
						value,
						props_definition,
						'toAttribute'
					);
					if (attribute_value == null) {
						this.removeAttribute(prop);
					} else {
						this.setAttribute(props_definition[prop].attribute || prop, attribute_value);
					}
					this.$$reflecting = false;
				}
			}
		});
	});
	accessors.forEach((accessor) => {
		Object.defineProperty(Class.prototype, accessor, {
			get() {
				return this.$$component?.[accessor];
			}
		});
	});
	Component.element = /** @type {any} */ (Class);
	return Class;
}

/**
 * Base class for Svelte components. Used when dev=false.
 *
 * @template {Record<string, any>} [Props=any]
 * @template {Record<string, any>} [Events=any]
 */
class SvelteComponent {
	/**
	 * ### PRIVATE API
	 *
	 * Do not use, may change at any time
	 *
	 * @type {any}
	 */
	$$ = undefined;
	/**
	 * ### PRIVATE API
	 *
	 * Do not use, may change at any time
	 *
	 * @type {any}
	 */
	$$set = undefined;

	/** @returns {void} */
	$destroy() {
		destroy_component(this, 1);
		this.$destroy = utils_noop;
	}

	/**
	 * @template {Extract<keyof Events, string>} K
	 * @param {K} type
	 * @param {((e: Events[K]) => void) | null | undefined} callback
	 * @returns {() => void}
	 */
	$on(type, callback) {
		if (!utils_is_function(callback)) {
			return utils_noop;
		}
		const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
		callbacks.push(callback);
		return () => {
			const index = callbacks.indexOf(callback);
			if (index !== -1) callbacks.splice(index, 1);
		};
	}

	/**
	 * @param {Partial<Props>} props
	 * @returns {void}
	 */
	$set(props) {
		if (this.$$set && !is_empty(props)) {
			this.$$.skip_bound = true;
			this.$$set(props);
			this.$$.skip_bound = false;
		}
	}
}

/**
 * @typedef {Object} CustomElementPropDefinition
 * @property {string} [attribute]
 * @property {boolean} [reflect]
 * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]
 */

;// CONCATENATED MODULE: ./node_modules/svelte/src/shared/version.js
// generated during release, do not modify

/**
 * The current version, as set in package.json.
 *
 * https://svelte.dev/docs/svelte-compiler#svelte-version
 * @type {string}
 */
const VERSION = '4.0.0';
const PUBLIC_VERSION = '4';

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/dev.js







/**
 * @template T
 * @param {string} type
 * @param {T} [detail]
 * @returns {void}
 */
function dispatch_dev(type, detail) {
	document.dispatchEvent(dom_custom_event(type, { version: VERSION, ...detail }, { bubbles: true }));
}

/**
 * @param {Node} target
 * @param {Node} node
 * @returns {void}
 */
function append_dev(target, node) {
	dispatch_dev('SvelteDOMInsert', { target, node });
	append(target, node);
}

/**
 * @param {Node} target
 * @param {Node} node
 * @returns {void}
 */
function append_hydration_dev(target, node) {
	dispatch_dev('SvelteDOMInsert', { target, node });
	append_hydration(target, node);
}

/**
 * @param {Node} target
 * @param {Node} node
 * @param {Node} [anchor]
 * @returns {void}
 */
function insert_dev(target, node, anchor) {
	dispatch_dev('SvelteDOMInsert', { target, node, anchor });
	insert(target, node, anchor);
}

/** @param {Node} target
 * @param {Node} node
 * @param {Node} [anchor]
 * @returns {void}
 */
function insert_hydration_dev(target, node, anchor) {
	dispatch_dev('SvelteDOMInsert', { target, node, anchor });
	insert_hydration(target, node, anchor);
}

/**
 * @param {Node} node
 * @returns {void}
 */
function detach_dev(node) {
	dispatch_dev('SvelteDOMRemove', { node });
	dom_detach(node);
}

/**
 * @param {Node} before
 * @param {Node} after
 * @returns {void}
 */
function detach_between_dev(before, after) {
	while (before.nextSibling && before.nextSibling !== after) {
		detach_dev(before.nextSibling);
	}
}

/**
 * @param {Node} after
 * @returns {void}
 */
function detach_before_dev(after) {
	while (after.previousSibling) {
		detach_dev(after.previousSibling);
	}
}

/**
 * @param {Node} before
 * @returns {void}
 */
function detach_after_dev(before) {
	while (before.nextSibling) {
		detach_dev(before.nextSibling);
	}
}

/**
 * @param {Node} node
 * @param {string} event
 * @param {EventListenerOrEventListenerObject} handler
 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
 * @param {boolean} [has_prevent_default]
 * @param {boolean} [has_stop_propagation]
 * @param {boolean} [has_stop_immediate_propagation]
 * @returns {() => void}
 */
function listen_dev(
	node,
	event,
	handler,
	options,
	has_prevent_default,
	has_stop_propagation,
	has_stop_immediate_propagation
) {
	const modifiers =
		options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
	if (has_prevent_default) modifiers.push('preventDefault');
	if (has_stop_propagation) modifiers.push('stopPropagation');
	if (has_stop_immediate_propagation) modifiers.push('stopImmediatePropagation');
	dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
	const dispose = listen(node, event, handler, options);
	return () => {
		dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
		dispose();
	};
}

/**
 * @param {Element} node
 * @param {string} attribute
 * @param {string} [value]
 * @returns {void}
 */
function attr_dev(node, attribute, value) {
	attr(node, attribute, value);
	if (value == null) dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
	else dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}

/**
 * @param {Element} node
 * @param {string} property
 * @param {any} [value]
 * @returns {void}
 */
function prop_dev(node, property, value) {
	node[property] = value;
	dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}

/**
 * @param {HTMLElement} node
 * @param {string} property
 * @param {any} [value]
 * @returns {void}
 */
function dataset_dev(node, property, value) {
	node.dataset[property] = value;
	dispatch_dev('SvelteDOMSetDataset', { node, property, value });
}

/**
 * @param {Text} text
 * @param {unknown} data
 * @returns {void}
 */
function set_data_dev(text, data) {
	data = '' + data;
	if (text.data === data) return;
	dispatch_dev('SvelteDOMSetData', { node: text, data });
	text.data = /** @type {string} */ (data);
}

/**
 * @param {Text} text
 * @param {unknown} data
 * @returns {void}
 */
function set_data_contenteditable_dev(text, data) {
	data = '' + data;
	if (text.wholeText === data) return;
	dispatch_dev('SvelteDOMSetData', { node: text, data });
	text.data = /** @type {string} */ (data);
}

/**
 * @param {Text} text
 * @param {unknown} data
 * @param {string} attr_value
 * @returns {void}
 */
function set_data_maybe_contenteditable_dev(text, data, attr_value) {
	if (~contenteditable_truthy_values.indexOf(attr_value)) {
		set_data_contenteditable_dev(text, data);
	} else {
		set_data_dev(text, data);
	}
}

function ensure_array_like_dev(arg) {
	if (
		typeof arg !== 'string' &&
		!(arg && typeof arg === 'object' && 'length' in arg) &&
		!(typeof Symbol === 'function' && arg && Symbol.iterator in arg)
	) {
		throw new Error('{#each} only works with iterable values.');
	}
	return each_ensure_array_like(arg);
}

/**
 * @returns {void} */
function validate_slots(name, slot, keys) {
	for (const slot_key of Object.keys(slot)) {
		if (!~keys.indexOf(slot_key)) {
			console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
		}
	}
}

/**
 * @param {unknown} tag
 * @returns {void}
 */
function validate_dynamic_element(tag) {
	const is_string = typeof tag === 'string';
	if (tag && !is_string) {
		throw new Error('<svelte:element> expects "this" attribute to be a string.');
	}
}

/**
 * @param {undefined | string} tag
 * @returns {void}
 */
function validate_void_dynamic_element(tag) {
	if (tag && is_void(tag)) {
		console.warn(`<svelte:element this="${tag}"> is self-closing and cannot have content.`);
	}
}

function construct_svelte_component_dev(component, props) {
	const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
	try {
		const instance = new component(props);
		if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
			throw new Error(error_message);
		}
		return instance;
	} catch (err) {
		const { message } = err;
		if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
			throw new Error(error_message);
		} else {
			throw err;
		}
	}
}

/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 *
 * Can be used to create strongly typed Svelte components.
 *
 * #### Example:
 *
 * You have component library on npm called `component-library`, from which
 * you export a component called `MyComponent`. For Svelte+TypeScript users,
 * you want to provide typings. Therefore you create a `index.d.ts`:
 * ```ts
 * import { SvelteComponent } from "svelte";
 * export class MyComponent extends SvelteComponent<{foo: string}> {}
 * ```
 * Typing this makes it possible for IDEs like VS Code with the Svelte extension
 * to provide intellisense and to use the component like this in a Svelte file
 * with TypeScript:
 * ```svelte
 * <script lang="ts">
 * 	import { MyComponent } from "component-library";
 * </script>
 * <MyComponent foo={'bar'} />
 * ```
 * @template {Record<string, any>} [Props=any]
 * @template {Record<string, any>} [Events=any]
 * @template {Record<string, any>} [Slots=any]
 * @extends {SvelteComponent<Props, Events>}
 */
class SvelteComponentDev extends SvelteComponent {
	/**
	 * For type checking capabilities only.
	 * Does not exist at runtime.
	 * ### DO NOT USE!
	 *
	 * @type {Props}
	 */
	$$prop_def;
	/**
	 * For type checking capabilities only.
	 * Does not exist at runtime.
	 * ### DO NOT USE!
	 *
	 * @type {Events}
	 */
	$$events_def;
	/**
	 * For type checking capabilities only.
	 * Does not exist at runtime.
	 * ### DO NOT USE!
	 *
	 * @type {Slots}
	 */
	$$slot_def;

	/** @param {import('./public.js').ComponentConstructorOptions<Props>} options */
	constructor(options) {
		if (!options || (!options.target && !options.$$inline)) {
			throw new Error("'target' is a required option");
		}
		super();
	}

	/** @returns {void} */
	$destroy() {
		super.$destroy();
		this.$destroy = () => {
			console.warn('Component was already destroyed'); // eslint-disable-line no-console
		};
	}

	/** @returns {void} */
	$capture_state() {}

	/** @returns {void} */
	$inject_state() {}
}
/**
 * @template {Record<string, any>} [Props=any]
 * @template {Record<string, any>} [Events=any]
 * @template {Record<string, any>} [Slots=any]
 * @deprecated Use `SvelteComponent` instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
 * @extends {SvelteComponentDev<Props, Events, Slots>}
 */
class SvelteComponentTyped extends (/* unused pure expression or super */ null && (SvelteComponentDev)) {}

/** @returns {() => void} */
function loop_guard(timeout) {
	const start = Date.now();
	return () => {
		if (Date.now() - start > timeout) {
			throw new Error('Infinite loop detected');
		}
	};
}

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/index.js
















;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/internal/disclose-version/index.js


if (typeof window !== 'undefined')
	// @ts-ignore
	(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);

;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/index.js


;// CONCATENATED MODULE: ./node_modules/svelte/src/runtime/store/index.js


const subscriber_queue = [];

/**
 * Creates a `Readable` store that allows reading by subscription.
 *
 * https://svelte.dev/docs/svelte-store#readable
 * @template T
 * @param {T} [value] initial value
 * @param {import('./public.js').StartStopNotifier<T>} [start]
 * @returns {import('./public.js').Readable<T>}
 */
function readable(value, start) {
	return {
		subscribe: writable(value, start).subscribe
	};
}

/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 *
 * https://svelte.dev/docs/svelte-store#writable
 * @template T
 * @param {T} [value] initial value
 * @param {import('./public.js').StartStopNotifier<T>} [start]
 * @returns {import('./public.js').Writable<T>}
 */
function writable(value, start = utils_noop) {
	/** @type {import('./public.js').Unsubscriber} */
	let stop;
	/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */
	const subscribers = new Set();
	/** @param {T} new_value
	 * @returns {void}
	 */
	function set(new_value) {
		if (safe_not_equal(value, new_value)) {
			value = new_value;
			if (stop) {
				// store is ready
				const run_queue = !subscriber_queue.length;
				for (const subscriber of subscribers) {
					subscriber[1]();
					subscriber_queue.push(subscriber, value);
				}
				if (run_queue) {
					for (let i = 0; i < subscriber_queue.length; i += 2) {
						subscriber_queue[i][0](subscriber_queue[i + 1]);
					}
					subscriber_queue.length = 0;
				}
			}
		}
	}

	/**
	 * @param {import('./public.js').Updater<T>} fn
	 * @returns {void}
	 */
	function update(fn) {
		set(fn(value));
	}

	/**
	 * @param {import('./public.js').Subscriber<T>} run
	 * @param {import('./private.js').Invalidator<T>} [invalidate]
	 * @returns {import('./public.js').Unsubscriber}
	 */
	function subscribe(run, invalidate = utils_noop) {
		/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */
		const subscriber = [run, invalidate];
		subscribers.add(subscriber);
		if (subscribers.size === 1) {
			stop = start(set, update) || utils_noop;
		}
		run(value);
		return () => {
			subscribers.delete(subscriber);
			if (subscribers.size === 0 && stop) {
				stop();
				stop = null;
			}
		};
	}
	return { set, update, subscribe };
}

/**
 * Derived value store by synchronizing one or more readable stores and
 * applying an aggregation function over its input values.
 *
 * https://svelte.dev/docs/svelte-store#derived
 * @template {import('./private.js').Stores} S
 * @template T
 * @overload
 * @param {S} stores - input stores
 * @param {(values: import('./private.js').StoresValues<S>, set: (value: T) => void, update: (fn: import('./public.js').Updater<T>) => void) => import('./public.js').Unsubscriber | void} fn - function callback that aggregates the values
 * @param {T} [initial_value] - initial value
 * @returns {import('./public.js').Readable<T>}
 */

/**
 * Derived value store by synchronizing one or more readable stores and
 * applying an aggregation function over its input values.
 *
 * https://svelte.dev/docs/svelte-store#derived
 * @template {import('./private.js').Stores} S
 * @template T
 * @overload
 * @param {S} stores - input stores
 * @param {(values: import('./private.js').StoresValues<S>) => T} fn - function callback that aggregates the values
 * @param {T} [initial_value] - initial value
 * @returns {import('./public.js').Readable<T>}
 */

/**
 * @template {import('./private.js').Stores} S
 * @template T
 * @param {S} stores
 * @param {Function} fn
 * @param {T} [initial_value]
 * @returns {import('./public.js').Readable<T>}
 */
function derived(stores, fn, initial_value) {
	const single = !Array.isArray(stores);
	/** @type {Array<import('./public.js').Readable<any>>} */
	const stores_array = single ? [stores] : stores;
	if (!stores_array.every(Boolean)) {
		throw new Error('derived() expects stores as input, got a falsy value');
	}
	const auto = fn.length < 2;
	return readable(initial_value, (set, update) => {
		let started = false;
		const values = [];
		let pending = 0;
		let cleanup = noop;
		const sync = () => {
			if (pending) {
				return;
			}
			cleanup();
			const result = fn(single ? values[0] : values, set, update);
			if (auto) {
				set(result);
			} else {
				cleanup = is_function(result) ? result : noop;
			}
		};
		const unsubscribers = stores_array.map((store, i) =>
			subscribe(
				store,
				(value) => {
					values[i] = value;
					pending &= ~(1 << i);
					if (started) {
						sync();
					}
				},
				() => {
					pending |= 1 << i;
				}
			)
		);
		started = true;
		sync();
		return function stop() {
			run_all(unsubscribers);
			cleanup();
			// We need to set this to false because callbacks can still happen despite having unsubscribed:
			// Callbacks might already be placed in the queue which doesn't know it should no longer
			// invoke this derived store.
			started = false;
		};
	});
}

/**
 * Takes a store and returns a new one derived from the old one that is readable.
 *
 * https://svelte.dev/docs/svelte-store#readonly
 * @template T
 * @param {import('./public.js').Readable<T>} store  - store to make readonly
 * @returns {import('./public.js').Readable<T>}
 */
function readonly(store) {
	return {
		subscribe: store.subscribe.bind(store)
	};
}



;// CONCATENATED MODULE: ./src/store.ts

let floating_modal_message = writable(undefined);

;// CONCATENATED MODULE: ./node_modules/@0b5vr/experimental/dist/0b5vr-experimental.esm.js
/*!
* @0b5vr/experimental v0.9.5
* Experimental edition of 0b5vr
*
* Copyright (c) 2019-2023 0b5vr
* @0b5vr/experimental is distributed under MIT License
* https://github.com/0b5vr/experimental-npm/blob/release/LICENSE
*/
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/algorithm/binarySearch.ts
function binarySearch(array, elementOrCompare) {
  if (typeof elementOrCompare !== "function") {
    return binarySearch(array, (element) => element < elementOrCompare);
  }
  const compare = elementOrCompare;
  let start = 0;
  let end = array.length;
  while (start < end) {
    const center = start + end >> 1;
    const centerElement = array[center];
    const compareResult = compare(centerElement);
    if (compareResult) {
      start = center + 1;
    } else {
      end = center;
    }
  }
  return start;
}

// src/algorithm/traverse.ts
function traverse(root, traverser) {
  const nodesNeedProcess = [root];
  const nodesSeen = new Set(nodesNeedProcess);
  while (nodesNeedProcess.length > 0) {
    const currentNode = nodesNeedProcess.shift();
    const children = traverser(currentNode);
    if (!children) {
      break;
    }
    const nodesFound = children.filter((node) => !nodesSeen.has(node));
    nodesNeedProcess.unshift(...nodesFound);
    nodesFound.map((node) => nodesSeen.add(node));
  }
}

// src/array/arrayRange.ts
function arrayRange(start, end, step) {
  let current = start;
  const ret = [];
  if (start < end) {
    step = step != null ? step : 1;
    while (current < end) {
      ret.push(current);
      current += step;
    }
  } else {
    step = step != null ? step : -1;
    while (current > end) {
      ret.push(current);
      current += step;
    }
  }
  return ret;
}

// src/array/arraySerial.ts
var arraySerial = (count) => [...Array(count)].map((_, i) => i);

// src/array/arraySet.ts
function arraySetDelete(array, value) {
  const index = array.indexOf(value);
  if (index === -1) {
    return false;
  }
  array.splice(index, 1);
  return true;
}
function arraySetHas(array, value) {
  return array.indexOf(value) !== -1;
}
function arraySetAdd(array, value) {
  const index = array.indexOf(value);
  if (index !== -1) {
    return false;
  }
  array.push(value);
  return true;
}
function arraySetUnion(a, b) {
  const out = [...a];
  b.forEach((v) => {
    if (!arraySetHas(out, v)) {
      out.push(v);
    }
  });
  return out;
}
function arraySetDiff(from, diff) {
  const out = [...from];
  diff.forEach((v) => {
    arraySetDelete(out, v);
  });
  return out;
}

// src/array/constants.ts
var TRIANGLE_STRIP_QUAD = (/* unused pure expression or super */ null && ([-1, -1, 1, -1, -1, 1, 1, 1]));
var TRIANGLE_STRIP_QUAD_3D = (/* unused pure expression or super */ null && ([-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0]));
var TRIANGLE_STRIP_QUAD_NORMAL = (/* unused pure expression or super */ null && ([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]));
var TRIANGLE_STRIP_QUAD_UV = (/* unused pure expression or super */ null && ([0, 0, 1, 0, 0, 1, 1, 1]));

// src/array/utils.ts
function shuffleArray(array, dice) {
  const f = dice ? dice : () => Math.random();
  for (let i = 0; i < array.length - 1; i++) {
    const ir = i + Math.floor(f() * (array.length - i));
    const temp = array[ir];
    array[ir] = array[i];
    array[i] = temp;
  }
  return array;
}
function triIndexToLineIndex(array) {
  const ret = [];
  for (let i = 0; i < array.length / 3; i++) {
    const head = i * 3;
    ret.push(array[head], array[head + 1], array[head + 1], array[head + 2], array[head + 2], array[head]);
  }
  return ret;
}
function matrix2d(w, h) {
  const arr = [];
  for (let iy = 0; iy < h; iy++) {
    for (let ix = 0; ix < w; ix++) {
      arr.push(ix, iy);
    }
  }
  return arr;
}
function matrix3d(w, h, d) {
  const arr = [];
  for (let iz = 0; iz < d; iz++) {
    for (let iy = 0; iy < h; iy++) {
      for (let ix = 0; ix < w; ix++) {
        arr.push(ix, iy, iz);
      }
    }
  }
  return arr;
}

// src/CDS/CDS.ts
var CDS = class {
  constructor() {
    this.factor = 100;
    this.ratio = 1;
    this.velocity = 0;
    this.value = 0;
    this.target = 0;
  }
  update(deltaTime) {
    this.velocity += (-this.factor * (this.value - this.target) - 2 * this.velocity * Math.sqrt(this.factor) * this.ratio) * deltaTime;
    this.value += this.velocity * deltaTime;
    return this.value;
  }
};

// src/Clock/Clock.ts
var Clock = class {
  constructor() {
    this.__time = 0;
    this.__deltaTime = 0;
    this.__isPlaying = false;
  }
  get time() {
    return this.__time;
  }
  get deltaTime() {
    return this.__deltaTime;
  }
  get isPlaying() {
    return this.__isPlaying;
  }
  update(time) {
    const prevTime = this.__time;
    this.__time = time || 0;
    this.__deltaTime = this.__time - prevTime;
  }
  play() {
    this.__isPlaying = true;
  }
  pause() {
    this.__isPlaying = false;
  }
  setTime(time) {
    this.__time = time;
  }
};

// src/Clock/ClockFrame.ts
var ClockFrame = class extends (/* unused pure expression or super */ null && (Clock)) {
  constructor(fps = 60) {
    super();
    this.__frame = 0;
    this.__fps = fps;
  }
  get frame() {
    return this.__frame;
  }
  get fps() {
    return this.__fps;
  }
  update() {
    if (this.__isPlaying) {
      this.__time = this.__frame / this.__fps;
      this.__deltaTime = 1 / this.__fps;
      this.__frame++;
    } else {
      this.__deltaTime = 0;
    }
  }
  setTime(time) {
    this.__frame = Math.floor(this.__fps * time);
    this.__time = this.__frame / this.__fps;
  }
};

// src/Clock/ClockRealtime.ts
var ClockRealtime = class extends (/* unused pure expression or super */ null && (Clock)) {
  constructor() {
    super(...arguments);
    this.__rtTime = 0;
    this.__rtDate = performance.now();
  }
  get isRealtime() {
    return true;
  }
  update() {
    const now = performance.now();
    if (this.__isPlaying) {
      const prevTime = this.__time;
      const deltaDate = now - this.__rtDate;
      this.__time = this.__rtTime + deltaDate / 1e3;
      this.__deltaTime = this.time - prevTime;
    } else {
      this.__rtTime = this.time;
      this.__rtDate = now;
      this.__deltaTime = 0;
    }
  }
  setTime(time) {
    this.__time = time;
    this.__rtTime = this.time;
    this.__rtDate = performance.now();
  }
};

// src/color/colorFromAtariST.ts
function colorFromAtariST(stColor) {
  return [
    (stColor >> 8 & 7) / 7,
    (stColor >> 4 & 7) / 7,
    (stColor & 7) / 7
  ];
}

// src/math/utils.ts
function lerp(a, b, x) {
  return a + (b - a) * x;
}
function clamp(x, l, h) {
  return Math.min(Math.max(x, l), h);
}
function saturate(x) {
  return clamp(x, 0, 1);
}
function range(x, x0, x1, y0, y1) {
  return (x - x0) * (y1 - y0) / (x1 - x0) + y0;
}
function linearstep(a, b, x) {
  return saturate((x - a) / (b - a));
}
function smoothstep(a, b, x) {
  const t = linearstep(a, b, x);
  return t * t * (3 - 2 * t);
}
function smootherstep(a, b, x) {
  const t = linearstep(a, b, x);
  return t * t * t * (t * (t * 6 - 15) + 10);
}
function smootheststep(a, b, x) {
  const t = linearstep(a, b, x);
  return t * t * t * t * (t * (t * (-20 * t + 70) - 84) + 35);
}

// src/color/colorHSV2RGB.ts
function colorHSV2RGB([h, s, v]) {
  const ht = h % 1 * 6;
  return [0, 4, 2].map((p) => {
    const colH = Math.min(Math.max(Math.abs((ht + p) % 6 - 3) - 1, 0), 1);
    const colS = lerp(1, colH, s);
    return v * colS;
  });
}

// src/color/colorToHex.ts
function colorToHex(color) {
  return "#" + color.map((v) => ("0" + Math.round(saturate(v) * 255).toString(16)).slice(-2)).join("");
}

// src/math/vec/vecDot.ts
function vecDot(vecA, vecB) {
  return vecA.reduce((sum, v, i) => sum + v * vecB[i], 0);
}

// src/color/colorTurbo.ts
function colorTurbo(x) {
  const kr = [
    0.13572138,
    4.6153926,
    -42.66032258,
    132.13108234,
    -152.94239396,
    59.28637943
  ];
  const kg = [
    0.09140261,
    2.19418839,
    4.84296658,
    -14.18503333,
    4.27729857,
    2.82956604
  ];
  const kb = [
    0.1066733,
    12.64194608,
    -60.58204836,
    110.36276771,
    -89.90310912,
    27.34824973
  ];
  const xt = saturate(x);
  const xv = [
    1,
    xt,
    xt * xt,
    xt * xt * xt,
    xt * xt * xt * xt,
    xt * xt * xt * xt * xt
  ];
  const col = [
    saturate(vecDot(kr, xv)),
    saturate(vecDot(kg, xv)),
    saturate(vecDot(kb, xv))
  ];
  return col;
}

// src/color/eotfRec709.ts
function eotfRec709(value) {
  return value.map((v) => v < 0.081 ? v / 4.5 : Math.pow((v + 0.099) / 1.099, 1 / 0.45));
}

// src/color/oetfRec709.ts
function oetfRec709(luminance) {
  return luminance.map((l) => l < 0.018 ? 4.5 * l : 1.099 * Math.pow(l, 0.45) - 0.099);
}

// src/dag/dagEdgesParents.ts
function dagEdgesParents(edges, destination) {
  return edges.filter((edge) => edge[1] === destination).map((edge) => edge[0]);
}

// src/dag/dagEdgesAncestors.ts
function dagEdgesAncestors(edges, destination) {
  const ancestors = /* @__PURE__ */ new Set();
  traverse(destination, (node) => {
    const parents = dagEdgesParents(edges, node);
    parents.map((parent) => ancestors.add(parent));
    return parents;
  });
  return Array.from(ancestors);
}

// src/dag/dagEdgesChildren.ts
function dagEdgesChildren(edges, source) {
  return edges.filter((edge) => edge[0] === source).map((edge) => edge[1]);
}

// src/dag/dagEdgesDescendants.ts
function dagEdgesDescendants(edges, source) {
  const descendants = /* @__PURE__ */ new Set();
  traverse(source, (node) => {
    const children = dagEdgesChildren(edges, node);
    children.map((child) => descendants.add(child));
    return children;
  });
  return Array.from(descendants);
}

// src/dag/dagEdgesParent.ts
function dagEdgesParent(edges, destination) {
  var _a, _b;
  return (_b = (_a = edges.find((edge) => edge[1] === destination)) == null ? void 0 : _a[0]) != null ? _b : null;
}

// src/dag/dagEdgesResolve.ts
function dagEdgesResolve(edges, nodes) {
  const order = [];
  const nodeSet = new Set(nodes);
  let tempEdges = edges.concat();
  while (tempEdges.length > 0) {
    nodeSet.forEach((node) => {
      const hasParents = dagEdgesParent(tempEdges, node) != null;
      if (!hasParents) {
        nodeSet.delete(node);
        order.push(node);
        tempEdges = tempEdges.filter(([src]) => src !== node);
      }
    });
  }
  return order.concat(Array.from(nodeSet));
}

// src/edt/edt.ts
function edt1d(data, offset, stride, length) {
  let k = 0;
  const v = new Float32Array(length);
  v[0] = 0;
  const z = new Float32Array(length + 1);
  z[0] = -Infinity;
  z[1] = Infinity;
  const f = new Float32Array(length);
  for (let q = 0; q < length; q++) {
    f[q] = data[offset + q * stride];
  }
  for (let q = 1; q < length; q++) {
    let s = 0;
    while (0 <= k) {
      s = (f[q] + q * q - f[v[k]] - v[k] * v[k]) / (2 * q - 2 * v[k]);
      if (s <= z[k]) {
        k--;
      } else {
        break;
      }
    }
    k++;
    v[k] = q;
    z[k] = s;
    z[k + 1] = Infinity;
  }
  k = 0;
  for (let q = 0; q < length; q++) {
    while (z[k + 1] < q) {
      k++;
    }
    const qSubVK = q - v[k];
    data[offset + q * stride] = f[v[k]] + qSubVK * qSubVK;
  }
}
function edt2d(data, width, height) {
  for (let x = 0; x < width; x++) {
    edt1d(data, x, width, height);
  }
  for (let y = 0; y < height; y++) {
    edt1d(data, y * width, 1, width);
  }
}

// src/ExpSmooth/ExpSmooth.ts
var ExpSmooth = class {
  constructor() {
    this.factor = 10;
    this.target = 0;
    this.value = 0;
  }
  update(deltaTime) {
    this.value = lerp(this.target, this.value, Math.exp(-this.factor * deltaTime));
    return this.value;
  }
};

// src/Pool/Pool.ts
var Pool = class {
  constructor(array) {
    this.index = 0;
    this.array = array;
  }
  get current() {
    return this.array[this.index];
  }
  next() {
    this.index = (this.index + 1) % this.array.length;
    return this.current;
  }
};

// src/GPUTimer/GPUTimer.ts
var GPUTimer = class {
  static isSupported(gl) {
    return new Set(gl.getSupportedExtensions()).has("EXT_disjoint_timer_query_webgl2");
  }
  constructor(gl) {
    this.gl = gl;
    const queries = new Array(1024).fill(1).map(() => gl.createQuery());
    this.queries = new Pool(queries);
    this.stack = [];
    this.ext = gl.getExtension("EXT_disjoint_timer_query_webgl2");
    this.__loopTasks = /* @__PURE__ */ new Set();
    const update = () => {
      this.update();
      requestAnimationFrame(update);
    };
    update();
  }
  update() {
    Array.from(this.__loopTasks).forEach((task) => task());
  }
  measure(func) {
    return __async(this, null, function* () {
      const { gl } = this;
      if (this.stack.length !== 0) {
        gl.endQuery(this.ext.TIME_ELAPSED_EXT);
        const promiseFinishingPrev = this.check(this.queries.current);
        this.stack = this.stack.map((promiseAccum2) => __async(this, null, function* () {
          return (yield promiseAccum2) + (yield promiseFinishingPrev);
        }));
      }
      this.stack.push(Promise.resolve(0));
      gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.queries.next());
      func();
      gl.endQuery(this.ext.TIME_ELAPSED_EXT);
      const promiseAccum = this.stack.pop();
      const promiseThis = this.check(this.queries.current);
      if (this.stack.length !== 0) {
        this.stack = this.stack.map((promiseAccum2) => __async(this, null, function* () {
          return (yield promiseAccum2) + (yield promiseThis);
        }));
        gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.queries.next());
      }
      return (yield promiseAccum) + (yield promiseThis);
    });
  }
  check(query) {
    const { gl } = this;
    return new Promise((resolve) => {
      const task = () => {
        const isAvailable = gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
        if (isAvailable) {
          this.__loopTasks.delete(task);
          resolve(gl.getQueryParameter(query, gl.QUERY_RESULT) * 1e-3 * 1e-3);
        }
      };
      this.__loopTasks.add(task);
    });
  }
};

// src/HistoryMeanCalculator/HistoryMeanCalculator.ts
var HistoryMeanCalculator = class {
  constructor(length) {
    this.__recalcForEach = 0;
    this.__countUntilRecalc = 0;
    this.__history = [];
    this.__index = 0;
    this.__count = 0;
    this.__cache = 0;
    this.__length = length;
    this.__recalcForEach = length;
    for (let i = 0; i < length; i++) {
      this.__history[i] = 0;
    }
  }
  get mean() {
    const count = Math.min(this.__count, this.__length);
    return count === 0 ? 0 : this.__cache / count;
  }
  get recalcForEach() {
    return this.__recalcForEach;
  }
  set recalcForEach(value) {
    const delta = value - this.__recalcForEach;
    this.__recalcForEach = value;
    this.__countUntilRecalc = Math.max(0, this.__countUntilRecalc + delta);
  }
  reset() {
    this.__index = 0;
    this.__count = 0;
    this.__cache = 0;
    this.__countUntilRecalc = 0;
    for (let i = 0; i < this.__length; i++) {
      this.__history[i] = 0;
    }
  }
  push(value) {
    const prev = this.__history[this.__index];
    this.__history[this.__index] = value;
    this.__count++;
    this.__index = (this.__index + 1) % this.__length;
    if (this.__countUntilRecalc === 0) {
      this.recalc();
    } else {
      this.__countUntilRecalc--;
      this.__cache -= prev;
      this.__cache += value;
    }
  }
  recalc() {
    this.__countUntilRecalc = this.__recalcForEach;
    const sum = this.__history.slice(0, Math.min(this.__count, this.__length)).reduce((sum2, v) => sum2 + v, 0);
    this.__cache = sum;
  }
};

// src/HistoryMeanCalculator/HistoryPercentileCalculator.ts
var HistoryPercentileCalculator = class {
  constructor(length) {
    this.__history = [];
    this.__sorted = [];
    this.__index = 0;
    this.__length = length;
  }
  get median() {
    return this.percentile(50);
  }
  percentile(percentile) {
    if (this.__history.length === 0) {
      return 0;
    }
    return this.__sorted[Math.round(percentile * 0.01 * (this.__history.length - 1))];
  }
  reset() {
    this.__index = 0;
    this.__history = [];
    this.__sorted = [];
  }
  push(value) {
    const prev = this.__history[this.__index];
    this.__history[this.__index] = value;
    this.__index = (this.__index + 1) % this.__length;
    if (this.__sorted.length === this.__length) {
      const prevIndex = binarySearch(this.__sorted, prev);
      this.__sorted.splice(prevIndex, 1);
    }
    const index = binarySearch(this.__sorted, value);
    this.__sorted.splice(index, 0, value);
  }
};

// src/HistoryMeanCalculator/HistoryMedianCalculator.ts
var HistoryMedianCalculator = class extends (/* unused pure expression or super */ null && (HistoryPercentileCalculator)) {
  constructor(length) {
    super(length);
    console.warn("HistoryMedianCalculator: Deprecated. Use HistoryPercentileCalculator instead");
  }
};

// src/MapOfSet/MapOfSet.ts
var MapOfSet = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  get(key) {
    var _a;
    return (_a = this.map.get(key)) != null ? _a : /* @__PURE__ */ new Set();
  }
  add(key, value) {
    let set = this.map.get(key);
    if (set == null) {
      set = /* @__PURE__ */ new Set();
      this.map.set(key, set);
    }
    set.add(value);
  }
};

// src/math/vec/vecAbs.ts
function vecAbs(vec) {
  return vec.map((v) => Math.abs(v));
}

// src/math/vec/vecAdd.ts
function vecAdd(...vecs) {
  if (vecs.length < 2) {
    return vecs[0];
  }
  const a = vecs.shift();
  const b = vecAdd(...vecs);
  return a.map((v, i) => v + b[i]);
}

// src/math/vec/vecDivide.ts
function vecDivide(vecA, vecB) {
  return vecA.map((v, i) => v / vecB[i]);
}

// src/math/vec/vecLength.ts
function vecLength(vec) {
  return Math.sqrt(vec.reduce((sum, v) => sum + v * v, 0));
}

// src/math/vec/vecLengthSq.ts
function vecLengthSq(vec) {
  return vec.reduce((sum, v) => sum + v * v, 0);
}

// src/math/vec/vecManhattanLength.ts
function vecManhattanLength(vec) {
  return vec.reduce((sum, v) => sum + Math.abs(v), 0);
}

// src/math/vec/vecMultiply.ts
function vecMultiply(...vecs) {
  if (vecs.length < 2) {
    return vecs[0];
  }
  const a = vecs.shift();
  const b = vecMultiply(...vecs);
  return a.map((v, i) => v * b[i]);
}

// src/math/vec/vecNeg.ts
function vecNeg(vec) {
  return vec.map((v) => -v);
}

// src/math/vec/vecScale.ts
function vecScale(vec, scalar) {
  return vec.map((v) => v * scalar);
}

// src/math/vec/vecNormalize.ts
function vecNormalize(vec) {
  const len = vecLength(vec);
  const invLen = len === 0 ? 0 : 1 / len;
  return vecScale(vec, invLen);
}

// src/math/vec/vecSub.ts
function vecSub(vecA, vecB) {
  return vecA.map((v, i) => v - vecB[i]);
}

// src/math/vec/Vector.ts
var Vector = class {
  get length() {
    return vecLength(this.elements);
  }
  get lengthSq() {
    return vecLengthSq(this.elements);
  }
  get manhattanLength() {
    return vecManhattanLength(this.elements);
  }
  get normalized() {
    return this.__new(vecNormalize(this.elements));
  }
  get negated() {
    return this.__new(vecNeg(this.elements));
  }
  get abs() {
    return this.__new(vecAbs(this.elements));
  }
  clone() {
    return this.__new(this.elements.concat());
  }
  add(...vectors) {
    return this.__new(vecAdd(this.elements, ...vectors.map((v) => v.elements)));
  }
  sub(vector) {
    return this.__new(vecSub(this.elements, vector.elements));
  }
  multiply(...vectors) {
    return this.__new(vecMultiply(this.elements, ...vectors.map((v) => v.elements)));
  }
  divide(vector) {
    return this.__new(vecDivide(this.elements, vector.elements));
  }
  scale(scalar) {
    return this.__new(vecScale(this.elements, scalar));
  }
  dot(vector) {
    return vecDot(this.elements, vector.elements);
  }
};

// src/math/vec4/vec4ApplyMatrix4.ts
function vec4ApplyMatrix4(v, m) {
  return [
    m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3],
    m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3],
    m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3],
    m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3]
  ];
}

// src/math/vec3/vec3ApplyMatrix4.ts
function vec3ApplyMatrix4(v, m) {
  const vec4 = vec4ApplyMatrix4([...v, 1], m);
  const xyz = [vec4[0], vec4[1], vec4[2]];
  const w = vec4[3];
  return vecScale(xyz, 1 / w);
}

// src/math/quat/quatInverse.ts
function quatInverse(quat) {
  return [-quat[0], -quat[1], -quat[2], quat[3]];
}

// src/math/quat/quatMultiply.ts
function quatMultiply(...quats) {
  if (quats.length < 2) {
    return quats[0];
  }
  const a = quats.shift();
  const b = quatMultiply(...quats);
  return [
    a[3] * b[0] + a[0] * b[3] + a[1] * b[2] - a[2] * b[1],
    a[3] * b[1] - a[0] * b[2] + a[1] * b[3] + a[2] * b[0],
    a[3] * b[2] + a[0] * b[1] - a[1] * b[0] + a[2] * b[3],
    a[3] * b[3] - a[0] * b[0] - a[1] * b[1] - a[2] * b[2]
  ];
}

// src/math/vec3/vec3ApplyQuaternion.ts
function vec3ApplyQuaternion(vec, quat) {
  const p = [...vec, 0];
  const r = quatInverse(quat);
  const res = quatMultiply(quat, p, r);
  res.pop();
  return res;
}

// src/math/vec3/vec3Cross.ts
function vec3Cross(vecA, vecB) {
  return [
    vecA[1] * vecB[2] - vecA[2] * vecB[1],
    vecA[2] * vecB[0] - vecA[0] * vecB[2],
    vecA[0] * vecB[1] - vecA[1] * vecB[0]
  ];
}

// src/math/vec3/vec3OrthoNormalize.ts
function vec3OrthoNormalize(normal, tangent = [0, 1, 0], binormal) {
  const n = vecNormalize(normal);
  let t = vecNormalize(tangent);
  let dotNT = vecDot(n, t);
  if (dotNT === 1) {
    if (Math.abs(n[1]) > Math.abs(n[2])) {
      t = [0, 0, 1];
    } else {
      t = [0, 1, 0];
    }
    dotNT = vecDot(n, t);
  }
  t = vecNormalize(vecSub(t, vecScale(n, dotNT)));
  let b = vec3Cross(t, n);
  if (binormal && vecDot(b, binormal) < 0) {
    b = vecNeg(b);
  }
  return {
    normal: n,
    tangent: t,
    binormal: b
  };
}

// src/math/vec3/Vector3.ts
var Vector3 = class extends (/* unused pure expression or super */ null && (Vector)) {
  constructor(v = [0, 0, 0]) {
    super();
    this.elements = v;
  }
  get x() {
    return this.elements[0];
  }
  set x(x) {
    this.elements[0] = x;
  }
  get y() {
    return this.elements[1];
  }
  set y(y) {
    this.elements[1] = y;
  }
  get z() {
    return this.elements[2];
  }
  set z(z) {
    this.elements[2] = z;
  }
  toString() {
    return `Vector3( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)} )`;
  }
  cross(vector) {
    return new Vector3(vec3Cross(this.elements, vector.elements));
  }
  applyQuaternion(quaternion) {
    return new Vector3(vec3ApplyQuaternion(this.elements, quaternion.elements));
  }
  applyMatrix4(matrix) {
    return new Vector3(vec3ApplyMatrix4(this.elements, matrix.elements));
  }
  __new(v) {
    return new Vector3(v);
  }
  static get zero() {
    return new Vector3([0, 0, 0]);
  }
  static get px() {
    return new Vector3([1, 0, 0]);
  }
  static get nx() {
    return new Vector3([-1, 0, 0]);
  }
  static get py() {
    return new Vector3([0, 1, 0]);
  }
  static get ny() {
    return new Vector3([0, -1, 0]);
  }
  static get pz() {
    return new Vector3([0, 0, 1]);
  }
  static get nz() {
    return new Vector3([0, 0, -1]);
  }
  static get one() {
    return new Vector3([1, 1, 1]);
  }
  static orthoNormalize(normal, tangent, binormal) {
    const result = vec3OrthoNormalize(normal.elements, tangent.elements, binormal.elements);
    return {
      normal: new Vector3(result.normal),
      tangent: new Vector3(result.tangent),
      binormal: new Vector3(result.binormal)
    };
  }
};

// src/math/box3/box3ContainsPoint.ts
function box3ContainsPoint(box, point) {
  return box[0][0] <= point[0] && box[1][0] >= point[0] && box[0][1] <= point[1] && box[1][1] >= point[1] && box[0][2] <= point[2] && box[1][2] >= point[2];
}

// src/math/box3/Box3.ts
var Box3 = class {
  constructor(min = Vector3.zero, max = Vector3.zero) {
    this.min = min;
    this.max = max;
  }
  get raw() {
    return [this.min.elements, this.max.elements];
  }
  containsPoint(point) {
    return box3ContainsPoint(this.raw, point.elements);
  }
  static fromRaw(box) {
    return new Box3(new Vector3(box[0]), new Vector3(box[1]));
  }
};

// src/math/mat3/mat3FromMat4Transpose.ts
function mat3FromMat4Transpose(source) {
  return [
    source[0],
    source[4],
    source[8],
    source[1],
    source[5],
    source[9],
    source[2],
    source[6],
    source[10]
  ];
}

// src/math/mat3/mat3Inverse.ts
function mat3Inverse(m) {
  const n11 = m[0], n21 = m[1], n31 = m[2], n12 = m[3], n22 = m[4], n32 = m[5], n13 = m[6], n23 = m[7], n33 = m[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
  if (det === 0) {
    return vecScale(m, 0);
  }
  return vecScale([
    t11,
    n31 * n23 - n33 * n21,
    n32 * n21 - n31 * n22,
    t12,
    n33 * n11 - n31 * n13,
    n31 * n12 - n32 * n11,
    t13,
    n21 * n13 - n23 * n11,
    n22 * n11 - n21 * n12
  ], 1 / det);
}

// src/math/mat3/mat3CreateNormalMatrix.ts
function mat3CreateNormalMatrix(m) {
  return mat3Inverse(mat3FromMat4Transpose(m));
}

// src/math/mat3/mat3Determinant.ts
function mat3Determinant(m) {
  const n11 = m[0], n21 = m[1], n31 = m[2], n12 = m[3], n22 = m[4], n32 = m[5], n13 = m[6], n23 = m[7], n33 = m[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13;
  return n11 * t11 + n21 * t12 + n31 * t13;
}

// src/math/mat3/mat3FromMat4.ts
function mat3FromMat4(source) {
  return [
    source[0],
    source[1],
    source[2],
    source[4],
    source[5],
    source[6],
    source[8],
    source[9],
    source[10]
  ];
}

// src/math/mat3/mat3FromQuaternion.ts
function mat3FromQuaternion(quat) {
  const x = quat[0];
  const y = quat[1];
  const z = quat[2];
  const w = quat[3];
  return [
    1 - 2 * y * y - 2 * z * z,
    2 * x * y + 2 * z * w,
    2 * x * z - 2 * y * w,
    2 * x * y - 2 * z * w,
    1 - 2 * x * x - 2 * z * z,
    2 * y * z + 2 * x * w,
    2 * x * z + 2 * y * w,
    2 * y * z - 2 * x * w,
    1 - 2 * x * x - 2 * y * y
  ];
}

// src/math/mat3/mat3Multiply.ts
function mat3Multiply(...mats) {
  if (mats.length < 2) {
    return mats[0];
  }
  const a = mats.shift();
  const b = mat3Multiply(...mats);
  const a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
  return [
    a00 * b00 + a10 * b01 + a20 * b02,
    a01 * b00 + a11 * b01 + a21 * b02,
    a02 * b00 + a12 * b01 + a22 * b02,
    a00 * b10 + a10 * b11 + a20 * b12,
    a01 * b10 + a11 * b11 + a21 * b12,
    a02 * b10 + a12 * b11 + a22 * b12,
    a00 * b20 + a10 * b21 + a20 * b22,
    a01 * b20 + a11 * b21 + a21 * b22,
    a02 * b20 + a12 * b21 + a22 * b22
  ];
}

// src/math/mat3/mat3Transpose.ts
function mat3Transpose(source) {
  return [
    source[0],
    source[3],
    source[6],
    source[1],
    source[4],
    source[7],
    source[2],
    source[5],
    source[8]
  ];
}

// src/math/mat3/Matrix3.ts
var rawIdentityMatrix3 = (/* unused pure expression or super */ null && ([
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1
]));
var Matrix3 = class {
  constructor(v = rawIdentityMatrix3) {
    this.elements = v;
  }
  get transpose() {
    return new Matrix3(mat3Transpose(this.elements));
  }
  get determinant() {
    return mat3Determinant(this.elements);
  }
  get inverse() {
    return new Matrix3(mat3Inverse(this.elements));
  }
  get matrix4() {
    return Matrix4.fromMatrix3(this);
  }
  toString() {
    const m = this.elements.map((v) => v.toFixed(3));
    return `Matrix3( ${m[0]}, ${m[3]}, ${m[6]}; ${m[1]}, ${m[4]}, ${m[7]}; ${m[2]}, ${m[5]}, ${m[8]} )`;
  }
  clone() {
    return new Matrix3(this.elements.concat());
  }
  multiply(...matrices) {
    return Matrix3.multiply(this, ...matrices);
  }
  scaleScalar(scalar) {
    return new Matrix3(vecScale(this.elements, scalar));
  }
  static get identity() {
    return new Matrix3(rawIdentityMatrix3);
  }
  static multiply(...matrices) {
    if (matrices.length === 0) {
      return Matrix3.identity;
    } else {
      return new Matrix3(mat3Multiply(...matrices.map((m) => m.elements)));
    }
  }
  static createNormalMatrix(matrix4) {
    return new Matrix3(mat3CreateNormalMatrix(matrix4.elements));
  }
  static fromMatrix4(matrix4) {
    return new Matrix3(mat3FromMat4(matrix4.elements));
  }
  static fromQuaternion(quaternion) {
    return new Matrix3(mat3FromQuaternion(quaternion.elements));
  }
};

// src/math/mat4/mat4FromQuaternion.ts
function mat4FromQuaternion(quat) {
  const x = quat[0];
  const y = quat[1];
  const z = quat[2];
  const w = quat[3];
  return [
    1 - 2 * y * y - 2 * z * z,
    2 * x * y + 2 * z * w,
    2 * x * z - 2 * y * w,
    0,
    2 * x * y - 2 * z * w,
    1 - 2 * x * x - 2 * z * z,
    2 * y * z + 2 * x * w,
    0,
    2 * x * z + 2 * y * w,
    2 * y * z - 2 * x * w,
    1 - 2 * x * x - 2 * y * y,
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4Compose.ts
function mat4Compose(position, rotation, scale) {
  const matRot = mat4FromQuaternion(rotation);
  const sx = scale[0], sy = scale[1], sz = scale[2];
  return [
    matRot[0] * sx,
    matRot[1] * sx,
    matRot[2] * sx,
    0,
    matRot[4] * sy,
    matRot[5] * sy,
    matRot[6] * sy,
    0,
    matRot[8] * sz,
    matRot[9] * sz,
    matRot[10] * sz,
    0,
    position[0],
    position[1],
    position[2],
    1
  ];
}

// src/math/mat4/mat4Determinant.ts
function mat4Determinant(m) {
  const a00 = m[0], a01 = m[1], a02 = m[2], a03 = m[3], a10 = m[4], a11 = m[5], a12 = m[6], a13 = m[7], a20 = m[8], a21 = m[9], a22 = m[10], a23 = m[11], a30 = m[12], a31 = m[13], a32 = m[14], a33 = m[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

// src/math/quat/quatFromMatrix3.ts
function quatFromMatrix3(m) {
  const m11 = m[0], m12 = m[3], m13 = m[6], m21 = m[1], m22 = m[4], m23 = m[7], m31 = m[2], m32 = m[5], m33 = m[8], trace = m11 + m22 + m33;
  if (trace > 0) {
    const s = 0.5 / Math.sqrt(trace + 1);
    return [
      (m32 - m23) * s,
      (m13 - m31) * s,
      (m21 - m12) * s,
      0.25 / s
    ];
  } else if (m11 > m22 && m11 > m33) {
    const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
    return [
      0.25 * s,
      (m12 + m21) / s,
      (m13 + m31) / s,
      (m32 - m23) / s
    ];
  } else if (m22 > m33) {
    const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
    return [
      (m12 + m21) / s,
      0.25 * s,
      (m23 + m32) / s,
      (m13 - m31) / s
    ];
  } else {
    const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
    return [
      (m13 + m31) / s,
      (m23 + m32) / s,
      0.25 * s,
      (m21 - m12) / s
    ];
  }
}

// src/math/quat/quatFromMatrix4.ts
function quatFromMatrix4(m) {
  return quatFromMatrix3(mat3FromMat4(m));
}

// src/math/mat4/mat4Decompose.ts
function mat4Decompose(m) {
  let sx = vecLength([m[0], m[1], m[2]]);
  const sy = vecLength([m[4], m[5], m[6]]);
  const sz = vecLength([m[8], m[9], m[10]]);
  const det = mat4Determinant(m);
  if (det < 0) {
    sx = -sx;
  }
  const invSx = 1 / sx;
  const invSy = 1 / sy;
  const invSz = 1 / sz;
  const rotationMatrix = m.concat();
  rotationMatrix[0] *= invSx;
  rotationMatrix[1] *= invSx;
  rotationMatrix[2] *= invSx;
  rotationMatrix[4] *= invSy;
  rotationMatrix[5] *= invSy;
  rotationMatrix[6] *= invSy;
  rotationMatrix[8] *= invSz;
  rotationMatrix[9] *= invSz;
  rotationMatrix[10] *= invSz;
  return {
    position: [m[12], m[13], m[14]],
    scale: [sx, sy, sz],
    rotation: quatFromMatrix4(rotationMatrix)
  };
}

// src/math/mat4/mat4FromMat3.ts
function mat4FromMat3(source) {
  return [
    source[0],
    source[1],
    source[2],
    0,
    source[3],
    source[4],
    source[5],
    0,
    source[6],
    source[7],
    source[8],
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4Inverse.ts
function mat4Inverse(m) {
  const a00 = m[0], a01 = m[1], a02 = m[2], a03 = m[3], a10 = m[4], a11 = m[5], a12 = m[6], a13 = m[7], a20 = m[8], a21 = m[9], a22 = m[10], a23 = m[11], a30 = m[12], a31 = m[13], a32 = m[14], a33 = m[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
  const det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (det === 0) {
    return vecScale(m, 0);
  }
  return vecScale([
    a11 * b11 - a12 * b10 + a13 * b09,
    a02 * b10 - a01 * b11 - a03 * b09,
    a31 * b05 - a32 * b04 + a33 * b03,
    a22 * b04 - a21 * b05 - a23 * b03,
    a12 * b08 - a10 * b11 - a13 * b07,
    a00 * b11 - a02 * b08 + a03 * b07,
    a32 * b02 - a30 * b05 - a33 * b01,
    a20 * b05 - a22 * b02 + a23 * b01,
    a10 * b10 - a11 * b08 + a13 * b06,
    a01 * b08 - a00 * b10 - a03 * b06,
    a30 * b04 - a31 * b02 + a33 * b00,
    a21 * b02 - a20 * b04 - a23 * b00,
    a11 * b07 - a10 * b09 - a12 * b06,
    a00 * b09 - a01 * b07 + a02 * b06,
    a31 * b01 - a30 * b03 - a32 * b00,
    a20 * b03 - a21 * b01 + a22 * b00
  ], 1 / det);
}

// src/math/mat4/mat4LookAt.ts
function mat4LookAt(position, target = [0, 0, 0], up = [0, 1, 0], roll = 0) {
  const dir = vecNormalize(vecSub(position, target));
  let sid = vecNormalize(vec3Cross(up, dir));
  if (roll !== 0) {
    sid = vecAdd(vecScale(sid, Math.cos(roll)), vecScale(vec3Cross(dir, sid), Math.sin(roll)));
  }
  const top = vec3Cross(dir, sid);
  return [
    sid[0],
    sid[1],
    sid[2],
    0,
    top[0],
    top[1],
    top[2],
    0,
    dir[0],
    dir[1],
    dir[2],
    0,
    position[0],
    position[1],
    position[2],
    1
  ];
}

// src/math/mat4/mat4LookAtInverse.ts
function mat4LookAtInverse(position, target = [0, 0, 0], up = [0, 1, 0], roll = 0) {
  const dir = vecNormalize(vecSub(position, target));
  let sid = vecNormalize(vec3Cross(up, dir));
  if (roll !== 0) {
    sid = vecAdd(vecScale(sid, Math.cos(roll)), vecScale(vec3Cross(dir, sid), Math.sin(roll)));
  }
  const top = vec3Cross(dir, sid);
  return [
    sid[0],
    top[0],
    dir[0],
    0,
    sid[1],
    top[1],
    dir[1],
    0,
    sid[2],
    top[2],
    dir[2],
    0,
    -vecDot(sid, position),
    -vecDot(top, position),
    -vecDot(dir, position),
    1
  ];
}

// src/math/mat4/mat4Multiply.ts
function mat4Multiply(...mats) {
  if (mats.length < 2) {
    return mats[0];
  }
  const a = mats.shift();
  const b = mat4Multiply(...mats);
  const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = b[0], b01 = b[1], b02 = b[2], b03 = b[3], b10 = b[4], b11 = b[5], b12 = b[6], b13 = b[7], b20 = b[8], b21 = b[9], b22 = b[10], b23 = b[11], b30 = b[12], b31 = b[13], b32 = b[14], b33 = b[15];
  return [
    a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03,
    a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03,
    a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03,
    a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03,
    a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13,
    a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13,
    a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13,
    a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13,
    a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23,
    a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23,
    a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23,
    a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23,
    a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33,
    a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33,
    a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33,
    a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33
  ];
}

// src/math/mat4/mat4Perspective.ts
function mat4Perspective(fov = 45, near = 0.01, far = 100, aspect = 1) {
  const p = 1 / Math.tan(fov * Math.PI / 360);
  const d = far - near;
  return [
    p / aspect,
    0,
    0,
    0,
    0,
    p,
    0,
    0,
    0,
    0,
    -(far + near) / d,
    -1,
    0,
    0,
    -2 * far * near / d,
    0
  ];
}

// src/math/mat4/mat4RotationX.ts
function mat4RotationX(theta) {
  const c = Math.cos(theta);
  const s = Math.sin(theta);
  return [
    1,
    0,
    0,
    0,
    0,
    c,
    -s,
    0,
    0,
    s,
    c,
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4RotationY.ts
function mat4RotationY(theta) {
  const c = Math.cos(theta);
  const s = Math.sin(theta);
  return [
    c,
    0,
    s,
    0,
    0,
    1,
    0,
    0,
    -s,
    0,
    c,
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4RotationZ.ts
function mat4RotationZ(theta) {
  const c = Math.cos(theta);
  const s = Math.sin(theta);
  return [
    c,
    -s,
    0,
    0,
    s,
    c,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4Scale.ts
function mat4Scale(vec) {
  return [
    vec[0],
    0,
    0,
    0,
    0,
    vec[1],
    0,
    0,
    0,
    0,
    vec[2],
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4ScaleScalar.ts
function mat4ScaleScalar(scalar) {
  return [
    scalar,
    0,
    0,
    0,
    0,
    scalar,
    0,
    0,
    0,
    0,
    scalar,
    0,
    0,
    0,
    0,
    1
  ];
}

// src/math/mat4/mat4Translate.ts
function mat4Translate(vec) {
  return [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    vec[0],
    vec[1],
    vec[2],
    1
  ];
}

// src/math/mat4/mat4Transpose.ts
function mat4Transpose(m) {
  return [
    m[0],
    m[4],
    m[8],
    m[12],
    m[1],
    m[5],
    m[9],
    m[13],
    m[2],
    m[6],
    m[10],
    m[14],
    m[3],
    m[7],
    m[11],
    m[15]
  ];
}

// src/math/mat4/Matrix4.ts
var rawIdentityMatrix4 = (/* unused pure expression or super */ null && ([
  1,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  1
]));
var Matrix4 = class {
  constructor(v = rawIdentityMatrix4) {
    this.elements = v;
  }
  get transpose() {
    return new Matrix4(mat4Transpose(this.elements));
  }
  get determinant() {
    return mat4Determinant(this.elements);
  }
  get inverse() {
    return new Matrix4(mat4Inverse(this.elements));
  }
  get matrix3() {
    return Matrix3.fromMatrix4(this);
  }
  get normalMatrix() {
    return Matrix3.createNormalMatrix(this);
  }
  toString() {
    const m = this.elements.map((v) => v.toFixed(3));
    return `Matrix4( ${m[0]}, ${m[4]}, ${m[8]}, ${m[12]}; ${m[1]}, ${m[5]}, ${m[9]}, ${m[13]}; ${m[2]}, ${m[6]}, ${m[10]}, ${m[14]}; ${m[3]}, ${m[7]}, ${m[11]}, ${m[15]} )`;
  }
  clone() {
    return new Matrix4(this.elements.concat());
  }
  multiply(...matrices) {
    return Matrix4.multiply(this, ...matrices);
  }
  scaleScalar(scalar) {
    return new Matrix4(vecScale(this.elements, scalar));
  }
  decompose() {
    const { position, scale, rotation } = mat4Decompose(this.elements);
    return {
      position: new Vector3(position),
      scale: new Vector3(scale),
      rotation: new Quaternion(rotation)
    };
  }
  static get identity() {
    return new Matrix4(rawIdentityMatrix4);
  }
  static multiply(...matrices) {
    if (matrices.length === 0) {
      return Matrix4.identity;
    } else {
      return new Matrix4(mat4Multiply(...matrices.map((m) => m.elements)));
    }
  }
  static fromQuaternion(quaternion) {
    return new Matrix4(mat4FromQuaternion(quaternion.elements));
  }
  static fromMatrix3(matrix3) {
    return new Matrix4(mat4FromMat3(matrix3.elements));
  }
  static translate(vector) {
    return new Matrix4(mat4Translate(vector.elements));
  }
  static scale(vector) {
    return new Matrix4(mat4Scale(vector.elements));
  }
  static scaleScalar(scalar) {
    return new Matrix4(mat4ScaleScalar(scalar));
  }
  static rotationX(theta) {
    return new Matrix4(mat4RotationX(theta));
  }
  static rotationY(theta) {
    return new Matrix4(mat4RotationY(theta));
  }
  static rotationZ(theta) {
    return new Matrix4(mat4RotationZ(theta));
  }
  static lookAt(position, target = new Vector3([0, 0, 0]), up = new Vector3([0, 1, 0]), roll = 0) {
    return new Matrix4(mat4LookAt(position.elements, target.elements, up.elements, roll));
  }
  static lookAtInverse(position, target = new Vector3([0, 0, 0]), up = new Vector3([0, 1, 0]), roll = 0) {
    return new Matrix4(mat4LookAtInverse(position.elements, target.elements, up.elements, roll));
  }
  static perspective(fov = 45, near = 0.01, far = 100) {
    return new Matrix4(mat4Perspective(fov, near, far));
  }
  static compose(position, rotation, scale) {
    return new Matrix4(mat4Compose(position.elements, rotation.elements, scale.elements));
  }
};

// src/math/quat/quatFromAxisAngle.ts
function quatFromAxisAngle(axis, angle) {
  const halfAngle = angle / 2;
  const sinHalfAngle = Math.sin(halfAngle);
  return [
    axis[0] * sinHalfAngle,
    axis[1] * sinHalfAngle,
    axis[2] * sinHalfAngle,
    Math.cos(halfAngle)
  ];
}

// src/math/quat/quatLookRotation.ts
function quatLookRotation(look, up) {
  const { normal, tangent, binormal } = vec3OrthoNormalize(look, up != null ? up : [0, 1, 0]);
  const w = Math.sqrt(1 + binormal[0] + tangent[1] + normal[2]) * 0.5;
  const invW4 = 0.25 / w;
  return [
    (tangent[2] - normal[1]) * invW4,
    (normal[0] - binormal[2]) * invW4,
    (binormal[1] - tangent[0]) * invW4,
    w
  ];
}

// src/math/quat/quatNormalize.ts
function quatNormalize(vec) {
  const len = vecLength(vec);
  if (len === 0) {
    return [0, 0, 0, 1];
  }
  return vecScale(vec, 1 / len);
}

// src/math/quat/quatRotationX.ts
function quatRotationX(theta) {
  return [Math.sin(theta / 2), 0, 0, Math.cos(theta / 2)];
}

// src/math/quat/quatRotationY.ts
function quatRotationY(theta) {
  return [0, Math.sin(theta / 2), 0, Math.cos(theta / 2)];
}

// src/math/quat/quatRotationZ.ts
function quatRotationZ(theta) {
  return [0, 0, Math.sin(theta / 2), Math.cos(theta / 2)];
}

// src/math/quat/quatSlerp.ts
function quatSlerp(a, b, t) {
  if (t === 0) {
    return a.concat();
  }
  if (t === 1) {
    return b.concat();
  }
  let cosHalfTheta = vecDot(a, b);
  if (cosHalfTheta < 0) {
    b = vecNeg(b);
    cosHalfTheta = -cosHalfTheta;
  }
  if (cosHalfTheta >= 1) {
    return a.concat();
  }
  const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
  if (sqrSinHalfTheta <= Number.EPSILON) {
    const s = 1 - t;
    return vecNormalize([
      s * a[0] + t * b[0],
      s * a[1] + t * b[1],
      s * a[2] + t * b[2],
      s * a[3] + t * b[3]
    ]);
  }
  const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
  const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
  const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
  const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
  return [
    a[0] * ratioA + b[0] * ratioB,
    a[1] * ratioA + b[1] * ratioB,
    a[2] * ratioA + b[2] * ratioB,
    a[3] * ratioA + b[3] * ratioB
  ];
}

// src/math/quat/Quaternion.ts
var rawIdentityQuaternion = (/* unused pure expression or super */ null && ([0, 0, 0, 1]));
var Quaternion = class {
  constructor(elements = rawIdentityQuaternion) {
    this.elements = elements;
  }
  get x() {
    return this.elements[0];
  }
  get y() {
    return this.elements[1];
  }
  get z() {
    return this.elements[2];
  }
  get w() {
    return this.elements[3];
  }
  toString() {
    return `Quaternion( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)}, ${this.w.toFixed(3)} )`;
  }
  clone() {
    return new Quaternion(this.elements.concat());
  }
  get matrix4() {
    return new Matrix4(mat4FromQuaternion(this.elements));
  }
  get inversed() {
    return new Quaternion(quatInverse(this.elements));
  }
  get length() {
    return vecLength(this.elements);
  }
  get lengthSq() {
    return vecLengthSq(this.elements);
  }
  get normalized() {
    return new Quaternion(quatNormalize(this.elements));
  }
  multiply(...quaternions) {
    return Quaternion.multiply(this, ...quaternions);
  }
  slerp(b, t) {
    return Quaternion.slerp(this, b, t);
  }
  static get identity() {
    return new Quaternion(rawIdentityQuaternion);
  }
  static multiply(...quaternions) {
    if (quaternions.length === 0) {
      return Quaternion.identity;
    } else {
      return new Quaternion(quatMultiply(...quaternions.map((q) => q.elements)));
    }
  }
  static slerp(a, b, t) {
    return new Quaternion(quatSlerp(a.elements, b.elements, t));
  }
  static rotationX(theta) {
    return new Quaternion(quatRotationX(theta));
  }
  static rotationY(theta) {
    return new Quaternion(quatRotationY(theta));
  }
  static rotationZ(theta) {
    return new Quaternion(quatRotationZ(theta));
  }
  static lookRotation(look, up) {
    return new Quaternion(quatLookRotation(look.elements, up.elements));
  }
  static fromAxisAngle(axis, angle) {
    return new Quaternion(quatFromAxisAngle(axis.elements, angle));
  }
  static fromMatrix4(matrix) {
    return new Quaternion(quatFromMatrix4(matrix.elements));
  }
};

// src/math/mod.ts
function _0b5vr_experimental_esm_mod(value, divisor) {
  return value - Math.floor(value / divisor) * divisor;
}

// src/math/sanitizeAngle.ts
function sanitizeAngle(angle) {
  return _0b5vr_experimental_esm_mod(angle + Math.PI, 2 * Math.PI) - Math.PI;
}

// src/math/euler/eulerFromMat3.ts
function eulerFromMat3(m, order) {
  const [i, j, k, sign] = !order || order === "XYZ" ? [0, 1, 2, 1] : order === "XZY" ? [0, 2, 1, -1] : order === "YXZ" ? [1, 0, 2, -1] : order === "YZX" ? [1, 2, 0, 1] : order === "ZXY" ? [2, 0, 1, 1] : [2, 1, 0, -1];
  const result = [0, 0, 0];
  const c = m[k + i * 3];
  result[j] = -sign * Math.asin(clamp(c, -1, 1));
  if (Math.abs(c) < 0.999999) {
    result[i] = sign * Math.atan2(m[k + j * 3], m[k * 4]);
    result[k] = sign * Math.atan2(m[j + i * 3], m[i * 4]);
  } else {
    result[i] = sign * Math.atan2(-m[j + k * 3], m[j * 4]);
  }
  if (vecManhattanLength(result) > 1.5 * Math.PI) {
    result[i] = sanitizeAngle(result[i] + Math.PI);
    result[j] = sanitizeAngle(Math.PI - result[j]);
    result[k] = sanitizeAngle(result[k] + Math.PI);
  }
  return result;
}

// src/math/euler/eulerFromMat4.ts
function eulerFromMat4(m, order) {
  return eulerFromMat3(mat3FromMat4(m), order);
}

// src/math/euler/eulerFromQuaternion.ts
function eulerFromQuaternion(m, order) {
  return eulerFromMat3(mat3FromQuaternion(m), order);
}

// src/math/quat/quatFromEuler.ts
function quatFromEuler(euler, order) {
  const [i, j, k, sign] = !order || order === "XYZ" ? [0, 1, 2, 1] : order === "XZY" ? [0, 2, 1, -1] : order === "YXZ" ? [1, 0, 2, -1] : order === "YZX" ? [1, 2, 0, 1] : order === "ZXY" ? [2, 0, 1, 1] : [2, 1, 0, -1];
  const ti = 0.5 * euler[i];
  const tj = 0.5 * sign * euler[j];
  const tk = 0.5 * euler[k];
  const ci = Math.cos(ti);
  const cj = Math.cos(tj);
  const ck = Math.cos(tk);
  const si = Math.sin(ti);
  const sj = Math.sin(tj);
  const sk = Math.sin(tk);
  const result = [
    0,
    0,
    0,
    ck * cj * ci + sk * sj * si
  ];
  result[i] = ck * cj * si - sk * sj * ci;
  result[j] = sign * (ck * sj * ci + sk * cj * si);
  result[k] = sk * cj * ci - ck * sj * si;
  return result;
}

// src/math/euler/Euler.ts
var Euler = class {
  constructor(elements = [0, 0, 0], order = "XYZ") {
    this.elements = elements;
    this.order = order;
  }
  get x() {
    return this.elements[0];
  }
  get y() {
    return this.elements[1];
  }
  get z() {
    return this.elements[2];
  }
  toString() {
    return `Euler( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)} (${this.order}) )`;
  }
  clone() {
    return new Euler(this.elements.concat(), this.order);
  }
  get quaternion() {
    return new Quaternion(quatFromEuler(this.elements, this.order));
  }
  get matrix4() {
    return this.quaternion.matrix4;
  }
  static fromMatrix3(matrix, order) {
    return new Euler(eulerFromMat3(matrix.elements, order), order);
  }
  static fromMatrix4(matrix, order) {
    return new Euler(eulerFromMat4(matrix.elements, order), order);
  }
  static fromQuaternion(quaternion, order) {
    return new Euler(eulerFromQuaternion(quaternion.elements, order), order);
  }
};

// src/math/ray3/ray3DistanceToSphere.ts
function ray3DistanceToSphere([ro, rd], sphere) {
  const v = vecSub(ro, sphere[0]);
  const b = vecDot(v, rd);
  const c = vecDot(v, v) - sphere[1];
  const d = b * b - c;
  if (d < 0) {
    return null;
  }
  const sqrtD = Math.sqrt(d);
  return [-b - sqrtD, -b + sqrtD];
}

// src/math/line3/line3Delta.ts
function line3Delta(line) {
  return vecSub(line[1], line[0]);
}

// src/math/ray3/ray3FromLine3.ts
function ray3FromLine3(line) {
  return [
    line[0],
    vecNormalize(line3Delta(line))
  ];
}

// src/math/ray3/Ray3.ts
var Ray3 = class {
  constructor(start = Vector3.zero, end = Vector3.pz) {
    this.origin = start;
    this.direction = end;
  }
  get raw() {
    return [this.origin.elements, this.direction.elements];
  }
  distanceToSphere(sphere) {
    return ray3DistanceToSphere(this.raw, sphere.raw);
  }
  static fromRaw(ray) {
    return new Ray3(new Vector3(ray[0]), new Vector3(ray[1]));
  }
  static fromLine3(line) {
    return Ray3.fromRaw(ray3FromLine3(line.raw));
  }
};

// src/math/line3/line3ApplyMatrix4.ts
function line3ApplyMatrix4([start, end], matrix) {
  return [
    vec3ApplyMatrix4(start, matrix),
    vec3ApplyMatrix4(end, matrix)
  ];
}

// src/math/line3/line3At.ts
function line3At(line, t) {
  return vecAdd(vecScale(line[0], 1 - t), vecScale(line[1], t));
}

// src/math/line3/line3ClosestPointToPoint.ts
function line3ClosestPointToPoint(line, point, segment) {
  const ap = vecSub(point, line[0]);
  const ab = vecSub(line[1], line[0]);
  let t = vecDot(ap, ab) / vecDot(ab, ab);
  segment && (t = saturate(t));
  return line3At(line, t);
}

// src/math/line3/line3DistanceToPoint.ts
function line3DistanceToPoint(line, point, segment) {
  return vecLength(vecSub(line3ClosestPointToPoint(line, point, segment), point));
}

// src/math/line3/Line3.ts
var Line3 = class {
  constructor(start = Vector3.zero, end = Vector3.zero) {
    this.start = start;
    this.end = end;
  }
  get raw() {
    return [this.start.elements, this.end.elements];
  }
  get ray() {
    return Ray3.fromLine3(this);
  }
  delta() {
    return new Vector3(line3Delta(this.raw));
  }
  length() {
    return this.delta.length;
  }
  at(t) {
    return new Vector3(line3At(this.raw, t));
  }
  applyMatrix4(matrix) {
    return Line3.fromRaw(line3ApplyMatrix4(this.raw, matrix.elements));
  }
  closestPointToPoint(point, segment) {
    return new Vector3(line3ClosestPointToPoint(this.raw, point.elements, segment));
  }
  distanceToPoint(point, segment) {
    return line3DistanceToPoint(this.raw, point.elements, segment);
  }
  static fromRaw(line) {
    return new Line3(new Vector3(line[0]), new Vector3(line[1]));
  }
};

// src/math/mat2/mat2Determinant.ts
function mat2Determinant(m) {
  return m[0] * m[3] - m[2] * m[1];
}

// src/math/mat2/mat2Inverse.ts
function mat2Inverse(m) {
  const n11 = m[0], n21 = m[1], n12 = m[2], n22 = m[3], det = n11 * n22 - n12 * n21;
  if (det === 0) {
    return vecScale(m, 0);
  }
  return vecScale([
    n22,
    -n21,
    -n12,
    n11
  ], 1 / det);
}

// src/math/mat2/mat2Multiply.ts
function mat2Multiply(...mats) {
  if (mats.length < 2) {
    return mats[0];
  }
  const a = mats.shift();
  const b = mat2Multiply(...mats);
  const a00 = a[0], a01 = a[1], a10 = a[2], a11 = a[3], b00 = b[0], b01 = b[1], b10 = b[2], b11 = b[3];
  return [
    a00 * b00 + a10 * b01,
    a01 * b00 + a11 * b01,
    a00 * b10 + a10 * b11,
    a01 * b10 + a11 * b11
  ];
}

// src/math/mat2/mat2Transpose.ts
function mat2Transpose(source) {
  return [
    source[0],
    source[2],
    source[1],
    source[3]
  ];
}

// src/math/mat2/Matrix2.ts
var rawIdentityMatrix2 = (/* unused pure expression or super */ null && ([
  1,
  0,
  0,
  1
]));
var Matrix2 = class {
  constructor(v = rawIdentityMatrix2) {
    this.elements = v;
  }
  get transpose() {
    return new Matrix2(mat2Transpose(this.elements));
  }
  get determinant() {
    return mat2Determinant(this.elements);
  }
  get inverse() {
    return new Matrix2(mat2Inverse(this.elements));
  }
  toString() {
    const m = this.elements.map((v) => v.toFixed(3));
    return `Matrix2( ${m[0]}, ${m[2]}; ${m[1]}, ${m[3]} )`;
  }
  clone() {
    return new Matrix2(this.elements.concat());
  }
  multiply(...matrices) {
    return Matrix2.multiply(this, ...matrices);
  }
  scaleScalar(scalar) {
    return new Matrix2(vecScale(this.elements, scalar));
  }
  static get identity() {
    return new Matrix2(rawIdentityMatrix2);
  }
  static multiply(...matrices) {
    if (matrices.length === 0) {
      return Matrix2.identity;
    } else {
      return new Matrix2(mat2Multiply(...matrices.map((m) => m.elements)));
    }
  }
};

// src/math/vec3/vec3ApplyMatrix3.ts
function vec3ApplyMatrix3(v, m) {
  return [
    m[0] * v[0] + m[3] * v[1] + m[6] * v[2],
    m[1] * v[0] + m[4] * v[1] + m[7] * v[2],
    m[2] * v[0] + m[5] * v[1] + m[8] * v[2]
  ];
}

// src/math/plane3/plane3ApplyMatrix4.ts
function plane3ApplyMatrix4([normal, distance], matrix, normalMatrix) {
  const newNormal = vecNormalize(vec3ApplyMatrix3(normal, normalMatrix));
  const coplanar = vecScale(normal, -distance);
  const refPoint = vec3ApplyMatrix4(coplanar, matrix);
  const newDistance = -vecDot(refPoint, normal);
  return [newNormal, newDistance];
}

// src/math/plane3/plane3DistanceToPoint.ts
function plane3DistanceToPoint([normal, distance], point) {
  return vecDot(normal, point) + distance;
}

// src/math/plane3/plane3Normalize.ts
function plane3Normalize([normal, distance]) {
  const invL = 1 / vecLength(normal);
  return [vecScale(normal, invL), distance * invL];
}

// src/math/plane3/Plane3.ts
var Plane3 = class {
  get raw() {
    return [this.normal.elements, this.distance];
  }
  get normalized() {
    return Plane3.fromRaw(plane3Normalize(this.raw));
  }
  constructor(normal = Vector3.pz, distance = 0) {
    this.normal = normal;
    this.distance = distance;
  }
  applyMatrix4(matrix, normalMatrix) {
    var _a;
    return Plane3.fromRaw(plane3ApplyMatrix4(this.raw, matrix.elements, (_a = normalMatrix == null ? void 0 : normalMatrix.elements) != null ? _a : matrix.normalMatrix.elements));
  }
  distanceToPoint(point) {
    return plane3DistanceToPoint(this.raw, point.elements);
  }
  static fromRaw(plane) {
    return new Plane3(new Vector3(plane[0]), plane[1]);
  }
};

// src/math/plane3/planes3ContainPoint.ts
function planes3ContainPoint(planes, point) {
  return planes.every((plane) => plane3DistanceToPoint(plane, point) >= 0);
}

// src/math/plane3/planes3FromBox3.ts
function planes3FromBox3(box) {
  return [
    [[1, 0, 0], -box[0][0]],
    [[-1, 0, 0], box[1][0]],
    [[0, 1, 0], -box[0][1]],
    [[0, -1, 0], box[1][1]],
    [[0, 0, 1], -box[0][2]],
    [[0, 0, -1], box[1][2]]
  ];
}

// src/math/plane3/planes3FromProjectionMatrix.ts
function planes3FromProjectionMatrix(m) {
  const m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
  return [
    plane3Normalize([[m41 - m11, m42 - m12, m43 - m13], m44 - m14]),
    plane3Normalize([[m41 + m11, m42 + m12, m43 + m13], m44 + m14]),
    plane3Normalize([[m41 - m21, m42 - m22, m43 - m23], m44 - m24]),
    plane3Normalize([[m41 + m21, m42 + m22, m43 + m23], m44 + m24]),
    plane3Normalize([[m41 - m31, m42 - m32, m43 - m33], m44 - m34]),
    plane3Normalize([[m41 + m31, m42 + m32, m43 + m33], m44 + m34])
  ];
}

// src/math/plane3/planes3IntersectBox3.ts
function planes3IntersectBox3(planes, box) {
  return planes.every((plane) => {
    const v = plane[0].map((nc, i) => box[nc > 0 ? 1 : 0][i]);
    return plane3DistanceToPoint(plane, v) >= 0;
  });
}

// src/math/plane3/planes3IntersectSphere3.ts
function planes3IntersectSphere3(planes, sphere) {
  return planes.every((plane) => plane3DistanceToPoint(plane, sphere[0]) >= -sphere[1]);
}

// src/math/plane3/Planes3.ts
var Planes3 = class {
  get raw() {
    return this.planes.map((plane) => plane.raw);
  }
  constructor(planes) {
    this.planes = planes;
  }
  containPoint(point) {
    return planes3ContainPoint(this.raw, point.elements);
  }
  intersectBox3(box) {
    return planes3IntersectBox3(this.raw, box.raw);
  }
  intersectSphere3(sphere) {
    return planes3IntersectSphere3(this.raw, sphere.raw);
  }
  static fromRaw(planes) {
    return new Planes3(planes.map((plane) => Plane3.fromRaw(plane)));
  }
  static fromBox3(box) {
    return Planes3.fromRaw(planes3FromBox3(box.raw));
  }
  static fromProjectionMatrix(matrix) {
    return Planes3.fromRaw(planes3FromProjectionMatrix(matrix.elements));
  }
};

// src/math/sphere3/sphere3ContainsPoint.ts
function sphere3ContainsPoint(sphere, point) {
  return vecLengthSq(vecSub(sphere[0], point)) <= sphere[1] * sphere[1];
}

// src/math/sphere3/Sphere3.ts
var Sphere3 = class {
  constructor(origin = Vector3.zero, radius = 0) {
    this.origin = origin;
    this.radius = radius;
  }
  get raw() {
    return [this.origin.elements, this.radius];
  }
  containsPoint(point) {
    return sphere3ContainsPoint(this.raw, point.elements);
  }
  static fromRaw(sphere) {
    return new Sphere3(new Vector3(sphere[0]), sphere[1]);
  }
};

// src/math/vec4/vec4ApplyMatrix3.ts
function vec4ApplyMatrix3(v, m) {
  const v3 = [v[0], v[1], v[2]];
  const xyz = vec3ApplyMatrix3(v3, m);
  const w = v[3];
  return [xyz[0], xyz[1], xyz[2], w];
}

// src/math/vec4/Vector4.ts
var Vector4 = class extends (/* unused pure expression or super */ null && (Vector)) {
  constructor(v = [0, 0, 0, 0]) {
    super();
    this.elements = v;
  }
  get x() {
    return this.elements[0];
  }
  set x(x) {
    this.elements[0] = x;
  }
  get y() {
    return this.elements[1];
  }
  set y(y) {
    this.elements[1] = y;
  }
  get z() {
    return this.elements[2];
  }
  set z(z) {
    this.elements[2] = z;
  }
  get w() {
    return this.elements[3];
  }
  set w(z) {
    this.elements[3] = z;
  }
  toString() {
    return `Vector4( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)}, ${this.w.toFixed(3)} )`;
  }
  applyMatrix3(matrix) {
    return new Vector4(vec4ApplyMatrix3(this.elements, matrix.elements));
  }
  applyMatrix4(matrix) {
    return new Vector4(vec4ApplyMatrix4(this.elements, matrix.elements));
  }
  __new(v) {
    return new Vector4(v);
  }
  static get zero() {
    return new Vector4([0, 0, 0, 0]);
  }
  static get one() {
    return new Vector4([1, 1, 1, 1]);
  }
};

// src/midi/midiParse.ts
function readU8(array, headBox) {
  return array[headBox[0]++];
}
function readU16(array, headBox) {
  return readU8(array, headBox) * 256 + readU8(array, headBox);
}
function readU32(array, headBox) {
  return readU16(array, headBox) * 65536 + readU16(array, headBox);
}
function readUVar(array, headBox) {
  let v = 0;
  for (; ; ) {
    const vv = readU8(array, headBox);
    v = v * 128 + (vv & 127);
    if (vv < 128) {
      return v;
    }
  }
}
function parseHeader(array, headBox) {
  headBox[0] += 8;
  return [
    readU16(array, headBox),
    readU16(array, headBox),
    readU16(array, headBox)
  ];
}
function parseTrack(array, headBox) {
  headBox[0] += 4;
  const endOfTrack = headBox[0] + readU32(array, headBox) + 4;
  const track = [];
  let type = 0;
  while (headBox[0] < endOfTrack) {
    const delta = readUVar(array, headBox);
    const status = readU8(array, headBox);
    type = status < 128 ? type : status;
    const data0 = status < 128 ? status : readU8(array, headBox);
    if (type < 192) {
      track.push([
        delta,
        type,
        data0,
        readU8(array, headBox)
      ]);
    } else if (type === 255) {
      const eventLength = readU8(array, headBox);
      track.push([
        delta,
        type,
        data0,
        arraySerial(eventLength).map(() => readU8(array, headBox))
      ]);
      if (data0 === 47) {
        break;
      }
    } else {
      throw new Error(`${type}`);
    }
  }
  return track;
}
function midiParse(buffer) {
  const array = new Uint8Array(buffer);
  const headBox = [0];
  const header = parseHeader(array, headBox);
  const tracks = [];
  while (headBox[0] < array.length) {
    tracks.push(parseTrack(array, headBox));
  }
  return [header, tracks];
}

// src/poker/pokerRanksByStrength.ts
var pokerRanksByStrength = (/* unused pure expression or super */ null && ([
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "T",
  "J",
  "Q",
  "K",
  "A"
]));

// src/poker/pokerSuitsByIndex.ts
var pokerSuitsByIndex = (/* unused pure expression or super */ null && ([
  "c",
  "d",
  "h",
  "s"
]));

// src/poker/createPokerDeck.ts
function createPokerDeck() {
  const array = [];
  pokerSuitsByIndex.map((suit) => pokerRanksByStrength.map((rank) => array.push(rank + suit)));
  return array;
}

// src/poker/pokerHandStrengthMap.ts
var pokerHandStrengthMap = {
  "HighCard": 0,
  "OnePair": 1,
  "TwoPair": 2,
  "ThreeOfAKind": 3,
  "Straight": 4,
  "Flush": 5,
  "FullHouse": 6,
  "FourOfAKind": 7,
  "StraightFlush": 8
};

// src/poker/pokerRankStrengthMap.ts
var pokerRankStrengthMap = {
  "2": 0,
  "3": 1,
  "4": 2,
  "5": 3,
  "6": 4,
  "7": 5,
  "8": 6,
  "9": 7,
  "T": 8,
  "J": 9,
  "Q": 10,
  "K": 11,
  "A": 12
};

// src/poker/pokerSuitIndexMap.ts
var pokerSuitIndexMap = {
  "c": 0,
  "d": 1,
  "h": 2,
  "s": 3
};

// src/poker/sortPokerCardsByRank.ts
function sortPokerCardsByRank(cards) {
  return cards.sort((a, b) => pokerSuitIndexMap[a[1]] - pokerSuitIndexMap[b[1]]).sort((a, b) => pokerRankStrengthMap[a[0]] - pokerRankStrengthMap[b[0]]);
}

// src/poker/evaluatePokerHand.ts
function evaluatePokerHand(cards) {
  const cards_ = cards.concat();
  const cardsByRank = new MapOfSet();
  const cardsBySuit = new MapOfSet();
  cards_.map((card) => {
    const rank = card[0];
    const suit = card[1];
    cardsByRank.add(rank, card);
    cardsBySuit.add(suit, card);
  });
  const fours = [];
  const threes = [];
  const twos = [];
  pokerRanksByStrength.map((rank) => {
    const cards2 = cardsByRank.get(rank);
    if (cards2.size > 3) {
      fours.push(rank);
    } else if (cards2.size > 2) {
      threes.push(rank);
    } else if (cards2.size > 1) {
      twos.push(rank);
    }
  });
  let straightCards;
  {
    let current = [];
    const a = Array.from(cardsByRank.get("A"))[0];
    if (a) {
      current.push(a);
    }
    pokerRanksByStrength.map((rank) => {
      const card = Array.from(cardsByRank.get(rank))[0];
      if (card) {
        current.push(card);
        if (current.length > 4) {
          straightCards = current;
        }
      } else {
        current = [];
      }
    });
  }
  if (straightCards) {
    for (const [suit, cardsSet] of cardsBySuit.map) {
      if (cardsSet.size > 0) {
        let straightFlushCards;
        let current = [];
        const target = "A" + suit;
        const a = cardsSet.has(target);
        if (a) {
          current.push(target);
        }
        pokerRanksByStrength.map((rank) => {
          const target2 = rank + suit;
          if (cardsSet.has(target2)) {
            current.push(target2);
            if (current.length > 4) {
              straightFlushCards = current;
            }
          } else {
            current = [];
          }
        });
        if (straightFlushCards) {
          straightFlushCards.splice(0, straightFlushCards.length - 5);
          const hand = "StraightFlush";
          const strength = [
            pokerHandStrengthMap[hand],
            pokerRankStrengthMap[straightFlushCards[4][0]]
          ];
          return {
            hand,
            cards: straightFlushCards,
            strength
          };
        }
      }
    }
  }
  if (fours.length > 0) {
    fours.sort((a, b) => pokerRankStrengthMap[a] - pokerRankStrengthMap[b]);
    fours.splice(0, fours.length - 1);
    const sameCards = Array.from(cardsByRank.get(fours[0]));
    sameCards.map((card) => cards_.splice(cards_.indexOf(card), 1));
    sortPokerCardsByRank(cards_).splice(0, cards_.length - 1);
    const hand = "FourOfAKind";
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[fours[0]],
      pokerRankStrengthMap[cards_[0][0]]
    ];
    cards_.push(...sameCards);
    sortPokerCardsByRank(cards_);
    return {
      hand,
      cards: cards_,
      strength
    };
  }
  if (threes.length > 0 && threes.length + twos.length > 1) {
    threes.sort((a, b) => pokerRankStrengthMap[a] - pokerRankStrengthMap[b]);
    twos.push(...threes.splice(0, threes.length - 1));
    twos.sort((a, b) => pokerRankStrengthMap[a] - pokerRankStrengthMap[b]);
    twos.splice(0, twos.length - 1);
    const sameCards = Array.from(cardsByRank.get(threes[0]));
    sameCards.push(...Array.from(cardsByRank.get(twos[0])));
    sortPokerCardsByRank(sameCards).splice(0, sameCards.length - 5);
    const hand = "FullHouse";
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[threes[0]],
      pokerRankStrengthMap[twos[0]]
    ];
    return {
      hand,
      cards: sameCards,
      strength
    };
  }
  for (const [_suit, cardsSet] of cardsBySuit.map) {
    if (cardsSet.size > 4) {
      const cards2 = sortPokerCardsByRank(Array.from(cardsSet));
      cards2.splice(0, cards2.length - 5);
      const hand = "Flush";
      const strength = [
        pokerHandStrengthMap[hand],
        ...cards2.concat().reverse().map((card) => pokerRankStrengthMap[card[0]])
      ];
      return {
        hand,
        cards: cards2,
        strength
      };
    }
  }
  if (straightCards) {
    straightCards.splice(0, straightCards.length - 5);
    const hand = "Straight";
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[straightCards[4][0]]
    ];
    return {
      hand,
      cards: straightCards,
      strength
    };
  }
  if (threes.length > 0) {
    threes.sort((a, b) => pokerRankStrengthMap[a] - pokerRankStrengthMap[b]);
    threes.splice(0, threes.length - 1);
    const sameCards = Array.from(cardsByRank.get(threes[0]));
    sameCards.map((card) => cards_.splice(cards_.indexOf(card), 1));
    sortPokerCardsByRank(cards_).splice(0, cards_.length - 2);
    const hand = "ThreeOfAKind";
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[threes[0]],
      pokerRankStrengthMap[cards_[1][0]],
      pokerRankStrengthMap[cards_[0][0]]
    ];
    cards_.push(...sameCards);
    sortPokerCardsByRank(cards_);
    return {
      hand,
      cards: cards_,
      strength
    };
  }
  if (twos.length > 1) {
    twos.sort((a, b) => pokerRankStrengthMap[a] - pokerRankStrengthMap[b]);
    twos.splice(0, twos.length - 2);
    const pairs = Array.from(cardsByRank.get(twos[0]));
    pairs.push(...Array.from(cardsByRank.get(twos[1])));
    pairs.map((card) => cards_.splice(cards_.indexOf(card), 1));
    sortPokerCardsByRank(cards_).splice(0, cards_.length - 1);
    const hand = "TwoPair";
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[twos[1]],
      pokerRankStrengthMap[twos[0]],
      pokerRankStrengthMap[cards_[0][0]]
    ];
    cards_.push(...pairs);
    sortPokerCardsByRank(cards_);
    return {
      hand,
      cards: cards_,
      strength
    };
  }
  if (twos.length > 0) {
    const pair = Array.from(cardsByRank.get(twos[0]));
    pair.map((card) => cards_.splice(cards_.indexOf(card), 1));
    sortPokerCardsByRank(cards_).splice(0, cards_.length - 3);
    const hand = "OnePair";
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[twos[0]],
      pokerRankStrengthMap[cards_[2][0]],
      pokerRankStrengthMap[cards_[1][0]],
      pokerRankStrengthMap[cards_[0][0]]
    ];
    cards_.push(...pair);
    sortPokerCardsByRank(cards_);
    return {
      hand,
      cards: cards_,
      strength
    };
  }
  {
    const hand = "HighCard";
    sortPokerCardsByRank(cards_);
    cards_.splice(0, cards_.length - 5);
    const strength = [
      pokerHandStrengthMap[hand],
      pokerRankStrengthMap[cards_[4][0]],
      pokerRankStrengthMap[cards_[3][0]],
      pokerRankStrengthMap[cards_[2][0]],
      pokerRankStrengthMap[cards_[1][0]],
      pokerRankStrengthMap[cards_[0][0]]
    ];
    return {
      hand,
      cards: cards_,
      strength
    };
  }
}

// src/poker/pokerHandsByStrength.ts
var pokerHandsByStrength = (/* unused pure expression or super */ null && ([
  "HighCard",
  "OnePair",
  "TwoPair",
  "ThreeOfAKind",
  "Straight",
  "Flush",
  "FullHouse",
  "FourOfAKind",
  "StraightFlush"
]));

// src/retry/asyncRetry.ts
function asyncRetry(func, n) {
  return __async(this, null, function* () {
    return yield func().catch((error) => {
      if (n <= 1) {
        throw error;
      }
      return asyncRetry(func, n - 1);
    });
  });
}

// src/retry/retry.ts
function retry(func, n) {
  try {
    return func();
  } catch (error) {
    if (n <= 1) {
      throw error;
    }
    return retry(func, n - 1);
  }
}

// src/stniccc/parseSTNICCC.ts
function parseSTNICCC(buffer) {
  const frames = [];
  const array = new Uint8Array(buffer);
  const palette = new Uint16Array(16);
  let head = 0;
  let shouldSkip = false;
  let shouldEnd = false;
  for (; ; ) {
    const flags = array[head++];
    const needsClear = (flags & 1) === 1;
    const hasPalette = (flags >> 1 & 1) === 1;
    const indexedMode = (flags >> 2 & 1) === 1;
    if (hasPalette) {
      const bitmask = array[head++] << 8 | array[head++];
      for (let i = 0; i < 16; i++) {
        if (bitmask >> 15 - i & 1) {
          palette[i] = array[head++] << 8 | array[head++];
        }
      }
    }
    if (indexedMode) {
      const nVertices = array[head++];
      const vertices = array.subarray(head, head + 2 * nVertices);
      head += 2 * nVertices;
      const polygons = [];
      for (; ; ) {
        const descriptor = array[head++];
        if (descriptor === 255) {
          break;
        } else if (descriptor === 254) {
          shouldSkip = true;
          break;
        } else if (descriptor === 253) {
          shouldEnd = true;
          break;
        }
        const colorIndex = descriptor >> 4 & 15;
        const nIndices = descriptor & 15;
        const indices = array.subarray(head, head + nIndices);
        head += nIndices;
        polygons.push({
          colorIndex,
          indices: Array.from(indices)
        });
      }
      frames.push({
        needsClear,
        indexedMode,
        palette: Array.from(palette),
        vertices: Array.from(vertices),
        polygons
      });
    } else {
      const polygons = [];
      for (; ; ) {
        const descriptor = array[head++];
        if (descriptor === 255) {
          break;
        } else if (descriptor === 254) {
          shouldSkip = true;
          break;
        } else if (descriptor === 253) {
          shouldEnd = true;
          break;
        }
        const colorIndex = descriptor >> 4 & 15;
        const nVertices = descriptor & 15;
        const vertices = array.subarray(head, head + 2 * nVertices);
        head += 2 * nVertices;
        polygons.push({
          colorIndex,
          vertices: Array.from(vertices)
        });
      }
      frames.push({
        needsClear,
        indexedMode,
        palette: Array.from(palette),
        polygons
      });
    }
    if (shouldSkip) {
      head = (Math.floor(head / 65536) + 1) * 65536;
      shouldSkip = false;
    }
    if (shouldEnd) {
      break;
    }
  }
  return frames;
}

// src/stniccc/stnicccToSVG.ts
function stnicccToSVG(frames, options = {}) {
  var _a;
  const delta = 1 / ((_a = options == null ? void 0 : options.fps) != null ? _a : 30);
  let svg = '<svg width="256" height="200" viewBox="0 0 256 200" xmlns="http://www.w3.org/2000/svg">';
  let style = `g{visibility:hidden;animation-duration:${(delta * frames.length).toFixed(3)}s;animation-iteration-count:infinite;animation-name:frame}@keyframes frame{0%{visibility:visible}${200 / frames.length}%{visibility:hidden}}`;
  frames.map((frame, iFrame) => {
    const { indexedMode, palette, polygons } = frame;
    style += `#f${iFrame}{animation-delay:${(delta * iFrame).toFixed(3)}s}`;
    const paletteInHex = palette.map((stColor) => {
      const color = colorFromAtariST(stColor);
      return colorToHex(color);
    });
    let childrenStr = '<rect width="256" height="200" fill="#000" />';
    let currentColorIndex = -1;
    let d = "";
    if (indexedMode) {
      const { vertices } = frame;
      polygons.map(({ colorIndex, indices }) => {
        if (currentColorIndex !== colorIndex) {
          if (currentColorIndex !== -1) {
            const colorHex2 = paletteInHex[currentColorIndex];
            childrenStr += `<path d="${d}" fill="${colorHex2}" />`;
          }
          currentColorIndex = colorIndex;
          d = "";
        }
        for (let i = 0; i < indices.length; i++) {
          const index = indices[i];
          const x = vertices[2 * index];
          const y = vertices[2 * index + 1];
          d += i === 0 ? `M${x},${y}` : `L${x},${y}`;
        }
      });
    } else {
      polygons.map(({ colorIndex, vertices }) => {
        if (currentColorIndex !== colorIndex) {
          if (currentColorIndex !== -1) {
            const colorHex2 = paletteInHex[currentColorIndex];
            childrenStr += `<path d="${d}" fill="${colorHex2}" />`;
          }
          currentColorIndex = colorIndex;
          d = "";
        }
        for (let i = 0; i < vertices.length; i += 2) {
          const x = vertices[i];
          const y = vertices[i + 1];
          d += i === 0 ? `M${x},${y}` : `L${x},${y}`;
        }
      });
    }
    const colorHex = paletteInHex[currentColorIndex];
    childrenStr += `<path d="${d}" fill="${colorHex}" />`;
    svg += `<g id="f${iFrame}">${childrenStr}</g>`;
  });
  svg += `<style>${style}</style></svg>`;
  return svg;
}

// src/SmoothDamp/SmoothDamp.ts
var SmoothDamp = class {
  constructor() {
    this.smoothTime = 1;
    this.velocity = 0;
    this.value = 0;
    this.target = 0;
  }
  update(deltaTime) {
    const omega = 2 / this.smoothTime;
    const x = omega * deltaTime;
    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);
    const delta = this.value - this.target;
    const temp = (this.velocity + omega * delta) * deltaTime;
    this.velocity = (this.velocity - omega * temp) * exp;
    this.value = this.target + (delta + temp) * exp;
    return this.value;
  }
};

// src/Swap/Swap.ts
var Swap = class {
  constructor(a, b) {
    this.i = a;
    this.o = b;
  }
  swap() {
    const i = this.i;
    this.i = this.o;
    this.o = i;
  }
};

// src/TapTempo/TapTempo.ts
var TapTempo = class {
  constructor() {
    this.__bpm = 0;
    this.__lastTap = 0;
    this.__lastBeat = 0;
    this.__lastTime = 0;
    this.__calc = new HistoryMeanCalculator(16);
  }
  get beatDuration() {
    return 60 / this.__bpm;
  }
  get bpm() {
    return this.__bpm;
  }
  set bpm(bpm) {
    this.__lastBeat = this.beat;
    this.__lastTime = performance.now();
    this.__bpm = bpm;
  }
  get beat() {
    return this.__lastBeat + (performance.now() - this.__lastTime) * 1e-3 / this.beatDuration;
  }
  reset() {
    this.__calc.reset();
  }
  nudge(amount) {
    this.__lastBeat = this.beat + amount;
    this.__lastTime = performance.now();
  }
  tap() {
    const now = performance.now();
    const delta = (now - this.__lastTap) * 1e-3;
    if (2 < delta) {
      this.reset();
    } else {
      this.__calc.push(delta);
      this.__bpm = 60 / this.__calc.mean;
    }
    this.__lastTap = now;
    this.__lastTime = now;
    this.__lastBeat = 0;
  }
};

// src/tinyseq/createTinyseqPolyReader.ts
function createTinyseqPolyReader(buffer, options = {}) {
  var _a, _b, _c, _d;
  const poly = (_a = options.poly) != null ? _a : 8;
  const blockSize = (_b = options.blockSize) != null ? _b : 128;
  const sampleRate = (_c = options.sampleRate) != null ? _c : 48e3;
  const stepsPerSecond = (_d = options.stepsPerSecond) != null ? _d : 1;
  let samples = 0;
  let pos = 0;
  let note;
  const notes = arraySerial(poly).fill(-1);
  const notesTime = arraySerial(poly).fill(-Infinity);
  const notesOffTime = arraySerial(poly).fill(-Infinity);
  let nextStep = 0;
  return () => {
    const ret = arraySerial(poly).map(() => new Float32Array(4 * blockSize));
    arraySerial(blockSize).map((iSample) => {
      const t = samples / sampleRate;
      const s = t * stepsPerSecond;
      if (s >= nextStep) {
        const eventNote = buffer[pos];
        const eventDeltaStep = buffer[pos + 1];
        note = (pos === 0 ? 60 : note) + eventNote & 127;
        let iPoly = notes.indexOf(note);
        let tEarliest = Infinity;
        if (iPoly === -1) {
          notesTime.map((tOn, jPoly) => {
            const tOff = notesOffTime[jPoly];
            if (tOn <= tOff) {
              if (tOff < tEarliest) {
                iPoly = jPoly;
                tEarliest = tOff;
              }
            }
          });
        }
        if (iPoly === -1) {
          notesTime.map((tOn, jPoly) => {
            if (tOn < tEarliest) {
              iPoly = jPoly;
              tEarliest = tOn;
            }
          });
        }
        notes[iPoly] = note;
        if (eventNote & 128) {
          if (notesOffTime[iPoly] < notesTime[iPoly]) {
            notesOffTime[iPoly] = t;
          }
        } else {
          if (notesOffTime[iPoly] >= notesTime[iPoly]) {
            notesTime[iPoly] = t;
          }
        }
        nextStep += eventDeltaStep;
        pos = (pos + 2) % buffer.length;
      }
      samples++;
      arraySerial(poly).map((iPoly) => {
        const noteTime = notesTime[iPoly];
        const noteOffTime = notesOffTime[iPoly];
        ret[iPoly][4 * iSample + 0] = t - noteTime;
        ret[iPoly][4 * iSample + 1] = noteOffTime < noteTime ? 0 : t - noteOffTime;
        ret[iPoly][4 * iSample + 2] = notes[iPoly];
        ret[iPoly][4 * iSample + 3] = 0;
      });
    });
    return ret;
  };
}

// src/tinyseq/createTinyseqReader.ts
function createTinyseqReader(buffer, options = {}) {
  var _a, _b, _c;
  const blockSize = (_a = options.blockSize) != null ? _a : 128;
  const sampleRate = (_b = options.sampleRate) != null ? _b : 48e3;
  const stepsPerSecond = (_c = options.stepsPerSecond) != null ? _c : 960;
  let samples = 0;
  let pos = 0;
  let note;
  let noteTime = -Infinity;
  let noteOffTime = -Infinity;
  let nextStep = 0;
  return () => {
    return new Float32Array(arraySerial(blockSize).map(() => {
      const t = samples / sampleRate;
      const s = t * stepsPerSecond;
      if (s >= nextStep) {
        const eventNote = buffer[pos];
        const eventDeltaStep = buffer[pos + 1];
        note = (pos === 0 ? 60 : note) + eventNote & 127;
        if (eventNote & 128) {
          if (noteOffTime < noteTime) {
            noteOffTime = t;
          }
        } else {
          if (noteOffTime >= noteTime) {
            noteTime = t;
          }
        }
        nextStep += eventDeltaStep;
        pos = (pos + 2) % buffer.length;
      }
      samples++;
      return [
        t - noteTime,
        noteOffTime < noteTime ? 0 : t - noteOffTime,
        note,
        0
      ];
    }).flat());
  };
}

// src/tinyseq/tinyseqFromMidiParseResult.ts
function tinyseqFromMidiParseResult(midi, { track, tickMultiplier } = {}) {
  const data = [];
  let lastNote = 60;
  let delta = 0;
  const trackEvents = midi[1][track != null ? track : 0];
  arraySerial(trackEvents.length + 1).map((i) => {
    var _a, _b, _c, _d, _e, _f;
    delta += ((_b = (_a = trackEvents[i]) == null ? void 0 : _a[0]) != null ? _b : 0) * (tickMultiplier != null ? tickMultiplier : 1);
    if (delta === 0 && i === 0) {
      return;
    }
    const evMsg = (_d = (_c = trackEvents[i - 1]) == null ? void 0 : _c[1]) != null ? _d : 128;
    const evNote = (_f = (_e = trackEvents[i - 1]) == null ? void 0 : _e[2]) != null ? _f : 60;
    if (evMsg >= 160) {
      return;
    }
    const noteDelta = evNote - lastNote + 128 & 127;
    lastNote = evNote;
    const onoff = evMsg < 144 ? 128 : 0;
    let deltaConsume = Math.floor(Math.min(delta, 240));
    data.push(noteDelta + onoff, deltaConsume);
    delta -= deltaConsume;
    while (delta >= 1) {
      deltaConsume = Math.floor(Math.min(delta, 240));
      data.push(onoff, deltaConsume);
      delta -= deltaConsume;
    }
  });
  return new Uint8Array(data);
}

// src/Xorshift/Xorshift.ts
var Xorshift = class {
  constructor(seed) {
    this.seed = seed || 1;
  }
  gen(seed) {
    if (seed) {
      this.seed = seed;
    }
    this.seed = this.seed ^ this.seed << 13;
    this.seed = this.seed ^ this.seed >>> 17;
    this.seed = this.seed ^ this.seed << 5;
    return this.seed / Math.pow(2, 32) + 0.5;
  }
  set(seed) {
    this.seed = seed || this.seed || 1;
  }
};

// src/yugop/getYugopText.ts
function getYugopText(text, phase, randomRatio = 0.5) {
  if (phase >= 1) {
    return text;
  }
  if (phase < 0) {
    return "";
  }
  const displayTween = linearstep(0, 1 - randomRatio, phase);
  const fixTween = linearstep(randomRatio, 1, phase);
  const displayLength = 1 + Math.floor(displayTween * (text.length - 1));
  const fixLength = phase < randomRatio ? 0 : 1 + Math.floor(fixTween * (text.length - 1));
  const randomLength = displayLength - fixLength;
  const randomStr = [...Array(randomLength)].map(() => String.fromCharCode(33 + Math.floor(93 * Math.random()))).join("");
  return text.substring(0, fixLength) + randomStr;
}

// src/BinaryHeap.ts
var BinaryHeap = class {
  static defaultComparator(a, b) {
    const aStr = `${a}`;
    const bStr = `${b}`;
    if (aStr > bStr) {
      return 1;
    } else if (aStr < bStr) {
      return -1;
    } else {
      return 0;
    }
  }
  get length() {
    return this.array.length;
  }
  get isEmpty() {
    return this.array.length === 0;
  }
  get root() {
    return this.array[0];
  }
  constructor(init, comparator) {
    this.array = [];
    this.elementIndexMap = /* @__PURE__ */ new Map();
    this.comparator = comparator != null ? comparator : BinaryHeap.defaultComparator;
    if (init != null) {
      for (const el of init) {
        this.push(el);
      }
    }
  }
  push(...elements) {
    elements.map((el) => {
      const i = this.length;
      this.array.push(el);
      this.elementIndexMap.set(el, i);
      this.__up(i, el);
    });
  }
  pop() {
    if (this.isEmpty) {
      return null;
    }
    const el = this.array[0];
    this.elementIndexMap.delete(el);
    if (this.length === 1) {
      this.array.splice(0);
    } else {
      const rep = this.array.pop();
      this.__down(0, rep);
    }
    return el;
  }
  delete(i) {
    this.elementIndexMap.delete(this.array[i]);
    const rep = this.array.pop();
    if (rep != null) {
      i = this.__up(i, rep);
      i = this.__down(i, rep);
    }
    return true;
  }
  replace(i, rep) {
    if (i != null) {
      this.elementIndexMap.delete(this.array[i]);
      i = this.__up(i, rep);
      i = this.__down(i, rep);
    }
    return i != null ? i : null;
  }
  __up(i, el) {
    let ic = i;
    while (ic !== 0) {
      const ip = ic - 1 >> 1;
      const p = this.array[ip];
      if (this.comparator(el, p) < 0) {
        this.array[ic] = p;
        this.elementIndexMap.set(p, ic);
        ic = ip;
      } else {
        break;
      }
    }
    this.array[ic] = el;
    this.elementIndexMap.set(el, ic);
    return ic;
  }
  __down(i, el) {
    let ip = i;
    while ((ip << 1) + 1 < this.length) {
      const ic1 = (ip << 1) + 1;
      const ic2 = (ip << 1) + 2;
      if (ic2 < this.length) {
        const c1 = this.array[ic1];
        const c2 = this.array[ic2];
        const pickLeft = this.comparator(c1, c2) < 0;
        const c = pickLeft ? c1 : c2;
        const ic = pickLeft ? ic1 : ic2;
        if (this.comparator(c, el) < 0) {
          this.array[ip] = c;
          this.elementIndexMap.set(c, ip);
          ip = ic;
        } else {
          break;
        }
      } else if (this.comparator(this.array[ic1], el) < 0) {
        this.array[ip] = this.array[ic1];
        this.elementIndexMap.set(this.array[ip], ip);
        ip = ic1;
      } else {
        break;
      }
    }
    this.array[ip] = el;
    this.elementIndexMap.set(el, ip);
    return ip;
  }
};

// src/notifyObservers.ts
function notifyObservers(observers, param) {
  for (const observer of observers) {
    observer(param);
  }
}

/*!
 * Turbo colormap
 *
 * Copyright 2019 Google LLC. (Apache-2.0)
 *
 * https://gist.github.com/mikhailov-work/0d177465a8151eb6ede1768d51d476c7
 */

;// CONCATENATED MODULE: ./src/wmath.ts

function fract(a) {
    return _0b5vr_experimental_esm_mod(a, 1);
}
const tau = Math.PI * 2.0;
const pi = Math.PI;
const halfPi = Math.PI / 2;
function max(a, b) {
    return Math.max(a, b);
}
function min(a, b) {
    return Math.min(a, b);
}
function mix(a, b, f) {
    return a * (1.0 - f) + b * f;
}
function log(a) {
    return Math.log(a);
}
function log2(a) {
    return Math.log2(a);
}
class Hash {
    seed = 0;
    constructor(seed = 1251254) {
        Hash.seed = seed;
    }
    static h11(p) {
        p = fract(p * 0.1031);
        p *= p + 33.33;
        p *= p + p;
        return fract(p);
    }
    h11(p) {
        return this.seeded(125124 + p * 1250);
    }
    seeded(a) {
        var t = (a += 0x6d2b79f5);
        t = Math.imul(t ^ (t >>> 15), t | 1);
        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
    }
    valueNoise(a) {
        const fla = floor(a);
        const ceila = fla + 1;
        const rcurr = Hash.h11(fla);
        const rnext = Hash.h11(ceila);
        let fr = fract(a);
        fr = wmath_smoothstep(0, 1, fr);
        return wmath_lerp(rcurr, rnext, fr);
    }
    valueNoiseSmooth(a, smoothness) {
        const fla = floor(a);
        const ceila = fla + 1;
        const rcurr = this.h11(fla);
        const rnext = this.h11(ceila);
        let fr = fract(a);
        for (let i = 0; i < smoothness; i++) {
            if (floor(i) === floor(smoothness)) {
                fr = wmath_lerp(fr, wmath_smoothstep(0, 1, fr), smoothness - i);
                break;
            }
            else {
                fr = wmath_smoothstep(0, 1, fr);
            }
        }
        return wmath_lerp(rcurr, rnext, fr);
    }
}
const r2pi = 0.63661977236;
const nkingSin = (x) => {
    const xtau = x * tau;
    if (xtau - Math.floor(xtau) > pi) {
        const mod = (x - pi) * r2pi - 1;
        return mod * mod - 1;
    }
    else {
        const mod = x * r2pi - 1;
        return 1 - mod * mod;
    }
};
const smoothsin = (x) => {
    const b = x * x * (3.0 - 2.0 * x);
    const a = x * (3 - 1.0 * x);
    return a + (b - a) * b;
};
const oneOverHalfPi = 1 / (pi / 2);
const fastSin = (x) => {
    x *= oneOverHalfPi;
    const id = Math.floor(x);
    x = x % 1;
    let side = 1;
    if ((id - 2) % 4 < 2) {
        side = -1;
    }
    if (id % 2 === 1) {
        x = 1 - x;
    }
    let approx = smoothsin(x);
    approx *= side;
    return approx;
};
function quantize(a, b) {
    return Math.floor(a / b) * b;
}
function dmod(a, b, c = 2) {
    return max(mod(a, b) - b + 2, 0);
}
function abs(a) {
    return Math.abs(a);
}
function sign(a) {
    return a < 0 ? -1 : 1;
}
function tri(a) {
    const fr = a - Math.floor(a);
    return abs(fr - 0.5) * 2 - 1;
}
function sin(a) {
    return Math.sin(a);
}
function cos(a) {
    return Math.cos(a);
}
function floor(a) {
    return Math.floor(a);
}
function pow(a, b) {
    return Math.pow(a, b);
}
function sqrt(a) {
    return Math.sqrt(a);
}
function wmath_wrap(a, from, to) {
    const range = to - from;
    a -= from;
    a = mod(a, range);
    return from + a;
}
const wmath_lerp = (a, b, x) => a + (b - a) * x;
const wmath_clamp = (x, l, h) => Math.min(Math.max(x, l), h);
const wmath_saturate = (x) => Math.min(Math.max(x, 0.0), 1.0);
const wmath_linearstep = (a, b, x) => wmath_saturate((x - a) / (b - a));
const wmath_smoothstep = (a, b, x) => {
    const t = wmath_linearstep(a, b, x);
    return t * t * (3.0 - 2.0 * t);
};
function rand() {
    return Math.random();
}
class Ease {
    static linear(t) {
        ;
        (t) => t;
    }
    static easeInQuad(t) {
        return t * t;
    }
    static easeOutQuad(t) {
        return t * (2 - t);
    }
    static easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }
    static easeInCubic(t) {
        return t * t * t;
    }
    static easeOutCubic(t) {
        return --t * t * t + 1;
    }
    static easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }
    static easeInQuart(t) {
        return t * t * t * t;
    }
    static easeOutQuart(t) {
        return 1 - --t * t * t * t;
    }
    static easeInOutQuart(t) {
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    }
    static easeInQuint(t) {
        return t * t * t * t * t;
    }
    static easeOutQuint(t) {
        return 1 + --t * t * t * t * t;
    }
    static easeInOutQuint(t) {
        return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
    static easeInElastic(t) {
        const c4 = (2 * Math.PI) / 3;
        return t === 0 ? 0 : t === 1 ? 1 : -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * c4);
    }
    static easeOutElastic(t) {
        const c4 = (2 * Math.PI) / 3;
        return t === 0 ? 0 : t === 1 ? 1 : Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c4) + 1;
    }
}
class WMath {
    static macos(x) {
        return Math.acos(x);
    }
    static masin(x) {
        return Math.asin(x);
    }
    static matan(y, x) {
        return Math.atan2(y, x);
    }
    static mcos(x) {
        return Math.cos(x);
    }
    static msin(x) {
        return Math.sin(x);
    }
    static cos2(x) {
        return [Math.cos(x[0]), Math.cos(x[1])];
    }
    static cos3(x) {
        return [Math.cos(x[0]), Math.cos(x[1]), Math.cos(x[2])];
    }
    static sin2(x) {
        return [Math.sin(x[0]), Math.sin(x[1])];
    }
    static sin3(x) {
        return [Math.sin(x[0]), Math.sin(x[1]), Math.sin(x[2])];
    }
    static sin4(x) {
        return [Math.sin(x[0]), Math.sin(x[1]), Math.sin(x[2]), Math.sin(x[3])];
    }
    static SC(x) {
        return [Math.sin(x), Math.cos(x)];
    }
    static add2(a, b) {
        return [a[0] + b[0], a[1] + b[1]];
    }
    static add3(a, b) {
        return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
    }
    static add31(a, b) {
        return [a[0] + b, a[1] + b, a[2] + b];
    }
    static add4(a, b) {
        return [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]];
    }
    static sub3(a, b) {
        return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
    }
    static sub2(a, b) {
        return [a[0] - b[0], a[1] - b[1]];
    }
    static dot3(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    static abs3(a) {
        return [a[0] > 0 ? a[0] : -a[0], a[1] > 0 ? a[1] : -a[1], a[2] > 0 ? a[2] : -a[2]];
    }
    static scale2(a, b) {
        return [a[0] * b, a[1] * b];
    }
    static scale3(a, b) {
        return [a[0] * b, a[1] * b, a[2] * b];
    }
    static scale4(a, b) {
        return [a[0] * b, a[1] * b, a[2] * b, a[3] * b];
    }
    static mul3(a, b) {
        return [a[0] * b[0], a[1] * b[1], a[2] * b[2]];
    }
    static mul4(a, b) {
        return [a[0] * b[0], a[1] * b[1], a[2] * b[2], a[3] * b[3]];
    }
    static mymix(a, b, f) {
        return a * (1.0 - f) + b * f;
    }
    static mymix22(a, b, f) {
        return [a[0] * (1.0 - f[0]) + b[0] * f[0], a[1] * (1.0 - f[1]) + b[1] * f[1]];
    }
    static mix1(a, b, f) {
        return a * (1.0 - f) + b * f;
    }
    static mix3(a, b, f) {
        return add3(scale3(a, 1.0 - f), scale3(b, f));
    }
    static length2(a) {
        return Math.sqrt(a[0] * a[0] + a[1] * a[1]);
    }
    static length3(a) {
        return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    }
    static length4(a) {
        return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
    }
    static normalize3(a) {
        return scale3(a, 1.0 / length3(a));
    }
    static normalize4(a) {
        return scale4(a, 1.0 / length4(a));
    }
    static cross(a, b) {
        return [a[1] * b[2] - b[1] * a[2], a[2] * b[0] - b[2] * a[0], a[0] * b[1] - b[0] * a[1]];
    }
    G = 0.5 + Math.sqrt(5 / 4);
    static fract1(a) {
        return a - Math.floor(a);
    }
    static floor2(a) {
        return [Math.floor(a[0]), Math.floor(a[1])];
    }
    static fract2(a) {
        return [fract1(a[0]), fract1(a[1])];
    }
    static fract3(a) {
        return [fract1(a[0]), fract1(a[1]), fract1(a[2])];
    }
    static fract4(a) {
        return [fract1(a[0]), fract1(a[1]), fract1(a[2]), fract1(a[3])];
    }
    static clamp1(a, a1, a2) {
        return a < a1 ? a1 : a > a2 ? a2 : a;
    }
    static clamp31(a, a1, a2) {
        return [clamp1(a[0], a1, a2), clamp1(a[1], a1, a2), clamp1(a[2], a1, a2)];
    }
    static rotX(ph, v) {
        return [v[0], v[1] * mcos(ph) + v[2] * msin(ph), v[2] * mcos(ph) - v[1] * msin(ph)];
    }
    static rotY(ph, v) {
        return [v[0] * mcos(ph) + v[2] * msin(ph), v[1], v[2] * mcos(ph) - v[0] * msin(ph)];
    }
    static rotZ(ph, v) {
        return [v[0] * mcos(ph) + v[1] * msin(ph), v[1] * mcos(ph) - v[0] * msin(ph), v[2]];
    }
    static hsv2rgb(c) {
        var K = [1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0];
        var p = abs3(sub3(scale3(fract3(add3([c[0], c[0], c[0]], K)), 6.0), [3, 3, 3]));
        return scale3(mix3([1, 1, 1], clamp31(sub3(p, [1, 1, 1]), 0.0, 1.0), c[1]), c[2]);
    }
}

;// CONCATENATED MODULE: ./src/gl/Texture.ts



class Texture {
    tex;
    internal_format;
    format;
    type;
    res;
    is_float;
    mipmapped;
    mip_levels;
    constructor(res, internal_format = gl.RGBA, mipmapped = false, mip_levels = 0) {
        const eq_any = (a, b) => {
            let eq = false;
            b.forEach((b) => {
                if (b === a) {
                    eq = true;
                }
            });
            return eq;
        };
        this.res = [...res];
        this.internal_format = internal_format;
        this.mipmapped = mipmapped;
        this.mip_levels = mip_levels;
        this.is_float = eq_any(internal_format, [gl.RGBA32F, gl.RGBA16F, gl.RGB16F, gl.RGB32F]);
        let comp_cnt = 4;
        if (eq_any(internal_format, [gl.RGBA32F, gl.RGBA16F, gl.RGBA, gl.RGBA16I, gl.RGBA16UI, gl.RGBA32I, gl.RGBA8I, gl.RGBA8UI])) {
            comp_cnt = 4;
        }
        if (eq_any(internal_format, [gl.RGB32F, gl.RGB16F, gl.RGB, gl.RGB16I, gl.RGB16UI, gl.RGB32I, gl.RGB8I, gl.RGB8UI])) {
            comp_cnt = 3;
        }
        this.format = comp_cnt === 4 ? gl.RGBA : gl.RGB;
        this.type = this.is_float ? gl.FLOAT : gl.UNSIGNED_BYTE;
        if (eq_any(internal_format, [gl.RGBA8UI, gl.RGBA16UI, gl.RGBA32UI, gl.RGB8UI, gl.RGB16UI, gl.RGB32UI])) {
            this.type = gl.UNSIGNED_INT;
        }
        if (eq_any(internal_format, [gl.RGBA8I, gl.RGBA16I, gl.RGBA32I, gl.RGB8I, gl.RGB16I, gl.RGB32I])) {
            this.type = gl.INT;
        }
        this.recreate();
    }
    recreate() {
        this.tex = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.tex);
        if (this.is_float) {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        }
        else {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        }
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        if (this.mipmapped) {
            if (this.mip_levels === 0) {
                if (this.res[0] > 4 && this.res[1] > 4) {
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                    gl.texStorage2D(gl.TEXTURE_2D, log2(min(this.res[0], this.res[1])), this.internal_format, this.res[0], this.res[1]);
                }
                else {
                    gl.texImage2D(gl.TEXTURE_2D, 0, this.internal_format, this.res[0], this.res[1], 0, this.format, this.type, null);
                }
            }
            pause_on_gl_error();
        }
        else {
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internal_format, this.res[0], this.res[1], 0, this.format, this.type, null);
        }
        if (!gl.isTexture(this.tex)) {
            console.error('TEXTURE INCOMPLETE');
        }
    }
    resize(new_res) {
        this.res = [...new_res];
        if (this.mipmapped) {
            gl.deleteTexture(this.tex);
            this.recreate();
        }
        else {
            gl.activeTexture(gl.TEXTURE15);
            gl.bindTexture(gl.TEXTURE_2D, this.tex);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internal_format, this.res[0], this.res[1], 0, this.format, this.type, null);
        }
    }
    static async from_image_path(img_path) {
        function loadImage(url) {
            return new Promise((resolve) => {
                const image = new Image();
                image.addEventListener('load', () => {
                    resolve(image);
                });
                image.src = url;
            });
        }
        const img = await loadImage(img_path);
        const tex = new Texture([img.naturalWidth, img.naturalHeight], gl.RGBA8, true, 0);
        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, tex.res[0], tex.res[1], tex.format, tex.type, img);
        gl.generateMipmap(gl.TEXTURE_2D);
        pause_on_gl_error();
        gl.finish();
        img.remove();
        return tex;
    }
    upload_from_cpu(image) {
        if (image instanceof HTMLImageElement) {
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internal_format, this.res[0], this.res[1], 0, this.format, this.type, image);
        }
        else {
            debugger;
        }
    }
    clone() {
        return new Texture(this.res, this.internal_format, this.mipmapped, this.mip_levels);
    }
    bind_to_unit(unit) {
        gl.activeTexture(gl.TEXTURE0 + unit);
        gl.bindTexture(gl.TEXTURE_2D, this.tex);
    }
    read_back_array(offs = [0, 0], read_back_res = [...this.res]) {
        let temp_fb = gl.createFramebuffer();
        let prev_bound_fb = Framebuffer.currently_bound;
        gl.bindFramebuffer(gl.FRAMEBUFFER, temp_fb);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tex, 0);
        const data = this.is_float
            ? new Float32Array(read_back_res[0] * read_back_res[1] * 4)
            : new Uint8Array(read_back_res[0] * read_back_res[1] * 4);
        gl.readPixels(offs[0], offs[1], read_back_res[0], read_back_res[1], this.format, this.type, data);
        gl.deleteFramebuffer(temp_fb);
        gl.bindFramebuffer(gl.FRAMEBUFFER, prev_bound_fb.fb);
        return data;
    }
    read_back_pixel(offs) {
        let data = this.read_back_array(offs, [1, 1]);
        if (this.is_float) {
            data.forEach((e, i, a) => {
                a[i] *= 255;
            });
        }
        data[3] = 255;
        return Array.from(data);
    }
    async read_back_image(gamma_correct = false, offs = [0, 0], read_back_res = [...this.res]) {
        let data = this.read_back_array(offs, read_back_res);
        let i = 0;
        let idx = 0;
        for (let pixel of data) {
            if (i === 3) {
                if (this.is_float) {
                    data[idx] = 255;
                }
                else {
                    data[idx] = 255;
                }
                i = -1;
            }
            else {
                if (gamma_correct) {
                    if (this.is_float) {
                        data[idx] = 255 * pow(data[idx], 0.4545454545);
                    }
                    else {
                        data[idx] = 255 * pow(data[idx] / 255, 0.4545454545);
                    }
                }
            }
            idx++;
            i++;
        }
        const canvas = document.createElement('canvas');
        canvas.width = this.res[0];
        canvas.height = this.res[1];
        const context = canvas.getContext('2d');
        let blob;
        const getCanvasBlob = (canvas) => {
            return new Promise(function (resolve, reject) {
                canvas.toBlob(function (blob) {
                    resolve(blob);
                }, 'image/png');
            });
        };
        blob = await getCanvasBlob(canvas);
        console.log('BLORGUBS');
        console.log(blob);
        const imageData = context.createImageData(canvas.width, canvas.height);
        imageData.data.set(data);
        context.putImageData(imageData, 0, 0);
        const img = new Image();
        img.src = canvas.toDataURL();
        canvas.remove();
        return [img, blob];
    }
}

;// CONCATENATED MODULE: ./src/gl/Framebuffer.ts

class Framebuffer {
    static currently_bound;
    static framebuffers = [];
    _textures;
    _back_textures;
    _fb;
    _fb_back = undefined;
    default = false;
    pongable = false;
    needs_pong = false;
    pong_idx = 0;
    get textures() {
        if (this.pong_idx === 0)
            return this._textures;
        else
            return this._back_textures;
    }
    get back_textures() {
        if (this.pong_idx === 0)
            return this._back_textures;
        else
            return this._textures;
    }
    get fb() {
        if (this.pong_idx === 0)
            return this._fb;
        else
            return this._fb_back;
    }
    get fb_back() {
        if (this.pong_idx === 0)
            return this._fb_back;
        else
            return this._fb;
    }
    pong() {
        this.pong_idx = 1 - this.pong_idx;
        this.needs_pong = false;
    }
    recreate() {
        if (this.pongable) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, this._fb_back);
            let i = 0;
            for (let tex of this._back_textures) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, tex.tex, 0);
            }
            if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
                console.error('FRAMEBUFFER INCOMPLETE');
            }
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._fb);
        let i = 0;
        for (let tex of this._textures) {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, tex.tex, 0);
            i++;
        }
        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
            console.error('FRAMEBUFFER INCOMPLETE');
        }
    }
    constructor(textures, pongable = false) {
        this._fb = gl.createFramebuffer();
        this._textures = [...textures];
        this.pongable = pongable;
        this._back_textures = [];
        if (this.pongable) {
            this._fb_back = gl.createFramebuffer();
            for (let tex of this.textures) {
                this._back_textures.push(tex.clone());
            }
        }
        this.recreate();
        gl.bindFramebuffer(gl.FRAMEBUFFER, Framebuffer.currently_bound._fb);
        Framebuffer.framebuffers.push(this);
    }
    bind() {
        if (this.pongable)
            this.needs_pong = true;
        let draw_buffs = [];
        if (this.default) {
            draw_buffs = [gl.BACK];
        }
        else {
            let i = 0;
            for (let tex of this.textures) {
                draw_buffs.push(gl.COLOR_ATTACHMENT0 + i);
                i++;
            }
        }
        gl.viewport(0, 0, this.textures[0].res[0], this.textures[0].res[1]);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);
        Framebuffer.currently_bound = this;
    }
    clear(colour = [0, 0, 0, 0]) {
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);
        gl.clearColor(colour[0], colour[1], colour[2], colour[3]);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.bindFramebuffer(gl.FRAMEBUFFER, Framebuffer.currently_bound.fb);
    }
}

;// CONCATENATED MODULE: ./src/gl_utils.ts


function init_gl_error_handling() {
    if (!gl.debugEnabled)
        return;
    gl.glEnums = {};
    gl.enumStringToValue = {};
    for (let propertyName in gl) {
        if (typeof gl[propertyName] === 'number') {
            gl.glEnums[gl[propertyName]] = propertyName;
            gl.enumStringToValue[propertyName] = gl[propertyName];
        }
    }
}
function gl_enum_to_string(value) {
    const name = window.gl.glEnums[value];
    return name !== undefined ? 'gl.' + name : '/*UNKNOWN WebGL ENUM*/ 0x' + value.toString(16) + '';
}
function print_on_gl_error() {
    if (!gl.debugEnabled)
        return;
    let err = window.gl.getError();
    if (err !== 0) {
        console.error(err);
        console.error(gl_enum_to_string(err));
    }
}
function pause_on_gl_error() {
    if (!gl.debugEnabled)
        return;
    let err = window.gl.getError();
    if (err !== 0) {
        console.error(err);
        console.error(gl_enum_to_string(err));
        debugger;
    }
}
function copy_fb_to_texture(in_framebuffer, out_texture) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, in_framebuffer);
    gl.bindTexture(gl.TEXTURE_2D, out_texture.tex);
    gl.copyTexImage2D(gl.TEXTURE_2D, 0, out_texture.internal_format, 0, 0, out_texture.res[0], out_texture.res[1], 0);
}
function copy_fb_to_fb(in_framebuffer, out_framebuffer, res) {
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, in_framebuffer);
    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, out_framebuffer);
    gl.blitFramebuffer(0, 0, res[0], res[1], 0, 0, res[0], res[1], gl.COLOR_BUFFER_BIT, gl.NEAREST);
}
function resizeIfNeeded(canvas, default_framebuffer, client_res, set_redraw_needed, set_shared_uniforms) {
    const displayWidth = canvas.clientWidth;
    const displayHeight = canvas.clientHeight;
    const needResize = canvas.width !== displayWidth || canvas.height !== displayHeight;
    if (needResize) {
        client_res[0] = canvas.width = displayWidth;
        client_res[1] = canvas.height = displayHeight;
        set_redraw_needed(true);
        default_framebuffer._textures[0].res = [...client_res];
        set_shared_uniforms();
    }
    return needResize;
}

;// CONCATENATED MODULE: ./src/components/SemiModal.svelte
/* src/components/SemiModal.svelte generated by Svelte v4.0.0 */




const file = "src/components/SemiModal.svelte";

function add_css(target) {
	append_styles(target, "svelte-1v0nyf3", "#bar.svelte-1v0nyf3.svelte-1v0nyf3{background:black;width:100%;height:100px;display:flex;padding:0rem 1rem;align-items:center}#bar.svelte-1v0nyf3>.svelte-1v0nyf3:last-of-type{margin-left:auto;margin-right:0px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VtaU1vZGFsLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUFla0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiU2VtaU1vZGFsLnN2ZWx0ZSJdfQ== */");
}

function create_fragment(ctx) {
	let div;
	let div_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div = dom_element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "id", "bar");
			attr_dev(div, "style", div_style_value = /*hidden*/ ctx[0] ? "display: none;" : "");
			attr_dev(div, "class", "svelte-1v0nyf3");
			add_location(div, file, 11, 0, 137);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*hidden*/ 1 && div_style_value !== (div_style_value = /*hidden*/ ctx[0] ? "display: none;" : "")) {
				attr_dev(div, "style", div_style_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transitions_transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transitions_transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SemiModal', slots, ['default']);
	let { hidden = true } = $$props;
	let { knob } = $$props;

	$$self.$$.on_mount.push(function () {
		if (knob === undefined && !('knob' in $$props || $$self.$$.bound[$$self.$$.props['knob']])) {
			console.warn("<SemiModal> was created without expected prop 'knob'");
		}
	});

	const writable_props = ['hidden', 'knob'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SemiModal> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('hidden' in $$props) $$invalidate(0, hidden = $$props.hidden);
		if ('knob' in $$props) $$invalidate(1, knob = $$props.knob);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ Knob: Knob_svelte, hidden, knob });

	$$self.$inject_state = $$props => {
		if ('hidden' in $$props) $$invalidate(0, hidden = $$props.hidden);
		if ('knob' in $$props) $$invalidate(1, knob = $$props.knob);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [hidden, knob, $$scope, slots];
}

class SemiModal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { hidden: 0, knob: 1 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SemiModal",
			options,
			id: create_fragment.name
		});
	}

	get hidden() {
		return this.$$.ctx[0];
	}

	set hidden(hidden) {
		this.$$set({ hidden });
		scheduler_flush();
	}

	get knob() {
		return this.$$.ctx[1];
	}

	set knob(knob) {
		this.$$set({ knob });
		scheduler_flush();
	}
}

/* harmony default export */ const SemiModal_svelte = (SemiModal);
;// CONCATENATED MODULE: ./src/components/Knob.svelte
/* src/components/Knob.svelte generated by Svelte v4.0.0 */





const Knob_svelte_file = "src/components/Knob.svelte";

function Knob_svelte_add_css(target) {
	append_styles(target, "svelte-dko0zj", ".svelte-dko0zj.svelte-dko0zj{user-select:none;-webkit-tap-highlight-color:transparent}.knob-container-container.svelte-dko0zj.svelte-dko0zj{aspect-ratio:1/1;max-height:50%;margin-top:0.5rem;margin-right:0.5rem;display:flex;flex-direction:column;justify-content:center;align-items:center;pointer-events:all;user-select:none}.knob-container.svelte-dko0zj.svelte-dko0zj{box-sizing:border-box;-webkit-box-sizing:border-box;&:hover{\n      cursor: pointer;\n    };aspect-ratio:1/1;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;background-image:conic-gradient(from 45deg,\n      var(--secondary-color) 0deg 15deg,\n      var(--tertiary-color) 60deg 60deg,\n      var(--darken-color) 120deg 240deg,\n      var(--tertiary-color) 300deg 300deg,\n      var(--secondary-color) 345deg 360deg\n    );box-shadow:-.15em .15em .05em .02em rgba(0, 0, 0, 0.3);border-radius:50%;border:0.2rem solid white}.knob-container-container.svelte-dko0zj>.title.menu-toggle.svelte-dko0zj{background:white;color:black}.knob-container-container.svelte-dko0zj>.title.svelte-dko0zj{cursor:pointer;font-size:0.8rem !important;margin-top:0.5rem;color:white;width:100%;text-align:center;font-weight:bolder;top:5.5rem;user-select:none}.knob.svelte-dko0zj.svelte-dko0zj{display:block;aspect-ratio:1/1;height:100%;padding:0;border-radius:50%;color:var(--text-color);background-color:var(--tertiary-color);box-shadow:0 0 .3em rgba(255, 255, 255, 0.3) inset;transform-origin:50% 50%}.knob.svelte-dko0zj svg.svelte-dko0zj{width:100%;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,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 */");
}

function Knob_svelte_create_fragment(ctx) {
	let div3;
	let div1;
	let div0;
	let svg;
	let g;
	let path;
	let t0;
	let div2;
	let t1;
	let div2_class_value;
	let div2_style_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div3 = dom_element("div");
			div1 = dom_element("div");
			div0 = dom_element("div");
			svg = svg_element("svg");
			g = svg_element("g");
			path = svg_element("path");
			t0 = space();
			div2 = dom_element("div");
			t1 = dom_text(/*title*/ ctx[3]);
			attr_dev(path, "stroke-width", "10");
			attr_dev(path, "d", "M50 40 l0 -50");
			attr_dev(path, "class", "svelte-dko0zj");
			add_location(path, Knob_svelte_file, 78, 10, 2067);
			attr_dev(g, "fill", "none");
			attr_dev(g, "stroke", "currentColor");
			attr_dev(g, "class", "svelte-dko0zj");
			add_location(g, Knob_svelte_file, 77, 8, 2019);
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 100 100");
			attr_dev(svg, "class", "svelte-dko0zj");
			add_location(svg, Knob_svelte_file, 76, 6, 1956);
			attr_dev(div0, "class", "knob svelte-dko0zj");
			set_style(div0, "transform", "rotate(calc(" + /*rotation*/ ctx[5] + " * 1rad))");
			add_location(div0, Knob_svelte_file, 75, 4, 1851);
			attr_dev(div1, "class", "knob-container svelte-dko0zj");
			add_location(div1, Knob_svelte_file, 74, 2, 1818);
			attr_dev(div2, "class", div2_class_value = "title " + (/*triggerModal*/ ctx[1] ? "menu-toggle" : "") + " svelte-dko0zj");
			attr_dev(div2, "style", div2_style_value = "" + ((!/*modalHidden*/ ctx[0] && "outline: 1px solid white; outline-offset: 0.1rem;") + " " + (/*modal*/ ctx[2] && "cursor: pointer;")));
			add_location(div2, Knob_svelte_file, 83, 2, 2160);
			attr_dev(div3, "class", "knob-container-container svelte-dko0zj");
			add_location(div3, Knob_svelte_file, 73, 0, 1777);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div1);
			append_dev(div1, div0);
			append_dev(div0, svg);
			append_dev(svg, g);
			append_dev(g, path);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, t1);
			/*div2_binding*/ ctx[14](div2);

			if (!mounted) {
				dispose = listen_dev(div0, "pointerdown", /*pointerDown*/ ctx[6], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*rotation*/ 32) {
				set_style(div0, "transform", "rotate(calc(" + /*rotation*/ ctx[5] + " * 1rad))");
			}

			if (dirty & /*title*/ 8) set_data_dev(t1, /*title*/ ctx[3]);

			if (dirty & /*triggerModal*/ 2 && div2_class_value !== (div2_class_value = "title " + (/*triggerModal*/ ctx[1] ? "menu-toggle" : "") + " svelte-dko0zj")) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (dirty & /*modalHidden, modal*/ 5 && div2_style_value !== (div2_style_value = "" + ((!/*modalHidden*/ ctx[0] && "outline: 1px solid white; outline-offset: 0.1rem;") + " " + (/*modal*/ ctx[2] && "cursor: pointer;")))) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div3);
			}

			/*div2_binding*/ ctx[14](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: Knob_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function Knob_svelte_clamp(num, min, max) {
	return Math.max(min, Math.min(num, max));
}

function Knob_svelte_instance($$self, $$props, $$invalidate) {
	let valueRange;
	let rotation;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Knob', slots, []);
	let { value, min = 0, max = 1 } = $$props;
	let { rotRange = 2 * Math.PI * 0.83 } = $$props;
	let { pixelRange = 200 } = $$props;
	let { startRotation = -Math.PI * 0.83 } = $$props;
	let { triggerModal = undefined } = $$props;
	let { modal = undefined } = $$props;
	let knobElement;
	let { modalHidden = true } = $$props;
	let { title = "" } = $$props;
	let startY = 0, startValue = 0, startX = 0;

	function pointerMove({ clientX, clientY }) {
		let valueDiff = valueRange * (startY - clientY) / pixelRange;
		valueDiff -= valueRange * (startX - clientX) / pixelRange;
		$$invalidate(7, value = Knob_svelte_clamp(startValue + valueDiff, min, max));
	}

	function pointerDown(e) {
		let { clientX, clientY } = e;
		startY = clientY;
		startX = clientX;
		startValue = value;
		window.addEventListener('pointermove', pointerMove);
		window.addEventListener('pointerup', pointerUp);
		e.stopPropagation();
	}

	function pointerUp() {
		window.removeEventListener('pointermove', pointerMove);
		window.removeEventListener('pointerup', pointerUp);
	}

	let titleElement;

	onMount(() => {
		let pointerDown;

		let pointerUp = () => {
			if (modal) {
				triggerModal?.(modal);
				$$invalidate(0, modalHidden = modal.hidden);
			}

			titleElement.removeEventListener("pointerdown", pointerDown);
		};

		pointerDown = () => {
			titleElement.removeEventListener("pointerup", pointerUp);
			titleElement.addEventListener("pointerup", pointerUp);
		};

		titleElement.addEventListener("pointerdown", pointerDown);
	});

	$$self.$$.on_mount.push(function () {
		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
			console.warn("<Knob> was created without expected prop 'value'");
		}
	});

	const writable_props = [
		'value',
		'min',
		'max',
		'rotRange',
		'pixelRange',
		'startRotation',
		'triggerModal',
		'modal',
		'modalHidden',
		'title'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Knob> was created with unknown prop '${key}'`);
	});

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			titleElement = $$value;
			$$invalidate(4, titleElement);
		});
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(7, value = $$props.value);
		if ('min' in $$props) $$invalidate(8, min = $$props.min);
		if ('max' in $$props) $$invalidate(9, max = $$props.max);
		if ('rotRange' in $$props) $$invalidate(10, rotRange = $$props.rotRange);
		if ('pixelRange' in $$props) $$invalidate(11, pixelRange = $$props.pixelRange);
		if ('startRotation' in $$props) $$invalidate(12, startRotation = $$props.startRotation);
		if ('triggerModal' in $$props) $$invalidate(1, triggerModal = $$props.triggerModal);
		if ('modal' in $$props) $$invalidate(2, modal = $$props.modal);
		if ('modalHidden' in $$props) $$invalidate(0, modalHidden = $$props.modalHidden);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
	};

	$$self.$capture_state = () => ({
		SemiModal: SemiModal_svelte,
		onMount: onMount,
		value,
		min,
		max,
		rotRange,
		pixelRange,
		startRotation,
		triggerModal,
		modal,
		knobElement,
		modalHidden,
		title,
		startY,
		startValue,
		startX,
		clamp: Knob_svelte_clamp,
		pointerMove,
		pointerDown,
		pointerUp,
		titleElement,
		valueRange,
		rotation
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(7, value = $$props.value);
		if ('min' in $$props) $$invalidate(8, min = $$props.min);
		if ('max' in $$props) $$invalidate(9, max = $$props.max);
		if ('rotRange' in $$props) $$invalidate(10, rotRange = $$props.rotRange);
		if ('pixelRange' in $$props) $$invalidate(11, pixelRange = $$props.pixelRange);
		if ('startRotation' in $$props) $$invalidate(12, startRotation = $$props.startRotation);
		if ('triggerModal' in $$props) $$invalidate(1, triggerModal = $$props.triggerModal);
		if ('modal' in $$props) $$invalidate(2, modal = $$props.modal);
		if ('knobElement' in $$props) knobElement = $$props.knobElement;
		if ('modalHidden' in $$props) $$invalidate(0, modalHidden = $$props.modalHidden);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
		if ('startY' in $$props) startY = $$props.startY;
		if ('startValue' in $$props) startValue = $$props.startValue;
		if ('startX' in $$props) startX = $$props.startX;
		if ('titleElement' in $$props) $$invalidate(4, titleElement = $$props.titleElement);
		if ('valueRange' in $$props) $$invalidate(13, valueRange = $$props.valueRange);
		if ('rotation' in $$props) $$invalidate(5, rotation = $$props.rotation);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*max, min*/ 768) {
			$: $$invalidate(13, valueRange = max - min);
		}

		if ($$self.$$.dirty & /*startRotation, value, min, valueRange, rotRange*/ 13696) {
			$: $$invalidate(5, rotation = startRotation + (value - min) / valueRange * rotRange);
		}
	};

	return [
		modalHidden,
		triggerModal,
		modal,
		title,
		titleElement,
		rotation,
		pointerDown,
		value,
		min,
		max,
		rotRange,
		pixelRange,
		startRotation,
		valueRange,
		div2_binding
	];
}

class Knob extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			Knob_svelte_instance,
			Knob_svelte_create_fragment,
			safe_not_equal,
			{
				value: 7,
				min: 8,
				max: 9,
				rotRange: 10,
				pixelRange: 11,
				startRotation: 12,
				triggerModal: 1,
				modal: 2,
				modalHidden: 0,
				title: 3
			},
			Knob_svelte_add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Knob",
			options,
			id: Knob_svelte_create_fragment.name
		});
	}

	get value() {
		return this.$$.ctx[7];
	}

	set value(value) {
		this.$$set({ value });
		scheduler_flush();
	}

	get min() {
		return this.$$.ctx[8];
	}

	set min(min) {
		this.$$set({ min });
		scheduler_flush();
	}

	get max() {
		return this.$$.ctx[9];
	}

	set max(max) {
		this.$$set({ max });
		scheduler_flush();
	}

	get rotRange() {
		return this.$$.ctx[10];
	}

	set rotRange(rotRange) {
		this.$$set({ rotRange });
		scheduler_flush();
	}

	get pixelRange() {
		return this.$$.ctx[11];
	}

	set pixelRange(pixelRange) {
		this.$$set({ pixelRange });
		scheduler_flush();
	}

	get startRotation() {
		return this.$$.ctx[12];
	}

	set startRotation(startRotation) {
		this.$$set({ startRotation });
		scheduler_flush();
	}

	get triggerModal() {
		return this.$$.ctx[1];
	}

	set triggerModal(triggerModal) {
		this.$$set({ triggerModal });
		scheduler_flush();
	}

	get modal() {
		return this.$$.ctx[2];
	}

	set modal(modal) {
		this.$$set({ modal });
		scheduler_flush();
	}

	get modalHidden() {
		return this.$$.ctx[0];
	}

	set modalHidden(modalHidden) {
		this.$$set({ modalHidden });
		scheduler_flush();
	}

	get title() {
		return this.$$.ctx[3];
	}

	set title(title) {
		this.$$set({ title });
		scheduler_flush();
	}
}

/* harmony default export */ const Knob_svelte = (Knob);
// EXTERNAL MODULE: ./public/copy.svg
var copy = __webpack_require__(399);
var copy_default = /*#__PURE__*/__webpack_require__.n(copy);
// EXTERNAL MODULE: ./public/play.svg
var play = __webpack_require__(797);
var play_default = /*#__PURE__*/__webpack_require__.n(play);
;// CONCATENATED MODULE: ./src/components/BrushSizeWidget.svelte
/* src/components/BrushSizeWidget.svelte generated by Svelte v4.0.0 */


const { console: console_1 } = globals;



const BrushSizeWidget_svelte_file = "src/components/BrushSizeWidget.svelte";

function BrushSizeWidget_svelte_add_css(target) {
	append_styles(target, "svelte-1fb3c8w", ".svelte-1fb3c8w{user-select:none;-webkit-tap-highlight-color:transparent}.brush-preview.svelte-1fb3c8w{position:fixed;top:50%;left:50%;transform:translate(-50%, -50%)}.knob-selected.svelte-1fb3c8w{& :global(svg){\n      filter: invert(1);\n      background: black;\n    }}.knob-container.svelte-1fb3c8w{&:hover {\n\t\t\tcursor: pointer;\n\t\t};box-sizing:border-box;-webkit-box-sizing:border-box;aspect-ratio:1/1;max-height:50%;height:100%;display:flex;justify-content:center;align-items:center;background-image:conic-gradient(\n\t\t\tfrom 45deg,\n\t\t\tvar(--secondary-color) 0deg 15deg,\n\t\t\tvar(--tertiary-color) 60deg 60deg,\n\t\t\tvar(--darken-color) 120deg 240deg,\n\t\t\tvar(--tertiary-color) 300deg 300deg,\n\t\t\tvar(--secondary-color) 345deg 360deg\n\t\t);box-shadow:-0.15em 0.15em 0.05em 0.02em rgba(0, 0, 0, 0.3);border-radius:50%;margin-bottom:1.25rem;margin-right:1rem;pointer-events:all;user-select:none}.knob.svelte-1fb3c8w{display:block;aspect-ratio:1/1;height:100%;padding:0;color:var(--text-color);background-color:var(--tertiary-color);fill:white;transform-origin:50% 50%}.knob.svelte-1fb3c8w svg{width:100%;height:100%;fill:white}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJ1c2hTaXplV2lkZ2V0LnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUErRUMsZUFBRSxDQUNELFdBQVcsQ0FBRSxJQUFJLENBQ2pCLDJCQUEyQixDQUFFLFdBQzlCLENBQ0EsNkJBQWUsQ0FDZCxRQUFRLENBQUUsS0FBSyxDQUNmLEdBQUcsQ0FBRSxHQUFHLENBQ1IsSUFBSSxDQUFFLEdBQUcsQ0FDVCxTQUFTLENBQUUsVUFBVSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ2hDLENBQ0MsNkJBQWMsQ0FDWixDQUFDLENBQUMsUUFBUSxHQUFHLENBQUM7QUFDbEIsTUFBTSxRQUFRLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZCLE1BQU0sWUFBWSxLQUFLO0FBQ3ZCLEtBQ0UsQ0FDRCw4QkFBZ0IsQ0FDZixDQUFDLE1BQU0sQ0FBQztBQUNWLEdBQUcsUUFBUSxPQUFPO0FBQ2xCLEdBQUUsQ0FDQSxVQUFVLENBQUUsVUFBVSxDQUN0QixrQkFBa0IsQ0FBRSxVQUFVLENBRzlCLFlBQVksQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNqQixVQUFVLENBQUUsR0FBRyxDQUNmLE1BQU0sQ0FBRSxJQUFJLENBQ1osT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsTUFBTSxDQUN2QixXQUFXLENBQUUsTUFBTSxDQUNuQixnQkFBZ0IsQ0FBRTtBQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLO0FBQ2IsR0FBRyxJQUFJLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUs7QUFDcEMsR0FBRyxJQUFJLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUs7QUFDcEMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNO0FBQ3BDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNO0FBQ3RDLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNqQyxHQUFHLENBQ0QsVUFBVSxDQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUMzRCxhQUFhLENBQUUsR0FBRyxDQUNsQixhQUFhLENBQUUsT0FBTyxDQUN0QixZQUFZLENBQUUsSUFBSSxDQUNsQixjQUFjLENBQUUsR0FBRyxDQUNuQixXQUFXLENBQUUsSUFDZCxDQUVBLG9CQUFNLENBQ0wsT0FBTyxDQUFFLEtBQUssQ0FDZCxZQUFZLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDakIsTUFBTSxDQUFFLElBQUksQ0FFWixPQUFPLENBQUUsQ0FBQyxDQUNWLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUN4QixnQkFBZ0IsQ0FBRSxJQUFJLGdCQUFnQixDQUFDLENBQ3ZDLElBQUksQ0FBRSxLQUFLLENBQ1gsZ0JBQWdCLENBQUUsR0FBRyxDQUFDLEdBQ3ZCLENBRUEsb0JBQUssQ0FBUyxHQUFLLENBQ2xCLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixJQUFJLENBQUUsS0FDUCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJCcnVzaFNpemVXaWRnZXQuc3ZlbHRlIl19 */");
}

function BrushSizeWidget_svelte_create_fragment(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = dom_element("div");
			div0 = dom_element("div");
			t = space();
			div1 = dom_element("div");
			attr_dev(div0, "class", "brush-preview svelte-1fb3c8w");
			add_location(div0, BrushSizeWidget_svelte_file, 3, 1, 60);
			attr_dev(div1, "class", "knob svelte-1fb3c8w");
			toggle_class(div1, "knob-selected", /*dragging*/ ctx[0]);
			add_location(div1, BrushSizeWidget_svelte_file, 4, 1, 91);
			attr_dev(div2, "class", "knob-container svelte-1fb3c8w");
			add_location(div2, BrushSizeWidget_svelte_file, 2, 0, 30);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t);
			append_dev(div2, div1);
			div1.innerHTML = (copy_default());

			if (!mounted) {
				dispose = listen_dev(div1, "pointerdown", /*pointerDown*/ ctx[1], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*dragging*/ 1) {
				toggle_class(div1, "knob-selected", /*dragging*/ ctx[0]);
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BrushSizeWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function BrushSizeWidget_svelte_clamp(num, min, max) {
	return Math.max(min, Math.min(num, max));
}

function BrushSizeWidget_svelte_instance($$self, $$props, $$invalidate) {
	let valueRange;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BrushSizeWidget', slots, []);
	let { brush_sz = [0.2, 0.2] } = $$props;
	let { pixelRange = 200 } = $$props;
	let value = [0, 0];
	let min = 0;
	let max = 4;
	let { dragging = false } = $$props;
	let { stopped_dragging = false } = $$props;
	let startY = 0, startValue = [0, 0], startX = 0;

	function pointerMove({ clientX, clientY }) {
		let valueDiffY = valueRange * (startY - clientY) / pixelRange;
		let valueDiffX = valueRange * (startX - clientX) / pixelRange;
		$$invalidate(2, brush_sz[0] = BrushSizeWidget_svelte_clamp(startValue[0] - valueDiffX, min, max), brush_sz);
		$$invalidate(2, brush_sz[1] = BrushSizeWidget_svelte_clamp(startValue[1] + valueDiffY, min, max), brush_sz);
	}

	function pointerDown(e) {
		$$invalidate(0, dragging = true);
		let { clientX, clientY } = e;
		console.log('down');
		startY = clientY;
		startX = clientX;
		startValue = [...brush_sz];
		window.addEventListener('pointermove', pointerMove);
		window.addEventListener('pointerup', pointerUp);
		e.stopPropagation();
	}

	function pointerUp() {
		$$invalidate(0, dragging = false);
		$$invalidate(3, stopped_dragging = true);
		console.log('up');
		window.removeEventListener('pointermove', pointerMove);
		window.removeEventListener('pointerup', pointerUp);
	}

	const writable_props = ['brush_sz', 'pixelRange', 'dragging', 'stopped_dragging'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<BrushSizeWidget> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('brush_sz' in $$props) $$invalidate(2, brush_sz = $$props.brush_sz);
		if ('pixelRange' in $$props) $$invalidate(4, pixelRange = $$props.pixelRange);
		if ('dragging' in $$props) $$invalidate(0, dragging = $$props.dragging);
		if ('stopped_dragging' in $$props) $$invalidate(3, stopped_dragging = $$props.stopped_dragging);
	};

	$$self.$capture_state = () => ({
		brushSizeIcon: (copy_default()),
		playingIcon: (play_default()),
		brush_sz,
		pixelRange,
		value,
		min,
		max,
		dragging,
		stopped_dragging,
		startY,
		startValue,
		startX,
		clamp: BrushSizeWidget_svelte_clamp,
		pointerMove,
		pointerDown,
		pointerUp,
		valueRange
	});

	$$self.$inject_state = $$props => {
		if ('brush_sz' in $$props) $$invalidate(2, brush_sz = $$props.brush_sz);
		if ('pixelRange' in $$props) $$invalidate(4, pixelRange = $$props.pixelRange);
		if ('value' in $$props) value = $$props.value;
		if ('min' in $$props) $$invalidate(10, min = $$props.min);
		if ('max' in $$props) $$invalidate(11, max = $$props.max);
		if ('dragging' in $$props) $$invalidate(0, dragging = $$props.dragging);
		if ('stopped_dragging' in $$props) $$invalidate(3, stopped_dragging = $$props.stopped_dragging);
		if ('startY' in $$props) startY = $$props.startY;
		if ('startValue' in $$props) startValue = $$props.startValue;
		if ('startX' in $$props) startX = $$props.startX;
		if ('valueRange' in $$props) valueRange = $$props.valueRange;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$: valueRange = max - min;
	return [dragging, pointerDown, brush_sz, stopped_dragging, pixelRange];
}

class BrushSizeWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			BrushSizeWidget_svelte_instance,
			BrushSizeWidget_svelte_create_fragment,
			safe_not_equal,
			{
				brush_sz: 2,
				pixelRange: 4,
				dragging: 0,
				stopped_dragging: 3
			},
			BrushSizeWidget_svelte_add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BrushSizeWidget",
			options,
			id: BrushSizeWidget_svelte_create_fragment.name
		});
	}

	get brush_sz() {
		return this.$$.ctx[2];
	}

	set brush_sz(brush_sz) {
		this.$$set({ brush_sz });
		scheduler_flush();
	}

	get pixelRange() {
		return this.$$.ctx[4];
	}

	set pixelRange(pixelRange) {
		this.$$set({ pixelRange });
		scheduler_flush();
	}

	get dragging() {
		return this.$$.ctx[0];
	}

	set dragging(dragging) {
		this.$$set({ dragging });
		scheduler_flush();
	}

	get stopped_dragging() {
		return this.$$.ctx[3];
	}

	set stopped_dragging(stopped_dragging) {
		this.$$set({ stopped_dragging });
		scheduler_flush();
	}
}

/* harmony default export */ const BrushSizeWidget_svelte = (BrushSizeWidget);
;// CONCATENATED MODULE: ./src/stuff.ts



function assert(v) {
    if (!v)
        debugger;
}
class BrushTexture {
    gpu_tex = undefined;
    path = undefined;
    idx;
    static async create(path, idx) {
        let gpu_tex = await Texture.from_image_path(path);
        return {
            gpu_tex,
            path,
            idx,
        };
    }
}
class Project {
    id = Date.now();
    saved = false;
    brush_strokes = [];
    canvasRes = [1024, 2048];
    constructor() { }
    push_stroke(stroke) {
        this.brush_strokes.push(stroke);
    }
}
class Utils {
    static isOnMobile = () => {
        let check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) ||
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    };
    static gamma_correct(u, inverse = false, modify = false) {
        const exponent = inverse ? 1 / 0.45454545454545 : 0.45454545454545;
        if (!modify)
            u = [...u];
        u.forEach((v, i, a) => {
            a[i] = pow(v, exponent);
        });
        return u;
    }
    static css_contain(u, input_res, tex_res) {
        let user_res = input_res;
        let canvas_res = tex_res;
        let input_ratio = user_res[0] / user_res[1];
        let tex_ratio = canvas_res[0] / canvas_res[1];
        let ratio = input_ratio / tex_ratio;
        if (ratio > 1) {
            return [u[0] * ratio, u[1]];
        }
        else {
            return [u[0], u[1] / ratio];
        }
    }
    static screen_NDC_to_canvas_NDC(u, user_tex, canvas_tex, zoom, pan) {
        let user_res = user_tex.res;
        let canvas_res = canvas_tex.res;
        u = [...u];
        let input_ratio = user_res[0] / user_res[1];
        let tex_ratio = canvas_res[0] / canvas_res[1];
        let ratio = input_ratio / tex_ratio;
        if (ratio > 1) {
            u[0] *= ratio / zoom;
            u[1] /= zoom;
            let cont = Utils.css_contain([1, 1], user_res, canvas_res);
            u[0] -= pan[0] * cont[0];
            u[1] -= pan[1] * cont[1];
        }
        else {
            u[0] /= zoom;
            u[1] /= ratio * zoom;
            let cont = Utils.css_contain([1, 1], user_res, canvas_res);
            u[0] -= pan[0] * cont[0];
            u[1] -= pan[1] * cont[1];
        }
        return u;
    }
    static texture_NDC_to_texture_pixel_coords(u, tex) {
        return [(u[0] * 0.5 + 0.5) * tex.res[0], (u[1] * 0.5 + 0.5) * tex.res[1]];
    }
}

;// CONCATENATED MODULE: ./src/brush_stroke.ts

var BlendingColourSpace;
(function (BlendingColourSpace) {
    BlendingColourSpace[BlendingColourSpace["RGB"] = 0] = "RGB";
    BlendingColourSpace[BlendingColourSpace["OkLCH"] = 1] = "OkLCH";
    BlendingColourSpace[BlendingColourSpace["Pigments"] = 2] = "Pigments";
})(BlendingColourSpace || (BlendingColourSpace = {}));
class DrawParams {
    tex_dynamics = 0.3;
    tex_lch_dynamics = [0, 0, 0.2];
    tex_stretch = [1, 0.2];
    blending_colour_space = BlendingColourSpace.Pigments;
    constructor(tex_dynamics, tex_lch_dynamics, tex_stretch, blending_colour_space) {
        this.tex_dynamics = tex_dynamics;
        this.tex_lch_dynamics = [...tex_lch_dynamics];
        this.tex_stretch = [...tex_stretch];
        this.blending_colour_space = blending_colour_space;
    }
}
class BrushPreset {
    selected_brush_type = BrushType.Blobs;
    chaos_lch = [0, 0, 1];
    chaos_speed = 0.3;
    chaos = 0.7;
    dynamics = 0.3;
    stroke_opacity_dynamics = [0, 1];
    stroke_size_dynamics = [0.7, 1];
    rot_jitter = 0;
    pos_jitter = 0;
    selected_brush_texture = undefined;
    tex_dynamics = 0.3;
    tex_lch_dynamics = [0, 0, 0.02];
    tex_stretch = [1, 0.2];
    constructor() { }
}
var BrushType;
(function (BrushType) {
    BrushType[BrushType["Blobs"] = 0] = "Blobs";
    BrushType[BrushType["Long"] = 1] = "Long";
    BrushType[BrushType["Tri"] = 2] = "Tri";
})(BrushType || (BrushType = {}));
class BrushStroke {
    brush_type;
    brush_texture;
    draw_params;
    positions = [];
    rotations = [];
    sizes = [];
    opacities = [];
    colours = [];
    idx = 0;
    constructor(brush_type, draw_params, brush_texture) {
        this.draw_params = draw_params;
        this.brush_type = brush_type;
        this.brush_texture = brush_texture;
    }
    push_stroke(position, rotation, size, opacity, colour) {
        const curr_idx = this.idx;
        this.positions.length += 2;
        this.rotations.length += 2;
        this.sizes.length += 2;
        this.opacities.length += 1;
        this.colours.length += 3;
        this.positions[curr_idx * 2] = position[0];
        this.positions[curr_idx * 2 + 1] = position[1];
        this.sizes[curr_idx * 2] = size[0];
        this.sizes[curr_idx * 2 + 1] = size[1];
        this.rotations[curr_idx * 2] = rotation[0];
        this.rotations[curr_idx * 2 + 1] = rotation[1];
        this.opacities[curr_idx] = opacity;
        this.colours[curr_idx * 3] = colour[0];
        this.colours[curr_idx * 3 + 1] = colour[1];
        this.colours[curr_idx * 3 + 2] = colour[2];
        this.idx++;
    }
}

;// CONCATENATED MODULE: ./src/components/BrushTypeWidget.svelte
/* src/components/BrushTypeWidget.svelte generated by Svelte v4.0.0 */


const { Object: Object_1 } = globals;



const BrushTypeWidget_svelte_file = "src/components/BrushTypeWidget.svelte";

function BrushTypeWidget_svelte_add_css(target) {
	append_styles(target, "svelte-1rr123e", ".svelte-1rr123e.svelte-1rr123e{user-select:none;-webkit-tap-highlight-color:transparent}.knob-container-container.svelte-1rr123e.svelte-1rr123e{aspect-ratio:1/1;max-height:50%;margin-top:0.5rem;margin-bottom:auto;margin-right:1.5rem;display:flex;flex-direction:column;justify-content:center;align-items:center;pointer-events:all;user-select:none;cursor:pointer;min-width:7rem}.knob-container-container.svelte-1rr123e>.title.menu-toggle.svelte-1rr123e{background:white;color:black}.knob-container-container.svelte-1rr123e>.title.svelte-1rr123e{font-size:0.8rem !important;margin-top:0.5rem;color:white;width:100%;text-align:center;font-weight:bolder;top:5.5rem;user-select:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJ1c2hUeXBlV2lkZ2V0LnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF5RUUsOEJBQUMsQ0FDQyxXQUFXLENBQUUsSUFBSSxDQUNqQiw0QkFBNEIsV0FDOUIsQ0FDQSx1REFBeUIsQ0FDdkIsWUFBWSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQ2pCLFVBQVUsQ0FBRSxHQUFHLENBQ2YsVUFBVSxDQUFFLE1BQU0sQ0FDbEIsYUFBYSxDQUFFLElBQUksQ0FDbkIsWUFBWSxDQUFFLE1BQU0sQ0FDcEIsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsTUFBTSxDQUN0QixlQUFlLENBQUUsTUFBTSxDQUN2QixXQUFXLENBQUUsTUFBTSxDQUNuQixjQUFjLENBQUUsR0FBRyxDQUNuQixXQUFXLENBQUUsSUFBSSxDQUNqQixNQUFNLENBQUUsT0FBTyxDQUNmLFNBQVMsQ0FBRSxJQUNiLENBQ0Esd0NBQXlCLENBQUMsTUFBTSwyQkFBWSxDQUMxQyxVQUFVLENBQUUsS0FBSyxDQUNqQixLQUFLLENBQUUsS0FDVCxDQUNBLHdDQUF5QixDQUFDLHFCQUFPLENBRy9CLFNBQVMsQ0FBRSxNQUFNLENBQUMsVUFBVSxDQUU1QixVQUFVLENBQUUsTUFBTSxDQUNsQixLQUFLLENBQUUsS0FBSyxDQUNaLEtBQUssQ0FBRSxJQUFJLENBQ1gsVUFBVSxDQUFFLE1BQU0sQ0FDbEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsR0FBRyxDQUFFLE1BQU0sQ0FDWCxXQUFXLENBQUUsSUFDZiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJCcnVzaFR5cGVXaWRnZXQuc3ZlbHRlIl19 */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[8] = list;
	child_ctx[9] = i;
	return child_ctx;
}

// (43:2) {#each brush_types as brush_type, i}
function create_each_block(ctx) {
	let div;
	let i = /*i*/ ctx[9];
	let mounted;
	let dispose;
	const assign_div = () => /*div_binding*/ ctx[3](div, i);
	const unassign_div = () => /*div_binding*/ ctx[3](null, i);

	function click_handler() {
		return /*click_handler*/ ctx[4](/*brush_type*/ ctx[7], /*i*/ ctx[9]);
	}

	const block = {
		c: function create() {
			div = dom_element("div");
			div.textContent = `${/*brush_type*/ ctx[7]}`;
			attr_dev(div, "class", "title menu-toggle svelte-1rr123e");
			attr_dev(div, "role", "button");
			attr_dev(div, "tabindex", "0");
			set_style(div, "cursor", "pointer");
			add_location(div, BrushTypeWidget_svelte_file, 50, 4, 1112);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			assign_div();

			if (!mounted) {
				dispose = listen_dev(div, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (i !== /*i*/ ctx[9]) {
				unassign_div();
				i = /*i*/ ctx[9];
				assign_div();
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			unassign_div();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(43:2) {#each brush_types as brush_type, i}",
		ctx
	});

	return block;
}

function BrushTypeWidget_svelte_create_fragment(ctx) {
	let div;
	let each_value = ensure_array_like_dev(/*brush_types*/ ctx[2]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = dom_element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "knob-container-container svelte-1rr123e");
			add_location(div, BrushTypeWidget_svelte_file, 48, 0, 1030);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*elements, curr_brush, BrushType, brush_types*/ 7) {
				each_value = ensure_array_like_dev(/*brush_types*/ ctx[2]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BrushTypeWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function BrushTypeWidget_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BrushTypeWidget', slots, []);
	let { curr_brush } = $$props;
	let selected_brush_type;
	let elements = [];
	let brush_types = [];

	for (let type of Object.keys(BrushType).filter(v => isNaN(Number(v)))) {
		brush_types.push(type);
		elements.length++;
	}

	const update_styles = () => {
		let k = 0;

		try {
			for (let element of elements) {
				let brush_type = brush_types[k];
				let brush_type_int = BrushType[brush_types[k]];

				if (brush_type_int === selected_brush_type) {
					element.style.outline = '1px solid white';
					element.style.outlineOffset = '0.1rem';
				} else {
					element.style.outline = '0px solid white';
				}

				k++;
			}
		} catch(_) {
			
		}
	};

	onMount(() => {
		update_styles();
	});

	$$self.$$.on_mount.push(function () {
		if (curr_brush === undefined && !('curr_brush' in $$props || $$self.$$.bound[$$self.$$.props['curr_brush']])) {
			console.warn("<BrushTypeWidget> was created without expected prop 'curr_brush'");
		}
	});

	const writable_props = ['curr_brush'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BrushTypeWidget> was created with unknown prop '${key}'`);
	});

	function div_binding($$value, i) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			elements[i] = $$value;
			$$invalidate(1, elements);
		});
	}

	const click_handler = (brush_type, i) => {
		$$invalidate(0, curr_brush.selected_brush_type = BrushType[brush_type], curr_brush);
		let k = 0;

		for (let element of elements) {
			if (k === i) {
				element.style.outline = '1px solid white';
				element.style.outlineOffset = '0.1rem';
			} else {
				element.style.outline = '0px solid white';
			}

			k++;
		}
	};

	$$self.$$set = $$props => {
		if ('curr_brush' in $$props) $$invalidate(0, curr_brush = $$props.curr_brush);
	};

	$$self.$capture_state = () => ({
		BrushPreset: BrushPreset,
		BrushType: BrushType,
		onMount: onMount,
		curr_brush,
		selected_brush_type,
		elements,
		brush_types,
		update_styles
	});

	$$self.$inject_state = $$props => {
		if ('curr_brush' in $$props) $$invalidate(0, curr_brush = $$props.curr_brush);
		if ('selected_brush_type' in $$props) selected_brush_type = $$props.selected_brush_type;
		if ('elements' in $$props) $$invalidate(1, elements = $$props.elements);
		if ('brush_types' in $$props) $$invalidate(2, brush_types = $$props.brush_types);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*curr_brush*/ 1) {
			$: {
				selected_brush_type = curr_brush.selected_brush_type;
				update_styles();
			}
		}
	};

	return [curr_brush, elements, brush_types, div_binding, click_handler];
}

class BrushTypeWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, BrushTypeWidget_svelte_instance, BrushTypeWidget_svelte_create_fragment, safe_not_equal, { curr_brush: 0 }, BrushTypeWidget_svelte_add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BrushTypeWidget",
			options,
			id: BrushTypeWidget_svelte_create_fragment.name
		});
	}

	get curr_brush() {
		return this.$$.ctx[0];
	}

	set curr_brush(curr_brush) {
		this.$$set({ curr_brush });
		scheduler_flush();
	}
}

/* harmony default export */ const BrushTypeWidget_svelte = (BrushTypeWidget);
;// CONCATENATED MODULE: ./src/components/BrushPresetWidget.svelte
/* src/components/BrushPresetWidget.svelte generated by Svelte v4.0.0 */





const BrushPresetWidget_svelte_file = "src/components/BrushPresetWidget.svelte";

function BrushPresetWidget_svelte_add_css(target) {
	append_styles(target, "svelte-ddgqm3", ".svelte-ddgqm3.svelte-ddgqm3{user-select:none;-webkit-tap-highlight-color:transparent}.knob-container-container.svelte-ddgqm3.svelte-ddgqm3{aspect-ratio:1/1;max-height:50%;margin-top:0.7rem;margin-bottom:auto;margin-right:3.25rem;display:grid;grid-template-columns:fit-content(8ch) fit-content(8ch) 1fr;pointer-events:all;user-select:none;cursor:pointer;width:fit-content}.knob-container-container.svelte-ddgqm3>.title.menu-toggle.svelte-ddgqm3{background:white;color:black}.knob-container-container.svelte-ddgqm3>.title.svelte-ddgqm3{padding:0.2rem;font-size:0.8rem !important;margin:0.3rem;color:white;text-align:center;font-weight:bolder;user-select:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJ1c2hQcmVzZXRXaWRnZXQuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXNEa0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQnJ1c2hQcmVzZXRXaWRnZXQuc3ZlbHRlIl19 */");
}

function BrushPresetWidget_svelte_get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[6] = list;
	child_ctx[7] = i;
	return child_ctx;
}

// (28:2) {#each brush_presets as preset, i}
function BrushPresetWidget_svelte_create_each_block(ctx) {
	let div;
	let i = /*i*/ ctx[7];
	let mounted;
	let dispose;
	const assign_div = () => /*div_binding*/ ctx[3](div, i);
	const unassign_div = () => /*div_binding*/ ctx[3](null, i);

	function click_handler() {
		return /*click_handler*/ ctx[4](/*preset*/ ctx[5], /*i*/ ctx[7]);
	}

	const block = {
		c: function create() {
			div = dom_element("div");
			div.textContent = `${/*i*/ ctx[7].toString()}`;
			attr_dev(div, "class", "title menu-toggle svelte-ddgqm3");
			attr_dev(div, "role", "button");
			attr_dev(div, "tabindex", "0");
			set_style(div, "cursor", "pointer");
			add_location(div, BrushPresetWidget_svelte_file, 32, 4, 714);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			assign_div();

			if (!mounted) {
				dispose = listen_dev(div, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (i !== /*i*/ ctx[7]) {
				unassign_div();
				i = /*i*/ ctx[7];
				assign_div();
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			unassign_div();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BrushPresetWidget_svelte_create_each_block.name,
		type: "each",
		source: "(28:2) {#each brush_presets as preset, i}",
		ctx
	});

	return block;
}

function BrushPresetWidget_svelte_create_fragment(ctx) {
	let div;
	let each_value = ensure_array_like_dev(/*brush_presets*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = BrushPresetWidget_svelte_create_each_block(BrushPresetWidget_svelte_get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = dom_element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "knob-container-container svelte-ddgqm3");
			add_location(div, BrushPresetWidget_svelte_file, 30, 0, 634);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*elements, selected_brush_preset, brush_presets*/ 7) {
				each_value = ensure_array_like_dev(/*brush_presets*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = BrushPresetWidget_svelte_get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = BrushPresetWidget_svelte_create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BrushPresetWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function BrushPresetWidget_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BrushPresetWidget', slots, []);
	let { brush_presets } = $$props;
	let { selected_brush_preset } = $$props;
	let elements = [];

	for (let preset of brush_presets) {
		elements.length++;
	}

	onMount(() => {
		let k = 0;

		for (let element of elements) {
			if (selected_brush_preset === brush_presets[k]) {
				element.style.outline = '1px solid white';
				element.style.outlineOffset = '0.1rem';
			} else {
				element.style.outline = '0px solid white';
			}

			k++;
		}
	});

	$$self.$$.on_mount.push(function () {
		if (brush_presets === undefined && !('brush_presets' in $$props || $$self.$$.bound[$$self.$$.props['brush_presets']])) {
			console.warn("<BrushPresetWidget> was created without expected prop 'brush_presets'");
		}

		if (selected_brush_preset === undefined && !('selected_brush_preset' in $$props || $$self.$$.bound[$$self.$$.props['selected_brush_preset']])) {
			console.warn("<BrushPresetWidget> was created without expected prop 'selected_brush_preset'");
		}
	});

	const writable_props = ['brush_presets', 'selected_brush_preset'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BrushPresetWidget> was created with unknown prop '${key}'`);
	});

	function div_binding($$value, i) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			elements[i] = $$value;
			$$invalidate(2, elements);
		});
	}

	const click_handler = (preset, i) => {
		$$invalidate(0, selected_brush_preset = preset);
		let k = 0;

		for (let element of elements) {
			if (k === i) {
				element.style.outline = '1px solid white';
				element.style.outlineOffset = '0.1rem';
			} else {
				element.style.outline = '0px solid white';
			}

			k++;
		}
	};

	$$self.$$set = $$props => {
		if ('brush_presets' in $$props) $$invalidate(1, brush_presets = $$props.brush_presets);
		if ('selected_brush_preset' in $$props) $$invalidate(0, selected_brush_preset = $$props.selected_brush_preset);
	};

	$$self.$capture_state = () => ({
		BrushPreset: BrushPreset,
		BrushType: BrushType,
		onMount: onMount,
		brush_presets,
		selected_brush_preset,
		elements
	});

	$$self.$inject_state = $$props => {
		if ('brush_presets' in $$props) $$invalidate(1, brush_presets = $$props.brush_presets);
		if ('selected_brush_preset' in $$props) $$invalidate(0, selected_brush_preset = $$props.selected_brush_preset);
		if ('elements' in $$props) $$invalidate(2, elements = $$props.elements);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selected_brush_preset, brush_presets, elements, div_binding, click_handler];
}

class BrushPresetWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			BrushPresetWidget_svelte_instance,
			BrushPresetWidget_svelte_create_fragment,
			safe_not_equal,
			{
				brush_presets: 1,
				selected_brush_preset: 0
			},
			BrushPresetWidget_svelte_add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BrushPresetWidget",
			options,
			id: BrushPresetWidget_svelte_create_fragment.name
		});
	}

	get brush_presets() {
		return this.$$.ctx[1];
	}

	set brush_presets(brush_presets) {
		this.$$set({ brush_presets });
		scheduler_flush();
	}

	get selected_brush_preset() {
		return this.$$.ctx[0];
	}

	set selected_brush_preset(selected_brush_preset) {
		this.$$set({ selected_brush_preset });
		scheduler_flush();
	}
}

/* harmony default export */ const BrushPresetWidget_svelte = (BrushPresetWidget);
// EXTERNAL MODULE: ./public/undo.svg
var public_undo = __webpack_require__(897);
var undo_default = /*#__PURE__*/__webpack_require__.n(public_undo);
// EXTERNAL MODULE: ./public/redo.svg
var public_redo = __webpack_require__(56);
var redo_default = /*#__PURE__*/__webpack_require__.n(public_redo);
;// CONCATENATED MODULE: ./src/components/UndoRedoWidget.svelte
/* src/components/UndoRedoWidget.svelte generated by Svelte v4.0.0 */





const UndoRedoWidget_svelte_file = "src/components/UndoRedoWidget.svelte";

function UndoRedoWidget_svelte_add_css(target) {
	append_styles(target, "svelte-c3axie", ".svelte-c3axie{user-select:none;-webkit-tap-highlight-color:transparent}.knob-container.svelte-c3axie{cursor:pointer;&:hover{\n      cursor: pointer;\n    };box-sizing:border-box;-webkit-box-sizing:border-box;aspect-ratio:1/1;max-height:50%;height:100%;display:flex;justify-content:center;align-items:center;border-radius:50%;margin-right:1rem;margin-bottom:auto;margin-top:auto;pointer-events:all;user-select:none}.knob.svelte-c3axie{&:active{\n      filter: invert(1);\n      background: black;\n    };display:block;aspect-ratio:1/1;height:100%;padding:0;color:var(--text-color);fill:white;transform-origin:50% 50%}.knob.svelte-c3axie svg{fill:white;width:100%;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5kb1JlZG9XaWRnZXQuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXlCRSxjQUFDLENBQ0MsV0FBVyxDQUFFLElBQUksQ0FDakIsNEJBQTRCLFdBQzlCLENBQ0EsNkJBQWUsQ0FDYixNQUFNLENBQUUsT0FBTyxDQUNmLENBQUMsTUFBTTtBQUNYLE1BQU0sUUFBUSxPQUFPO0FBQ3JCLEtBQUksQ0FDQSxVQUFVLENBQUUsVUFBVSxDQUN0QixrQkFBa0IsQ0FBRSxVQUFVLENBRzlCLFlBQVksQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNqQixVQUFVLENBQUUsR0FBRyxDQUNmLE1BQU0sQ0FBRSxJQUFJLENBQ1osT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsTUFBTSxDQUN2QixXQUFXLENBQUUsTUFBTSxDQUNuQixhQUFhLENBQUUsR0FBRyxDQUNsQixZQUFZLENBQUUsSUFBSSxDQUNsQixhQUFhLENBQUUsSUFBSSxDQUNuQixVQUFVLENBQUUsSUFBSSxDQUNoQixjQUFjLENBQUUsR0FBRyxDQUNuQixXQUFXLENBQUUsSUFDZixDQUVBLG1CQUFNLENBQ0osQ0FBQyxPQUFPO0FBQ1osTUFBTSxRQUFRLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZCLE1BQU0sWUFBWSxLQUFLO0FBQ3ZCLEtBQUksQ0FDQSxPQUFPLENBQUUsS0FBSyxDQUNkLFlBQVksQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNqQixNQUFNLENBQUUsSUFBSSxDQUVaLE9BQU8sQ0FBRSxDQUFDLENBQ1YsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLENBQ3hCLElBQUksQ0FBRSxLQUFLLENBQ1gsZ0JBQWdCLENBQUUsR0FBRyxDQUFDLEdBQ3hCLENBRUEsbUJBQUssQ0FBUyxHQUFJLENBQ2hCLElBQUksQ0FBRSxLQUFLLENBQ1gsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFDViIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJVbmRvUmVkb1dpZGdldC5zdmVsdGUiXX0= */");
}

function UndoRedoWidget_svelte_create_fragment(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = dom_element("div");
			div0 = dom_element("div");
			t = space();
			div1 = dom_element("div");
			attr_dev(div0, "class", "knob svelte-c3axie");
			add_location(div0, UndoRedoWidget_svelte_file, 15, 2, 212);
			attr_dev(div1, "class", "knob svelte-c3axie");
			add_location(div1, UndoRedoWidget_svelte_file, 18, 2, 285);
			attr_dev(div2, "class", "knob-container svelte-c3axie");
			add_location(div2, UndoRedoWidget_svelte_file, 14, 0, 181);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			div0.innerHTML = (undo_default());
			append_dev(div2, t);
			append_dev(div2, div1);
			div1.innerHTML = (redo_default());

			if (!mounted) {
				dispose = [
					listen_dev(div0, "click", /*click_handler*/ ctx[2], false, false, false, false),
					listen_dev(div1, "click", /*click_handler_1*/ ctx[3], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: utils_noop,
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			mounted = false;
			utils_run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: UndoRedoWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function UndoRedoWidget_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UndoRedoWidget', slots, []);
	let { redo } = $$props;
	let { undo } = $$props;

	$$self.$$.on_mount.push(function () {
		if (redo === undefined && !('redo' in $$props || $$self.$$.bound[$$self.$$.props['redo']])) {
			console.warn("<UndoRedoWidget> was created without expected prop 'redo'");
		}

		if (undo === undefined && !('undo' in $$props || $$self.$$.bound[$$self.$$.props['undo']])) {
			console.warn("<UndoRedoWidget> was created without expected prop 'undo'");
		}
	});

	const writable_props = ['redo', 'undo'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UndoRedoWidget> was created with unknown prop '${key}'`);
	});

	const click_handler = () => undo();
	const click_handler_1 = () => redo();

	$$self.$$set = $$props => {
		if ('redo' in $$props) $$invalidate(0, redo = $$props.redo);
		if ('undo' in $$props) $$invalidate(1, undo = $$props.undo);
	};

	$$self.$capture_state = () => ({ undoIcon: (undo_default()), redoIcon: (redo_default()), redo, undo });

	$$self.$inject_state = $$props => {
		if ('redo' in $$props) $$invalidate(0, redo = $$props.redo);
		if ('undo' in $$props) $$invalidate(1, undo = $$props.undo);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [redo, undo, click_handler, click_handler_1];
}

class UndoRedoWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, UndoRedoWidget_svelte_instance, UndoRedoWidget_svelte_create_fragment, safe_not_equal, { redo: 0, undo: 1 }, UndoRedoWidget_svelte_add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UndoRedoWidget",
			options,
			id: UndoRedoWidget_svelte_create_fragment.name
		});
	}

	get redo() {
		return this.$$.ctx[0];
	}

	set redo(redo) {
		this.$$set({ redo });
		scheduler_flush();
	}

	get undo() {
		return this.$$.ctx[1];
	}

	set undo(undo) {
		this.$$set({ undo });
		scheduler_flush();
	}
}

/* harmony default export */ const UndoRedoWidget_svelte = (UndoRedoWidget);
// EXTERNAL MODULE: ./public/solve.svg
var solve = __webpack_require__(878);
var solve_default = /*#__PURE__*/__webpack_require__.n(solve);
// EXTERNAL MODULE: ./public/launch.svg
var launch = __webpack_require__(485);
var launch_default = /*#__PURE__*/__webpack_require__.n(launch);
// EXTERNAL MODULE: ./public/resize.svg
var resize = __webpack_require__(866);
var resize_default = /*#__PURE__*/__webpack_require__.n(resize);
// EXTERNAL MODULE: ./public/forbid.svg
var forbid = __webpack_require__(461);
var forbid_default = /*#__PURE__*/__webpack_require__.n(forbid);
// EXTERNAL MODULE: ./public/ok.svg
var ok = __webpack_require__(713);
var ok_default = /*#__PURE__*/__webpack_require__.n(ok);
// EXTERNAL MODULE: ./public/capture.svg
var capture = __webpack_require__(445);
var capture_default = /*#__PURE__*/__webpack_require__.n(capture);
// EXTERNAL MODULE: ./public/download.svg
var download = __webpack_require__(28);
var download_default = /*#__PURE__*/__webpack_require__.n(download);
// EXTERNAL MODULE: ./public/time.svg
var time = __webpack_require__(179);
var time_default = /*#__PURE__*/__webpack_require__.n(time);
// EXTERNAL MODULE: ./node_modules/dropbox/dist/Dropbox-sdk.min.js
var Dropbox_sdk_min = __webpack_require__(956);
;// CONCATENATED MODULE: ./node_modules/@firebase/util/dist/index.esm2017.js
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
const CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */
    NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */
    NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */
    SDK_VERSION: '${JSCORE_VERSION}'
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Throws an error if the provided assertion is falsy
 */
const index_esm2017_assert = function (assertion, message) {
    if (!assertion) {
        throw assertionError(message);
    }
};
/**
 * Returns an Error object suitable for throwing.
 */
const assertionError = function (message) {
    return new Error('Firebase Database (' +
        CONSTANTS.SDK_VERSION +
        ') INTERNAL ASSERT FAILED: ' +
        message);
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const stringToByteArray$1 = function (str) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if ((c & 0xfc00) === 0xd800 &&
            i + 1 < str.length &&
            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */
const byteArrayToString = function (bytes) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let pos = 0, c = 0;
    while (pos < bytes.length) {
        const c1 = bytes[pos++];
        if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
        }
        else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
        }
        else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        }
        else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
const base64 = {
    /**
     * Maps bytes to characters.
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */
    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */
    get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */
    get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */
    HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeByteArray(input, webSafe) {
        if (!Array.isArray(input)) {
            throw Error('encodeByteArray takes an array as a parameter');
        }
        this.init_();
        const byteToCharMap = webSafe
            ? this.byteToCharMapWebSafe_
            : this.byteToCharMap_;
        const output = [];
        for (let i = 0; i < input.length; i += 3) {
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
            let outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeString(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */
    decodeString(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */
    decodeStringToByteArray(input, webSafe) {
        this.init_();
        const charToByteMap = webSafe
            ? this.charToByteMapWebSafe_
            : this.charToByteMap_;
        const output = [];
        for (let i = 0; i < input.length;) {
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw new DecodeBase64StringError();
            }
            const outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 !== 64) {
                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 !== 64) {
                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (let i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * An error encountered while decoding base64 string.
 */
class DecodeBase64StringError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'DecodeBase64StringError';
    }
}
/**
 * URL-safe base64 encoding
 */
const base64Encode = function (str) {
    const utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */
const base64urlEncodeWithoutPadding = function (str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */
const base64Decode = function (str) {
    try {
        return base64.decodeString(str, true);
    }
    catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            const dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (const prop in source) {
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 * @public
 */
function getGlobal() {
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof __webpack_require__.g !== 'undefined') {
        return __webpack_require__.g;
    }
    throw new Error('Unable to locate global object.');
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
/**
 * Attempt to read defaults from a JSON string provided to
 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
 * The dots are in parens because certain compilers (Vite?) cannot
 * handle seeing that variable in comments.
 * See https://github.com/firebase/firebase-js-sdk/issues/6838
 */
const getDefaultsFromEnvVariable = () => {
    if (typeof process === 'undefined' || typeof process.env === 'undefined') {
        return;
    }
    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
    if (defaultsJsonString) {
        return JSON.parse(defaultsJsonString);
    }
};
const getDefaultsFromCookie = () => {
    if (typeof document === 'undefined') {
        return;
    }
    let match;
    try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
    }
    catch (e) {
        // Some environments such as Angular Universal SSR have a
        // `document` object but error on accessing `document.cookie`.
        return;
    }
    const decoded = match && base64Decode(match[1]);
    return decoded && JSON.parse(decoded);
};
/**
 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
 * (1) if such an object exists as a property of `globalThis`
 * (2) if such an object was provided on a shell environment variable
 * (3) if such an object exists in a cookie
 * @public
 */
const getDefaults = () => {
    try {
        return (getDefaultsFromGlobal() ||
            getDefaultsFromEnvVariable() ||
            getDefaultsFromCookie());
    }
    catch (e) {
        /**
         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
         * to any environment case we have not accounted for. Log to
         * info instead of swallowing so we can find these unknown cases
         * and add paths for them if needed.
         */
        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
    }
};
/**
 * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
 * @public
 */
const getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };
/**
 * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a pair of hostname and port like `["::1", 4000]` if available
 * @public
 */
const getDefaultEmulatorHostnameAndPort = (productName) => {
    const host = getDefaultEmulatorHost(productName);
    if (!host) {
        return undefined;
    }
    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
    }
    // eslint-disable-next-line no-restricted-globals
    const port = parseInt(host.substring(separatorIndex + 1), 10);
    if (host[0] === '[') {
        // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
        return [host.substring(1, separatorIndex - 1), port];
    }
    else {
        return [host.substring(0, separatorIndex), port];
    }
};
/**
 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
 * @public
 */
const getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };
/**
 * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
 * prefixed by "_")
 * @public
 */
const getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Deferred {
    constructor() {
        this.reject = () => { };
        this.resolve = () => { };
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */
    wrapCallback(callback) {
        return (error, value) => {
            if (error) {
                this.reject(error);
            }
            else {
                this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(() => { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    }
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createMockUserToken(token, projectId) {
    if (token.uid) {
        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    }
    // Unsecured JWTs use "none" as the algorithm.
    const header = {
        alg: 'none',
        type: 'JWT'
    };
    const project = projectId || 'demo-project';
    const iat = token.iat || 0;
    const sub = token.sub || token.user_id;
    if (!sub) {
        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    }
    const payload = Object.assign({ 
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
            sign_in_provider: 'custom',
            identities: {}
        } }, token);
    // Unsecured JWTs use the empty string as a signature.
    const signature = '';
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join('.');
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */
function index_esm2017_getUA() {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */
function isMobileCordova() {
    return (typeof window !== 'undefined' &&
        // @ts-ignore Setting up an broadly applicable index signature for Window
        // just to deal with this case would probably be a bad idea.
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(index_esm2017_getUA()));
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected or specified.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    var _a;
    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
    if (forceEnvironment === 'node') {
        return true;
    }
    else if (forceEnvironment === 'browser') {
        return false;
    }
    try {
        return (Object.prototype.toString.call(__webpack_require__.g.process) === '[object process]');
    }
    catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */
function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    const runtime = typeof chrome === 'object'
        ? chrome.runtime
        : typeof browser === 'object'
            ? browser.runtime
            : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */
function isReactNative() {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
}
/** Detects Electron apps. */
function isElectron() {
    return index_esm2017_getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */
function isIE() {
    const ua = index_esm2017_getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */
function isUWP() {
    return index_esm2017_getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */
function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */
function isSafari() {
    return (!isNode() &&
        navigator.userAgent.includes('Safari') &&
        !navigator.userAgent.includes('Chrome'));
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */
function isIndexedDBAvailable() {
    try {
        return typeof indexedDB === 'object';
    }
    catch (e) {
        return false;
    }
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */
function validateIndexedDBOpenable() {
    return new Promise((resolve, reject) => {
        try {
            let preExist = true;
            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
            const request = self.indexedDB.open(DB_CHECK_NAME);
            request.onsuccess = () => {
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) {
                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                }
                resolve(true);
            };
            request.onupgradeneeded = () => {
                preExist = false;
            };
            request.onerror = () => {
                var _a;
                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
            };
        }
        catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */
function areCookiesEnabled() {
    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {
        return false;
    }
    return true;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // Typescript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */
const ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class FirebaseError extends Error {
    constructor(
    /** The error code for this error. */
    code, message, 
    /** Custom data for this error. */
    customData) {
        super(message);
        this.code = code;
        this.customData = customData;
        /** The custom name for all FirebaseErrors. */
        this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ErrorFactory.prototype.create);
        }
    }
}
class ErrorFactory {
    constructor(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
    }
}
function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key) => {
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
    });
}
const PATTERN = /\{\$([^}]+)}/g;

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */
function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */
function stringify(data) {
    return JSON.stringify(data);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const decode = function (token) {
    let header = {}, claims = {}, data = {}, signature = '';
    try {
        const parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    }
    catch (e) { }
    return {
        header,
        claims,
        data,
        signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const isValidTimestamp = function (token) {
    const claims = decode(token).claims;
    const now = Math.floor(new Date().getTime() / 1000);
    let validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) {
            validSince = claims['nbf'];
        }
        else if (claims.hasOwnProperty('iat')) {
            validSince = claims['iat'];
        }
        if (claims.hasOwnProperty('exp')) {
            validUntil = claims['exp'];
        }
        else {
            // token will expire after 24h by default
            validUntil = validSince + 86400;
        }
    }
    return (!!now &&
        !!validSince &&
        !!validUntil &&
        now >= validSince &&
        now <= validUntil);
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const issuedAtTime = function (token) {
    const claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
        return claims['iat'];
    }
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const isValidFormat = function (token) {
    const decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const isAdmin = function (token) {
    const claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
    }
    else {
        return undefined;
    }
}
function isEmpty(obj) {
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return false;
        }
    }
    return true;
}
function map(obj, fn, contextObj) {
    const res = {};
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            res[key] = fn.call(contextObj, obj[key], key, obj);
        }
    }
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */
function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys) {
        if (!bKeys.includes(k)) {
            return false;
        }
        const aProp = a[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) {
                return false;
            }
        }
        else if (aProp !== bProp) {
            return false;
        }
    }
    for (const k of bKeys) {
        if (!aKeys.includes(k)) {
            return false;
        }
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === 'object';
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Rejects if the given promise doesn't resolve in timeInMS milliseconds.
 * @internal
 */
function promiseWithTimeout(promise, timeInMS = 2000) {
    const deferredPromise = new Deferred();
    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);
    promise.then(deferredPromise.resolve, deferredPromise.reject);
    return deferredPromise.promise;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */
function index_esm2017_querystring(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams)) {
        if (Array.isArray(value)) {
            value.forEach(arrayVal => {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
            });
        }
        else {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
        }
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */
function querystringDecode(querystring) {
    const obj = {};
    const tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach(token => {
        if (token) {
            const [key, value] = token.split('=');
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */
function extractQuerystring(url) {
    const queryStart = url.indexOf('?');
    if (!queryStart) {
        return '';
    }
    const fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */
/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */
class Sha1 {
    constructor() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */
        this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */
        this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */
        this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */
        this.pad_ = [];
        /**
         * @private {number}
         */
        this.inbuf_ = 0;
        /**
         * @private {number}
         */
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (let i = 1; i < this.blockSize; ++i) {
            this.pad_[i] = 0;
        }
        this.reset();
    }
    reset() {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */
    compress_(buf, offset) {
        if (!offset) {
            offset = 0;
        }
        const W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') {
            for (let i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                    (buf.charCodeAt(offset) << 24) |
                        (buf.charCodeAt(offset + 1) << 16) |
                        (buf.charCodeAt(offset + 2) << 8) |
                        buf.charCodeAt(offset + 3);
                offset += 4;
            }
        }
        else {
            for (let i = 0; i < 16; i++) {
                W[i] =
                    (buf[offset] << 24) |
                        (buf[offset + 1] << 16) |
                        (buf[offset + 2] << 8) |
                        buf[offset + 3];
                offset += 4;
            }
        }
        // expand to 80 words
        for (let i = 16; i < 80; i++) {
            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for (let i = 0; i < 80; i++) {
            if (i < 40) {
                if (i < 20) {
                    f = d ^ (b & (c ^ d));
                    k = 0x5a827999;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            }
            else {
                if (i < 60) {
                    f = (b & c) | (d & (b | c));
                    k = 0x8f1bbcdc;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0xca62c1d6;
                }
            }
            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
    }
    update(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) {
            return;
        }
        if (length === undefined) {
            length = bytes.length;
        }
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while (n < length) {
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) {
                while (n <= lengthMinusBlock) {
                    this.compress_(bytes, n);
                    n += this.blockSize;
                }
            }
            if (typeof bytes === 'string') {
                while (n < length) {
                    buf[inbuf] = bytes.charCodeAt(n);
                    ++inbuf;
                    ++n;
                    if (inbuf === this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
            else {
                while (n < length) {
                    buf[inbuf] = bytes[n];
                    ++inbuf;
                    ++n;
                    if (inbuf === this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    }
    /** @override */
    digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) {
            this.update(this.pad_, 56 - this.inbuf_);
        }
        else {
            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        // Add # bits.
        for (let i = this.blockSize - 1; i >= 56; i--) {
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        let n = 0;
        for (let i = 0; i < 5; i++) {
            for (let j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
            }
        }
        return digest;
    }
}

/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    const proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
class ObserverProxy {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    constructor(executor, onNoObservers) {
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(() => {
            executor(this);
        })
            .catch(e => {
            this.error(e);
        });
    }
    next(value) {
        this.forEachObserver((observer) => {
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer) => {
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer) => {
            observer.complete();
        });
        this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error,
                complete
            };
        }
        if (observer.next === undefined) {
            observer.next = index_esm2017_noop;
        }
        if (observer.error === undefined) {
            observer.error = index_esm2017_noop;
        }
        if (observer.complete === undefined) {
            observer.complete = index_esm2017_noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
                try {
                    if (this.finalError) {
                        observer.error(this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    }
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    }
    forEachObserver(fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (let i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    }
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    sendOne(i, fn) {
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(() => {
            if (this.observers !== undefined && this.observers[i] !== undefined) {
                try {
                    fn(this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    }
    close(err) {
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(() => {
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/** Turn synchronous function into one called asynchronously. */
// eslint-disable-next-line @typescript-eslint/ban-types
function index_esm2017_async(fn, onError) {
    return (...args) => {
        Promise.resolve(true)
            .then(() => {
            fn(...args);
        })
            .catch((error) => {
            if (onError) {
                onError(error);
            }
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (const method of methods) {
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function index_esm2017_noop() {
    // do nothing
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */
const validateArgCount = function (fnName, minCount, maxCount, argCount) {
    let argError;
    if (argCount < minCount) {
        argError = 'at least ' + minCount;
    }
    else if (argCount > maxCount) {
        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    }
    if (argError) {
        const error = fnName +
            ' failed: Was called with ' +
            argCount +
            (argCount === 1 ? ' argument.' : ' arguments.') +
            ' Expects ' +
            argError +
            '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */
function errorPrefix(fnName, argName) {
    return `${fnName} failed: ${argName} argument `;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */
function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) {
        return;
    }
    if (typeof namespace !== 'string') {
        //TODO: I should do more validation here. We only allow certain chars in namespaces.
        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
    }
}
function validateCallback(fnName, argumentName, 
// eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) {
        return;
    }
    if (typeof callback !== 'function') {
        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
    }
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) {
        return;
    }
    if (typeof context !== 'object' || context === null) {
        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
    }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */
const stringToByteArray = function (str) {
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            const high = c - 0xd800; // the high 10 bits.
            i++;
            index_esm2017_assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if (c < 65536) {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */
const stringLength = function (str) {
    let p = 0;
    for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
            p++;
        }
        else if (c < 2048) {
            p += 2;
        }
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        }
        else {
            p += 3;
        }
    }
    return p;
};

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copied from https://stackoverflow.com/a/2117523
 * Generates a new uuid.
 * @public
 */
const uuidv4 = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The amount of milliseconds to exponentially increase.
 */
const DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */
const DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */
const MAX_VALUE_MILLIS = (/* unused pure expression or super */ null && (4 * 60 * 60 * 1000)); // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */
const RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */
function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    const randomWait = Math.round(
    // A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR *
        currBaseValue *
        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
        // if we add or subtract.
        (Math.random() - 0.5) *
        2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provide English ordinal letters after a number
 */
function ordinal(i) {
    if (!Number.isFinite(i)) {
        return `${i}`;
    }
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    const cent = i % 100;
    if (cent >= 10 && cent <= 20) {
        return 'th';
    }
    const dec = i % 10;
    if (dec === 1) {
        return 'st';
    }
    if (dec === 2) {
        return 'nd';
    }
    if (dec === 3) {
        return 'rd';
    }
    return 'th';
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function index_esm2017_getModularInstance(service) {
    if (service && service._delegate) {
        return service._delegate;
    }
    else {
        return service;
    }
}



;// CONCATENATED MODULE: ./node_modules/@firebase/component/dist/esm/index.esm2017.js


/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
class Component {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */
    constructor(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */
        this.serviceProps = {};
        this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
        this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
    }
    setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    }
    setServiceProps(props) {
        this.serviceProps = props;
        return this;
    }
    setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_ENTRY_NAME = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */
class Provider {
    constructor(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */
    get(identifier) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()) {
                // initialize the service if it can be auto-initialized
                try {
                    const instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    if (instance) {
                        deferred.resolve(instance);
                    }
                }
                catch (e) {
                    // when the instance factory throws an exception during get(), it should not cause
                    // a fatal error. We just return the unresolved promise in this case.
                }
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) ||
            this.shouldAutoInitialize()) {
            try {
                return this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
            }
            catch (e) {
                if (optional) {
                    return null;
                }
                else {
                    throw e;
                }
            }
        }
        else {
            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) {
                return null;
            }
            else {
                throw Error(`Service ${this.name} is not available`);
            }
        }
    }
    getComponent() {
        return this.component;
    }
    setComponent(component) {
        if (component.name !== this.name) {
            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        }
        if (this.component) {
            throw Error(`Component for ${this.name} has already been provided`);
        }
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) {
            return;
        }
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) {
            try {
                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
            }
            catch (e) {
                // when the instance factory for an eager Component throws an exception during the eager
                // initialization, it should not cause a fatal error.
                // TODO: Investigate if we need to make it configurable, because some component may want to cause
                // a fatal error in this case?
            }
        }
        // Create service instances for the pending promises and resolve them
        // NOTE: if this.multipleInstances is false, only the default instance will be created
        // and all promises with resolve with it regardless of the identifier.
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
            }
            catch (e) {
                // when the instance factory throws an exception, it should not cause
                // a fatal error. We just leave the promise unresolved.
            }
        }
    }
    clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
            ...services
                .filter(service => 'INTERNAL' in service) // legacy services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map(service => service.INTERNAL.delete()),
            ...services
                .filter(service => '_delete' in service) // modularized services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map(service => service._delete())
        ]);
    }
    isComponentSet() {
        return this.component != null;
    }
    isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
    }
    getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
        const { options = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        }
        if (!this.isComponentSet()) {
            throw Error(`Component ${this.name} has not been registered yet`);
        }
        const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
        });
        // resolve any pending promise waiting for the service instance
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) {
                instanceDeferred.resolve(instance);
            }
        }
        return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */
    onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) {
            callback(existingInstance, normalizedIdentifier);
        }
        return () => {
            existingCallbacks.delete(callback);
        };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */
    invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) {
            return;
        }
        for (const callback of callbacks) {
            try {
                callback(instance, identifier);
            }
            catch (_a) {
                // ignore errors in the onInit callback
            }
        }
    }
    getOrInitializeService({ instanceIdentifier, options = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */
            this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */
            if (this.component.onInstanceCreated) {
                try {
                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                }
                catch (_a) {
                    // ignore errors in the onInstanceCreatedCallback
                }
            }
        }
        return instance || null;
    }
    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        }
        else {
            return identifier; // assume multiple instances are supported before the component is provided.
        }
    }
    shouldAutoInitialize() {
        return (!!this.component &&
            this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */);
    }
}
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */
class ComponentContainer {
    constructor(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */
    addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        }
        provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            // delete the existing provider from the container, so we can register the new component
            this.providers.delete(component.name);
        }
        this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */
    getProvider(name) {
        if (this.providers.has(name)) {
            return this.providers.get(name);
        }
        // create a Provider for a service that hasn't registered with Firebase
        const provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    }
    getProviders() {
        return Array.from(this.providers.values());
    }
}



;// CONCATENATED MODULE: ./node_modules/@firebase/logger/dist/esm/index.esm2017.js
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A container for all of the Logger instances
 */
const instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
const levelStringToEnum = {
    'debug': LogLevel.DEBUG,
    'verbose': LogLevel.VERBOSE,
    'info': LogLevel.INFO,
    'warn': LogLevel.WARN,
    'error': LogLevel.ERROR,
    'silent': LogLevel.SILENT
};
/**
 * The default log level
 */
const defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
const ConsoleMethod = {
    [LogLevel.DEBUG]: 'log',
    [LogLevel.VERBOSE]: 'log',
    [LogLevel.INFO]: 'info',
    [LogLevel.WARN]: 'warn',
    [LogLevel.ERROR]: 'error'
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
const defaultLogHandler = (instance, logType, ...args) => {
    if (logType < instance.logLevel) {
        return;
    }
    const now = new Date().toISOString();
    const method = ConsoleMethod[logType];
    if (method) {
        console[method](`[${now}]  ${instance.name}:`, ...args);
    }
    else {
        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
    }
};
class Logger {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    constructor(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */
        this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */
        this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */
        instances.push(this);
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(val) {
        if (!(val in LogLevel)) {
            throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        }
        this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    }
    get logHandler() {
        return this._logHandler;
    }
    set logHandler(val) {
        if (typeof val !== 'function') {
            throw new TypeError('Value assigned to `logHandler` must be a function');
        }
        this._logHandler = val;
    }
    get userLogHandler() {
        return this._userLogHandler;
    }
    set userLogHandler(val) {
        this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */
    debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
    }
    log(...args) {
        this._userLogHandler &&
            this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
    }
    info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
    }
    warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
    }
    error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
    }
}
function setLogLevel(level) {
    instances.forEach(inst => {
        inst.setLogLevel(level);
    });
}
function index_esm2017_setUserLogHandler(logCallback, options) {
    for (const instance of instances) {
        let customLogLevel = null;
        if (options && options.level) {
            customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
            instance.userLogHandler = null;
        }
        else {
            instance.userLogHandler = (instance, level, ...args) => {
                const message = args
                    .map(arg => {
                    if (arg == null) {
                        return null;
                    }
                    else if (typeof arg === 'string') {
                        return arg;
                    }
                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
                        return arg.toString();
                    }
                    else if (arg instanceof Error) {
                        return arg.message;
                    }
                    else {
                        try {
                            return JSON.stringify(arg);
                        }
                        catch (ignored) {
                            return null;
                        }
                    }
                })
                    .filter(arg => arg)
                    .join(' ');
                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                    logCallback({
                        level: LogLevel[level].toLowerCase(),
                        message,
                        args,
                        type: instance.name
                    });
                }
            };
        }
    }
}



;// CONCATENATED MODULE: ./node_modules/idb/build/wrap-idb-value.js
const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return (idbProxyableTypes ||
        (idbProxyableTypes = [
            IDBDatabase,
            IDBObjectStore,
            IDBIndex,
            IDBCursor,
            IDBTransaction,
        ]));
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return (cursorAdvanceMethods ||
        (cursorAdvanceMethods = [
            IDBCursor.prototype.advance,
            IDBCursor.prototype.continue,
            IDBCursor.prototype.continuePrimaryKey,
        ]));
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
        const unlisten = () => {
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = () => {
            resolve(wrap_idb_value_wrap(request.result));
            unlisten();
        };
        const error = () => {
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise
        .then((value) => {
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) {
            cursorRequestMap.set(value, request);
        }
        // Catching to avoid "Uncaught Promise exceptions"
    })
        .catch(() => { });
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx))
        return;
    const done = new Promise((resolve, reject) => {
        const unlisten = () => {
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = () => {
            resolve();
            unlisten();
        };
        const error = () => {
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done')
                return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') {
                return target.objectStoreNames || transactionStoreNamesMap.get(target);
            }
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') {
                return receiver.objectStoreNames[1]
                    ? undefined
                    : receiver.objectStore(receiver.objectStoreNames[0]);
            }
        }
        // Else transform whatever we get back.
        return wrap_idb_value_wrap(target[prop]);
    },
    set(target, prop, value) {
        target[prop] = value;
        return true;
    },
    has(target, prop) {
        if (target instanceof IDBTransaction &&
            (prop === 'done' || prop === 'store')) {
            return true;
        }
        return prop in target;
    },
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction &&
        !('objectStoreNames' in IDBTransaction.prototype)) {
        return function (storeNames, ...args) {
            const tx = func.call(unwrap(this), storeNames, ...args);
            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
            return wrap_idb_value_wrap(tx);
        };
    }
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) {
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            func.apply(unwrap(this), args);
            return wrap_idb_value_wrap(cursorRequestMap.get(this));
        };
    }
    return function (...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap_idb_value_wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === 'function')
        return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction)
        cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
        return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap_idb_value_wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest)
        return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value))
        return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value) => reverseTransformCache.get(value);



;// CONCATENATED MODULE: ./node_modules/idb/build/index.js



/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */
function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = wrap_idb_value_wrap(request);
    if (upgrade) {
        request.addEventListener('upgradeneeded', (event) => {
            upgrade(wrap_idb_value_wrap(request.result), event.oldVersion, event.newVersion, wrap_idb_value_wrap(request.transaction), event);
        });
    }
    if (blocked) {
        request.addEventListener('blocked', (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event.newVersion, event));
    }
    openPromise
        .then((db) => {
        if (terminated)
            db.addEventListener('close', () => terminated());
        if (blocking) {
            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
        }
    })
        .catch(() => { });
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */
function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) {
        request.addEventListener('blocked', (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event));
    }
    return wrap(request).then(() => undefined);
}

const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
const writeMethods = ['put', 'add', 'delete', 'clear'];
const cachedMethods = new Map();
function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase &&
        !(prop in target) &&
        typeof prop === 'string')) {
        return;
    }
    if (cachedMethods.get(prop))
        return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
        !(isWrite || readMethods.includes(targetFuncName))) {
        return;
    }
    const method = async function (storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex)
            target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done,
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
replaceTraps((oldTraps) => ({
    ...oldTraps,
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
}));



;// CONCATENATED MODULE: ./node_modules/@firebase/app/dist/esm/index.esm2017.js






/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PlatformLoggerServiceImpl {
    constructor(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers
            .map(provider => {
            if (isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            }
            else {
                return null;
            }
        })
            .filter(logString => logString)
            .join(' ');
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */
function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* ComponentType.VERSION */;
}

const name$o = "@firebase/app";
const version$1 = "0.9.13";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger = new Logger('@firebase/app');

const name$n = "@firebase/app-compat";

const name$m = "@firebase/analytics-compat";

const name$l = "@firebase/analytics";

const name$k = "@firebase/app-check-compat";

const name$j = "@firebase/app-check";

const name$i = "@firebase/auth";

const name$h = "@firebase/auth-compat";

const name$g = "@firebase/database";

const name$f = "@firebase/database-compat";

const name$e = "@firebase/functions";

const name$d = "@firebase/functions-compat";

const name$c = "@firebase/installations";

const name$b = "@firebase/installations-compat";

const name$a = "@firebase/messaging";

const name$9 = "@firebase/messaging-compat";

const name$8 = "@firebase/performance";

const name$7 = "@firebase/performance-compat";

const name$6 = "@firebase/remote-config";

const name$5 = "@firebase/remote-config-compat";

const name$4 = "@firebase/storage";

const name$3 = "@firebase/storage-compat";

const name$2 = "@firebase/firestore";

const name$1 = "@firebase/firestore-compat";

const index_esm2017_name = "firebase";
const version = "9.23.0";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The default app name
 *
 * @internal
 */
const index_esm2017_DEFAULT_ENTRY_NAME = '[DEFAULT]';
const PLATFORM_LOG_STRING = {
    [name$o]: 'fire-core',
    [name$n]: 'fire-core-compat',
    [name$l]: 'fire-analytics',
    [name$m]: 'fire-analytics-compat',
    [name$j]: 'fire-app-check',
    [name$k]: 'fire-app-check-compat',
    [name$i]: 'fire-auth',
    [name$h]: 'fire-auth-compat',
    [name$g]: 'fire-rtdb',
    [name$f]: 'fire-rtdb-compat',
    [name$e]: 'fire-fn',
    [name$d]: 'fire-fn-compat',
    [name$c]: 'fire-iid',
    [name$b]: 'fire-iid-compat',
    [name$a]: 'fire-fcm',
    [name$9]: 'fire-fcm-compat',
    [name$8]: 'fire-perf',
    [name$7]: 'fire-perf-compat',
    [name$6]: 'fire-rc',
    [name$5]: 'fire-rc-compat',
    [name$4]: 'fire-gcs',
    [name$3]: 'fire-gcs-compat',
    [name$2]: 'fire-fst',
    [name$1]: 'fire-fst-compat',
    'fire-js': 'fire-js',
    [index_esm2017_name]: 'fire-js-all'
};

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @internal
 */
const _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */
function _addComponent(app, component) {
    try {
        app.container.addComponent(component);
    }
    catch (e) {
        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */
function _addOrOverwriteComponent(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */
function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    _components.set(componentName, component);
    // add the component to existing app instances
    for (const app of _apps.values()) {
        _addComponent(app, component);
    }
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */
function _getProvider(app, name) {
    const heartbeatController = app.container
        .getProvider('heartbeat')
        .getImmediate({ optional: true });
    if (heartbeatController) {
        void heartbeatController.triggerHeartbeat();
    }
    return app.container.getProvider(name);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */
function _removeServiceInstance(app, name, instanceIdentifier = index_esm2017_DEFAULT_ENTRY_NAME) {
    _getProvider(app, name).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */
function _clearComponents() {
    _components.clear();
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERRORS = {
    ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " +
        'call initializeApp() first',
    ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}",
    ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
    ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
    ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
        'Firebase App instance.',
    ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
    ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'
};
const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FirebaseAppImpl {
    constructor(options, config, container) {
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled =
            config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    checkDestroyed() {
        if (this.isDeleted) {
            throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */, { appName: this._name });
        }
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The current SDK version.
 *
 * @public
 */
const SDK_VERSION = version;
function initializeApp(_options, rawConfig = {}) {
    let options = _options;
    if (typeof rawConfig !== 'object') {
        const name = rawConfig;
        rawConfig = { name };
    }
    const config = Object.assign({ name: index_esm2017_DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
    const name = config.name;
    if (typeof name !== 'string' || !name) {
        throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
            appName: String(name)
        });
    }
    options || (options = getDefaultAppConfig());
    if (!options) {
        throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */);
    }
    const existingApp = _apps.get(name);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if (deepEqual(options, existingApp.options) &&
            deepEqual(config, existingApp.config)) {
            return existingApp;
        }
        else {
            throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */, { appName: name });
        }
    }
    const container = new ComponentContainer(name);
    for (const component of _components.values()) {
        container.addComponent(component);
    }
    const newApp = new FirebaseAppImpl(options, config, container);
    _apps.set(name, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */
function getApp(name = index_esm2017_DEFAULT_ENTRY_NAME) {
    const app = _apps.get(name);
    if (!app && name === index_esm2017_DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
        return initializeApp();
    }
    if (!app) {
        throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */, { appName: name });
    }
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */
function getApps() {
    return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */
async function deleteApp(app) {
    const name = app.name;
    if (_apps.has(name)) {
        _apps.delete(name);
        await Promise.all(app.container
            .getProviders()
            .map(provider => provider.delete()));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */
function registerVersion(libraryKeyOrName, version, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) {
        library += `-${variant}`;
    }
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version}":`
        ];
        if (libraryMismatch) {
            warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        }
        if (libraryMismatch && versionMismatch) {
            warning.push('and');
        }
        if (versionMismatch) {
            warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
        }
        logger.warn(warning.join(' '));
        return;
    }
    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* ComponentType.VERSION */));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */
function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') {
        throw ERROR_FACTORY.create("invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */);
    }
    setUserLogHandler(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */
function index_esm2017_setLogLevel(logLevel) {
    setLogLevel$1(logLevel);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DB_NAME = 'firebase-heartbeat-database';
const DB_VERSION = 1;
const STORE_NAME = 'firebase-heartbeat-store';
let dbPromise = null;
function getDbPromise() {
    if (!dbPromise) {
        dbPromise = openDB(DB_NAME, DB_VERSION, {
            upgrade: (db, oldVersion) => {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (oldVersion) {
                    case 0:
                        db.createObjectStore(STORE_NAME);
                }
            }
        }).catch(e => {
            throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */, {
                originalErrorMessage: e.message
            });
        });
    }
    return dbPromise;
}
async function readHeartbeatsFromIndexedDB(app) {
    try {
        const db = await getDbPromise();
        const result = await db
            .transaction(STORE_NAME)
            .objectStore(STORE_NAME)
            .get(computeKey(app));
        return result;
    }
    catch (e) {
        if (e instanceof FirebaseError) {
            logger.warn(e.message);
        }
        else {
            const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */, {
                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            logger.warn(idbGetError.message);
        }
    }
}
async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME, 'readwrite');
        const objectStore = tx.objectStore(STORE_NAME);
        await objectStore.put(heartbeatObject, computeKey(app));
        await tx.done;
    }
    catch (e) {
        if (e instanceof FirebaseError) {
            logger.warn(e.message);
        }
        else {
            const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */, {
                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            logger.warn(idbGetError.message);
        }
    }
}
function computeKey(app) {
    return `${app.name}!${app.options.appId}`;
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const MAX_HEADER_BYTES = 1024;
// 30 days
const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
class HeartbeatServiceImpl {
    constructor(container) {
        this.container = container;
        /**
         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
         * the header string.
         * Stores one record per date. This will be consolidated into the standard
         * format of one record per user agent string before being sent as a header.
         * Populated from indexedDB when the controller is instantiated and should
         * be kept in sync with indexedDB.
         * Leave public for easier testing.
         */
        this._heartbeatsCache = null;
        const app = this.container.getProvider('app').getImmediate();
        this._storage = new HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then(result => {
            this._heartbeatsCache = result;
            return result;
        });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */
    async triggerHeartbeat() {
        const platformLogger = this.container
            .getProvider('platform-logger')
            .getImmediate();
        // This is the "Firebase user agent" string from the platform logger
        // service, not the browser user agent.
        const agent = platformLogger.getPlatformInfoString();
        const date = getUTCDateString();
        if (this._heartbeatsCache === null) {
            this._heartbeatsCache = await this._heartbeatsCachePromise;
        }
        // Do not store a heartbeat if one is already stored for this day
        // or if a header has already been sent today.
        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
            return;
        }
        else {
            // There is no entry for this date. Create one.
            this._heartbeatsCache.heartbeats.push({ date, agent });
        }
        // Remove entries older than 30 days.
        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {
            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
            const now = Date.now();
            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
        });
        return this._storage.overwrite(this._heartbeatsCache);
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */
    async getHeartbeatsHeader() {
        if (this._heartbeatsCache === null) {
            await this._heartbeatsCachePromise;
        }
        // If it's still null or the array is empty, there is no data to send.
        if (this._heartbeatsCache === null ||
            this._heartbeatsCache.heartbeats.length === 0) {
            return '';
        }
        const date = getUTCDateString();
        // Extract as many heartbeats from the cache as will fit under the size limit.
        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
        // Store last sent date to prevent another being logged/sent for the same day.
        this._heartbeatsCache.lastSentHeartbeatDate = date;
        if (unsentEntries.length > 0) {
            // Store any unsent entries if they exist.
            this._heartbeatsCache.heartbeats = unsentEntries;
            // This seems more likely than emptying the array (below) to lead to some odd state
            // since the cache isn't empty and this will be called again on the next request,
            // and is probably safest if we await it.
            await this._storage.overwrite(this._heartbeatsCache);
        }
        else {
            this._heartbeatsCache.heartbeats = [];
            // Do not wait for this, to reduce latency.
            void this._storage.overwrite(this._heartbeatsCache);
        }
        return headerString;
    }
}
function getUTCDateString() {
    const today = new Date();
    // Returns date format 'YYYY-MM-DD'
    return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
    // Heartbeats grouped by user agent in the standard format to be sent in
    // the header.
    const heartbeatsToSend = [];
    // Single date format heartbeats that are not sent.
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache) {
        // Look for an existing entry with the same user agent.
        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
            // If no entry for this user agent exists, create one.
            heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [singleDateHeartbeat.date]
            });
            if (countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
            }
        }
        else {
            heartbeatEntry.dates.push(singleDateHeartbeat.date);
            // If the header would exceed max size, remove the added date
            // and stop adding to the header.
            if (countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
            }
        }
        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
        // quota and the loop breaks early.)
        unsentEntries = unsentEntries.slice(1);
    }
    return {
        heartbeatsToSend,
        unsentEntries
    };
}
class HeartbeatStorageImpl {
    constructor(app) {
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
        if (!isIndexedDBAvailable()) {
            return false;
        }
        else {
            return validateIndexedDBOpenable()
                .then(() => true)
                .catch(() => false);
        }
    }
    /**
     * Read all heartbeats.
     */
    async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
            return { heartbeats: [] };
        }
        else {
            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
            return idbHeartbeatObject || { heartbeats: [] };
        }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
            return;
        }
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats
            });
        }
    }
    // add heartbeats
    async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
            return;
        }
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                    ...existingHeartbeatsObject.heartbeats,
                    ...heartbeatsObject.heartbeats
                ]
            });
        }
    }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */
function countBytes(heartbeatsCache) {
    // base64 has a restricted set of characters, all of which should be 1 byte.
    return base64urlEncodeWithoutPadding(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(variant) {
    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
    // Register `app` package.
    registerVersion(name$o, version$1, variant);
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    registerVersion(name$o, version$1, 'esm2017');
    // Register platform SDK identifier (no version).
    registerVersion('fire-js', '');
}

/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */
registerCoreComponents('');



;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.mjs
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

/* harmony default export */ const tslib_es6 = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
});

;// CONCATENATED MODULE: ./node_modules/@firebase/auth/dist/esm2017/index-e3d5d3f4.js






/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * An enum of factors that may be used for multifactor authentication.
 *
 * @public
 */
const FactorId = {
    /** Phone as second factor */
    PHONE: 'phone',
    TOTP: 'totp'
};
/**
 * Enumeration of supported providers.
 *
 * @public
 */
const ProviderId = {
    /** Facebook provider ID */
    FACEBOOK: 'facebook.com',
    /** GitHub provider ID */
    GITHUB: 'github.com',
    /** Google provider ID */
    GOOGLE: 'google.com',
    /** Password provider */
    PASSWORD: 'password',
    /** Phone provider */
    PHONE: 'phone',
    /** Twitter provider ID */
    TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported sign-in methods.
 *
 * @public
 */
const SignInMethod = {
    /** Email link sign in method */
    EMAIL_LINK: 'emailLink',
    /** Email/password sign in method */
    EMAIL_PASSWORD: 'password',
    /** Facebook sign in method */
    FACEBOOK: 'facebook.com',
    /** GitHub sign in method */
    GITHUB: 'github.com',
    /** Google sign in method */
    GOOGLE: 'google.com',
    /** Phone sign in method */
    PHONE: 'phone',
    /** Twitter sign in method */
    TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported operation types.
 *
 * @public
 */
const OperationType = {
    /** Operation involving linking an additional provider to an already signed-in user. */
    LINK: 'link',
    /** Operation involving using a provider to reauthenticate an already signed-in user. */
    REAUTHENTICATE: 'reauthenticate',
    /** Operation involving signing in a user. */
    SIGN_IN: 'signIn'
};
/**
 * An enumeration of the possible email action types.
 *
 * @public
 */
const ActionCodeOperation = {
    /** The email link sign-in action. */
    EMAIL_SIGNIN: 'EMAIL_SIGNIN',
    /** The password reset action. */
    PASSWORD_RESET: 'PASSWORD_RESET',
    /** The email revocation action. */
    RECOVER_EMAIL: 'RECOVER_EMAIL',
    /** The revert second factor addition email action. */
    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
    /** The revert second factor addition email action. */
    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
    /** The email verification action. */
    VERIFY_EMAIL: 'VERIFY_EMAIL'
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _debugErrorMap() {
    return {
        ["admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',
        ["argument-error" /* AuthErrorCode.ARGUMENT_ERROR */]: '',
        ["app-not-authorized" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: "This app, identified by the domain where it's hosted, is not " +
            'authorized to use Firebase Authentication with the provided API key. ' +
            'Review your key configuration in the Google API console.',
        ["app-not-installed" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' +
            'Android package name or iOS bundle ID) provided is not installed on ' +
            'this device.',
        ["captcha-check-failed" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' +
            'already used or the domain associated with it does not match the list ' +
            'of whitelisted domains.',
        ["code-expired" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' +
            'again.',
        ["cordova-not-ready" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',
        ["cors-unsupported" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',
        ["credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',
        ["custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',
        ["requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' +
            'again before retrying this request.',
        ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
            'starting any other Firebase SDK.',
        ["dynamic-link-not-activated" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +
            'conditions.',
        ["email-change-needs-verification" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',
        ["email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',
        ["emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' +
            'no longer be configured to use the emulator. Try calling ' +
            '"connectAuthEmulator()" sooner.',
        ["expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',
        ["cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',
        ["internal-error" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',
        ["invalid-app-credential" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' +
            ' The reCAPTCHA token response is either invalid or expired.',
        ["invalid-app-id" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registed for the current project.',
        ["invalid-user-token" /* AuthErrorCode.INVALID_AUTH */]: "This user's credential isn't valid for this project. This can happen " +
            "if the user's token has been tampered with, or if the user isn't for " +
            'the project associated with this API key.',
        ["invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',
        ["invalid-verification-code" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' +
            'invalid. Please resend the verification code sms and be sure to use the ' +
            'verification code provided by the user.',
        ["invalid-continue-uri" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',
        ["invalid-cordova-configuration" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +
            'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +
            'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +
            'cordova-plugin-customurlscheme.',
        ["invalid-custom-token" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',
        ["invalid-dynamic-link-domain" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',
        ["invalid-email" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',
        ["invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',
        ["invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',
        ["invalid-cert-hash" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',
        ["invalid-credential" /* AuthErrorCode.INVALID_IDP_RESPONSE */]: 'The supplied auth credential is malformed or has expired.',
        ["invalid-message-payload" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' +
            'Please fix by going to the Auth email templates section in the Firebase Console.',
        ["invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',
        ["invalid-oauth-provider" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' +
            'only supports OAuth providers.',
        ["invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' +
            'specified API key.',
        ["unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' +
            'project. Edit the list of authorized domains from the Firebase console.',
        ["invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' +
            'expired, or has already been used.',
        ["wrong-password" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',
        ["invalid-persistence-type" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',
        ["invalid-phone-number" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' +
            'phone number in a format that can be parsed into E.164 format. E.164 ' +
            'phone numbers are written in the format [+][country code][subscriber ' +
            'number including area code].',
        ["invalid-provider-id" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',
        ["invalid-recipient-email" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' +
            'recipient email address is invalid.',
        ["invalid-sender" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' +
            'Please fix by going to the Auth email templates section in the Firebase Console.',
        ["invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',
        ["invalid-tenant-id" /* AuthErrorCode.INVALID_TENANT_ID */]: "The Auth instance's tenant ID is invalid.",
        ["login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',
        ["missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',
        ["auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' +
            'by following the instructions in the Firebase console.',
        ["missing-app-credential" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' +
            'assertion. A reCAPTCHA response token needs to be provided.',
        ["missing-verification-code" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',
        ["missing-continue-uri" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',
        ["missing-iframe-start" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',
        ["missing-ios-bundle-id" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
        ["missing-or-invalid-nonce" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' +
            'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +
            'in the ID token payload.',
        ["missing-password" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',
        ["missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',
        ["missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',
        ["missing-phone-number" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',
        ["missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',
        ["app-deleted" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',
        ["multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',
        ["multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',
        ["account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' +
            'sign-in credentials. Sign in using a provider associated with this ' +
            'email address.',
        ["network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
        ["no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',
        ["no-such-provider" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',
        ["null-user" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' +
            'requires a non-null user object.',
        ["operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' +
            'Enable it in the Firebase console, under the sign-in method tab of the ' +
            'Auth section.',
        ["operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' +
            'running on. "location.protocol" must be http, https or chrome-extension' +
            ' and web storage must be enabled.',
        ["popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
        ["popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',
        ["provider-already-linked" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',
        ["quota-exceeded" /* AuthErrorCode.QUOTA_EXCEEDED */]: "The project's quota for this operation has been exceeded.",
        ["redirect-cancelled-by-user" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',
        ["redirect-operation-pending" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',
        ["rejected-credential" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',
        ["second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',
        ["maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',
        ["tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */]: "The provided tenant ID does not match the Auth instance's tenant ID",
        ["timeout" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',
        ["user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */]: "The user's credential is no longer valid. The user must sign in again.",
        ["too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' +
            'Try again later.',
        ["unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' +
            'the domain in the Firebase console.',
        ["unsupported-first-factor" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
        ["unsupported-persistence-type" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',
        ["unsupported-tenant-operation" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',
        ["unverified-email" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',
        ["user-cancelled" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',
        ["user-not-found" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' +
            'have been deleted.',
        ["user-disabled" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',
        ["user-mismatch" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',
        ["user-signed-out" /* AuthErrorCode.USER_SIGNED_OUT */]: '',
        ["weak-password" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',
        ["web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',
        ["already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' +
            'different options. To avoid this error, call initializeAuth() with the ' +
            'same options as when it was originally called, or call getAuth() to return the' +
            ' already initialized instance.',
        ["missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',
        ["invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',
        ["invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',
        ["recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',
        ["missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',
        ["missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',
        ["invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',
        ["invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.'
    };
}
function _prodErrorMap() {
    // We will include this one message in the prod error map since by the very
    // nature of this error, developers will never be able to see the message
    // using the debugErrorMap (which is installed during auth initialization).
    return {
        ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
            'starting any other Firebase SDK.'
    };
}
/**
 * A verbose error map with detailed descriptions for most error codes.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */
const debugErrorMap = (/* unused pure expression or super */ null && (_debugErrorMap));
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */
const prodErrorMap = _prodErrorMap;
const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());
/**
 * A map of potential `Auth` error codes, for easier comparison with errors
 * thrown by the SDK.
 *
 * @remarks
 * Note that you can't tree-shake individual keys
 * in the map, so by using the map you might substantially increase your
 * bundle size.
 *
 * @public
 */
const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',
    ARGUMENT_ERROR: 'auth/argument-error',
    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',
    APP_NOT_INSTALLED: 'auth/app-not-installed',
    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',
    CODE_EXPIRED: 'auth/code-expired',
    CORDOVA_NOT_READY: 'auth/cordova-not-ready',
    CORS_UNSUPPORTED: 'auth/cors-unsupported',
    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',
    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',
    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',
    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',
    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',
    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',
    EMAIL_EXISTS: 'auth/email-already-in-use',
    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',
    EXPIRED_OOB_CODE: 'auth/expired-action-code',
    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',
    INTERNAL_ERROR: 'auth/internal-error',
    INVALID_API_KEY: 'auth/invalid-api-key',
    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',
    INVALID_APP_ID: 'auth/invalid-app-id',
    INVALID_AUTH: 'auth/invalid-user-token',
    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',
    INVALID_CERT_HASH: 'auth/invalid-cert-hash',
    INVALID_CODE: 'auth/invalid-verification-code',
    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',
    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',
    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',
    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',
    INVALID_EMAIL: 'auth/invalid-email',
    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',
    INVALID_IDP_RESPONSE: 'auth/invalid-credential',
    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',
    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',
    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',
    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',
    INVALID_OOB_CODE: 'auth/invalid-action-code',
    INVALID_ORIGIN: 'auth/unauthorized-domain',
    INVALID_PASSWORD: 'auth/wrong-password',
    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',
    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',
    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',
    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',
    INVALID_SENDER: 'auth/invalid-sender',
    INVALID_SESSION_INFO: 'auth/invalid-verification-id',
    INVALID_TENANT_ID: 'auth/invalid-tenant-id',
    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',
    MFA_REQUIRED: 'auth/multi-factor-auth-required',
    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',
    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',
    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',
    MISSING_CODE: 'auth/missing-verification-code',
    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',
    MISSING_IFRAME_START: 'auth/missing-iframe-start',
    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',
    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',
    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',
    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',
    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',
    MISSING_SESSION_INFO: 'auth/missing-verification-id',
    MODULE_DESTROYED: 'auth/app-deleted',
    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',
    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',
    NULL_USER: 'auth/null-user',
    NO_AUTH_EVENT: 'auth/no-auth-event',
    NO_SUCH_PROVIDER: 'auth/no-such-provider',
    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',
    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',
    POPUP_BLOCKED: 'auth/popup-blocked',
    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',
    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',
    QUOTA_EXCEEDED: 'auth/quota-exceeded',
    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',
    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',
    REJECTED_CREDENTIAL: 'auth/rejected-credential',
    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',
    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',
    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',
    TIMEOUT: 'auth/timeout',
    TOKEN_EXPIRED: 'auth/user-token-expired',
    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',
    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',
    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',
    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',
    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',
    UNVERIFIED_EMAIL: 'auth/unverified-email',
    USER_CANCELLED: 'auth/user-cancelled',
    USER_DELETED: 'auth/user-not-found',
    USER_DISABLED: 'auth/user-disabled',
    USER_MISMATCH: 'auth/user-mismatch',
    USER_SIGNED_OUT: 'auth/user-signed-out',
    WEAK_PASSWORD: 'auth/weak-password',
    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',
    ALREADY_INITIALIZED: 'auth/already-initialized',
    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',
    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',
    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',
    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',
    MISSING_CLIENT_TYPE: 'auth/missing-client-type',
    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',
    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',
    INVALID_REQ_TYPE: 'auth/invalid-req-type'
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logClient = new Logger('@firebase/auth');
function _logWarn(msg, ...args) {
    if (logClient.logLevel <= LogLevel.WARN) {
        logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);
    }
}
function _logError(msg, ...args) {
    if (logClient.logLevel <= LogLevel.ERROR) {
        logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _fail(authOrCode, ...rest) {
    throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
    return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth, code, message) {
    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
    const factory = new ErrorFactory('auth', 'Firebase', errorMap);
    return factory.create(code, {
        appName: auth.name
    });
}
function _assertInstanceOf(auth, object, instance) {
    const constructorInstance = instance;
    if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) {
            _fail(auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        }
        throw _errorWithCustomMessage(auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` +
            `Did you pass a reference from a different Auth SDK?`);
    }
}
function createErrorInternal(authOrCode, ...rest) {
    if (typeof authOrCode !== 'string') {
        const code = rest[0];
        const fullParams = [...rest.slice(1)];
        if (fullParams[0]) {
            fullParams[0].appName = authOrCode.name;
        }
        return authOrCode._errorFactory.create(code, ...fullParams);
    }
    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
    if (!assertion) {
        throw createErrorInternal(authOrCode, ...rest);
    }
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */
function debugFail(failure) {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const message = `INTERNAL ASSERTION FAILED: ` + failure;
    _logError(message);
    // NOTE: We don't use FirebaseError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */
function debugAssert(assertion, message) {
    if (!assertion) {
        debugFail(message);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _getCurrentUrl() {
    var _a;
    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';
}
function _isHttpOrHttps() {
    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}
function _getCurrentScheme() {
    var _a;
    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Determine whether the browser is working online
 */
function _isOnline() {
    if (typeof navigator !== 'undefined' &&
        navigator &&
        'onLine' in navigator &&
        typeof navigator.onLine === 'boolean' &&
        // Apply only for traditional web apps and Chrome extensions.
        // This is especially true for Cordova apps which have unreliable
        // navigator.onLine behavior unless cordova-plugin-network-information is
        // installed which overwrites the native navigator.onLine value and
        // defines navigator.connection.
        (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {
        return navigator.onLine;
    }
    // If we can't determine the state, assume it is online.
    return true;
}
function _getUserLanguage() {
    if (typeof navigator === 'undefined') {
        return null;
    }
    const navigatorLanguage = navigator;
    return (
    // Most reliable, but only supported in Chrome/Firefox.
    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
        // Supported in most browsers, but returns the language of the browser
        // UI, not the language set in browser settings.
        navigatorLanguage.language ||
        // Couldn't determine language.
        null);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */
class Delay {
    constructor(shortDelay, longDelay) {
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        // Internal error when improperly initialized.
        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
        this.isMobile = isMobileCordova() || isReactNative();
    }
    get() {
        if (!_isOnline()) {
            // Pick the shorter timeout.
            return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);
        }
        // If running in a mobile environment, return the long delay, otherwise
        // return the short delay.
        // This could be improved in the future to dynamically change based on other
        // variables instead of just reading the current environment.
        return this.isMobile ? this.longDelay : this.shortDelay;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _emulatorUrl(config, path) {
    debugAssert(config.emulator, 'Emulator should always be set here');
    const { url } = config.emulator;
    if (!path) {
        return url;
    }
    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FetchProvider {
    static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) {
            this.headersImpl = headersImpl;
        }
        if (responseImpl) {
            this.responseImpl = responseImpl;
        }
    }
    static fetch() {
        if (this.fetchImpl) {
            return this.fetchImpl;
        }
        if (typeof self !== 'undefined' && 'fetch' in self) {
            return self.fetch;
        }
        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static headers() {
        if (this.headersImpl) {
            return this.headersImpl;
        }
        if (typeof self !== 'undefined' && 'Headers' in self) {
            return self.Headers;
        }
        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static response() {
        if (this.responseImpl) {
            return this.responseImpl;
        }
        if (typeof self !== 'undefined' && 'Response' in self) {
            return self.Response;
        }
        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Map from errors returned by the server to errors to developer visible errors
 */
const SERVER_ERROR_MAP = {
    // Custom token errors.
    ["CREDENTIAL_MISMATCH" /* ServerError.CREDENTIAL_MISMATCH */]: "custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CUSTOM_TOKEN" /* ServerError.MISSING_CUSTOM_TOKEN */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
    // Create Auth URI errors.
    ["INVALID_IDENTIFIER" /* ServerError.INVALID_IDENTIFIER */]: "invalid-email" /* AuthErrorCode.INVALID_EMAIL */,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CONTINUE_URI" /* ServerError.MISSING_CONTINUE_URI */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
    // Sign in with email and password errors (some apply to sign up too).
    ["INVALID_PASSWORD" /* ServerError.INVALID_PASSWORD */]: "wrong-password" /* AuthErrorCode.INVALID_PASSWORD */,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_PASSWORD" /* ServerError.MISSING_PASSWORD */]: "missing-password" /* AuthErrorCode.MISSING_PASSWORD */,
    // Sign up with email and password errors.
    ["EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */]: "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */,
    ["PASSWORD_LOGIN_DISABLED" /* ServerError.PASSWORD_LOGIN_DISABLED */]: "operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,
    // Verify assertion for sign in with credential errors:
    ["INVALID_IDP_RESPONSE" /* ServerError.INVALID_IDP_RESPONSE */]: "invalid-credential" /* AuthErrorCode.INVALID_IDP_RESPONSE */,
    ["INVALID_PENDING_TOKEN" /* ServerError.INVALID_PENDING_TOKEN */]: "invalid-credential" /* AuthErrorCode.INVALID_IDP_RESPONSE */,
    ["FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_REQ_TYPE" /* ServerError.MISSING_REQ_TYPE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
    // Send Password reset email errors:
    ["EMAIL_NOT_FOUND" /* ServerError.EMAIL_NOT_FOUND */]: "user-not-found" /* AuthErrorCode.USER_DELETED */,
    ["RESET_PASSWORD_EXCEED_LIMIT" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
    ["EXPIRED_OOB_CODE" /* ServerError.EXPIRED_OOB_CODE */]: "expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */,
    ["INVALID_OOB_CODE" /* ServerError.INVALID_OOB_CODE */]: "invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_OOB_CODE" /* ServerError.MISSING_OOB_CODE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
    // Operations that require ID token in request:
    ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: "requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
    ["INVALID_ID_TOKEN" /* ServerError.INVALID_ID_TOKEN */]: "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */,
    ["TOKEN_EXPIRED" /* ServerError.TOKEN_EXPIRED */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
    ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
    // Other errors.
    ["TOO_MANY_ATTEMPTS_TRY_LATER" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
    // Phone Auth related errors.
    ["INVALID_CODE" /* ServerError.INVALID_CODE */]: "invalid-verification-code" /* AuthErrorCode.INVALID_CODE */,
    ["INVALID_SESSION_INFO" /* ServerError.INVALID_SESSION_INFO */]: "invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */,
    ["INVALID_TEMPORARY_PROOF" /* ServerError.INVALID_TEMPORARY_PROOF */]: "invalid-credential" /* AuthErrorCode.INVALID_IDP_RESPONSE */,
    ["MISSING_SESSION_INFO" /* ServerError.MISSING_SESSION_INFO */]: "missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */,
    ["SESSION_EXPIRED" /* ServerError.SESSION_EXPIRED */]: "code-expired" /* AuthErrorCode.CODE_EXPIRED */,
    // Other action code errors when additional settings passed.
    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
    // This is OK as this error will be caught by client side validation.
    ["MISSING_ANDROID_PACKAGE_NAME" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,
    ["UNAUTHORIZED_DOMAIN" /* ServerError.UNAUTHORIZED_DOMAIN */]: "unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,
    // getProjectConfig errors when clientId is passed.
    ["INVALID_OAUTH_CLIENT_ID" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: "invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,
    // User actions (sign-up or deletion) disabled errors.
    ["ADMIN_ONLY_OPERATION" /* ServerError.ADMIN_ONLY_OPERATION */]: "admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,
    // Multi factor related errors.
    ["INVALID_MFA_PENDING_CREDENTIAL" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: "invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */,
    ["MFA_ENROLLMENT_NOT_FOUND" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: "multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,
    ["MISSING_MFA_ENROLLMENT_ID" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */,
    ["MISSING_MFA_PENDING_CREDENTIAL" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: "missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */,
    ["SECOND_FACTOR_EXISTS" /* ServerError.SECOND_FACTOR_EXISTS */]: "second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,
    ["SECOND_FACTOR_LIMIT_EXCEEDED" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: "maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,
    // Blocking functions related errors.
    ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
    // Recaptcha related errors.
    ["RECAPTCHA_NOT_ENABLED" /* ServerError.RECAPTCHA_NOT_ENABLED */]: "recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,
    ["MISSING_RECAPTCHA_TOKEN" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: "missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,
    ["INVALID_RECAPTCHA_TOKEN" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: "invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,
    ["INVALID_RECAPTCHA_ACTION" /* ServerError.INVALID_RECAPTCHA_ACTION */]: "invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,
    ["MISSING_CLIENT_TYPE" /* ServerError.MISSING_CLIENT_TYPE */]: "missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */,
    ["MISSING_RECAPTCHA_VERSION" /* ServerError.MISSING_RECAPTCHA_VERSION */]: "missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,
    ["INVALID_RECAPTCHA_VERSION" /* ServerError.INVALID_RECAPTCHA_VERSION */]: "invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,
    ["INVALID_REQ_TYPE" /* ServerError.INVALID_REQ_TYPE */]: "invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
function _addTidIfNecessary(auth, request) {
    if (auth.tenantId && !request.tenantId) {
        return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });
    }
    return request;
}
async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {
        let body = {};
        let params = {};
        if (request) {
            if (method === "GET" /* HttpMethod.GET */) {
                params = request;
            }
            else {
                body = {
                    body: JSON.stringify(request)
                };
            }
        }
        const query = index_esm2017_querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/json';
        if (auth.languageCode) {
            headers["X-Firebase-Locale" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;
        }
        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({ method,
            headers, referrerPolicy: 'no-referrer' }, body));
    });
}
async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
    auth._canInitEmulator = false;
    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
    try {
        const networkTimeout = new NetworkTimeout(auth);
        const response = await Promise.race([
            fetchFn(),
            networkTimeout.promise
        ]);
        // If we've reached this point, the fetch succeeded and the networkTimeout
        // didn't throw; clear the network timeout delay so that Node won't hang
        networkTimeout.clearNetworkTimeout();
        const json = await response.json();
        if ('needConfirmation' in json) {
            throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */, json);
        }
        if (response.ok && !('errorMessage' in json)) {
            return json;
        }
        else {
            const errorMessage = response.ok ? json.errorMessage : json.error.message;
            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {
                throw _makeTaggedError(auth, "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);
            }
            else if (serverErrorCode === "EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */) {
                throw _makeTaggedError(auth, "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */, json);
            }
            else if (serverErrorCode === "USER_DISABLED" /* ServerError.USER_DISABLED */) {
                throw _makeTaggedError(auth, "user-disabled" /* AuthErrorCode.USER_DISABLED */, json);
            }
            const authError = errorMap[serverErrorCode] ||
                serverErrorCode
                    .toLowerCase()
                    .replace(/[_\s]+/g, '-');
            if (serverErrorMessage) {
                throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
            }
            else {
                _fail(auth, authError);
            }
        }
    }
    catch (e) {
        if (e instanceof FirebaseError) {
            throw e;
        }
        // Changing this to a different error code will log user out when there is a network error
        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.
        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316
        _fail(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e) });
    }
}
async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
    const serverResponse = (await _performApiRequest(auth, method, path, request, customErrorMap));
    if ('mfaPendingCredential' in serverResponse) {
        _fail(auth, "multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */, {
            _serverResponse: serverResponse
        });
    }
    return serverResponse;
}
function _getFinalTarget(auth, host, path, query) {
    const base = `${host}${path}?${query}`;
    if (!auth.config.emulator) {
        return `${auth.config.apiScheme}://${base}`;
    }
    return _emulatorUrl(auth.config, base);
}
class NetworkTimeout {
    constructor(auth) {
        this.auth = auth;
        // Node timers and browser timers are fundamentally incompatible, but we
        // don't care about the value here
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timer = null;
        this.promise = new Promise((_, reject) => {
            this.timer = setTimeout(() => {
                return reject(_createError(this.auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
            }, DEFAULT_API_TIMEOUT_MS.get());
        });
    }
    clearNetworkTimeout() {
        clearTimeout(this.timer);
    }
}
function _makeTaggedError(auth, code, response) {
    const errorParams = {
        appName: auth.name
    };
    if (response.email) {
        errorParams.email = response.email;
    }
    if (response.phoneNumber) {
        errorParams.phoneNumber = response.phoneNumber;
    }
    const error = _createError(auth, code, errorParams);
    // We know customData is defined on error because errorParams is defined
    error.customData._tokenResponse = response;
    return error;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function deleteAccount(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:delete" /* Endpoint.DELETE_ACCOUNT */, request);
}
async function deleteLinkedAccounts(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */, request);
}
async function getAccountInfo(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:lookup" /* Endpoint.GET_ACCOUNT_INFO */, request);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function utcTimestampToDateString(utcTimestamp) {
    if (!utcTimestamp) {
        return undefined;
    }
    try {
        // Convert to date object.
        const date = new Date(Number(utcTimestamp));
        // Test date is valid.
        if (!isNaN(date.getTime())) {
            // Convert to UTC date string.
            return date.toUTCString();
        }
    }
    catch (e) {
        // Do nothing. undefined will be returned.
    }
    return undefined;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */
function getIdToken(user, forceRefresh = false) {
    return getModularInstance(user).getIdToken(forceRefresh);
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */
async function getIdTokenResult(user, forceRefresh = false) {
    const userInternal = index_esm2017_getModularInstance(user);
    const token = await userInternal.getIdToken(forceRefresh);
    const claims = _parseToken(token);
    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
    return {
        claims,
        token,
        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
        signInProvider: signInProvider || null,
        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
    };
}
function secondsStringToMilliseconds(seconds) {
    return Number(seconds) * 1000;
}
function _parseToken(token) {
    const [algorithm, payload, signature] = token.split('.');
    if (algorithm === undefined ||
        payload === undefined ||
        signature === undefined) {
        _logError('JWT malformed, contained fewer than 3 sections');
        return null;
    }
    try {
        const decoded = base64Decode(payload);
        if (!decoded) {
            _logError('Failed to decode base64 JWT payload');
            return null;
        }
        return JSON.parse(decoded);
    }
    catch (e) {
        _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());
        return null;
    }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */
function _tokenExpiresIn(token) {
    const parsedToken = _parseToken(token);
    _assert(parsedToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return Number(parsedToken.exp) - Number(parsedToken.iat);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
    if (bypassAuthState) {
        return promise;
    }
    try {
        return await promise;
    }
    catch (e) {
        if (e instanceof FirebaseError && isUserInvalidated(e)) {
            if (user.auth.currentUser === user) {
                await user.auth.signOut();
            }
        }
        throw e;
    }
}
function isUserInvalidated({ code }) {
    return (code === `auth/${"user-disabled" /* AuthErrorCode.USER_DISABLED */}` ||
        code === `auth/${"user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */}`);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProactiveRefresh {
    constructor(user) {
        this.user = user;
        this.isRunning = false;
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timerId = null;
        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
    }
    _start() {
        if (this.isRunning) {
            return;
        }
        this.isRunning = true;
        this.schedule();
    }
    _stop() {
        if (!this.isRunning) {
            return;
        }
        this.isRunning = false;
        if (this.timerId !== null) {
            clearTimeout(this.timerId);
        }
    }
    getInterval(wasError) {
        var _a;
        if (wasError) {
            const interval = this.errorBackoff;
            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);
            return interval;
        }
        else {
            // Reset the error backoff
            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
            const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;
            return Math.max(0, interval);
        }
    }
    schedule(wasError = false) {
        if (!this.isRunning) {
            // Just in case...
            return;
        }
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async () => {
            await this.iteration();
        }, interval);
    }
    async iteration() {
        try {
            await this.user.getIdToken(true);
        }
        catch (e) {
            // Only retry on network errors
            if ((e === null || e === void 0 ? void 0 : e.code) ===
                `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
                this.schedule(/* wasError */ true);
            }
            return;
        }
        this.schedule();
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserMetadata {
    constructor(createdAt, lastLoginAt) {
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
    }
    _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
    }
    _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
    }
    toJSON() {
        return {
            createdAt: this.createdAt,
            lastLoginAt: this.lastLoginAt
        };
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _reloadWithoutSaving(user) {
    var _a;
    const auth = user.auth;
    const idToken = await user.getIdToken();
    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));
    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    const coreAccount = response.users[0];
    user._notifyReloadListener(coreAccount);
    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length)
        ? extractProviderData(coreAccount.providerUserInfo)
        : [];
    const providerData = mergeProviderData(user.providerData, newProviderData);
    // Preserves the non-nonymous status of the stored user, even if no more
    // credentials (federated or email/password) are linked to the user. If
    // the user was previously anonymous, then use provider data to update.
    // On the other hand, if it was not anonymous before, it should never be
    // considered anonymous now.
    const oldIsAnonymous = user.isAnonymous;
    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
    const updates = {
        uid: coreAccount.localId,
        displayName: coreAccount.displayName || null,
        photoURL: coreAccount.photoUrl || null,
        email: coreAccount.email || null,
        emailVerified: coreAccount.emailVerified || false,
        phoneNumber: coreAccount.phoneNumber || null,
        tenantId: coreAccount.tenantId || null,
        providerData,
        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
        isAnonymous
    };
    Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */
async function reload(user) {
    const userInternal = index_esm2017_getModularInstance(user);
    await _reloadWithoutSaving(userInternal);
    // Even though the current user hasn't changed, update
    // current user will trigger a persistence update w/ the
    // new info.
    await userInternal.auth._persistUserIfCurrent(userInternal);
    userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));
    return [...deduped, ...newData];
}
function extractProviderData(providers) {
    return providers.map((_a) => {
        var { providerId } = _a, provider = __rest(_a, ["providerId"]);
        return {
            providerId,
            uid: provider.rawId || '',
            displayName: provider.displayName || null,
            email: provider.email || null,
            phoneNumber: provider.phoneNumber || null,
            photoURL: provider.photoUrl || null
        };
    });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function requestStsToken(auth, refreshToken) {
    const response = await _performFetchWithErrorHandling(auth, {}, async () => {
        const body = index_esm2017_querystring({
            'grant_type': 'refresh_token',
            'refresh_token': refreshToken
        }).slice(1);
        const { tokenApiHost, apiKey } = auth.config;
        const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* Endpoint.TOKEN */, `key=${apiKey}`);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';
        return FetchProvider.fetch()(url, {
            method: "POST" /* HttpMethod.POST */,
            headers,
            body
        });
    });
    // The response comes back in snake_case. Convert to camel:
    return {
        accessToken: response.access_token,
        expiresIn: response.expires_in,
        refreshToken: response.refresh_token
    };
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */
class StsTokenManager {
    constructor() {
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
    }
    get isExpired() {
        return (!this.expirationTime ||
            Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);
    }
    updateFromServerResponse(response) {
        _assert(response.idToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        _assert(typeof response.idToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'
            ? Number(response.expiresIn)
            : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
    }
    async getToken(auth, forceRefresh = false) {
        _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */);
        if (!forceRefresh && this.accessToken && !this.isExpired) {
            return this.accessToken;
        }
        if (this.refreshToken) {
            await this.refresh(auth, this.refreshToken);
            return this.accessToken;
        }
        return null;
    }
    clearRefreshToken() {
        this.refreshToken = null;
    }
    async refresh(auth, oldToken) {
        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
    }
    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1000;
    }
    static fromJSON(appName, object) {
        const { refreshToken, accessToken, expirationTime } = object;
        const manager = new StsTokenManager();
        if (refreshToken) {
            _assert(typeof refreshToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                appName
            });
            manager.refreshToken = refreshToken;
        }
        if (accessToken) {
            _assert(typeof accessToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                appName
            });
            manager.accessToken = accessToken;
        }
        if (expirationTime) {
            _assert(typeof expirationTime === 'number', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                appName
            });
            manager.expirationTime = expirationTime;
        }
        return manager;
    }
    toJSON() {
        return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expirationTime: this.expirationTime
        };
    }
    _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
    }
    _clone() {
        return Object.assign(new StsTokenManager(), this.toJSON());
    }
    _performRefresh() {
        return debugFail('not implemented');
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function assertStringOrUndefined(assertion, appName) {
    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, { appName });
}
class UserImpl {
    constructor(_a) {
        var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
        // For the user object, provider is always Firebase.
        this.providerId = "firebase" /* ProviderId.FIREBASE */;
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [...opt.providerData] : [];
        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
    }
    async getIdToken(forceRefresh) {
        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        _assert(accessToken, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            await this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
    }
    getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
    }
    reload() {
        return reload(this);
    }
    _assign(user) {
        if (this === user) {
            return;
        }
        _assert(this.uid === user.uid, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
    }
    _clone(auth) {
        const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));
        newUser.metadata._copy(this.metadata);
        return newUser;
    }
    _onReload(callback) {
        // There should only ever be one listener, and that is a single instance of MultiFactorUser
        _assert(!this.reloadListener, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
            this._notifyReloadListener(this.reloadUserInfo);
            this.reloadUserInfo = null;
        }
    }
    _notifyReloadListener(userInfo) {
        if (this.reloadListener) {
            this.reloadListener(userInfo);
        }
        else {
            // If no listener is subscribed yet, save the result so it's available when they do subscribe
            this.reloadUserInfo = userInfo;
        }
    }
    _startProactiveRefresh() {
        this.proactiveRefresh._start();
    }
    _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
    }
    async _updateTokensIfNecessary(response, reload = false) {
        let tokensRefreshed = false;
        if (response.idToken &&
            response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
        }
        if (reload) {
            await _reloadWithoutSaving(this);
        }
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) {
            this.auth._notifyListenersIfCurrent(this);
        }
    }
    async delete() {
        const idToken = await this.getIdToken();
        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
        this.stsTokenManager.clearRefreshToken();
        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
        //       cancels pending actions...
        return this.auth.signOut();
    }
    toJSON() {
        return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), 
            // Redirect event ID must be maintained in case there is a pending
            // redirect event.
            _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { 
            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
            apiKey: this.auth.config.apiKey, appName: this.auth.name });
    }
    get refreshToken() {
        return this.stsTokenManager.refreshToken || '';
    }
    static _fromJSON(auth, object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
        _assert(uid && plainObjectTokenManager, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(typeof uid === 'string', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        assertStringOrUndefined(displayName, auth.name);
        assertStringOrUndefined(email, auth.name);
        _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        assertStringOrUndefined(phoneNumber, auth.name);
        assertStringOrUndefined(photoURL, auth.name);
        assertStringOrUndefined(tenantId, auth.name);
        assertStringOrUndefined(_redirectEventId, auth.name);
        assertStringOrUndefined(createdAt, auth.name);
        assertStringOrUndefined(lastLoginAt, auth.name);
        const user = new UserImpl({
            uid,
            auth,
            email,
            emailVerified,
            displayName,
            isAnonymous,
            photoURL,
            phoneNumber,
            tenantId,
            stsTokenManager,
            createdAt,
            lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) {
            user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));
        }
        if (_redirectEventId) {
            user._redirectEventId = _redirectEventId;
        }
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */
    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        // Initialize the Firebase Auth user.
        const user = new UserImpl({
            uid: idTokenResponse.localId,
            auth,
            stsTokenManager,
            isAnonymous
        });
        // Updates the user info and data and resolves with a user instance.
        await _reloadWithoutSaving(user);
        return user;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const instanceCache = new Map();
function _getInstance(cls) {
    debugAssert(cls instanceof Function, 'Expected a class definition');
    let instance = instanceCache.get(cls);
    if (instance) {
        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
        return instance;
    }
    instance = new cls();
    instanceCache.set(cls, instance);
    return instance;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class InMemoryPersistence {
    constructor() {
        this.type = "NONE" /* PersistenceType.NONE */;
        this.storage = {};
    }
    async _isAvailable() {
        return true;
    }
    async _set(key, value) {
        this.storage[key] = value;
    }
    async _get(key) {
        const value = this.storage[key];
        return value === undefined ? null : value;
    }
    async _remove(key) {
        delete this.storage[key];
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
}
InMemoryPersistence.type = 'NONE';
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */
const inMemoryPersistence = InMemoryPersistence;

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _persistenceKeyName(key, apiKey, appName) {
    return `${"firebase" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;
}
class PersistenceUserManager {
    constructor(persistence, auth, userKey) {
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        const { config, name } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
        this.fullPersistenceKey = _persistenceKeyName("persistence" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
    }
    setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
    }
    async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        return blob ? UserImpl._fromJSON(this.auth, blob) : null;
    }
    removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
    }
    savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
    }
    async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) {
            return;
        }
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) {
            return this.setCurrentUser(currentUser);
        }
    }
    delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
    }
    static async create(auth, persistenceHierarchy, userKey = "authUser" /* KeyName.AUTH_USER */) {
        if (!persistenceHierarchy.length) {
            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
        }
        // Eliminate any persistences that are not available
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
            if (await persistence._isAvailable()) {
                return persistence;
            }
            return undefined;
        }))).filter(persistence => persistence);
        // Fall back to the first persistence listed, or in memory if none available
        let selectedPersistence = availablePersistences[0] ||
            _getInstance(inMemoryPersistence);
        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
        // Pull out the existing user, setting the chosen persistence to that
        // persistence if the user exists.
        let userToMigrate = null;
        // Note, here we check for a user in _all_ persistences, not just the
        // ones deemed available. If we can migrate a user out of a broken
        // persistence, we will (but only if that persistence supports migration).
        for (const persistence of persistenceHierarchy) {
            try {
                const blob = await persistence._get(key);
                if (blob) {
                    const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                    if (persistence !== selectedPersistence) {
                        userToMigrate = user;
                    }
                    selectedPersistence = persistence;
                    break;
                }
            }
            catch (_a) { }
        }
        // If we find the user in a persistence that does support migration, use
        // that migration path (of only persistences that support migration)
        const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);
        // If the persistence does _not_ allow migration, just finish off here
        if (!selectedPersistence._shouldAllowMigration ||
            !migrationHierarchy.length) {
            return new PersistenceUserManager(selectedPersistence, auth, userKey);
        }
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) {
            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
            // we'll just let it bubble to surface the error.
            await selectedPersistence._set(key, userToMigrate.toJSON());
        }
        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
        // such as users getting stuck with a previous account after signing out and refreshing the tab.
        await Promise.all(persistenceHierarchy.map(async (persistence) => {
            if (persistence !== selectedPersistence) {
                try {
                    await persistence._remove(key);
                }
                catch (_a) { }
            }
        }));
        return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Determine the browser for the purposes of reporting usage to the API
 */
function _getBrowserName(userAgent) {
    const ua = userAgent.toLowerCase();
    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
        return "Opera" /* BrowserName.OPERA */;
    }
    else if (_isIEMobile(ua)) {
        // Windows phone IEMobile browser.
        return "IEMobile" /* BrowserName.IEMOBILE */;
    }
    else if (ua.includes('msie') || ua.includes('trident/')) {
        return "IE" /* BrowserName.IE */;
    }
    else if (ua.includes('edge/')) {
        return "Edge" /* BrowserName.EDGE */;
    }
    else if (_isFirefox(ua)) {
        return "Firefox" /* BrowserName.FIREFOX */;
    }
    else if (ua.includes('silk/')) {
        return "Silk" /* BrowserName.SILK */;
    }
    else if (_isBlackBerry(ua)) {
        // Blackberry browser.
        return "Blackberry" /* BrowserName.BLACKBERRY */;
    }
    else if (_isWebOS(ua)) {
        // WebOS default browser.
        return "Webos" /* BrowserName.WEBOS */;
    }
    else if (_isSafari(ua)) {
        return "Safari" /* BrowserName.SAFARI */;
    }
    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&
        !ua.includes('edge/')) {
        return "Chrome" /* BrowserName.CHROME */;
    }
    else if (_isAndroid(ua)) {
        // Android stock browser.
        return "Android" /* BrowserName.ANDROID */;
    }
    else {
        // Most modern browsers have name/version at end of user agent string.
        const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
            return matches[1];
        }
    }
    return "Other" /* BrowserName.OTHER */;
}
function _isFirefox(ua = index_esm2017_getUA()) {
    return /firefox\//i.test(ua);
}
function _isSafari(userAgent = index_esm2017_getUA()) {
    const ua = userAgent.toLowerCase();
    return (ua.includes('safari/') &&
        !ua.includes('chrome/') &&
        !ua.includes('crios/') &&
        !ua.includes('android'));
}
function _isChromeIOS(ua = index_esm2017_getUA()) {
    return /crios\//i.test(ua);
}
function _isIEMobile(ua = index_esm2017_getUA()) {
    return /iemobile/i.test(ua);
}
function _isAndroid(ua = index_esm2017_getUA()) {
    return /android/i.test(ua);
}
function _isBlackBerry(ua = index_esm2017_getUA()) {
    return /blackberry/i.test(ua);
}
function _isWebOS(ua = index_esm2017_getUA()) {
    return /webos/i.test(ua);
}
function _isIOS(ua = index_esm2017_getUA()) {
    return (/iphone|ipad|ipod/i.test(ua) ||
        (/macintosh/i.test(ua) && /mobile/i.test(ua)));
}
function _isIOS7Or8(ua = getUA()) {
    return (/(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) ||
        /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua));
}
function _isIOSStandalone(ua = index_esm2017_getUA()) {
    var _a;
    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}
function _isIE10() {
    return isIE() && document.documentMode === 10;
}
function _isMobileBrowser(ua = index_esm2017_getUA()) {
    // TODO: implement getBrowserName equivalent for OS.
    return (_isIOS(ua) ||
        _isAndroid(ua) ||
        _isWebOS(ua) ||
        _isBlackBerry(ua) ||
        /windows phone/i.test(ua) ||
        _isIEMobile(ua));
}
function _isIframe() {
    try {
        // Check that the current window is not the top window.
        // If so, return true.
        return !!(window && window !== window.top);
    }
    catch (e) {
        return false;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Determine the SDK version string
 */
function _getClientVersion(clientPlatform, frameworks = []) {
    let reportedPlatform;
    switch (clientPlatform) {
        case "Browser" /* ClientPlatform.BROWSER */:
            // In a browser environment, report the browser name.
            reportedPlatform = _getBrowserName(index_esm2017_getUA());
            break;
        case "Worker" /* ClientPlatform.WORKER */:
            // Technically a worker runs from a browser but we need to differentiate a
            // worker from a browser.
            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
            reportedPlatform = `${_getBrowserName(index_esm2017_getUA())}-${clientPlatform}`;
            break;
        default:
            reportedPlatform = clientPlatform;
    }
    const reportedFrameworks = frameworks.length
        ? frameworks.join(',')
        : 'FirebaseCore-web'; /* default value if no other framework is used */
    return `${reportedPlatform}/${"JsCore" /* ClientImplementation.CORE */}/${SDK_VERSION}/${reportedFrameworks}`;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function getRecaptchaParams(auth) {
    return ((await _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v1/recaptchaParams" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '');
}
async function getRecaptchaConfig(auth, request) {
    return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v2/recaptchaConfig" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function isV2(grecaptcha) {
    return (grecaptcha !== undefined &&
        grecaptcha.getResponse !== undefined);
}
function isEnterprise(grecaptcha) {
    return (grecaptcha !== undefined &&
        grecaptcha.enterprise !== undefined);
}
class RecaptchaConfig {
    constructor(response) {
        /**
         * The reCAPTCHA site key.
         */
        this.siteKey = '';
        /**
         * The reCAPTCHA enablement status of the {@link EmailAuthProvider} for the current tenant.
         */
        this.emailPasswordEnabled = false;
        if (response.recaptchaKey === undefined) {
            throw new Error('recaptchaKey undefined');
        }
        // Example response.recaptchaKey: "projects/proj123/keys/sitekey123"
        this.siteKey = response.recaptchaKey.split('/')[3];
        this.emailPasswordEnabled = response.recaptchaEnforcementState.some(enforcementState => enforcementState.provider === 'EMAIL_PASSWORD_PROVIDER' &&
            enforcementState.enforcementState !== 'OFF');
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getScriptParentElement() {
    var _a, _b;
    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
function _loadJS(url) {
    // TODO: consider adding timeout support & cancellation
    return new Promise((resolve, reject) => {
        const el = document.createElement('script');
        el.setAttribute('src', url);
        el.onload = resolve;
        el.onerror = e => {
            const error = _createError("internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            error.customData = e;
            reject(error);
        };
        el.type = 'text/javascript';
        el.charset = 'UTF-8';
        getScriptParentElement().appendChild(el);
    });
}
function _generateCallbackName(prefix) {
    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}

/* eslint-disable @typescript-eslint/no-require-imports */
const RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js?render=';
const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';
const FAKE_TOKEN = 'NO_RECAPTCHA';
class RecaptchaEnterpriseVerifier {
    /**
     *
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     */
    constructor(authExtern) {
        /**
         * Identifies the type of application verifier (e.g. "recaptcha-enterprise").
         */
        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
        this.auth = _castAuth(authExtern);
    }
    /**
     * Executes the verification process.
     *
     * @returns A Promise for a token that can be used to assert the validity of a request.
     */
    async verify(action = 'verify', forceRefresh = false) {
        async function retrieveSiteKey(auth) {
            if (!forceRefresh) {
                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {
                    return auth._agentRecaptchaConfig.siteKey;
                }
                if (auth.tenantId != null &&
                    auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {
                    return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;
                }
            }
            return new Promise(async (resolve, reject) => {
                getRecaptchaConfig(auth, {
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                    version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                })
                    .then(response => {
                    if (response.recaptchaKey === undefined) {
                        reject(new Error('recaptcha Enterprise site key undefined'));
                    }
                    else {
                        const config = new RecaptchaConfig(response);
                        if (auth.tenantId == null) {
                            auth._agentRecaptchaConfig = config;
                        }
                        else {
                            auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                        }
                        return resolve(config.siteKey);
                    }
                })
                    .catch(error => {
                    reject(error);
                });
            });
        }
        function retrieveRecaptchaToken(siteKey, resolve, reject) {
            const grecaptcha = window.grecaptcha;
            if (isEnterprise(grecaptcha)) {
                grecaptcha.enterprise.ready(() => {
                    grecaptcha.enterprise
                        .execute(siteKey, { action })
                        .then(token => {
                        resolve(token);
                    })
                        .catch(() => {
                        resolve(FAKE_TOKEN);
                    });
                });
            }
            else {
                reject(Error('No reCAPTCHA enterprise script loaded.'));
            }
        }
        return new Promise((resolve, reject) => {
            retrieveSiteKey(this.auth)
                .then(siteKey => {
                if (!forceRefresh && isEnterprise(window.grecaptcha)) {
                    retrieveRecaptchaToken(siteKey, resolve, reject);
                }
                else {
                    if (typeof window === 'undefined') {
                        reject(new Error('RecaptchaVerifier is only supported in browser'));
                        return;
                    }
                    _loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)
                        .then(() => {
                        retrieveRecaptchaToken(siteKey, resolve, reject);
                    })
                        .catch(error => {
                        reject(error);
                    });
                }
            })
                .catch(error => {
                reject(error);
            });
        });
    }
}
async function injectRecaptchaFields(auth, request, action, captchaResp = false) {
    const verifier = new RecaptchaEnterpriseVerifier(auth);
    let captchaResponse;
    try {
        captchaResponse = await verifier.verify(action);
    }
    catch (error) {
        captchaResponse = await verifier.verify(action, true);
    }
    const newRequest = Object.assign({}, request);
    if (!captchaResp) {
        Object.assign(newRequest, { captchaResponse });
    }
    else {
        Object.assign(newRequest, { 'captchaResp': captchaResponse });
    }
    Object.assign(newRequest, { 'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ });
    Object.assign(newRequest, {
        'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
    });
    return newRequest;
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AuthMiddlewareQueue {
    constructor(auth) {
        this.auth = auth;
        this.queue = [];
    }
    pushCallback(callback, onAbort) {
        // The callback could be sync or async. Wrap it into a
        // function that is always async.
        const wrappedCallback = (user) => new Promise((resolve, reject) => {
            try {
                const result = callback(user);
                // Either resolve with existing promise or wrap a non-promise
                // return value into a promise.
                resolve(result);
            }
            catch (e) {
                // Sync callback throws.
                reject(e);
            }
        });
        // Attach the onAbort if present
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index = this.queue.length - 1;
        return () => {
            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
            // indexing of other elements.
            this.queue[index] = () => Promise.resolve();
        };
    }
    async runMiddleware(nextUser) {
        if (this.auth.currentUser === nextUser) {
            return;
        }
        // While running the middleware, build a temporary stack of onAbort
        // callbacks to call if one middleware callback rejects.
        const onAbortStack = [];
        try {
            for (const beforeStateCallback of this.queue) {
                await beforeStateCallback(nextUser);
                // Only push the onAbort if the callback succeeds
                if (beforeStateCallback.onAbort) {
                    onAbortStack.push(beforeStateCallback.onAbort);
                }
            }
        }
        catch (e) {
            // Run all onAbort, with separate try/catch to ignore any errors and
            // continue
            onAbortStack.reverse();
            for (const onAbort of onAbortStack) {
                try {
                    onAbort();
                }
                catch (_) {
                    /* swallow error */
                }
            }
            throw this.auth._errorFactory.create("login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */, {
                originalMessage: e === null || e === void 0 ? void 0 : e.message
            });
        }
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AuthImpl {
    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {
        this.app = app;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.appCheckServiceProvider = appCheckServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.beforeStateQueue = new AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        // Any network calls will set this to true and prevent subsequent emulator
        // initialization
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        this._agentRecaptchaConfig = null;
        this._tenantRecaptchaConfigs = {};
        // Tracks the last notified UID for state change listeners to prevent
        // repeated calls to the callbacks. Undefined means it's never been
        // called, whereas null means it's been called with a signed out user
        this.lastNotifiedUid = undefined;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = { appVerificationDisabledForTesting: false };
        this.frameworks = [];
        this.name = app.name;
        this.clientVersion = config.sdkClientVersion;
    }
    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) {
            this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        }
        // Have to check for app deletion throughout initialization (after each
        // promise resolution)
        this._initializationPromise = this.queue(async () => {
            var _a, _b;
            if (this._deleted) {
                return;
            }
            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
            if (this._deleted) {
                return;
            }
            // Initialize the resolver early if necessary (only applicable to web:
            // this will cause the iframe to load immediately in certain cases)
            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
                // If this fails, don't halt auth loading
                try {
                    await this._popupRedirectResolver._initialize(this);
                }
                catch (e) {
                    /* Ignore the error */
                }
            }
            await this.initializeCurrentUser(popupRedirectResolver);
            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
            if (this._deleted) {
                return;
            }
            this._isInitialized = true;
        });
        return this._initializationPromise;
    }
    /**
     * If the persistence is changed in another window, the user manager will let us know
     */
    async _onStorageEvent() {
        if (this._deleted) {
            return;
        }
        const user = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user) {
            // No change, do nothing (was signed out and remained signed out).
            return;
        }
        // If the same user is to be synchronized.
        if (this.currentUser && user && this.currentUser.uid === user.uid) {
            // Data update, simply copy data changes.
            this._currentUser._assign(user);
            // If tokens changed from previous user tokens, this will trigger
            // notifyAuthListeners_.
            await this.currentUser.getIdToken();
            return;
        }
        // Update current Auth state. Either a new login or logout.
        // Skip blocking callbacks, they should not apply to a change in another tab.
        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
    }
    async initializeCurrentUser(popupRedirectResolver) {
        var _a;
        // First check to see if we have a pending redirect event.
        const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());
        let futureCurrentUser = previouslyStoredUser;
        let needsTocheckMiddleware = false;
        if (popupRedirectResolver && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
            const result = await this.tryRedirectSignIn(popupRedirectResolver);
            // If the stored user (i.e. the old "currentUser") has a redirectId that
            // matches the redirect user, then we want to initially sign in with the
            // new user object from result.
            // TODO(samgho): More thoroughly test all of this
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&
                (result === null || result === void 0 ? void 0 : result.user)) {
                futureCurrentUser = result.user;
                needsTocheckMiddleware = true;
            }
        }
        // If no user in persistence, there is no current user. Set to null.
        if (!futureCurrentUser) {
            return this.directlySetCurrentUser(null);
        }
        if (!futureCurrentUser._redirectEventId) {
            // This isn't a redirect link operation, we can reload and bail.
            // First though, ensure that we check the middleware is happy.
            if (needsTocheckMiddleware) {
                try {
                    await this.beforeStateQueue.runMiddleware(futureCurrentUser);
                }
                catch (e) {
                    futureCurrentUser = previouslyStoredUser;
                    // We know this is available since the bit is only set when the
                    // resolver is available
                    this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
                }
            }
            if (futureCurrentUser) {
                return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
            }
            else {
                return this.directlySetCurrentUser(null);
            }
        }
        _assert(this._popupRedirectResolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        await this.getOrInitRedirectPersistenceManager();
        // If the redirect user's event ID matches the current user's event ID,
        // DO NOT reload the current user, otherwise they'll be cleared from storage.
        // This is important for the reauthenticateWithRedirect() flow.
        if (this.redirectUser &&
            this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
            return this.directlySetCurrentUser(futureCurrentUser);
        }
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
    }
    async tryRedirectSignIn(redirectResolver) {
        // The redirect user needs to be checked (and signed in if available)
        // during auth initialization. All of the normal sign in and link/reauth
        // flows call back into auth and push things onto the promise queue. We
        // need to await the result of the redirect sign in *inside the promise
        // queue*. This presents a problem: we run into deadlock. See:
        //    ┌> [Initialization] ─────┐
        //    ┌> [<other queue tasks>] │
        //    └─ [getRedirectResult] <─┘
        //    where [] are tasks on the queue and arrows denote awaits
        // Initialization will never complete because it's waiting on something
        // that's waiting for initialization to complete!
        //
        // Instead, this method calls getRedirectResult() (stored in
        // _completeRedirectFn) with an optional parameter that instructs all of
        // the underlying auth operations to skip anything that mutates auth state.
        let result = null;
        try {
            // We know this._popupRedirectResolver is set since redirectResolver
            // is passed in. The _completeRedirectFn expects the unwrapped extern.
            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        }
        catch (e) {
            // Swallow any errors here; the code can retrieve them in
            // getRedirectResult().
            await this._setRedirectUser(null);
        }
        return result;
    }
    async reloadAndSetCurrentUserOrClear(user) {
        try {
            await _reloadWithoutSaving(user);
        }
        catch (e) {
            if ((e === null || e === void 0 ? void 0 : e.code) !==
                `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
                // Something's wrong with the user's token. Log them out and remove
                // them from storage
                return this.directlySetCurrentUser(null);
            }
        }
        return this.directlySetCurrentUser(user);
    }
    useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
    }
    async _delete() {
        this._deleted = true;
    }
    async updateCurrentUser(userExtern) {
        // The public updateCurrentUser method needs to make a copy of the user,
        // and also check that the project matches
        const user = userExtern
            ? index_esm2017_getModularInstance(userExtern)
            : null;
        if (user) {
            _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */);
        }
        return this._updateCurrentUser(user && user._clone(this));
    }
    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
        if (this._deleted) {
            return;
        }
        if (user) {
            _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */);
        }
        if (!skipBeforeStateCallbacks) {
            await this.beforeStateQueue.runMiddleware(user);
        }
        return this.queue(async () => {
            await this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
        });
    }
    async signOut() {
        // Run first, to block _setRedirectUser() if any callbacks fail.
        await this.beforeStateQueue.runMiddleware(null);
        // Clear the redirect user when signOut is called
        if (this.redirectPersistenceManager || this._popupRedirectResolver) {
            await this._setRedirectUser(null);
        }
        // Prevent callbacks from being called again in _updateCurrentUser, as
        // they were already called in the first line.
        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
    }
    setPersistence(persistence) {
        return this.queue(async () => {
            await this.assertedPersistence.setPersistence(_getInstance(persistence));
        });
    }
    async initializeRecaptchaConfig() {
        const response = await getRecaptchaConfig(this, {
            clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
            version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
        });
        const config = new RecaptchaConfig(response);
        if (this.tenantId == null) {
            this._agentRecaptchaConfig = config;
        }
        else {
            this._tenantRecaptchaConfigs[this.tenantId] = config;
        }
        if (config.emailPasswordEnabled) {
            const verifier = new RecaptchaEnterpriseVerifier(this);
            void verifier.verify();
        }
    }
    _getRecaptchaConfig() {
        if (this.tenantId == null) {
            return this._agentRecaptchaConfig;
        }
        else {
            return this._tenantRecaptchaConfigs[this.tenantId];
        }
    }
    _getPersistence() {
        return this.assertedPersistence.persistence.type;
    }
    _updateErrorMap(errorMap) {
        this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
    }
    onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
    }
    beforeAuthStateChanged(callback, onAbort) {
        return this.beforeStateQueue.pushCallback(callback, onAbort);
    }
    onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
    }
    toJSON() {
        var _a;
        return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
    async _setRedirectUser(user, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user === null
            ? redirectManager.removeCurrentUser()
            : redirectManager.setCurrentUser(user);
    }
    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
            const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||
                this._popupRedirectResolver;
            _assert(resolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* KeyName.REDIRECT_USER */);
            this.redirectUser =
                await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
    }
    async _redirectUserForId(id) {
        var _a, _b;
        // Make sure we've cleared any pending persistence actions if we're not in
        // the initializer
        if (this._isInitialized) {
            await this.queue(async () => { });
        }
        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
            return this._currentUser;
        }
        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
            return this.redirectUser;
        }
        return null;
    }
    async _persistUserIfCurrent(user) {
        if (user === this.currentUser) {
            return this.queue(async () => this.directlySetCurrentUser(user));
        }
    }
    /** Notifies listeners only if the user is current */
    _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) {
            this.notifyAuthListeners();
        }
    }
    _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
    }
    _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) {
            this._currentUser._startProactiveRefresh();
        }
    }
    _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) {
            this._currentUser._stopProactiveRefresh();
        }
    }
    /** Returns the current user cast as the internal type */
    get _currentUser() {
        return this.currentUser;
    }
    notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) {
            return;
        }
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
            this.lastNotifiedUid = currentUid;
            this.authStateSubscription.next(this.currentUser);
        }
    }
    registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) {
            return () => { };
        }
        const cb = typeof nextOrObserver === 'function'
            ? nextOrObserver
            : nextOrObserver.next.bind(nextOrObserver);
        const promise = this._isInitialized
            ? Promise.resolve()
            : this._initializationPromise;
        _assert(promise, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        // The callback needs to be called asynchronously per the spec.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        promise.then(() => cb(this.currentUser));
        if (typeof nextOrObserver === 'function') {
            return subscription.addObserver(nextOrObserver, error, completed);
        }
        else {
            return subscription.addObserver(nextOrObserver);
        }
    }
    /**
     * Unprotected (from race conditions) method to set the current user. This
     * should only be called from within a queued callback. This is necessary
     * because the queue shouldn't rely on another queued callback.
     */
    async directlySetCurrentUser(user) {
        if (this.currentUser && this.currentUser !== user) {
            this._currentUser._stopProactiveRefresh();
        }
        if (user && this.isProactiveRefreshEnabled) {
            user._startProactiveRefresh();
        }
        this.currentUser = user;
        if (user) {
            await this.assertedPersistence.setCurrentUser(user);
        }
        else {
            await this.assertedPersistence.removeCurrentUser();
        }
    }
    queue(action) {
        // In case something errors, the callback still should be called in order
        // to keep the promise chain alive
        this.operations = this.operations.then(action, action);
        return this.operations;
    }
    get assertedPersistence() {
        _assert(this.persistenceManager, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return this.persistenceManager;
    }
    _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) {
            return;
        }
        this.frameworks.push(framework);
        // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
        // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
    }
    _getFrameworks() {
        return this.frameworks;
    }
    async _getAdditionalHeaders() {
        var _a;
        // Additional headers on every request
        const headers = {
            ["X-Client-Version" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion
        };
        if (this.app.options.appId) {
            headers["X-Firebase-gmpid" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;
        }
        // If the heartbeat service exists, add the heartbeat string
        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider
            .getImmediate({
            optional: true
        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
        if (heartbeatsHeader) {
            headers["X-Firebase-Client" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;
        }
        // If the App Check service exists, add the App Check token in the headers
        const appCheckToken = await this._getAppCheckToken();
        if (appCheckToken) {
            headers["X-Firebase-AppCheck" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;
        }
        return headers;
    }
    async _getAppCheckToken() {
        var _a;
        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider
            .getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());
        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {
            // Context: appCheck.getToken() will never throw even if an error happened.
            // In the error case, a dummy token will be returned along with an error field describing
            // the error. In general, we shouldn't care about the error condition and just use
            // the token (actual or dummy) to send requests.
            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
        }
        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;
    }
}
/**
 * Method to be used to cast down to our private implmentation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */
function _castAuth(auth) {
    return index_esm2017_getModularInstance(auth);
}
/** Helper class to wrap subscriber logic */
class Subscription {
    constructor(auth) {
        this.auth = auth;
        this.observer = null;
        this.addObserver = createSubscribe(observer => (this.observer = observer));
    }
    get next() {
        _assert(this.observer, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return this.observer.next.bind(this.observer);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */
function initializeAuth(app, deps) {
    const provider = _getProvider(app, 'auth');
    if (provider.isInitialized()) {
        const auth = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
            return auth;
        }
        else {
            _fail(auth, "already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */);
        }
    }
    const auth = provider.initialize({ options: deps });
    return auth;
}
function _initializeAuthInstance(auth, deps) {
    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
        auth._updateErrorMap(deps.errorMap);
    }
    // This promise is intended to float; auth initialization happens in the
    // background, meanwhile the auth object may be used by the app.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}

/**
 * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
 * Firebase Auth services.
 *
 * @remarks
 * This must be called synchronously immediately following the first call to
 * {@link initializeAuth}.  Do not use with production credentials as emulator
 * traffic is not encrypted.
 *
 *
 * @example
 * ```javascript
 * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
 * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
 * `true` to disable the warning banner attached to the DOM.
 *
 * @public
 */
function connectAuthEmulator(auth, url, options) {
    const authInternal = _castAuth(auth);
    _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);
    _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);
    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
    const protocol = extractProtocol(url);
    const { host, port } = extractHostAndPort(url);
    const portStr = port === null ? '' : `:${port}`;
    // Always replace path with "/" (even if input url had no path at all, or had a different one).
    authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
    authInternal.settings.appVerificationDisabledForTesting = true;
    authInternal.emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(':', ''),
        options: Object.freeze({ disableWarnings })
    });
    if (!disableWarnings) {
        emitEmulatorWarning();
    }
}
function extractProtocol(url) {
    const protocolEnd = url.indexOf(':');
    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
}
function extractHostAndPort(url) {
    const protocol = extractProtocol(url);
    const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
    if (!authority) {
        return { host: '', port: null };
    }
    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
    const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
    if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
    }
    else {
        const [host, port] = hostAndPort.split(':');
        return { host, port: parsePort(port) };
    }
}
function parsePort(portStr) {
    if (!portStr) {
        return null;
    }
    const port = Number(portStr);
    if (isNaN(port)) {
        return null;
    }
    return port;
}
function emitEmulatorWarning() {
    function attachBanner() {
        const el = document.createElement('p');
        const sty = el.style;
        el.innerText =
            'Running in emulator mode. Do not use with production credentials.';
        sty.position = 'fixed';
        sty.width = '100%';
        sty.backgroundColor = '#ffffff';
        sty.border = '.1em solid #000000';
        sty.color = '#b50000';
        sty.bottom = '0px';
        sty.left = '0px';
        sty.margin = '0px';
        sty.zIndex = '10000';
        sty.textAlign = 'center';
        el.classList.add('firebase-emulator-warning');
        document.body.appendChild(el);
    }
    if (typeof console !== 'undefined' && typeof console.info === 'function') {
        console.info('WARNING: You are using the Auth Emulator,' +
            ' which is intended for local testing only.  Do not use with' +
            ' production credentials.');
    }
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
        if (document.readyState === 'loading') {
            window.addEventListener('DOMContentLoaded', attachBanner);
        }
        else {
            attachBanner();
        }
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */
class AuthCredential {
    /** @internal */
    constructor(
    /**
     * The authentication provider ID for the credential.
     *
     * @remarks
     * For example, 'facebook.com', or 'google.com'.
     */
    providerId, 
    /**
     * The authentication sign in method for the credential.
     *
     * @remarks
     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
     * identifier as returned in {@link fetchSignInMethodsForEmail}.
     */
    signInMethod) {
        this.providerId = providerId;
        this.signInMethod = signInMethod;
    }
    /**
     * Returns a JSON-serializable representation of this object.
     *
     * @returns a JSON-serializable representation of this object.
     */
    toJSON() {
        return debugFail('not implemented');
    }
    /** @internal */
    _getIdTokenResponse(_auth) {
        return debugFail('not implemented');
    }
    /** @internal */
    _linkToIdToken(_auth, _idToken) {
        return debugFail('not implemented');
    }
    /** @internal */
    _getReauthenticationResolver(_auth) {
        return debugFail('not implemented');
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function resetPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:resetPassword" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));
}
async function updateEmailPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */, request);
}
async function applyActionCode$1(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signInWithPassword(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));
}
async function sendOobCode(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:sendOobCode" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));
}
async function sendEmailVerification$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendPasswordResetEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendSignInLinkToEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function verifyAndChangeEmail(auth, request) {
    return sendOobCode(auth, request);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signInWithEmailLink$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
}
async function signInWithEmailLinkForLinking(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Interface that represents the credentials returned by {@link EmailAuthProvider} for
 * {@link ProviderId}.PASSWORD
 *
 * @remarks
 * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @public
 */
class EmailAuthCredential extends AuthCredential {
    /** @internal */
    constructor(
    /** @internal */
    _email, 
    /** @internal */
    _password, signInMethod, 
    /** @internal */
    _tenantId = null) {
        super("password" /* ProviderId.PASSWORD */, signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
    }
    /** @internal */
    static _fromEmailAndPassword(email, password) {
        return new EmailAuthCredential(email, password, "password" /* SignInMethod.EMAIL_PASSWORD */);
    }
    /** @internal */
    static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new EmailAuthCredential(email, oobCode, "emailLink" /* SignInMethod.EMAIL_LINK */, tenantId);
    }
    /** {@inheritdoc AuthCredential.toJSON} */
    toJSON() {
        return {
            email: this._email,
            password: this._password,
            signInMethod: this.signInMethod,
            tenantId: this._tenantId
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
     *
     * @param json - Either `object` or the stringified representation of the object. When string is
     * provided, `JSON.parse` would be called first.
     *
     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
     */
    static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
            if (obj.signInMethod === "password" /* SignInMethod.EMAIL_PASSWORD */) {
                return this._fromEmailAndPassword(obj.email, obj.password);
            }
            else if (obj.signInMethod === "emailLink" /* SignInMethod.EMAIL_LINK */) {
                return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
            }
        }
        return null;
    }
    /** @internal */
    async _getIdTokenResponse(auth) {
        var _a;
        switch (this.signInMethod) {
            case "password" /* SignInMethod.EMAIL_PASSWORD */:
                const request = {
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password,
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
                };
                if ((_a = auth._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
                    const requestWithRecaptcha = await injectRecaptchaFields(auth, request, "signInWithPassword" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */);
                    return signInWithPassword(auth, requestWithRecaptcha);
                }
                else {
                    return signInWithPassword(auth, request).catch(async (error) => {
                        if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {
                            console.log('Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.');
                            const requestWithRecaptcha = await injectRecaptchaFields(auth, request, "signInWithPassword" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */);
                            return signInWithPassword(auth, requestWithRecaptcha);
                        }
                        else {
                            return Promise.reject(error);
                        }
                    });
                }
            case "emailLink" /* SignInMethod.EMAIL_LINK */:
                return signInWithEmailLink$1(auth, {
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        }
    }
    /** @internal */
    async _linkToIdToken(auth, idToken) {
        switch (this.signInMethod) {
            case "password" /* SignInMethod.EMAIL_PASSWORD */:
                return updateEmailPassword(auth, {
                    idToken,
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password
                });
            case "emailLink" /* SignInMethod.EMAIL_LINK */:
                return signInWithEmailLinkForLinking(auth, {
                    idToken,
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        }
    }
    /** @internal */
    _getReauthenticationResolver(auth) {
        return this._getIdTokenResponse(auth);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signInWithIdp(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IDP_REQUEST_URI$1 = 'http://localhost';
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */
class OAuthCredential extends AuthCredential {
    constructor() {
        super(...arguments);
        this.pendingToken = null;
    }
    /** @internal */
    static _fromParams(params) {
        const cred = new OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
            // OAuth 2 and either ID token or access token.
            if (params.idToken) {
                cred.idToken = params.idToken;
            }
            if (params.accessToken) {
                cred.accessToken = params.accessToken;
            }
            // Add nonce if available and no pendingToken is present.
            if (params.nonce && !params.pendingToken) {
                cred.nonce = params.nonce;
            }
            if (params.pendingToken) {
                cred.pendingToken = params.pendingToken;
            }
        }
        else if (params.oauthToken && params.oauthTokenSecret) {
            // OAuth 1 and OAuth token with token secret
            cred.accessToken = params.oauthToken;
            cred.secret = params.oauthTokenSecret;
        }
        else {
            _fail("argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        }
        return cred;
    }
    /** {@inheritdoc AuthCredential.toJSON}  */
    toJSON() {
        return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */
    static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
        if (!providerId || !signInMethod) {
            return null;
        }
        const cred = new OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || undefined;
        cred.accessToken = rest.accessToken || undefined;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
    }
    /** @internal */
    _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */
    _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */
    _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    buildRequest() {
        const request = {
            requestUri: IDP_REQUEST_URI$1,
            returnSecureToken: true
        };
        if (this.pendingToken) {
            request.pendingToken = this.pendingToken;
        }
        else {
            const postBody = {};
            if (this.idToken) {
                postBody['id_token'] = this.idToken;
            }
            if (this.accessToken) {
                postBody['access_token'] = this.accessToken;
            }
            if (this.secret) {
                postBody['oauth_token_secret'] = this.secret;
            }
            postBody['providerId'] = this.providerId;
            if (this.nonce && !this.pendingToken) {
                postBody['nonce'] = this.nonce;
            }
            request.postBody = index_esm2017_querystring(postBody);
        }
        return request;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function sendPhoneVerificationCode(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:sendVerificationCode" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));
}
async function signInWithPhoneNumber$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));
}
async function linkWithPhoneNumber$1(auth, request) {
    const response = await _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));
    if (response.temporaryProof) {
        throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */, response);
    }
    return response;
}
const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
    ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */]: "user-not-found" /* AuthErrorCode.USER_DELETED */
};
async function verifyPhoneNumberForExisting(auth, request) {
    const apiRequest = Object.assign(Object.assign({}, request), { operation: 'REAUTH' });
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Represents the credentials returned by {@link PhoneAuthProvider}.
 *
 * @public
 */
class PhoneAuthCredential extends AuthCredential {
    constructor(params) {
        super("phone" /* ProviderId.PHONE */, "phone" /* SignInMethod.PHONE */);
        this.params = params;
    }
    /** @internal */
    static _fromVerification(verificationId, verificationCode) {
        return new PhoneAuthCredential({ verificationId, verificationCode });
    }
    /** @internal */
    static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new PhoneAuthCredential({ phoneNumber, temporaryProof });
    }
    /** @internal */
    _getIdTokenResponse(auth) {
        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
    }
    /** @internal */
    _linkToIdToken(auth, idToken) {
        return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));
    }
    /** @internal */
    _getReauthenticationResolver(auth) {
        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
    }
    /** @internal */
    _makeVerificationRequest() {
        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;
        if (temporaryProof && phoneNumber) {
            return { temporaryProof, phoneNumber };
        }
        return {
            sessionInfo: verificationId,
            code: verificationCode
        };
    }
    /** {@inheritdoc AuthCredential.toJSON} */
    toJSON() {
        const obj = {
            providerId: this.providerId
        };
        if (this.params.phoneNumber) {
            obj.phoneNumber = this.params.phoneNumber;
        }
        if (this.params.temporaryProof) {
            obj.temporaryProof = this.params.temporaryProof;
        }
        if (this.params.verificationCode) {
            obj.verificationCode = this.params.verificationCode;
        }
        if (this.params.verificationId) {
            obj.verificationId = this.params.verificationId;
        }
        return obj;
    }
    /** Generates a phone credential based on a plain object or a JSON string. */
    static fromJSON(json) {
        if (typeof json === 'string') {
            json = JSON.parse(json);
        }
        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;
        if (!verificationCode &&
            !verificationId &&
            !phoneNumber &&
            !temporaryProof) {
            return null;
        }
        return new PhoneAuthCredential({
            verificationId,
            verificationCode,
            phoneNumber,
            temporaryProof
        });
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Maps the mode string in action code URL to Action Code Info operation.
 *
 * @param mode
 */
function parseMode(mode) {
    switch (mode) {
        case 'recoverEmail':
            return "RECOVER_EMAIL" /* ActionCodeOperation.RECOVER_EMAIL */;
        case 'resetPassword':
            return "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */;
        case 'signIn':
            return "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */;
        case 'verifyEmail':
            return "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */;
        case 'verifyAndChangeEmail':
            return "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;
        case 'revertSecondFactorAddition':
            return "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;
        default:
            return null;
    }
}
/**
 * Helper to parse FDL links
 *
 * @param url
 */
function parseDeepLink(url) {
    const link = querystringDecode(extractQuerystring(url))['link'];
    // Double link case (automatic redirect).
    const doubleDeepLink = link
        ? querystringDecode(extractQuerystring(link))['deep_link_id']
        : null;
    // iOS custom scheme links.
    const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];
    const iOSDoubleDeepLink = iOSDeepLink
        ? querystringDecode(extractQuerystring(iOSDeepLink))['link']
        : null;
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * A utility class to parse email action URLs such as password reset, email verification,
 * email link sign in, etc.
 *
 * @public
 */
class ActionCodeURL {
    /**
     * @param actionLink - The link from which to extract the URL.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @internal
     */
    constructor(actionLink) {
        var _a, _b, _c, _d, _e, _f;
        const searchParams = querystringDecode(extractQuerystring(actionLink));
        const apiKey = (_a = searchParams["apiKey" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;
        const code = (_b = searchParams["oobCode" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;
        const operation = parseMode((_c = searchParams["mode" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);
        // Validate API key, code and mode.
        _assert(apiKey && code && operation, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams["continueUrl" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams["languageCode" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams["tenantId" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;
    }
    /**
     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
     * otherwise returns null.
     *
     * @param link  - The email action link string.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @public
     */
    static parseLink(link) {
        const actionLink = parseDeepLink(link);
        try {
            return new ActionCodeURL(actionLink);
        }
        catch (_a) {
            return null;
        }
    }
}
/**
 * Parses the email action link string and returns an {@link ActionCodeURL} if
 * the link is valid, otherwise returns null.
 *
 * @public
 */
function parseActionCodeURL(link) {
    return ActionCodeURL.parseLink(link);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating {@link EmailAuthCredential}.
 *
 * @public
 */
class EmailAuthProvider {
    constructor() {
        /**
         * Always set to {@link ProviderId}.PASSWORD, even for email link.
         */
        this.providerId = EmailAuthProvider.PROVIDER_ID;
    }
    /**
     * Initialize an {@link AuthCredential} using an email and password.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credential(email, password);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * const userCredential = await signInWithEmailAndPassword(auth, email, password);
     * ```
     *
     * @param email - Email address.
     * @param password - User account password.
     * @returns The auth provider credential.
     */
    static credential(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
    }
    /**
     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
     * email link operation.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * await sendSignInLinkToEmail(auth, email);
     * // Obtain emailLink from user.
     * const userCredential = await signInWithEmailLink(auth, email, emailLink);
     * ```
     *
     * @param auth - The {@link Auth} instance used to verify the link.
     * @param email - Email address.
     * @param emailLink - Sign-in email link.
     * @returns - The auth provider credential.
     */
    static credentialWithLink(email, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(actionCodeUrl, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
    }
}
/**
 * Always set to {@link ProviderId}.PASSWORD, even for email link.
 */
EmailAuthProvider.PROVIDER_ID = "password" /* ProviderId.PASSWORD */;
/**
 * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
 */
EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* SignInMethod.EMAIL_PASSWORD */;
/**
 * Always set to {@link SignInMethod}.EMAIL_LINK.
 */
EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* SignInMethod.EMAIL_LINK */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */
class FederatedAuthProvider {
    /**
     * Constructor for generic OAuth providers.
     *
     * @param providerId - Provider for which credentials should be generated.
     */
    constructor(providerId) {
        this.providerId = providerId;
        /** @internal */
        this.defaultLanguageCode = null;
        /** @internal */
        this.customParameters = {};
    }
    /**
     * Set the language gode.
     *
     * @param languageCode - language code
     */
    setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
    }
    /**
     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
     * operations.
     *
     * @remarks
     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
     *
     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
     */
    setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
    }
    /**
     * Retrieve the current list of {@link CustomParameters}.
     */
    getCustomParameters() {
        return this.customParameters;
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */
class BaseOAuthProvider extends FederatedAuthProvider {
    constructor() {
        super(...arguments);
        /** @internal */
        this.scopes = [];
    }
    /**
     * Add an OAuth scope to the credential.
     *
     * @param scope - Provider OAuth scope to add.
     */
    addScope(scope) {
        // If not already added, add scope to list.
        if (!this.scopes.includes(scope)) {
            this.scopes.push(scope);
        }
        return this;
    }
    /**
     * Retrieve the current list of OAuth scopes.
     */
    getScopes() {
        return [...this.scopes];
    }
}
/**
 * Provider for generating generic {@link OAuthCredential}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new OAuthProvider('google.com');
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a OAuth Access Token for the provider.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new OAuthProvider('google.com');
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a OAuth Access Token for the provider.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */
class OAuthProvider extends (/* unused pure expression or super */ null && (BaseOAuthProvider)) {
    /**
     * Creates an {@link OAuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */
    static credentialFromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        _assert('providerId' in obj && 'signInMethod' in obj, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        return OAuthCredential._fromParams(obj);
    }
    /**
     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
     *
     * @remarks
     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
     * the raw nonce must match the nonce field in the ID token.
     *
     * @example
     * ```javascript
     * // `googleUser` from the onsuccess Google Sign In callback.
     * // Initialize a generate OAuth provider with a `google.com` providerId.
     * const provider = new OAuthProvider('google.com');
     * const credential = provider.credential({
     *   idToken: googleUser.getAuthResponse().id_token,
     * });
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param params - Either the options object containing the ID token, access token and raw nonce
     * or the ID token string.
     */
    credential(params) {
        return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));
    }
    /** An internal credential method that accepts more permissive options */
    _credential(params) {
        _assert(params.idToken || params.accessToken, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        // For OAuthCredential, sign in method is same as providerId.
        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromError(error) {
        return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));
    }
    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
            return null;
        }
        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;
        if (!oauthAccessToken &&
            !oauthTokenSecret &&
            !oauthIdToken &&
            !pendingToken) {
            return null;
        }
        if (!providerId) {
            return null;
        }
        try {
            return new OAuthProvider(providerId)._credential({
                idToken: oauthIdToken,
                accessToken: oauthAccessToken,
                nonce,
                pendingToken
            });
        }
        catch (e) {
            return null;
        }
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = FacebookAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = FacebookAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */
class FacebookAuthProvider extends BaseOAuthProvider {
    constructor() {
        super("facebook.com" /* ProviderId.FACEBOOK */);
    }
    /**
     * Creates a credential for Facebook.
     *
     * @example
     * ```javascript
     * // `event` from the Facebook auth.authResponseChange callback.
     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param accessToken - Facebook access token.
     */
    static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: FacebookAuthProvider.PROVIDER_ID,
            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromError(error) {
        return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
            return null;
        }
        if (!tokenResponse.oauthAccessToken) {
            return null;
        }
        try {
            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        }
        catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.FACEBOOK. */
FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* SignInMethod.FACEBOOK */;
/** Always set to {@link ProviderId}.FACEBOOK. */
FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* ProviderId.FACEBOOK */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = GoogleAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = GoogleAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */
class GoogleAuthProvider extends BaseOAuthProvider {
    constructor() {
        super("google.com" /* ProviderId.GOOGLE */);
        this.addScope('profile');
    }
    /**
     * Creates a credential for Google. At least one of ID token and access token is required.
     *
     * @example
     * ```javascript
     * // \`googleUser\` from the onsuccess Google Sign In callback.
     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param idToken - Google ID token.
     * @param accessToken - Google access token.
     */
    static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
            providerId: GoogleAuthProvider.PROVIDER_ID,
            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
            idToken,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromError(error) {
        return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
            return null;
        }
        const { oauthIdToken, oauthAccessToken } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) {
            // This could be an oauth 1 credential or a phone credential
            return null;
        }
        try {
            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        }
        catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GOOGLE. */
GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* SignInMethod.GOOGLE */;
/** Always set to {@link ProviderId}.GOOGLE. */
GoogleAuthProvider.PROVIDER_ID = "google.com" /* ProviderId.GOOGLE */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Github Access Token.
 *   const credential = GithubAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Github Access Token.
 * const credential = GithubAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 * @public
 */
class GithubAuthProvider extends BaseOAuthProvider {
    constructor() {
        super("github.com" /* ProviderId.GITHUB */);
    }
    /**
     * Creates a credential for Github.
     *
     * @param accessToken - Github access token.
     */
    static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: GithubAuthProvider.PROVIDER_ID,
            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        return GithubAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromError(error) {
        return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
            return null;
        }
        if (!tokenResponse.oauthAccessToken) {
            return null;
        }
        try {
            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        }
        catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GITHUB. */
GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* SignInMethod.GITHUB */;
/** Always set to {@link ProviderId}.GITHUB. */
GithubAuthProvider.PROVIDER_ID = "github.com" /* ProviderId.GITHUB */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IDP_REQUEST_URI = 'http://localhost';
/**
 * @public
 */
class SAMLAuthCredential extends (/* unused pure expression or super */ null && (AuthCredential)) {
    /** @internal */
    constructor(providerId, pendingToken) {
        super(providerId, providerId);
        this.pendingToken = pendingToken;
    }
    /** @internal */
    _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */
    _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */
    _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    /** {@inheritdoc AuthCredential.toJSON}  */
    toJSON() {
        return {
            signInMethod: this.signInMethod,
            providerId: this.providerId,
            pendingToken: this.pendingToken
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */
    static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId, signInMethod, pendingToken } = obj;
        if (!providerId ||
            !signInMethod ||
            !pendingToken ||
            providerId !== signInMethod) {
            return null;
        }
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    /**
     * Helper static method to avoid exposing the constructor to end users.
     *
     * @internal
     */
    static _create(providerId, pendingToken) {
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    buildRequest() {
        return {
            requestUri: IDP_REQUEST_URI,
            returnSecureToken: true,
            pendingToken: this.pendingToken
        };
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SAML_PROVIDER_PREFIX = 'saml.';
/**
 * An {@link AuthProvider} for SAML.
 *
 * @public
 */
class SAMLAuthProvider extends (/* unused pure expression or super */ null && (FederatedAuthProvider)) {
    /**
     * Constructor. The providerId must start with "saml."
     * @param providerId - SAML provider ID.
     */
    constructor(providerId) {
        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        super(providerId);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential} after a
     * successful SAML flow completes.
     *
     * @remarks
     *
     * For example, to get an {@link AuthCredential}, you could write the
     * following code:
     *
     * ```js
     * const userCredential = await signInWithPopup(auth, samlProvider);
     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
     * ```
     *
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromError(error) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));
    }
    /**
     * Creates an {@link AuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */
    static credentialFromJSON(json) {
        const credential = SAMLAuthCredential.fromJSON(json);
        _assert(credential, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        return credential;
    }
    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
            return null;
        }
        const { pendingToken, providerId } = tokenResponse;
        if (!pendingToken || !providerId) {
            return null;
        }
        try {
            return SAMLAuthCredential._create(providerId, pendingToken);
        }
        catch (e) {
            return null;
        }
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = TwitterAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = TwitterAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */
class TwitterAuthProvider extends BaseOAuthProvider {
    constructor() {
        super("twitter.com" /* ProviderId.TWITTER */);
    }
    /**
     * Creates a credential for Twitter.
     *
     * @param token - Twitter access token.
     * @param secret - Twitter secret.
     */
    static credential(token, secret) {
        return OAuthCredential._fromParams({
            providerId: TwitterAuthProvider.PROVIDER_ID,
            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
            oauthToken: token,
            oauthTokenSecret: secret
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */
    static credentialFromError(error) {
        return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
            return null;
        }
        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) {
            return null;
        }
        try {
            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        }
        catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.TWITTER. */
TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* SignInMethod.TWITTER */;
/** Always set to {@link ProviderId}.TWITTER. */
TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* ProviderId.TWITTER */;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signUp(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signUp" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserCredentialImpl {
    constructor(params) {
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
    }
    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
        const providerId = providerIdForResponse(idTokenResponse);
        const userCred = new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: idTokenResponse,
            operationType
        });
        return userCred;
    }
    static async _forOperation(user, operationType, response) {
        await user._updateTokensIfNecessary(response, /* reload */ true);
        const providerId = providerIdForResponse(response);
        return new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: response,
            operationType
        });
    }
}
function providerIdForResponse(response) {
    if (response.providerId) {
        return response.providerId;
    }
    if ('phoneNumber' in response) {
        return "phone" /* ProviderId.PHONE */;
    }
    return null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */
async function signInAnonymously(auth) {
    var _a;
    const authInternal = _castAuth(auth);
    await authInternal._initializationPromise;
    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
        // If an anonymous user is already signed in, no need to sign them in again.
        return new UserCredentialImpl({
            user: authInternal.currentUser,
            providerId: null,
            operationType: "signIn" /* OperationType.SIGN_IN */
        });
    }
    const response = await signUp(authInternal, {
        returnSecureToken: true
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */, response, true);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MultiFactorError extends FirebaseError {
    constructor(auth, error, operationType, user) {
        var _a;
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user;
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, MultiFactorError.prototype);
        this.customData = {
            appName: auth.name,
            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
            _serverResponse: error.customData._serverResponse,
            operationType
        };
    }
    static _fromErrorAndOperation(auth, error, operationType, user) {
        return new MultiFactorError(auth, error, operationType, user);
    }
}
function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
    const idTokenProvider = operationType === "reauthenticate" /* OperationType.REAUTHENTICATE */
        ? credential._getReauthenticationResolver(auth)
        : credential._getIdTokenResponse(auth);
    return idTokenProvider.catch(error => {
        if (error.code === `auth/${"multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */}`) {
            throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
        }
        throw error;
    });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Takes a set of UserInfo provider data and converts it to a set of names
 */
function providerDataAsNames(providerData) {
    return new Set(providerData
        .map(({ providerId }) => providerId)
        .filter(pid => !!pid));
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Unlinks a provider from a user account.
 *
 * @param user - The user.
 * @param providerId - The provider to unlink.
 *
 * @public
 */
async function unlink(user, providerId) {
    const userInternal = getModularInstance(user);
    await _assertLinkedStatus(true, userInternal, providerId);
    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {
        idToken: await userInternal.getIdToken(),
        deleteProvider: [providerId]
    });
    const providersLeft = providerDataAsNames(providerUserInfo || []);
    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));
    if (!providersLeft.has("phone" /* ProviderId.PHONE */)) {
        userInternal.phoneNumber = null;
    }
    await userInternal.auth._persistUserIfCurrent(userInternal);
    return userInternal;
}
async function _link$1(user, credential, bypassAuthState = false) {
    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
    return UserCredentialImpl._forOperation(user, "link" /* OperationType.LINK */, response);
}
async function _assertLinkedStatus(expected, user, provider) {
    await _reloadWithoutSaving(user);
    const providerIds = providerDataAsNames(user.providerData);
    const code = expected === false
        ? "provider-already-linked" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */
        : "no-such-provider" /* AuthErrorCode.NO_SUCH_PROVIDER */;
    _assert(providerIds.has(provider) === expected, user.auth, code);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _reauthenticate(user, credential, bypassAuthState = false) {
    const { auth } = user;
    const operationType = "reauthenticate" /* OperationType.REAUTHENTICATE */;
    try {
        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
        _assert(response.idToken, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const parsed = _parseToken(response.idToken);
        _assert(parsed, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const { sub: localId } = parsed;
        _assert(user.uid === localId, auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
        return UserCredentialImpl._forOperation(user, operationType, response);
    }
    catch (e) {
        // Convert user deleted error into user mismatch
        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found" /* AuthErrorCode.USER_DELETED */}`) {
            _fail(auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
        }
        throw e;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _signInWithCredential(auth, credential, bypassAuthState = false) {
    const operationType = "signIn" /* OperationType.SIGN_IN */;
    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
    if (!bypassAuthState) {
        await auth._updateCurrentUser(userCredential.user);
    }
    return userCredential;
}
/**
 * Asynchronously signs in with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param auth - The {@link Auth} instance.
 * @param credential - The auth credential.
 *
 * @public
 */
async function signInWithCredential(auth, credential) {
    return _signInWithCredential(_castAuth(auth), credential);
}
/**
 * Links the user account with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */
async function linkWithCredential(user, credential) {
    const userInternal = getModularInstance(user);
    await _assertLinkedStatus(false, userInternal, credential.providerId);
    return _link$1(userInternal, credential);
}
/**
 * Re-authenticates a user using a fresh credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
 * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error
 * or a `TOKEN_EXPIRED` error.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */
async function reauthenticateWithCredential(user, credential) {
    return _reauthenticate(getModularInstance(user), credential);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function signInWithCustomToken$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithCustomToken" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Asynchronously signs in using a custom token.
 *
 * @remarks
 * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
 * be generated by an auth backend using the
 * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
 * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
 *
 * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
 *
 * @param auth - The {@link Auth} instance.
 * @param customToken - The custom token to sign in with.
 *
 * @public
 */
async function signInWithCustomToken(auth, customToken) {
    const authInternal = _castAuth(auth);
    const response = await signInWithCustomToken$1(authInternal, {
        token: customToken,
        returnSecureToken: true
    });
    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */, response);
    await authInternal._updateCurrentUser(cred.user);
    return cred;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MultiFactorInfoImpl {
    constructor(factorId, response) {
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
    }
    static _fromServerResponse(auth, enrollment) {
        if ('phoneInfo' in enrollment) {
            return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        }
        else if ('totpInfo' in enrollment) {
            return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        }
        return _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    }
}
class PhoneMultiFactorInfoImpl extends (/* unused pure expression or super */ null && (MultiFactorInfoImpl)) {
    constructor(response) {
        super("phone" /* FactorId.PHONE */, response);
        this.phoneNumber = response.phoneInfo;
    }
    static _fromServerResponse(_auth, enrollment) {
        return new PhoneMultiFactorInfoImpl(enrollment);
    }
}
class TotpMultiFactorInfoImpl extends (/* unused pure expression or super */ null && (MultiFactorInfoImpl)) {
    constructor(response) {
        super("totp" /* FactorId.TOTP */, response);
    }
    static _fromServerResponse(_auth, enrollment) {
        return new TotpMultiFactorInfoImpl(enrollment);
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
    var _a;
    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* AuthErrorCode.INVALID_CONTINUE_URI */);
    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||
        actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);
    request.continueUrl = actionCodeSettings.url;
    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
    if (actionCodeSettings.iOS) {
        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);
        request.iOSBundleId = actionCodeSettings.iOS.bundleId;
    }
    if (actionCodeSettings.android) {
        _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode =
            actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Sends a password reset email to the given email address.
 *
 * @remarks
 * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
 * the email sent to the user, along with the new password specified by the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain code from user.
 * await confirmPasswordReset('user@example.com', code);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */
async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
    var _a;
    const authInternal = _castAuth(auth);
    const request = {
        requestType: "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */,
        email,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
    };
    if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */, true);
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);
        }
        await sendPasswordResetEmail$1(authInternal, requestWithRecaptcha);
    }
    else {
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
        }
        await sendPasswordResetEmail$1(authInternal, request)
            .catch(async (error) => {
            if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {
                console.log('Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.');
                const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */, true);
                if (actionCodeSettings) {
                    _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);
                }
                await sendPasswordResetEmail$1(authInternal, requestWithRecaptcha);
            }
            else {
                return Promise.reject(error);
            }
        });
    }
}
/**
 * Completes the password reset process, given a confirmation code and new password.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A confirmation code sent to the user.
 * @param newPassword - The new password.
 *
 * @public
 */
async function confirmPasswordReset(auth, oobCode, newPassword) {
    await resetPassword(getModularInstance(auth), {
        oobCode,
        newPassword
    });
    // Do not return the email.
}
/**
 * Applies a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */
async function applyActionCode(auth, oobCode) {
    await applyActionCode$1(getModularInstance(auth), { oobCode });
}
/**
 * Checks a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @returns metadata about the code.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */
async function checkActionCode(auth, oobCode) {
    const authModular = getModularInstance(auth);
    const response = await resetPassword(authModular, { oobCode });
    // Email could be empty only if the request type is EMAIL_SIGNIN or
    // VERIFY_AND_CHANGE_EMAIL.
    // New email should not be empty if the request type is
    // VERIFY_AND_CHANGE_EMAIL.
    // Multi-factor info could not be empty if the request type is
    // REVERT_SECOND_FACTOR_ADDITION.
    const operation = response.requestType;
    _assert(operation, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    switch (operation) {
        case "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */:
            break;
        case "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:
            _assert(response.newEmail, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            break;
        case "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:
            _assert(response.mfaInfo, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        // fall through
        default:
            _assert(response.email, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    }
    // The multi-factor info for revert second factor addition
    let multiFactorInfo = null;
    if (response.mfaInfo) {
        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
    }
    return {
        data: {
            email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */
                ? response.newEmail
                : response.email) || null,
            previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */
                ? response.email
                : response.newEmail) || null,
            multiFactorInfo
        },
        operation
    };
}
/**
 * Checks a password reset code sent to the user by email or other out-of-band mechanism.
 *
 * @returns the user's email address if valid.
 *
 * @param auth - The {@link Auth} instance.
 * @param code - A verification code sent to the user.
 *
 * @public
 */
async function verifyPasswordResetCode(auth, code) {
    const { data } = await checkActionCode(getModularInstance(auth), code);
    // Email should always be present since a code was sent to it
    return data.email;
}
/**
 * Creates a new user account associated with the specified email address and password.
 *
 * @remarks
 * On successful creation of the user account, this user will also be signed in to your application.
 *
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * Note: The email address acts as a unique identifier for the user and enables an email-based
 * password reset. This function will create a new user account and set the initial user password.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param password - The user's chosen password.
 *
 * @public
 */
async function createUserWithEmailAndPassword(auth, email, password) {
    var _a;
    const authInternal = _castAuth(auth);
    const request = {
        returnSecureToken: true,
        email,
        password,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
    };
    let signUpResponse;
    if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */);
        signUpResponse = signUp(authInternal, requestWithRecaptcha);
    }
    else {
        signUpResponse = signUp(authInternal, request).catch(async (error) => {
            if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {
                console.log('Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.');
                const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */);
                return signUp(authInternal, requestWithRecaptcha);
            }
            else {
                return Promise.reject(error);
            }
        });
    }
    const response = await signUpResponse.catch(error => {
        return Promise.reject(error);
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */, response);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in using an email and password.
 *
 * @remarks
 * Fails with an error if the email address and password do not match.
 *
 * Note: The user's password is NOT the password used to access the user's email account. The
 * email address serves as a unique identifier for the user, and the password is used to access
 * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The users email address.
 * @param password - The users password.
 *
 * @public
 */
function signInWithEmailAndPassword(auth, email, password) {
    return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Sends a sign-in email link to the user with the specified email.
 *
 * @remarks
 * The sign-in operation has to always be completed in the app unlike other out of band email
 * actions (password reset and email verifications). This is because, at the end of the flow,
 * the user is expected to be signed in and their Auth state persisted within the app.
 *
 * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
 * address and the email link supplied in the email sent to the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param authInternal - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */
async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
    var _a;
    const authInternal = _castAuth(auth);
    const request = {
        requestType: "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */,
        email,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
    };
    function setActionCodeSettings(request, actionCodeSettings) {
        _assert(actionCodeSettings.handleCodeInApp, authInternal, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
        }
    }
    if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {
        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */, true);
        setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);
        await sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha);
    }
    else {
        setActionCodeSettings(request, actionCodeSettings);
        await sendSignInLinkToEmail$1(authInternal, request)
            .catch(async (error) => {
            if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {
                console.log('Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.');
                const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */, true);
                setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);
                await sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha);
            }
            else {
                return Promise.reject(error);
            }
        });
    }
}
/**
 * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
 *
 * @param auth - The {@link Auth} instance.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */
function isSignInWithEmailLink(auth, emailLink) {
    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */;
}
/**
 * Asynchronously signs in using an email and sign-in email link.
 *
 * @remarks
 * If no link is passed, the link is inferred from the current URL.
 *
 * Fails with an error if the email address is invalid or OTP in email link expires.
 *
 * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */
async function signInWithEmailLink(auth, email, emailLink) {
    const authModular = getModularInstance(auth);
    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
    // Check if the tenant ID in the email link matches the tenant ID on Auth
    // instance.
    _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */);
    return signInWithCredential(authModular, credential);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function createAuthUri(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:createAuthUri" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Gets the list of possible sign in methods for the given email address.
 *
 * @remarks
 * This is useful to differentiate methods of sign-in for the same provider, eg.
 * {@link EmailAuthProvider} which has 2 methods of sign-in,
 * {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 *
 * @public
 */
async function fetchSignInMethodsForEmail(auth, email) {
    // createAuthUri returns an error if continue URI is not http or https.
    // For environments like Cordova, Chrome extensions, native frameworks, file
    // systems, etc, use http://localhost as continue URL.
    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
    const request = {
        identifier: email,
        continueUri
    };
    const { signinMethods } = await createAuthUri(getModularInstance(auth), request);
    return signinMethods || [];
}
/**
 * Sends a verification email to a user.
 *
 * @remarks
 * The verification process is completed by calling {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendEmailVerification(user, actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */
async function sendEmailVerification(user, actionCodeSettings) {
    const userInternal = getModularInstance(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */,
        idToken
    };
    if (actionCodeSettings) {
        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    }
    const { email } = await sendEmailVerification$1(userInternal.auth, request);
    if (email !== user.email) {
        await user.reload();
    }
}
/**
 * Sends a verification email to a new email address.
 *
 * @remarks
 * The user's email will be updated to the new one after being verified.
 *
 * If you have a custom email action handler, you can complete the verification process by calling
 * {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param newEmail - The new email address to be verified before update.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */
async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
    const userInternal = getModularInstance(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,
        idToken,
        newEmail
    };
    if (actionCodeSettings) {
        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    }
    const { email } = await verifyAndChangeEmail(userInternal.auth, request);
    if (email !== user.email) {
        // If the local copy of the email on user is outdated, reload the
        // user.
        await user.reload();
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function updateProfile$1(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */, request);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Updates a user's profile data.
 *
 * @param user - The user.
 * @param profile - The profile's `displayName` and `photoURL` to update.
 *
 * @public
 */
async function updateProfile(user, { displayName, photoURL: photoUrl }) {
    if (displayName === undefined && photoUrl === undefined) {
        return;
    }
    const userInternal = getModularInstance(user);
    const idToken = await userInternal.getIdToken();
    const profileRequest = {
        idToken,
        displayName,
        photoUrl,
        returnSecureToken: true
    };
    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
    userInternal.displayName = response.displayName || null;
    userInternal.photoURL = response.photoUrl || null;
    // Update the password provider as well
    const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === "password" /* ProviderId.PASSWORD */);
    if (passwordProvider) {
        passwordProvider.displayName = userInternal.displayName;
        passwordProvider.photoURL = userInternal.photoURL;
    }
    await userInternal._updateTokensIfNecessary(response);
}
/**
 * Updates the user's email address.
 *
 * @remarks
 * An email will be sent to the original email address (if it was set) that allows to revoke the
 * email address change, in order to protect them from account hijacking.
 *
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newEmail - The new email address.
 *
 * @public
 */
function updateEmail(user, newEmail) {
    return updateEmailOrPassword(getModularInstance(user), newEmail, null);
}
/**
 * Updates the user's password.
 *
 * @remarks
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newPassword - The new password.
 *
 * @public
 */
function updatePassword(user, newPassword) {
    return updateEmailOrPassword(getModularInstance(user), null, newPassword);
}
async function updateEmailOrPassword(user, email, password) {
    const { auth } = user;
    const idToken = await user.getIdToken();
    const request = {
        idToken,
        returnSecureToken: true
    };
    if (email) {
        request.email = email;
    }
    if (password) {
        request.password = password;
    }
    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
    await user._updateTokensIfNecessary(response, /* reload */ true);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Parse the `AdditionalUserInfo` from the ID token response.
 *
 */
function _fromIdTokenResponse(idTokenResponse) {
    var _a, _b;
    if (!idTokenResponse) {
        return null;
    }
    const { providerId } = idTokenResponse;
    const profile = idTokenResponse.rawUserInfo
        ? JSON.parse(idTokenResponse.rawUserInfo)
        : {};
    const isNewUser = idTokenResponse.isNewUser ||
        idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* IdTokenResponseKind.SignupNewUser */;
    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
        if (signInProvider) {
            const filteredProviderId = signInProvider !== "anonymous" /* ProviderId.ANONYMOUS */ &&
                signInProvider !== "custom" /* ProviderId.CUSTOM */
                ? signInProvider
                : null;
            // Uses generic class in accordance with the legacy SDK.
            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
    }
    if (!providerId) {
        return null;
    }
    switch (providerId) {
        case "facebook.com" /* ProviderId.FACEBOOK */:
            return new FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com" /* ProviderId.GITHUB */:
            return new GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com" /* ProviderId.GOOGLE */:
            return new GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com" /* ProviderId.TWITTER */:
            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom" /* ProviderId.CUSTOM */:
        case "anonymous" /* ProviderId.ANONYMOUS */:
            return new GenericAdditionalUserInfo(isNewUser, null);
        default:
            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
    }
}
class GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile = {}) {
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
    }
}
class FederatedAdditionalUserInfoWithUsername extends (/* unused pure expression or super */ null && (GenericAdditionalUserInfo)) {
    constructor(isNewUser, providerId, profile, username) {
        super(isNewUser, providerId, profile);
        this.username = username;
    }
}
class FacebookAdditionalUserInfo extends (/* unused pure expression or super */ null && (GenericAdditionalUserInfo)) {
    constructor(isNewUser, profile) {
        super(isNewUser, "facebook.com" /* ProviderId.FACEBOOK */, profile);
    }
}
class GithubAdditionalUserInfo extends (/* unused pure expression or super */ null && (FederatedAdditionalUserInfoWithUsername)) {
    constructor(isNewUser, profile) {
        super(isNewUser, "github.com" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);
    }
}
class GoogleAdditionalUserInfo extends (/* unused pure expression or super */ null && (GenericAdditionalUserInfo)) {
    constructor(isNewUser, profile) {
        super(isNewUser, "google.com" /* ProviderId.GOOGLE */, profile);
    }
}
class TwitterAdditionalUserInfo extends (/* unused pure expression or super */ null && (FederatedAdditionalUserInfoWithUsername)) {
    constructor(isNewUser, profile, screenName) {
        super(isNewUser, "twitter.com" /* ProviderId.TWITTER */, profile, screenName);
    }
}
/**
 * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
 *
 * @param userCredential - The user credential.
 *
 * @public
 */
function getAdditionalUserInfo(userCredential) {
    const { user, _tokenResponse } = userCredential;
    if (user.isAnonymous && !_tokenResponse) {
        // Handle the special case where signInAnonymously() gets called twice.
        // No network call is made so there's nothing to actually fill this in
        return {
            providerId: null,
            isNewUser: false,
            profile: null
        };
    }
    return _fromIdTokenResponse(_tokenResponse);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Non-optional auth methods.
/**
 * Changes the type of persistence on the {@link Auth} instance for the currently saved
 * `Auth` session and applies this type of persistence for future sign-in requests, including
 * sign-in with redirect requests.
 *
 * @remarks
 * This makes it easy for a user signing in to specify whether their session should be
 * remembered or not. It also makes it easier to never persist the `Auth` state for applications
 * that are shared by other users or have sensitive data.
 *
 * @example
 * ```javascript
 * setPersistence(auth, browserSessionPersistence);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param persistence - The {@link Persistence} to use.
 * @returns A `Promise` that resolves once the persistence change has completed
 *
 * @public
 */
function setPersistence(auth, persistence) {
    return getModularInstance(auth).setPersistence(persistence);
}
/**
 * Loads the reCAPTCHA configuration into the `Auth` instance.
 *
 * @remarks
 * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA
 * verification flow should be triggered for each auth provider, into the
 * current Auth session.
 *
 * If initializeRecaptchaConfig() is not invoked, the auth flow will always start
 * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA
 * verification, the SDK will transparently load the reCAPTCHA config and restart the
 * auth flows.
 *
 * Thus, by calling this optional method, you will reduce the latency of future auth flows.
 * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.
 *
 * @example
 * ```javascript
 * initializeRecaptchaConfig(auth);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */
function initializeRecaptchaConfig(auth) {
    const authInternal = _castAuth(auth);
    return authInternal.initializeRecaptchaConfig();
}
/**
 * Adds an observer for changes to the signed-in user's ID token.
 *
 * @remarks
 * This includes sign-in, sign-out, and token refresh events.
 * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */
function onIdTokenChanged(auth, nextOrObserver, error, completed) {
    return index_esm2017_getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
/**
 * Adds a blocking callback that runs before an auth state change
 * sets a new user.
 *
 * @param auth - The {@link Auth} instance.
 * @param callback - callback triggered before new user value is set.
 *   If this throws, it blocks the user from being set.
 * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
 *   callback throws, allowing you to undo any side effects.
 */
function beforeAuthStateChanged(auth, callback, onAbort) {
    return index_esm2017_getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);
}
/**
 * Adds an observer for changes to the user's sign-in state.
 *
 * @remarks
 * To keep the old behavior, see {@link onIdTokenChanged}.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */
function onAuthStateChanged(auth, nextOrObserver, error, completed) {
    return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
/**
 * Sets the current language to the default device/browser preference.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */
function useDeviceLanguage(auth) {
    getModularInstance(auth).useDeviceLanguage();
}
/**
 * Asynchronously sets the provided user as {@link Auth.currentUser} on the
 * {@link Auth} instance.
 *
 * @remarks
 * A new instance copy of the user provided will be made and set as currentUser.
 *
 * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
 * like other sign in methods.
 *
 * The operation fails with an error if the user to be updated belongs to a different Firebase
 * project.
 *
 * @param auth - The {@link Auth} instance.
 * @param user - The new {@link User}.
 *
 * @public
 */
function updateCurrentUser(auth, user) {
    return getModularInstance(auth).updateCurrentUser(user);
}
/**
 * Signs out the current user.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */
function signOut(auth) {
    return getModularInstance(auth).signOut();
}
/**
 * Deletes and signs out the user.
 *
 * @remarks
 * Important: this is a security-sensitive operation that requires the user to have recently
 * signed in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 *
 * @public
 */
async function deleteUser(user) {
    return getModularInstance(user).delete();
}

class MultiFactorSessionImpl {
    constructor(type, credential, auth) {
        this.type = type;
        this.credential = credential;
        this.auth = auth;
    }
    static _fromIdtoken(idToken, auth) {
        return new MultiFactorSessionImpl("enroll" /* MultiFactorSessionType.ENROLL */, idToken, auth);
    }
    static _fromMfaPendingCredential(mfaPendingCredential) {
        return new MultiFactorSessionImpl("signin" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);
    }
    toJSON() {
        const key = this.type === "enroll" /* MultiFactorSessionType.ENROLL */
            ? 'idToken'
            : 'pendingCredential';
        return {
            multiFactorSession: {
                [key]: this.credential
            }
        };
    }
    static fromJSON(obj) {
        var _a, _b;
        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
                return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
            }
            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
                return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
            }
        }
        return null;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MultiFactorResolverImpl {
    constructor(session, hints, signInResolver) {
        this.session = session;
        this.hints = hints;
        this.signInResolver = signInResolver;
    }
    /** @internal */
    static _fromError(authExtern, error) {
        const auth = _castAuth(authExtern);
        const serverResponse = error.customData._serverResponse;
        const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));
        _assert(serverResponse.mfaPendingCredential, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
        return new MultiFactorResolverImpl(session, hints, async (assertion) => {
            const mfaResponse = await assertion._process(auth, session);
            // Clear out the unneeded fields from the old login response
            delete serverResponse.mfaInfo;
            delete serverResponse.mfaPendingCredential;
            // Use in the new token & refresh token in the old response
            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });
            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case
            switch (error.operationType) {
                case "signIn" /* OperationType.SIGN_IN */:
                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
                    await auth._updateCurrentUser(userCredential.user);
                    return userCredential;
                case "reauthenticate" /* OperationType.REAUTHENTICATE */:
                    _assert(error.user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
                default:
                    _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            }
        });
    }
    async resolveSignIn(assertionExtern) {
        const assertion = assertionExtern;
        return this.signInResolver(assertion);
    }
}
/**
 * Provides a {@link MultiFactorResolver} suitable for completion of a
 * multi-factor flow.
 *
 * @param auth - The {@link Auth} instance.
 * @param error - The {@link MultiFactorError} raised during a sign-in, or
 * reauthentication operation.
 *
 * @public
 */
function getMultiFactorResolver(auth, error) {
    var _a;
    const authModular = getModularInstance(auth);
    const errorInternal = error;
    _assert(error.customData.operationType, authModular, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
    return MultiFactorResolverImpl._fromError(authModular, errorInternal);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function startEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaEnrollment:start" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));
}
function finalizeEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaEnrollment:finalize" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));
}
function startEnrollTotpMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaEnrollment:start" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));
}
function finalizeEnrollTotpMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaEnrollment:finalize" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));
}
function withdrawMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaEnrollment:withdraw" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));
}

class MultiFactorUserImpl {
    constructor(user) {
        this.user = user;
        this.enrolledFactors = [];
        user._onReload(userInfo => {
            if (userInfo.mfaInfo) {
                this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
            }
        });
    }
    static _fromUser(user) {
        return new MultiFactorUserImpl(user);
    }
    async getSession() {
        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user.auth);
    }
    async enroll(assertionExtern, displayName) {
        const assertion = assertionExtern;
        const session = (await this.getSession());
        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
        // New tokens will be issued after enrollment of the new second factors.
        // They need to be updated on the user.
        await this.user._updateTokensIfNecessary(finalizeMfaResponse);
        // The user needs to be reloaded to get the new multi-factor information
        // from server. USER_RELOADED event will be triggered and `enrolledFactors`
        // will be updated.
        return this.user.reload();
    }
    async unenroll(infoOrUid) {
        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
        const idToken = await this.user.getIdToken();
        try {
            const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
                idToken,
                mfaEnrollmentId
            }));
            // Remove the second factor from the user's list.
            this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);
            // Depending on whether the backend decided to revoke the user's session,
            // the tokenResponse may be empty. If the tokens were not updated (and they
            // are now invalid), reloading the user will discover this and invalidate
            // the user's state accordingly.
            await this.user._updateTokensIfNecessary(idTokenResponse);
            await this.user.reload();
        }
        catch (e) {
            throw e;
        }
    }
}
const multiFactorUserCache = new WeakMap();
/**
 * The {@link MultiFactorUser} corresponding to the user.
 *
 * @remarks
 * This is used to access all multi-factor properties and operations related to the user.
 *
 * @param user - The user.
 *
 * @public
 */
function multiFactor(user) {
    const userModular = getModularInstance(user);
    if (!multiFactorUserCache.has(userModular)) {
        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
    }
    return multiFactorUserCache.get(userModular);
}

const STORAGE_AVAILABLE_KEY = '__sak';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.
class BrowserPersistenceClass {
    constructor(storageRetriever, type) {
        this.storageRetriever = storageRetriever;
        this.type = type;
    }
    _isAvailable() {
        try {
            if (!this.storage) {
                return Promise.resolve(false);
            }
            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
            this.storage.removeItem(STORAGE_AVAILABLE_KEY);
            return Promise.resolve(true);
        }
        catch (_a) {
            return Promise.resolve(false);
        }
    }
    _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
    }
    _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
    }
    _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
    }
    get storage() {
        return this.storageRetriever();
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _iframeCannotSyncWebStorage() {
    const ua = index_esm2017_getUA();
    return _isSafari(ua) || _isIOS(ua);
}
// The polling period in case events are not supported
const _POLLING_INTERVAL_MS$1 = 1000;
// The IE 10 localStorage cross tab synchronization delay in milliseconds
const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
class BrowserLocalPersistence extends BrowserPersistenceClass {
    constructor() {
        super(() => window.localStorage, "LOCAL" /* PersistenceType.LOCAL */);
        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        // Safari or iOS browser and embedded in an iframe.
        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
        // Whether to use polling instead of depending on window events
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
    }
    forAllChangedKeys(cb) {
        // Check all keys with listeners on them.
        for (const key of Object.keys(this.listeners)) {
            // Get value from localStorage.
            const newValue = this.storage.getItem(key);
            const oldValue = this.localCache[key];
            // If local map value does not match, trigger listener with storage event.
            // Differentiate this simulated event from the real storage event.
            if (newValue !== oldValue) {
                cb(key, oldValue, newValue);
            }
        }
    }
    onStorageEvent(event, poll = false) {
        // Key would be null in some situations, like when localStorage is cleared
        if (!event.key) {
            this.forAllChangedKeys((key, _oldValue, newValue) => {
                this.notifyListeners(key, newValue);
            });
            return;
        }
        const key = event.key;
        // Check the mechanism how this event was detected.
        // The first event will dictate the mechanism to be used.
        if (poll) {
            // Environment detects storage changes via polling.
            // Remove storage event listener to prevent possible event duplication.
            this.detachListener();
        }
        else {
            // Environment detects storage changes via storage event listener.
            // Remove polling listener to prevent possible event duplication.
            this.stopPolling();
        }
        // Safari embedded iframe. Storage event will trigger with the delta
        // changes but no changes will be applied to the iframe localStorage.
        if (this.safariLocalStorageNotSynced) {
            // Get current iframe page value.
            const storedValue = this.storage.getItem(key);
            // Value not synchronized, synchronize manually.
            if (event.newValue !== storedValue) {
                if (event.newValue !== null) {
                    // Value changed from current value.
                    this.storage.setItem(key, event.newValue);
                }
                else {
                    // Current value deleted.
                    this.storage.removeItem(key);
                }
            }
            else if (this.localCache[key] === event.newValue && !poll) {
                // Already detected and processed, do not trigger listeners again.
                return;
            }
        }
        const triggerListeners = () => {
            // Keep local map up to date in case storage event is triggered before
            // poll.
            const storedValue = this.storage.getItem(key);
            if (!poll && this.localCache[key] === storedValue) {
                // Real storage event which has already been detected, do nothing.
                // This seems to trigger in some IE browsers for some reason.
                return;
            }
            this.notifyListeners(key, storedValue);
        };
        const storedValue = this.storage.getItem(key);
        if (_isIE10() &&
            storedValue !== event.newValue &&
            event.newValue !== event.oldValue) {
            // IE 10 has this weird bug where a storage event would trigger with the
            // correct key, oldValue and newValue but localStorage.getItem(key) does
            // not yield the updated value until a few milliseconds. This ensures
            // this recovers from that situation.
            setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        }
        else {
            triggerListeners();
        }
    }
    notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) {
            for (const listener of Array.from(listeners)) {
                listener(value ? JSON.parse(value) : value);
            }
        }
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(() => {
            this.forAllChangedKeys((key, oldValue, newValue) => {
                this.onStorageEvent(new StorageEvent('storage', {
                    key,
                    oldValue,
                    newValue
                }), 
                /* poll */ true);
            });
        }, _POLLING_INTERVAL_MS$1);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    attachListener() {
        window.addEventListener('storage', this.boundEventHandler);
    }
    detachListener() {
        window.removeEventListener('storage', this.boundEventHandler);
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
            // Whether browser can detect storage event when it had already been pushed to the background.
            // This may happen in some mobile browsers. A localStorage change in the foreground window
            // will not be detected in the background window via the storage event.
            // This was detected in iOS 7.x mobile browsers
            if (this.fallbackToPolling) {
                this.startPolling();
            }
            else {
                this.attachListener();
            }
        }
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) {
                delete this.listeners[key];
            }
        }
        if (Object.keys(this.listeners).length === 0) {
            this.detachListener();
            this.stopPolling();
        }
    }
    // Update local cache on base operations:
    async _set(key, value) {
        await super._set(key, value);
        this.localCache[key] = JSON.stringify(value);
    }
    async _get(key) {
        const value = await super._get(key);
        this.localCache[key] = JSON.stringify(value);
        return value;
    }
    async _remove(key) {
        await super._remove(key);
        delete this.localCache[key];
    }
}
BrowserLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
 * for the underlying storage.
 *
 * @public
 */
const browserLocalPersistence = BrowserLocalPersistence;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BrowserSessionPersistence extends BrowserPersistenceClass {
    constructor() {
        super(() => window.sessionStorage, "SESSION" /* PersistenceType.SESSION */);
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
}
BrowserSessionPersistence.type = 'SESSION';
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */
const browserSessionPersistence = BrowserSessionPersistence;

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
 *
 * @param promises - Array of promises to wait on.
 */
function _allSettled(promises) {
    return Promise.all(promises.map(async (promise) => {
        try {
            const value = await promise;
            return {
                fulfilled: true,
                value
            };
        }
        catch (reason) {
            return {
                fulfilled: false,
                reason
            };
        }
    }));
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Interface class for receiving messages.
 *
 */
class Receiver {
    constructor(eventTarget) {
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
    }
    /**
     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
     *
     * @param eventTarget - An event target (such as window or self) through which the underlying
     * messages will be received.
     */
    static _getInstance(eventTarget) {
        // The results are stored in an array since objects can't be keys for other
        // objects. In addition, setting a unique property on an event target as a
        // hash map key may not be allowed due to CORS restrictions.
        const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));
        if (existingInstance) {
            return existingInstance;
        }
        const newInstance = new Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
    }
    isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
    }
    /**
     * Fans out a MessageEvent to the appropriate listeners.
     *
     * @remarks
     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
     * finished processing.
     *
     * @param event - The MessageEvent.
     *
     */
    async handleEvent(event) {
        const messageEvent = event;
        const { eventId, eventType, data } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
            return;
        }
        messageEvent.ports[0].postMessage({
            status: "ack" /* _Status.ACK */,
            eventId,
            eventType
        });
        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
        const response = await _allSettled(promises);
        messageEvent.ports[0].postMessage({
            status: "done" /* _Status.DONE */,
            eventId,
            eventType,
            response
        });
    }
    /**
     * Subscribe an event handler for a particular event.
     *
     * @param eventType - Event name to subscribe to.
     * @param eventHandler - The event handler which should receive the events.
     *
     */
    _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) {
            this.eventTarget.addEventListener('message', this.boundEventHandler);
        }
        if (!this.handlersMap[eventType]) {
            this.handlersMap[eventType] = new Set();
        }
        this.handlersMap[eventType].add(eventHandler);
    }
    /**
     * Unsubscribe an event handler from a particular event.
     *
     * @param eventType - Event name to unsubscribe from.
     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
     *
     */
    _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) {
            this.handlersMap[eventType].delete(eventHandler);
        }
        if (!eventHandler || this.handlersMap[eventType].size === 0) {
            delete this.handlersMap[eventType];
        }
        if (Object.keys(this.handlersMap).length === 0) {
            this.eventTarget.removeEventListener('message', this.boundEventHandler);
        }
    }
}
Receiver.receivers = [];

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _generateEventId(prefix = '', digits = 10) {
    let random = '';
    for (let i = 0; i < digits; i++) {
        random += Math.floor(Math.random() * 10);
    }
    return prefix + random;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Interface for sending messages and waiting for a completion response.
 *
 */
class Sender {
    constructor(target) {
        this.target = target;
        this.handlers = new Set();
    }
    /**
     * Unsubscribe the handler and remove it from our tracking Set.
     *
     * @param handler - The handler to unsubscribe.
     */
    removeMessageHandler(handler) {
        if (handler.messageChannel) {
            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
            handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
    }
    /**
     * Send a message to the Receiver located at {@link target}.
     *
     * @remarks
     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
     * receiver has had a chance to fully process the event.
     *
     * @param eventType - Type of event to send.
     * @param data - The payload of the event.
     * @param timeout - Timeout for waiting on an ACK from the receiver.
     *
     * @returns An array of settled promises from all the handlers that were listening on the receiver.
     */
    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {
        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
        if (!messageChannel) {
            throw new Error("connection_unavailable" /* _MessageError.CONNECTION_UNAVAILABLE */);
        }
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let completionTimer;
        let handler;
        return new Promise((resolve, reject) => {
            const eventId = _generateEventId('', 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(() => {
                reject(new Error("unsupported_event" /* _MessageError.UNSUPPORTED_EVENT */));
            }, timeout);
            handler = {
                messageChannel,
                onMessage(event) {
                    const messageEvent = event;
                    if (messageEvent.data.eventId !== eventId) {
                        return;
                    }
                    switch (messageEvent.data.status) {
                        case "ack" /* _Status.ACK */:
                            // The receiver should ACK first.
                            clearTimeout(ackTimer);
                            completionTimer = setTimeout(() => {
                                reject(new Error("timeout" /* _MessageError.TIMEOUT */));
                            }, 3000 /* _TimeoutDuration.COMPLETION */);
                            break;
                        case "done" /* _Status.DONE */:
                            // Once the receiver's handlers are finished we will get the results.
                            clearTimeout(completionTimer);
                            resolve(messageEvent.data.response);
                            break;
                        default:
                            clearTimeout(ackTimer);
                            clearTimeout(completionTimer);
                            reject(new Error("invalid_response" /* _MessageError.INVALID_RESPONSE */));
                            break;
                    }
                }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener('message', handler.onMessage);
            this.target.postMessage({
                eventType,
                eventId,
                data
            }, [messageChannel.port2]);
        }).finally(() => {
            if (handler) {
                this.removeMessageHandler(handler);
            }
        });
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */
function _window() {
    return window;
}
function _setWindowLocation(url) {
    _window().location.href = url;
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _isWorker() {
    return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&
        typeof _window()['importScripts'] === 'function');
}
async function _getActiveServiceWorker() {
    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
        return null;
    }
    try {
        const registration = await navigator.serviceWorker.ready;
        return registration.active;
    }
    catch (_a) {
        return null;
    }
}
function _getServiceWorkerController() {
    var _a;
    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
}
function _getWorkerGlobalScope() {
    return _isWorker() ? self : null;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const index_e3d5d3f4_DB_NAME = 'firebaseLocalStorageDb';
const index_e3d5d3f4_DB_VERSION = 1;
const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
const DB_DATA_KEYPATH = 'fbase_key';
/**
 * Promise wrapper for IDBRequest
 *
 * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
 *
 */
class DBPromise {
    constructor(request) {
        this.request = request;
    }
    toPromise() {
        return new Promise((resolve, reject) => {
            this.request.addEventListener('success', () => {
                resolve(this.request.result);
            });
            this.request.addEventListener('error', () => {
                reject(this.request.error);
            });
        });
    }
}
function getObjectStore(db, isReadWrite) {
    return db
        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')
        .objectStore(DB_OBJECTSTORE_NAME);
}
function _deleteDatabase() {
    const request = indexedDB.deleteDatabase(index_e3d5d3f4_DB_NAME);
    return new DBPromise(request).toPromise();
}
function _openDatabase() {
    const request = indexedDB.open(index_e3d5d3f4_DB_NAME, index_e3d5d3f4_DB_VERSION);
    return new Promise((resolve, reject) => {
        request.addEventListener('error', () => {
            reject(request.error);
        });
        request.addEventListener('upgradeneeded', () => {
            const db = request.result;
            try {
                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
            }
            catch (e) {
                reject(e);
            }
        });
        request.addEventListener('success', async () => {
            const db = request.result;
            // Strange bug that occurs in Firefox when multiple tabs are opened at the
            // same time. The only way to recover seems to be deleting the database
            // and re-initializing it.
            // https://github.com/firebase/firebase-js-sdk/issues/634
            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                // Need to close the database or else you get a `blocked` event
                db.close();
                await _deleteDatabase();
                resolve(await _openDatabase());
            }
            else {
                resolve(db);
            }
        });
    });
}
async function _putObject(db, key, value) {
    const request = getObjectStore(db, true).put({
        [DB_DATA_KEYPATH]: key,
        value
    });
    return new DBPromise(request).toPromise();
}
async function getObject(db, key) {
    const request = getObjectStore(db, false).get(key);
    const data = await new DBPromise(request).toPromise();
    return data === undefined ? null : data.value;
}
function _deleteObject(db, key) {
    const request = getObjectStore(db, true).delete(key);
    return new DBPromise(request).toPromise();
}
const _POLLING_INTERVAL_MS = 800;
const _TRANSACTION_RETRY_COUNT = 3;
class IndexedDBLocalPersistence {
    constructor() {
        this.type = "LOCAL" /* PersistenceType.LOCAL */;
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        // Fire & forget the service worker registration as it may never resolve
        this._workerInitializationPromise =
            this.initializeServiceWorkerMessaging().then(() => { }, () => { });
    }
    async _openDb() {
        if (this.db) {
            return this.db;
        }
        this.db = await _openDatabase();
        return this.db;
    }
    async _withRetries(op) {
        let numAttempts = 0;
        while (true) {
            try {
                const db = await this._openDb();
                return await op(db);
            }
            catch (e) {
                if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                    throw e;
                }
                if (this.db) {
                    this.db.close();
                    this.db = undefined;
                }
                // TODO: consider adding exponential backoff
            }
        }
    }
    /**
     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
     * postMessage interface to send these events to the worker ourselves.
     */
    async initializeServiceWorkerMessaging() {
        return _isWorker() ? this.initializeReceiver() : this.initializeSender();
    }
    /**
     * As the worker we should listen to events from the main window.
     */
    async initializeReceiver() {
        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
        // Refresh from persistence if we receive a KeyChanged message.
        this.receiver._subscribe("keyChanged" /* _EventType.KEY_CHANGED */, async (_origin, data) => {
            const keys = await this._poll();
            return {
                keyProcessed: keys.includes(data.key)
            };
        });
        // Let the sender know that we are listening so they give us more timeout.
        this.receiver._subscribe("ping" /* _EventType.PING */, async (_origin, _data) => {
            return ["keyChanged" /* _EventType.KEY_CHANGED */];
        });
    }
    /**
     * As the main window, we should let the worker know when keys change (set and remove).
     *
     * @remarks
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
     * may not resolve.
     */
    async initializeSender() {
        var _a, _b;
        // Check to see if there's an active service worker.
        this.activeServiceWorker = await _getActiveServiceWorker();
        if (!this.activeServiceWorker) {
            return;
        }
        this.sender = new Sender(this.activeServiceWorker);
        // Ping the service worker to check what events they can handle.
        const results = await this.sender._send("ping" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);
        if (!results) {
            return;
        }
        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&
            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* _EventType.KEY_CHANGED */))) {
            this.serviceWorkerReceiverAvailable = true;
        }
    }
    /**
     * Let the worker know about a changed key, the exact key doesn't technically matter since the
     * worker will just trigger a full sync anyway.
     *
     * @remarks
     * For now, we only support one service worker per page.
     *
     * @param key - Storage key which changed.
     */
    async notifyServiceWorker(key) {
        if (!this.sender ||
            !this.activeServiceWorker ||
            _getServiceWorkerController() !== this.activeServiceWorker) {
            return;
        }
        try {
            await this.sender._send("keyChanged" /* _EventType.KEY_CHANGED */, { key }, 
            // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable
                ? 800 /* _TimeoutDuration.LONG_ACK */
                : 50 /* _TimeoutDuration.ACK */);
        }
        catch (_a) {
            // This is a best effort approach. Ignore errors.
        }
    }
    async _isAvailable() {
        try {
            if (!indexedDB) {
                return false;
            }
            const db = await _openDatabase();
            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
            await _deleteObject(db, STORAGE_AVAILABLE_KEY);
            return true;
        }
        catch (_a) { }
        return false;
    }
    async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
            await write();
        }
        finally {
            this.pendingWrites--;
        }
    }
    async _set(key, value) {
        return this._withPendingWrite(async () => {
            await this._withRetries((db) => _putObject(db, key, value));
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
        });
    }
    async _get(key) {
        const obj = (await this._withRetries((db) => getObject(db, key)));
        this.localCache[key] = obj;
        return obj;
    }
    async _remove(key) {
        return this._withPendingWrite(async () => {
            await this._withRetries((db) => _deleteObject(db, key));
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
        });
    }
    async _poll() {
        // TODO: check if we need to fallback if getAll is not supported
        const result = await this._withRetries((db) => {
            const getAllRequest = getObjectStore(db, false).getAll();
            return new DBPromise(getAllRequest).toPromise();
        });
        if (!result) {
            return [];
        }
        // If we have pending writes in progress abort, we'll get picked up on the next poll
        if (this.pendingWrites !== 0) {
            return [];
        }
        const keys = [];
        const keysInResult = new Set();
        for (const { fbase_key: key, value } of result) {
            keysInResult.add(key);
            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                this.notifyListeners(key, value);
                keys.push(key);
            }
        }
        for (const localKey of Object.keys(this.localCache)) {
            if (this.localCache[localKey] && !keysInResult.has(localKey)) {
                // Deleted
                this.notifyListeners(localKey, null);
                keys.push(localKey);
            }
        }
        return keys;
    }
    notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) {
            for (const listener of Array.from(listeners)) {
                listener(newValue);
            }
        }
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
            this.startPolling();
        }
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            void this._get(key); // This can happen in the background async and we can return immediately.
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) {
                delete this.listeners[key];
            }
        }
        if (Object.keys(this.listeners).length === 0) {
            this.stopPolling();
        }
    }
}
IndexedDBLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
 * for the underlying storage.
 *
 * @public
 */
const indexedDBLocalPersistence = IndexedDBLocalPersistence;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function startSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaSignIn:start" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));
}
function finalizeSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaSignIn:finalize" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));
}
function finalizeSignInTotpMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts/mfaSignIn:finalize" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _SOLVE_TIME_MS = 500;
const _EXPIRATION_TIME_MS = 60000;
const _WIDGET_ID_START = 1000000000000;
class MockReCaptcha {
    constructor(auth) {
        this.auth = auth;
        this.counter = _WIDGET_ID_START;
        this._widgets = new Map();
    }
    render(container, parameters) {
        const id = this.counter;
        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
        this.counter++;
        return id;
    }
    reset(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());
        this._widgets.delete(id);
    }
    getResponse(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
    }
    async execute(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
        return '';
    }
}
class MockWidget {
    constructor(containerOrId, appName, params) {
        this.params = params;
        this.timerId = null;
        this.deleted = false;
        this.responseToken = null;
        this.clickHandler = () => {
            this.execute();
        };
        const container = typeof containerOrId === 'string'
            ? document.getElementById(containerOrId)
            : containerOrId;
        _assert(container, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */, { appName });
        this.container = container;
        this.isVisible = this.params.size !== 'invisible';
        if (this.isVisible) {
            this.execute();
        }
        else {
            this.container.addEventListener('click', this.clickHandler);
        }
    }
    getResponse() {
        this.checkIfDeleted();
        return this.responseToken;
    }
    delete() {
        this.checkIfDeleted();
        this.deleted = true;
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
        this.container.removeEventListener('click', this.clickHandler);
    }
    execute() {
        this.checkIfDeleted();
        if (this.timerId) {
            return;
        }
        this.timerId = window.setTimeout(() => {
            this.responseToken = generateRandomAlphaNumericString(50);
            const { callback, 'expired-callback': expiredCallback } = this.params;
            if (callback) {
                try {
                    callback(this.responseToken);
                }
                catch (e) { }
            }
            this.timerId = window.setTimeout(() => {
                this.timerId = null;
                this.responseToken = null;
                if (expiredCallback) {
                    try {
                        expiredCallback();
                    }
                    catch (e) { }
                }
                if (this.isVisible) {
                    this.execute();
                }
            }, _EXPIRATION_TIME_MS);
        }, _SOLVE_TIME_MS);
    }
    checkIfDeleted() {
        if (this.deleted) {
            throw new Error('reCAPTCHA mock was already deleted!');
        }
    }
}
function generateRandomAlphaNumericString(len) {
    const chars = [];
    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    for (let i = 0; i < len; i++) {
        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
    }
    return chars.join('');
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ReCaptcha will load using the same callback, so the callback function needs
// to be kept around
const _JSLOAD_CALLBACK = _generateCallbackName('rcb');
const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
const RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';
/**
 * Loader for the GReCaptcha library. There should only ever be one of this.
 */
class ReCaptchaLoaderImpl {
    constructor() {
        var _a;
        this.hostLanguage = '';
        this.counter = 0;
        /**
         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise
         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but
         * `window.grecaptcha.render()` will not. Another load will add it.
         */
        this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);
    }
    load(auth, hl = '') {
        _assert(isHostLanguageValid(hl), auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {
            return Promise.resolve(_window().grecaptcha);
        }
        return new Promise((resolve, reject) => {
            const networkTimeout = _window().setTimeout(() => {
                reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
            }, NETWORK_TIMEOUT_DELAY.get());
            _window()[_JSLOAD_CALLBACK] = () => {
                _window().clearTimeout(networkTimeout);
                delete _window()[_JSLOAD_CALLBACK];
                const recaptcha = _window().grecaptcha;
                if (!recaptcha || !isV2(recaptcha)) {
                    reject(_createError(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */));
                    return;
                }
                // Wrap the greptcha render function so that we know if the developer has
                // called it separately
                const render = recaptcha.render;
                recaptcha.render = (container, params) => {
                    const widgetId = render(container, params);
                    this.counter++;
                    return widgetId;
                };
                this.hostLanguage = hl;
                resolve(recaptcha);
            };
            const url = `${RECAPTCHA_BASE}?${querystring({
                onload: _JSLOAD_CALLBACK,
                render: 'explicit',
                hl
            })}`;
            _loadJS(url).catch(() => {
                clearTimeout(networkTimeout);
                reject(_createError(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */));
            });
        });
    }
    clearedOneInstance() {
        this.counter--;
    }
    shouldResolveImmediately(hl) {
        var _a;
        // We can resolve immediately if:
        //   • grecaptcha is already defined AND (
        //     1. the requested language codes are the same OR
        //     2. there exists already a ReCaptcha on the page
        //     3. the library was already loaded by the app
        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
        // that are already in the page
        return (!!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) &&
            (hl === this.hostLanguage ||
                this.counter > 0 ||
                this.librarySeparatelyLoaded));
    }
}
function isHostLanguageValid(hl) {
    return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
}
class MockReCaptchaLoaderImpl {
    async load(auth) {
        return new MockReCaptcha(auth);
    }
    clearedOneInstance() { }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
const DEFAULT_PARAMS = {
    theme: 'light',
    type: 'image'
};
/**
 * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
 *
 * @public
 */
class RecaptchaVerifier {
    /**
     *
     * @param containerOrId - The reCAPTCHA container parameter.
     *
     * @remarks
     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
     * an element ID. The corresponding element must also must be in the DOM at the time of
     * initialization.
     *
     * @param parameters - The optional reCAPTCHA parameters.
     *
     * @remarks
     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
     * 'invisible'.
     *
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     */
    constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {
        this.parameters = parameters;
        /**
         * The application verifier type.
         *
         * @remarks
         * For a reCAPTCHA verifier, this is 'recaptcha'.
         */
        this.type = RECAPTCHA_VERIFIER_TYPE;
        this.destroyed = false;
        this.widgetId = null;
        this.tokenChangeListeners = new Set();
        this.renderPromise = null;
        this.recaptcha = null;
        this.auth = _castAuth(authExtern);
        this.isInvisible = this.parameters.size === 'invisible';
        _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);
        const container = typeof containerOrId === 'string'
            ? document.getElementById(containerOrId)
            : containerOrId;
        _assert(container, this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        this.container = container;
        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting
            ? new MockReCaptchaLoaderImpl()
            : new ReCaptchaLoaderImpl();
        this.validateStartingState();
        // TODO: Figure out if sdk version is needed
    }
    /**
     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
     *
     * @returns A Promise for the reCAPTCHA token.
     */
    async verify() {
        this.assertNotDestroyed();
        const id = await this.render();
        const recaptcha = this.getAssertedRecaptcha();
        const response = recaptcha.getResponse(id);
        if (response) {
            return response;
        }
        return new Promise(resolve => {
            const tokenChange = (token) => {
                if (!token) {
                    return; // Ignore token expirations.
                }
                this.tokenChangeListeners.delete(tokenChange);
                resolve(token);
            };
            this.tokenChangeListeners.add(tokenChange);
            if (this.isInvisible) {
                recaptcha.execute(id);
            }
        });
    }
    /**
     * Renders the reCAPTCHA widget on the page.
     *
     * @returns A Promise that resolves with the reCAPTCHA widget ID.
     */
    render() {
        try {
            this.assertNotDestroyed();
        }
        catch (e) {
            // This method returns a promise. Since it's not async (we want to return the
            // _same_ promise if rendering is still occurring), the API surface should
            // reject with the error rather than just throw
            return Promise.reject(e);
        }
        if (this.renderPromise) {
            return this.renderPromise;
        }
        this.renderPromise = this.makeRenderPromise().catch(e => {
            this.renderPromise = null;
            throw e;
        });
        return this.renderPromise;
    }
    /** @internal */
    _reset() {
        this.assertNotDestroyed();
        if (this.widgetId !== null) {
            this.getAssertedRecaptcha().reset(this.widgetId);
        }
    }
    /**
     * Clears the reCAPTCHA widget from the page and destroys the instance.
     */
    clear() {
        this.assertNotDestroyed();
        this.destroyed = true;
        this._recaptchaLoader.clearedOneInstance();
        if (!this.isInvisible) {
            this.container.childNodes.forEach(node => {
                this.container.removeChild(node);
            });
        }
    }
    validateStartingState() {
        _assert(!this.parameters.sitekey, this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);
    }
    makeTokenCallback(existing) {
        return token => {
            this.tokenChangeListeners.forEach(listener => listener(token));
            if (typeof existing === 'function') {
                existing(token);
            }
            else if (typeof existing === 'string') {
                const globalFunc = _window()[existing];
                if (typeof globalFunc === 'function') {
                    globalFunc(token);
                }
            }
        };
    }
    assertNotDestroyed() {
        _assert(!this.destroyed, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    }
    async makeRenderPromise() {
        await this.init();
        if (!this.widgetId) {
            let container = this.container;
            if (!this.isInvisible) {
                const guaranteedEmpty = document.createElement('div');
                container.appendChild(guaranteedEmpty);
                container = guaranteedEmpty;
            }
            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
        }
        return this.widgetId;
    }
    async init() {
        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        await domReady();
        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
        const siteKey = await getRecaptchaParams(this.auth);
        _assert(siteKey, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        this.parameters.sitekey = siteKey;
    }
    getAssertedRecaptcha() {
        _assert(this.recaptcha, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return this.recaptcha;
    }
}
function domReady() {
    let resolver = null;
    return new Promise(resolve => {
        if (document.readyState === 'complete') {
            resolve();
            return;
        }
        // Document not ready, wait for load before resolving.
        // Save resolver, so we can remove listener in case it was externally
        // cancelled.
        resolver = () => resolve();
        window.addEventListener('load', resolver);
    }).catch(e => {
        if (resolver) {
            window.removeEventListener('load', resolver);
        }
        throw e;
    });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ConfirmationResultImpl {
    constructor(verificationId, onConfirmation) {
        this.verificationId = verificationId;
        this.onConfirmation = onConfirmation;
    }
    confirm(verificationCode) {
        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
        return this.onConfirmation(authCredential);
    }
}
/**
 * Asynchronously signs in using a phone number.
 *
 * @remarks
 * This method sends a code via SMS to the given
 * phone number, and returns a {@link ConfirmationResult}. After the user
 * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
 * with the code to sign the user in.
 *
 * For abuse prevention, this method also requires a {@link ApplicationVerifier}.
 * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
 * This function can work on other platforms that do not support the
 * {@link RecaptchaVerifier} (like React Native), but you need to use a
 * third-party {@link ApplicationVerifier} implementation.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
 * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
 * // Obtain a verificationCode from the user.
 * const credential = await confirmationResult.confirm(verificationCode);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */
async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
    const authInternal = _castAuth(auth);
    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));
}
/**
 * Links the user account with the given phone number.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */
async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = getModularInstance(user);
    await _assertLinkedStatus(false, userInternal, "phone" /* ProviderId.PHONE */);
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));
}
/**
 * Re-authenticates a user using a fresh phone credential.
 *
 * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */
async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = getModularInstance(user);
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));
}
/**
 * Returns a verification ID to be used in conjunction with the SMS code that is sent.
 *
 */
async function _verifyPhoneNumber(auth, options, verifier) {
    var _a;
    const recaptchaToken = await verifier.verify();
    try {
        _assert(typeof recaptchaToken === 'string', auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        let phoneInfoOptions;
        if (typeof options === 'string') {
            phoneInfoOptions = {
                phoneNumber: options
            };
        }
        else {
            phoneInfoOptions = options;
        }
        if ('session' in phoneInfoOptions) {
            const session = phoneInfoOptions.session;
            if ('phoneNumber' in phoneInfoOptions) {
                _assert(session.type === "enroll" /* MultiFactorSessionType.ENROLL */, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
                const response = await startEnrollPhoneMfa(auth, {
                    idToken: session.credential,
                    phoneEnrollmentInfo: {
                        phoneNumber: phoneInfoOptions.phoneNumber,
                        recaptchaToken
                    }
                });
                return response.phoneSessionInfo.sessionInfo;
            }
            else {
                _assert(session.type === "signin" /* MultiFactorSessionType.SIGN_IN */, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||
                    phoneInfoOptions.multiFactorUid;
                _assert(mfaEnrollmentId, auth, "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */);
                const response = await startSignInPhoneMfa(auth, {
                    mfaPendingCredential: session.credential,
                    mfaEnrollmentId,
                    phoneSignInInfo: {
                        recaptchaToken
                    }
                });
                return response.phoneResponseInfo.sessionInfo;
            }
        }
        else {
            const { sessionInfo } = await sendPhoneVerificationCode(auth, {
                phoneNumber: phoneInfoOptions.phoneNumber,
                recaptchaToken
            });
            return sessionInfo;
        }
    }
    finally {
        verifier._reset();
    }
}
/**
 * Updates the user's phone number.
 *
 * @example
 * ```
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * await updatePhoneNumber(user, phoneCredential);
 * ```
 *
 * @param user - The user.
 * @param credential - A credential authenticating the new phone number.
 *
 * @public
 */
async function updatePhoneNumber(user, credential) {
    await _link$1(getModularInstance(user), credential);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for generating an {@link PhoneAuthCredential}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * const userCredential = await signInWithCredential(auth, phoneCredential);
 * ```
 *
 * @public
 */
class PhoneAuthProvider {
    /**
     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
     *
     */
    constructor(auth) {
        /** Always set to {@link ProviderId}.PHONE. */
        this.providerId = PhoneAuthProvider.PROVIDER_ID;
        this.auth = _castAuth(auth);
    }
    /**
     *
     * Starts a phone number authentication flow by sending a verification code to the given phone
     * number.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
     * E.164 format (e.g. +16505550101).
     * @param applicationVerifier - For abuse prevention, this method also requires a
     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,
     * {@link RecaptchaVerifier}.
     *
     * @returns A Promise for a verification ID that can be passed to
     * {@link PhoneAuthProvider.credential} to identify this flow..
     */
    verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return _verifyPhoneNumber(this.auth, phoneOptions, index_esm2017_getModularInstance(applicationVerifier));
    }
    /**
     * Creates a phone auth credential, given the verification ID from
     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
     * mobile device.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
     * @param verificationCode - The verification code sent to the user's mobile device.
     *
     * @returns The auth provider credential.
     */
    static credential(verificationId, verificationCode) {
        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential}.
     * @param userCredential - The user credential.
     */
    static credentialFromResult(userCredential) {
        const credential = userCredential;
        return PhoneAuthProvider.credentialFromTaggedObject(credential);
    }
    /**
     * Returns an {@link AuthCredential} when passed an error.
     *
     * @remarks
     *
     * This method works for errors like
     * `auth/account-exists-with-different-credentials`. This is useful for
     * recovering when attempting to set a user's phone number but the number
     * in question is already tied to another account. For example, the following
     * code tries to update the current user's phone number, and if that
     * fails, links the user with the account associated with that number:
     *
     * ```js
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(number, verifier);
     * try {
     *   const code = ''; // Prompt the user for the verification code
     *   await updatePhoneNumber(
     *       auth.currentUser,
     *       PhoneAuthProvider.credential(verificationId, code));
     * } catch (e) {
     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
     *     const cred = PhoneAuthProvider.credentialFromError(e);
     *     await linkWithCredential(auth.currentUser, cred);
     *   }
     * }
     *
     * // At this point, auth.currentUser.phoneNumber === number.
     * ```
     *
     * @param error - The error to generate a credential from.
     */
    static credentialFromError(error) {
        return PhoneAuthProvider.credentialFromTaggedObject((error.customData || {}));
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
            return null;
        }
        const { phoneNumber, temporaryProof } = tokenResponse;
        if (phoneNumber && temporaryProof) {
            return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
        }
        return null;
    }
}
/** Always set to {@link ProviderId}.PHONE. */
PhoneAuthProvider.PROVIDER_ID = "phone" /* ProviderId.PHONE */;
/** Always set to {@link SignInMethod}.PHONE. */
PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone" /* SignInMethod.PHONE */;

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */
function _withDefaultResolver(auth, resolverOverride) {
    if (resolverOverride) {
        return _getInstance(resolverOverride);
    }
    _assert(auth._popupRedirectResolver, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
    return auth._popupRedirectResolver;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class IdpCredential extends AuthCredential {
    constructor(params) {
        super("custom" /* ProviderId.CUSTOM */, "custom" /* ProviderId.CUSTOM */);
        this.params = params;
    }
    _getIdTokenResponse(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _linkToIdToken(auth, idToken) {
        return signInWithIdp(auth, this._buildIdpRequest(idToken));
    }
    _getReauthenticationResolver(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _buildIdpRequest(idToken) {
        const request = {
            requestUri: this.params.requestUri,
            sessionId: this.params.sessionId,
            postBody: this.params.postBody,
            tenantId: this.params.tenantId,
            pendingToken: this.params.pendingToken,
            returnSecureToken: true,
            returnIdpCredential: true
        };
        if (idToken) {
            request.idToken = idToken;
        }
        return request;
    }
}
function _signIn(params) {
    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}
function _reauth(params) {
    const { auth, user } = params;
    _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
}
async function _link(params) {
    const { auth, user } = params;
    _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return _link$1(user, new IdpCredential(params), params.bypassAuthState);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */
class AbstractPopupRedirectOperation {
    constructor(auth, filter, resolver, user, bypassAuthState = false) {
        this.auth = auth;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [filter];
    }
    execute() {
        return new Promise(async (resolve, reject) => {
            this.pendingPromise = { resolve, reject };
            try {
                this.eventManager = await this.resolver._initialize(this.auth);
                await this.onExecution();
                this.eventManager.registerConsumer(this);
            }
            catch (e) {
                this.reject(e);
            }
        });
    }
    async onAuthEvent(event) {
        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
        if (error) {
            this.reject(error);
            return;
        }
        const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId: sessionId,
            tenantId: tenantId || undefined,
            postBody: postBody || undefined,
            user: this.user,
            bypassAuthState: this.bypassAuthState
        };
        try {
            this.resolve(await this.getIdpTask(type)(params));
        }
        catch (e) {
            this.reject(e);
        }
    }
    onError(error) {
        this.reject(error);
    }
    getIdpTask(type) {
        switch (type) {
            case "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */:
            case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
                return _signIn;
            case "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */:
            case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
                return _link;
            case "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */:
            case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
                return _reauth;
            default:
                _fail(this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        }
    }
    resolve(cred) {
        debugAssert(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
    }
    reject(error) {
        debugAssert(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
    }
    unregisterAndCleanUp() {
        if (this.eventManager) {
            this.eventManager.unregisterConsumer(this);
        }
        this.pendingPromise = null;
        this.cleanUp();
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
/**
 * Authenticates a Firebase client using a popup-based OAuth authentication flow.
 *
 * @remarks
 * If succeeds, returns the signed in user along with the provider's credential. If sign in was
 * unsuccessful, returns an error object containing additional information about the error.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */
async function signInWithPopup(auth, provider, resolver) {
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    const action = new PopupOperation(authInternal, "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);
    return action.executeNotNull();
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
 * OAuth flow.
 *
 * @remarks
 * If the reauthentication is successful, the returned result will contain the user and the
 * provider's credential.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 * // Reauthenticate using a popup.
 * await reauthenticateWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */
async function reauthenticateWithPopup(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Links the authenticated provider to the user account using a pop-up based OAuth flow.
 *
 * @remarks
 * If the linking is successful, the returned result will contain the user and the provider's credential.
 *
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a popup.
 * const provider = new FacebookAuthProvider();
 * await linkWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */
async function linkWithPopup(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */
class PopupOperation extends AbstractPopupRedirectOperation {
    constructor(auth, filter, provider, resolver, user) {
        super(auth, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (PopupOperation.currentPopupAction) {
            PopupOperation.currentPopupAction.cancel();
        }
        PopupOperation.currentPopupAction = this;
    }
    async executeNotNull() {
        const result = await this.execute();
        _assert(result, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return result;
    }
    async onExecution() {
        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
        const eventId = _generateEventId();
        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
        eventId);
        this.authWindow.associatedEvent = eventId;
        // Check for web storage support and origin validation _after_ the popup is
        // loaded. These operations are slow (~1 second or so) Rather than
        // waiting on them before opening the window, optimistically open the popup
        // and check for storage support at the same time. If storage support is
        // not available, this will cause the whole thing to reject properly. It
        // will also close the popup, but since the promise has already rejected,
        // the popup closed by user poll will reject into the void.
        this.resolver._originValidation(this.auth).catch(e => {
            this.reject(e);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {
            if (!isSupported) {
                this.reject(_createError(this.auth, "web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));
            }
        });
        // Handle user closure. Notice this does *not* use await
        this.pollUserCancellation();
    }
    get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
    }
    cancel() {
        this.reject(_createError(this.auth, "cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));
    }
    cleanUp() {
        if (this.authWindow) {
            this.authWindow.close();
        }
        if (this.pollId) {
            window.clearTimeout(this.pollId);
        }
        this.authWindow = null;
        this.pollId = null;
        PopupOperation.currentPopupAction = null;
    }
    pollUserCancellation() {
        const poll = () => {
            var _a, _b;
            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                // Make sure that there is sufficient time for whatever action to
                // complete. The window could have closed but the sign in network
                // call could still be in flight. This is specifically true for
                // Firefox or if the opener is in an iframe, in which case the oauth
                // helper closes the popup.
                this.pollId = window.setTimeout(() => {
                    this.pollId = null;
                    this.reject(_createError(this.auth, "popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));
                }, 8000 /* _Timeout.AUTH_EVENT */);
                return;
            }
            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
    }
}
// Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.
PopupOperation.currentPopupAction = null;

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PENDING_REDIRECT_KEY = 'pendingRedirect';
// We only get one redirect outcome for any one auth, so just store it
// in here.
const redirectOutcomeMap = new Map();
class RedirectAction extends AbstractPopupRedirectOperation {
    constructor(auth, resolver, bypassAuthState = false) {
        super(auth, [
            "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */,
            "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */,
            "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */,
            "unknown" /* AuthEventType.UNKNOWN */
        ], resolver, undefined, bypassAuthState);
        this.eventId = null;
    }
    /**
     * Override the execute function; if we already have a redirect result, then
     * just return it.
     */
    async execute() {
        let readyOutcome = redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
            try {
                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                const result = hasPendingRedirect ? await super.execute() : null;
                readyOutcome = () => Promise.resolve(result);
            }
            catch (e) {
                readyOutcome = () => Promise.reject(e);
            }
            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        // If we're not bypassing auth state, the ready outcome should be set to
        // null.
        if (!this.bypassAuthState) {
            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
        }
        return readyOutcome();
    }
    async onAuthEvent(event) {
        if (event.type === "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {
            return super.onAuthEvent(event);
        }
        else if (event.type === "unknown" /* AuthEventType.UNKNOWN */) {
            // This is a sentinel value indicating there's no pending redirect
            this.resolve(null);
            return;
        }
        if (event.eventId) {
            const user = await this.auth._redirectUserForId(event.eventId);
            if (user) {
                this.user = user;
                return super.onAuthEvent(event);
            }
            else {
                this.resolve(null);
            }
        }
    }
    async onExecution() { }
    cleanUp() { }
}
async function _getAndClearPendingRedirectStatus(resolver, auth) {
    const key = pendingRedirectKey(auth);
    const persistence = resolverPersistence(resolver);
    if (!(await persistence._isAvailable())) {
        return false;
    }
    const hasPendingRedirect = (await persistence._get(key)) === 'true';
    await persistence._remove(key);
    return hasPendingRedirect;
}
async function _setPendingRedirectStatus(resolver, auth) {
    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');
}
function _clearRedirectOutcomes() {
    redirectOutcomeMap.clear();
}
function _overrideRedirectResult(auth, result) {
    redirectOutcomeMap.set(auth._key(), result);
}
function resolverPersistence(resolver) {
    return _getInstance(resolver._redirectPersistence);
}
function pendingRedirectKey(auth) {
    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Authenticates a Firebase client using a full-page redirect flow.
 *
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link signInWithRedirect}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */
function signInWithRedirect(auth, provider, resolver) {
    return _signInWithRedirect(auth, provider, resolver);
}
async function _signInWithRedirect(auth, provider, resolver) {
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await authInternal._initializationPromise;
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    await _setPendingRedirectStatus(resolverInternal, authInternal);
    return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link reauthenticateWithRedirect}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * // Reauthenticate using a redirect.
 * await reauthenticateWithRedirect(result.user, provider);
 * // This will again trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */
function reauthenticateWithRedirect(user, provider, resolver) {
    return _reauthenticateWithRedirect(user, provider, resolver);
}
async function _reauthenticateWithRedirect(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await userInternal.auth._initializationPromise;
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);
}
/**
 * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link linkWithRedirect}.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a redirect.
 * const provider = new FacebookAuthProvider();
 * await linkWithRedirect(result.user, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */
function linkWithRedirect(user, provider, resolver) {
    return _linkWithRedirect(user, provider, resolver);
}
async function _linkWithRedirect(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await userInternal.auth._initializationPromise;
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _assertLinkedStatus(false, userInternal, provider.providerId);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);
}
/**
 * Returns a {@link UserCredential} from the redirect-based sign-in flow.
 *
 * @remarks
 * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
 * error. If no redirect operation was called, returns `null`.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */
async function getRedirectResult(auth, resolver) {
    await _castAuth(auth)._initializationPromise;
    return _getRedirectResult(auth, resolver, false);
}
async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
    const authInternal = _castAuth(auth);
    const resolver = _withDefaultResolver(authInternal, resolverExtern);
    const action = new RedirectAction(authInternal, resolver, bypassAuthState);
    const result = await action.execute();
    if (result && !bypassAuthState) {
        delete result.user._redirectEventId;
        await authInternal._persistUserIfCurrent(result.user);
        await authInternal._setRedirectUser(null, resolverExtern);
    }
    return result;
}
async function prepareUserForRedirect(user) {
    const eventId = _generateEventId(`${user.uid}:::`);
    user._redirectEventId = eventId;
    await user.auth._setRedirectUser(user);
    await user.auth._persistUserIfCurrent(user);
    return eventId;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The amount of time to store the UIDs of seen events; this is
// set to 10 min by default
const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
class AuthEventManager {
    constructor(auth) {
        this.auth = auth;
        this.cachedEventUids = new Set();
        this.consumers = new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
    }
    registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent &&
            this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
            this.saveEventToCache(this.queuedRedirectEvent);
            this.queuedRedirectEvent = null;
        }
    }
    unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
    }
    onEvent(event) {
        // Check if the event has already been handled
        if (this.hasEventBeenHandled(event)) {
            return false;
        }
        let handled = false;
        this.consumers.forEach(consumer => {
            if (this.isEventForConsumer(event, consumer)) {
                handled = true;
                this.sendToConsumer(event, consumer);
                this.saveEventToCache(event);
            }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
            // If we've already seen a redirect before, or this is a popup event,
            // bail now
            return handled;
        }
        this.hasHandledPotentialRedirect = true;
        // If the redirect wasn't handled, hang on to it
        if (!handled) {
            this.queuedRedirectEvent = event;
            handled = true;
        }
        return handled;
    }
    sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !isNullRedirectEvent(event)) {
            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||
                "internal-error" /* AuthErrorCode.INTERNAL_ERROR */;
            consumer.onError(_createError(this.auth, code));
        }
        else {
            consumer.onAuthEvent(event);
        }
    }
    isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null ||
            (!!event.eventId && event.eventId === consumer.eventId);
        return consumer.filter.includes(event.type) && eventIdMatches;
    }
    hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >=
            EVENT_DUPLICATION_CACHE_DURATION_MS) {
            this.cachedEventUids.clear();
        }
        return this.cachedEventUids.has(eventUid(event));
    }
    saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
    }
}
function eventUid(e) {
    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');
}
function isNullRedirectEvent({ type, error }) {
    return (type === "unknown" /* AuthEventType.UNKNOWN */ &&
        (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */}`);
}
function isRedirectEvent(event) {
    switch (event.type) {
        case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
        case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
        case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
            return true;
        case "unknown" /* AuthEventType.UNKNOWN */:
            return isNullRedirectEvent(event);
        default:
            return false;
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function _getProjectConfig(auth, request = {}) {
    return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v1/projects" /* Endpoint.GET_PROJECT_CONFIG */, request);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const HTTP_REGEX = /^https?/;
async function _validateOrigin(auth) {
    // Skip origin validation if we are in an emulated environment
    if (auth.config.emulator) {
        return;
    }
    const { authorizedDomains } = await _getProjectConfig(auth);
    for (const domain of authorizedDomains) {
        try {
            if (matchDomain(domain)) {
                return;
            }
        }
        catch (_a) {
            // Do nothing if there's a URL error; just continue searching
        }
    }
    // In the old SDK, this error also provides helpful messages.
    _fail(auth, "unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */);
}
function matchDomain(expected) {
    const currentUrl = _getCurrentUrl();
    const { protocol, hostname } = new URL(currentUrl);
    if (expected.startsWith('chrome-extension://')) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === '' && hostname === '') {
            // For some reason we're not parsing chrome URLs properly
            return (protocol === 'chrome-extension:' &&
                expected.replace('chrome-extension://', '') ===
                    currentUrl.replace('chrome-extension://', ''));
        }
        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
    }
    if (!HTTP_REGEX.test(protocol)) {
        return false;
    }
    if (IP_ADDRESS_REGEX.test(expected)) {
        // The domain has to be exactly equal to the pattern, as an IP domain will
        // only contain the IP, no extra character.
        return hostname === expected;
    }
    // Dots in pattern should be escaped.
    const escapedDomainPattern = expected.replace(/\./g, '\\.');
    // Non ip address domains.
    // domain.com = *.domain.com OR domain.com
    const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
    return re.test(hostname);
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const NETWORK_TIMEOUT = new Delay(30000, 60000);
/**
 * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */
function resetUnloadedGapiModules() {
    // Clear last failed gapi.load state to force next gapi.load to first
    // load the failed gapi.iframes module.
    // Get gapix.beacon context.
    const beacon = _window().___jsl;
    // Get current hint.
    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
        // Get gapi hint.
        for (const hint of Object.keys(beacon.H)) {
            // Requested modules.
            beacon.H[hint].r = beacon.H[hint].r || [];
            // Loaded modules.
            beacon.H[hint].L = beacon.H[hint].L || [];
            // Set requested modules to a copy of the loaded modules.
            beacon.H[hint].r = [...beacon.H[hint].L];
            // Clear pending callbacks.
            if (beacon.CP) {
                for (let i = 0; i < beacon.CP.length; i++) {
                    // Remove all failed pending callbacks.
                    beacon.CP[i] = null;
                }
            }
        }
    }
}
function loadGapi(auth) {
    return new Promise((resolve, reject) => {
        var _a, _b, _c;
        // Function to run when gapi.load is ready.
        function loadGapiIframe() {
            // The developer may have tried to previously run gapi.load and failed.
            // Run this to fix that.
            resetUnloadedGapiModules();
            gapi.load('gapi.iframes', {
                callback: () => {
                    resolve(gapi.iframes.getContext());
                },
                ontimeout: () => {
                    // The above reset may be sufficient, but having this reset after
                    // failure ensures that if the developer calls gapi.load after the
                    // connection is re-established and before another attempt to embed
                    // the iframe, it would work and would not be broken because of our
                    // failed attempt.
                    // Timeout when gapi.iframes.Iframe not loaded.
                    resetUnloadedGapiModules();
                    reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                },
                timeout: NETWORK_TIMEOUT.get()
            });
        }
        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
            // If gapi.iframes.Iframe available, resolve.
            resolve(gapi.iframes.getContext());
        }
        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
            // Gapi loader ready, load gapi.iframes.
            loadGapiIframe();
        }
        else {
            // Create a new iframe callback when this is called so as not to overwrite
            // any previous defined callback. This happens if this method is called
            // multiple times in parallel and could result in the later callback
            // overwriting the previous one. This would end up with a iframe
            // timeout.
            const cbName = _generateCallbackName('iframefcb');
            // GApi loader not available, dynamically load platform.js.
            _window()[cbName] = () => {
                // GApi loader should be ready.
                if (!!gapi.load) {
                    loadGapiIframe();
                }
                else {
                    // Gapi loader failed, throw error.
                    reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                }
            };
            // Load GApi loader.
            return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`)
                .catch(e => reject(e));
        }
    }).catch(error => {
        // Reset cached promise to allow for retrial.
        cachedGApiLoader = null;
        throw error;
    });
}
let cachedGApiLoader = null;
function _loadGapi(auth) {
    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
    return cachedGApiLoader;
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PING_TIMEOUT = new Delay(5000, 15000);
const IFRAME_PATH = '__/auth/iframe';
const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
const IFRAME_ATTRIBUTES = {
    style: {
        position: 'absolute',
        top: '-100px',
        width: '1px',
        height: '1px'
    },
    'aria-hidden': 'true',
    tabindex: '-1'
};
// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
const EID_FROM_APIHOST = new Map([
    ["identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */, 'p'],
    ['staging-identitytoolkit.sandbox.googleapis.com', 's'],
    ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test
]);
function getIframeUrl(auth) {
    const config = auth.config;
    _assert(config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
    const url = config.emulator
        ? _emulatorUrl(config, EMULATED_IFRAME_PATH)
        : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
    const params = {
        apiKey: config.apiKey,
        appName: auth.name,
        v: SDK_VERSION
    };
    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
    if (eid) {
        params.eid = eid;
    }
    const frameworks = auth._getFrameworks();
    if (frameworks.length) {
        params.fw = frameworks.join(',');
    }
    return `${url}?${index_esm2017_querystring(params).slice(1)}`;
}
async function _openIframe(auth) {
    const context = await _loadGapi(auth);
    const gapi = _window().gapi;
    _assert(gapi, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
    return context.open({
        where: document.body,
        url: getIframeUrl(auth),
        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
        attributes: IFRAME_ATTRIBUTES,
        dontclear: true
    }, (iframe) => new Promise(async (resolve, reject) => {
        await iframe.restyle({
            // Prevent iframe from closing on mouse out.
            setHideOnLeave: false
        });
        const networkError = _createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);
        // Confirm iframe is correctly loaded.
        // To fallback on failure, set a timeout.
        const networkErrorTimer = _window().setTimeout(() => {
            reject(networkError);
        }, PING_TIMEOUT.get());
        // Clear timer and resolve pending iframe ready promise.
        function clearTimerAndResolve() {
            _window().clearTimeout(networkErrorTimer);
            resolve(iframe);
        }
        // This returns an IThenable. However the reject part does not call
        // when the iframe is not loaded.
        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
            reject(networkError);
        });
    }));
}

/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const BASE_POPUP_OPTIONS = {
    location: 'yes',
    resizable: 'yes',
    statusbar: 'yes',
    toolbar: 'no'
};
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 600;
const TARGET_BLANK = '_blank';
const FIREFOX_EMPTY_URL = 'http://localhost';
class AuthPopup {
    constructor(window) {
        this.window = window;
        this.associatedEvent = null;
    }
    close() {
        if (this.window) {
            try {
                this.window.close();
            }
            catch (e) { }
        }
    }
}
function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
    let target = '';
    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,
        left });
    // Chrome iOS 7 and 8 is returning an undefined popup win when target is
    // specified, even though the popup is not necessarily blocked.
    const ua = index_esm2017_getUA().toLowerCase();
    if (name) {
        target = _isChromeIOS(ua) ? TARGET_BLANK : name;
    }
    if (_isFirefox(ua)) {
        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
        url = url || FIREFOX_EMPTY_URL;
        // Firefox disables by default scrolling on popup windows, which can create
        // issues when the user has many Google accounts, for instance.
        options.scrollbars = 'yes';
    }
    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');
    if (_isIOSStandalone(ua) && target !== '_self') {
        openAsNewWindowIOS(url || '', target);
        return new AuthPopup(null);
    }
    // about:blank getting sanitized causing browsers like IE/Edge to display
    // brief error message before redirecting to handler.
    const newWin = window.open(url || '', target, optionsString);
    _assert(newWin, auth, "popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */);
    // Flaky on IE edge, encapsulate with a try and catch.
    try {
        newWin.focus();
    }
    catch (e) { }
    return new AuthPopup(newWin);
}
function openAsNewWindowIOS(url, target) {
    const el = document.createElement('a');
    el.href = url;
    el.target = target;
    const click = document.createEvent('MouseEvent');
    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
    el.dispatchEvent(click);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */
const WIDGET_PATH = '__/auth/handler';
/**
 * URL for emulated environment
 *
 * @internal
 */
const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
/**
 * Fragment name for the App Check token that gets passed to the widget
 *
 * @internal
 */
const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');
async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
    _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
    _assert(auth.config.apiKey, auth, "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */);
    const params = {
        apiKey: auth.config.apiKey,
        appName: auth.name,
        authType,
        redirectUrl,
        v: SDK_VERSION,
        eventId
    };
    if (provider instanceof FederatedAuthProvider) {
        provider.setDefaultLanguage(auth.languageCode);
        params.providerId = provider.providerId || '';
        if (!isEmpty(provider.getCustomParameters())) {
            params.customParameters = JSON.stringify(provider.getCustomParameters());
        }
        // TODO set additionalParams from the provider as well?
        for (const [key, value] of Object.entries(additionalParams || {})) {
            params[key] = value;
        }
    }
    if (provider instanceof BaseOAuthProvider) {
        const scopes = provider.getScopes().filter(scope => scope !== '');
        if (scopes.length > 0) {
            params.scopes = scopes.join(',');
        }
    }
    if (auth.tenantId) {
        params.tid = auth.tenantId;
    }
    // TODO: maybe set eid as endipointId
    // TODO: maybe set fw as Frameworks.join(",")
    const paramsDict = params;
    for (const key of Object.keys(paramsDict)) {
        if (paramsDict[key] === undefined) {
            delete paramsDict[key];
        }
    }
    // Sets the App Check token to pass to the widget
    const appCheckToken = await auth._getAppCheckToken();
    const appCheckTokenFragment = appCheckToken
        ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`
        : '';
    // Start at index 1 to skip the leading '&' in the query string
    return `${getHandlerBase(auth)}?${index_esm2017_querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
}
function getHandlerBase({ config }) {
    if (!config.emulator) {
        return `https://${config.authDomain}/${WIDGET_PATH}`;
    }
    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The special web storage event
 *
 */
const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
class BrowserPopupRedirectResolver {
    constructor() {
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
        this._overrideRedirectResult = _overrideRedirectResult;
    }
    // Wrapping in async even though we don't await anywhere in order
    // to make sure errors are raised as promise rejections
    async _openPopup(auth, provider, authType, eventId) {
        var _a;
        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        return _open(auth, url, _generateEventId());
    }
    async _openRedirect(auth, provider, authType, eventId) {
        await this._originValidation(auth);
        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        _setWindowLocation(url);
        return new Promise(() => { });
    }
    _initialize(auth) {
        const key = auth._key();
        if (this.eventManagers[key]) {
            const { manager, promise } = this.eventManagers[key];
            if (manager) {
                return Promise.resolve(manager);
            }
            else {
                debugAssert(promise, 'If manager is not set, promise should be');
                return promise;
            }
        }
        const promise = this.initAndGetManager(auth);
        this.eventManagers[key] = { promise };
        // If the promise is rejected, the key should be removed so that the
        // operation can be retried later.
        promise.catch(() => {
            delete this.eventManagers[key];
        });
        return promise;
    }
    async initAndGetManager(auth) {
        const iframe = await _openIframe(auth);
        const manager = new AuthEventManager(auth);
        iframe.register('authEvent', (iframeEvent) => {
            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */);
            // TODO: Consider splitting redirect and popup events earlier on
            const handled = manager.onEvent(iframeEvent.authEvent);
            return { status: handled ? "ACK" /* GapiOutcome.ACK */ : "ERROR" /* GapiOutcome.ERROR */ };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth._key()] = { manager };
        this.iframes[auth._key()] = iframe;
        return manager;
    }
    _isIframeWebStorageSupported(auth, cb) {
        const iframe = this.iframes[auth._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {
            var _a;
            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
            if (isSupported !== undefined) {
                cb(!!isSupported);
            }
            _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    }
    _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) {
            this.originValidationPromises[key] = _validateOrigin(auth);
        }
        return this.originValidationPromises[key];
    }
    get _shouldInitProactively() {
        // Mobile browsers and Safari need to optimistically initialize
        return _isMobileBrowser() || _isSafari() || _isIOS();
    }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @public
 */
const browserPopupRedirectResolver = BrowserPopupRedirectResolver;

class MultiFactorAssertionImpl {
    constructor(factorId) {
        this.factorId = factorId;
    }
    _process(auth, session, displayName) {
        switch (session.type) {
            case "enroll" /* MultiFactorSessionType.ENROLL */:
                return this._finalizeEnroll(auth, session.credential, displayName);
            case "signin" /* MultiFactorSessionType.SIGN_IN */:
                return this._finalizeSignIn(auth, session.credential);
            default:
                return debugFail('unexpected MultiFactorSessionType');
        }
    }
}

/**
 * {@inheritdoc PhoneMultiFactorAssertion}
 *
 * @public
 */
class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
    constructor(credential) {
        super("phone" /* FactorId.PHONE */);
        this.credential = credential;
    }
    /** @internal */
    static _fromCredential(credential) {
        return new PhoneMultiFactorAssertionImpl(credential);
    }
    /** @internal */
    _finalizeEnroll(auth, idToken, displayName) {
        return finalizeEnrollPhoneMfa(auth, {
            idToken,
            displayName,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
    /** @internal */
    _finalizeSignIn(auth, mfaPendingCredential) {
        return finalizeSignInPhoneMfa(auth, {
            mfaPendingCredential,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
}
/**
 * Provider for generating a {@link PhoneMultiFactorAssertion}.
 *
 * @public
 */
class PhoneMultiFactorGenerator {
    constructor() { }
    /**
     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
     *
     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
     * @returns A {@link PhoneMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}
     */
    static assertion(credential) {
        return PhoneMultiFactorAssertionImpl._fromCredential(credential);
    }
}
/**
 * The identifier of the phone second factor: `phone`.
 */
PhoneMultiFactorGenerator.FACTOR_ID = 'phone';

/**
 * Provider for generating a {@link TotpMultiFactorAssertion}.
 *
 * @public
 */
class TotpMultiFactorGenerator {
    /**
     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of
     * the TOTP (time-based one-time password) second factor.
     * This assertion is used to complete enrollment in TOTP second factor.
     *
     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.
     * @param oneTimePassword One-time password from TOTP App.
     * @returns A {@link TotpMultiFactorAssertion} which can be used with
     * {@link MultiFactorUser.enroll}.
     */
    static assertionForEnrollment(secret, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);
    }
    /**
     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.
     * This assertion is used to complete signIn with TOTP as the second factor.
     *
     * @param enrollmentId identifies the enrolled TOTP second factor.
     * @param oneTimePassword One-time password from TOTP App.
     * @returns A {@link TotpMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}.
     */
    static assertionForSignIn(enrollmentId, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);
    }
    /**
     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.
     * Creates a TOTP secret as part of enrolling a TOTP second factor.
     * Used for generating a QR code URL or inputting into a TOTP app.
     * This method uses the auth instance corresponding to the user in the multiFactorSession.
     *
     * @param session The {@link MultiFactorSession} that the user is part of.
     * @returns A promise to {@link TotpSecret}.
     */
    static async generateSecret(session) {
        const mfaSession = session;
        _assert(typeof mfaSession.auth !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const response = await startEnrollTotpMfa(mfaSession.auth, {
            idToken: mfaSession.credential,
            totpEnrollmentInfo: {}
        });
        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.auth);
    }
}
/**
 * The identifier of the TOTP second factor: `totp`.
 */
TotpMultiFactorGenerator.FACTOR_ID = "totp" /* FactorId.TOTP */;
class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
    constructor(otp, enrollmentId, secret) {
        super("totp" /* FactorId.TOTP */);
        this.otp = otp;
        this.enrollmentId = enrollmentId;
        this.secret = secret;
    }
    /** @internal */
    static _fromSecret(secret, otp) {
        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);
    }
    /** @internal */
    static _fromEnrollmentId(enrollmentId, otp) {
        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);
    }
    /** @internal */
    async _finalizeEnroll(auth, idToken, displayName) {
        _assert(typeof this.secret !== 'undefined', auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        return finalizeEnrollTotpMfa(auth, {
            idToken,
            displayName,
            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)
        });
    }
    /** @internal */
    async _finalizeSignIn(auth, mfaPendingCredential) {
        _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        const totpVerificationInfo = { verificationCode: this.otp };
        return finalizeSignInTotpMfa(auth, {
            mfaPendingCredential,
            mfaEnrollmentId: this.enrollmentId,
            totpVerificationInfo
        });
    }
}
/**
 * Provider for generating a {@link TotpMultiFactorAssertion}.
 *
 * Stores the shared secret key and other parameters to generate time-based OTPs.
 * Implements methods to retrieve the shared secret key and generate a QR code URL.
 * @public
 */
class TotpSecret {
    // The public members are declared outside the constructor so the docs can be generated.
    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {
        this.sessionInfo = sessionInfo;
        this.auth = auth;
        this.secretKey = secretKey;
        this.hashingAlgorithm = hashingAlgorithm;
        this.codeLength = codeLength;
        this.codeIntervalSeconds = codeIntervalSeconds;
        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
    }
    /** @internal */
    static _fromStartTotpMfaEnrollmentResponse(response, auth) {
        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);
    }
    /** @internal */
    _makeTotpVerificationInfo(otp) {
        return { sessionInfo: this.sessionInfo, verificationCode: otp };
    }
    /**
     * Returns a QR code URL as described in
     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format
     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.
     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.
     *
     * @param accountName the name of the account/app along with a user identifier.
     * @param issuer issuer of the TOTP (likely the app name).
     * @returns A QR code URL string.
     */
    generateQrCodeUrl(accountName, issuer) {
        var _a;
        let useDefaults = false;
        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {
            useDefaults = true;
        }
        if (useDefaults) {
            if (_isEmptyString(accountName)) {
                accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';
            }
            if (_isEmptyString(issuer)) {
                issuer = this.auth.name;
            }
        }
        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;
    }
}
/** @internal */
function _isEmptyString(input) {
    return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;
}

var index_e3d5d3f4_name = "@firebase/auth";
var index_e3d5d3f4_version = "0.23.2";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AuthInterop {
    constructor(auth) {
        this.auth = auth;
        this.internalListeners = new Map();
    }
    getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
    }
    async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) {
            return null;
        }
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return { accessToken };
    }
    addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) {
            return;
        }
        const unsubscribe = this.auth.onIdTokenChanged(user => {
            listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
    }
    removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) {
            return;
        }
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
    }
    assertAuthConfigured() {
        _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);
    }
    updateProactiveRefresh() {
        if (this.internalListeners.size > 0) {
            this.auth._startProactiveRefresh();
        }
        else {
            this.auth._stopProactiveRefresh();
        }
    }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getVersionForPlatform(clientPlatform) {
    switch (clientPlatform) {
        case "Node" /* ClientPlatform.NODE */:
            return 'node';
        case "ReactNative" /* ClientPlatform.REACT_NATIVE */:
            return 'rn';
        case "Worker" /* ClientPlatform.WORKER */:
            return 'webworker';
        case "Cordova" /* ClientPlatform.CORDOVA */:
            return 'cordova';
        default:
            return undefined;
    }
}
/** @internal */
function registerAuth(clientPlatform) {
    _registerComponent(new Component("auth" /* _ComponentName.AUTH */, (container, { options: deps }) => {
        const app = container.getProvider('app').getImmediate();
        const heartbeatServiceProvider = container.getProvider('heartbeat');
        const appCheckServiceProvider = container.getProvider('app-check-internal');
        const { apiKey, authDomain } = app.options;
        _assert(apiKey && !apiKey.includes(':'), "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */, { appName: app.name });
        const config = {
            apiKey,
            authDomain,
            clientPlatform,
            apiHost: "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */,
            tokenApiHost: "securetoken.googleapis.com" /* DefaultConfig.TOKEN_API_HOST */,
            apiScheme: "https" /* DefaultConfig.API_SCHEME */,
            sdkClientVersion: _getClientVersion(clientPlatform)
        };
        const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);
        _initializeAuthInstance(authInstance, deps);
        return authInstance;
    }, "PUBLIC" /* ComponentType.PUBLIC */)
        /**
         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
         * For why we do this, See go/firebase-next-auth-init
         */
        .setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */)
        /**
         * Because all firebase products that depend on auth depend on auth-internal directly,
         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
         */
        .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
        const authInternalProvider = container.getProvider("auth-internal" /* _ComponentName.AUTH_INTERNAL */);
        authInternalProvider.initialize();
    }));
    _registerComponent(new Component("auth-internal" /* _ComponentName.AUTH_INTERNAL */, container => {
        const auth = _castAuth(container.getProvider("auth" /* _ComponentName.AUTH */).getImmediate());
        return (auth => new AuthInterop(auth))(auth);
    }, "PRIVATE" /* ComponentType.PRIVATE */).setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */));
    registerVersion(index_e3d5d3f4_name, index_e3d5d3f4_version, getVersionForPlatform(clientPlatform));
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    registerVersion(index_e3d5d3f4_name, index_e3d5d3f4_version, 'esm2017');
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
const authIdTokenMaxAge = getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;
let lastPostedIdToken = null;
const mintCookieFactory = (url) => async (user) => {
    const idTokenResult = user && (await user.getIdTokenResult());
    const idTokenAge = idTokenResult &&
        (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;
    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {
        return;
    }
    // Specifically trip null => undefined when logged out, to delete any existing cookie
    const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;
    if (lastPostedIdToken === idToken) {
        return;
    }
    lastPostedIdToken = idToken;
    await fetch(url, {
        method: idToken ? 'POST' : 'DELETE',
        headers: idToken
            ? {
                'Authorization': `Bearer ${idToken}`
            }
            : {}
    });
};
/**
 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
 *
 * @param app - The Firebase App.
 *
 * @public
 */
function getAuth(app = getApp()) {
    const provider = _getProvider(app, 'auth');
    if (provider.isInitialized()) {
        return provider.getImmediate();
    }
    const auth = initializeAuth(app, {
        popupRedirectResolver: browserPopupRedirectResolver,
        persistence: [
            indexedDBLocalPersistence,
            browserLocalPersistence,
            browserSessionPersistence
        ]
    });
    const authTokenSyncUrl = getExperimentalSetting('authTokenSyncURL');
    if (authTokenSyncUrl) {
        const mintCookie = mintCookieFactory(authTokenSyncUrl);
        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));
        onIdTokenChanged(auth, user => mintCookie(user));
    }
    const authEmulatorHost = getDefaultEmulatorHost('auth');
    if (authEmulatorHost) {
        connectAuthEmulator(auth, `http://${authEmulatorHost}`);
    }
    return auth;
}
registerAuth("Browser" /* ClientPlatform.BROWSER */);



;// CONCATENATED MODULE: ./node_modules/@firebase/auth/dist/esm2017/index.js







;// CONCATENATED MODULE: ./node_modules/firebase/auth/dist/esm/index.esm.js


;// CONCATENATED MODULE: ./node_modules/firebase/app/dist/esm/index.esm.js



var index_esm_name = "firebase";
var index_esm_version = "9.23.0";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
registerVersion(index_esm_name, index_esm_version, 'app');

;// CONCATENATED MODULE: ./src/dropbox_auth.ts




const firebaseConfig = {
    apiKey: 'AIzaSyDwtcPjQMj3JAy9d7wwjib19eywvGfdV3A',
    authDomain: 'splunge-390110.firebaseapp.com',
    projectId: 'splunge-390110',
    storageBucket: 'splunge-390110.appspot.com',
    messagingSenderId: '1041542736895',
    appId: '1:1041542736895:web:663b9c5ab38f8295eb95ca',
};
let firebase_app;
let firebase_auth;
function getCurrentUser(auth) {
    return new Promise((resolve, reject) => {
        const unsubscribe = auth.onAuthStateChanged((user) => {
            unsubscribe();
            resolve(user);
        }, reject);
    });
}
class DropboxAuther {
    CLIENT_ID = 'jxpyhv2cqozub0c';
    REDIRECT_URI = 'http://localhost:8080/';
    dbx;
    dbxAuth;
    authed = false;
    firebase_user;
    async init() {
        if (true) {
            this.REDIRECT_URI = 'https://wrightwriter.github.io/splunge/';
        }
        firebase_app = initializeApp(firebaseConfig);
        firebase_auth = getAuth(firebase_app);
        this.firebase_user = await getCurrentUser(firebase_auth);
        this.dbxAuth = new Dropbox_sdk_min.DropboxAuth({
            clientId: this.CLIENT_ID,
        });
        if (this.firebase_user) {
            const id_token = await firebase_auth.currentUser?.getIdToken(true);
            let res = await (await fetch('https://us-central1-splunge-390110.cloudfunctions.net/getDropboxCode' + `?id_token=${id_token}`)).json();
            const access_token = res.token;
            this.dbxAuth.setAccessToken(access_token);
            this.dbx = new Dropbox_sdk_min.Dropbox({
                auth: this.dbxAuth,
            });
            let files = await this.dbx.filesListFolder({
                path: '',
            });
            this.authed = true;
        }
    }
    constructor() { }
    parseQueryString(str) {
        const ret = Object.create(null);
        if (typeof str !== 'string') {
            return ret;
        }
        str = str.trim().replace(/^(\?|#|&)/, '');
        if (!str) {
            return ret;
        }
        str.split('&').forEach((param) => {
            const parts = param.replace(/\+/g, ' ').split('=');
            let key = parts.shift();
            let val = parts.length > 0 ? parts.join('=') : undefined;
            key = decodeURIComponent(key);
            val = val === undefined ? null : decodeURIComponent(val);
            if (ret[key] === undefined) {
                ret[key] = val;
            }
            else if (Array.isArray(ret[key])) {
                ret[key].push(val);
            }
            else {
                ret[key] = [ret[key], val];
            }
        });
        return ret;
    }
    async doAuth() {
        try {
            const url_response = await fetch('https://us-central1-splunge-390110.cloudfunctions.net/getAuthenticationUrl' + `?url=${window.location.href}`);
            let url = await url_response.json();
            url = url['auth_url'];
            window.location.href = url;
        }
        catch (error) {
            console.error(error);
        }
    }
    async try_init_dropbox() {
        let code = undefined;
        const getCodeFromUrl = () => {
            code = this.parseQueryString(window.location.search).code;
            return code;
        };
        const hasRedirectedFromAuth = () => {
            return !!getCodeFromUrl();
        };
        let redirectedFromAuth = hasRedirectedFromAuth();
        if (redirectedFromAuth) {
            const url = new URL(window.location.href);
            const body = {};
            for (let key of url.searchParams.keys()) {
                if (url.searchParams.getAll(key).length > 1) {
                    body[key] = url.searchParams.getAll(key);
                }
                else {
                    body[key] = url.searchParams.get(key);
                }
            }
            window.history.replaceState &&
                window.history.replaceState(null, '', window.location.pathname +
                    window.location.search.replace(/[?&]code=[^&]+/, '').replace(/^&/, '?') +
                    window.location.hash);
            body['redirect_url'] = window.location.href;
            const res = await fetch('https://us-central1-splunge-390110.cloudfunctions.net/exchangeDropboxCode' +
                `?redirect_url=${window.location.href}` +
                `&code=${body['code']}`);
            const data = await res.json();
            signInWithCustomToken(firebase_auth, data.token);
        }
        return;
    }
}

;// CONCATENATED MODULE: ./src/components/GalleryWidget.svelte
/* src/components/GalleryWidget.svelte generated by Svelte v4.0.0 */


const { Error: Error_1, console: GalleryWidget_svelte_console_1 } = globals;













const GalleryWidget_svelte_file = "src/components/GalleryWidget.svelte";

function GalleryWidget_svelte_add_css(target) {
	append_styles(target, "svelte-1ytwwqn", ".svelte-1ytwwqn.svelte-1ytwwqn{user-select:none;-webkit-tap-highlight-color:transparent}#canvas-preview-img.svelte-1ytwwqn.svelte-1ytwwqn{height:12rem}.hide.svelte-1ytwwqn.svelte-1ytwwqn{display:none}#gallery-container::-webkit-scrollbar{background:black}#gallery-container::-webkit-scrollbar-track{background:grey}#gallery-container::-webkit-scrollbar-thumb{background:white}#size-modal.svelte-1ytwwqn.svelte-1ytwwqn{position:fixed;display:flex;flex-direction:column;align-items:center;width:100vw;height:100vh;left:0;top:0;z-index:101;background:black;justify-content:center}#gallery-container-outer.svelte-1ytwwqn.svelte-1ytwwqn{position:fixed;display:flex;flex-direction:column;align-items:center;width:100vw;height:100vh;left:0;top:0;z-index:100;background:black}#gallery-container-outer.svelte-1ytwwqn #gallery-container.svelte-1ytwwqn{overflow-y:overlay;scrollbar-gutter:stable both-edges;margin-top:1rem;height:100%;max-width:40rem;width:100%;display:flex;flex-direction:column;align-items:center}#gallery-container-outer.svelte-1ytwwqn #gallery-container #top-bar.svelte-1ytwwqn{margin-bottom:1rem;width:100%;font-size:2rem;display:flex;justify-content:space-between}#gallery-container-outer.svelte-1ytwwqn #gallery-container #top-bar #project-title.svelte-1ytwwqn{margin-left:0.5rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #options-bar.svelte-1ytwwqn{align-items:center;margin-bottom:1rem;width:100%;font-size:2rem;display:flex;justify-content:space-between}#gallery-container-outer.svelte-1ytwwqn #gallery-container #options-bar .svelte-1ytwwqn{font-size:0.95rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #options-bar .svelte-1ytwwqn svg{fill:white}#gallery-container-outer.svelte-1ytwwqn #gallery-container #options-bar #button.svelte-1ytwwqn{display:flex;cursor:pointer;padding:0rem 0.2rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #options-bar #button.svelte-1ytwwqn svg{height:100%}#gallery-container-outer.svelte-1ytwwqn #gallery-container #options-bar #button.svelte-1ytwwqn:active{filter:invert(1);background:black}#gallery-container-outer.svelte-1ytwwqn #gallery-container .ok-button.svelte-1ytwwqn svg{transform:scale(0.96) !important}#gallery-container-outer.svelte-1ytwwqn #gallery-container #back-button.svelte-1ytwwqn>svg{transform:scale(1.5) translate(0.2rem, 0px);fill:white;width:3rem;aspect-ratio:1/1;cursor:pointer}#gallery-container-outer.svelte-1ytwwqn #gallery-container #back-button.svelte-1ytwwqn>svg:active{filter:invert(1);background:black}#gallery-container-outer.svelte-1ytwwqn #gallery-container #gallery-elements.svelte-1ytwwqn{width:100%;display:grid;grid-template-columns:repeat(3, 1fr);gap:10px;grid-auto-rows:minmax(100px, auto)}#gallery-container-outer.svelte-1ytwwqn #gallery-container #gallery-elements #element.svelte-1ytwwqn{cursor:pointer;user-select:none}#gallery-container-outer.svelte-1ytwwqn #gallery-container #gallery-elements #element #element-name.svelte-1ytwwqn{margin-bottom:0.5rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #gallery-elements #element.svelte-1ytwwqn:active{background:white}#gallery-container-outer.svelte-1ytwwqn #gallery-container #gallery-elements #element:active .svelte-1ytwwqn{color:black}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project.svelte-1ytwwqn{display:flex;justify-content:space-between;width:100%;margin-bottom:1rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options.svelte-1ytwwqn{display:flex;flex-direction:column;justify-content:space-between}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options .svelte-1ytwwqn{font-size:1.3rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options #project-save-button-title.svelte-1ytwwqn{margin-right:0.5rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options #project-save-button.svelte-1ytwwqn{margin-right:1.5rem;cursor:pointer;justify-content:flex-end;display:flex;flex-direction:row;align-items:center;height:2rem;max-width:30rem;width:100%}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options #project-save-button.svelte-1ytwwqn:active{filter:invert(1);background:black}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options #project-save-button .icon.svelte-1ytwwqn{width:2rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options #project-save-button .svelte-1ytwwqn{font-size:1rem}#gallery-container-outer.svelte-1ytwwqn #gallery-container #current-project #project-options #project-save-button.svelte-1ytwwqn svg{aspect-ratio:1/1;fill:white}.knob-container.svelte-1ytwwqn.svelte-1ytwwqn{box-sizing:border-box;-webkit-box-sizing:border-box;aspect-ratio:1/1;max-height:50%;height:100%;display:flex;justify-content:center;align-items:center;margin-right:1rem;pointer-events:all;user-select:none;margin-bottom:auto;margin-top:auto;margin-right:0rem}.knob.svelte-1ytwwqn.svelte-1ytwwqn{cursor:pointer;display:block;aspect-ratio:1/1;height:100%;padding:0;color:var(--text-color);transform-origin:50% 50%}.knob.svelte-1ytwwqn.svelte-1ytwwqn:active{filter:invert(1);background:black}.knob.svelte-1ytwwqn svg{fill:white;width:100%;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FsbGVyeVdpZGdldC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBaVhrQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJHYWxsZXJ5V2lkZ2V0LnN2ZWx0ZSJdfQ== */");
}

function GalleryWidget_svelte_get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[38] = list[i];
	child_ctx[40] = i;
	return child_ctx;
}

// (20:1) {#if gallery_open}
function create_if_block(ctx) {
	let div27;
	let div26;
	let div2;
	let div0;
	let t1;
	let div1;
	let t2;
	let div13;
	let img;
	let img_src_value;
	let t3;
	let div12;
	let div5;
	let div3;
	let t5;
	let div4;
	let t6;
	let div8;
	let div6;
	let t8;
	let div7;
	let t9;
	let div11;
	let div9;
	let t10_value = /*format_time*/ ctx[15](/*current_project*/ ctx[0].id) + "";
	let t10;
	let t11;
	let div10;
	let t12;
	let div24;
	let div15;
	let div14;
	let t14;
	let html_tag;
	let t15;
	let div17;
	let div16;
	let t17;
	let html_tag_1;
	let t18;
	let div23;
	let div18;
	let t19;
	let div19;
	let t21;
	let div20;
	let t22_value = /*resize_widget_canvas_size*/ ctx[14][0] + "";
	let t22;
	let t23;
	let t24_value = /*resize_widget_canvas_size*/ ctx[14][1] + "";
	let t24;
	let t25;
	let div21;
	let div21_style_value;
	let t26;
	let div22;
	let div23_style_value;
	let t27;
	let div25;
	let mounted;
	let dispose;
	let each_value = ensure_array_like_dev(/*gallery_elements*/ ctx[13]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = GalleryWidget_svelte_create_each_block(GalleryWidget_svelte_get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div27 = dom_element("div");
			div26 = dom_element("div");
			div2 = dom_element("div");
			div0 = dom_element("div");
			div0.textContent = "Project";
			t1 = space();
			div1 = dom_element("div");
			t2 = space();
			div13 = dom_element("div");
			img = dom_element("img");
			t3 = space();
			div12 = dom_element("div");
			div5 = dom_element("div");
			div3 = dom_element("div");
			div3.textContent = "Save to dropbox";
			t5 = space();
			div4 = dom_element("div");
			t6 = space();
			div8 = dom_element("div");
			div6 = dom_element("div");
			div6.textContent = "Download";
			t8 = space();
			div7 = dom_element("div");
			t9 = space();
			div11 = dom_element("div");
			div9 = dom_element("div");
			t10 = dom_text(t10_value);
			t11 = space();
			div10 = dom_element("div");
			t12 = space();
			div24 = dom_element("div");
			div15 = dom_element("div");
			div14 = dom_element("div");
			div14.textContent = "New file";
			t14 = space();
			html_tag = new HtmlTag(false);
			t15 = space();
			div17 = dom_element("div");
			div16 = dom_element("div");
			div16.textContent = "Resize";
			t17 = space();
			html_tag_1 = new HtmlTag(false);
			t18 = space();
			div23 = dom_element("div");
			div18 = dom_element("div");
			t19 = space();
			div19 = dom_element("div");
			div19.textContent = "Resize canvas";
			t21 = space();
			div20 = dom_element("div");
			t22 = dom_text(t22_value);
			t23 = dom_text(" x ");
			t24 = dom_text(t24_value);
			t25 = space();
			div21 = dom_element("div");
			t26 = space();
			div22 = dom_element("div");
			t27 = space();
			div25 = dom_element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "id", "project-title");
			attr_dev(div0, "class", "svelte-1ytwwqn");
			add_location(div0, GalleryWidget_svelte_file, 23, 5, 619);
			attr_dev(div1, "id", "back-button");
			attr_dev(div1, "role", "button");
			attr_dev(div1, "tabindex", "0");
			attr_dev(div1, "class", "svelte-1ytwwqn");
			add_location(div1, GalleryWidget_svelte_file, 24, 5, 662);
			attr_dev(div2, "id", "top-bar");
			attr_dev(div2, "class", "svelte-1ytwwqn");
			add_location(div2, GalleryWidget_svelte_file, 22, 4, 595);
			if (!src_url_equal(img.src, img_src_value = /*canvas_image_src*/ ctx[10])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "id", "canvas-preview-img");
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1ytwwqn");
			add_location(img, GalleryWidget_svelte_file, 34, 5, 878);
			attr_dev(div3, "id", "project-save-button-title");
			attr_dev(div3, "class", "svelte-1ytwwqn");
			add_location(div3, GalleryWidget_svelte_file, 37, 7, 1070);
			attr_dev(div4, "class", "icon svelte-1ytwwqn");
			set_style(div4, "transform", "translate(0px,0.2rem)");
			add_location(div4, GalleryWidget_svelte_file, 38, 7, 1135);
			attr_dev(div5, "id", "project-save-button");
			attr_dev(div5, "role", "button");
			attr_dev(div5, "tabindex", "0");
			attr_dev(div5, "class", "svelte-1ytwwqn");
			add_location(div5, GalleryWidget_svelte_file, 36, 6, 978);
			attr_dev(div6, "id", "project-save-button-title");
			attr_dev(div6, "class", "svelte-1ytwwqn");
			add_location(div6, GalleryWidget_svelte_file, 51, 7, 1677);
			attr_dev(div7, "class", "icon svelte-1ytwwqn");
			set_style(div7, "transform", "scale(1.34)");
			add_location(div7, GalleryWidget_svelte_file, 52, 7, 1735);
			attr_dev(div8, "id", "project-save-button");
			attr_dev(div8, "role", "button");
			attr_dev(div8, "tabindex", "0");
			attr_dev(div8, "class", "svelte-1ytwwqn");
			add_location(div8, GalleryWidget_svelte_file, 50, 6, 1585);
			attr_dev(div9, "id", "project-save-button-title");
			attr_dev(div9, "class", "svelte-1ytwwqn");
			add_location(div9, GalleryWidget_svelte_file, 57, 7, 1899);
			attr_dev(div10, "class", "icon svelte-1ytwwqn");
			add_location(div10, GalleryWidget_svelte_file, 58, 7, 1982);
			attr_dev(div11, "id", "project-save-button");
			attr_dev(div11, "class", "date svelte-1ytwwqn");
			add_location(div11, GalleryWidget_svelte_file, 56, 6, 1848);
			attr_dev(div12, "id", "project-options");
			attr_dev(div12, "class", "svelte-1ytwwqn");
			add_location(div12, GalleryWidget_svelte_file, 35, 5, 945);
			attr_dev(div13, "id", "current-project");
			attr_dev(div13, "class", "svelte-1ytwwqn");
			add_location(div13, GalleryWidget_svelte_file, 33, 4, 846);
			attr_dev(div14, "class", "svelte-1ytwwqn");
			add_location(div14, GalleryWidget_svelte_file, 76, 6, 2447);
			html_tag.a = null;
			attr_dev(div15, "id", "button");
			attr_dev(div15, "role", "button");
			attr_dev(div15, "tabindex", "0");
			attr_dev(div15, "class", "svelte-1ytwwqn");
			add_location(div15, GalleryWidget_svelte_file, 66, 5, 2109);
			attr_dev(div16, "class", "svelte-1ytwwqn");
			add_location(div16, GalleryWidget_svelte_file, 88, 6, 2783);
			html_tag_1.a = null;
			attr_dev(div17, "id", "button");
			attr_dev(div17, "role", "button");
			attr_dev(div17, "tabindex", "0");
			attr_dev(div17, "class", "svelte-1ytwwqn");
			add_location(div17, GalleryWidget_svelte_file, 81, 5, 2524);
			attr_dev(div18, "id", "back-button");
			attr_dev(div18, "role", "button");
			attr_dev(div18, "tabindex", "0");
			set_style(div18, "margin-bottom", "0.45rem");
			attr_dev(div18, "class", "svelte-1ytwwqn");
			add_location(div18, GalleryWidget_svelte_file, 94, 6, 2936);
			set_style(div19, "margin-bottom", "1rem");
			attr_dev(div19, "class", "svelte-1ytwwqn");
			add_location(div19, GalleryWidget_svelte_file, 104, 6, 3162);
			set_style(div20, "margin-bottom", "1rem");
			attr_dev(div20, "class", "svelte-1ytwwqn");
			add_location(div20, GalleryWidget_svelte_file, 107, 6, 3237);

			attr_dev(div21, "style", div21_style_value = `
							background: white;
							width: 10rem;
							aspect-ratio: 1/${/*resize_widget_canvas_size*/ ctx[14][1] / /*resize_widget_canvas_size*/ ctx[14][0]}
						`);

			attr_dev(div21, "class", "svelte-1ytwwqn");
			add_location(div21, GalleryWidget_svelte_file, 110, 6, 3362);
			attr_dev(div22, "role", "button");
			attr_dev(div22, "tabindex", "0");
			attr_dev(div22, "id", "back-button");
			attr_dev(div22, "class", "ok-button svelte-1ytwwqn");
			set_style(div22, "margin-top", "1.14rem");
			add_location(div22, GalleryWidget_svelte_file, 116, 6, 3581);
			attr_dev(div23, "id", "size-modal");
			attr_dev(div23, "style", div23_style_value = /*size_modal_opened*/ ctx[7] ? "" : "display: none;");
			attr_dev(div23, "class", "svelte-1ytwwqn");
			add_location(div23, GalleryWidget_svelte_file, 93, 5, 2858);
			attr_dev(div24, "id", "options-bar");
			attr_dev(div24, "class", "svelte-1ytwwqn");
			add_location(div24, GalleryWidget_svelte_file, 65, 4, 2081);
			attr_dev(div25, "id", "gallery-elements");
			attr_dev(div25, "class", "svelte-1ytwwqn");
			add_location(div25, GalleryWidget_svelte_file, 131, 4, 3926);
			attr_dev(div26, "id", "gallery-container");
			attr_dev(div26, "class", "svelte-1ytwwqn");
			add_location(div26, GalleryWidget_svelte_file, 21, 3, 562);
			attr_dev(div27, "id", "gallery-container-outer");
			attr_dev(div27, "class", "svelte-1ytwwqn");
			add_location(div27, GalleryWidget_svelte_file, 20, 2, 524);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div27, anchor);
			append_dev(div27, div26);
			append_dev(div26, div2);
			append_dev(div2, div0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			div1.innerHTML = (forbid_default());
			append_dev(div26, t2);
			append_dev(div26, div13);
			append_dev(div13, img);
			append_dev(div13, t3);
			append_dev(div13, div12);
			append_dev(div12, div5);
			append_dev(div5, div3);
			append_dev(div5, t5);
			append_dev(div5, div4);
			div4.innerHTML = (capture_default());
			append_dev(div12, t6);
			append_dev(div12, div8);
			append_dev(div8, div6);
			append_dev(div8, t8);
			append_dev(div8, div7);
			div7.innerHTML = (download_default());
			append_dev(div12, t9);
			append_dev(div12, div11);
			append_dev(div11, div9);
			append_dev(div9, t10);
			append_dev(div11, t11);
			append_dev(div11, div10);
			div10.innerHTML = (time_default());
			append_dev(div26, t12);
			append_dev(div26, div24);
			append_dev(div24, div15);
			append_dev(div15, div14);
			append_dev(div15, t14);
			html_tag.m((launch_default()), div15);
			append_dev(div24, t15);
			append_dev(div24, div17);
			append_dev(div17, div16);
			append_dev(div17, t17);
			html_tag_1.m((resize_default()), div17);
			append_dev(div24, t18);
			append_dev(div24, div23);
			append_dev(div23, div18);
			div18.innerHTML = (forbid_default());
			append_dev(div23, t19);
			append_dev(div23, div19);
			append_dev(div23, t21);
			append_dev(div23, div20);
			append_dev(div20, t22);
			append_dev(div20, t23);
			append_dev(div20, t24);
			append_dev(div23, t25);
			append_dev(div23, div21);
			append_dev(div23, t26);
			append_dev(div23, div22);
			div22.innerHTML = (ok_default());
			append_dev(div26, t27);
			append_dev(div26, div25);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div25, null);
				}
			}

			if (!mounted) {
				dispose = [
					listen_dev(div1, "click", /*click_handler_2*/ ctx[23], false, false, false, false),
					listen_dev(div5, "click", /*save_to_dropbox*/ ctx[18], false, false, false, false),
					listen_dev(div8, "click", /*download_image*/ ctx[17], false, false, false, false),
					listen_dev(div15, "click", /*click_handler_3*/ ctx[24], false, false, false, false),
					listen_dev(div17, "click", /*click_handler_4*/ ctx[25], false, false, false, false),
					listen_dev(div18, "click", /*click_handler_5*/ ctx[26], false, false, false, false),
					listen_dev(div21, "pointerdown", /*resize_widget_pointer_down*/ ctx[19], false, false, false, false),
					listen_dev(div22, "click", /*click_handler_6*/ ctx[27], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*canvas_image_src*/ 1024 && !src_url_equal(img.src, img_src_value = /*canvas_image_src*/ ctx[10])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*current_project*/ 1 && t10_value !== (t10_value = /*format_time*/ ctx[15](/*current_project*/ ctx[0].id) + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*resize_widget_canvas_size*/ 16384 && t22_value !== (t22_value = /*resize_widget_canvas_size*/ ctx[14][0] + "")) set_data_dev(t22, t22_value);
			if (dirty[0] & /*resize_widget_canvas_size*/ 16384 && t24_value !== (t24_value = /*resize_widget_canvas_size*/ ctx[14][1] + "")) set_data_dev(t24, t24_value);

			if (dirty[0] & /*resize_widget_canvas_size*/ 16384 && div21_style_value !== (div21_style_value = `
							background: white;
							width: 10rem;
							aspect-ratio: 1/${/*resize_widget_canvas_size*/ ctx[14][1] / /*resize_widget_canvas_size*/ ctx[14][0]}
						`)) {
				attr_dev(div21, "style", div21_style_value);
			}

			if (dirty[0] & /*size_modal_opened*/ 128 && div23_style_value !== (div23_style_value = /*size_modal_opened*/ ctx[7] ? "" : "display: none;")) {
				attr_dev(div23, "style", div23_style_value);
			}

			if (dirty[0] & /*gallery_elements, current_project, is_safe_to_switch_to_new_project, dbx, load_project, gallery_open, format_time*/ 43121) {
				each_value = ensure_array_like_dev(/*gallery_elements*/ ctx[13]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = GalleryWidget_svelte_get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = GalleryWidget_svelte_create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div25, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div27);
			}

			destroy_each(each_blocks, detaching);
			mounted = false;
			utils_run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(20:1) {#if gallery_open}",
		ctx
	});

	return block;
}

// (133:5) {#each gallery_elements as element, i}
function GalleryWidget_svelte_create_each_block(ctx) {
	let div1;
	let div0;
	let t0_value = /*format_time*/ ctx[15](/*element*/ ctx[38].name) + "";
	let t0;
	let t1;
	let img;
	let img_src_value;
	let t2;
	let div1_style_value;
	let mounted;
	let dispose;

	function click_handler_7() {
		return /*click_handler_7*/ ctx[28](/*element*/ ctx[38]);
	}

	const block = {
		c: function create() {
			div1 = dom_element("div");
			div0 = dom_element("div");
			t0 = dom_text(t0_value);
			t1 = space();
			img = dom_element("img");
			t2 = space();
			attr_dev(div0, "id", "element-name");
			attr_dev(div0, "class", "svelte-1ytwwqn");
			add_location(div0, GalleryWidget_svelte_file, 151, 7, 4715);
			attr_dev(img, "draggable", "false");
			if (!src_url_equal(img.src, img_src_value = /*element*/ ctx[38].image_src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "id", "canvas-preview-img");
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1ytwwqn");
			add_location(img, GalleryWidget_svelte_file, 154, 7, 4796);
			attr_dev(div1, "id", "element");
			attr_dev(div1, "role", "button");
			attr_dev(div1, "tabindex", "0");

			attr_dev(div1, "style", div1_style_value = Number(/*element*/ ctx[38].name) === /*current_project*/ ctx[0].id
			? "border: 0.1rem solid white;"
			: "");

			attr_dev(div1, "class", "svelte-1ytwwqn");
			add_location(div1, GalleryWidget_svelte_file, 133, 6, 4004);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			append_dev(div1, img);
			append_dev(div1, t2);

			if (!mounted) {
				dispose = listen_dev(div1, "click", click_handler_7, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*gallery_elements*/ 8192 && t0_value !== (t0_value = /*format_time*/ ctx[15](/*element*/ ctx[38].name) + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*gallery_elements*/ 8192 && !src_url_equal(img.src, img_src_value = /*element*/ ctx[38].image_src)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*gallery_elements, current_project*/ 8193 && div1_style_value !== (div1_style_value = Number(/*element*/ ctx[38].name) === /*current_project*/ ctx[0].id
			? "border: 0.1rem solid white;"
			: "")) {
				attr_dev(div1, "style", div1_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: GalleryWidget_svelte_create_each_block.name,
		type: "each",
		source: "(133:5) {#each gallery_elements as element, i}",
		ctx
	});

	return block;
}

function GalleryWidget_svelte_create_fragment(ctx) {
	let div1;
	let button;
	let t1;
	let div0;
	let t2;
	let mounted;
	let dispose;
	let if_block = /*gallery_open*/ ctx[6] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = dom_element("div");
			button = dom_element("button");
			button.textContent = "LOG INTO DB";
			t1 = space();
			div0 = dom_element("div");
			t2 = space();
			if (if_block) if_block.c();
			attr_dev(button, "class", "svelte-1ytwwqn");
			toggle_class(button, "hide", /*authed*/ ctx[12]);
			add_location(button, GalleryWidget_svelte_file, 3, 1, 60);
			attr_dev(div0, "class", "knob svelte-1ytwwqn");
			attr_dev(div0, "role", "button");
			attr_dev(div0, "tabindex", "0");
			add_location(div0, GalleryWidget_svelte_file, 6, 1, 161);
			attr_dev(div1, "class", "knob-container svelte-1ytwwqn");
			add_location(div1, GalleryWidget_svelte_file, 2, 0, 30);
		},
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, button);
			append_dev(div1, t1);
			append_dev(div1, div0);
			div0.innerHTML = (solve_default());
			append_dev(div1, t2);
			if (if_block) if_block.m(div1, null);

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler*/ ctx[21], false, false, false, false),
					listen_dev(div0, "click", /*click_handler_1*/ ctx[22], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*authed*/ 4096) {
				toggle_class(button, "hide", /*authed*/ ctx[12]);
			}

			if (/*gallery_open*/ ctx[6]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (if_block) if_block.d();
			mounted = false;
			utils_run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: GalleryWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const resize_widget_pixel_range = 200;
const GalleryWidget_svelte_min = 0;
const GalleryWidget_svelte_max = 4;

function GalleryWidget_svelte_instance($$self, $$props, $$invalidate) {
	let valueRange;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('GalleryWidget', slots, []);
	let { current_project } = $$props;
	let { get_current_canvas_as_image } = $$props;
	let { resize_project } = $$props;
	let { new_project } = $$props;
	let { load_project } = $$props;
	let { project_has_been_modified } = $$props;

	const format_time = t => {
		return new Date(Number(t)).toLocaleString('en-GB', {
			hourCycle: 'h23',
			day: "2-digit",
			month: "2-digit",
			year: "numeric",
			hour: "2-digit",
			minute: "2-digit"
		}).replace(',', '');
	};

	let gallery_open = false;
	let size_modal_opened = false;
	let canvas_image = undefined;
	let canvas_image_blob = undefined;
	let canvas_image_src = '';

	class Element {
		name;
		image_src;

		constructor(name, image_src) {
			this.name = name;
			this.image_src = image_src;
		}
	}

	let dbx;
	const dbx_auther = new DropboxAuther();
	let authed = false;
	let gallery_elements = [];

	const log_into_dropbox = async () => {
		await dbx_auther.doAuth();
	};

	const is_safe_to_switch_to_new_project = async () => {
		let project_is_saved_to_dropbox = false;

		if (!dbx_auther.authed) {
			project_is_saved_to_dropbox = true;
		} else {
			let response = await dbx.filesListFolder({ path: '' });

			for (let element of response.result.entries) {
				let proj_name = Number(element.name.slice(0, -5));

				if (proj_name === current_project.id) {
					project_is_saved_to_dropbox = true;
					break;
				}
			}
		}

		if (project_has_been_modified || !project_is_saved_to_dropbox) {
			return false;
		} else {
			return true;
		}
	};

	const download_image = async () => {
		const link = document.createElement('a');
		link.href = canvas_image.src;
		link.download = current_project.id + '.png';
		link.click();
	};

	const refetch_canvases = async () => {
		let response = await dbx.filesListFolder({ path: '' });
		console.log(response);
		$$invalidate(13, gallery_elements = []);

		for (let element of response.result.entries) {
			if (element.name.endsWith(".json")) {
				let proj_name = element.name.slice(0, -5);
				let image = await dbx.filesDownload({ path: '/' + proj_name + '.png' });
				let binary = image.result.fileBlob;

				const blobToDataURL = blob => {
					return new Promise((resolve, reject) => {
							const reader = new FileReader();
							reader.onload = _e => resolve(reader.result);
							reader.onerror = _e => reject(reader.error);
							reader.onabort = _e => reject(new Error("Read aborted"));
							reader.readAsDataURL(blob);
						});
				};

				$$invalidate(13, gallery_elements = [...gallery_elements, new Element(proj_name, await blobToDataURL(binary))]);
			}
		}
	};

	const save_to_dropbox = async () => {
		floating_modal_message.set("Starting upload to dropbox.");

		let r = await dbx.filesUpload({
			path: '/' + current_project.id + '.json',
			contents: JSON.stringify(current_project),
			mode: "overwrite"
		});

		r = await dbx.filesUpload({
			path: '/' + current_project.id + '.png',
			contents: await (await fetch(canvas_image.src)).blob(),
			mode: "overwrite"
		});

		floating_modal_message.set("Upload to dropbox succesful.");
		$$invalidate(20, project_has_been_modified = false);
		await refetch_canvases();
	};

	let resize_widget_canvas_size = [0, 0];
	let resize_widget_start_y = 0;
	let resize_wdiget_start_value = [0, 0];
	let resize_widget_start_x = 0;

	function resize_widget_pointer_move({ clientX, clientY }) {
		let valueDiffY = valueRange * (resize_widget_start_y - clientY) / resize_widget_pixel_range;
		let valueDiffX = valueRange * (resize_widget_start_x - clientX) / resize_widget_pixel_range;
		$$invalidate(14, resize_widget_canvas_size[0] = resize_wdiget_start_value[0] - valueDiffX * 1000, resize_widget_canvas_size);
		$$invalidate(14, resize_widget_canvas_size[1] = resize_wdiget_start_value[1] + valueDiffY * 1000, resize_widget_canvas_size);
	}

	function resize_widget_pointer_down(e) {
		let { clientX, clientY } = e;
		console.log('down');
		resize_widget_start_y = clientY;
		resize_widget_start_x = clientX;
		resize_wdiget_start_value = [...resize_widget_canvas_size];
		window.addEventListener('pointermove', resize_widget_pointer_move);
		window.addEventListener('pointerup', resize_widget_pointer_up);
		e.stopPropagation();
	}

	function resize_widget_pointer_up() {
		window.removeEventListener('pointermove', resize_widget_pointer_move);
		window.removeEventListener('pointerup', resize_widget_pointer_up);
	}

	onMount(async () => {
		await dbx_auther.init();
		await dbx_auther.try_init_dropbox();
		$$invalidate(12, authed = dbx_auther.authed);
		$$invalidate(11, dbx = dbx_auther.dbx);

		if (authed) {
			refetch_canvases();
		}
	});

	$$self.$$.on_mount.push(function () {
		if (current_project === undefined && !('current_project' in $$props || $$self.$$.bound[$$self.$$.props['current_project']])) {
			GalleryWidget_svelte_console_1.warn("<GalleryWidget> was created without expected prop 'current_project'");
		}

		if (get_current_canvas_as_image === undefined && !('get_current_canvas_as_image' in $$props || $$self.$$.bound[$$self.$$.props['get_current_canvas_as_image']])) {
			GalleryWidget_svelte_console_1.warn("<GalleryWidget> was created without expected prop 'get_current_canvas_as_image'");
		}

		if (resize_project === undefined && !('resize_project' in $$props || $$self.$$.bound[$$self.$$.props['resize_project']])) {
			GalleryWidget_svelte_console_1.warn("<GalleryWidget> was created without expected prop 'resize_project'");
		}

		if (new_project === undefined && !('new_project' in $$props || $$self.$$.bound[$$self.$$.props['new_project']])) {
			GalleryWidget_svelte_console_1.warn("<GalleryWidget> was created without expected prop 'new_project'");
		}

		if (load_project === undefined && !('load_project' in $$props || $$self.$$.bound[$$self.$$.props['load_project']])) {
			GalleryWidget_svelte_console_1.warn("<GalleryWidget> was created without expected prop 'load_project'");
		}

		if (project_has_been_modified === undefined && !('project_has_been_modified' in $$props || $$self.$$.bound[$$self.$$.props['project_has_been_modified']])) {
			GalleryWidget_svelte_console_1.warn("<GalleryWidget> was created without expected prop 'project_has_been_modified'");
		}
	});

	const writable_props = [
		'current_project',
		'get_current_canvas_as_image',
		'resize_project',
		'new_project',
		'load_project',
		'project_has_been_modified'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') GalleryWidget_svelte_console_1.warn(`<GalleryWidget> was created with unknown prop '${key}'`);
	});

	const click_handler = async () => await log_into_dropbox();

	const click_handler_1 = async () => {
		$$invalidate(6, gallery_open = !gallery_open);
		let [_canvas_image, blob] = await get_current_canvas_as_image();
		$$invalidate(8, canvas_image = _canvas_image);
		$$invalidate(10, canvas_image_src = canvas_image.src);
		$$invalidate(9, canvas_image_blob = blob);
		console.log(canvas_image.src);
	};

	const click_handler_2 = () => {
		$$invalidate(6, gallery_open = !gallery_open);
	};

	const click_handler_3 = async () => {
		let safe = await is_safe_to_switch_to_new_project();

		safe = safe
		? safe
		: confirm('Are you sure you want to create another project? This one is not saved.');

		if (safe) {
			new_project();
			$$invalidate(6, gallery_open = false);
		}
	};

	const click_handler_4 = async () => {
		$$invalidate(7, size_modal_opened = true);
		$$invalidate(14, resize_widget_canvas_size[0] = current_project.canvasRes[0], resize_widget_canvas_size);
		$$invalidate(14, resize_widget_canvas_size[1] = current_project.canvasRes[1], resize_widget_canvas_size);
	};

	const click_handler_5 = () => {
		$$invalidate(7, size_modal_opened = false);
	};

	const click_handler_6 = () => {
		resize_project(resize_widget_canvas_size);
		$$invalidate(7, size_modal_opened = false);
		$$invalidate(6, gallery_open = false);
	};

	const click_handler_7 = async element => {
		let safe = await is_safe_to_switch_to_new_project();

		safe = safe
		? safe
		: confirm('Are you sure you want to switch to another project? This one is not saved.');

		if (safe) {
			let proj = await dbx.filesDownload({ path: '/' + element.name + '.json' });

			// @ts-ignore
			let binary = await proj.result.fileBlob.text();

			let binary_json = JSON.parse(binary);
			load_project(binary_json);
			$$invalidate(6, gallery_open = false);
		}
	};

	$$self.$$set = $$props => {
		if ('current_project' in $$props) $$invalidate(0, current_project = $$props.current_project);
		if ('get_current_canvas_as_image' in $$props) $$invalidate(1, get_current_canvas_as_image = $$props.get_current_canvas_as_image);
		if ('resize_project' in $$props) $$invalidate(2, resize_project = $$props.resize_project);
		if ('new_project' in $$props) $$invalidate(3, new_project = $$props.new_project);
		if ('load_project' in $$props) $$invalidate(4, load_project = $$props.load_project);
		if ('project_has_been_modified' in $$props) $$invalidate(20, project_has_been_modified = $$props.project_has_been_modified);
	};

	$$self.$capture_state = () => ({
		solveIcon: (solve_default()),
		launchIcon: (launch_default()),
		resizeIcon: (resize_default()),
		forbidIcon: (forbid_default()),
		okIcon: (ok_default()),
		captureIcon: (capture_default()),
		downloadIcon: (download_default()),
		timeIcon: (time_default()),
		Dropbox: Dropbox_sdk_min.Dropbox,
		DropboxAuth: Dropbox_sdk_min.DropboxAuth,
		onMount: onMount,
		DropboxAuther: DropboxAuther,
		floating_modal_message: floating_modal_message,
		current_project,
		get_current_canvas_as_image,
		resize_project,
		new_project,
		load_project,
		project_has_been_modified,
		format_time,
		gallery_open,
		size_modal_opened,
		canvas_image,
		canvas_image_blob,
		canvas_image_src,
		Element,
		dbx,
		dbx_auther,
		authed,
		gallery_elements,
		log_into_dropbox,
		is_safe_to_switch_to_new_project,
		download_image,
		refetch_canvases,
		save_to_dropbox,
		resize_widget_pixel_range,
		min: GalleryWidget_svelte_min,
		max: GalleryWidget_svelte_max,
		resize_widget_canvas_size,
		resize_widget_start_y,
		resize_wdiget_start_value,
		resize_widget_start_x,
		resize_widget_pointer_move,
		resize_widget_pointer_down,
		resize_widget_pointer_up,
		valueRange
	});

	$$self.$inject_state = $$props => {
		if ('current_project' in $$props) $$invalidate(0, current_project = $$props.current_project);
		if ('get_current_canvas_as_image' in $$props) $$invalidate(1, get_current_canvas_as_image = $$props.get_current_canvas_as_image);
		if ('resize_project' in $$props) $$invalidate(2, resize_project = $$props.resize_project);
		if ('new_project' in $$props) $$invalidate(3, new_project = $$props.new_project);
		if ('load_project' in $$props) $$invalidate(4, load_project = $$props.load_project);
		if ('project_has_been_modified' in $$props) $$invalidate(20, project_has_been_modified = $$props.project_has_been_modified);
		if ('gallery_open' in $$props) $$invalidate(6, gallery_open = $$props.gallery_open);
		if ('size_modal_opened' in $$props) $$invalidate(7, size_modal_opened = $$props.size_modal_opened);
		if ('canvas_image' in $$props) $$invalidate(8, canvas_image = $$props.canvas_image);
		if ('canvas_image_blob' in $$props) $$invalidate(9, canvas_image_blob = $$props.canvas_image_blob);
		if ('canvas_image_src' in $$props) $$invalidate(10, canvas_image_src = $$props.canvas_image_src);
		if ('dbx' in $$props) $$invalidate(11, dbx = $$props.dbx);
		if ('authed' in $$props) $$invalidate(12, authed = $$props.authed);
		if ('gallery_elements' in $$props) $$invalidate(13, gallery_elements = $$props.gallery_elements);
		if ('resize_widget_canvas_size' in $$props) $$invalidate(14, resize_widget_canvas_size = $$props.resize_widget_canvas_size);
		if ('resize_widget_start_y' in $$props) resize_widget_start_y = $$props.resize_widget_start_y;
		if ('resize_wdiget_start_value' in $$props) resize_wdiget_start_value = $$props.resize_wdiget_start_value;
		if ('resize_widget_start_x' in $$props) resize_widget_start_x = $$props.resize_widget_start_x;
		if ('valueRange' in $$props) valueRange = $$props.valueRange;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$: valueRange = GalleryWidget_svelte_max - GalleryWidget_svelte_min;

	return [
		current_project,
		get_current_canvas_as_image,
		resize_project,
		new_project,
		load_project,
		is_safe_to_switch_to_new_project,
		gallery_open,
		size_modal_opened,
		canvas_image,
		canvas_image_blob,
		canvas_image_src,
		dbx,
		authed,
		gallery_elements,
		resize_widget_canvas_size,
		format_time,
		log_into_dropbox,
		download_image,
		save_to_dropbox,
		resize_widget_pointer_down,
		project_has_been_modified,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7
	];
}

class GalleryWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			GalleryWidget_svelte_instance,
			GalleryWidget_svelte_create_fragment,
			safe_not_equal,
			{
				current_project: 0,
				get_current_canvas_as_image: 1,
				resize_project: 2,
				new_project: 3,
				load_project: 4,
				project_has_been_modified: 20,
				is_safe_to_switch_to_new_project: 5
			},
			GalleryWidget_svelte_add_css,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GalleryWidget",
			options,
			id: GalleryWidget_svelte_create_fragment.name
		});
	}

	get current_project() {
		return this.$$.ctx[0];
	}

	set current_project(current_project) {
		this.$$set({ current_project });
		scheduler_flush();
	}

	get get_current_canvas_as_image() {
		return this.$$.ctx[1];
	}

	set get_current_canvas_as_image(get_current_canvas_as_image) {
		this.$$set({ get_current_canvas_as_image });
		scheduler_flush();
	}

	get resize_project() {
		return this.$$.ctx[2];
	}

	set resize_project(resize_project) {
		this.$$set({ resize_project });
		scheduler_flush();
	}

	get new_project() {
		return this.$$.ctx[3];
	}

	set new_project(new_project) {
		this.$$set({ new_project });
		scheduler_flush();
	}

	get load_project() {
		return this.$$.ctx[4];
	}

	set load_project(load_project) {
		this.$$set({ load_project });
		scheduler_flush();
	}

	get project_has_been_modified() {
		return this.$$.ctx[20];
	}

	set project_has_been_modified(project_has_been_modified) {
		this.$$set({ project_has_been_modified });
		scheduler_flush();
	}

	get is_safe_to_switch_to_new_project() {
		return this.$$.ctx[5];
	}

	set is_safe_to_switch_to_new_project(value) {
		throw new Error_1("<GalleryWidget>: Cannot set read-only property 'is_safe_to_switch_to_new_project'");
	}
}

/* harmony default export */ const GalleryWidget_svelte = (GalleryWidget);
;// CONCATENATED MODULE: ./src/components/FloatingModal.svelte
/* src/components/FloatingModal.svelte generated by Svelte v4.0.0 */




const FloatingModal_svelte_file = "src/components/FloatingModal.svelte";

function FloatingModal_svelte_add_css(target) {
	append_styles(target, "svelte-mamaeg", ".svelte-mamaeg.svelte-mamaeg{pointer-events:none}#floating-modal.svelte-mamaeg.svelte-mamaeg{position:fixed;width:fit-content;height:fit-content;top:50%;left:50%;transform:translate(-50%, -50%);z-index:100}#floating-modal.svelte-mamaeg #text.svelte-mamaeg{backdrop-filter:blur(0.3rem) invert(0.3);padding:1rem;border-radius:0.5rem;pointer-events:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxvYXRpbmdNb2RhbC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBNkNrQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJGbG9hdGluZ01vZGFsLnN2ZWx0ZSJdfQ== */");
}

function FloatingModal_svelte_create_fragment(ctx) {
	let div1;
	let div0;
	let t;
	let div0_style_value;

	const block = {
		c: function create() {
			div1 = dom_element("div");
			div0 = dom_element("div");
			t = dom_text(/*displayed_message*/ ctx[0]);
			attr_dev(div0, "id", "text");

			attr_dev(div0, "style", div0_style_value = `opacity: ${/*opacity*/ ctx[2]};
    transition: opacity ${/*fading_in*/ ctx[1] ? fade_in_t : fade_out_t}s;`);

			attr_dev(div0, "class", "svelte-mamaeg");
			add_location(div0, FloatingModal_svelte_file, 36, 3, 779);
			attr_dev(div1, "id", "floating-modal");
			attr_dev(div1, "class", "svelte-mamaeg");
			add_location(div1, FloatingModal_svelte_file, 35, 2, 750);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*displayed_message*/ 1) set_data_dev(t, /*displayed_message*/ ctx[0]);

			if (dirty & /*opacity, fading_in*/ 6 && div0_style_value !== (div0_style_value = `opacity: ${/*opacity*/ ctx[2]};
    transition: opacity ${/*fading_in*/ ctx[1] ? fade_in_t : fade_out_t}s;`)) {
				attr_dev(div0, "style", div0_style_value);
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: FloatingModal_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const display_time = 1;
const fade_in_t = 0.2;
const fade_out_t = 1;

function FloatingModal_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('FloatingModal', slots, []);
	let seconds_since_modal = 0;
	let displayed_message = undefined;
	let fading_in = true;
	let opacity = 0;

	floating_modal_message.subscribe(message => {
		if (message) {
			$$invalidate(0, displayed_message = message);
			$$invalidate(2, opacity = 1);
			$$invalidate(1, fading_in = true);

			setTimeout(
				() => {
					$$invalidate(2, opacity = 0);
					$$invalidate(1, fading_in = false);

					setTimeout(
						() => {
							$$invalidate(0, displayed_message = undefined);
						},
						fade_out_t * 1000
					);
				},
				display_time * 1000
			);

			floating_modal_message.set(undefined);
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FloatingModal> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		floating_modal_message: floating_modal_message,
		seconds_since_modal,
		displayed_message,
		display_time,
		fade_in_t,
		fade_out_t,
		fading_in,
		opacity
	});

	$$self.$inject_state = $$props => {
		if ('seconds_since_modal' in $$props) seconds_since_modal = $$props.seconds_since_modal;
		if ('displayed_message' in $$props) $$invalidate(0, displayed_message = $$props.displayed_message);
		if ('fading_in' in $$props) $$invalidate(1, fading_in = $$props.fading_in);
		if ('opacity' in $$props) $$invalidate(2, opacity = $$props.opacity);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [displayed_message, fading_in, opacity];
}

class FloatingModal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, FloatingModal_svelte_instance, FloatingModal_svelte_create_fragment, safe_not_equal, {}, FloatingModal_svelte_add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FloatingModal",
			options,
			id: FloatingModal_svelte_create_fragment.name
		});
	}
}

/* harmony default export */ const FloatingModal_svelte = (FloatingModal);
// EXTERNAL MODULE: ./public/plug.svg
var plug = __webpack_require__(801);
var plug_default = /*#__PURE__*/__webpack_require__.n(plug);
;// CONCATENATED MODULE: ./src/components/PickColourWidget.svelte
/* src/components/PickColourWidget.svelte generated by Svelte v4.0.0 */




const PickColourWidget_svelte_file = "src/components/PickColourWidget.svelte";

function PickColourWidget_svelte_add_css(target) {
	append_styles(target, "svelte-14vc8qb", ".picking.svelte-14vc8qb{filter:invert();background:black}.svelte-14vc8qb{user-select:none;-webkit-tap-highlight-color:transparent}.knob-container.svelte-14vc8qb{cursor:pointer;&:hover {\n\t\t\tcursor: pointer;\n\t\t};box-sizing:border-box;-webkit-box-sizing:border-box;aspect-ratio:1/1;max-height:50%;height:100%;display:flex;justify-content:center;align-items:center;margin-bottom:auto;margin-top:auto;margin-right:1rem;pointer-events:all;user-select:none}.knob.svelte-14vc8qb{display:block;aspect-ratio:1/1;height:100%;padding:0;color:var(--text-color);fill:white;transform-origin:50% 50%}.knob.svelte-14vc8qb svg{fill:white;width:100%;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGlja0NvbG91cldpZGdldC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBZ0RDLHVCQUFRLENBQ1AsTUFBTSxDQUFFLFFBQVEsQ0FDaEIsVUFBVSxDQUFFLEtBQ2IsQ0FDQSxlQUFFLENBQ0QsV0FBVyxDQUFFLElBQUksQ0FDakIsMkJBQTJCLENBQUUsV0FDOUIsQ0FDQSw4QkFBZ0IsQ0FDZixNQUFNLENBQUUsT0FBTyxDQUNmLENBQUMsTUFBTSxDQUFDO0FBQ1YsR0FBRyxRQUFRLE9BQU87QUFDbEIsR0FBRSxDQUNBLFVBQVUsQ0FBRSxVQUFVLENBQ3RCLGtCQUFrQixDQUFFLFVBQVUsQ0FHOUIsWUFBWSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQ2pCLFVBQVUsQ0FBRSxHQUFHLENBQ2YsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxNQUFNLENBQ3ZCLFdBQVcsQ0FBRSxNQUFNLENBRWpCLGFBQWEsQ0FBRSxJQUFJLENBQ25CLFVBQVUsQ0FBRSxJQUFJLENBQ2xCLFlBQVksQ0FBRSxJQUFJLENBQ2xCLGNBQWMsQ0FBRSxHQUFHLENBQ25CLFdBQVcsQ0FBRSxJQUNkLENBRUEsb0JBQU0sQ0FDTCxPQUFPLENBQUUsS0FBSyxDQUNkLFlBQVksQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNqQixNQUFNLENBQUUsSUFBSSxDQUVaLE9BQU8sQ0FBRSxDQUFDLENBRVYsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLENBQ3hCLElBQUksQ0FBRSxLQUFLLENBQ1gsZ0JBQWdCLENBQUUsR0FBRyxDQUFDLEdBQ3ZCLENBRUEsb0JBQUssQ0FBUyxHQUFLLENBQ2xCLElBQUksQ0FBRSxLQUFLLENBQ1gsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFDVCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJQaWNrQ29sb3VyV2lkZ2V0LnN2ZWx0ZSJdfQ== */");
}

function PickColourWidget_svelte_create_fragment(ctx) {
	let div1;
	let div0;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = dom_element("div");
			div0 = dom_element("div");
			attr_dev(div0, "class", "knob svelte-14vc8qb");
			toggle_class(div0, "picking", /*picking*/ ctx[0]);
			add_location(div0, PickColourWidget_svelte_file, 3, 1, 115);
			attr_dev(div1, "class", "knob-container svelte-14vc8qb");
			add_location(div1, PickColourWidget_svelte_file, 2, 0, 30);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			div0.innerHTML = (plug_default());
			/*div1_binding*/ ctx[5](div1);

			if (!mounted) {
				dispose = listen_dev(div1, "pointerdown", /*pointerDown*/ ctx[2], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*picking*/ 1) {
				toggle_class(div0, "picking", /*picking*/ ctx[0]);
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			/*div1_binding*/ ctx[5](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: PickColourWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function PickColourWidget_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('PickColourWidget', slots, []);
	let { pick_from_canvas } = $$props;
	let pickerElement;
	let { picking = false } = $$props;
	let picked_col = [0, 0, 0];
	let { just_finished_pick = false } = $$props;

	function pointerMove({ clientX, clientY }) {
		pick_from_canvas();
	}

	const pointerUp = () => {
		$$invalidate(0, picking = false);
		$$invalidate(3, just_finished_pick = true);
		window.removeEventListener('pointermove', pointerMove);
		window.removeEventListener('pointerup', pointerUp);
	};

	const pointerDown = e => {
		$$invalidate(0, picking = true);
		window.addEventListener('pointermove', pointerMove);
		window.addEventListener('pointerup', pointerUp);
		e.stopPropagation();
	};

	$$self.$$.on_mount.push(function () {
		if (pick_from_canvas === undefined && !('pick_from_canvas' in $$props || $$self.$$.bound[$$self.$$.props['pick_from_canvas']])) {
			console.warn("<PickColourWidget> was created without expected prop 'pick_from_canvas'");
		}
	});

	const writable_props = ['pick_from_canvas', 'picking', 'just_finished_pick'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PickColourWidget> was created with unknown prop '${key}'`);
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			pickerElement = $$value;
			$$invalidate(1, pickerElement);
		});
	}

	$$self.$$set = $$props => {
		if ('pick_from_canvas' in $$props) $$invalidate(4, pick_from_canvas = $$props.pick_from_canvas);
		if ('picking' in $$props) $$invalidate(0, picking = $$props.picking);
		if ('just_finished_pick' in $$props) $$invalidate(3, just_finished_pick = $$props.just_finished_pick);
	};

	$$self.$capture_state = () => ({
		pickIcon: (plug_default()),
		pick_from_canvas,
		pickerElement,
		picking,
		picked_col,
		just_finished_pick,
		pointerMove,
		pointerUp,
		pointerDown
	});

	$$self.$inject_state = $$props => {
		if ('pick_from_canvas' in $$props) $$invalidate(4, pick_from_canvas = $$props.pick_from_canvas);
		if ('pickerElement' in $$props) $$invalidate(1, pickerElement = $$props.pickerElement);
		if ('picking' in $$props) $$invalidate(0, picking = $$props.picking);
		if ('picked_col' in $$props) picked_col = $$props.picked_col;
		if ('just_finished_pick' in $$props) $$invalidate(3, just_finished_pick = $$props.just_finished_pick);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		picking,
		pickerElement,
		pointerDown,
		just_finished_pick,
		pick_from_canvas,
		div1_binding
	];
}

class PickColourWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			PickColourWidget_svelte_instance,
			PickColourWidget_svelte_create_fragment,
			safe_not_equal,
			{
				pick_from_canvas: 4,
				picking: 0,
				just_finished_pick: 3
			},
			PickColourWidget_svelte_add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PickColourWidget",
			options,
			id: PickColourWidget_svelte_create_fragment.name
		});
	}

	get pick_from_canvas() {
		return this.$$.ctx[4];
	}

	set pick_from_canvas(pick_from_canvas) {
		this.$$set({ pick_from_canvas });
		scheduler_flush();
	}

	get picking() {
		return this.$$.ctx[0];
	}

	set picking(picking) {
		this.$$set({ picking });
		scheduler_flush();
	}

	get just_finished_pick() {
		return this.$$.ctx[3];
	}

	set just_finished_pick(just_finished_pick) {
		this.$$set({ just_finished_pick });
		scheduler_flush();
	}
}

/* harmony default export */ const PickColourWidget_svelte = (PickColourWidget);
;// CONCATENATED MODULE: ./src/components/TextureWidget.svelte
/* src/components/TextureWidget.svelte generated by Svelte v4.0.0 */





const TextureWidget_svelte_file = "src/components/TextureWidget.svelte";

function TextureWidget_svelte_add_css(target) {
	append_styles(target, "svelte-1mpacr7", ".svelte-1mpacr7.svelte-1mpacr7.svelte-1mpacr7{user-select:none;-webkit-tap-highlight-color:transparent}img.svelte-1mpacr7.svelte-1mpacr7.svelte-1mpacr7:active{filter:invert(1);background:black}.knob-container-container.svelte-1mpacr7.svelte-1mpacr7.svelte-1mpacr7{z-index:9999999999999;aspect-ratio:1/1;max-height:50%;margin-bottom:auto;margin-top:auto;margin-right:1.5rem;display:block;flex-direction:column;justify-content:center;align-items:center;pointer-events:all;user-select:none;cursor:pointer;min-width:7rem;border:1px solid white;min-width:0px;aspect-ratio:1/1;height:100%}.knob-container-container.svelte-1mpacr7 #dropdown.svelte-1mpacr7.svelte-1mpacr7{display:flex;flex-direction:column;position:static;height:unset;background:black}.knob-container-container.svelte-1mpacr7 #dropdown.svelte-1mpacr7>img.svelte-1mpacr7{z-index:10000000;aspect-ratio:1/1;width:100%}.knob-container-container.svelte-1mpacr7>img.svelte-1mpacr7.svelte-1mpacr7{aspect-ratio:1/1;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dHVyZVdpZGdldC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBb0NrQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJUZXh0dXJlV2lkZ2V0LnN2ZWx0ZSJdfQ== */");
}

function TextureWidget_svelte_get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (9:1) {#if dropdown_toggled}
function TextureWidget_svelte_create_if_block(ctx) {
	let div;
	let each_value = ensure_array_like_dev(/*brush_textures*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = TextureWidget_svelte_create_each_block(TextureWidget_svelte_get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = dom_element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "id", "dropdown");
			attr_dev(div, "class", "svelte-1mpacr7");
			add_location(div, TextureWidget_svelte_file, 9, 2, 235);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*brush_textures, selected_brush_texture, dropdown_toggled*/ 7) {
				each_value = ensure_array_like_dev(/*brush_textures*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = TextureWidget_svelte_get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = TextureWidget_svelte_create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: TextureWidget_svelte_create_if_block.name,
		type: "if",
		source: "(9:1) {#if dropdown_toggled}",
		ctx
	});

	return block;
}

// (12:4) {#if texture !== selected_brush_texture}
function create_if_block_1(ctx) {
	let img;
	let img_src_value;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[4](/*texture*/ ctx[5]);
	}

	const block = {
		c: function create() {
			img = dom_element("img");
			if (!src_url_equal(img.src, img_src_value = /*texture*/ ctx[5].path)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1mpacr7");
			add_location(img, TextureWidget_svelte_file, 12, 5, 345);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);

			if (!mounted) {
				dispose = listen_dev(img, "click", click_handler_1, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*brush_textures*/ 2 && !src_url_equal(img.src, img_src_value = /*texture*/ ctx[5].path)) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(img);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(12:4) {#if texture !== selected_brush_texture}",
		ctx
	});

	return block;
}

// (11:3) {#each brush_textures as texture, i}
function TextureWidget_svelte_create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*texture*/ ctx[5] !== /*selected_brush_texture*/ ctx[0] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*texture*/ ctx[5] !== /*selected_brush_texture*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: TextureWidget_svelte_create_each_block.name,
		type: "each",
		source: "(11:3) {#each brush_textures as texture, i}",
		ctx
	});

	return block;
}

function TextureWidget_svelte_create_fragment(ctx) {
	let div;
	let img;
	let img_src_value;
	let t;
	let mounted;
	let dispose;
	let if_block = /*dropdown_toggled*/ ctx[2] && TextureWidget_svelte_create_if_block(ctx);

	const block = {
		c: function create() {
			div = dom_element("div");
			img = dom_element("img");
			t = space();
			if (if_block) if_block.c();

			if (!src_url_equal(img.src, img_src_value = /*selected_brush_texture*/ ctx[0]
			? /*selected_brush_texture*/ ctx[0].path
			: '')) attr_dev(img, "src", img_src_value);

			attr_dev(img, "class", "svelte-1mpacr7");
			add_location(img, TextureWidget_svelte_file, 3, 1, 70);
			attr_dev(div, "class", "knob-container-container svelte-1mpacr7");
			add_location(div, TextureWidget_svelte_file, 2, 0, 30);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t);
			if (if_block) if_block.m(div, null);

			if (!mounted) {
				dispose = listen_dev(img, "click", /*click_handler*/ ctx[3], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selected_brush_texture*/ 1 && !src_url_equal(img.src, img_src_value = /*selected_brush_texture*/ ctx[0]
			? /*selected_brush_texture*/ ctx[0].path
			: '')) {
				attr_dev(img, "src", img_src_value);
			}

			if (/*dropdown_toggled*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = TextureWidget_svelte_create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: TextureWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function TextureWidget_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TextureWidget', slots, []);
	let { brush_textures } = $$props;
	let { selected_brush_texture } = $$props;
	let dropdown_toggled = false;

	$$self.$$.on_mount.push(function () {
		if (brush_textures === undefined && !('brush_textures' in $$props || $$self.$$.bound[$$self.$$.props['brush_textures']])) {
			console.warn("<TextureWidget> was created without expected prop 'brush_textures'");
		}

		if (selected_brush_texture === undefined && !('selected_brush_texture' in $$props || $$self.$$.bound[$$self.$$.props['selected_brush_texture']])) {
			console.warn("<TextureWidget> was created without expected prop 'selected_brush_texture'");
		}
	});

	const writable_props = ['brush_textures', 'selected_brush_texture'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TextureWidget> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(2, dropdown_toggled = !dropdown_toggled);
	};

	const click_handler_1 = texture => {
		$$invalidate(0, selected_brush_texture = texture);
		$$invalidate(2, dropdown_toggled = false);
	};

	$$self.$$set = $$props => {
		if ('brush_textures' in $$props) $$invalidate(1, brush_textures = $$props.brush_textures);
		if ('selected_brush_texture' in $$props) $$invalidate(0, selected_brush_texture = $$props.selected_brush_texture);
	};

	$$self.$capture_state = () => ({
		BrushType: BrushType,
		onMount: onMount,
		brush_textures,
		selected_brush_texture,
		dropdown_toggled
	});

	$$self.$inject_state = $$props => {
		if ('brush_textures' in $$props) $$invalidate(1, brush_textures = $$props.brush_textures);
		if ('selected_brush_texture' in $$props) $$invalidate(0, selected_brush_texture = $$props.selected_brush_texture);
		if ('dropdown_toggled' in $$props) $$invalidate(2, dropdown_toggled = $$props.dropdown_toggled);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		selected_brush_texture,
		brush_textures,
		dropdown_toggled,
		click_handler,
		click_handler_1
	];
}

class TextureWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			TextureWidget_svelte_instance,
			TextureWidget_svelte_create_fragment,
			safe_not_equal,
			{
				brush_textures: 1,
				selected_brush_texture: 0
			},
			TextureWidget_svelte_add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextureWidget",
			options,
			id: TextureWidget_svelte_create_fragment.name
		});
	}

	get brush_textures() {
		return this.$$.ctx[1];
	}

	set brush_textures(brush_textures) {
		this.$$set({ brush_textures });
		scheduler_flush();
	}

	get selected_brush_texture() {
		return this.$$.ctx[0];
	}

	set selected_brush_texture(selected_brush_texture) {
		this.$$set({ selected_brush_texture });
		scheduler_flush();
	}
}

/* harmony default export */ const TextureWidget_svelte = (TextureWidget);
;// CONCATENATED MODULE: ./src/components/BlendingColourSpaceWidget.svelte
/* src/components/BlendingColourSpaceWidget.svelte generated by Svelte v4.0.0 */


const { Object: BlendingColourSpaceWidget_svelte_Object_1 } = globals;



const BlendingColourSpaceWidget_svelte_file = "src/components/BlendingColourSpaceWidget.svelte";

function BlendingColourSpaceWidget_svelte_add_css(target) {
	append_styles(target, "svelte-vv7rge", ".svelte-vv7rge.svelte-vv7rge.svelte-vv7rge{user-select:none;-webkit-tap-highlight-color:transparent}div.svelte-vv7rge.svelte-vv7rge.svelte-vv7rge:active{filter:invert(1);background:black}.knob-container-container.svelte-vv7rge.svelte-vv7rge.svelte-vv7rge{z-index:9999999999999;aspect-ratio:1/1;max-height:50%;margin-bottom:auto;margin-top:auto;margin-right:1.5rem;display:block;flex-direction:column;justify-content:center;align-items:center;pointer-events:all;user-select:none;cursor:pointer;min-width:7rem;border:1px solid white;min-width:0px}.knob-container-container.svelte-vv7rge #dropdown.svelte-vv7rge.svelte-vv7rge{display:flex;flex-direction:column;position:static;height:unset;background:black}.knob-container-container.svelte-vv7rge #dropdown.svelte-vv7rge>div.svelte-vv7rge{z-index:10000000;width:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxlbmRpbmdDb2xvdXJTcGFjZVdpZGdldC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBd0NrQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJCbGVuZGluZ0NvbG91clNwYWNlV2lkZ2V0LnN2ZWx0ZSJdfQ== */");
}

function BlendingColourSpaceWidget_svelte_get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (5:1) {#if dropdown_toggled}
function BlendingColourSpaceWidget_svelte_create_if_block(ctx) {
	let div;
	let each_value = ensure_array_like_dev(Object.keys(BlendingColourSpace));
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = BlendingColourSpaceWidget_svelte_create_each_block(BlendingColourSpaceWidget_svelte_get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = dom_element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "id", "dropdown");
			attr_dev(div, "class", "svelte-vv7rge");
			add_location(div, BlendingColourSpaceWidget_svelte_file, 5, 2, 152);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selected_colour_space, Object, BlendingColourSpace, isNaN*/ 1) {
				each_value = ensure_array_like_dev(Object.keys(BlendingColourSpace));
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = BlendingColourSpaceWidget_svelte_get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = BlendingColourSpaceWidget_svelte_create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BlendingColourSpaceWidget_svelte_create_if_block.name,
		type: "if",
		source: "(5:1) {#if dropdown_toggled}",
		ctx
	});

	return block;
}

// (8:4) {#if BlendingColourSpace[colour_space]  !== selected_colour_space && isNaN(BlendingColourSpace[colour_space])}
function BlendingColourSpaceWidget_svelte_create_if_block_1(ctx) {
	let div;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*colour_space*/ ctx[3]);
	}

	const block = {
		c: function create() {
			div = dom_element("div");
			div.textContent = `${BlendingColourSpace[/*colour_space*/ ctx[3]]}`;
			t1 = space();
			attr_dev(div, "role", "button");
			attr_dev(div, "tabindex", "0");
			attr_dev(div, "class", "svelte-vv7rge");
			add_location(div, BlendingColourSpaceWidget_svelte_file, 8, 5, 355);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			insert_dev(target, t1, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
				detach_dev(t1);
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BlendingColourSpaceWidget_svelte_create_if_block_1.name,
		type: "if",
		source: "(8:4) {#if BlendingColourSpace[colour_space]  !== selected_colour_space && isNaN(BlendingColourSpace[colour_space])}",
		ctx
	});

	return block;
}

// (7:3) {#each Object.keys(BlendingColourSpace) as colour_space, i}
function BlendingColourSpaceWidget_svelte_create_each_block(ctx) {
	let show_if = BlendingColourSpace[/*colour_space*/ ctx[3]] !== /*selected_colour_space*/ ctx[0] && isNaN(BlendingColourSpace[/*colour_space*/ ctx[3]]);
	let if_block_anchor;
	let if_block = show_if && BlendingColourSpaceWidget_svelte_create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selected_colour_space*/ 1) show_if = BlendingColourSpace[/*colour_space*/ ctx[3]] !== /*selected_colour_space*/ ctx[0] && isNaN(BlendingColourSpace[/*colour_space*/ ctx[3]]);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = BlendingColourSpaceWidget_svelte_create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BlendingColourSpaceWidget_svelte_create_each_block.name,
		type: "each",
		source: "(7:3) {#each Object.keys(BlendingColourSpace) as colour_space, i}",
		ctx
	});

	return block;
}

function BlendingColourSpaceWidget_svelte_create_fragment(ctx) {
	let div1;
	let div0;
	let t0_value = BlendingColourSpace[/*selected_colour_space*/ ctx[0]] + "";
	let t0;
	let t1;
	let if_block = /*dropdown_toggled*/ ctx[1] && BlendingColourSpaceWidget_svelte_create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = dom_element("div");
			div0 = dom_element("div");
			t0 = dom_text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			attr_dev(div0, "class", "svelte-vv7rge");
			add_location(div0, BlendingColourSpaceWidget_svelte_file, 3, 1, 70);
			attr_dev(div1, "class", "knob-container-container svelte-vv7rge");
			add_location(div1, BlendingColourSpaceWidget_svelte_file, 2, 0, 30);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			if (if_block) if_block.m(div1, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selected_colour_space*/ 1 && t0_value !== (t0_value = BlendingColourSpace[/*selected_colour_space*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
			if (/*dropdown_toggled*/ ctx[1]) if_block.p(ctx, dirty);
		},
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: BlendingColourSpaceWidget_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function BlendingColourSpaceWidget_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BlendingColourSpaceWidget', slots, []);
	let { selected_colour_space } = $$props;
	let dropdown_toggled = true;

	onMount(() => {
		
	});

	$$self.$$.on_mount.push(function () {
		if (selected_colour_space === undefined && !('selected_colour_space' in $$props || $$self.$$.bound[$$self.$$.props['selected_colour_space']])) {
			console.warn("<BlendingColourSpaceWidget> was created without expected prop 'selected_colour_space'");
		}
	});

	const writable_props = ['selected_colour_space'];

	BlendingColourSpaceWidget_svelte_Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BlendingColourSpaceWidget> was created with unknown prop '${key}'`);
	});

	const click_handler = colour_space => {
		// @ts-ignore
		$$invalidate(0, selected_colour_space = colour_space);
	};

	$$self.$$set = $$props => {
		if ('selected_colour_space' in $$props) $$invalidate(0, selected_colour_space = $$props.selected_colour_space);
	};

	$$self.$capture_state = () => ({
		BlendingColourSpace: BlendingColourSpace,
		BrushType: BrushType,
		onMount: onMount,
		selected_colour_space,
		dropdown_toggled
	});

	$$self.$inject_state = $$props => {
		if ('selected_colour_space' in $$props) $$invalidate(0, selected_colour_space = $$props.selected_colour_space);
		if ('dropdown_toggled' in $$props) $$invalidate(1, dropdown_toggled = $$props.dropdown_toggled);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selected_colour_space, dropdown_toggled, click_handler];
}

class BlendingColourSpaceWidget extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, BlendingColourSpaceWidget_svelte_instance, BlendingColourSpaceWidget_svelte_create_fragment, safe_not_equal, { selected_colour_space: 0 }, BlendingColourSpaceWidget_svelte_add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlendingColourSpaceWidget",
			options,
			id: BlendingColourSpaceWidget_svelte_create_fragment.name
		});
	}

	get selected_colour_space() {
		return this.$$.ctx[0];
	}

	set selected_colour_space(selected_colour_space) {
		this.$$set({ selected_colour_space });
		scheduler_flush();
	}
}

/* harmony default export */ const BlendingColourSpaceWidget_svelte = (BlendingColourSpaceWidget);
// EXTERNAL MODULE: ./node_modules/chroma-js/chroma.js
var chroma = __webpack_require__(302);
var chroma_default = /*#__PURE__*/__webpack_require__.n(chroma);
;// CONCATENATED MODULE: ./src/components/ColourDisplay.svelte
/* src/components/ColourDisplay.svelte generated by Svelte v4.0.0 */


const { console: ColourDisplay_svelte_console_1 } = globals;



const ColourDisplay_svelte_file = "src/components/ColourDisplay.svelte";

function ColourDisplay_svelte_add_css(target) {
	append_styles(target, "svelte-1o01cxo", ".knob-container.svelte-1o01cxo{box-sizing:border-box;-webkit-box-sizing:border-box;&:hover{\n      cursor: pointer;\n    };margin-right:0.5rem;aspect-ratio:2/1;max-height:100%;height:100%;display:flex;background-color:var(--color)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3VyRGlzcGxheS5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBaUhFLDhCQUFlLENBQ2IsVUFBVSxDQUFFLFVBQVUsQ0FDdEIsa0JBQWtCLENBQUUsVUFBVSxDQUM5QixDQUFDLE1BQU07QUFDWCxNQUFNLFFBQVEsT0FBTztBQUNyQixLQUFJLENBQ0EsWUFBWSxDQUFFLE1BQU0sQ0FDcEIsWUFBWSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQ2pCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE1BQU0sQ0FBRSxJQUFJLENBQ1osT0FBTyxDQUFFLElBQUksQ0FDYixnQkFBZ0IsQ0FBRSxJQUFJLE9BQU8sQ0FDL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQ29sb3VyRGlzcGxheS5zdmVsdGUiXX0= */");
}

function ColourDisplay_svelte_create_fragment(ctx) {
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = dom_element("div");
			div.innerHTML = ``;
			attr_dev(div, "draggable", "false");
			attr_dev(div, "class", "knob-container svelte-1o01cxo");
			add_location(div, ColourDisplay_svelte_file, 109, 0, 2216);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			/*div_binding*/ ctx[6](div);

			if (!mounted) {
				dispose = listen_dev(div, "pointerdown", /*pointerDown*/ ctx[1], false, false, false, false);
				mounted = true;
			}
		},
		p: utils_noop,
		i: utils_noop,
		o: utils_noop,
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			/*div_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: ColourDisplay_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const pixelRange = 200;
const ColourDisplay_svelte_min = 0;
const ColourDisplay_svelte_max = 4;

function ColourDisplay_svelte_clamp(num, min, max) {
	return Math.max(min, Math.min(num, max));
}

function ColourDisplay_svelte_instance($$self, $$props, $$invalidate) {
	let valueRange;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ColourDisplay', slots, []);
	let { colour } = $$props;
	let container;

	const re_render_colour = (colour_r, colour_g, colour_b) => {
		if (container) {
			container.style.setProperty('--color', `rgba(${255 * Math.pow(colour_r, 0.45454545454545454545)}, ${255 * Math.pow(colour_g, 0.45454545454545454545)}, ${255 * Math.pow(colour_b, 0.45454545454545454545)}, ${255 * Math.pow(1.0, 0.45454545454545454545)})`);
		}
	};

	let { update_display = (colour_r, colour_g, colour_b) => {
		re_render_colour(colour_r, colour_g, colour_b);
	} } = $$props;

	let value = [0, 0];
	let { dragging = false } = $$props;
	let { stopped_dragging = false } = $$props;
	let startY = 0, startValue = [0, 0], startX = 0;

	function pointerMove({ clientX, clientY }) {
		const valueDiffY = valueRange * (startY - clientY) / pixelRange;
		const valueDiffX = valueRange * (startX - clientX) / pixelRange;

		const chroma_gl = col => {
			return chroma_default().gl(col[0], col[1], col[2]);
		};

		const chroma_oklch = col => {
			return chroma_default().oklch(col[0], col[1], col[2]);
		};

		let col = chroma_gl(startValue).oklch();
		col[0] += valueDiffY * 0.3;
		col[2] += valueDiffX * 360 * 0.3;
		col[0] = ColourDisplay_svelte_clamp(col[0], 0, 1);
		col[1] = ColourDisplay_svelte_clamp(col[1], 0, 1);
		col[2] = _0b5vr_experimental_esm_mod(col[2], 360);
		col = chroma_oklch(col).gl();
		$$invalidate(2, colour[0] = col[0], colour);
		$$invalidate(2, colour[1] = col[1], colour);
		$$invalidate(2, colour[2] = col[2], colour);
	}

	function pointerDown(e) {
		$$invalidate(3, dragging = true);
		const { clientX, clientY } = e;
		startY = clientY;
		startX = clientX;
		startValue = [colour[0], colour[1], colour[2], 1];
		window.addEventListener('pointermove', pointerMove);
		window.addEventListener('pointerup', pointerUp);
		e.stopPropagation();
	}

	function pointerUp() {
		$$invalidate(3, dragging = false);
		$$invalidate(4, stopped_dragging = true);
		console.log('up');
		window.removeEventListener('pointermove', pointerMove);
		window.removeEventListener('pointerup', pointerUp);
	}

	$$self.$$.on_mount.push(function () {
		if (colour === undefined && !('colour' in $$props || $$self.$$.bound[$$self.$$.props['colour']])) {
			ColourDisplay_svelte_console_1.warn("<ColourDisplay> was created without expected prop 'colour'");
		}
	});

	const writable_props = ['colour', 'update_display', 'dragging', 'stopped_dragging'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') ColourDisplay_svelte_console_1.warn(`<ColourDisplay> was created with unknown prop '${key}'`);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(0, container);
		});
	}

	$$self.$$set = $$props => {
		if ('colour' in $$props) $$invalidate(2, colour = $$props.colour);
		if ('update_display' in $$props) $$invalidate(5, update_display = $$props.update_display);
		if ('dragging' in $$props) $$invalidate(3, dragging = $$props.dragging);
		if ('stopped_dragging' in $$props) $$invalidate(4, stopped_dragging = $$props.stopped_dragging);
	};

	$$self.$capture_state = () => ({
		mod: _0b5vr_experimental_esm_mod,
		chroma: (chroma_default()),
		colour,
		container,
		re_render_colour,
		update_display,
		pixelRange,
		value,
		min: ColourDisplay_svelte_min,
		max: ColourDisplay_svelte_max,
		dragging,
		stopped_dragging,
		startY,
		startValue,
		startX,
		clamp: ColourDisplay_svelte_clamp,
		pointerMove,
		pointerDown,
		pointerUp,
		valueRange
	});

	$$self.$inject_state = $$props => {
		if ('colour' in $$props) $$invalidate(2, colour = $$props.colour);
		if ('container' in $$props) $$invalidate(0, container = $$props.container);
		if ('update_display' in $$props) $$invalidate(5, update_display = $$props.update_display);
		if ('value' in $$props) value = $$props.value;
		if ('dragging' in $$props) $$invalidate(3, dragging = $$props.dragging);
		if ('stopped_dragging' in $$props) $$invalidate(4, stopped_dragging = $$props.stopped_dragging);
		if ('startY' in $$props) startY = $$props.startY;
		if ('startValue' in $$props) startValue = $$props.startValue;
		if ('startX' in $$props) startX = $$props.startX;
		if ('valueRange' in $$props) valueRange = $$props.valueRange;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*colour*/ 4) {
			$: re_render_colour(colour[0], colour[1], colour[2]);
		}
	};

	$: valueRange = ColourDisplay_svelte_max - ColourDisplay_svelte_min;

	return [
		container,
		pointerDown,
		colour,
		dragging,
		stopped_dragging,
		update_display,
		div_binding
	];
}

class ColourDisplay extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			ColourDisplay_svelte_instance,
			ColourDisplay_svelte_create_fragment,
			safe_not_equal,
			{
				colour: 2,
				update_display: 5,
				dragging: 3,
				stopped_dragging: 4
			},
			ColourDisplay_svelte_add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ColourDisplay",
			options,
			id: ColourDisplay_svelte_create_fragment.name
		});
	}

	get colour() {
		return this.$$.ctx[2];
	}

	set colour(colour) {
		this.$$set({ colour });
		scheduler_flush();
	}

	get update_display() {
		return this.$$.ctx[5];
	}

	set update_display(update_display) {
		this.$$set({ update_display });
		scheduler_flush();
	}

	get dragging() {
		return this.$$.ctx[3];
	}

	set dragging(dragging) {
		this.$$set({ dragging });
		scheduler_flush();
	}

	get stopped_dragging() {
		return this.$$.ctx[4];
	}

	set stopped_dragging(stopped_dragging) {
		this.$$set({ stopped_dragging });
		scheduler_flush();
	}
}

/* harmony default export */ const ColourDisplay_svelte = (ColourDisplay);
;// CONCATENATED MODULE: ./src/IO.ts

class IO {
    keys = new Map();
    touches = {};
    two_finger_pinch_prev = false;
    two_finger_pinch = false;
    just_finished_pinch = false;
    just_started_pinch = false;
    touches_starting_positions = new Float32Array(4);
    touches_starting_mid_point = new Float32Array(2);
    touches_starting_length = 0;
    touches_mid_point_prev = new Float32Array(2);
    pinch_pos = new Float32Array(2);
    pinch_zoom = 0;
    mouse_pos = Float32Array.from([0, 0]);
    delta_mouse_pos = Float32Array.from([0, 0]);
    mouse_pos_prev = Float32Array.from([0, 0]);
    mouse_down = false;
    _mouse_positions_during_last_frame = new Float32Array(50);
    _mouse_positions_during_last_frame_b = new Float32Array(50);
    _mouse_positions_during_last_frame_cnt = 0;
    _mouse_positions_during_last_frame_cnt_b = 0;
    mouse_positions_arr_idx = 0;
    get mouse_positions_during_last_frame() {
        return this.mouse_positions_arr_idx === 0
            ? this._mouse_positions_during_last_frame
            : this._mouse_positions_during_last_frame_b;
    }
    get mouse_positions_during_last_frame_cnt() {
        return this.mouse_positions_arr_idx === 0
            ? this._mouse_positions_during_last_frame_cnt
            : this._mouse_positions_during_last_frame_cnt_b;
    }
    pointerType = 'mouse';
    mouse_down_prev = false;
    mouse_just_unpressed = false;
    mouse_just_pressed = false;
    mouse_just_moved = false;
    mmb_just_unpressed = false;
    mmb_just_pressed = false;
    mmb_down = false;
    mouse_wheel = 0;
    pressure = 0.0;
    tilt = [0, 0];
    tick() {
        this.delta_mouse_pos[0] = this.mouse_pos[0] - this.mouse_pos_prev[0];
        this.delta_mouse_pos[1] = this.mouse_pos[1] - this.mouse_pos_prev[1];
        this.mouse_pos_prev[0] = this.mouse_pos[0];
        this.mouse_pos_prev[1] = this.mouse_pos[1];
        if (this.mouse_positions_arr_idx === 0) {
            this._mouse_positions_during_last_frame_cnt = 0;
        }
        else {
            this._mouse_positions_during_last_frame_cnt_b = 0;
        }
        this.mouse_positions_arr_idx = 1 - this.mouse_positions_arr_idx;
        if (this.two_finger_pinch === false && this.two_finger_pinch_prev === true) {
            this.just_finished_pinch = true;
        }
        else if (this.two_finger_pinch === true && this.two_finger_pinch_prev === false) {
            this.just_started_pinch = true;
        }
        if (this.mouse_down !== this.mouse_down_prev) {
            if (this.mouse_down) {
                this.mouse_just_pressed = true;
            }
            else {
                this.mouse_just_unpressed = true;
            }
        }
    }
    tick_end() {
        this.mouse_just_pressed = false;
        this.mouse_just_unpressed = false;
        this.mouse_just_moved = false;
        this.mouse_down_prev = this.mouse_down;
        this.mmb_just_unpressed = false;
        this.mmb_just_pressed = false;
        this.mouse_wheel = 0;
        this.two_finger_pinch_prev = this.two_finger_pinch;
        this.just_finished_pinch = false;
        this.just_started_pinch = false;
        Object.values(this.keys).forEach((key) => {
            key.just_unpressed = false;
            key.just_pressed = false;
        });
    }
    getKey(code) {
        let key = this.keys[code];
        if (key) {
            return key;
        }
        else {
            return { down: false, just_pressed: false, just_unpressed: false };
        }
    }
    constructor() {
        window.addEventListener('keydown', (event) => {
            this.keys[event.code] = { down: true, just_pressed: true, just_unpressed: false };
            if (event.code === 'AltLeft')
                event.preventDefault();
        });
        window.addEventListener('keyup', (event) => {
            let just_unpressed = false;
            if (this.getKey(event.code).down)
                just_unpressed = true;
            this.keys[event.code] = { down: false, just_pressed: false, just_unpressed: just_unpressed };
        });
        window.addEventListener('wheel', (e) => {
            this.mouse_wheel = e.deltaY < 0 ? 1 : e.deltaY > 0 ? -1 : 0;
        });
        window.addEventListener('mouseup', (e) => {
            if (e.button === 1) {
                this.mmb_down = false;
                this.mmb_just_unpressed = true;
            }
        });
        window.addEventListener('mousedown', (e) => {
            if (e.button === 1) {
                this.mmb_down = true;
                this.mmb_just_pressed = true;
                e.preventDefault();
            }
        });
        window.addEventListener('focus', () => {
            let l_alt = this.getKey('AltLeft');
            if (l_alt.down) {
                l_alt.just_unpressed = true;
                l_alt.down = false;
            }
        });
        window.addEventListener('pointermove', (e) => {
            function getRelativeMousePosition(event, target) {
                target = target || event.target;
                var rect = target.getBoundingClientRect();
                return {
                    x: event.clientX - rect.left,
                    y: event.clientY - rect.top,
                };
            }
            function getNoPaddingNoBorderCanvasRelativeMousePosition(event, target) {
                target = target || event.target;
                var pos = getRelativeMousePosition(event, target);
                pos.x = (pos.x * target.width) / target.clientWidth;
                pos.y = (pos.y * target.height) / target.clientHeight;
                return pos;
            }
            let gl = window.gl;
            const pos = getNoPaddingNoBorderCanvasRelativeMousePosition(e, gl.canvas);
            const x = (pos.x / gl.canvas.width) * 2 - 1;
            const y = (pos.y / gl.canvas.height) * -2 + 1;
            this.mouse_pos[0] = x;
            this.mouse_pos[1] = y;
            const is_back = this.mouse_positions_arr_idx === 0;
            const positions = is_back ? this._mouse_positions_during_last_frame_b : this._mouse_positions_during_last_frame;
            const idx = is_back ? this._mouse_positions_during_last_frame_cnt_b : this._mouse_positions_during_last_frame_cnt;
            positions[idx * 2] = x;
            positions[idx * 2 + 1] = y;
            if (is_back)
                this._mouse_positions_during_last_frame_cnt_b++;
            else
                this._mouse_positions_during_last_frame_cnt++;
            this.pressure = e.pointerType === 'mouse' ? 1 : e.pressure ?? this.pressure;
            this.mouse_just_moved = true;
            this.tilt[0] = e.pointerType === 'mouse' ? 0 : e.altitudeAngle ?? this.tilt[0];
            this.tilt[1] = e.pointerType === 'mouse' ? 0 : e.azimuthAngle ?? this.tilt[1];
        });
        document.querySelector('canvas').addEventListener('touchstart', (e) => {
            for (let i = 0; i < e.targetTouches.length; i++) {
                const touch = e.targetTouches[i];
                const touch_id = touch.identifier;
                this.touches[touch_id] = [touch.clientX, touch.clientY];
            }
        });
        const length = (ax, ay, bx, by) => {
            return sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by));
        };
        document.querySelector('canvas').addEventListener('touchmove', (e) => {
            if (e.targetTouches.length === 2) {
                if (this.two_finger_pinch === false) {
                    this.touches_starting_positions[0] = e.targetTouches[0].clientX;
                    this.touches_starting_positions[1] = e.targetTouches[0].clientY;
                    this.touches_starting_positions[2] = e.targetTouches[1].clientX;
                    this.touches_starting_positions[3] = e.targetTouches[1].clientY;
                    this.touches_starting_mid_point[0] = e.targetTouches[0].clientX * 0.5 + e.targetTouches[1].clientX * 0.5;
                    this.touches_starting_mid_point[1] = e.targetTouches[0].clientY * 0.5 + e.targetTouches[1].clientY * 0.5;
                    this.pinch_zoom = 0;
                    this.touches_starting_length = length(e.targetTouches[0].clientX, e.targetTouches[0].clientY, e.targetTouches[1].clientX, e.targetTouches[1].clientY);
                    this.touches_mid_point_prev[0] = this.touches_starting_mid_point[0];
                    this.touches_mid_point_prev[1] = this.touches_starting_mid_point[1];
                    this.pinch_pos[0] = 0;
                    this.pinch_pos[1] = 0;
                }
                this.two_finger_pinch = true;
                const mid_point_x = e.targetTouches[0].clientX * 0.5 + e.targetTouches[1].clientX * 0.5;
                const mid_point_y = e.targetTouches[0].clientY * 0.5 + e.targetTouches[1].clientY * 0.5;
                const len = length(e.targetTouches[0].clientX, e.targetTouches[0].clientY, e.targetTouches[1].clientX, e.targetTouches[1].clientY);
                const res = min(window.innerWidth, window.innerHeight);
                this.pinch_zoom = ((len - this.touches_starting_length) / res) * 4;
                this.pinch_pos[0] += (((mid_point_x - this.touches_mid_point_prev[0]) / res) * 2) / window.zoom[0];
                this.pinch_pos[1] += (((mid_point_y - this.touches_mid_point_prev[1]) / res) * 2) / window.zoom[0];
                this.touches_mid_point_prev[0] = mid_point_x;
                this.touches_mid_point_prev[1] = mid_point_y;
            }
            else {
                if (this.two_finger_pinch === true) {
                    this.two_finger_pinch = false;
                }
            }
        });
        const touch_end = (e) => {
            for (const id in Object.keys(this.touches)) {
                delete this.touches[id];
            }
            this.two_finger_pinch = false;
        };
        document.querySelector('canvas').addEventListener('touchcancel', (e) => {
            touch_end(e);
        });
        document.querySelector('canvas').addEventListener('touchend', (e) => {
            touch_end(e);
        });
        document.querySelector('canvas').addEventListener('pointerdown', (e) => {
            this.pointerType = e.pointerType;
            if (e.pointerType === 'mouse' && e.button !== 0)
                return;
            this.mouse_down = true;
        });
        window.addEventListener('pointerup', () => {
            this.mouse_down = false;
        });
    }
}

// EXTERNAL MODULE: ./node_modules/earcut/src/earcut.js
var earcut = __webpack_require__(720);
// EXTERNAL MODULE: ./node_modules/libtess/libtess.min.js
var libtess_min = __webpack_require__(587);
var libtess_min_default = /*#__PURE__*/__webpack_require__.n(libtess_min);
;// CONCATENATED MODULE: ./src/gl/Buffer.ts


class UBO {
    buff;
    uniforms = [];
    constructor() {
        this.buff = new VertexBuffer(0, gl.FLOAT, 96, gl.UNIFORM_BUFFER);
        gl.bindBufferBase(gl.UNIFORM_BUFFER, 0, this.buff.buff);
    }
}
class VertexBuffer {
    buff;
    cpu_buff;
    type;
    usage;
    stride;
    single_vert_sz;
    sz;
    max_sz;
    constructor(single_vert_sz, type = gl.FLOAT, max_size = 10000000, usage = gl.ARRAY_BUFFER) {
        this.buff = gl.createBuffer();
        this.usage = usage;
        gl.bindBuffer(usage, this.buff);
        this.type = type;
        this.single_vert_sz = single_vert_sz;
        this.max_sz = max_size;
        this.stride = 0;
        if (type === gl.FLOAT) {
            this.cpu_buff = new Float32Array(max_size);
        }
        else if (type === gl.INT) {
            this.cpu_buff = new Int32Array(max_size);
        }
        else {
            this.cpu_buff = new Uint32Array(max_size);
        }
        gl.bufferData(usage, this.cpu_buff.byteLength, gl.DYNAMIC_DRAW);
        this.sz = 0;
    }
    bindToAttrib(idx, params = undefined) {
        if (params) {
            gl.bindBuffer(this.usage, this.buff);
            gl.vertexAttribPointer(idx, params.vert_sz ?? this.single_vert_sz, params.type ?? this.type, false, params.stride ?? this.stride, params.offset ?? 0);
        }
        else {
            gl.bindBuffer(this.usage, this.buff);
            gl.vertexAttribPointer(idx, this.single_vert_sz, this.type, false, this.stride, 0);
        }
    }
    push_vert(vert) {
        if (vert.length !== this.single_vert_sz) {
        }
        for (let v of vert) {
            this.cpu_buff[this.sz++] = v;
        }
    }
    upload_external_array(input_buff) {
        if (input_buff instanceof Array) {
            gl.bindBuffer(this.usage, this.buff);
            let _buff = Float32Array.from(input_buff);
            this.sz = _buff.length;
            const sz_in_bytes = _buff.byteLength;
            gl.bufferSubData(this.usage, 0, _buff);
            pause_on_gl_error();
        }
        else {
            gl.bindBuffer(this.usage, this.buff);
            const sz_in_bytes = input_buff.byteLength;
            gl.bufferSubData(this.usage, 0, input_buff);
            pause_on_gl_error();
        }
    }
    upload() {
        gl.bindBuffer(this.usage, this.buff);
        const sz_in_bytes = this.sz * this.cpu_buff.BYTES_PER_ELEMENT;
        gl.bufferSubData(this.usage, 0, this.cpu_buff, 0, sz_in_bytes);
        pause_on_gl_error();
    }
}

;// CONCATENATED MODULE: ./src/gl/ShaderProgram.ts

class ShaderProgram {
    program;
    loadShader(type, source) {
        source = source.replaceAll('export default "', ``);
        source = source.replaceAll('";', ``);
        source = source.replaceAll('"', ``);
        source = source.replaceAll(`\\n`, `
		`);
        source = source.replace(/(.*)(#version 300 es)[\t\s]*/g, `$2
			`);
        source = source.replaceAll(/(#define .+)[\t\s]*/g, `
		$1
		`);
        source = source.replaceAll(/	+precision highp float;/gm, `precision highp float;
			`);
        source = source.replaceAll(`\\t`, `	`);
        const shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error(`An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`);
            console.error(source);
        }
        return shader;
    }
    constructor(vs, fs) {
        const vertexShader = this.loadShader(gl.VERTEX_SHADER, vs);
        const fragmentShader = this.loadShader(gl.FRAGMENT_SHADER, fs);
        const shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            console.error(`Unable to initialize the shader program: ${gl.getProgramInfoLog(shaderProgram)}`);
            console.error(vs);
            console.error(fs);
        }
        this.program = shaderProgram;
        gl.useProgram(this.program);
        gl.uniformBlockBinding(this.program, 0, 0);
    }
    use() {
        gl.useProgram(this.program);
    }
    setUniformVec(name, vec) {
        if (vec.length == 2)
            gl.uniform2fv(gl.getUniformLocation(this.program, name), vec);
        else if (vec.length == 3)
            gl.uniform3fv(gl.getUniformLocation(this.program, name), vec);
        else if (vec.length == 4)
            gl.uniform4fv(gl.getUniformLocation(this.program, name), vec);
    }
    setUniformFloat(name, value) {
        gl.uniform1f(gl.getUniformLocation(this.program, name), value);
    }
    setUniformInt(name, value) {
        gl.uniform1i(gl.getUniformLocation(this.program, name), value);
    }
    setUniformTexture(name, texture, binding = 0) {
        gl.activeTexture(gl.TEXTURE0 + binding);
        gl.bindTexture(gl.TEXTURE_2D, texture.tex);
        gl.uniform1i(gl.getUniformLocation(this.program, name), binding);
    }
}

;// CONCATENATED MODULE: ./src/gl/Thing.ts


class Thing {
    vao;
    buffs;
    shader;
    prim_type;
    constructor(buffs, prim_type = gl.TRIANGLES, shader) {
        this.prim_type = prim_type;
        this.shader = shader;
        this.vao = gl.createVertexArray();
        this.buffs = [...buffs];
        gl.bindVertexArray(this.vao);
        let i = 0;
        for (let buff of this.buffs) {
            gl.enableVertexAttribArray(i);
            buff.bindToAttrib(i);
            i++;
        }
    }
    static draw_external_buffs_and_shader(buffs, shader, params) {
        shader.use();
        let i = 0;
        params.prim_type = params.prim_type ?? gl.TRIANGLES;
        params.draw_cnt = params.draw_cnt ?? buffs[0].buff.sz / buffs[0].buff.single_vert_sz;
        if (params.prim_type === gl.TRIANGLES) {
            gl.drawArrays(gl.TRIANGLES, 0, params.draw_cnt);
            console.log('DREW');
            console.log(params.draw_cnt);
        }
        else {
            alert('bleep bloop errrorrr');
        }
    }
    upload_all_buffs() {
        for (let buff of this.buffs) {
            buff.upload();
        }
    }
    draw_with_external_shader(shader) {
        shader.use();
        if (this.prim_type === gl.TRIANGLES) {
            let draw_cnt = this.buffs[0].sz / this.buffs[0].single_vert_sz;
            gl.drawArrays(this.prim_type, 0, draw_cnt);
        }
        else {
            alert('bleep bloop errrorrr');
        }
    }
    draw(offs = 0) {
        this.draw_with_external_shader(this.shader);
    }
}

;// CONCATENATED MODULE: ./src/drawer.ts








const tessy = (function initTesselator() {
    function vertexCallback(data, polyVertArray) {
        polyVertArray[polyVertArray.length] = data[0];
        polyVertArray[polyVertArray.length] = data[1];
    }
    function begincallback(type) {
        if (type !== (libtess_min_default()).primitiveType.GL_TRIANGLES) {
            console.log('expected TRIANGLES but got type: ' + type);
        }
    }
    function errorcallback(errno) {
        console.log('error callback');
        console.log('error number: ' + errno);
    }
    function combinecallback(coords, data, weight) {
        return [coords[0], coords[1], coords[2]];
    }
    function edgeCallback(flag) {
    }
    const tessy = new (libtess_min_default()).GluTesselator();
    tessy.gluTessCallback((libtess_min_default()).gluEnum.GLU_TESS_VERTEX_DATA, vertexCallback);
    tessy.gluTessCallback((libtess_min_default()).gluEnum.GLU_TESS_BEGIN, begincallback);
    tessy.gluTessCallback((libtess_min_default()).gluEnum.GLU_TESS_ERROR, errorcallback);
    tessy.gluTessCallback((libtess_min_default()).gluEnum.GLU_TESS_COMBINE, combinecallback);
    tessy.gluTessCallback((libtess_min_default()).gluEnum.GLU_TESS_EDGE_FLAG, edgeCallback);
    return tessy;
})();
function triangulate(contours) {
    tessy.gluTessNormal(0, 0, 1);
    const triangleVerts = [];
    tessy.gluTessBeginPolygon(triangleVerts);
    for (let i = 0; i < contours.length; i++) {
        tessy.gluTessBeginContour();
        let contour = contours[i];
        for (let j = 0; j < contour.length; j += 2) {
            const coords = [contour[j], contour[j + 1], 0];
            tessy.gluTessVertex(coords, coords);
        }
        tessy.gluTessEndContour();
    }
    tessy.gluTessEndPolygon();
    return triangleVerts;
}
const get_subarray = (arr, offs_begin, offs_end) => {
    return [arr.subarray(offs_begin, offs_end), offs_end - 1];
};
const get_circ_pos_from_ang = (a) => {
    const c = cos(-a);
    const s = sin(-a);
    return [c, s];
};
let drawer_gl;
class Drawer {
    canvas_tex;
    default_framebuffer;
    brush_buffer;
    zoom = 0;
    panning = [0, 0];
    t = 0;
    idx = 0;
    temp_array_a = new Float32Array(1_000_00);
    temp_array_b = new Float32Array(1_000_00);
    recorded_drawcalls = [];
    constructor(_gl, canvas_tex, default_framebuffer) {
        this.canvas_tex = canvas_tex;
        this.default_framebuffer = default_framebuffer;
        drawer_gl = _gl;
    }
    reset() {
        this.idx = 0;
        this.recorded_drawcalls.length = 0;
        this.brush_buffer.buffs[0].sz = 0;
        this.brush_buffer.buffs[1].sz = 0;
    }
    fill_buff_for_blob_brush(stroke) {
        const brush_buffer = this.brush_buffer;
        const iters = stroke.positions.length / 2 - 1;
        let aspect_correction = [0, 0];
        if (this.canvas_tex.res[0] > this.canvas_tex.res[1]) {
            aspect_correction[0] = this.canvas_tex.res[1] / this.canvas_tex.res[0];
            aspect_correction[1] = 1;
        }
        else {
            aspect_correction[0] = 1;
            aspect_correction[1] = this.canvas_tex.res[0] / this.canvas_tex.res[1];
        }
        const add_ang_to_pos = (pos, ang_x, ang_y, positive, sz_x, sz_y) => {
            if (positive) {
                pos[0] += ang_x[0] * sz_x * aspect_correction[0];
                pos[1] += ang_x[1] * sz_x * aspect_correction[1];
                pos[0] += ang_y[0] * sz_y * aspect_correction[0];
                pos[1] += ang_y[1] * sz_y * aspect_correction[1];
            }
            else {
                pos[0] -= ang_x[0] * sz_x * aspect_correction[0];
                pos[1] -= ang_x[1] * sz_x * aspect_correction[1];
                pos[0] += ang_y[0] * sz_y * aspect_correction[0];
                pos[1] += ang_y[1] * sz_y * aspect_correction[1];
            }
            return pos;
        };
        let idx = brush_buffer.buffs[0].sz;
        for (let i = 0; i < iters; i++) {
            let sz_x = stroke.sizes[i * 2] / 2;
            let sz_y = stroke.sizes[i * 2 + 1] / 2;
            let ang_x = get_circ_pos_from_ang(stroke.rotations[i * 2 + 1]);
            let ang_y = [ang_x[1], -ang_x[0]];
            let curr_pos = [stroke.positions[i * 2], stroke.positions[i * 2 + 1]];
            let curr_pos_left = add_ang_to_pos([...curr_pos], ang_x, ang_y, true, sz_x, sz_y);
            let curr_pos_right = add_ang_to_pos([...curr_pos], ang_x, ang_y, false, sz_x, sz_y);
            let next_pos_left = [...curr_pos_left];
            let next_pos_right = [...curr_pos_right];
            next_pos_left[0] -= ang_y[0] * sz_y * aspect_correction[0] * 2;
            next_pos_left[1] -= ang_y[1] * sz_y * aspect_correction[1] * 2;
            next_pos_right[0] -= ang_y[0] * sz_y * aspect_correction[0] * 2;
            next_pos_right[1] -= ang_y[1] * sz_y * aspect_correction[1] * 2;
            let curr_col = [stroke.colours[i * 3], stroke.colours[i * 3 + 1], stroke.colours[i * 3 + 2]];
            let curr_opacity = stroke.opacities[i];
            const curr_v = i / iters;
            const next_v = (i + 1) / iters;
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_left[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_left[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_right[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_right[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
        }
        brush_buffer.buffs[0].sz += iters * 6 * 4;
        brush_buffer.buffs[1].sz += iters * 6 * 4;
        this.recorded_drawcalls.push(this.brush_buffer.buffs[0].sz);
    }
    fill_buff_for_long_brush(stroke) {
        const brush_buffer = this.brush_buffer;
        const iters = stroke.positions.length / 2 - 1;
        let aspect_correction = [0, 0];
        if (this.canvas_tex.res[0] > this.canvas_tex.res[1]) {
            aspect_correction[0] = this.canvas_tex.res[1] / this.canvas_tex.res[0];
            aspect_correction[1] = 1;
        }
        else {
            aspect_correction[0] = 1;
            aspect_correction[1] = this.canvas_tex.res[0] / this.canvas_tex.res[1];
        }
        const add_ang_to_pos = (pos, ang_offs, positive, amt, aspect_correction) => {
            if (positive) {
                pos[0] += ang_offs[0] * amt * aspect_correction[0];
                pos[1] += ang_offs[1] * amt * aspect_correction[1];
            }
            else {
                pos[0] -= ang_offs[0] * amt * aspect_correction[0];
                pos[1] -= ang_offs[1] * amt * aspect_correction[1];
            }
            return pos;
        };
        let idx = brush_buffer.buffs[0].sz;
        for (let i = 0; i < iters; i++) {
            let curr_sz = stroke.sizes[i * 2];
            let next_sz = stroke.sizes[i * 2 + 2];
            let curr_ang = get_circ_pos_from_ang(stroke.rotations[i * 2 + 1]);
            let next_ang = get_circ_pos_from_ang(stroke.rotations[i * 2 + 3]);
            let curr_pos = [stroke.positions[i * 2], stroke.positions[i * 2 + 1]];
            let next_pos = [stroke.positions[i * 2 + 2], stroke.positions[i * 2 + 3]];
            let curr_pos_left = add_ang_to_pos([...curr_pos], curr_ang, true, curr_sz, aspect_correction);
            let curr_pos_right = add_ang_to_pos([...curr_pos], curr_ang, false, curr_sz, aspect_correction);
            let next_pos_left = add_ang_to_pos([...next_pos], next_ang, true, next_sz, aspect_correction);
            let next_pos_right = add_ang_to_pos([...next_pos], next_ang, false, next_sz, aspect_correction);
            let curr_col = [stroke.colours[i * 3], stroke.colours[i * 3 + 1], stroke.colours[i * 3 + 2]];
            let curr_opacity = stroke.opacities[i];
            let next_col = [stroke.colours[i * 3 + 3], stroke.colours[i * 3 + 4], stroke.colours[i * 3 + 5]];
            let next_opacity = stroke.opacities[i + 1];
            const curr_v = i / iters;
            const next_v = (i + 1) / iters;
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_left[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_left[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_v;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_v;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = next_v;
            brush_buffer.buffs[1].cpu_buff[idx++] = next_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_pos_right[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = curr_v;
            brush_buffer.buffs[1].cpu_buff[idx++] = curr_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_left[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = next_v;
            brush_buffer.buffs[1].cpu_buff[idx++] = next_opacity;
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_right[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[0];
            brush_buffer.buffs[0].cpu_buff[idx] = next_pos_right[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[1];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = next_col[2];
            brush_buffer.buffs[0].cpu_buff[idx] = next_v;
            brush_buffer.buffs[1].cpu_buff[idx++] = next_opacity;
        }
        brush_buffer.buffs[0].sz += iters * 6 * 4;
        brush_buffer.buffs[1].sz += iters * 6 * 4;
        this.recorded_drawcalls.push(this.brush_buffer.buffs[0].sz);
    }
    fill_buff_for_triangulated_brush(stroke) {
        const brush_buffer = this.brush_buffer;
        const { colours, opacities, positions } = stroke;
        const iters = positions.length / 2 - 1;
        let idx = brush_buffer.buffs[0].sz;
        for (let i = 0; i < iters; i++) {
            let u = 0;
            let v = 0;
            brush_buffer.buffs[0].cpu_buff[idx] = positions[0];
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[0];
            brush_buffer.buffs[0].cpu_buff[idx] = positions[1];
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[1];
            brush_buffer.buffs[0].cpu_buff[idx] = i / (iters + 1);
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[2];
            brush_buffer.buffs[0].cpu_buff[idx] = 0;
            brush_buffer.buffs[1].cpu_buff[idx++] = opacities[1];
            brush_buffer.buffs[0].cpu_buff[idx] = positions[i * 2];
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[i * 3];
            brush_buffer.buffs[0].cpu_buff[idx] = positions[i * 2 + 1];
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[i * 3 + 1];
            brush_buffer.buffs[0].cpu_buff[idx] = i / (iters + 1);
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[i * 3 + 2];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = opacities[i];
            brush_buffer.buffs[0].cpu_buff[idx] = positions[i * 2 + 2];
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[i * 3 + 3];
            brush_buffer.buffs[0].cpu_buff[idx] = positions[i * 2 + 3];
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[i * 3 + 4];
            brush_buffer.buffs[0].cpu_buff[idx] = (i + 1) / (iters + 1);
            brush_buffer.buffs[1].cpu_buff[idx++] = colours[i * 3 + 5];
            brush_buffer.buffs[0].cpu_buff[idx] = 1;
            brush_buffer.buffs[1].cpu_buff[idx++] = opacities[i + 1];
        }
        brush_buffer.buffs[0].sz += iters * 3 * 4;
        brush_buffer.buffs[1].sz += iters * 3 * 4;
        this.recorded_drawcalls.push(this.brush_buffer.buffs[0].sz);
    }
    push_any_stroke(stroke) {
        if (stroke.brush_type === BrushType.Blobs) {
            this.fill_buff_for_blob_brush(stroke);
        }
        else if (stroke.brush_type === BrushType.Long) {
            this.fill_buff_for_long_brush(stroke);
        }
        else if (stroke.brush_type === BrushType.Tri) {
            this.fill_buff_for_triangulated_brush(stroke);
        }
    }
    draw_stroke_idx(idx) {
        let draw_start = idx === 0 ? 0 : this.recorded_drawcalls[idx - 1];
        let draw_cnt = idx === 0 ? this.recorded_drawcalls[0] : this.recorded_drawcalls[idx] - this.recorded_drawcalls[idx - 1];
        drawer_gl.drawArrays(drawer_gl.TRIANGLES, draw_start / 4, draw_cnt / 4);
    }
    draw_any_stroke(stroke, t, brush_buffer, zoom, panning) {
        this.brush_buffer = brush_buffer;
        console.log('START DRAWING');
        this.t = t;
        this.zoom = zoom;
        this.panning = [...panning];
        brush_buffer.draw();
    }
}

;// CONCATENATED MODULE: ./src/components/App.svelte
/* src/components/App.svelte generated by Svelte v4.0.0 */


const { Object: App_svelte_Object_1, console: App_svelte_console_1 } = globals;

































const App_svelte_file = "src/components/App.svelte";

function App_svelte_add_css(target) {
	append_styles(target, "svelte-1rm0ahf", ".svelte-1rm0ahf .svelte-1rm0ahf{color:white;font-family:\"Jetbrains Mono\"}main.svelte-1rm0ahf.svelte-1rm0ahf{width:100%;height:100%;display:flex;flex-direction:column}main.svelte-1rm0ahf #bar-container.svelte-1rm0ahf{width:100%;position:absolute;display:flex;flex-direction:column}main.svelte-1rm0ahf #bar-container #bar.svelte-1rm0ahf{flex-wrap:wrap;background:black;width:100%;height:100px;display:flex;padding:0rem 1rem;align-items:center}main.svelte-1rm0ahf #bar-container #bar.svelte-1rm0ahf>div{max-height:2.5rem}main.svelte-1rm0ahf canvas.svelte-1rm0ahf{width:100%;height:100%;display:block;margin:auto;padding:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3NwbHVuZ2Uvc3BsdW5nZS9zcmMvY29tcG9uZW50cy9BcHAuc3ZlbHRlIl19 */");
}

// (62:2) <SemiModal bind:this={chaosSemiModal} knob={chaosKnob}>
function create_default_slot_2(ctx) {
	let knob0;
	let updating_value;
	let t0;
	let knob1;
	let updating_value_1;
	let t1;
	let knob2;
	let updating_value_2;
	let t2;
	let knob3;
	let updating_value_3;
	let current;

	function knob0_value_binding_1(value) {
		/*knob0_value_binding_1*/ ctx[59](value);
	}

	let knob0_props = { title: 'Chaos L' };

	if (/*curr_brush*/ ctx[12].chaos_lch[0] !== void 0) {
		knob0_props.value = /*curr_brush*/ ctx[12].chaos_lch[0];
	}

	knob0 = new Knob_svelte({ props: knob0_props, $$inline: true });
	binding_callbacks.push(() => bind(knob0, 'value', knob0_value_binding_1));

	function knob1_value_binding_1(value) {
		/*knob1_value_binding_1*/ ctx[60](value);
	}

	let knob1_props = { title: 'Chaos C' };

	if (/*curr_brush*/ ctx[12].chaos_lch[1] !== void 0) {
		knob1_props.value = /*curr_brush*/ ctx[12].chaos_lch[1];
	}

	knob1 = new Knob_svelte({ props: knob1_props, $$inline: true });
	binding_callbacks.push(() => bind(knob1, 'value', knob1_value_binding_1));

	function knob2_value_binding_1(value) {
		/*knob2_value_binding_1*/ ctx[61](value);
	}

	let knob2_props = { title: 'Chaos H' };

	if (/*curr_brush*/ ctx[12].chaos_lch[2] !== void 0) {
		knob2_props.value = /*curr_brush*/ ctx[12].chaos_lch[2];
	}

	knob2 = new Knob_svelte({ props: knob2_props, $$inline: true });
	binding_callbacks.push(() => bind(knob2, 'value', knob2_value_binding_1));

	function knob3_value_binding_1(value) {
		/*knob3_value_binding_1*/ ctx[62](value);
	}

	let knob3_props = { title: 'Chaos Speed' };

	if (/*curr_brush*/ ctx[12].chaos_speed !== void 0) {
		knob3_props.value = /*curr_brush*/ ctx[12].chaos_speed;
	}

	knob3 = new Knob_svelte({ props: knob3_props, $$inline: true });
	binding_callbacks.push(() => bind(knob3, 'value', knob3_value_binding_1));

	const block = {
		c: function create() {
			create_component(knob0.$$.fragment);
			t0 = space();
			create_component(knob1.$$.fragment);
			t1 = space();
			create_component(knob2.$$.fragment);
			t2 = space();
			create_component(knob3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(knob0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(knob1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(knob2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(knob3, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty[0] & /*curr_brush*/ 4096) {
				updating_value = true;
				knob0_changes.value = /*curr_brush*/ ctx[12].chaos_lch[0];
				add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_1 = true;
				knob1_changes.value = /*curr_brush*/ ctx[12].chaos_lch[1];
				add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const knob2_changes = {};

			if (!updating_value_2 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_2 = true;
				knob2_changes.value = /*curr_brush*/ ctx[12].chaos_lch[2];
				add_flush_callback(() => updating_value_2 = false);
			}

			knob2.$set(knob2_changes);
			const knob3_changes = {};

			if (!updating_value_3 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_3 = true;
				knob3_changes.value = /*curr_brush*/ ctx[12].chaos_speed;
				add_flush_callback(() => updating_value_3 = false);
			}

			knob3.$set(knob3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transitions_transition_in(knob0.$$.fragment, local);
			transitions_transition_in(knob1.$$.fragment, local);
			transitions_transition_in(knob2.$$.fragment, local);
			transitions_transition_in(knob3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transitions_transition_out(knob0.$$.fragment, local);
			transitions_transition_out(knob1.$$.fragment, local);
			transitions_transition_out(knob2.$$.fragment, local);
			transitions_transition_out(knob3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
			}

			destroy_component(knob0, detaching);
			destroy_component(knob1, detaching);
			destroy_component(knob2, detaching);
			destroy_component(knob3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(62:2) <SemiModal bind:this={chaosSemiModal} knob={chaosKnob}>",
		ctx
	});

	return block;
}

// (68:2) <SemiModal bind:this={dynamicsSemiModal} knob={dynamicsKnob}>
function create_default_slot_1(ctx) {
	let knob0;
	let updating_value;
	let t0;
	let knob1;
	let updating_value_1;
	let t1;
	let knob2;
	let updating_value_2;
	let t2;
	let knob3;
	let updating_value_3;
	let t3;
	let knob4;
	let updating_value_4;
	let t4;
	let knob5;
	let updating_value_5;
	let current;

	function knob0_value_binding_2(value) {
		/*knob0_value_binding_2*/ ctx[64](value);
	}

	let knob0_props = { title: 'Opacity min' };

	if (/*curr_brush*/ ctx[12].stroke_opacity_dynamics[0] !== void 0) {
		knob0_props.value = /*curr_brush*/ ctx[12].stroke_opacity_dynamics[0];
	}

	knob0 = new Knob_svelte({ props: knob0_props, $$inline: true });
	binding_callbacks.push(() => bind(knob0, 'value', knob0_value_binding_2));

	function knob1_value_binding_2(value) {
		/*knob1_value_binding_2*/ ctx[65](value);
	}

	let knob1_props = { title: 'Opacity max' };

	if (/*curr_brush*/ ctx[12].stroke_opacity_dynamics[1] !== void 0) {
		knob1_props.value = /*curr_brush*/ ctx[12].stroke_opacity_dynamics[1];
	}

	knob1 = new Knob_svelte({ props: knob1_props, $$inline: true });
	binding_callbacks.push(() => bind(knob1, 'value', knob1_value_binding_2));

	function knob2_value_binding_2(value) {
		/*knob2_value_binding_2*/ ctx[66](value);
	}

	let knob2_props = { title: 'Size min' };

	if (/*curr_brush*/ ctx[12].stroke_size_dynamics[0] !== void 0) {
		knob2_props.value = /*curr_brush*/ ctx[12].stroke_size_dynamics[0];
	}

	knob2 = new Knob_svelte({ props: knob2_props, $$inline: true });
	binding_callbacks.push(() => bind(knob2, 'value', knob2_value_binding_2));

	function knob3_value_binding_2(value) {
		/*knob3_value_binding_2*/ ctx[67](value);
	}

	let knob3_props = { title: 'Size max' };

	if (/*curr_brush*/ ctx[12].stroke_size_dynamics[1] !== void 0) {
		knob3_props.value = /*curr_brush*/ ctx[12].stroke_size_dynamics[1];
	}

	knob3 = new Knob_svelte({ props: knob3_props, $$inline: true });
	binding_callbacks.push(() => bind(knob3, 'value', knob3_value_binding_2));

	function knob4_value_binding_1(value) {
		/*knob4_value_binding_1*/ ctx[68](value);
	}

	let knob4_props = { title: 'Rot jitt' };

	if (/*curr_brush*/ ctx[12].rot_jitter !== void 0) {
		knob4_props.value = /*curr_brush*/ ctx[12].rot_jitter;
	}

	knob4 = new Knob_svelte({ props: knob4_props, $$inline: true });
	binding_callbacks.push(() => bind(knob4, 'value', knob4_value_binding_1));

	function knob5_value_binding_1(value) {
		/*knob5_value_binding_1*/ ctx[69](value);
	}

	let knob5_props = { title: 'Pos jitt' };

	if (/*curr_brush*/ ctx[12].pos_jitter !== void 0) {
		knob5_props.value = /*curr_brush*/ ctx[12].pos_jitter;
	}

	knob5 = new Knob_svelte({ props: knob5_props, $$inline: true });
	binding_callbacks.push(() => bind(knob5, 'value', knob5_value_binding_1));

	const block = {
		c: function create() {
			create_component(knob0.$$.fragment);
			t0 = space();
			create_component(knob1.$$.fragment);
			t1 = space();
			create_component(knob2.$$.fragment);
			t2 = space();
			create_component(knob3.$$.fragment);
			t3 = space();
			create_component(knob4.$$.fragment);
			t4 = space();
			create_component(knob5.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(knob0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(knob1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(knob2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(knob3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(knob4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(knob5, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty[0] & /*curr_brush*/ 4096) {
				updating_value = true;
				knob0_changes.value = /*curr_brush*/ ctx[12].stroke_opacity_dynamics[0];
				add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_1 = true;
				knob1_changes.value = /*curr_brush*/ ctx[12].stroke_opacity_dynamics[1];
				add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const knob2_changes = {};

			if (!updating_value_2 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_2 = true;
				knob2_changes.value = /*curr_brush*/ ctx[12].stroke_size_dynamics[0];
				add_flush_callback(() => updating_value_2 = false);
			}

			knob2.$set(knob2_changes);
			const knob3_changes = {};

			if (!updating_value_3 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_3 = true;
				knob3_changes.value = /*curr_brush*/ ctx[12].stroke_size_dynamics[1];
				add_flush_callback(() => updating_value_3 = false);
			}

			knob3.$set(knob3_changes);
			const knob4_changes = {};

			if (!updating_value_4 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_4 = true;
				knob4_changes.value = /*curr_brush*/ ctx[12].rot_jitter;
				add_flush_callback(() => updating_value_4 = false);
			}

			knob4.$set(knob4_changes);
			const knob5_changes = {};

			if (!updating_value_5 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_5 = true;
				knob5_changes.value = /*curr_brush*/ ctx[12].pos_jitter;
				add_flush_callback(() => updating_value_5 = false);
			}

			knob5.$set(knob5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transitions_transition_in(knob0.$$.fragment, local);
			transitions_transition_in(knob1.$$.fragment, local);
			transitions_transition_in(knob2.$$.fragment, local);
			transitions_transition_in(knob3.$$.fragment, local);
			transitions_transition_in(knob4.$$.fragment, local);
			transitions_transition_in(knob5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transitions_transition_out(knob0.$$.fragment, local);
			transitions_transition_out(knob1.$$.fragment, local);
			transitions_transition_out(knob2.$$.fragment, local);
			transitions_transition_out(knob3.$$.fragment, local);
			transitions_transition_out(knob4.$$.fragment, local);
			transitions_transition_out(knob5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
				detach_dev(t3);
				detach_dev(t4);
			}

			destroy_component(knob0, detaching);
			destroy_component(knob1, detaching);
			destroy_component(knob2, detaching);
			destroy_component(knob3, detaching);
			destroy_component(knob4, detaching);
			destroy_component(knob5, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(68:2) <SemiModal bind:this={dynamicsSemiModal} knob={dynamicsKnob}>",
		ctx
	});

	return block;
}

// (76:2) <SemiModal bind:this={texDynamicsSemiModal} knob={texDynamicsKnob}>
function create_default_slot(ctx) {
	let knob0;
	let updating_value;
	let t0;
	let knob1;
	let updating_value_1;
	let t1;
	let knob2;
	let updating_value_2;
	let t2;
	let knob3;
	let updating_value_3;
	let t3;
	let knob4;
	let updating_value_4;
	let t4;
	let texturewidget;
	let updating_brush_textures;
	let updating_selected_brush_texture;
	let current;

	function knob0_value_binding_3(value) {
		/*knob0_value_binding_3*/ ctx[71](value);
	}

	let knob0_props = { title: 'Stretch X' };

	if (/*curr_brush*/ ctx[12].tex_stretch[0] !== void 0) {
		knob0_props.value = /*curr_brush*/ ctx[12].tex_stretch[0];
	}

	knob0 = new Knob_svelte({ props: knob0_props, $$inline: true });
	binding_callbacks.push(() => bind(knob0, 'value', knob0_value_binding_3));

	function knob1_value_binding_3(value) {
		/*knob1_value_binding_3*/ ctx[72](value);
	}

	let knob1_props = { title: 'Stretch Y' };

	if (/*curr_brush*/ ctx[12].tex_stretch[1] !== void 0) {
		knob1_props.value = /*curr_brush*/ ctx[12].tex_stretch[1];
	}

	knob1 = new Knob_svelte({ props: knob1_props, $$inline: true });
	binding_callbacks.push(() => bind(knob1, 'value', knob1_value_binding_3));

	function knob2_value_binding_3(value) {
		/*knob2_value_binding_3*/ ctx[73](value);
	}

	let knob2_props = { title: 'Tex V' };

	if (/*curr_brush*/ ctx[12].tex_lch_dynamics[0] !== void 0) {
		knob2_props.value = /*curr_brush*/ ctx[12].tex_lch_dynamics[0];
	}

	knob2 = new Knob_svelte({ props: knob2_props, $$inline: true });
	binding_callbacks.push(() => bind(knob2, 'value', knob2_value_binding_3));

	function knob3_value_binding_3(value) {
		/*knob3_value_binding_3*/ ctx[74](value);
	}

	let knob3_props = { title: 'Tex S' };

	if (/*curr_brush*/ ctx[12].tex_lch_dynamics[1] !== void 0) {
		knob3_props.value = /*curr_brush*/ ctx[12].tex_lch_dynamics[1];
	}

	knob3 = new Knob_svelte({ props: knob3_props, $$inline: true });
	binding_callbacks.push(() => bind(knob3, 'value', knob3_value_binding_3));

	function knob4_value_binding_2(value) {
		/*knob4_value_binding_2*/ ctx[75](value);
	}

	let knob4_props = { title: 'Tex H' };

	if (/*curr_brush*/ ctx[12].tex_lch_dynamics[2] !== void 0) {
		knob4_props.value = /*curr_brush*/ ctx[12].tex_lch_dynamics[2];
	}

	knob4 = new Knob_svelte({ props: knob4_props, $$inline: true });
	binding_callbacks.push(() => bind(knob4, 'value', knob4_value_binding_2));

	function texturewidget_brush_textures_binding(value) {
		/*texturewidget_brush_textures_binding*/ ctx[76](value);
	}

	function texturewidget_selected_brush_texture_binding(value) {
		/*texturewidget_selected_brush_texture_binding*/ ctx[77](value);
	}

	let texturewidget_props = {};

	if (/*brush_textures*/ ctx[14] !== void 0) {
		texturewidget_props.brush_textures = /*brush_textures*/ ctx[14];
	}

	if (/*curr_brush*/ ctx[12].selected_brush_texture !== void 0) {
		texturewidget_props.selected_brush_texture = /*curr_brush*/ ctx[12].selected_brush_texture;
	}

	texturewidget = new TextureWidget_svelte({
			props: texturewidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(texturewidget, 'brush_textures', texturewidget_brush_textures_binding));
	binding_callbacks.push(() => bind(texturewidget, 'selected_brush_texture', texturewidget_selected_brush_texture_binding));

	const block = {
		c: function create() {
			create_component(knob0.$$.fragment);
			t0 = space();
			create_component(knob1.$$.fragment);
			t1 = space();
			create_component(knob2.$$.fragment);
			t2 = space();
			create_component(knob3.$$.fragment);
			t3 = space();
			create_component(knob4.$$.fragment);
			t4 = space();
			create_component(texturewidget.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(knob0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(knob1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(knob2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(knob3, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(knob4, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(texturewidget, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty[0] & /*curr_brush*/ 4096) {
				updating_value = true;
				knob0_changes.value = /*curr_brush*/ ctx[12].tex_stretch[0];
				add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_1 = true;
				knob1_changes.value = /*curr_brush*/ ctx[12].tex_stretch[1];
				add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const knob2_changes = {};

			if (!updating_value_2 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_2 = true;
				knob2_changes.value = /*curr_brush*/ ctx[12].tex_lch_dynamics[0];
				add_flush_callback(() => updating_value_2 = false);
			}

			knob2.$set(knob2_changes);
			const knob3_changes = {};

			if (!updating_value_3 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_3 = true;
				knob3_changes.value = /*curr_brush*/ ctx[12].tex_lch_dynamics[1];
				add_flush_callback(() => updating_value_3 = false);
			}

			knob3.$set(knob3_changes);
			const knob4_changes = {};

			if (!updating_value_4 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_4 = true;
				knob4_changes.value = /*curr_brush*/ ctx[12].tex_lch_dynamics[2];
				add_flush_callback(() => updating_value_4 = false);
			}

			knob4.$set(knob4_changes);
			const texturewidget_changes = {};

			if (!updating_brush_textures && dirty[0] & /*brush_textures*/ 16384) {
				updating_brush_textures = true;
				texturewidget_changes.brush_textures = /*brush_textures*/ ctx[14];
				add_flush_callback(() => updating_brush_textures = false);
			}

			if (!updating_selected_brush_texture && dirty[0] & /*curr_brush*/ 4096) {
				updating_selected_brush_texture = true;
				texturewidget_changes.selected_brush_texture = /*curr_brush*/ ctx[12].selected_brush_texture;
				add_flush_callback(() => updating_selected_brush_texture = false);
			}

			texturewidget.$set(texturewidget_changes);
		},
		i: function intro(local) {
			if (current) return;
			transitions_transition_in(knob0.$$.fragment, local);
			transitions_transition_in(knob1.$$.fragment, local);
			transitions_transition_in(knob2.$$.fragment, local);
			transitions_transition_in(knob3.$$.fragment, local);
			transitions_transition_in(knob4.$$.fragment, local);
			transitions_transition_in(texturewidget.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transitions_transition_out(knob0.$$.fragment, local);
			transitions_transition_out(knob1.$$.fragment, local);
			transitions_transition_out(knob2.$$.fragment, local);
			transitions_transition_out(knob3.$$.fragment, local);
			transitions_transition_out(knob4.$$.fragment, local);
			transitions_transition_out(texturewidget.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
				detach_dev(t3);
				detach_dev(t4);
			}

			destroy_component(knob0, detaching);
			destroy_component(knob1, detaching);
			destroy_component(knob2, detaching);
			destroy_component(knob3, detaching);
			destroy_component(knob4, detaching);
			destroy_component(texturewidget, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(76:2) <SemiModal bind:this={texDynamicsSemiModal} knob={texDynamicsKnob}>",
		ctx
	});

	return block;
}

function App_svelte_create_fragment(ctx) {
	let main;
	let div1;
	let div0;
	let knob0;
	let updating_value;
	let t0;
	let knob1;
	let updating_value_1;
	let t1;
	let knob2;
	let updating_value_2;
	let t2;
	let colourdisplay;
	let updating_colour;
	let updating_update_display;
	let t3;
	let knob3;
	let updating_value_3;
	let t4;
	let brushsizewidget;
	let updating_brush_sz;
	let updating_dragging;
	let updating_stopped_dragging;
	let t5;
	let knob4;
	let updating_value_4;
	let t6;
	let knob5;
	let updating_value_5;
	let t7;
	let brushtypewidget;
	let updating_curr_brush;
	let t8;
	let brushpresetwidget;
	let updating_brush_presets;
	let updating_selected_brush_preset;
	let t9;
	let undoredowidget;
	let t10;
	let gallerywidget;
	let updating_current_project;
	let updating_resize_project;
	let updating_project_has_been_modified;
	let updating_is_safe_to_switch_to_new_project;
	let t11;
	let floatingmodal;
	let t12;
	let pickcolourwidget;
	let updating_picking;
	let updating_just_finished_pick;
	let t13;
	let blendingcolourspacewidget;
	let updating_selected_colour_space;
	let t14;
	let semimodal0;
	let t15;
	let semimodal1;
	let t16;
	let semimodal2;
	let t17;
	let canvas;
	let current;

	function knob0_value_binding(value) {
		/*knob0_value_binding*/ ctx[29](value);
	}

	let knob0_props = { title: 'R' };

	if (/*stroke_col*/ ctx[9][0] !== void 0) {
		knob0_props.value = /*stroke_col*/ ctx[9][0];
	}

	knob0 = new Knob_svelte({ props: knob0_props, $$inline: true });
	binding_callbacks.push(() => bind(knob0, 'value', knob0_value_binding));

	function knob1_value_binding(value) {
		/*knob1_value_binding*/ ctx[30](value);
	}

	let knob1_props = { title: 'G' };

	if (/*stroke_col*/ ctx[9][1] !== void 0) {
		knob1_props.value = /*stroke_col*/ ctx[9][1];
	}

	knob1 = new Knob_svelte({ props: knob1_props, $$inline: true });
	binding_callbacks.push(() => bind(knob1, 'value', knob1_value_binding));

	function knob2_value_binding(value) {
		/*knob2_value_binding*/ ctx[31](value);
	}

	let knob2_props = { title: 'B' };

	if (/*stroke_col*/ ctx[9][2] !== void 0) {
		knob2_props.value = /*stroke_col*/ ctx[9][2];
	}

	knob2 = new Knob_svelte({ props: knob2_props, $$inline: true });
	binding_callbacks.push(() => bind(knob2, 'value', knob2_value_binding));

	function colourdisplay_colour_binding(value) {
		/*colourdisplay_colour_binding*/ ctx[32](value);
	}

	function colourdisplay_update_display_binding(value) {
		/*colourdisplay_update_display_binding*/ ctx[33](value);
	}

	let colourdisplay_props = {};

	if (/*stroke_col*/ ctx[9] !== void 0) {
		colourdisplay_props.colour = /*stroke_col*/ ctx[9];
	}

	if (/*trigger_colour_display_update*/ ctx[25] !== void 0) {
		colourdisplay_props.update_display = /*trigger_colour_display_update*/ ctx[25];
	}

	colourdisplay = new ColourDisplay_svelte({
			props: colourdisplay_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(colourdisplay, 'colour', colourdisplay_colour_binding));
	binding_callbacks.push(() => bind(colourdisplay, 'update_display', colourdisplay_update_display_binding));

	function knob3_value_binding(value) {
		/*knob3_value_binding*/ ctx[35](value);
	}

	let knob3_props = {
		title: 'Chaos',
		triggerModal: /*openModal*/ ctx[28],
		modal: /*chaosSemiModal*/ ctx[1]
	};

	if (/*curr_brush*/ ctx[12].chaos !== void 0) {
		knob3_props.value = /*curr_brush*/ ctx[12].chaos;
	}

	knob3 = new Knob_svelte({ props: knob3_props, $$inline: true });
	/*knob3_binding*/ ctx[34](knob3);
	binding_callbacks.push(() => bind(knob3, 'value', knob3_value_binding));

	function brushsizewidget_brush_sz_binding(value) {
		/*brushsizewidget_brush_sz_binding*/ ctx[36](value);
	}

	function brushsizewidget_dragging_binding(value) {
		/*brushsizewidget_dragging_binding*/ ctx[37](value);
	}

	function brushsizewidget_stopped_dragging_binding(value) {
		/*brushsizewidget_stopped_dragging_binding*/ ctx[38](value);
	}

	let brushsizewidget_props = {};

	if (/*brush_sz*/ ctx[10] !== void 0) {
		brushsizewidget_props.brush_sz = /*brush_sz*/ ctx[10];
	}

	if (/*brushSizeWidgetDragging*/ ctx[4] !== void 0) {
		brushsizewidget_props.dragging = /*brushSizeWidgetDragging*/ ctx[4];
	}

	if (/*brushSizeWidgetStoppedDragging*/ ctx[5] !== void 0) {
		brushsizewidget_props.stopped_dragging = /*brushSizeWidgetStoppedDragging*/ ctx[5];
	}

	brushsizewidget = new BrushSizeWidget_svelte({
			props: brushsizewidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(brushsizewidget, 'brush_sz', brushsizewidget_brush_sz_binding));
	binding_callbacks.push(() => bind(brushsizewidget, 'dragging', brushsizewidget_dragging_binding));
	binding_callbacks.push(() => bind(brushsizewidget, 'stopped_dragging', brushsizewidget_stopped_dragging_binding));

	function knob4_value_binding(value) {
		/*knob4_value_binding*/ ctx[40](value);
	}

	let knob4_props = {
		title: 'Dynamics',
		triggerModal: /*openModal*/ ctx[28],
		modal: /*dynamicsSemiModal*/ ctx[2]
	};

	if (/*curr_brush*/ ctx[12].dynamics !== void 0) {
		knob4_props.value = /*curr_brush*/ ctx[12].dynamics;
	}

	knob4 = new Knob_svelte({ props: knob4_props, $$inline: true });
	/*knob4_binding*/ ctx[39](knob4);
	binding_callbacks.push(() => bind(knob4, 'value', knob4_value_binding));

	function knob5_value_binding(value) {
		/*knob5_value_binding*/ ctx[42](value);
	}

	let knob5_props = {
		title: 'Tex',
		triggerModal: /*openModal*/ ctx[28],
		modal: /*texDynamicsSemiModal*/ ctx[3]
	};

	if (/*curr_brush*/ ctx[12].tex_dynamics !== void 0) {
		knob5_props.value = /*curr_brush*/ ctx[12].tex_dynamics;
	}

	knob5 = new Knob_svelte({ props: knob5_props, $$inline: true });
	/*knob5_binding*/ ctx[41](knob5);
	binding_callbacks.push(() => bind(knob5, 'value', knob5_value_binding));

	function brushtypewidget_curr_brush_binding(value) {
		/*brushtypewidget_curr_brush_binding*/ ctx[43](value);
	}

	let brushtypewidget_props = {};

	if (/*curr_brush*/ ctx[12] !== void 0) {
		brushtypewidget_props.curr_brush = /*curr_brush*/ ctx[12];
	}

	brushtypewidget = new BrushTypeWidget_svelte({
			props: brushtypewidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(brushtypewidget, 'curr_brush', brushtypewidget_curr_brush_binding));

	function brushpresetwidget_brush_presets_binding(value) {
		/*brushpresetwidget_brush_presets_binding*/ ctx[44](value);
	}

	function brushpresetwidget_selected_brush_preset_binding(value) {
		/*brushpresetwidget_selected_brush_preset_binding*/ ctx[45](value);
	}

	let brushpresetwidget_props = {};

	if (/*brush_presets*/ ctx[11] !== void 0) {
		brushpresetwidget_props.brush_presets = /*brush_presets*/ ctx[11];
	}

	if (/*curr_brush*/ ctx[12] !== void 0) {
		brushpresetwidget_props.selected_brush_preset = /*curr_brush*/ ctx[12];
	}

	brushpresetwidget = new BrushPresetWidget_svelte({
			props: brushpresetwidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(brushpresetwidget, 'brush_presets', brushpresetwidget_brush_presets_binding));
	binding_callbacks.push(() => bind(brushpresetwidget, 'selected_brush_preset', brushpresetwidget_selected_brush_preset_binding));

	undoredowidget = new UndoRedoWidget_svelte({
			props: {
				undo: /*func*/ ctx[46],
				redo: /*func_1*/ ctx[47]
			},
			$$inline: true
		});

	function gallerywidget_current_project_binding(value) {
		/*gallerywidget_current_project_binding*/ ctx[51](value);
	}

	function gallerywidget_resize_project_binding(value) {
		/*gallerywidget_resize_project_binding*/ ctx[52](value);
	}

	function gallerywidget_project_has_been_modified_binding(value) {
		/*gallerywidget_project_has_been_modified_binding*/ ctx[53](value);
	}

	function gallerywidget_is_safe_to_switch_to_new_project_binding(value) {
		/*gallerywidget_is_safe_to_switch_to_new_project_binding*/ ctx[54](value);
	}

	let gallerywidget_props = {
		get_current_canvas_as_image: /*func_2*/ ctx[48],
		new_project: /*func_3*/ ctx[49],
		load_project: /*func_4*/ ctx[50]
	};

	if (/*project*/ ctx[20] !== void 0) {
		gallerywidget_props.current_project = /*project*/ ctx[20];
	}

	if (/*resize_project*/ ctx[23] !== void 0) {
		gallerywidget_props.resize_project = /*resize_project*/ ctx[23];
	}

	if (/*project_has_been_modified*/ ctx[22] !== void 0) {
		gallerywidget_props.project_has_been_modified = /*project_has_been_modified*/ ctx[22];
	}

	if (/*is_safe_to_switch_to_new_project*/ ctx[24] !== void 0) {
		gallerywidget_props.is_safe_to_switch_to_new_project = /*is_safe_to_switch_to_new_project*/ ctx[24];
	}

	gallerywidget = new GalleryWidget_svelte({
			props: gallerywidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(gallerywidget, 'current_project', gallerywidget_current_project_binding));
	binding_callbacks.push(() => bind(gallerywidget, 'resize_project', gallerywidget_resize_project_binding));
	binding_callbacks.push(() => bind(gallerywidget, 'project_has_been_modified', gallerywidget_project_has_been_modified_binding));
	binding_callbacks.push(() => bind(gallerywidget, 'is_safe_to_switch_to_new_project', gallerywidget_is_safe_to_switch_to_new_project_binding));
	floatingmodal = new FloatingModal_svelte({ $$inline: true });

	function pickcolourwidget_picking_binding(value) {
		/*pickcolourwidget_picking_binding*/ ctx[56](value);
	}

	function pickcolourwidget_just_finished_pick_binding(value) {
		/*pickcolourwidget_just_finished_pick_binding*/ ctx[57](value);
	}

	let pickcolourwidget_props = { pick_from_canvas: /*func_5*/ ctx[55] };

	if (/*picking*/ ctx[18] !== void 0) {
		pickcolourwidget_props.picking = /*picking*/ ctx[18];
	}

	if (/*just_finished_pick*/ ctx[19] !== void 0) {
		pickcolourwidget_props.just_finished_pick = /*just_finished_pick*/ ctx[19];
	}

	pickcolourwidget = new PickColourWidget_svelte({
			props: pickcolourwidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(pickcolourwidget, 'picking', pickcolourwidget_picking_binding));
	binding_callbacks.push(() => bind(pickcolourwidget, 'just_finished_pick', pickcolourwidget_just_finished_pick_binding));

	function blendingcolourspacewidget_selected_colour_space_binding(value) {
		/*blendingcolourspacewidget_selected_colour_space_binding*/ ctx[58](value);
	}

	let blendingcolourspacewidget_props = {};

	if (/*blending_colour_space*/ ctx[13] !== void 0) {
		blendingcolourspacewidget_props.selected_colour_space = /*blending_colour_space*/ ctx[13];
	}

	blendingcolourspacewidget = new BlendingColourSpaceWidget_svelte({
			props: blendingcolourspacewidget_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(blendingcolourspacewidget, 'selected_colour_space', blendingcolourspacewidget_selected_colour_space_binding));

	let semimodal0_props = {
		knob: /*chaosKnob*/ ctx[6],
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	semimodal0 = new SemiModal_svelte({ props: semimodal0_props, $$inline: true });
	/*semimodal0_binding*/ ctx[63](semimodal0);

	let semimodal1_props = {
		knob: /*dynamicsKnob*/ ctx[7],
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	semimodal1 = new SemiModal_svelte({ props: semimodal1_props, $$inline: true });
	/*semimodal1_binding*/ ctx[70](semimodal1);

	let semimodal2_props = {
		knob: /*texDynamicsKnob*/ ctx[8],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	semimodal2 = new SemiModal_svelte({ props: semimodal2_props, $$inline: true });
	/*semimodal2_binding*/ ctx[78](semimodal2);

	const block = {
		c: function create() {
			main = dom_element("main");
			div1 = dom_element("div");
			div0 = dom_element("div");
			create_component(knob0.$$.fragment);
			t0 = space();
			create_component(knob1.$$.fragment);
			t1 = space();
			create_component(knob2.$$.fragment);
			t2 = space();
			create_component(colourdisplay.$$.fragment);
			t3 = space();
			create_component(knob3.$$.fragment);
			t4 = space();
			create_component(brushsizewidget.$$.fragment);
			t5 = space();
			create_component(knob4.$$.fragment);
			t6 = space();
			create_component(knob5.$$.fragment);
			t7 = space();
			create_component(brushtypewidget.$$.fragment);
			t8 = space();
			create_component(brushpresetwidget.$$.fragment);
			t9 = space();
			create_component(undoredowidget.$$.fragment);
			t10 = space();
			create_component(gallerywidget.$$.fragment);
			t11 = space();
			create_component(floatingmodal.$$.fragment);
			t12 = space();
			create_component(pickcolourwidget.$$.fragment);
			t13 = space();
			create_component(blendingcolourspacewidget.$$.fragment);
			t14 = space();
			create_component(semimodal0.$$.fragment);
			t15 = space();
			create_component(semimodal1.$$.fragment);
			t16 = space();
			create_component(semimodal2.$$.fragment);
			t17 = space();
			canvas = dom_element("canvas");
			attr_dev(div0, "id", "bar");
			attr_dev(div0, "class", "svelte-1rm0ahf");
			add_location(div0, App_svelte_file, 2, 2, 35);
			attr_dev(div1, "id", "bar-container");
			attr_dev(div1, "class", "svelte-1rm0ahf");
			add_location(div1, App_svelte_file, 1, 1, 8);
			attr_dev(canvas, "id", "canvas");
			attr_dev(canvas, "class", "svelte-1rm0ahf");
			add_location(canvas, App_svelte_file, 84, 1, 3568);
			attr_dev(main, "class", "svelte-1rm0ahf");
			add_location(main, App_svelte_file, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div1);
			append_dev(div1, div0);
			mount_component(knob0, div0, null);
			append_dev(div0, t0);
			mount_component(knob1, div0, null);
			append_dev(div0, t1);
			mount_component(knob2, div0, null);
			append_dev(div0, t2);
			mount_component(colourdisplay, div0, null);
			append_dev(div0, t3);
			mount_component(knob3, div0, null);
			append_dev(div0, t4);
			mount_component(brushsizewidget, div0, null);
			append_dev(div0, t5);
			mount_component(knob4, div0, null);
			append_dev(div0, t6);
			mount_component(knob5, div0, null);
			append_dev(div0, t7);
			mount_component(brushtypewidget, div0, null);
			append_dev(div0, t8);
			mount_component(brushpresetwidget, div0, null);
			append_dev(div0, t9);
			mount_component(undoredowidget, div0, null);
			append_dev(div0, t10);
			mount_component(gallerywidget, div0, null);
			append_dev(div0, t11);
			mount_component(floatingmodal, div0, null);
			append_dev(div0, t12);
			mount_component(pickcolourwidget, div0, null);
			append_dev(div0, t13);
			mount_component(blendingcolourspacewidget, div0, null);
			append_dev(div1, t14);
			mount_component(semimodal0, div1, null);
			append_dev(div1, t15);
			mount_component(semimodal1, div1, null);
			append_dev(div1, t16);
			mount_component(semimodal2, div1, null);
			append_dev(main, t17);
			append_dev(main, canvas);
			/*canvas_binding*/ ctx[79](canvas);
			current = true;
		},
		p: function update(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty[0] & /*stroke_col*/ 512) {
				updating_value = true;
				knob0_changes.value = /*stroke_col*/ ctx[9][0];
				add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty[0] & /*stroke_col*/ 512) {
				updating_value_1 = true;
				knob1_changes.value = /*stroke_col*/ ctx[9][1];
				add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const knob2_changes = {};

			if (!updating_value_2 && dirty[0] & /*stroke_col*/ 512) {
				updating_value_2 = true;
				knob2_changes.value = /*stroke_col*/ ctx[9][2];
				add_flush_callback(() => updating_value_2 = false);
			}

			knob2.$set(knob2_changes);
			const colourdisplay_changes = {};

			if (!updating_colour && dirty[0] & /*stroke_col*/ 512) {
				updating_colour = true;
				colourdisplay_changes.colour = /*stroke_col*/ ctx[9];
				add_flush_callback(() => updating_colour = false);
			}

			if (!updating_update_display && dirty[0] & /*trigger_colour_display_update*/ 33554432) {
				updating_update_display = true;
				colourdisplay_changes.update_display = /*trigger_colour_display_update*/ ctx[25];
				add_flush_callback(() => updating_update_display = false);
			}

			colourdisplay.$set(colourdisplay_changes);
			const knob3_changes = {};
			if (dirty[0] & /*chaosSemiModal*/ 2) knob3_changes.modal = /*chaosSemiModal*/ ctx[1];

			if (!updating_value_3 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_3 = true;
				knob3_changes.value = /*curr_brush*/ ctx[12].chaos;
				add_flush_callback(() => updating_value_3 = false);
			}

			knob3.$set(knob3_changes);
			const brushsizewidget_changes = {};

			if (!updating_brush_sz && dirty[0] & /*brush_sz*/ 1024) {
				updating_brush_sz = true;
				brushsizewidget_changes.brush_sz = /*brush_sz*/ ctx[10];
				add_flush_callback(() => updating_brush_sz = false);
			}

			if (!updating_dragging && dirty[0] & /*brushSizeWidgetDragging*/ 16) {
				updating_dragging = true;
				brushsizewidget_changes.dragging = /*brushSizeWidgetDragging*/ ctx[4];
				add_flush_callback(() => updating_dragging = false);
			}

			if (!updating_stopped_dragging && dirty[0] & /*brushSizeWidgetStoppedDragging*/ 32) {
				updating_stopped_dragging = true;
				brushsizewidget_changes.stopped_dragging = /*brushSizeWidgetStoppedDragging*/ ctx[5];
				add_flush_callback(() => updating_stopped_dragging = false);
			}

			brushsizewidget.$set(brushsizewidget_changes);
			const knob4_changes = {};
			if (dirty[0] & /*dynamicsSemiModal*/ 4) knob4_changes.modal = /*dynamicsSemiModal*/ ctx[2];

			if (!updating_value_4 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_4 = true;
				knob4_changes.value = /*curr_brush*/ ctx[12].dynamics;
				add_flush_callback(() => updating_value_4 = false);
			}

			knob4.$set(knob4_changes);
			const knob5_changes = {};
			if (dirty[0] & /*texDynamicsSemiModal*/ 8) knob5_changes.modal = /*texDynamicsSemiModal*/ ctx[3];

			if (!updating_value_5 && dirty[0] & /*curr_brush*/ 4096) {
				updating_value_5 = true;
				knob5_changes.value = /*curr_brush*/ ctx[12].tex_dynamics;
				add_flush_callback(() => updating_value_5 = false);
			}

			knob5.$set(knob5_changes);
			const brushtypewidget_changes = {};

			if (!updating_curr_brush && dirty[0] & /*curr_brush*/ 4096) {
				updating_curr_brush = true;
				brushtypewidget_changes.curr_brush = /*curr_brush*/ ctx[12];
				add_flush_callback(() => updating_curr_brush = false);
			}

			brushtypewidget.$set(brushtypewidget_changes);
			const brushpresetwidget_changes = {};

			if (!updating_brush_presets && dirty[0] & /*brush_presets*/ 2048) {
				updating_brush_presets = true;
				brushpresetwidget_changes.brush_presets = /*brush_presets*/ ctx[11];
				add_flush_callback(() => updating_brush_presets = false);
			}

			if (!updating_selected_brush_preset && dirty[0] & /*curr_brush*/ 4096) {
				updating_selected_brush_preset = true;
				brushpresetwidget_changes.selected_brush_preset = /*curr_brush*/ ctx[12];
				add_flush_callback(() => updating_selected_brush_preset = false);
			}

			brushpresetwidget.$set(brushpresetwidget_changes);
			const undoredowidget_changes = {};
			if (dirty[0] & /*undo_pending*/ 65536) undoredowidget_changes.undo = /*func*/ ctx[46];
			if (dirty[0] & /*redo_pending*/ 131072) undoredowidget_changes.redo = /*func_1*/ ctx[47];
			undoredowidget.$set(undoredowidget_changes);
			const gallerywidget_changes = {};
			if (dirty[0] & /*canvas_read_tex*/ 67108864) gallerywidget_changes.get_current_canvas_as_image = /*func_2*/ ctx[48];
			if (dirty[0] & /*new_project_pending*/ 32768) gallerywidget_changes.new_project = /*func_3*/ ctx[49];
			if (dirty[0] & /*project_pending_load*/ 2097152) gallerywidget_changes.load_project = /*func_4*/ ctx[50];

			if (!updating_current_project && dirty[0] & /*project*/ 1048576) {
				updating_current_project = true;
				gallerywidget_changes.current_project = /*project*/ ctx[20];
				add_flush_callback(() => updating_current_project = false);
			}

			if (!updating_resize_project && dirty[0] & /*resize_project*/ 8388608) {
				updating_resize_project = true;
				gallerywidget_changes.resize_project = /*resize_project*/ ctx[23];
				add_flush_callback(() => updating_resize_project = false);
			}

			if (!updating_project_has_been_modified && dirty[0] & /*project_has_been_modified*/ 4194304) {
				updating_project_has_been_modified = true;
				gallerywidget_changes.project_has_been_modified = /*project_has_been_modified*/ ctx[22];
				add_flush_callback(() => updating_project_has_been_modified = false);
			}

			if (!updating_is_safe_to_switch_to_new_project && dirty[0] & /*is_safe_to_switch_to_new_project*/ 16777216) {
				updating_is_safe_to_switch_to_new_project = true;
				gallerywidget_changes.is_safe_to_switch_to_new_project = /*is_safe_to_switch_to_new_project*/ ctx[24];
				add_flush_callback(() => updating_is_safe_to_switch_to_new_project = false);
			}

			gallerywidget.$set(gallerywidget_changes);
			const pickcolourwidget_changes = {};

			if (!updating_picking && dirty[0] & /*picking*/ 262144) {
				updating_picking = true;
				pickcolourwidget_changes.picking = /*picking*/ ctx[18];
				add_flush_callback(() => updating_picking = false);
			}

			if (!updating_just_finished_pick && dirty[0] & /*just_finished_pick*/ 524288) {
				updating_just_finished_pick = true;
				pickcolourwidget_changes.just_finished_pick = /*just_finished_pick*/ ctx[19];
				add_flush_callback(() => updating_just_finished_pick = false);
			}

			pickcolourwidget.$set(pickcolourwidget_changes);
			const blendingcolourspacewidget_changes = {};

			if (!updating_selected_colour_space && dirty[0] & /*blending_colour_space*/ 8192) {
				updating_selected_colour_space = true;
				blendingcolourspacewidget_changes.selected_colour_space = /*blending_colour_space*/ ctx[13];
				add_flush_callback(() => updating_selected_colour_space = false);
			}

			blendingcolourspacewidget.$set(blendingcolourspacewidget_changes);
			const semimodal0_changes = {};
			if (dirty[0] & /*chaosKnob*/ 64) semimodal0_changes.knob = /*chaosKnob*/ ctx[6];

			if (dirty[0] & /*curr_brush*/ 4096 | dirty[3] & /*$$scope*/ 1024) {
				semimodal0_changes.$$scope = { dirty, ctx };
			}

			semimodal0.$set(semimodal0_changes);
			const semimodal1_changes = {};
			if (dirty[0] & /*dynamicsKnob*/ 128) semimodal1_changes.knob = /*dynamicsKnob*/ ctx[7];

			if (dirty[0] & /*curr_brush*/ 4096 | dirty[3] & /*$$scope*/ 1024) {
				semimodal1_changes.$$scope = { dirty, ctx };
			}

			semimodal1.$set(semimodal1_changes);
			const semimodal2_changes = {};
			if (dirty[0] & /*texDynamicsKnob*/ 256) semimodal2_changes.knob = /*texDynamicsKnob*/ ctx[8];

			if (dirty[0] & /*brush_textures, curr_brush*/ 20480 | dirty[3] & /*$$scope*/ 1024) {
				semimodal2_changes.$$scope = { dirty, ctx };
			}

			semimodal2.$set(semimodal2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transitions_transition_in(knob0.$$.fragment, local);
			transitions_transition_in(knob1.$$.fragment, local);
			transitions_transition_in(knob2.$$.fragment, local);
			transitions_transition_in(colourdisplay.$$.fragment, local);
			transitions_transition_in(knob3.$$.fragment, local);
			transitions_transition_in(brushsizewidget.$$.fragment, local);
			transitions_transition_in(knob4.$$.fragment, local);
			transitions_transition_in(knob5.$$.fragment, local);
			transitions_transition_in(brushtypewidget.$$.fragment, local);
			transitions_transition_in(brushpresetwidget.$$.fragment, local);
			transitions_transition_in(undoredowidget.$$.fragment, local);
			transitions_transition_in(gallerywidget.$$.fragment, local);
			transitions_transition_in(floatingmodal.$$.fragment, local);
			transitions_transition_in(pickcolourwidget.$$.fragment, local);
			transitions_transition_in(blendingcolourspacewidget.$$.fragment, local);
			transitions_transition_in(semimodal0.$$.fragment, local);
			transitions_transition_in(semimodal1.$$.fragment, local);
			transitions_transition_in(semimodal2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transitions_transition_out(knob0.$$.fragment, local);
			transitions_transition_out(knob1.$$.fragment, local);
			transitions_transition_out(knob2.$$.fragment, local);
			transitions_transition_out(colourdisplay.$$.fragment, local);
			transitions_transition_out(knob3.$$.fragment, local);
			transitions_transition_out(brushsizewidget.$$.fragment, local);
			transitions_transition_out(knob4.$$.fragment, local);
			transitions_transition_out(knob5.$$.fragment, local);
			transitions_transition_out(brushtypewidget.$$.fragment, local);
			transitions_transition_out(brushpresetwidget.$$.fragment, local);
			transitions_transition_out(undoredowidget.$$.fragment, local);
			transitions_transition_out(gallerywidget.$$.fragment, local);
			transitions_transition_out(floatingmodal.$$.fragment, local);
			transitions_transition_out(pickcolourwidget.$$.fragment, local);
			transitions_transition_out(blendingcolourspacewidget.$$.fragment, local);
			transitions_transition_out(semimodal0.$$.fragment, local);
			transitions_transition_out(semimodal1.$$.fragment, local);
			transitions_transition_out(semimodal2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(main);
			}

			destroy_component(knob0);
			destroy_component(knob1);
			destroy_component(knob2);
			destroy_component(colourdisplay);
			/*knob3_binding*/ ctx[34](null);
			destroy_component(knob3);
			destroy_component(brushsizewidget);
			/*knob4_binding*/ ctx[39](null);
			destroy_component(knob4);
			/*knob5_binding*/ ctx[41](null);
			destroy_component(knob5);
			destroy_component(brushtypewidget);
			destroy_component(brushpresetwidget);
			destroy_component(undoredowidget);
			destroy_component(gallerywidget);
			destroy_component(floatingmodal);
			destroy_component(pickcolourwidget);
			destroy_component(blendingcolourspacewidget);
			/*semimodal0_binding*/ ctx[63](null);
			destroy_component(semimodal0);
			/*semimodal1_binding*/ ctx[70](null);
			destroy_component(semimodal1);
			/*semimodal2_binding*/ ctx[78](null);
			destroy_component(semimodal2);
			/*canvas_binding*/ ctx[79](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: App_svelte_create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const undo_cache_steps = 25;

function App_svelte_instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	let hash = new Hash();
	let io;
	let gl;
	let zoom = Float32Array.from([1]);
	window.zoom = zoom;
	let desired_zoom = 1;
	let panning_temp_pinch = [0, 0];
	let panning = [0, 0];
	let userAgentRes = [0, 0];
	let default_framebuffer;
	let canvasElement;
	let chaosSemiModal;
	let dynamicsSemiModal;
	let texDynamicsSemiModal;
	let modals = [];
	let brushSizeWidgetDragging;
	let brushSizeWidgetStoppedDragging;
	let chaosKnob;
	let dynamicsKnob;
	let texDynamicsKnob;
	let stroke_col = [0.5, 0.4, 0.3, 1];
	let stroke_opacity = 0;
	let brush_rot = [0, 0];
	let brush_pos_ndc_screen = [0, 0];
	let brush_pos_ndc_canvas = [0, 0];
	let brush_sz = [1, 0.2];
	let brush_presets = [];

	for (let i = 0; i < 6; i++) {
		brush_presets.push(new BrushPreset());
	}

	let curr_brush = brush_presets[0];
	let blending_colour_space = BlendingColourSpace.OkLCH;
	let brush_textures = [];
	let new_project_pending = false;
	let undo_pending = false;
	let redo_pending = false;
	let picking;
	let just_finished_pick;
	let picked_col = [0, 0, 0];
	let project = new Project();
	let project_pending_load;
	let project_has_been_modified = false;
	let resize_project;
	let is_safe_to_switch_to_new_project;
	let full_redraw_needed = false;
	let trigger_colour_display_update;
	let canvas_fb;
	let canvas_read_tex;
	let temp_undo_fb;
	let drawer;
	let ubo;

	const set_shared_uniforms = () => {
		ubo.buff.sz = 0;
		ubo.buff.cpu_buff[0] = canvas_fb._textures[0].res[0];
		ubo.buff.cpu_buff[1] = canvas_fb._textures[0].res[1];
		ubo.buff.cpu_buff[2] = default_framebuffer.textures[0].res[0];
		ubo.buff.cpu_buff[3] = default_framebuffer.textures[0].res[1];
		ubo.buff.cpu_buff[4] = isOnMobile ? 1 : 0;
		ubo.buff.upload();
	};

	const pick_from_canvas = () => {
		let coord = Utils.texture_NDC_to_texture_pixel_coords(Utils.screen_NDC_to_canvas_NDC([...io.mouse_pos], default_framebuffer.textures[0], canvas_read_tex, zoom[0], panning), canvas_read_tex);
		let c = canvas_read_tex.read_back_pixel(coord);
		picked_col = [...c];
		picked_col[0] = c[0] / 255;
		picked_col[1] = c[1] / 255;
		picked_col[2] = c[2] / 255;
		picked_col[0] = pow(picked_col[0], 0.45454545454545);
		picked_col[1] = pow(picked_col[1], 0.45454545454545);
		picked_col[2] = pow(picked_col[2], 0.45454545454545);
		picked_col.pop();
		return c;
	};

	const openModal = modal => {
		for (let m of modals) {
			if (m === modal) {
				if (m.hidden) {
					m.hidden = false;
					m.knob.modalHidden = false;
				} else {
					m.hidden = true;
					m.knob.modalHidden = true;
				}
			} else {
				m.hidden = true;
				m.knob.modalHidden = true;
			}
		}
	};

	const init_web_gl = () => {
		window.isOnMobile = Utils.isOnMobile();

		window.gl = gl = canvasElement.getContext('webgl2', {
			preserveDrawingBuffer: true,
			alpha: false,
			premultipliedAlpha: false,
			antialias: true
		});

		gl.getExtension('OES_texture_float');
		gl.getExtension('OES_texture_float_linear');
		gl.getExtension('EXT_color_buffer_float');
		gl.debugEnabled = "production" === 'development';
		gl.debugEnabled = false;
		init_gl_error_handling();
		userAgentRes = [canvasElement.clientWidth, canvasElement.clientWidth];
		default_framebuffer = Object.create(Framebuffer.prototype);
		default_framebuffer.default = true;
		default_framebuffer.pongable = false;
		default_framebuffer.needs_pong = false;
		default_framebuffer.pong_idx = 0;
		default_framebuffer._fb = null;
		default_framebuffer._textures = [Object.create(Texture.prototype)];
		default_framebuffer.textures[0].res = [...userAgentRes];
		default_framebuffer.bind();

		canvas_fb = new Framebuffer([
				new Texture([project.canvasRes[0], project.canvasRes[1]], gl.RGBA16F, !isOnMobile)
			],
		true);

		temp_undo_fb = new Framebuffer([
				new Texture([project.canvasRes[0], project.canvasRes[1]], gl.RGBA16F, false)
			],
		false);

		ubo = new UBO();
		window.ubo = ubo;

		resizeIfNeeded(
			canvasElement,
			default_framebuffer,
			userAgentRes,
			e => {
				
			},
			() => {
				set_shared_uniforms();
			}
		);

		set_shared_uniforms();
		gl.disable(gl.CULL_FACE);
		gl.disable(gl.DEPTH_TEST);
		gl.enable(gl.BLEND);
		gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
	};

	const init_other_stuff = async () => {
		io = new IO();
		document.addEventListener('contextmenu', event => event.preventDefault());
		window.history.pushState(null, null, window.location.href);

		window.addEventListener('popstate', () => {
			window.history.pushState(null, null, window.location.href);
		});

		brush_textures.push(await BrushTexture.create((__webpack_require__(737)/* ["default"] */ .Z), 0));
		brush_textures.push(await BrushTexture.create((__webpack_require__(616)/* ["default"] */ .Z), 1));
		brush_textures.push(await BrushTexture.create((__webpack_require__(130)/* ["default"] */ .Z), 2));
		brush_textures.push(await BrushTexture.create((__webpack_require__(229)/* ["default"] */ .Z), 3));
		brush_textures.push(await BrushTexture.create((__webpack_require__(949)/* ["default"] */ .Z), 4));
		brush_textures.push(await BrushTexture.create((__webpack_require__(157)/* ["default"] */ .Z), 5));
		brush_textures.push(await BrushTexture.create((__webpack_require__(928)/* ["default"] */ .Z), 6));
		$$invalidate(14, brush_textures = [...brush_textures]);

		for (let brush of brush_presets) {
			brush.selected_brush_texture = brush_textures[0];
		}

		modals = [chaosSemiModal, dynamicsSemiModal, texDynamicsSemiModal];
	};

	onMount(async () => {
		init_web_gl();
		await init_other_stuff();
		default_framebuffer.bind();
		default_framebuffer.clear([0, 0, 0, 1]);
		canvas_fb.clear([0, 0, 0, 0]);
		canvas_fb.pong();
		canvas_fb.back_textures[0].bind_to_unit(1);
		canvas_fb.clear([0, 0, 0, 0]);

		const temp_stroke_fb = new Framebuffer([
				new Texture([project.canvasRes[0], project.canvasRes[1]], gl.RGBA16F, !isOnMobile)
			]);

		temp_stroke_fb.clear([0, 0, 0, 0]);

		const init_texture_uniforms = program => {
			program.setUniformTexture('temp_tex', temp_stroke_fb.textures[0], 0);
			program.setUniformTexture('canvas_back', canvas_fb.back_textures[0], 1);
			program.setUniformTexture('canvas_b', canvas_fb._textures[0], 2);
			program.setUniformTexture('canvas_a', canvas_fb._back_textures[0], 3);
			const brush_tex_start_idx = 5;

			brush_textures.forEach((brush_tex, i) => {
				const name = `brush_texture[${i}]`;
				console.log(name);
				const brush_textures_loc = gl.getUniformLocation(program.program, name);
				brush_tex.gpu_tex.bind_to_unit(brush_tex_start_idx + i);
				gl.uniform1i(brush_textures_loc, brush_tex_start_idx + i);
			});

			gl.activeTexture(gl.TEXTURE0);
		};

		const brush_preview_program = new ShaderProgram(__webpack_require__(218), __webpack_require__(175));
		const picker_program = new ShaderProgram(__webpack_require__(451), __webpack_require__(754));
		const composite_stroke_to_canvas_program = new ShaderProgram(__webpack_require__(275), __webpack_require__(7));
		const composite_stroke_to_canvas_b_program = new ShaderProgram(__webpack_require__(275), __webpack_require__(493));
		const post_canvas_program = new ShaderProgram(__webpack_require__(929), __webpack_require__(38));
		post_canvas_program.zoom_loc = gl.getUniformLocation(post_canvas_program.program, "zoom");
		post_canvas_program.panning_loc = gl.getUniformLocation(post_canvas_program.program, "panning");
		post_canvas_program.blending_colour_space_loc = gl.getUniformLocation(post_canvas_program.program, "blending_colour_space");
		const brush_long_program = new ShaderProgram(__webpack_require__(580), __webpack_require__(385));
		brush_preview_program.use();
		init_texture_uniforms(brush_preview_program);
		picker_program.use();
		init_texture_uniforms(picker_program);
		composite_stroke_to_canvas_program.use();
		init_texture_uniforms(composite_stroke_to_canvas_program);
		composite_stroke_to_canvas_b_program.use();
		init_texture_uniforms(composite_stroke_to_canvas_b_program);
		composite_stroke_to_canvas_program.blending_colour_space_loc = gl.getUniformLocation(composite_stroke_to_canvas_program.program, "blending_colour_space");
		composite_stroke_to_canvas_b_program.blending_colour_space_loc = gl.getUniformLocation(composite_stroke_to_canvas_b_program.program, "blending_colour_space");
		post_canvas_program.use();
		init_texture_uniforms(post_canvas_program);
		brush_long_program.use();
		init_texture_uniforms(brush_long_program);
		brush_long_program.brush_texture_idx_loc = gl.getUniformLocation(brush_long_program.program, "brush_texture_idx");
		brush_long_program.tex_hsv_dynamics_loc = gl.getUniformLocation(brush_long_program.program, "tex_hsv_dynamics");
		brush_long_program.tex_stretch_loc = gl.getUniformLocation(brush_long_program.program, "tex_stretch");
		let frame = 0;
		$$invalidate(26, canvas_read_tex = canvas_fb.textures[0]);
		let brush_buffer = new Thing([new VertexBuffer(4, gl.FLOAT), new VertexBuffer(4, gl.FLOAT)], gl.TRIANGLES, brush_long_program);
		gl.bindVertexArray(brush_buffer.vao);
		let t = 0;
		let delta_t = 0;
		let redraw_needed = false;
		let redrawing = false;
		let redo_history_length = 0;
		let brush_stroke = new BrushStroke(curr_brush.selected_brush_type, new DrawParams(curr_brush.tex_dynamics, curr_brush.tex_lch_dynamics, curr_brush.tex_stretch, BlendingColourSpace.Pigments), curr_brush.selected_brush_texture);
		drawer = new Drawer(gl, canvas_fb.textures[0], default_framebuffer);

		const composite_stroke = () => {
			canvas_fb.bind();
			canvas_fb.clear();

			const comp_program = canvas_fb.pong_idx === 0
			? composite_stroke_to_canvas_program
			: composite_stroke_to_canvas_b_program;

			if (canvas_fb.pong_idx === 0) {
				
			}

			comp_program.use();
			gl.uniform1i(comp_program.blending_colour_space_loc, blending_colour_space);
			canvas_fb.back_textures[0].bind_to_unit(1);
			gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
			temp_stroke_fb.clear();
		};

		const draw_n_strokes = (start_idx, end_idx, full_redraw = false) => {
			let k = 0;
			drawer.brush_buffer = brush_buffer;
			drawer.reset();
			start_idx = start_idx ?? 0;
			end_idx = end_idx ?? project.brush_strokes.length;

			for (k = start_idx; k < end_idx; k++) {
				drawer.push_any_stroke(project.brush_strokes[k]);
			}

			drawer.brush_buffer.upload_all_buffs();
			const brush_shader = drawer.brush_buffer.shader;
			brush_shader.use();
			let prev_colour_space = -1;
			let prev_colour_space_b = -1;
			let prev_brush_tex_idx = -1;
			let prev_hsv_dynamics = [0, 0, 0];
			let prev_tex_stretch = [0, 0];
			gl.useProgram(composite_stroke_to_canvas_program.program);
			canvas_fb._textures[0].bind_to_unit(2);
			canvas_fb._back_textures[0].bind_to_unit(3);
			gl.activeTexture(gl.TEXTURE15);
			let comp_program = composite_stroke_to_canvas_program;
			gl.clearColor(0, 0, 0, 0);
			gl.viewport(0, 0, project.canvasRes[0], project.canvasRes[1]);
			k = start_idx;
			let j = 0;

			for (let amogus of drawer.recorded_drawcalls) {
				const new_tex_stretch = project.brush_strokes[k].draw_params.tex_stretch;
				const new_hsv_dynamics = project.brush_strokes[k].draw_params.tex_lch_dynamics;
				const new_brush_tex_idx = project.brush_strokes[k].brush_texture.idx;
				const new_col_space = project.brush_strokes[k].draw_params.blending_colour_space;
				gl.bindFramebuffer(gl.FRAMEBUFFER, temp_stroke_fb.fb);
				gl.clear(gl.COLOR_BUFFER_BIT);
				brush_shader.use();

				if (new_brush_tex_idx !== prev_brush_tex_idx) {
					gl.uniform1i(brush_shader.brush_texture_idx_loc, prev_brush_tex_idx = new_brush_tex_idx);
				}

				if (prev_hsv_dynamics[0] !== new_hsv_dynamics[0] || prev_hsv_dynamics[1] !== new_hsv_dynamics[1] || prev_hsv_dynamics[2] !== new_hsv_dynamics[2]) {
					gl.uniform3fv(brush_shader.tex_hsv_dynamics_loc, project.brush_strokes[k].draw_params.tex_lch_dynamics);
				}

				if (prev_tex_stretch[0] !== new_tex_stretch[0] || prev_tex_stretch[1] !== new_tex_stretch[1]) {
					gl.uniform2fv(brush_shader.tex_stretch_loc, project.brush_strokes[k].draw_params.tex_stretch);
				}

				drawer.draw_stroke_idx(j);
				gl.bindFramebuffer(gl.FRAMEBUFFER, canvas_fb.fb);

				comp_program = canvas_fb.pong_idx === 0
				? composite_stroke_to_canvas_program
				: composite_stroke_to_canvas_b_program;

				comp_program.use();

				if (canvas_fb.pong_idx === 0) {
					if (new_col_space !== prev_colour_space) {
						gl.uniform1i(comp_program.blending_colour_space_loc, prev_colour_space = new_col_space);
					}
				} else {
					if (new_col_space !== prev_colour_space_b) {
						gl.uniform1i(comp_program.blending_colour_space_loc, prev_colour_space_b = new_col_space);
					}
				}

				gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
				canvas_fb.pong();

				if (full_redraw && j === end_idx - end_idx % undo_cache_steps - 1) {
					copy_fb_to_fb(canvas_fb.fb_back, temp_undo_fb.fb, canvas_fb._textures[0].res);
				}

				prev_hsv_dynamics[0] = new_hsv_dynamics[0];
				prev_hsv_dynamics[1] = new_hsv_dynamics[1];
				prev_hsv_dynamics[2] = new_hsv_dynamics[2];
				prev_tex_stretch[0] = new_tex_stretch[0];
				prev_tex_stretch[1] = new_tex_stretch[1];
				k++;
				j++;
			}

			redraw_needed = true;
			temp_stroke_fb.clear();
		};

		const redraw_whole_project = () => {
			console.log('REDRAW EVERYTHING');
			console.time("REDRAW ALL");
			canvas_fb.clear();
			canvas_fb.pong();
			canvas_fb.back_textures[0].bind_to_unit(1);
			canvas_fb.clear();
			temp_stroke_fb.clear();
			draw_n_strokes(0, project.brush_strokes.length - redo_history_length, true);
			console.timeEnd("REDRAW ALL");
		};

		$$invalidate(23, resize_project = new_sz => {
			$$invalidate(20, project.canvasRes = [...new_sz], project);
			temp_stroke_fb.textures[0].resize(new_sz);
			canvas_fb.back_textures[0].resize(new_sz);
			canvas_fb.textures[0].resize(new_sz);
			canvas_fb.recreate();
			canvas_fb.back_textures[0].bind_to_unit(1);
			temp_stroke_fb.recreate();
			temp_stroke_fb.textures[0].bind_to_unit(0);
			temp_undo_fb.textures[0].resize(new_sz);
			temp_undo_fb.recreate();
			set_shared_uniforms();
			full_redraw_needed = true;
			$$invalidate(22, project_has_been_modified = false);
			redo_history_length = 0;
		});

		let load_project = new_project => {
			$$invalidate(20, project = new Project());
			$$invalidate(22, project_has_been_modified = false);
			redo_history_length = 0;

			for (let key of Object.keys(new_project)) {
				$$invalidate(20, project[key] = new_project[key], project);
			}

			$$invalidate(20, project.canvasRes = [...new_project.canvasRes], project);
			resize_project(project.canvasRes);
			redraw_whole_project();
		};

		let local_storage_proj = localStorage.getItem('project');

		if (local_storage_proj) {
			local_storage_proj = JSON.parse(local_storage_proj);
			load_project(local_storage_proj);
		} else {
			load_project(new Project());
		}

		const handle_input_actions = () => {
			if (io.getKey('AltLeft').down) {
				if (io.getKey('AltLeft').just_pressed) {
					$$invalidate(18, picking = true);
				}

				pick_from_canvas();
			} else if (io.getKey('AltLeft').just_unpressed) {
				$$invalidate(19, just_finished_pick = true);
				$$invalidate(18, picking = false);
			}

			redraw_needed = true;

			if (io.just_finished_pinch) {
				zoom[0] = desired_zoom = pow(2, log2(desired_zoom) + io.pinch_zoom);
			}

			if (io.two_finger_pinch) {
				redraw_needed = true;
				zoom[0] = pow(2, log2(desired_zoom) + io.pinch_zoom);

				if (io.just_started_pinch) {
					panning_temp_pinch[0] = panning[0];
					panning_temp_pinch[1] = panning[1];
				}

				panning[0] = panning_temp_pinch[0] + io.pinch_pos[0];
				panning[1] = panning_temp_pinch[1] - io.pinch_pos[1];
			} else if (abs(desired_zoom - zoom[0]) > 0.00000001) {
				redraw_needed = true;
				zoom[0] = mix(zoom[0], desired_zoom, delta_t * 20);
			}

			if (frame === 0 || picking || just_finished_pick || io.mouse_wheel || io.mmb_down) {
				redraw_needed = true;

				if (just_finished_pick) {
					let coords = Utils.screen_NDC_to_canvas_NDC([...io.mouse_pos], default_framebuffer.textures[0], canvas_fb._textures[0], zoom[0], panning);

					if (coords[0] > 0 && coords[0] < 1 && coords[1] > 0 && coords[1] < 1) {
						$$invalidate(9, stroke_col[0] = picked_col[0], stroke_col);
						$$invalidate(9, stroke_col[1] = picked_col[1], stroke_col);
						$$invalidate(9, stroke_col[2] = picked_col[2], stroke_col);
						Utils.gamma_correct(stroke_col, true, true);
						$$invalidate(9, stroke_col[3] = 1, stroke_col);
						$$invalidate(19, just_finished_pick = false);
						trigger_colour_display_update(stroke_col[0], stroke_col[1], stroke_col[2]);
					}
				}

				if (io.mmb_down) {
					panning[0] += io.delta_mouse_pos[0] / zoom[0];
					panning[1] += io.delta_mouse_pos[1] / zoom[0];
				}

				if (io.mouse_wheel) {
					if (io.mouse_wheel > 0) {
						desired_zoom *= 1.2;
					} else {
						desired_zoom /= 1.2;
					}
				}
			}

			let l_ctrl_down = io.getKey('ControlLeft').down;
			let l_shift_down = io.getKey('ShiftLeft').down;
			let z_just_pressed = io.getKey('KeyZ').just_pressed;
			const idx_before = project.brush_strokes.length - redo_history_length;

			if (redo_pending || l_shift_down && l_ctrl_down && z_just_pressed) {
				redo_history_length -= 1;
				const idx_now = idx_before + 1;

				if (redo_history_length >= 0) {
					if (idx_now % undo_cache_steps === 0) {
						temp_stroke_fb.clear();
						draw_n_strokes(idx_before, idx_before + 1);
						copy_fb_to_fb(canvas_fb.fb_back, temp_undo_fb.fb, canvas_fb.textures[0].res);
					} else {
						temp_stroke_fb.clear();
						draw_n_strokes(idx_before, idx_before + 1);
					}
				} else {
					redo_history_length = 0;
				}
			} else if (undo_pending || l_ctrl_down && z_just_pressed) {
				redo_history_length += 1;
				const idx_now = idx_before - 1;

				if (redo_history_length <= project.brush_strokes.length) {
					if (idx_before % undo_cache_steps === 0) {
						canvas_fb.clear();
						canvas_fb.pong();
						canvas_fb.back_textures[0].bind_to_unit(1);
						canvas_fb.clear();
						temp_stroke_fb.clear();
						draw_n_strokes(0, idx_before - undo_cache_steps);
						copy_fb_to_fb(canvas_fb.fb_back, temp_undo_fb.fb, canvas_fb.textures[0].res);
						temp_stroke_fb.clear();
						draw_n_strokes(idx_before - undo_cache_steps, project.brush_strokes.length - redo_history_length);
					} else {
						copy_fb_to_fb(temp_undo_fb.fb, canvas_fb.fb_back, canvas_fb.textures[0].res);
						canvas_fb.back_textures[0].bind_to_unit(1);
						temp_stroke_fb.clear();
						const undo_mod_offs = idx_now % undo_cache_steps;
						draw_n_strokes(idx_now - undo_mod_offs, project.brush_strokes.length - redo_history_length);
					}

					gl.activeTexture(gl.TEXTURE15);
				} else {
					redo_history_length -= 1;
				}
			}
		};

		const record_stroke = () => {
			if (io.mouse_just_pressed && !(redo_pending || undo_pending)) {
				brush_stroke = new BrushStroke(curr_brush.selected_brush_type, new DrawParams(curr_brush.tex_dynamics, curr_brush.tex_lch_dynamics, curr_brush.tex_stretch, blending_colour_space), curr_brush.selected_brush_texture);

				for (let i = 0; i < redo_history_length; i++) {
					project.brush_strokes.pop();
				}

				redo_history_length = 0;
			}

			brush_rot = [...io.tilt];

			for (let i = 0; i < io.mouse_positions_during_last_frame_cnt; i++) {
				brush_pos_ndc_screen = [
					io.mouse_positions_during_last_frame[i * 2],
					io.mouse_positions_during_last_frame[i * 2 + 1]
				];

				brush_pos_ndc_canvas = Utils.screen_NDC_to_canvas_NDC(brush_pos_ndc_screen, default_framebuffer.textures[0], canvas_read_tex, zoom[0], panning);
				brush_pos_ndc_canvas[0] += curr_brush.pos_jitter * (2 * hash.valueNoiseSmooth(t * 100 + 251, 2) - 1);
				brush_pos_ndc_canvas[1] += curr_brush.pos_jitter * (2 * hash.valueNoiseSmooth(t * 100 + 1251, 2) - 1);
				let col = [...stroke_col];

				{
					const chroma_gl = col => {
						return chroma_default().gl(col[0], col[1], col[2]);
					};

					const chroma_oklch = col => {
						return chroma_default().oklch(col[0], col[1], col[2]);
					};

					col = chroma_gl(col).oklch();
					const c = col[1];
					let hue_jitt_amt = (1 - pow(c, 0.2) * 1.2) * 4;
					hue_jitt_amt = max(hue_jitt_amt, 0);
					hue_jitt_amt += pow(smoothstep(0., 1., 1 - c), 57.) * 2.2;
					col[0] += (-0.5 + hash.valueNoiseSmooth(t * 100 * curr_brush.chaos_speed, 2)) * curr_brush.chaos * curr_brush.chaos_lch[0];
					col[1] += (-0.5 + hash.valueNoiseSmooth(t * 100 * curr_brush.chaos_speed + 100, 2)) * curr_brush.chaos * curr_brush.chaos_lch[1];
					col[2] += hue_jitt_amt * (-0.5 + hash.valueNoiseSmooth(t * 100 * curr_brush.chaos_speed + 200, 2)) * 300 * curr_brush.chaos * curr_brush.chaos_lch[2];
					col[0] = clamp(col[0], 0, 1);
					col[1] = clamp(col[1], 0, 1);
					col[2] = _0b5vr_experimental_esm_mod(col[2], 360);
					col = chroma_oklch(col).gl();
				}

				{
					stroke_opacity = lerp(curr_brush.stroke_opacity_dynamics[0], curr_brush.stroke_opacity_dynamics[1], io.pressure);
				}

				brush_rot[1] += 10 * curr_brush.rot_jitter * (2 * hash.valueNoiseSmooth(t * 10 + 100, 2) - 1);
				let sz = [...brush_sz];
				let size_pressure_weight = lerp(curr_brush.stroke_size_dynamics[0], curr_brush.stroke_size_dynamics[1], io.pressure);
				let size_tilt_weight = lerp(0.4, 1, io.tilt[0] / tau);
				sz[0] *= size_pressure_weight * size_tilt_weight;
				sz[1] *= size_pressure_weight * size_tilt_weight;
				brush_stroke.push_stroke(brush_pos_ndc_canvas, brush_rot, sz, stroke_opacity, col);
			}
		};

		const draw = _t => {
			redraw_needed = false;
			const new_t = _t / 1000;
			delta_t = new_t - t;
			t = new_t;

			resizeIfNeeded(
				canvasElement,
				default_framebuffer,
				userAgentRes,
				v => {
					redraw_needed = v;
				},
				() => {
					set_shared_uniforms();
				}
			);

			io.tick();

			if (new_project_pending) {
				load_project(new Project());
				$$invalidate(15, new_project_pending = false);
			}

			if (project_pending_load) {
				load_project(project_pending_load);
				$$invalidate(21, project_pending_load = undefined);
			}

			if (full_redraw_needed) {
				redraw_whole_project();
			}

			handle_input_actions();

			if ((io.mouse_just_pressed || io.mouse_down && io.mouse_just_moved) && io.pointerType !== 'touch') {
				$$invalidate(22, project_has_been_modified = true);
				redraw_needed = true;
				record_stroke();
				temp_stroke_fb.clear();
				temp_stroke_fb.bind();
				drawer.brush_buffer = brush_buffer;
				drawer.reset();
				drawer.push_any_stroke(brush_stroke);
				drawer.brush_buffer.upload_all_buffs();
				const brush_shader = drawer.brush_buffer.shader;
				brush_shader.use();
				gl.uniform1i(brush_shader.brush_texture_idx_loc, curr_brush.selected_brush_texture.idx);
				gl.uniform3fv(brush_shader.tex_hsv_dynamics_loc, curr_brush.tex_lch_dynamics);
				gl.uniform2fv(brush_shader.tex_stretch_loc, curr_brush.tex_stretch);
				drawer.draw_stroke_idx(0);
			}

			if (io.mouse_just_unpressed && io.pointerType !== 'touch' && !(undo_pending || redo_pending)) {
				if (frame % 15 === 0 || !isOnMobile) {
					localStorage.setItem('project', JSON.stringify(project));
				}

				project.push_stroke(brush_stroke);
				redraw_needed = true;
				composite_stroke();
				canvas_fb.pong();
				canvas_fb.back_textures[0].bind_to_unit(1);

				if (project.brush_strokes.length % undo_cache_steps === 0) {
					copy_fb_to_fb(canvas_fb.fb_back, temp_undo_fb.fb, canvas_fb.textures[0].res);
				}
			}

			if (brushSizeWidgetDragging || brushSizeWidgetStoppedDragging) redraw_needed = true;

			if (redraw_needed) {
				if (canvas_fb._textures[0].mipmapped) {
					gl.bindTexture(gl.TEXTURE_2D, canvas_fb._textures[0].tex);
					gl.generateMipmap(gl.TEXTURE_2D);
					gl.bindTexture(gl.TEXTURE_2D, canvas_fb._back_textures[0].tex);
					gl.generateMipmap(gl.TEXTURE_2D);
					gl.bindTexture(gl.TEXTURE_2D, null);
				}

				if (temp_stroke_fb.textures[0].mipmapped) {
					gl.bindTexture(gl.TEXTURE_2D, temp_stroke_fb.textures[0].tex);
					gl.generateMipmap(gl.TEXTURE_2D);
					gl.bindTexture(gl.TEXTURE_2D, null);
				}

				default_framebuffer.clear([0, 0, 0, 1]);
				default_framebuffer.bind();
				post_canvas_program.use();
				gl.uniform1f(post_canvas_program.zoom_loc, zoom);
				gl.uniform2fv(post_canvas_program.panning_loc, panning);
				gl.uniform1i(post_canvas_program.blending_colour_space_loc, blending_colour_space);
				canvas_fb.back_textures[0].bind_to_unit(1);
				gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

				if (brushSizeWidgetDragging) {
					brush_preview_program.use();
					brush_preview_program.setUniformFloat("zoom", zoom[0]);
					brush_preview_program.setUniformVec("brush_sz", brush_sz);
					gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
				}

				if (picking) {
					picker_program.use();
					picker_program.setUniformVec('picked_col', picked_col);
					picker_program.setUniformVec('picker_pos', [...io.mouse_pos]);
					gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
				}
			}

			print_on_gl_error();
			$$invalidate(5, brushSizeWidgetStoppedDragging = false);
			$$invalidate(17, redo_pending = false);
			$$invalidate(16, undo_pending = false);
			full_redraw_needed = false;
			io.tick_end();
			frame++;

			for (let framebuffer of Framebuffer.framebuffers) {
				if (framebuffer.needs_pong) {
					framebuffer.pong();
				}
			}

			requestAnimationFrame(draw);
		};

		(() => {
			draw(0);
		})();
	});

	onDestroy(() => {
		
	});

	const writable_props = [];

	App_svelte_Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') App_svelte_console_1.warn(`<App> was created with unknown prop '${key}'`);
	});

	function knob0_value_binding(value) {
		if ($$self.$$.not_equal(stroke_col[0], value)) {
			stroke_col[0] = value;
			$$invalidate(9, stroke_col);
		}
	}

	function knob1_value_binding(value) {
		if ($$self.$$.not_equal(stroke_col[1], value)) {
			stroke_col[1] = value;
			$$invalidate(9, stroke_col);
		}
	}

	function knob2_value_binding(value) {
		if ($$self.$$.not_equal(stroke_col[2], value)) {
			stroke_col[2] = value;
			$$invalidate(9, stroke_col);
		}
	}

	function colourdisplay_colour_binding(value) {
		stroke_col = value;
		$$invalidate(9, stroke_col);
	}

	function colourdisplay_update_display_binding(value) {
		trigger_colour_display_update = value;
		$$invalidate(25, trigger_colour_display_update);
	}

	function knob3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			chaosKnob = $$value;
			$$invalidate(6, chaosKnob);
		});
	}

	function knob3_value_binding(value) {
		if ($$self.$$.not_equal(curr_brush.chaos, value)) {
			curr_brush.chaos = value;
			$$invalidate(12, curr_brush);
		}
	}

	function brushsizewidget_brush_sz_binding(value) {
		brush_sz = value;
		$$invalidate(10, brush_sz);
	}

	function brushsizewidget_dragging_binding(value) {
		brushSizeWidgetDragging = value;
		$$invalidate(4, brushSizeWidgetDragging);
	}

	function brushsizewidget_stopped_dragging_binding(value) {
		brushSizeWidgetStoppedDragging = value;
		$$invalidate(5, brushSizeWidgetStoppedDragging);
	}

	function knob4_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			dynamicsKnob = $$value;
			$$invalidate(7, dynamicsKnob);
		});
	}

	function knob4_value_binding(value) {
		if ($$self.$$.not_equal(curr_brush.dynamics, value)) {
			curr_brush.dynamics = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			texDynamicsKnob = $$value;
			$$invalidate(8, texDynamicsKnob);
		});
	}

	function knob5_value_binding(value) {
		if ($$self.$$.not_equal(curr_brush.tex_dynamics, value)) {
			curr_brush.tex_dynamics = value;
			$$invalidate(12, curr_brush);
		}
	}

	function brushtypewidget_curr_brush_binding(value) {
		curr_brush = value;
		$$invalidate(12, curr_brush);
	}

	function brushpresetwidget_brush_presets_binding(value) {
		brush_presets = value;
		$$invalidate(11, brush_presets);
	}

	function brushpresetwidget_selected_brush_preset_binding(value) {
		curr_brush = value;
		$$invalidate(12, curr_brush);
	}

	const func = () => {
		$$invalidate(16, undo_pending = true);
		floating_modal_message.set("undo");
	};

	const func_1 = () => {
		$$invalidate(17, redo_pending = true);
	};

	const func_2 = async () => {
		let [img, blob] = await canvas_read_tex.read_back_image(true);
		return [img, blob];
	};

	const func_3 = () => {
		$$invalidate(15, new_project_pending = true);
	};

	const func_4 = project => {
		$$invalidate(21, project_pending_load = project);
	};

	function gallerywidget_current_project_binding(value) {
		project = value;
		$$invalidate(20, project);
	}

	function gallerywidget_resize_project_binding(value) {
		resize_project = value;
		$$invalidate(23, resize_project);
	}

	function gallerywidget_project_has_been_modified_binding(value) {
		project_has_been_modified = value;
		$$invalidate(22, project_has_been_modified);
	}

	function gallerywidget_is_safe_to_switch_to_new_project_binding(value) {
		is_safe_to_switch_to_new_project = value;
		$$invalidate(24, is_safe_to_switch_to_new_project);
	}

	const func_5 = () => pick_from_canvas();

	function pickcolourwidget_picking_binding(value) {
		picking = value;
		$$invalidate(18, picking);
	}

	function pickcolourwidget_just_finished_pick_binding(value) {
		just_finished_pick = value;
		$$invalidate(19, just_finished_pick);
	}

	function blendingcolourspacewidget_selected_colour_space_binding(value) {
		blending_colour_space = value;
		$$invalidate(13, blending_colour_space);
	}

	function knob0_value_binding_1(value) {
		if ($$self.$$.not_equal(curr_brush.chaos_lch[0], value)) {
			curr_brush.chaos_lch[0] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob1_value_binding_1(value) {
		if ($$self.$$.not_equal(curr_brush.chaos_lch[1], value)) {
			curr_brush.chaos_lch[1] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob2_value_binding_1(value) {
		if ($$self.$$.not_equal(curr_brush.chaos_lch[2], value)) {
			curr_brush.chaos_lch[2] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob3_value_binding_1(value) {
		if ($$self.$$.not_equal(curr_brush.chaos_speed, value)) {
			curr_brush.chaos_speed = value;
			$$invalidate(12, curr_brush);
		}
	}

	function semimodal0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			chaosSemiModal = $$value;
			$$invalidate(1, chaosSemiModal);
		});
	}

	function knob0_value_binding_2(value) {
		if ($$self.$$.not_equal(curr_brush.stroke_opacity_dynamics[0], value)) {
			curr_brush.stroke_opacity_dynamics[0] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob1_value_binding_2(value) {
		if ($$self.$$.not_equal(curr_brush.stroke_opacity_dynamics[1], value)) {
			curr_brush.stroke_opacity_dynamics[1] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob2_value_binding_2(value) {
		if ($$self.$$.not_equal(curr_brush.stroke_size_dynamics[0], value)) {
			curr_brush.stroke_size_dynamics[0] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob3_value_binding_2(value) {
		if ($$self.$$.not_equal(curr_brush.stroke_size_dynamics[1], value)) {
			curr_brush.stroke_size_dynamics[1] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob4_value_binding_1(value) {
		if ($$self.$$.not_equal(curr_brush.rot_jitter, value)) {
			curr_brush.rot_jitter = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob5_value_binding_1(value) {
		if ($$self.$$.not_equal(curr_brush.pos_jitter, value)) {
			curr_brush.pos_jitter = value;
			$$invalidate(12, curr_brush);
		}
	}

	function semimodal1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			dynamicsSemiModal = $$value;
			$$invalidate(2, dynamicsSemiModal);
		});
	}

	function knob0_value_binding_3(value) {
		if ($$self.$$.not_equal(curr_brush.tex_stretch[0], value)) {
			curr_brush.tex_stretch[0] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob1_value_binding_3(value) {
		if ($$self.$$.not_equal(curr_brush.tex_stretch[1], value)) {
			curr_brush.tex_stretch[1] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob2_value_binding_3(value) {
		if ($$self.$$.not_equal(curr_brush.tex_lch_dynamics[0], value)) {
			curr_brush.tex_lch_dynamics[0] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob3_value_binding_3(value) {
		if ($$self.$$.not_equal(curr_brush.tex_lch_dynamics[1], value)) {
			curr_brush.tex_lch_dynamics[1] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function knob4_value_binding_2(value) {
		if ($$self.$$.not_equal(curr_brush.tex_lch_dynamics[2], value)) {
			curr_brush.tex_lch_dynamics[2] = value;
			$$invalidate(12, curr_brush);
		}
	}

	function texturewidget_brush_textures_binding(value) {
		brush_textures = value;
		$$invalidate(14, brush_textures);
	}

	function texturewidget_selected_brush_texture_binding(value) {
		if ($$self.$$.not_equal(curr_brush.selected_brush_texture, value)) {
			curr_brush.selected_brush_texture = value;
			$$invalidate(12, curr_brush);
		}
	}

	function semimodal2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			texDynamicsSemiModal = $$value;
			$$invalidate(3, texDynamicsSemiModal);
		});
	}

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvasElement = $$value;
			$$invalidate(0, canvasElement);
		});
	}

	$$self.$capture_state = () => ({
		onMount: onMount,
		onDestroy: onDestroy,
		floating_modal_message: floating_modal_message,
		resizeDefaultFramebufferIfNeeded: resizeIfNeeded,
		print_on_gl_error: print_on_gl_error,
		init_gl_error_handling: init_gl_error_handling,
		copy_fb_to_texture: copy_fb_to_texture,
		copy_fb_to_fb: copy_fb_to_fb,
		Knob: Knob_svelte,
		BrushSizeWidget: BrushSizeWidget_svelte,
		BrushTypeWidget: BrushTypeWidget_svelte,
		BrushPresetWidget: BrushPresetWidget_svelte,
		UndoRedoWidget: UndoRedoWidget_svelte,
		GalleryWidget: GalleryWidget_svelte,
		FloatingModal: FloatingModal_svelte,
		PickColourWidget: PickColourWidget_svelte,
		TextureWidget: TextureWidget_svelte,
		BlendingColourSpaceWidget: BlendingColourSpaceWidget_svelte,
		ColourDisplay: ColourDisplay_svelte,
		SemiModal: SemiModal_svelte,
		IO: IO,
		chroma: (chroma_default()),
		Hash: Hash,
		abs: abs,
		cos: cos,
		floor: floor,
		pow: pow,
		sin: sin,
		tau: tau,
		tri: tri,
		mix: mix,
		max: max,
		log2: log2,
		clamp: clamp,
		lerp: lerp,
		mod: _0b5vr_experimental_esm_mod,
		smootheststep: smootheststep,
		smoothstep: smoothstep,
		BrushTexture: BrushTexture,
		Project: Project,
		Utils: Utils,
		BlendingColourSpace: BlendingColourSpace,
		BrushPreset: BrushPreset,
		BrushStroke: BrushStroke,
		BrushType: BrushType,
		DrawParams: DrawParams,
		Drawer: Drawer,
		Framebuffer: Framebuffer,
		VertexBuffer: VertexBuffer,
		UBO: UBO,
		Texture: Texture,
		ShaderProgram: ShaderProgram,
		Thing: Thing,
		undo_cache_steps,
		hash,
		io,
		gl,
		zoom,
		desired_zoom,
		panning_temp_pinch,
		panning,
		userAgentRes,
		default_framebuffer,
		canvasElement,
		chaosSemiModal,
		dynamicsSemiModal,
		texDynamicsSemiModal,
		modals,
		brushSizeWidgetDragging,
		brushSizeWidgetStoppedDragging,
		chaosKnob,
		dynamicsKnob,
		texDynamicsKnob,
		stroke_col,
		stroke_opacity,
		brush_rot,
		brush_pos_ndc_screen,
		brush_pos_ndc_canvas,
		brush_sz,
		brush_presets,
		curr_brush,
		blending_colour_space,
		brush_textures,
		new_project_pending,
		undo_pending,
		redo_pending,
		picking,
		just_finished_pick,
		picked_col,
		project,
		project_pending_load,
		project_has_been_modified,
		resize_project,
		is_safe_to_switch_to_new_project,
		full_redraw_needed,
		trigger_colour_display_update,
		canvas_fb,
		canvas_read_tex,
		temp_undo_fb,
		drawer,
		ubo,
		set_shared_uniforms,
		pick_from_canvas,
		openModal,
		init_web_gl,
		init_other_stuff
	});

	$$self.$inject_state = $$props => {
		if ('hash' in $$props) hash = $$props.hash;
		if ('io' in $$props) io = $$props.io;
		if ('gl' in $$props) gl = $$props.gl;
		if ('zoom' in $$props) zoom = $$props.zoom;
		if ('desired_zoom' in $$props) desired_zoom = $$props.desired_zoom;
		if ('panning_temp_pinch' in $$props) panning_temp_pinch = $$props.panning_temp_pinch;
		if ('panning' in $$props) panning = $$props.panning;
		if ('userAgentRes' in $$props) userAgentRes = $$props.userAgentRes;
		if ('default_framebuffer' in $$props) default_framebuffer = $$props.default_framebuffer;
		if ('canvasElement' in $$props) $$invalidate(0, canvasElement = $$props.canvasElement);
		if ('chaosSemiModal' in $$props) $$invalidate(1, chaosSemiModal = $$props.chaosSemiModal);
		if ('dynamicsSemiModal' in $$props) $$invalidate(2, dynamicsSemiModal = $$props.dynamicsSemiModal);
		if ('texDynamicsSemiModal' in $$props) $$invalidate(3, texDynamicsSemiModal = $$props.texDynamicsSemiModal);
		if ('modals' in $$props) modals = $$props.modals;
		if ('brushSizeWidgetDragging' in $$props) $$invalidate(4, brushSizeWidgetDragging = $$props.brushSizeWidgetDragging);
		if ('brushSizeWidgetStoppedDragging' in $$props) $$invalidate(5, brushSizeWidgetStoppedDragging = $$props.brushSizeWidgetStoppedDragging);
		if ('chaosKnob' in $$props) $$invalidate(6, chaosKnob = $$props.chaosKnob);
		if ('dynamicsKnob' in $$props) $$invalidate(7, dynamicsKnob = $$props.dynamicsKnob);
		if ('texDynamicsKnob' in $$props) $$invalidate(8, texDynamicsKnob = $$props.texDynamicsKnob);
		if ('stroke_col' in $$props) $$invalidate(9, stroke_col = $$props.stroke_col);
		if ('stroke_opacity' in $$props) stroke_opacity = $$props.stroke_opacity;
		if ('brush_rot' in $$props) brush_rot = $$props.brush_rot;
		if ('brush_pos_ndc_screen' in $$props) brush_pos_ndc_screen = $$props.brush_pos_ndc_screen;
		if ('brush_pos_ndc_canvas' in $$props) brush_pos_ndc_canvas = $$props.brush_pos_ndc_canvas;
		if ('brush_sz' in $$props) $$invalidate(10, brush_sz = $$props.brush_sz);
		if ('brush_presets' in $$props) $$invalidate(11, brush_presets = $$props.brush_presets);
		if ('curr_brush' in $$props) $$invalidate(12, curr_brush = $$props.curr_brush);
		if ('blending_colour_space' in $$props) $$invalidate(13, blending_colour_space = $$props.blending_colour_space);
		if ('brush_textures' in $$props) $$invalidate(14, brush_textures = $$props.brush_textures);
		if ('new_project_pending' in $$props) $$invalidate(15, new_project_pending = $$props.new_project_pending);
		if ('undo_pending' in $$props) $$invalidate(16, undo_pending = $$props.undo_pending);
		if ('redo_pending' in $$props) $$invalidate(17, redo_pending = $$props.redo_pending);
		if ('picking' in $$props) $$invalidate(18, picking = $$props.picking);
		if ('just_finished_pick' in $$props) $$invalidate(19, just_finished_pick = $$props.just_finished_pick);
		if ('picked_col' in $$props) picked_col = $$props.picked_col;
		if ('project' in $$props) $$invalidate(20, project = $$props.project);
		if ('project_pending_load' in $$props) $$invalidate(21, project_pending_load = $$props.project_pending_load);
		if ('project_has_been_modified' in $$props) $$invalidate(22, project_has_been_modified = $$props.project_has_been_modified);
		if ('resize_project' in $$props) $$invalidate(23, resize_project = $$props.resize_project);
		if ('is_safe_to_switch_to_new_project' in $$props) $$invalidate(24, is_safe_to_switch_to_new_project = $$props.is_safe_to_switch_to_new_project);
		if ('full_redraw_needed' in $$props) full_redraw_needed = $$props.full_redraw_needed;
		if ('trigger_colour_display_update' in $$props) $$invalidate(25, trigger_colour_display_update = $$props.trigger_colour_display_update);
		if ('canvas_fb' in $$props) canvas_fb = $$props.canvas_fb;
		if ('canvas_read_tex' in $$props) $$invalidate(26, canvas_read_tex = $$props.canvas_read_tex);
		if ('temp_undo_fb' in $$props) temp_undo_fb = $$props.temp_undo_fb;
		if ('drawer' in $$props) drawer = $$props.drawer;
		if ('ubo' in $$props) ubo = $$props.ubo;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		canvasElement,
		chaosSemiModal,
		dynamicsSemiModal,
		texDynamicsSemiModal,
		brushSizeWidgetDragging,
		brushSizeWidgetStoppedDragging,
		chaosKnob,
		dynamicsKnob,
		texDynamicsKnob,
		stroke_col,
		brush_sz,
		brush_presets,
		curr_brush,
		blending_colour_space,
		brush_textures,
		new_project_pending,
		undo_pending,
		redo_pending,
		picking,
		just_finished_pick,
		project,
		project_pending_load,
		project_has_been_modified,
		resize_project,
		is_safe_to_switch_to_new_project,
		trigger_colour_display_update,
		canvas_read_tex,
		pick_from_canvas,
		openModal,
		knob0_value_binding,
		knob1_value_binding,
		knob2_value_binding,
		colourdisplay_colour_binding,
		colourdisplay_update_display_binding,
		knob3_binding,
		knob3_value_binding,
		brushsizewidget_brush_sz_binding,
		brushsizewidget_dragging_binding,
		brushsizewidget_stopped_dragging_binding,
		knob4_binding,
		knob4_value_binding,
		knob5_binding,
		knob5_value_binding,
		brushtypewidget_curr_brush_binding,
		brushpresetwidget_brush_presets_binding,
		brushpresetwidget_selected_brush_preset_binding,
		func,
		func_1,
		func_2,
		func_3,
		func_4,
		gallerywidget_current_project_binding,
		gallerywidget_resize_project_binding,
		gallerywidget_project_has_been_modified_binding,
		gallerywidget_is_safe_to_switch_to_new_project_binding,
		func_5,
		pickcolourwidget_picking_binding,
		pickcolourwidget_just_finished_pick_binding,
		blendingcolourspacewidget_selected_colour_space_binding,
		knob0_value_binding_1,
		knob1_value_binding_1,
		knob2_value_binding_1,
		knob3_value_binding_1,
		semimodal0_binding,
		knob0_value_binding_2,
		knob1_value_binding_2,
		knob2_value_binding_2,
		knob3_value_binding_2,
		knob4_value_binding_1,
		knob5_value_binding_1,
		semimodal1_binding,
		knob0_value_binding_3,
		knob1_value_binding_3,
		knob2_value_binding_3,
		knob3_value_binding_3,
		knob4_value_binding_2,
		texturewidget_brush_textures_binding,
		texturewidget_selected_brush_texture_binding,
		semimodal2_binding,
		canvas_binding
	];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, App_svelte_instance, App_svelte_create_fragment, safe_not_equal, {}, App_svelte_add_css, [-1, -1, -1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: App_svelte_create_fragment.name
		});
	}
}

/* harmony default export */ const App_svelte = (App);
;// CONCATENATED MODULE: ./src/index.ts



const app = new App_svelte({
    target: document.body,
    props: {},
});
/* harmony default export */ const src = ((/* unused pure expression or super */ null && (app)));

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBOztBQUVBLDBCQUEwQixjQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakMsTUFBTTtBQUNOLDRCQUE0QixZQUFZO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEM7O0FBRTFDO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDOztBQUUxQzs7QUFFQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFD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RztBQUNuRztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQ0FBa0MsRUFBRSxhQUFhLEVBQUU7QUFDbkQsbUNBQW1DLEVBQUUsYUFBYSxFQUFFOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtB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QUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseUNBQXlDO0FBQ3pDLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvREFBb0QsaUJBQWlCO0FBQ3JFOztBQUVBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6Qyx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsMERBQTBEO0FBQzFELFVBQVU7QUFDVjtBQUNBLDBEQUEwRDtBQUMxRCxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSw2QkFBNkIsaUVBQWlFO0FBQzlGLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRCxpQkFBaUI7QUFDdEU7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUM7Ozs7Ozs7VUM5L0dEO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxpQ0FBaUMsV0FBVztXQUM1QztXQUNBOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSxHQUFHO1dBQ0g7V0FDQTtXQUNBLENBQUM7Ozs7O1dDUEQ7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7Ozs7O1dDbEJBOzs7Ozs7Ozs7Ozs7QUNBQSw0REFBZSxxQkFBdUIseUNBQXlDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0MvRSxNQUErRjtBQUMvRixNQUFxRjtBQUNyRixNQUE0RjtBQUM1RixNQUErRztBQUMvRyxNQUF3RztBQUN4RyxNQUF3RztBQUN4RyxNQUFtRztBQUNuRztBQUNBOztBQUVBOztBQUVBLDRCQUE0Qiw2QkFBbUI7QUFDL0Msd0JBQXdCLDBDQUFhOztBQUVyQyx1QkFBdUIsK0JBQWE7QUFDcEM7QUFDQSxpQkFBaUIsdUJBQU07QUFDdkIsNkJBQTZCLDhCQUFrQjs7QUFFL0MsYUFBYSxrQ0FBRyxDQUFDLG9CQUFPOzs7O0FBSTZDO0FBQ3JFLE9BQU8sbURBQWUsb0JBQU8sSUFBSSxvQkFBTyxVQUFVLG9CQUFPLG1CQUFtQixFQUFDOzs7QUMxQjNDOztBQUUzQjs7QUFFUCxXQUFXLGNBQWM7QUFDbEIsSUFBSSxlQUFHLEdBQUcsNkdBQTZEOztBQUV2RSxJQUFJLGVBQUcsR0FBRyxvR0FBb0Q7O0FBRXJFO0FBQ0EsY0FBYyxNQUFNO0FBQ2I7QUFDUCxDQUFDLGVBQUc7QUFDSjs7QUFFQSxjQUFjLE1BQU07QUFDYjtBQUNQLENBQUMsZUFBRztBQUNKOzs7QUNsQnVDOztBQUV2Qzs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUNBQXFDO0FBQ2hELGFBQWE7QUFDYjtBQUNPLFNBQVMsU0FBSTtBQUNwQixZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5QkFBeUI7QUFDaEQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzVDQSxXQUFXLG1CQUFtQjtBQUN2QjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDUHVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxjQUFjLG9CQUFvQjs7QUFFbEM7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBLFlBQVksdUJBQXVCO0FBQ25DOztBQUVBLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksU0FBUztBQUNyQixZQUFZLGlDQUFpQztBQUM3QyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0Msb0JBQW9COzs7QUM1RGlCO0FBQ0Y7QUFDckU7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLDJCQUEyQjtBQUN0QyxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLG9CQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixxQkFBcUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVTtBQUMxQztBQUNBLFNBQVMsYUFBYTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTztBQUNQLDBCQUEwQixzQkFBa0I7QUFDNUM7QUFDQSxnQkFBZ0IsV0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWE7QUFDYjtBQUNPLFNBQVMsc0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQyxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYTtBQUNiO0FBQ08sU0FBUywyQkFBdUI7QUFDdkMsdUJBQXVCLFdBQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFrQjtBQUNyQztBQUNBOztBQUVBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxrQkFBa0I7QUFDN0IsYUFBYTtBQUNiO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTyxTQUFTLG9CQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ08sU0FBUyxvQkFBZ0I7QUFDaEM7QUFDQSxFQUFFLG9CQUFnQjtBQUNsQixHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWE7QUFDYjtBQUNPLFNBQVMsVUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNaO0FBQ1AsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLDZCQUE2QjtBQUMzQyxXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7QUFDTyxTQUFTLFdBQU87QUFDdkI7QUFDQTs7QUFFQTtBQUNBLGNBQWMsNkJBQTZCO0FBQzNDLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTztBQUNQLHVDQUF1QyxJQUFJO0FBQzNDOztBQUVBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkIsV0FBVyxHQUFHO0FBQ2QsV0FBVyxLQUFLO0FBQ2hCLGFBQWE7QUFDYjtBQUNPO0FBQ1AsMkJBQTJCLDhCQUE4QixNQUFNO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsNEJBQTRCO0FBQzFDLFdBQVcsR0FBRztBQUNkLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTyxTQUFTLFFBQUk7QUFDcEI7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNaO0FBQ1AsUUFBUSxRQUFJO0FBQ1o7O0FBRUE7QUFDQSxhQUFhLE1BQU07QUFDWjtBQUNQLFFBQVEsUUFBSTtBQUNaOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxvQ0FBb0M7QUFDL0MsV0FBVywwREFBMEQ7QUFDckUsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLHFCQUFxQjtBQUMzQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEscUJBQXFCO0FBQzNCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxxQkFBcUI7QUFDM0I7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLHNCQUFzQjtBQUM1QixTQUFTLFFBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsc0JBQXNCO0FBQzVCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbUVBQW1COztBQUU1RDtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLGFBQWEsdUJBQXVCO0FBQ3BDLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSixjQUFjLEtBQUs7QUFDbkIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxhQUFhLHVCQUF1QjtBQUNwQyxhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEMsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0EsYUFBYSxNQUFNO0FBQ1o7QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFdBQVc7QUFDakI7QUFDUDtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQixlQUFlLHdDQUF3QztBQUN2RDtBQUNPO0FBQ1A7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFVBQVU7QUFDckIsZUFBZSxnQ0FBZ0Msd0NBQXdDO0FBQ3ZGO0FBQ087QUFDUDtBQUNBLFdBQVcsb0JBQW9CO0FBQy9COztBQUVBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7O0FBRUE7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNkO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLGFBQWEsT0FBTztBQUNiO0FBQ1A7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDLGVBQWUsNENBQTRDO0FBQzNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLGFBQWE7QUFDM0IsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxrQ0FBa0M7QUFDN0MsV0FBVyxnREFBZ0Q7QUFDM0QsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGtCQUFrQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFFBQVE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxRQUFRO0FBQ25CLGFBQWEsMEJBQTBCO0FBQ3ZDLFdBQVcsd0NBQXdDO0FBQ25ELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBLG1CQUFtQiw0QkFBNEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxRQUFRO0FBQ25CLGFBQWEsMEJBQTBCO0FBQ3ZDLGFBQWE7QUFDYjtBQUNPO0FBQ1Asb0RBQW9ELFdBQU87QUFDM0Q7O0FBRUE7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixXQUFXLFFBQVE7QUFDbkIsYUFBYSwwQkFBMEI7QUFDdkMsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsUUFBUSxRQUFJO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxNQUFNO0FBQ1o7QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBLGNBQWMsU0FBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsVUFBTTtBQUNQLENBQUMsVUFBTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQzs7QUFFQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFNBQVM7QUFDcEIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxNQUFNO0FBQ1o7QUFDUDtBQUNBOztBQUVBO0FBQ0EsYUFBYSxNQUFNO0FBQ1o7QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNaO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE1BQU07QUFDWjtBQUNQLGlCQUFpQiwyQkFBMkI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNaO0FBQ1AsaUJBQWlCLDJCQUEyQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSxTQUFTO0FBQ25COztBQUVBO0FBQ0EsYUFBYSxTQUFTO0FBQ2Y7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFlBQVk7QUFDdkIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixXQUFPO0FBQ3ZCO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CLFFBQVEsU0FBUyxhQUFhLGNBQWM7QUFDbkYsc0JBQXNCLFdBQVcsWUFBWSxzQkFBc0IsWUFBWTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsMEJBQTBCO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFLFVBQU07QUFDUjtBQUNBO0FBQ08sd0RBQXdELHVCQUF1QjtBQUN0RjtBQUNBLENBQUM7QUFDTSx1REFBdUQsdUJBQXVCO0FBQ3JGO0FBQ0EsQ0FBQztBQUNNLHFFQUFxRSx1QkFBdUI7QUFDbkcsR0FBRztBQUNIO0FBQ21DOztBQUVuQztBQUNBLGFBQWEsTUFBTTtBQUNaO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2QsYUFBYSwyQ0FBMkM7QUFDeEQsYUFBYTtBQUNiO0FBQ08sU0FBUyxnQkFBWSxpQkFBaUIsc0NBQXNDLElBQUk7QUFDdkYsZ0NBQWdDLDZCQUE2QjtBQUM3RDs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGFBQWE7QUFDeEIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsYUFBYTtBQUN4QixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0EsS0FBSyw2QkFBNkIsT0FBTztBQUN6QztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLFFBQVE7QUFDcEIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksMEJBQTBCO0FBQ3RDLFlBQVksMEJBQTBCO0FBQ3RDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyw0QkFBNEI7QUFDaEU7QUFDQSxhQUFhLFdBQU87QUFDcEIsZ0JBQWdCLDZCQUE2QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsTUFBTTtBQUNwQjtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQSxpQkFBaUIsVUFBTTtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDTywrQkFBK0IsdURBQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksUUFBUTtBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQyxHQUFHLG9CQUFnQjtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUEsY0FBYyxvQkFBb0I7O0FBRWxDLGNBQWMsV0FBVyx1QkFBdUI7O0FBRWhEO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOzs7QUNuc0MrRTtBQUN4Qzs7QUFFdkM7QUFDQTtBQUNBLFdBQVcsdUVBQXVFO0FBQ2xGOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxpQ0FBaUM7QUFDNUMsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxrQ0FBa0M7QUFDN0MsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNPLFNBQVMseUJBQVc7QUFDM0I7QUFDQSxtQkFBbUI7QUFDbkIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQSw0QkFBNEIsRUFBRSxjQUFjO0FBQzVDO0FBQ0EsaUNBQWlDLEVBQUUsY0FBYyxHQUFHO0FBQ3BELDBCQUEwQixXQUFXLEdBQUcsSUFBSTtBQUM1QztBQUNBLFNBQVMsb0JBQW9CO0FBQzdCO0FBQ0E7QUFDQSxzQ0FBc0MsTUFBTSxFQUFFLEtBQUs7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFVBQVU7QUFDM0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLFlBQVksTUFBTTtBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ08sU0FBUyx5QkFBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLE1BQU07QUFDYjtBQUNQO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsRUFBRTtBQUNGOzs7QUNsR3NEO0FBQ2Y7QUFDTjtBQUM2Qjs7QUFFOUQ7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLHFDQUFxQztBQUNoRCxXQUFXLG9DQUFvQztBQUMvQztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLGFBQWEsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFdBQVcscUNBQXFDO0FBQ2hELGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsV0FBVyxZQUFZLGdCQUFnQixNQUFNLGNBQWM7QUFDdkY7QUFDQTs7O0FDbkdBLGNBQWMsTUFBTTtBQUNiLFNBQVMsVUFBSTs7QUFFYjs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7QUFDTyxTQUFTLFlBQU07QUFDdEI7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhO0FBQ2I7QUFDTyxTQUFTLGdCQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixLQUFLO0FBQzFCO0FBQ0E7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUDtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVPO0FBQ1A7QUFDQTs7QUFFTyxTQUFTLGtCQUFZO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFlBQVk7QUFDdkIsYUFBYTtBQUNiO0FBQ08sU0FBUyxhQUFPO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYTtBQUNiO0FBQ08sU0FBUyxpQkFBVztBQUMzQjtBQUNBOztBQUVBLGNBQWMsU0FBUztBQUNoQjtBQUNQO0FBQ0E7O0FBRUE7O0FBRUEsY0FBYyxTQUFTO0FBQ2hCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsU0FBUztBQUNoQjtBQUNQO0FBQ0E7O0FBRUEsY0FBYyxTQUFTO0FBQ2hCO0FBQ1A7QUFDQTs7QUFFQSxjQUFjLE1BQU07QUFDYjtBQUNQO0FBQ0Esc0JBQXNCLEtBQUs7QUFDM0I7QUFDQTs7QUFFTyxTQUFTLGVBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywwQ0FBMEM7QUFDckQsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBLENBQUMsZUFBUztBQUNWO0FBQ0E7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUCw4QkFBOEIsZUFBUztBQUN2Qzs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsWUFBTTtBQUNwQzs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLFlBQVk7QUFDbkI7QUFDUDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ1g7QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDWDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ1g7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxxQ0FBcUM7QUFDNUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7O0FBRU8sTUFBTSxjQUFROztBQUVkO0FBQ1AseUJBQXlCLGlCQUFXLGtEQUFrRCxVQUFJO0FBQzFGOztBQUVBLFlBQVksaUJBQWlCO0FBQzdCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQSx1RUFBdUUsUUFBUTtBQUMvRTs7QUFFTyxNQUFNLG1DQUE2QixHQUFHLHdGQUF3Qzs7O0FDL1A3Qzs7QUFFakMsSUFBSSwyQkFBaUI7O0FBRTVCLGNBQWMsTUFBTTtBQUNiLFNBQVMsK0JBQXFCO0FBQ3JDLENBQUMsMkJBQWlCO0FBQ2xCOztBQUVPLFNBQVMsK0JBQXFCO0FBQ3JDLE1BQU0sMkJBQWlCO0FBQ3ZCLFFBQVEsMkJBQWlCO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixhQUFhO0FBQ2I7QUFDTztBQUNQLENBQUMsK0JBQXFCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRHQUE0RztBQUN2SCxhQUFhO0FBQ2I7QUFDTztBQUNQLENBQUMsK0JBQXFCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixhQUFhO0FBQ2I7QUFDTztBQUNQLENBQUMsK0JBQXFCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLGFBQWE7QUFDYjtBQUNPO0FBQ1AsQ0FBQywrQkFBcUI7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLDZCQUE2QjtBQUM3QixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkMsYUFBYTtBQUNiO0FBQ087QUFDUCxtQkFBbUIsK0JBQXFCO0FBQ3hDLHlCQUF5QixxQkFBcUIsSUFBSTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxRQUFRLHFCQUFxQixZQUFZO0FBQ2xGO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxHQUFHO0FBQ2QsYUFBYTtBQUNiO0FBQ087QUFDUCxDQUFDLCtCQUFxQjtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhO0FBQ2I7QUFDTztBQUNQLFFBQVEsK0JBQXFCO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZUFBZTtBQUM3QixhQUFhO0FBQ2I7QUFDTztBQUNQLFFBQVEsK0JBQXFCO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYTtBQUNiO0FBQ087QUFDUCxRQUFRLCtCQUFxQjtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdExxQztBQUNxQzs7QUFFbkU7QUFDQSxpQkFBaUI7QUFDakI7O0FBRVA7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUDtBQUNBO0FBQ0Esd0JBQXdCLGVBQUs7QUFDN0I7QUFDQTs7QUFFQSxjQUFjLGVBQWU7QUFDdEI7QUFDUDtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxNQUFNO0FBQ2IsU0FBUyw2QkFBbUI7QUFDbkM7QUFDQTs7QUFFQSxjQUFjLE1BQU07QUFDYjtBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTs7QUFFQSxrQkFBa0I7O0FBRWxCLGNBQWMsTUFBTTtBQUNiLFNBQVMsZUFBSztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMkJBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrQkFBcUI7QUFDekIsSUFBSSxnQkFBTTtBQUNWO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLCtCQUFxQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkJBQTZCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0JBQXFCO0FBQ3RCOztBQUVBLGNBQWMsTUFBTTtBQUNwQixTQUFTLGdCQUFNO0FBQ2Y7QUFDQTtBQUNBLEVBQUUsYUFBTztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw2QkFBbUI7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0STRFO0FBQ3JDO0FBQ047QUFDNkI7QUFDdEI7QUFDYTs7QUFFckQ7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcseUJBQXlCO0FBQ3BDLFdBQVcsaUJBQWlCO0FBQzVCLGFBQWE7QUFDYjtBQUNBO0FBQ0Esb0NBQW9DLDhCQUE4QixFQUFFLEtBQUs7QUFDekU7O0FBRUE7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNaLFNBQVMsd0JBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxNQUFNO0FBQ1osU0FBUyx3QkFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUMsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNPLFNBQVMseUJBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxZQUFZO0FBQ3ZCLGFBQWE7QUFDYjtBQUNPLFNBQVMsMEJBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLGNBQWM7QUFDekIsV0FBVyxLQUFLO0FBQ2hCLGVBQWUsZUFBZSxvQkFBb0I7QUFDbEQ7QUFDTztBQUNQO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsaUNBQWlDO0FBQzVDLFdBQVcsY0FBYztBQUN6QixXQUFXLEtBQUs7QUFDaEIsZUFBZTtBQUNmO0FBQ087QUFDUCxZQUFZLG1CQUFtQjtBQUMvQixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjs7QUFFQTtBQUNBLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLGFBQWE7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGlDQUFpQztBQUM1QyxXQUFXLGNBQWM7QUFDekIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsU0FBUztBQUNwQixlQUFlLHFCQUFxQjtBQUNwQztBQUNPO0FBQ1A7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCOztBQUVBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTs7QUFFQSxZQUFZLFNBQVM7QUFDckI7O0FBRUE7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUIsWUFBWSxRQUFRO0FBQ3BCLGNBQWM7QUFDZDtBQUNBO0FBQ0EsdUJBQXVCLGNBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksZUFBZTtBQUMzQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQSxZQUFZLGdCQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxzQ0FBc0MsYUFBYTtBQUNuRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxHQUFHO0FBQ2pCLGNBQWMsR0FBRztBQUNqQixnQkFBZ0Isb0NBQW9DO0FBQ3BELGNBQWMsZ0hBQWdIOztBQUU5SDtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxZQUFZO0FBQzFCLGNBQWMsUUFBUTtBQUN0Qjs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxhQUFhO0FBQzNCLGNBQWMsT0FBTztBQUNyQjs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxhQUFhO0FBQzNCLGNBQWMsTUFBTTtBQUNwQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLE9BQU87QUFDckI7OztBQzVjd0M7QUFDcUQ7QUFDdEQ7QUFDdUM7O0FBRTlFO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyx1Q0FBdUM7QUFDbEQsYUFBYTtBQUNiO0FBQ087QUFDUCwrQkFBK0I7QUFDL0I7QUFDQSxZQUFZLHdDQUF3QztBQUNwRCxZQUFZLFdBQVc7QUFDdkIsWUFBWSxRQUFRO0FBQ3BCLFlBQVksS0FBSztBQUNqQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsR0FBRztBQUNoQztBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQSxTQUFTLFdBQVc7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbkdpRTtBQUM1Qjs7QUFFckM7O0FBRU8sU0FBUyxzQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUDtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUDtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQTtBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQTtBQUNBOztBQUVBLGNBQWMsT0FBTztBQUNkO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUDtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsWUFBWTtBQUN2QyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0EsT0FBTyxNQUFNLEdBQUcsRUFBRSxNQUFNO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzlJQSx1Q0FBdUMsT0FBTztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ08sTUFBTSxxQ0FBa0I7O0FBRS9CLGNBQWMsb0NBQW9DOzs7QUNwQ3dCO0FBQ3ZCO0FBQ3FCO0FBQzFCO0FBQ1E7O0FBRS9DO0FBQ1AsYUFBYSxLQUFLLElBQUksS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTyxHQUFHLE9BQU87QUFDN1U7QUFDQTs7QUFFQSxjQUFjLFFBQVE7QUFDZjtBQUNQLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGNBQWMsS0FBSyxJQUFJLE1BQU07QUFDN0I7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQSxrQkFBa0I7QUFDWDtBQUNQO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYTtBQUNiO0FBQ08sU0FBUyxVQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsd0JBQXdCLFNBQVM7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0Esd0JBQXdCLFVBQU07QUFDOUI7O0FBRUEsa0JBQWtCO0FBQ1g7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxRQUFRO0FBQ2Y7QUFDUDtBQUNBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7O0FBRU87QUFDUDtBQUNBLG1EQUFtRCxJQUFJO0FBQ3ZEO0FBQ0EsT0FBTyxLQUFLLG9NQUFvTSxLQUFLO0FBQ3JOO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsUUFBUTtBQUNmO0FBQ1AsZUFBZSxRQUFRLEVBQUUsdUJBQXVCLEdBQUcsS0FBSyxHQUFHLE9BQU8sS0FBSztBQUN2RSxzQkFBc0I7QUFDdEI7QUFDQTs7QUFFQTs7QUFFQSxnQkFBZ0IsbUJBQW1CLElBQUksa0JBQWtCLEtBQUssY0FBYywwQkFBMEIsT0FBTyxXQUFXLE9BQU8sY0FBYyxhQUFhLGlCQUFpQix3RkFBd0Y7QUFDNVA7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLElBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixJQUFJLFlBQVksd0JBQXdCLElBQUk7QUFDakU7QUFDQSxvQkFBb0I7QUFDcEIsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxRQUFRO0FBQ2Y7QUFDUDtBQUNBLDBEQUEwRCxVQUFNLGNBQWM7QUFDOUUsWUFBWSxLQUFLLEVBQUUsV0FBVztBQUM5Qjs7QUFFQSxjQUFjLFFBQVE7QUFDZjtBQUNQLDZCQUE2QixRQUFRO0FBQ3JDOztBQUVBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsSUFBSSxJQUFJLDJDQUEyQztBQUN0RTtBQUNBOztBQUVBLGNBQWMsUUFBUTtBQUNmO0FBQ1A7QUFDQSw0QkFBNEIsT0FBTztBQUNuQzs7O0FDdE13QjtBQUNrRDtBQUNXO0FBUW5FO0FBQytCOztBQUVqRCxjQUFjLE1BQU07QUFDYjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLE1BQU07QUFDYjtBQUNQO0FBQ0E7O0FBRUEsY0FBYyxNQUFNO0FBQ2I7QUFDUDtBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1AsU0FBUyx5QkFBeUI7QUFDbEM7QUFDQTtBQUNBLENBQUMsNkJBQW1CO0FBQ3BCLG1EQUFtRCxHQUFHLFNBQVMsaUJBQVc7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRyxhQUFPO0FBQ1Y7QUFDQTtBQUNBLEVBQUU7QUFDRixzQkFBc0IsNkJBQW1CO0FBQ3pDOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQTtBQUNBLEVBQUUsc0JBQXNCO0FBQ3hCLEVBQUUsYUFBTztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEIsRUFBRSxlQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsTUFBTTtBQUNiO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJCQUFpQjtBQUMzQyxDQUFDLCtCQUFxQjtBQUN0QixZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxVQUFJO0FBQ2Q7QUFDQSxTQUFTLGtCQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGtCQUFZO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUMsYUFBTztBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxlQUFlO0FBQ2xCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSxpQkFBaUIsVUFBTTtBQUN2QixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUFhO0FBQ2xDO0FBQ0EsRUFBRSxhQUFhO0FBQ2YsRUFBRSxlQUFLO0FBQ1A7QUFDQSxDQUFDLCtCQUFxQjtBQUN0Qjs7QUFFTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw2Q0FBNkM7QUFDMUQ7QUFDQSxhQUFhLDRCQUE0QjtBQUN6QztBQUNBLGFBQWEseUJBQXlCO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYztBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0Isa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBLFFBQVEsTUFBTTtBQUNkLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUyxVQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIseUJBQXlCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkJBQTJCO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLEtBQUs7QUFDaEIsV0FBVyw2Q0FBNkM7QUFDeEQsV0FBVywwQkFBMEI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUNBQXFDO0FBQ2hELFdBQVcsNkNBQTZDO0FBQ3hELFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckIsV0FBVyxTQUFTO0FBQ3BCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixlQUFlO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGLGdDQUFnQyxLQUFLO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkMsY0FBYyxxQkFBcUI7QUFDbkM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLGtCQUFrQixVQUFJO0FBQ3RCOztBQUVBO0FBQ0EsZUFBZSwrQkFBK0I7QUFDOUMsWUFBWSxHQUFHO0FBQ2YsWUFBWSw2Q0FBNkM7QUFDekQsY0FBYztBQUNkO0FBQ0E7QUFDQSxPQUFPLGlCQUFXO0FBQ2xCLFVBQVUsVUFBSTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLGdCQUFnQjtBQUM1QixjQUFjO0FBQ2Q7QUFDQTtBQUNBLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxTQUFTO0FBQ3ZCLGNBQWMsOENBQThDO0FBQzVEOzs7QUN2ZUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDTztBQUNBOzs7QUNBVztBQUMrQjtBQUNLO0FBQ0o7QUFDUztBQUNiOztBQUU5QztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkLGFBQWE7QUFDYjtBQUNPO0FBQ1Asd0JBQXdCLGdCQUFZLFNBQVMsU0FBUyxPQUFPLGFBQWEsSUFBSSxlQUFlO0FBQzdGOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhO0FBQ2I7QUFDTztBQUNQLG1DQUFtQyxjQUFjO0FBQ2pELENBQUMsTUFBTTtBQUNQOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhO0FBQ2I7QUFDTztBQUNQLG1DQUFtQyxjQUFjO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhO0FBQ2I7QUFDTztBQUNQLG1DQUFtQyxzQkFBc0I7QUFDekQsQ0FBQyxNQUFNO0FBQ1A7O0FBRUEsWUFBWSxNQUFNO0FBQ2xCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYTtBQUNiO0FBQ087QUFDUCxtQ0FBbUMsc0JBQXNCO0FBQ3pEO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYTtBQUNiO0FBQ087QUFDUCxtQ0FBbUMsTUFBTTtBQUN6QyxDQUFDLFVBQU07QUFDUDs7QUFFQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsb0NBQW9DO0FBQy9DLFdBQVcsMERBQTBEO0FBQ3JFLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsaUNBQWlDO0FBQzlFLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0EsaURBQWlELGlDQUFpQztBQUNsRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTztBQUNQLENBQUMsSUFBSTtBQUNMLCtEQUErRCxpQkFBaUI7QUFDaEYsOENBQThDLHdCQUF3QjtBQUN0RTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxLQUFLO0FBQ2hCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQSx3Q0FBd0MsdUJBQXVCO0FBQy9EOztBQUVBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsUUFBUTtBQUNuQixXQUFXLEtBQUs7QUFDaEIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBLHVDQUF1Qyx1QkFBdUI7QUFDOUQ7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBLG9DQUFvQyxrQkFBa0I7QUFDdEQsd0JBQXdCLFFBQVE7QUFDaEM7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBLG9DQUFvQyxrQkFBa0I7QUFDdEQsd0JBQXdCLFFBQVE7QUFDaEM7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0EsUUFBUSxzQkFBaUI7QUFDekI7O0FBRUE7QUFDQSxhQUFhLE1BQU07QUFDWjtBQUNQO0FBQ0E7QUFDQSxvQkFBb0IsS0FBSyxpQ0FBaUMsU0FBUztBQUNuRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0IsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBLHdDQUF3QyxJQUFJO0FBQzVDO0FBQ0E7O0FBRU87QUFDUCw4QkFBOEIsS0FBSztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCLHFEQUFxRCxZQUFZO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkMsY0FBYyxxQkFBcUI7QUFDbkMsY0FBYyxxQkFBcUI7QUFDbkMsYUFBYTtBQUNiO0FBQ08saUNBQWlDLGVBQWU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBLGFBQWEsMERBQTBEO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7O0FBRUEsZUFBZSxNQUFNO0FBQ3JCOztBQUVBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQyxjQUFjLHFCQUFxQjtBQUNuQyxjQUFjLHFCQUFxQjtBQUNuQztBQUNBLGFBQWE7QUFDYjtBQUNPLG1DQUFtQyxrRUFBa0I7O0FBRTVELGNBQWMsWUFBWTtBQUNuQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM1V2dDO0FBQ0M7QUFDUjtBQUNRO0FBQ0o7QUFDSDtBQUNLO0FBQ0w7QUFDSztBQUNIO0FBQ0g7QUFDUTtBQUNOO0FBQ0k7QUFDTjs7O0FDZG1DOztBQUU1RDtBQUNBO0FBQ0EsMENBQTBDLGNBQWMsU0FBUyxjQUFjOzs7QUNTbEQ7OztBQ05DOztBQUU5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyw0Q0FBNEM7QUFDdkQsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyw0Q0FBNEM7QUFDdkQsYUFBYTtBQUNiO0FBQ08saUNBQWlDLFVBQUk7QUFDNUMsWUFBWSxvQ0FBb0M7QUFDaEQ7QUFDQSxZQUFZLHlEQUF5RDtBQUNyRTtBQUNBLGFBQWEsR0FBRztBQUNoQixjQUFjO0FBQ2Q7QUFDQTtBQUNBLE1BQU0sY0FBYztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkJBQTZCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxrQ0FBa0M7QUFDOUMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxxQ0FBcUM7QUFDakQsWUFBWSx1Q0FBdUM7QUFDbkQsY0FBYztBQUNkO0FBQ0Esc0NBQXNDLFVBQUk7QUFDMUMsYUFBYSxvREFBb0Q7QUFDakU7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFVBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsK0JBQStCO0FBQzdDO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLGdMQUFnTDtBQUMzTCxXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsK0JBQStCO0FBQzdDO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLHVEQUF1RDtBQUNsRSxXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxjQUFjLCtCQUErQjtBQUM3QztBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsVUFBVTtBQUNyQixXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0EsWUFBWSw0Q0FBNEM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUNBQW1DO0FBQzlDLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDOzs7QUN0TWtCO0FBRzdDLElBQUksc0JBQXNCLEdBQWlDLFFBQVEsQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1c5RSxzQkFDTCxPQUNBLGtCQUNRO0FBQ1IsTUFBSyxPQUFPLHFCQUFxQixZQUFhO0FBQzVDLFdBQU8sYUFBYyxPQUFPLENBQUUsWUFBZSxVQUFVO0FBQUE7QUFFekQsUUFBTSxVQUFVO0FBRWhCLE1BQUksUUFBUTtBQUNaLE1BQUksTUFBTSxNQUFNO0FBRWhCLFNBQVEsUUFBUSxLQUFNO0FBQ3BCLFVBQU0sU0FBVyxRQUFRLE9BQVM7QUFDbEMsVUFBTSxnQkFBZ0IsTUFBTztBQUU3QixVQUFNLGdCQUFnQixRQUFTO0FBRS9CLFFBQUssZUFBZ0I7QUFDbkIsY0FBUSxTQUFTO0FBQUEsV0FDWjtBQUNMLFlBQU07QUFBQTtBQUFBO0FBSVYsU0FBTztBQUFBOzs7QUNmRixrQkFDTCxNQUNBLFdBQ007QUFDTixRQUFNLG1CQUE0QixDQUFFO0FBQ3BDLFFBQU0sWUFBWSxJQUFJLElBQVk7QUFFbEMsU0FBUSxpQkFBaUIsU0FBUyxHQUFJO0FBQ3BDLFVBQU0sY0FBYyxpQkFBaUI7QUFFckMsVUFBTSxXQUFXLFVBQVc7QUFFNUIsUUFBSyxDQUFDLFVBQVc7QUFDZjtBQUFBO0FBR0YsVUFBTSxhQUFhLFNBQVMsT0FBUSxDQUFFLFNBQVUsQ0FBQyxVQUFVLElBQUs7QUFDaEUscUJBQWlCLFFBQVMsR0FBRztBQUM3QixlQUFXLElBQUssQ0FBRSxTQUFVLFVBQVUsSUFBSztBQUFBO0FBQUE7OztBQzFDeEMsb0JBQXFCLE9BQWUsS0FBYSxNQUEwQjtBQUNoRixNQUFJLFVBQVU7QUFDZCxRQUFNLE1BQWdCO0FBRXRCLE1BQUssUUFBUSxLQUFNO0FBQ2pCLFdBQU8sc0JBQVE7QUFDZixXQUFRLFVBQVUsS0FBTTtBQUN0QixVQUFJLEtBQU07QUFDVixpQkFBVztBQUFBO0FBQUEsU0FFUjtBQUNMLFdBQU8sc0JBQVE7QUFDZixXQUFRLFVBQVUsS0FBTTtBQUN0QixVQUFJLEtBQU07QUFDVixpQkFBVztBQUFBO0FBQUE7QUFJZixTQUFPO0FBQUE7OztBQ2xCRixJQUFNLGNBQWMsQ0FBRSxVQUMzQixDQUFFLEdBQUcsTUFBTyxRQUFVLElBQUssQ0FBRSxHQUFHLE1BQU87OztBQ0RsQyx3QkFBNEIsT0FBaUIsT0FBb0I7QUFDdEUsUUFBTSxRQUFRLE1BQU0sUUFBUztBQUM3QixNQUFLLFVBQVUsSUFBSztBQUFFLFdBQU87QUFBQTtBQUU3QixRQUFNLE9BQVEsT0FBTztBQUNyQixTQUFPO0FBQUE7QUFHRixxQkFBeUIsT0FBaUIsT0FBb0I7QUFDbkUsU0FBTyxNQUFNLFFBQVMsV0FBWTtBQUFBO0FBRzdCLHFCQUF5QixPQUFpQixPQUFvQjtBQUNuRSxRQUFNLFFBQVEsTUFBTSxRQUFTO0FBQzdCLE1BQUssVUFBVSxJQUFLO0FBQUUsV0FBTztBQUFBO0FBRTdCLFFBQU0sS0FBTTtBQUNaLFNBQU87QUFBQTtBQUdGLHVCQUEyQixHQUFhLEdBQXdCO0FBQ3JFLFFBQU0sTUFBTSxDQUFFLEdBQUc7QUFDakIsSUFBRSxRQUFTLENBQUUsTUFBTztBQUNsQixRQUFLLENBQUMsWUFBYSxLQUFLLElBQU07QUFDNUIsVUFBSSxLQUFNO0FBQUE7QUFBQTtBQUdkLFNBQU87QUFBQTtBQUdGLHNCQUEwQixNQUFnQixNQUEyQjtBQUMxRSxRQUFNLE1BQU0sQ0FBRSxHQUFHO0FBQ2pCLE9BQUssUUFBUyxDQUFFLE1BQU87QUFDckIsbUJBQWdCLEtBQUs7QUFBQTtBQUV2QixTQUFPO0FBQUE7OztBQ2hDRixJQUFNLHNCQUFzQixpREFBRSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksR0FBRyxHQUFHO0FBS3ZELElBQU0seUJBQXlCLGlEQUFFLElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRztBQUt0RSxJQUFNLDZCQUE2QixpREFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFLdEUsSUFBTSx5QkFBeUIsaURBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRzs7O0FDZnRELHNCQUEwQixPQUFZLE1BQTJCO0FBQ3RFLFFBQU0sSUFBSSxPQUFPLE9BQU8sTUFBTSxLQUFLO0FBQ25DLFdBQVUsSUFBSSxHQUFHLElBQUksTUFBTSxTQUFTLEdBQUcsS0FBTztBQUM1QyxVQUFNLEtBQUssSUFBSSxLQUFLLE1BQU8sTUFBUSxPQUFNLFNBQVM7QUFDbEQsVUFBTSxPQUFPLE1BQU87QUFDcEIsVUFBTyxNQUFPLE1BQU87QUFDckIsVUFBTyxLQUFNO0FBQUE7QUFFZixTQUFPO0FBQUE7QUFRRiw2QkFBaUMsT0FBa0I7QUFDeEQsUUFBTSxNQUFXO0FBQ2pCLFdBQVUsSUFBSSxHQUFHLElBQUksTUFBTSxTQUFTLEdBQUcsS0FBTztBQUM1QyxVQUFNLE9BQU8sSUFBSTtBQUNqQixRQUFJLEtBQ0YsTUFBTyxPQUFZLE1BQU8sT0FBTyxJQUNqQyxNQUFPLE9BQU8sSUFBSyxNQUFPLE9BQU8sSUFDakMsTUFBTyxPQUFPLElBQUssTUFBTztBQUFBO0FBRzlCLFNBQU87QUFBQTtBQU1GLGtCQUFtQixHQUFXLEdBQXNCO0FBQ3pELFFBQU0sTUFBZ0I7QUFDdEIsV0FBVSxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQVE7QUFDaEMsYUFBVSxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQVE7QUFDaEMsVUFBSSxLQUFNLElBQUk7QUFBQTtBQUFBO0FBR2xCLFNBQU87QUFBQTtBQU1GLGtCQUFtQixHQUFXLEdBQVcsR0FBc0I7QUFDcEUsUUFBTSxNQUFnQjtBQUN0QixXQUFVLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBUTtBQUNoQyxhQUFVLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBUTtBQUNoQyxlQUFVLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBUTtBQUNoQyxZQUFJLEtBQU0sSUFBSSxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBSXhCLFNBQU87QUFBQTs7O0FDcERGLGdCQUFVO0FBQUEsRUFBVixjQUxQO0FBTVMsa0JBQVM7QUFDVCxpQkFBUTtBQUNSLG9CQUFXO0FBQ1gsaUJBQVE7QUFDUixrQkFBUztBQUFBO0FBQUEsRUFFVCxPQUFRLFdBQTRCO0FBQ3pDLFNBQUssWUFDSCxFQUFDLEtBQUssU0FBVyxNQUFLLFFBQVEsS0FBSyxVQUNqQyxJQUFNLEtBQUssV0FBVyxLQUFLLEtBQU0sS0FBSyxVQUFXLEtBQUssU0FDdEQ7QUFDSixTQUFLLFNBQVMsS0FBSyxXQUFXO0FBQzlCLFdBQU8sS0FBSztBQUFBO0FBQUE7OztBQ2JULGtCQUFZO0FBQUEsRUFBWixjQUxQO0FBU1ksa0JBQVM7QUFLVCx1QkFBYztBQUtkLHVCQUFjO0FBQUE7QUFBQSxNQUtiLE9BQWU7QUFBRSxXQUFPLEtBQUs7QUFBQTtBQUFBLE1BSzdCLFlBQW9CO0FBQUUsV0FBTyxLQUFLO0FBQUE7QUFBQSxNQUtsQyxZQUFxQjtBQUFFLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFNdkMsT0FBUSxNQUFzQjtBQUNuQyxVQUFNLFdBQVcsS0FBSztBQUN0QixTQUFLLFNBQVMsUUFBUTtBQUN0QixTQUFLLGNBQWMsS0FBSyxTQUFTO0FBQUE7QUFBQSxFQU01QixPQUFhO0FBQ2xCLFNBQUssY0FBYztBQUFBO0FBQUEsRUFNZCxRQUFjO0FBQ25CLFNBQUssY0FBYztBQUFBO0FBQUEsRUFPZCxRQUFTLE1BQXFCO0FBQ25DLFNBQUssU0FBUztBQUFBO0FBQUE7OztBQzFEWCwrQkFBeUIscURBQUssR0FBQztBQUFBLEVBVzdCLFlBQWEsTUFBTSxJQUFLO0FBQzdCO0FBUk0sbUJBQVU7QUFTaEIsU0FBSyxRQUFRO0FBQUE7QUFBQSxNQU1KLFFBQWdCO0FBQUUsV0FBTyxLQUFLO0FBQUE7QUFBQSxNQUs5QixNQUFjO0FBQUUsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUtoQyxTQUFlO0FBQ3BCLFFBQUssS0FBSyxhQUFjO0FBQ3RCLFdBQUssU0FBUyxLQUFLLFVBQVUsS0FBSztBQUNsQyxXQUFLLGNBQWMsSUFBTSxLQUFLO0FBQzlCLFdBQUs7QUFBQSxXQUNBO0FBQ0wsV0FBSyxjQUFjO0FBQUE7QUFBQTtBQUFBLEVBU2hCLFFBQVMsTUFBcUI7QUFDbkMsU0FBSyxVQUFVLEtBQUssTUFBTyxLQUFLLFFBQVE7QUFDeEMsU0FBSyxTQUFTLEtBQUssVUFBVSxLQUFLO0FBQUE7QUFBQTs7O0FDL0MvQixrQ0FBNEIscURBQUssR0FBQztBQUFBLEVBQWxDLGNBTlA7QUFNTztBQUlHLG9CQUFXO0FBS1gsb0JBQW1CLFlBQVk7QUFBQTtBQUFBLE1BSzVCLGFBQXNCO0FBQUUsV0FBTztBQUFBO0FBQUEsRUFLbkMsU0FBZTtBQUNwQixVQUFNLE1BQU0sWUFBWTtBQUV4QixRQUFLLEtBQUssYUFBYztBQUN0QixZQUFNLFdBQVcsS0FBSztBQUN0QixZQUFNLFlBQWMsTUFBTSxLQUFLO0FBQy9CLFdBQUssU0FBUyxLQUFLLFdBQVcsWUFBWTtBQUMxQyxXQUFLLGNBQWMsS0FBSyxPQUFPO0FBQUEsV0FDMUI7QUFDTCxXQUFLLFdBQVcsS0FBSztBQUNyQixXQUFLLFdBQVc7QUFDaEIsV0FBSyxjQUFjO0FBQUE7QUFBQTtBQUFBLEVBUWhCLFFBQVMsTUFBcUI7QUFDbkMsU0FBSyxTQUFTO0FBQ2QsU0FBSyxXQUFXLEtBQUs7QUFDckIsU0FBSyxXQUFXLFlBQVk7QUFBQTtBQUFBOzs7QUN4Q3pCLDBCQUEyQixTQUEwQjtBQUMxRCxTQUFPO0FBQUEsSUFDSCxZQUFXLElBQUksS0FBTTtBQUFBLElBQ3JCLFlBQVcsSUFBSSxLQUFNO0FBQUEsSUFDckIsV0FBVSxLQUFNO0FBQUE7QUFBQTs7O0FDUmYsY0FBZSxHQUFXLEdBQVcsR0FBb0I7QUFDOUQsU0FBTyxJQUFNLEtBQUksS0FBTTtBQUFBO0FBTWxCLGVBQWdCLEdBQVcsR0FBVyxHQUFvQjtBQUMvRCxTQUFPLEtBQUssSUFBSyxLQUFLLElBQUssR0FBRyxJQUFLO0FBQUE7QUFNOUIsa0JBQW1CLEdBQW9CO0FBQzVDLFNBQU8sTUFBTyxHQUFHLEdBQUs7QUFBQTtBQU1qQixlQUFnQixHQUFXLElBQVksSUFBWSxJQUFZLElBQXFCO0FBQ3pGLFNBQVcsS0FBSSxNQUFTLE1BQUssTUFBUyxNQUFLLE1BQU87QUFBQTtBQU03QyxvQkFBcUIsR0FBVyxHQUFXLEdBQW9CO0FBQ3BFLFNBQU8sU0FBWSxLQUFJLEtBQVEsS0FBSTtBQUFBO0FBTTlCLG9CQUFxQixHQUFXLEdBQVcsR0FBb0I7QUFDcEUsUUFBTSxJQUFJLFdBQVksR0FBRyxHQUFHO0FBQzVCLFNBQU8sSUFBSSxJQUFNLEtBQU0sSUFBTTtBQUFBO0FBTXhCLHNCQUF1QixHQUFXLEdBQVcsR0FBb0I7QUFDdEUsUUFBTSxJQUFJLFdBQVksR0FBRyxHQUFHO0FBQzVCLFNBQU8sSUFBSSxJQUFJLElBQU0sS0FBTSxLQUFJLElBQU0sTUFBUztBQUFBO0FBTXpDLHVCQUF3QixHQUFXLEdBQVcsR0FBb0I7QUFDdkUsUUFBTSxJQUFJLFdBQVksR0FBRyxHQUFHO0FBQzVCLFNBQU8sSUFBSSxJQUFJLElBQUksSUFBTSxLQUFNLEtBQU0sT0FBUSxJQUFJLE1BQVMsTUFBUztBQUFBOzs7QUMvQzlELHNCQUF1QixDQUFFLEdBQUcsR0FBRyxJQUEwQztBQUM5RSxRQUFNLEtBQUssSUFBSSxJQUFNO0FBRXJCLFNBQU8sQ0FBRSxHQUFLLEdBQUssR0FBTSxJQUFLLENBQUUsTUFBTztBQUNyQyxVQUFNLE9BQU8sS0FBSyxJQUFLLEtBQUssSUFDMUIsS0FBSyxJQUFPLE1BQUssS0FBTSxJQUFNLEtBQVEsR0FDcEMsSUFBTztBQUNWLFVBQU0sT0FBTyxLQUFNLEdBQUssTUFBTTtBQUM5QixXQUFPLElBQUk7QUFBQTtBQUFBOzs7QUNWUixvQkFBcUIsT0FBd0I7QUFDbEQsU0FBTyxNQUFNLE1BQU0sSUFBSyxDQUFFLE1BQ3RCLE9BQVEsS0FBSyxNQUFPLFNBQVUsS0FBTSxLQUFVLFNBQVUsS0FBTyxNQUFPLEtBQ3RFLEtBQU07QUFBQTs7O0FDUEwsZ0JBQXFDLE1BQVMsTUFBa0I7QUFDckUsU0FBTyxLQUFLLE9BQVEsQ0FBRSxLQUFLLEdBQUcsTUFBTyxNQUFNLElBQUksS0FBTSxJQUFLO0FBQUE7OztBQ0o1RCxvQkFpQjRCLEdBQW9CO0FBQzlDLFFBQU0sS0FBSztBQUFBLElBQ1Q7QUFBQSxJQUFZO0FBQUEsSUFBWTtBQUFBLElBQ3hCO0FBQUEsSUFBYztBQUFBLElBQWU7QUFBQTtBQUUvQixRQUFNLEtBQUs7QUFBQSxJQUNUO0FBQUEsSUFBWTtBQUFBLElBQVk7QUFBQSxJQUN4QjtBQUFBLElBQWM7QUFBQSxJQUFZO0FBQUE7QUFFNUIsUUFBTSxLQUFLO0FBQUEsSUFDVDtBQUFBLElBQVk7QUFBQSxJQUFhO0FBQUEsSUFDekI7QUFBQSxJQUFjO0FBQUEsSUFBYztBQUFBO0FBRzlCLFFBQU0sS0FBSyxTQUFVO0FBQ3JCLFFBQU0sS0FBSztBQUFBLElBQ1Q7QUFBQSxJQUNBO0FBQUEsSUFDQSxLQUFLO0FBQUEsSUFDTCxLQUFLLEtBQUs7QUFBQSxJQUNWLEtBQUssS0FBSyxLQUFLO0FBQUEsSUFDZixLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFHdEIsUUFBTSxNQUFNO0FBQUEsSUFDVixTQUFVLE9BQVEsSUFBSTtBQUFBLElBQ3RCLFNBQVUsT0FBUSxJQUFJO0FBQUEsSUFDdEIsU0FBVSxPQUFRLElBQUk7QUFBQTtBQUd4QixTQUFPO0FBQUE7OztBQzFDRixvQkFBcUIsT0FBd0I7QUFDbEQsU0FBTyxNQUFNLElBQUssQ0FBRSxNQUNsQixJQUFJLFFBQ0EsSUFBSSxNQUNKLEtBQUssSUFBTyxLQUFJLFNBQVUsT0FBTyxJQUFNO0FBQUE7OztBQ0p4QyxvQkFBcUIsV0FBNEI7QUFDdEQsU0FBTyxVQUFVLElBQUssQ0FBRSxNQUN0QixJQUFJLFFBQ0EsTUFBTSxJQUNOLFFBQVEsS0FBSyxJQUFLLEdBQUcsUUFBUztBQUFBOzs7QUNBL0IseUJBQTZCLE9BQXdCLGFBQXNCO0FBQ2hGLFNBQU8sTUFDSixPQUFRLENBQUUsU0FBVSxLQUFNLE9BQVEsYUFDbEMsSUFBSyxDQUFFLFNBQVUsS0FBTTtBQUFBOzs7QUNEckIsMkJBQStCLE9BQXdCLGFBQXNCO0FBQ2xGLFFBQU0sWUFBWSxvQkFBSTtBQUV0QixXQUFVLGFBQWEsQ0FBRSxTQUFVO0FBQ2pDLFVBQU0sVUFBVSxnQkFBaUIsT0FBTztBQUN4QyxZQUFRLElBQUssQ0FBRSxXQUFZLFVBQVUsSUFBSztBQUMxQyxXQUFPO0FBQUE7QUFHVCxTQUFPLE1BQU0sS0FBTTtBQUFBOzs7QUNYZCwwQkFBOEIsT0FBd0IsUUFBaUI7QUFDNUUsU0FBTyxNQUNKLE9BQVEsQ0FBRSxTQUFVLEtBQU0sT0FBUSxRQUNsQyxJQUFLLENBQUUsU0FBVSxLQUFNO0FBQUE7OztBQ0RyQiw2QkFBaUMsT0FBd0IsUUFBaUI7QUFDL0UsUUFBTSxjQUFjLG9CQUFJO0FBRXhCLFdBQVUsUUFBUSxDQUFFLFNBQVU7QUFDNUIsVUFBTSxXQUFXLGlCQUFrQixPQUFPO0FBQzFDLGFBQVMsSUFBSyxDQUFFLFVBQVcsWUFBWSxJQUFLO0FBQzVDLFdBQU87QUFBQTtBQUdULFNBQU8sTUFBTSxLQUFNO0FBQUE7OztBQ1RkLHdCQUE0QixPQUF3QixhQUEyQjtBQVh0RjtBQVlFLFNBQU8sa0JBQU0sS0FBTSxDQUFFLFNBQVUsS0FBTSxPQUFRLGlCQUF0QyxtQkFBdUQsT0FBdkQsWUFBOEQ7QUFBQTs7O0FDSGhFLHlCQUE2QixPQUF3QixPQUFrQjtBQUM1RSxRQUFNLFFBQWE7QUFFbkIsUUFBTSxVQUFVLElBQUksSUFBSztBQUN6QixNQUFJLFlBQVksTUFBTTtBQUV0QixTQUFRLFVBQVUsU0FBUyxHQUFJO0FBQzdCLFlBQVEsUUFBUyxDQUFFLFNBQVU7QUFFM0IsWUFBTSxhQUFhLGVBQWdCLFdBQVcsU0FBVTtBQUV4RCxVQUFLLENBQUMsWUFBYTtBQUNqQixnQkFBUSxPQUFRO0FBQ2hCLGNBQU0sS0FBTTtBQUdaLG9CQUFZLFVBQVUsT0FBUSxDQUFFLENBQUUsU0FBYSxRQUFRO0FBQUE7QUFBQTtBQUFBO0FBSzdELFNBQU8sTUFBTSxPQUFRLE1BQU0sS0FBTTtBQUFBOzs7QUNqQjVCLGVBQ0wsTUFDQSxRQUNBLFFBQ0EsUUFDTTtBQUVOLE1BQUksSUFBSTtBQUdSLFFBQU0sSUFBSSxJQUFJLGFBQWM7QUFDNUIsSUFBRyxLQUFNO0FBR1QsUUFBTSxJQUFJLElBQUksYUFBYyxTQUFTO0FBQ3JDLElBQUcsS0FBTTtBQUNULElBQUcsS0FBTTtBQUdULFFBQU0sSUFBSSxJQUFJLGFBQWM7QUFDNUIsV0FBVSxJQUFJLEdBQUcsSUFBSSxRQUFRLEtBQU87QUFDbEMsTUFBRyxLQUFNLEtBQU0sU0FBUyxJQUFJO0FBQUE7QUFJOUIsV0FBVSxJQUFJLEdBQUcsSUFBSSxRQUFRLEtBQU87QUFDbEMsUUFBSSxJQUFJO0FBRVIsV0FBUSxLQUFLLEdBQUk7QUFDZixVQUFNLEdBQUcsS0FBTSxJQUFJLElBQUksRUFBRyxFQUFHLE1BQVEsRUFBRyxLQUFNLEVBQUcsTUFBVSxLQUFNLElBQUksSUFBTSxFQUFHO0FBQzlFLFVBQUssS0FBSyxFQUFHLElBQU07QUFDakI7QUFBQSxhQUNLO0FBQ0w7QUFBQTtBQUFBO0FBSUo7QUFDQSxNQUFHLEtBQU07QUFDVCxNQUFHLEtBQU07QUFDVCxNQUFHLElBQUksS0FBTTtBQUFBO0FBR2YsTUFBSTtBQUdKLFdBQVUsSUFBSSxHQUFHLElBQUksUUFBUSxLQUFPO0FBQ2xDLFdBQVEsRUFBRyxJQUFJLEtBQU0sR0FBSTtBQUFFO0FBQUE7QUFDM0IsVUFBTSxTQUFTLElBQUksRUFBRztBQUN0QixTQUFNLFNBQVMsSUFBSSxVQUFXLEVBQUcsRUFBRyxNQUFRLFNBQVM7QUFBQTtBQUFBO0FBWWxELGVBQ0wsTUFDQSxPQUNBLFFBQ007QUFDTixXQUFVLElBQUksR0FBRyxJQUFJLE9BQU8sS0FBTztBQUNqQyxVQUFPLE1BQU0sR0FBRyxPQUFPO0FBQUE7QUFHekIsV0FBVSxJQUFJLEdBQUcsSUFBSSxRQUFRLEtBQU87QUFDbEMsVUFBTyxNQUFNLElBQUksT0FBTyxHQUFHO0FBQUE7QUFBQTs7O0FDL0V4QixzQkFBZ0I7QUFBQSxFQUFoQixjQUxQO0FBTVMsa0JBQVM7QUFDVCxrQkFBUztBQUNULGlCQUFRO0FBQUE7QUFBQSxFQUVSLE9BQVEsV0FBNEI7QUFDekMsU0FBSyxRQUFRLEtBQU0sS0FBSyxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUssQ0FBQyxLQUFLLFNBQVM7QUFDckUsV0FBTyxLQUFLO0FBQUE7QUFBQTs7O0FDWlQsaUJBQWM7QUFBQSxFQVNaLFlBQWEsT0FBYTtBQU4xQixpQkFBUTtBQU9iLFNBQUssUUFBUTtBQUFBO0FBQUEsTUFMSixVQUFhO0FBQ3RCLFdBQU8sS0FBSyxNQUFPLEtBQUs7QUFBQTtBQUFBLEVBT25CLE9BQVU7QUFDZixTQUFLLFFBQVUsTUFBSyxRQUFRLEtBQU0sS0FBSyxNQUFNO0FBQzdDLFdBQU8sS0FBSztBQUFBO0FBQUE7OztBQ2JULHFCQUFlO0FBQUEsU0FRTixZQUFhLElBQThEO0FBQ3ZGLFdBQU8sSUFBSSxJQUFLLEdBQUcsMEJBQTJCLElBQUs7QUFBQTtBQUFBLEVBRzlDLFlBQWEsSUFBNkI7QUFDL0MsU0FBSyxLQUFLO0FBRVYsVUFBTSxVQUFVLElBQUksTUFBTyxNQUFPLEtBQU0sR0FBSSxJQUFLLE1BQU0sR0FBRztBQUMxRCxTQUFLLFVBQVUsSUFBSSxLQUFNO0FBRXpCLFNBQUssUUFBUTtBQUViLFNBQUssTUFBTSxHQUFHLGFBQWM7QUFFNUIsU0FBSyxjQUFjLG9CQUFJO0FBR3ZCLFVBQU0sU0FBUyxNQUFZO0FBQ3pCLFdBQUs7QUFDTCw0QkFBdUI7QUFBQTtBQUV6QjtBQUFBO0FBQUEsRUFHSyxTQUFlO0FBQ3BCLFVBQU0sS0FBTSxLQUFLLGFBQWMsUUFBUyxDQUFFLFNBQVU7QUFBQTtBQUFBLEVBR3pDLFFBQVMsTUFBb0M7QUFBQTtBQUN4RCxZQUFNLEVBQUUsT0FBTztBQUVmLFVBQUssS0FBSyxNQUFNLFdBQVcsR0FBSTtBQUM3QixXQUFHLFNBQVUsS0FBSyxJQUFJO0FBQ3RCLGNBQU0sdUJBQXVCLEtBQUssTUFBTyxLQUFLLFFBQVE7QUFFdEQsYUFBSyxRQUFRLEtBQUssTUFBTSxJQUFLLENBQVEsa0JBQWtCO0FBQ3JELGlCQUFTLE9BQU0saUJBQW1CLE9BQU07QUFBQTtBQUFBO0FBSTVDLFdBQUssTUFBTSxLQUFNLFFBQVEsUUFBUztBQUVsQyxTQUFHLFdBQVksS0FBSyxJQUFJLGtCQUFrQixLQUFLLFFBQVE7QUFFdkQ7QUFFQSxTQUFHLFNBQVUsS0FBSyxJQUFJO0FBRXRCLFlBQU0sZUFBZSxLQUFLLE1BQU07QUFDaEMsWUFBTSxjQUFjLEtBQUssTUFBTyxLQUFLLFFBQVE7QUFFN0MsVUFBSyxLQUFLLE1BQU0sV0FBVyxHQUFJO0FBQzdCLGFBQUssUUFBUSxLQUFLLE1BQU0sSUFBSyxDQUFRLGtCQUFrQjtBQUNyRCxpQkFBUyxPQUFNLGlCQUFtQixPQUFNO0FBQUE7QUFHMUMsV0FBRyxXQUFZLEtBQUssSUFBSSxrQkFBa0IsS0FBSyxRQUFRO0FBQUE7QUFHekQsYUFBUyxPQUFNLGdCQUFtQixPQUFNO0FBQUE7QUFBQTtBQUFBLEVBR25DLE1BQU8sT0FBcUM7QUFDakQsVUFBTSxFQUFFLE9BQU87QUFFZixXQUFPLElBQUksUUFBUyxDQUFFLFlBQWE7QUFDakMsWUFBTSxPQUFPLE1BQVk7QUFDdkIsY0FBTSxjQUFjLEdBQUcsa0JBQW1CLE9BQU8sR0FBRztBQUVwRCxZQUFLLGFBQWM7QUFDakIsZUFBSyxZQUFZLE9BQVE7QUFDekIsa0JBQVMsR0FBRyxrQkFBbUIsT0FBTyxHQUFHLGdCQUFpQixPQUFRO0FBQUE7QUFBQTtBQUl0RSxXQUFLLFlBQVksSUFBSztBQUFBO0FBQUE7QUFBQTs7O0FDakZyQixrQ0FBNEI7QUFBQSxFQVMxQixZQUFhLFFBQWlCO0FBUjdCLDJCQUFrQjtBQUNsQiw4QkFBcUI7QUFDckIscUJBQXNCO0FBQ3RCLG1CQUFVO0FBRVYsbUJBQVU7QUFDVixtQkFBVTtBQUdoQixTQUFLLFdBQVc7QUFDaEIsU0FBSyxrQkFBa0I7QUFDdkIsYUFBVSxJQUFJLEdBQUcsSUFBSSxRQUFRLEtBQU87QUFDbEMsV0FBSyxVQUFXLEtBQU07QUFBQTtBQUFBO0FBQUEsTUFJZixPQUFlO0FBQ3hCLFVBQU0sUUFBUSxLQUFLLElBQUssS0FBSyxTQUFTLEtBQUs7QUFDM0MsV0FBTyxVQUFVLElBQUksSUFBTSxLQUFLLFVBQVU7QUFBQTtBQUFBLE1BR2pDLGdCQUF3QjtBQUNqQyxXQUFPLEtBQUs7QUFBQTtBQUFBLE1BR0gsY0FBZSxPQUFnQjtBQUN4QyxVQUFNLFFBQVEsUUFBUSxLQUFLO0FBQzNCLFNBQUssa0JBQWtCO0FBQ3ZCLFNBQUsscUJBQXFCLEtBQUssSUFBSyxHQUFHLEtBQUsscUJBQXFCO0FBQUE7QUFBQSxFQUc1RCxRQUFjO0FBQ25CLFNBQUssVUFBVTtBQUNmLFNBQUssVUFBVTtBQUNmLFNBQUssVUFBVTtBQUNmLFNBQUsscUJBQXFCO0FBQzFCLGFBQVUsSUFBSSxHQUFHLElBQUksS0FBSyxVQUFVLEtBQU87QUFDekMsV0FBSyxVQUFXLEtBQU07QUFBQTtBQUFBO0FBQUEsRUFJbkIsS0FBTSxPQUFzQjtBQUNqQyxVQUFNLE9BQU8sS0FBSyxVQUFXLEtBQUs7QUFDbEMsU0FBSyxVQUFXLEtBQUssV0FBWTtBQUNqQyxTQUFLO0FBQ0wsU0FBSyxVQUFZLE1BQUssVUFBVSxLQUFNLEtBQUs7QUFFM0MsUUFBSyxLQUFLLHVCQUF1QixHQUFJO0FBQ25DLFdBQUs7QUFBQSxXQUNBO0FBQ0wsV0FBSztBQUNMLFdBQUssV0FBVztBQUNoQixXQUFLLFdBQVc7QUFBQTtBQUFBO0FBQUEsRUFJYixTQUFlO0FBQ3BCLFNBQUsscUJBQXFCLEtBQUs7QUFDL0IsVUFBTSxNQUFNLEtBQUssVUFDZCxNQUFPLEdBQUcsS0FBSyxJQUFLLEtBQUssU0FBUyxLQUFLLFdBQ3ZDLE9BQVEsQ0FBRSxNQUFLLE1BQU8sT0FBTSxHQUFHO0FBQ2xDLFNBQUssVUFBVTtBQUFBO0FBQUE7OztBQzVEWix3Q0FBa0M7QUFBQSxFQU1oQyxZQUFhLFFBQWlCO0FBTDdCLHFCQUFzQjtBQUN0QixvQkFBcUI7QUFDckIsbUJBQVU7QUFJaEIsU0FBSyxXQUFXO0FBQUE7QUFBQSxNQUdQLFNBQWlCO0FBQzFCLFdBQU8sS0FBSyxXQUFZO0FBQUE7QUFBQSxFQUduQixXQUFZLFlBQTZCO0FBQzlDLFFBQUssS0FBSyxVQUFVLFdBQVcsR0FBSTtBQUFFLGFBQU87QUFBQTtBQUM1QyxXQUFPLEtBQUssU0FBVSxLQUFLLE1BQU8sYUFBYSxPQUFTLE1BQUssVUFBVSxTQUFTO0FBQUE7QUFBQSxFQUczRSxRQUFjO0FBQ25CLFNBQUssVUFBVTtBQUNmLFNBQUssWUFBWTtBQUNqQixTQUFLLFdBQVc7QUFBQTtBQUFBLEVBR1gsS0FBTSxPQUFzQjtBQUNqQyxVQUFNLE9BQU8sS0FBSyxVQUFXLEtBQUs7QUFDbEMsU0FBSyxVQUFXLEtBQUssV0FBWTtBQUNqQyxTQUFLLFVBQVksTUFBSyxVQUFVLEtBQU0sS0FBSztBQUczQyxRQUFLLEtBQUssU0FBUyxXQUFXLEtBQUssVUFBVztBQUM1QyxZQUFNLFlBQVksYUFBYyxLQUFLLFVBQVU7QUFDL0MsV0FBSyxTQUFTLE9BQVEsV0FBVztBQUFBO0FBR25DLFVBQU0sUUFBUSxhQUFjLEtBQUssVUFBVTtBQUMzQyxTQUFLLFNBQVMsT0FBUSxPQUFPLEdBQUc7QUFBQTtBQUFBOzs7QUN0QzdCLDRDQUFzQywyRUFBMkIsR0FBQztBQUFBLEVBQ2hFLFlBQWEsUUFBaUI7QUFDbkMsVUFBTztBQUNQLFlBQVEsS0FBTTtBQUFBO0FBQUE7OztBQ1JYLHFCQUFxQjtBQUFBLEVBR25CLGNBQWM7QUFDbkIsU0FBSyxNQUFNLG9CQUFJO0FBQUE7QUFBQSxFQUdWLElBQUssS0FBaUI7QUFQL0I7QUFRSSxXQUFPLFdBQUssSUFBSSxJQUFLLFNBQWQsWUFBdUIsb0JBQUk7QUFBQTtBQUFBLEVBRzdCLElBQUssS0FBUSxPQUFpQjtBQUNuQyxRQUFJLE1BQU0sS0FBSyxJQUFJLElBQUs7QUFDeEIsUUFBSyxPQUFPLE1BQU87QUFDakIsWUFBTSxvQkFBSTtBQUNWLFdBQUssSUFBSSxJQUFLLEtBQUs7QUFBQTtBQUVyQixRQUFJLElBQUs7QUFBQTtBQUFBOzs7QUNkTixnQkFBcUMsS0FBWTtBQUN0RCxTQUFPLElBQUksSUFBSyxDQUFFLE1BQU8sS0FBSyxJQUFLO0FBQUE7OztBQ0Q5QixtQkFBd0MsTUFBZTtBQUM1RCxNQUFLLEtBQUssU0FBUyxHQUFJO0FBQ3JCLFdBQU8sS0FBTTtBQUFBO0FBR2YsUUFBTSxJQUFJLEtBQUs7QUFDZixRQUFNLElBQUksT0FBUSxHQUFHO0FBRXJCLFNBQU8sRUFBRSxJQUFLLENBQUUsR0FBRyxNQUFPLElBQUksRUFBRztBQUFBOzs7QUNSNUIsbUJBQXdDLE1BQVMsTUFBYTtBQUNuRSxTQUFPLEtBQUssSUFBSyxDQUFFLEdBQUcsTUFBTyxJQUFJLEtBQU07QUFBQTs7O0FDRGxDLG1CQUF3QyxLQUFpQjtBQUM5RCxTQUFPLEtBQUssS0FBTSxJQUFJLE9BQVEsQ0FBRSxLQUFLLE1BQU8sTUFBTSxJQUFJLEdBQUc7QUFBQTs7O0FDRHBELHFCQUEwQyxLQUFpQjtBQUNoRSxTQUFPLElBQUksT0FBUSxDQUFFLEtBQUssTUFBTyxNQUFNLElBQUksR0FBRztBQUFBOzs7QUNEekMsNEJBQWlELEtBQWlCO0FBQ3ZFLFNBQU8sSUFBSSxPQUFRLENBQUUsS0FBSyxNQUFPLE1BQU0sS0FBSyxJQUFLLElBQUs7QUFBQTs7O0FDRGpELHdCQUE2QyxNQUFlO0FBQ2pFLE1BQUssS0FBSyxTQUFTLEdBQUk7QUFDckIsV0FBTyxLQUFNO0FBQUE7QUFHZixRQUFNLElBQUksS0FBSztBQUNmLFFBQU0sSUFBSSxZQUFhLEdBQUc7QUFFMUIsU0FBTyxFQUFFLElBQUssQ0FBRSxHQUFHLE1BQU8sSUFBSSxFQUFHO0FBQUE7OztBQ1I1QixnQkFBcUMsS0FBWTtBQUN0RCxTQUFPLElBQUksSUFBSyxDQUFFLE1BQU8sQ0FBQztBQUFBOzs7QUNEckIsa0JBQXVDLEtBQVEsUUFBb0I7QUFDeEUsU0FBTyxJQUFJLElBQUssQ0FBRSxNQUFPLElBQUk7QUFBQTs7O0FDR3hCLHNCQUEyQyxLQUFZO0FBQzVELFFBQU0sTUFBTSxVQUFXO0FBQ3ZCLFFBQU0sU0FBUyxRQUFRLElBQU0sSUFBTSxJQUFNO0FBQ3pDLFNBQU8sU0FBVSxLQUFLO0FBQUE7OztBQ1BqQixnQkFBcUMsTUFBUyxNQUFhO0FBQ2hFLFNBQU8sS0FBSyxJQUFLLENBQUUsR0FBRyxNQUFPLElBQUksS0FBTTtBQUFBOzs7QUNZbEMsbUJBQTJDO0FBQUEsTUFPckMsU0FBaUI7QUFDMUIsV0FBTyxVQUFXLEtBQUs7QUFBQTtBQUFBLE1BTWQsV0FBbUI7QUFDNUIsV0FBTyxZQUFhLEtBQUs7QUFBQTtBQUFBLE1BTWhCLGtCQUEwQjtBQUNuQyxXQUFPLG1CQUFvQixLQUFLO0FBQUE7QUFBQSxNQU12QixhQUFnQjtBQUN6QixXQUFPLEtBQUssTUFBTyxhQUFjLEtBQUs7QUFBQTtBQUFBLE1BTTdCLFVBQWE7QUFDdEIsV0FBTyxLQUFLLE1BQU8sT0FBUSxLQUFLO0FBQUE7QUFBQSxNQU12QixNQUFTO0FBQ2xCLFdBQU8sS0FBSyxNQUFPLE9BQVEsS0FBSztBQUFBO0FBQUEsRUFNM0IsUUFBVztBQUNoQixXQUFPLEtBQUssTUFBTyxLQUFLLFNBQVM7QUFBQTtBQUFBLEVBTzVCLE9BQVEsU0FBa0I7QUFDL0IsV0FBTyxLQUFLLE1BQU8sT0FBUSxLQUFLLFVBQVUsR0FBRyxRQUFRLElBQUssQ0FBRSxNQUFPLEVBQUU7QUFBQTtBQUFBLEVBT2hFLElBQUssUUFBZTtBQUN6QixXQUFPLEtBQUssTUFBTyxPQUFRLEtBQUssVUFBVSxPQUFPO0FBQUE7QUFBQSxFQU81QyxZQUFhLFNBQWtCO0FBQ3BDLFdBQU8sS0FBSyxNQUFPLFlBQWEsS0FBSyxVQUFVLEdBQUcsUUFBUSxJQUFLLENBQUUsTUFBTyxFQUFFO0FBQUE7QUFBQSxFQU9yRSxPQUFRLFFBQWU7QUFDNUIsV0FBTyxLQUFLLE1BQU8sVUFBVyxLQUFLLFVBQVUsT0FBTztBQUFBO0FBQUEsRUFRL0MsTUFBTyxRQUFvQjtBQUNoQyxXQUFPLEtBQUssTUFBTyxTQUFVLEtBQUssVUFBVTtBQUFBO0FBQUEsRUFPdkMsSUFBSyxRQUFvQjtBQUM5QixXQUFPLE9BQVEsS0FBSyxVQUFVLE9BQU87QUFBQTtBQUFBOzs7QUM3R2xDLDBCQUEyQixHQUFlLEdBQTRCO0FBQzNFLFNBQU87QUFBQSxJQUNMLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsTUFBTyxFQUFHO0FBQUEsSUFDbkUsRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxNQUFPLEVBQUc7QUFBQSxJQUNuRSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxNQUFPLEVBQUcsS0FBTSxFQUFHLE1BQU8sRUFBRztBQUFBLElBQ3BFLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLE1BQU8sRUFBRyxLQUFNLEVBQUcsTUFBTyxFQUFHO0FBQUE7QUFBQTs7O0FDSGpFLDBCQUEyQixHQUFlLEdBQTRCO0FBQzNFLFFBQU0sT0FBTyxpQkFBa0IsQ0FBRSxHQUFHLEdBQUcsSUFBSztBQUM1QyxRQUFNLE1BQWtCLENBQUUsS0FBTSxJQUFLLEtBQU0sSUFBSyxLQUFNO0FBQ3RELFFBQU0sSUFBSSxLQUFNO0FBQ2hCLFNBQU8sU0FBVSxLQUFLLElBQU07QUFBQTs7O0FDUHZCLHFCQUFzQixNQUFxQztBQUNoRSxTQUFPLENBQUUsQ0FBQyxLQUFNLElBQUssQ0FBQyxLQUFNLElBQUssQ0FBQyxLQUFNLElBQUssS0FBTTtBQUFBOzs7QUNEOUMseUJBQTBCLE9BQXdDO0FBQ3ZFLE1BQUssTUFBTSxTQUFTLEdBQUk7QUFDdEIsV0FBTyxNQUFPO0FBQUE7QUFHaEIsUUFBTSxJQUFJLE1BQU07QUFDaEIsUUFBTSxJQUFJLGFBQWMsR0FBRztBQUUzQixTQUFPO0FBQUEsSUFDTCxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRztBQUFBLElBQ2xFLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHO0FBQUEsSUFDbEUsRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUc7QUFBQSxJQUNsRSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUcsS0FBTSxFQUFHLEtBQU0sRUFBRztBQUFBO0FBQUE7OztBQ1QvRCw2QkFBOEIsS0FBaUIsTUFBa0M7QUFDdEYsUUFBTSxJQUFtQixDQUFFLEdBQUcsS0FBSztBQUNuQyxRQUFNLElBQUksWUFBYTtBQUN2QixRQUFNLE1BQU0sYUFBYyxNQUFNLEdBQUc7QUFDbkMsTUFBSTtBQUNKLFNBQU87QUFBQTs7O0FDUkYsbUJBQW9CLE1BQWtCLE1BQStCO0FBQzFFLFNBQU87QUFBQSxJQUNMLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU07QUFBQSxJQUMxQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNO0FBQUEsSUFDMUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTTtBQUFBO0FBQUE7OztBQ0d2Qyw0QkFDTCxRQUNBLFVBQXNCLENBQUUsR0FBSyxHQUFLLElBQ2xDLFVBS0U7QUFDRixRQUFNLElBQUksYUFBYztBQUN4QixNQUFJLElBQUksYUFBYztBQUV0QixNQUFJLFFBQVEsT0FBUSxHQUFHO0FBRXZCLE1BQUssVUFBVSxHQUFNO0FBQ25CLFFBQUssS0FBSyxJQUFLLEVBQUcsTUFBUSxLQUFLLElBQUssRUFBRyxLQUFRO0FBQzdDLFVBQUksQ0FBRSxHQUFLLEdBQUs7QUFBQSxXQUNYO0FBQ0wsVUFBSSxDQUFFLEdBQUssR0FBSztBQUFBO0FBRWxCLFlBQVEsT0FBUSxHQUFHO0FBQUE7QUFHckIsTUFBSSxhQUFjLE9BQVEsR0FBRyxTQUFVLEdBQUc7QUFFMUMsTUFBSSxJQUFJLFVBQVcsR0FBRztBQUN0QixNQUFLLFlBQVksT0FBUSxHQUFHLFlBQWEsR0FBTTtBQUM3QyxRQUFJLE9BQVE7QUFBQTtBQUdkLFNBQU87QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLFNBQVM7QUFBQSxJQUNULFVBQVU7QUFBQTtBQUFBOzs7QUNqQ1AsNEJBQXNCLHNEQUFNLEdBQVU7QUFBQSxFQUdwQyxZQUFhLElBQWdCLENBQUUsR0FBSyxHQUFLLElBQVE7QUFDdEQ7QUFDQSxTQUFLLFdBQVc7QUFBQTtBQUFBLE1BTVAsSUFBWTtBQUNyQixXQUFPLEtBQUssU0FBVTtBQUFBO0FBQUEsTUFHYixFQUFHLEdBQVk7QUFDeEIsU0FBSyxTQUFVLEtBQU07QUFBQTtBQUFBLE1BTVosSUFBWTtBQUNyQixXQUFPLEtBQUssU0FBVTtBQUFBO0FBQUEsTUFHYixFQUFHLEdBQVk7QUFDeEIsU0FBSyxTQUFVLEtBQU07QUFBQTtBQUFBLE1BTVosSUFBWTtBQUNyQixXQUFPLEtBQUssU0FBVTtBQUFBO0FBQUEsTUFHYixFQUFHLEdBQVk7QUFDeEIsU0FBSyxTQUFVLEtBQU07QUFBQTtBQUFBLEVBR2hCLFdBQW1CO0FBQ3hCLFdBQU8sWUFBYSxLQUFLLEVBQUUsUUFBUyxPQUFVLEtBQUssRUFBRSxRQUFTLE9BQVUsS0FBSyxFQUFFLFFBQVM7QUFBQTtBQUFBLEVBT25GLE1BQU8sUUFBMkI7QUFDdkMsV0FBTyxJQUFJLFFBQVMsVUFBVyxLQUFLLFVBQVUsT0FBTztBQUFBO0FBQUEsRUFPaEQsZ0JBQWlCLFlBQWtDO0FBQ3hELFdBQU8sSUFBSSxRQUFTLG9CQUFxQixLQUFLLFVBQVUsV0FBVztBQUFBO0FBQUEsRUFNOUQsYUFBYyxRQUEyQjtBQUM5QyxXQUFPLElBQUksUUFBUyxpQkFBa0IsS0FBSyxVQUFVLE9BQU87QUFBQTtBQUFBLEVBR3BELE1BQU8sR0FBeUI7QUFDeEMsV0FBTyxJQUFJLFFBQVM7QUFBQTtBQUFBLGFBTUosT0FBZ0I7QUFDaEMsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLEdBQUs7QUFBQTtBQUFBLGFBTWhCLEtBQWM7QUFDOUIsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLEdBQUs7QUFBQTtBQUFBLGFBTWhCLEtBQWM7QUFDOUIsV0FBTyxJQUFJLFFBQVMsQ0FBRSxJQUFNLEdBQUs7QUFBQTtBQUFBLGFBTWpCLEtBQWM7QUFDOUIsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLEdBQUs7QUFBQTtBQUFBLGFBTWhCLEtBQWM7QUFDOUIsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLElBQU07QUFBQTtBQUFBLGFBTWpCLEtBQWM7QUFDOUIsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLEdBQUs7QUFBQTtBQUFBLGFBTWhCLEtBQWM7QUFDOUIsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLEdBQUs7QUFBQTtBQUFBLGFBTWhCLE1BQWU7QUFDL0IsV0FBTyxJQUFJLFFBQVMsQ0FBRSxHQUFLLEdBQUs7QUFBQTtBQUFBLFNBT3BCLGVBQWdCLFFBQWlCLFNBQWtCLFVBSS9EO0FBQ0EsVUFBTSxTQUFTLG1CQUFvQixPQUFPLFVBQVUsUUFBUSxVQUFVLFNBQVM7QUFDL0UsV0FBTztBQUFBLE1BQ0wsUUFBUSxJQUFJLFFBQVMsT0FBTztBQUFBLE1BQzVCLFNBQVMsSUFBSSxRQUFTLE9BQU87QUFBQSxNQUM3QixVQUFVLElBQUksUUFBUyxPQUFPO0FBQUE7QUFBQTtBQUFBOzs7QUNqSjdCLDJCQUE0QixLQUFjLE9BQTZCO0FBQzVFLFNBQ0UsSUFBSyxHQUFLLE1BQU8sTUFBTyxNQUN4QixJQUFLLEdBQUssTUFBTyxNQUFPLE1BQ3hCLElBQUssR0FBSyxNQUFPLE1BQU8sTUFDeEIsSUFBSyxHQUFLLE1BQU8sTUFBTyxNQUN4QixJQUFLLEdBQUssTUFBTyxNQUFPLE1BQ3hCLElBQUssR0FBSyxNQUFPLE1BQU87QUFBQTs7O0FDUnJCLGlCQUFXO0FBQUEsRUFJVCxZQUFhLE1BQWUsUUFBUSxNQUFNLE1BQWUsUUFBUSxNQUFPO0FBQzdFLFNBQUssTUFBTTtBQUNYLFNBQUssTUFBTTtBQUFBO0FBQUEsTUFNRixNQUFlO0FBQ3hCLFdBQU8sQ0FBRSxLQUFLLElBQUksVUFBVSxLQUFLLElBQUk7QUFBQTtBQUFBLEVBUWhDLGNBQWUsT0FBMEI7QUFDOUMsV0FBTyxrQkFBbUIsS0FBSyxLQUFLLE1BQU07QUFBQTtBQUFBLFNBTzlCLFFBQVMsS0FBcUI7QUFDMUMsV0FBTyxJQUFJLEtBQU0sSUFBSSxRQUFTLElBQUssS0FBTyxJQUFJLFFBQVMsSUFBSztBQUFBO0FBQUE7OztBQzdCekQsK0JBQ0wsUUFDWTtBQUNaLFNBQU87QUFBQSxJQUNMLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUNsQyxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFDbEMsT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBO0FBQUE7OztBQ04vQixxQkFBc0IsR0FBNEI7QUFDdkQsUUFDRSxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFDckMsTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQ3JDLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUNyQyxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQ3hCLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FDeEIsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN4QixNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUV0QyxNQUFLLFFBQVEsR0FBTTtBQUFFLFdBQU8sU0FBVSxHQUFHO0FBQUE7QUFFekMsU0FBTyxTQUFVO0FBQUEsSUFDZjtBQUFBLElBQ0EsTUFBTSxNQUFNLE1BQU07QUFBQSxJQUNsQixNQUFNLE1BQU0sTUFBTTtBQUFBLElBQ2xCO0FBQUEsSUFDQSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQ2xCLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFDbEI7QUFBQSxJQUNBLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFDbEIsTUFBTSxNQUFNLE1BQU07QUFBQSxLQUNqQixJQUFNO0FBQUE7OztBQ3BCSixnQ0FBaUMsR0FBNEI7QUFDbEUsU0FBTyxZQUFhLHNCQUF1QjtBQUFBOzs7QUNUdEMseUJBQTBCLEdBQXdCO0FBQ3ZELFFBQ0UsTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQ3JDLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUNyQyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFDckMsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN4QixNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQ3hCLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFFMUIsU0FBTyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQTs7O0FDTGhDLHNCQUNMLFFBQ1k7QUFDWixTQUFPO0FBQUEsSUFDTCxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFDbEMsT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBLElBQ2xDLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQTtBQUFBOzs7QUNGL0IsNEJBQTZCLE1BQWtDO0FBQ3BFLFFBQU0sSUFBSSxLQUFNO0FBQ2hCLFFBQU0sSUFBSSxLQUFNO0FBQ2hCLFFBQU0sSUFBSSxLQUFNO0FBQ2hCLFFBQU0sSUFBSSxLQUFNO0FBRWhCLFNBQU87QUFBQSxJQUNMLElBQU0sSUFBTSxJQUFJLElBQUksSUFBTSxJQUFJO0FBQUEsSUFBRyxJQUFNLElBQUksSUFBSSxJQUFNLElBQUk7QUFBQSxJQUFHLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQ3BGLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQUcsSUFBTSxJQUFNLElBQUksSUFBSSxJQUFNLElBQUk7QUFBQSxJQUFHLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQ3BGLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQUcsSUFBTSxJQUFJLElBQUksSUFBTSxJQUFJO0FBQUEsSUFBRyxJQUFNLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBO0FBQUE7OztBQ2RqRix5QkFBMEIsTUFBaUM7QUFDaEUsTUFBSyxLQUFLLFNBQVMsR0FBSTtBQUNyQixXQUFPLEtBQU07QUFBQTtBQUdmLFFBQU0sSUFBSSxLQUFLO0FBQ2YsUUFBTSxJQUFJLGFBQWMsR0FBRztBQUMzQixRQUNFLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUNyQyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFDckMsTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQ3JDLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUNyQyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFDckMsTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHO0FBRXZDLFNBQU87QUFBQSxJQUNMLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBRTlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBRTlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBO0FBQUE7OztBQzFCM0IsdUJBQ0wsUUFDWTtBQUNaLFNBQU87QUFBQSxJQUNMLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUNsQyxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFDbEMsT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBO0FBQUE7OztBQ0N0QyxJQUFNLHFCQUFpQztBQUFBLEVBQ3JDO0FBQUEsRUFBSztBQUFBLEVBQUs7QUFBQSxFQUNWO0FBQUEsRUFBSztBQUFBLEVBQUs7QUFBQSxFQUNWO0FBQUEsRUFBSztBQUFBLEVBQUs7QUFBQTtBQU1MLG9CQUFjO0FBQUEsRUFHWixZQUFhLElBQWdCLG9CQUFxQjtBQUN2RCxTQUFLLFdBQVc7QUFBQTtBQUFBLE1BTVAsWUFBcUI7QUFDOUIsV0FBTyxJQUFJLFFBQVMsY0FBZSxLQUFLO0FBQUE7QUFBQSxNQU0vQixjQUFzQjtBQUMvQixXQUFPLGdCQUFpQixLQUFLO0FBQUE7QUFBQSxNQU1wQixVQUFtQjtBQUM1QixXQUFPLElBQUksUUFBUyxZQUFhLEtBQUs7QUFBQTtBQUFBLE1BTTdCLFVBQW1CO0FBQzVCLFdBQU8sUUFBUSxZQUFhO0FBQUE7QUFBQSxFQUd2QixXQUFtQjtBQUN4QixVQUFNLElBQUksS0FBSyxTQUFTLElBQUssQ0FBRSxNQUFPLEVBQUUsUUFBUztBQUNqRCxXQUFPLFlBQWEsRUFBRyxPQUFVLEVBQUcsT0FBVSxFQUFHLE9BQVUsRUFBRyxPQUFVLEVBQUcsT0FBVSxFQUFHLE9BQVUsRUFBRyxPQUFVLEVBQUcsT0FBVSxFQUFHO0FBQUE7QUFBQSxFQU0xSCxRQUFpQjtBQUN0QixXQUFPLElBQUksUUFBUyxLQUFLLFNBQVM7QUFBQTtBQUFBLEVBTTdCLFlBQWEsVUFBK0I7QUFDakQsV0FBTyxRQUFRLFNBQVUsTUFBTSxHQUFHO0FBQUE7QUFBQSxFQU03QixZQUFhLFFBQTBCO0FBQzVDLFdBQU8sSUFBSSxRQUFTLFNBQVUsS0FBSyxVQUFVO0FBQUE7QUFBQSxhQU03QixXQUFvQjtBQUNwQyxXQUFPLElBQUksUUFBUztBQUFBO0FBQUEsU0FPUixZQUFhLFVBQStCO0FBQ3hELFFBQUssU0FBUyxXQUFXLEdBQUk7QUFDM0IsYUFBTyxRQUFRO0FBQUEsV0FDVjtBQUNMLGFBQU8sSUFBSSxRQUFTLGFBQWMsR0FBRyxTQUFTLElBQUssQ0FBRSxNQUFPLEVBQUU7QUFBQTtBQUFBO0FBQUEsU0FRcEQsbUJBQW9CLFNBQTRCO0FBQzVELFdBQU8sSUFBSSxRQUFTLHVCQUF3QixRQUFRO0FBQUE7QUFBQSxTQU94QyxZQUFhLFNBQTRCO0FBQ3JELFdBQU8sSUFBSSxRQUFTLGFBQWMsUUFBUTtBQUFBO0FBQUEsU0FPOUIsZUFBZ0IsWUFBa0M7QUFDOUQsV0FBTyxJQUFJLFFBQVMsbUJBQW9CLFdBQVc7QUFBQTtBQUFBOzs7QUNoSGhELDRCQUE2QixNQUFrQztBQUNwRSxRQUFNLElBQUksS0FBTTtBQUNoQixRQUFNLElBQUksS0FBTTtBQUNoQixRQUFNLElBQUksS0FBTTtBQUNoQixRQUFNLElBQUksS0FBTTtBQUVoQixTQUFPO0FBQUEsSUFDTCxJQUFNLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQUcsSUFBTSxJQUFJLElBQUksSUFBTSxJQUFJO0FBQUEsSUFBRyxJQUFNLElBQUksSUFBSSxJQUFNLElBQUk7QUFBQSxJQUFHO0FBQUEsSUFDdkYsSUFBTSxJQUFJLElBQUksSUFBTSxJQUFJO0FBQUEsSUFBRyxJQUFNLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQUcsSUFBTSxJQUFJLElBQUksSUFBTSxJQUFJO0FBQUEsSUFBRztBQUFBLElBQ3ZGLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQUcsSUFBTSxJQUFJLElBQUksSUFBTSxJQUFJO0FBQUEsSUFBRyxJQUFNLElBQU0sSUFBSSxJQUFJLElBQU0sSUFBSTtBQUFBLElBQUc7QUFBQSxJQUN2RjtBQUFBLElBQUs7QUFBQSxJQUFLO0FBQUEsSUFBSztBQUFBO0FBQUE7OztBQ1haLHFCQUNMLFVBQ0EsVUFDQSxPQUNZO0FBQ1osUUFBTSxTQUFTLG1CQUFvQjtBQUVuQyxRQUFNLEtBQUssTUFBTyxJQUFLLEtBQUssTUFBTyxJQUFLLEtBQUssTUFBTztBQUVwRCxTQUFPO0FBQUEsSUFDTCxPQUFRLEtBQU07QUFBQSxJQUNkLE9BQVEsS0FBTTtBQUFBLElBQ2QsT0FBUSxLQUFNO0FBQUEsSUFDZDtBQUFBLElBRUEsT0FBUSxLQUFNO0FBQUEsSUFDZCxPQUFRLEtBQU07QUFBQSxJQUNkLE9BQVEsS0FBTTtBQUFBLElBQ2Q7QUFBQSxJQUVBLE9BQVEsS0FBTTtBQUFBLElBQ2QsT0FBUSxLQUFNO0FBQUEsSUFDZCxPQUFRLE1BQU87QUFBQSxJQUNmO0FBQUEsSUFFQSxTQUFVO0FBQUEsSUFDVixTQUFVO0FBQUEsSUFDVixTQUFVO0FBQUEsSUFDVjtBQUFBO0FBQUE7OztBQ2hDRyx5QkFBMEIsR0FBd0I7QUFDdkQsUUFDRSxNQUFNLEVBQUksSUFBSyxNQUFNLEVBQUksSUFBSyxNQUFNLEVBQUksSUFBSyxNQUFNLEVBQUksSUFDdkQsTUFBTSxFQUFJLElBQUssTUFBTSxFQUFJLElBQUssTUFBTSxFQUFJLElBQUssTUFBTSxFQUFJLElBQ3ZELE1BQU0sRUFBSSxJQUFLLE1BQU0sRUFBSSxJQUFLLE1BQU0sRUFBRyxLQUFNLE1BQU0sRUFBRyxLQUN0RCxNQUFNLEVBQUcsS0FBTSxNQUFNLEVBQUcsS0FBTSxNQUFNLEVBQUcsS0FBTSxNQUFNLEVBQUcsS0FDdEQsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FDdEQsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FDdEQsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FDdEQsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FDdEQsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FDdEQsTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFFeEQsU0FBTyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQTs7O0FDWHBFLHlCQUEwQixHQUErQjtBQUM5RCxRQUFNLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUFLLE1BQU0sRUFBRyxJQUN6QyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFBSyxNQUFNLEVBQUcsSUFDckMsTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQUssTUFBTSxFQUFHLElBQ3JDLFFBQVEsTUFBTSxNQUFNO0FBRXRCLE1BQUssUUFBUSxHQUFJO0FBQ2YsVUFBTSxJQUFJLE1BQU0sS0FBSyxLQUFNLFFBQVE7QUFDbkMsV0FBTztBQUFBLE1BQ0gsT0FBTSxPQUFRO0FBQUEsTUFDZCxPQUFNLE9BQVE7QUFBQSxNQUNkLE9BQU0sT0FBUTtBQUFBLE1BQ2hCLE9BQU87QUFBQTtBQUFBLGFBRUMsTUFBTSxPQUFPLE1BQU0sS0FBTTtBQUNuQyxVQUFNLElBQUksSUFBTSxLQUFLLEtBQU0sSUFBTSxNQUFNLE1BQU07QUFDN0MsV0FBTztBQUFBLE1BQ0wsT0FBTztBQUFBLE1BQ0wsT0FBTSxPQUFRO0FBQUEsTUFDZCxPQUFNLE9BQVE7QUFBQSxNQUNkLE9BQU0sT0FBUTtBQUFBO0FBQUEsYUFFUixNQUFNLEtBQU07QUFDdEIsVUFBTSxJQUFJLElBQU0sS0FBSyxLQUFNLElBQU0sTUFBTSxNQUFNO0FBQzdDLFdBQU87QUFBQSxNQUNILE9BQU0sT0FBUTtBQUFBLE1BQ2hCLE9BQU87QUFBQSxNQUNMLE9BQU0sT0FBUTtBQUFBLE1BQ2QsT0FBTSxPQUFRO0FBQUE7QUFBQSxTQUViO0FBQ0wsVUFBTSxJQUFJLElBQU0sS0FBSyxLQUFNLElBQU0sTUFBTSxNQUFNO0FBQzdDLFdBQU87QUFBQSxNQUNILE9BQU0sT0FBUTtBQUFBLE1BQ2QsT0FBTSxPQUFRO0FBQUEsTUFDaEIsT0FBTztBQUFBLE1BQ0wsT0FBTSxPQUFRO0FBQUE7QUFBQTtBQUFBOzs7QUNuQ2YseUJBQTBCLEdBQStCO0FBQzlELFNBQU8sZ0JBQWlCLGFBQWM7QUFBQTs7O0FDRWpDLHVCQUF3QixHQUk3QjtBQUNBLE1BQUksS0FBSyxVQUFXLENBQUUsRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHO0FBQ3pDLFFBQU0sS0FBSyxVQUFXLENBQUUsRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHO0FBQzNDLFFBQU0sS0FBSyxVQUFXLENBQUUsRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHO0FBRzNDLFFBQU0sTUFBTSxnQkFBaUI7QUFDN0IsTUFBSyxNQUFNLEdBQUk7QUFBRSxTQUFLLENBQUM7QUFBQTtBQUV2QixRQUFNLFFBQVEsSUFBTTtBQUNwQixRQUFNLFFBQVEsSUFBTTtBQUNwQixRQUFNLFFBQVEsSUFBTTtBQUVwQixRQUFNLGlCQUFpQixFQUFFO0FBRXpCLGlCQUFnQixNQUFPO0FBQ3ZCLGlCQUFnQixNQUFPO0FBQ3ZCLGlCQUFnQixNQUFPO0FBRXZCLGlCQUFnQixNQUFPO0FBQ3ZCLGlCQUFnQixNQUFPO0FBQ3ZCLGlCQUFnQixNQUFPO0FBRXZCLGlCQUFnQixNQUFPO0FBQ3ZCLGlCQUFnQixNQUFPO0FBQ3ZCLGlCQUFnQixPQUFRO0FBRXhCLFNBQU87QUFBQSxJQUNMLFVBQVUsQ0FBRSxFQUFHLEtBQU0sRUFBRyxLQUFNLEVBQUc7QUFBQSxJQUNqQyxPQUFPLENBQUUsSUFBSSxJQUFJO0FBQUEsSUFDakIsVUFBVSxnQkFBaUI7QUFBQTtBQUFBOzs7QUN2Q3hCLHNCQUNMLFFBQ1k7QUFDWixTQUFPO0FBQUEsSUFDTCxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFBSyxPQUFRO0FBQUEsSUFBSztBQUFBLElBQ3ZDLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUFLLE9BQVE7QUFBQSxJQUFLO0FBQUEsSUFDdkMsT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBLElBQUssT0FBUTtBQUFBLElBQUs7QUFBQSxJQUN2QztBQUFBLElBQUs7QUFBQSxJQUFLO0FBQUEsSUFBSztBQUFBO0FBQUE7OztBQ1BaLHFCQUFzQixHQUE0QjtBQUN2RCxRQUNFLE1BQU0sRUFBSSxJQUFLLE1BQU0sRUFBSSxJQUFLLE1BQU0sRUFBSSxJQUFLLE1BQU0sRUFBSSxJQUN2RCxNQUFNLEVBQUksSUFBSyxNQUFNLEVBQUksSUFBSyxNQUFNLEVBQUksSUFBSyxNQUFNLEVBQUksSUFDdkQsTUFBTSxFQUFJLElBQUssTUFBTSxFQUFJLElBQUssTUFBTSxFQUFHLEtBQU0sTUFBTSxFQUFHLEtBQ3RELE1BQU0sRUFBRyxLQUFNLE1BQU0sRUFBRyxLQUFNLE1BQU0sRUFBRyxLQUFNLE1BQU0sRUFBRyxLQUN0RCxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN0RCxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN0RCxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN0RCxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN0RCxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUN0RCxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUV4RCxRQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBRTlFLE1BQUssUUFBUSxHQUFNO0FBQUUsV0FBTyxTQUFVLEdBQUc7QUFBQTtBQUV6QyxTQUFPLFNBQVU7QUFBQSxJQUNmLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzlCLE1BQU0sTUFB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QyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFDMUMsTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQSxJQUUxQyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFDMUMsTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQSxJQUMxQyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFFMUMsTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQSxJQUMxQyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFDMUMsTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBRTFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQSxJQUMxQyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQUEsSUFDMUMsTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLElBQzFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQTtBQUFBOzs7QUMvQnZDLHlCQUNMLE1BQU0sSUFDTixPQUFPLE1BQ1AsTUFBTSxLQUNOLFNBQVMsR0FDRztBQUNaLFFBQU0sSUFBSSxJQUFNLEtBQUssSUFBSyxNQUFNLEtBQUssS0FBSztBQUMxQyxRQUFNLElBQU0sTUFBTTtBQUNsQixTQUFPO0FBQUEsSUFDTCxJQUFJO0FBQUEsSUFBUTtBQUFBLElBQUs7QUFBQSxJQUFLO0FBQUEsSUFDdEI7QUFBQSxJQUFLO0FBQUEsSUFBRztBQUFBLElBQUs7QUFBQSxJQUNiO0FBQUEsSUFBSztBQUFBLElBQUssQ0FBRyxPQUFNLFFBQVM7QUFBQSxJQUFHO0FBQUEsSUFDL0I7QUFBQSxJQUFLO0FBQUEsSUFBSyxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUc7QUFBQTtBQUFBOzs7QUNqQjVCLHVCQUF3QixPQUE0QjtBQUN6RCxRQUFNLElBQUksS0FBSyxJQUFLO0FBQ3BCLFFBQU0sSUFBSSxLQUFLLElBQUs7QUFFcEIsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUNUO0FBQUEsSUFBRztBQUFBLElBQUcsQ0FBQztBQUFBLElBQUc7QUFBQSxJQUNWO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFDVDtBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFBO0FBQUE7OztBQ1JOLHVCQUF3QixPQUE0QjtBQUN6RCxRQUFNLElBQUksS0FBSyxJQUFLO0FBQ3BCLFFBQU0sSUFBSSxLQUFLLElBQUs7QUFFcEIsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUNUO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFDVCxDQUFDO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFDVjtBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFBO0FBQUE7OztBQ1JOLHVCQUF3QixPQUE0QjtBQUN6RCxRQUFNLElBQUksS0FBSyxJQUFLO0FBQ3BCLFFBQU0sSUFBSSxLQUFLLElBQUs7QUFFcEIsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUFHLENBQUM7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFBLElBQ1Y7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUNUO0FBQUEsSUFBRztBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFDVDtBQUFBLElBQUc7QUFBQSxJQUFHO0FBQUEsSUFBRztBQUFB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QU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUM3QixDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUM3QixDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lB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LENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDdEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDdkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENB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UUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsWUFBWTtZQUlwRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsWUFBWTtZQUlwRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsWUFBWTtZQUlwRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsWUFBWTtZQUlwRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsWUFBWTtZQUlwRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxL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QyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUN2QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTTtZQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFlBQVk7WUFJcEQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUN2QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTTtZQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFlBQVk7WUFJcEQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN0RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN0RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUN2QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTTtZQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFlBQVk7WUFLcEQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUN2QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTTtZQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFlBQVk7WUFJcEQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN0RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN0RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUN2QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTTtZQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFlBQVk7WUFJcEQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUN2QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTTtZQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFlBQVk7U0FDcEQ7UUFDRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDekMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVELENBQUM7SUFDRCxnQ0FBZ0MsQ0FBQyxNQUFtQjtRQUNuRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWTtRQUN0QyxNQUFNLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsR0FBRyxNQUFNO1FBSTlDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDdEMsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNULElBQUksQ0FBQyxHQUFHLENBQUM7WUFXVCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2xELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2xELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3JELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztZQVdwRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3JELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDdkMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBVXBELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFD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aWMvc3R5bGUuY3NzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL2Ryb3Bib3gvZGlzdC9Ecm9wYm94LXNkay5taW4uanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9lYXJjdXQvc3JjL2VhcmN1dC5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL2xpYnRlc3MvbGlidGVzcy5taW4uanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL2NhcHR1cmUuc3ZnIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvY29weS5zdmciLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3B1YmxpYy9kb3dubG9hZC5zdmciLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3B1YmxpYy9mb3JiaWQuc3ZnIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvbGF1bmNoLnN2ZyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL29rLnN2ZyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL3BsYXkuc3ZnIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvcGx1Zy5zdmciLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3B1YmxpYy9yZWRvLnN2ZyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL3Jlc2l6ZS5zdmciLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3B1YmxpYy9zb2x2ZS5zdmciLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3B1YmxpYy90aW1lLnN2ZyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL3VuZG8uc3ZnIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvaW1hZ2VzL2Jyb3cud2VicCIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL2ltYWdlcy9jaGFyY29hbC53ZWJwIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvaW1hZ2VzL2NpcmNsZS53ZWJwIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvaW1hZ2VzL2dyYWRpZW50X2JvdHRvbV90b190b3Aud2VicCIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL2ltYWdlcy9vaWxfMDEud2VicCIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL2ltYWdlcy9vaWxfdGFwZXIud2VicCIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL2ltYWdlcy9zcXVhcmUud2VicCIsIndlYnBhY2s6Ly9zcGx1bmdlL2lnbm9yZWR8L2hvbWUvcnVubmVyL3dvcmsvc3BsdW5nZS9zcGx1bmdlL25vZGVfbW9kdWxlcy9kcm9wYm94L2Rpc3R8Y3J5cHRvIiwid2VicGFjazovL3NwbHVuZ2UvaWdub3JlZHwvaG9tZS9ydW5uZXIvd29yay9zcGx1bmdlL3NwbHVuZ2Uvbm9kZV9tb2R1bGVzL2Ryb3Bib3gvZGlzdHx1dGlsIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvY2hyb21hLWpzL2Nocm9tYS5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NwbHVuZ2Uvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vc3BsdW5nZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3NwbHVuZ2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zcGx1bmdlL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3NwbHVuZ2Uvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3NwbHVuZ2UvLi9wdWJsaWMvSmV0QnJhaW5zTW9uby1SZWd1bGFyLnR0ZiIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vcHVibGljL3N0eWxlLmNzcz9jZWM3Iiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2Vudmlyb25tZW50LmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2xvb3AuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvZ2xvYmFscy5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9SZXNpemVPYnNlcnZlclNpbmdsZXRvbi5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9kb20uanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvc3R5bGVfbWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9hbmltYXRpb25zLmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL3V0aWxzLmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2xpZmVjeWNsZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9zY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvYXdhaXRfYmxvY2suanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvZWFjaC5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvc2hhcmVkL2Jvb2xlYW5fYXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9zc3IuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvQ29tcG9uZW50LmpzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9zaGFyZWQvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9kZXYuanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvZGlzY2xvc2UtdmVyc2lvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9zdG9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL3N0b3JlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvYWxnb3JpdGhtL2JpbmFyeVNlYXJjaC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2FsZ29yaXRobS90cmF2ZXJzZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2FycmF5L2FycmF5UmFuZ2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9hcnJheS9hcnJheVNlcmlhbC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2FycmF5L2FycmF5U2V0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvYXJyYXkvY29uc3RhbnRzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvYXJyYXkvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9DRFMvQ0RTLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvQ2xvY2svQ2xvY2sudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9DbG9jay9DbG9ja0ZyYW1lLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvQ2xvY2svQ2xvY2tSZWFsdGltZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2NvbG9yL2NvbG9yRnJvbUF0YXJpU1QudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3V0aWxzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvY29sb3IvY29sb3JIU1YyUkdCLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvY29sb3IvY29sb3JUb0hleC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvdmVjL3ZlY0RvdC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2NvbG9yL2NvbG9yVHVyYm8udHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9jb2xvci9lb3RmUmVjNzA5LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvY29sb3Ivb2V0ZlJlYzcwOS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2RhZy9kYWdFZGdlc1BhcmVudHMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9kYWcvZGFnRWRnZXNBbmNlc3RvcnMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9kYWcvZGFnRWRnZXNDaGlsZHJlbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2RhZy9kYWdFZGdlc0Rlc2NlbmRhbnRzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvZGFnL2RhZ0VkZ2VzUGFyZW50LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvZGFnL2RhZ0VkZ2VzUmVzb2x2ZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL2VkdC9lZHQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9FeHBTbW9vdGgvRXhwU21vb3RoLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvUG9vbC9Qb29sLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvR1BVVGltZXIvR1BVVGltZXIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9IaXN0b3J5TWVhbkNhbGN1bGF0b3IvSGlzdG9yeU1lYW5DYWxjdWxhdG9yLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvSGlzdG9yeU1lYW5DYWxjdWxhdG9yL0hpc3RvcnlQZXJjZW50aWxlQ2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL0hpc3RvcnlNZWFuQ2FsY3VsYXRvci9IaXN0b3J5TWVkaWFuQ2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL01hcE9mU2V0L01hcE9mU2V0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjQWJzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjQWRkLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjRGl2aWRlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjTGVuZ3RoLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjTGVuZ3RoU3EudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3ZlYy92ZWNNYW5oYXR0YW5MZW5ndGgudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3ZlYy92ZWNNdWx0aXBseS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvdmVjL3ZlY05lZy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvdmVjL3ZlY1NjYWxlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjTm9ybWFsaXplLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvdmVjU3ViLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMvVmVjdG9yLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWM0L3ZlYzRBcHBseU1hdHJpeDQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3ZlYzMvdmVjM0FwcGx5TWF0cml4NC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcXVhdC9xdWF0SW52ZXJzZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcXVhdC9xdWF0TXVsdGlwbHkudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3ZlYzMvdmVjM0FwcGx5UXVhdGVybmlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvdmVjMy92ZWMzQ3Jvc3MudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3ZlYzMvdmVjM09ydGhvTm9ybWFsaXplLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC92ZWMzL1ZlY3RvcjMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL2JveDMvYm94M0NvbnRhaW5zUG9pbnQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL2JveDMvQm94My50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0My9tYXQzRnJvbU1hdDRUcmFuc3Bvc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDMvbWF0M0ludmVyc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDMvbWF0M0NyZWF0ZU5vcm1hbE1hdHJpeC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0My9tYXQzRGV0ZXJtaW5hbnQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDMvbWF0M0Zyb21NYXQ0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQzL21hdDNGcm9tUXVhdGVybmlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0My9tYXQzTXVsdGlwbHkudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDMvbWF0M1RyYW5zcG9zZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0My9NYXRyaXgzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRGcm9tUXVhdGVybmlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0Q29tcG9zZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0RGV0ZXJtaW5hbnQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3F1YXQvcXVhdEZyb21NYXRyaXgzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9xdWF0L3F1YXRGcm9tTWF0cml4NC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0RGVjb21wb3NlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRGcm9tTWF0My50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0SW52ZXJzZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0TG9va0F0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRMb29rQXRJbnZlcnNlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRNdWx0aXBseS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0UGVyc3BlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDQvbWF0NFJvdGF0aW9uWC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0Um90YXRpb25ZLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRSb3RhdGlvbloudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDQvbWF0NFNjYWxlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRTY2FsZVNjYWxhci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0NC9tYXQ0VHJhbnNsYXRlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQ0L21hdDRUcmFuc3Bvc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDQvTWF0cml4NC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcXVhdC9xdWF0RnJvbUF4aXNBbmdsZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcXVhdC9xdWF0TG9va1JvdGF0aW9uLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9xdWF0L3F1YXROb3JtYWxpemUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3F1YXQvcXVhdFJvdGF0aW9uWC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcXVhdC9xdWF0Um90YXRpb25ZLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9xdWF0L3F1YXRSb3RhdGlvbloudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3F1YXQvcXVhdFNsZXJwLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9xdWF0L1F1YXRlcm5pb24udHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21vZC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvc2FuaXRpemVBbmdsZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvZXVsZXIvZXVsZXJGcm9tTWF0My50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvZXVsZXIvZXVsZXJGcm9tTWF0NC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvZXVsZXIvZXVsZXJGcm9tUXVhdGVybmlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcXVhdC9xdWF0RnJvbUV1bGVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9ldWxlci9FdWxlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcmF5My9yYXkzRGlzdGFuY2VUb1NwaGVyZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbGluZTMvbGluZTNEZWx0YS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcmF5My9yYXkzRnJvbUxpbmUzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9yYXkzL1JheTMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL2xpbmUzL2xpbmUzQXBwbHlNYXRyaXg0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9saW5lMy9saW5lM0F0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9saW5lMy9saW5lM0Nsb3Nlc3RQb2ludFRvUG9pbnQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL2xpbmUzL2xpbmUzRGlzdGFuY2VUb1BvaW50LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9saW5lMy9MaW5lMy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvbWF0Mi9tYXQyRGV0ZXJtaW5hbnQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDIvbWF0MkludmVyc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDIvbWF0Mk11bHRpcGx5LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9tYXQyL21hdDJUcmFuc3Bvc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL21hdDIvTWF0cml4Mi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvdmVjMy92ZWMzQXBwbHlNYXRyaXgzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9wbGFuZTMvcGxhbmUzQXBwbHlNYXRyaXg0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9wbGFuZTMvcGxhbmUzRGlzdGFuY2VUb1BvaW50LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9wbGFuZTMvcGxhbmUzTm9ybWFsaXplLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9wbGFuZTMvUGxhbmUzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9wbGFuZTMvcGxhbmVzM0NvbnRhaW5Qb2ludC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcGxhbmUzL3BsYW5lczNGcm9tQm94My50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcGxhbmUzL3BsYW5lczNGcm9tUHJvamVjdGlvbk1hdHJpeC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvcGxhbmUzL3BsYW5lczNJbnRlcnNlY3RCb3gzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9wbGFuZTMvcGxhbmVzM0ludGVyc2VjdFNwaGVyZTMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3BsYW5lMy9QbGFuZXMzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9zcGhlcmUzL3NwaGVyZTNDb250YWluc1BvaW50LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWF0aC9zcGhlcmUzL1NwaGVyZTMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9tYXRoL3ZlYzQvdmVjNEFwcGx5TWF0cml4My50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL21hdGgvdmVjNC9WZWN0b3I0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvbWlkaS9taWRpUGFyc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9wb2tlci9wb2tlclJhbmtzQnlTdHJlbmd0aC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3Bva2VyL3Bva2VyU3VpdHNCeUluZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvcG9rZXIvY3JlYXRlUG9rZXJEZWNrLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvcG9rZXIvcG9rZXJIYW5kU3RyZW5ndGhNYXAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9wb2tlci9wb2tlclJhbmtTdHJlbmd0aE1hcC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3Bva2VyL3Bva2VyU3VpdEluZGV4TWFwLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvcG9rZXIvc29ydFBva2VyQ2FyZHNCeVJhbmsudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9wb2tlci9ldmFsdWF0ZVBva2VySGFuZC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3Bva2VyL3Bva2VySGFuZHNCeVN0cmVuZ3RoLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvcmV0cnkvYXN5bmNSZXRyeS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3JldHJ5L3JldHJ5LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvc3RuaWNjYy9wYXJzZVNUTklDQ0MudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9zdG5pY2NjL3N0bmljY2NUb1NWRy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL1Ntb290aERhbXAvU21vb3RoRGFtcC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL1N3YXAvU3dhcC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL1RhcFRlbXBvL1RhcFRlbXBvLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQDBiNXZyL2V4cGVyaW1lbnRhbC9zcmMvdGlueXNlcS9jcmVhdGVUaW55c2VxUG9seVJlYWRlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3RpbnlzZXEvY3JlYXRlVGlueXNlcVJlYWRlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3RpbnlzZXEvdGlueXNlcUZyb21NaWRpUGFyc2VSZXN1bHQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9Yb3JzaGlmdC9Yb3JzaGlmdC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL3l1Z29wL2dldFl1Z29wVGV4dC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0AwYjV2ci9leHBlcmltZW50YWwvc3JjL0JpbmFyeUhlYXAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AMGI1dnIvZXhwZXJpbWVudGFsL3NyYy9ub3RpZnlPYnNlcnZlcnMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy93bWF0aC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL2dsL1RleHR1cmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9nbC9GcmFtZWJ1ZmZlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL2dsX3V0aWxzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvY29tcG9uZW50cy9TZW1pTW9kYWwuc3ZlbHRlIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvY29tcG9uZW50cy9Lbm9iLnN2ZWx0ZSIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL2NvbXBvbmVudHMvQnJ1c2hTaXplV2lkZ2V0LnN2ZWx0ZSIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL3N0dWZmLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvYnJ1c2hfc3Ryb2tlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvY29tcG9uZW50cy9CcnVzaFR5cGVXaWRnZXQuc3ZlbHRlIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvY29tcG9uZW50cy9CcnVzaFByZXNldFdpZGdldC5zdmVsdGUiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9jb21wb25lbnRzL1VuZG9SZWRvV2lkZ2V0LnN2ZWx0ZSIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvYXNzZXJ0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2NyeXB0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2RlZXBDb3B5LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2dsb2JhbC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9kZWZhdWx0cy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9kZWZlcnJlZC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9lbXVsYXRvci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9lbnZpcm9ubWVudC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9lcnJvcnMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvanNvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9qd3QudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvb2JqLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL3Byb21pc2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvcXVlcnkudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvc2hhMS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9zdWJzY3JpYmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvdmFsaWRhdGlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy91dGY4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL3V1aWQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvZXhwb25lbnRpYWxfYmFja29mZi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9mb3JtYXR0ZXJzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2NvbXBhdC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvc3JjL2NvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvc3JjL3Byb3ZpZGVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2NvbXBvbmVudC9zcmMvY29tcG9uZW50X2NvbnRhaW5lci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9sb2dnZXIvc3JjL2xvZ2dlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC93cmFwLWlkYi12YWx1ZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvc3JjL3BsYXRmb3JtTG9nZ2VyU2VydmljZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvc3JjL2xvZ2dlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvc3JjL2ludGVybmFsLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9zcmMvZXJyb3JzLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9zcmMvZmlyZWJhc2VBcHAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9hcGkudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9pbmRleGVkZGIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9oZWFydGJlYXRTZXJ2aWNlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9zcmMvcmVnaXN0ZXJDb3JlQ29tcG9uZW50cy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvc3JjL2luZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9tb2RlbC9lbnVtX21hcHMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9lcnJvcnMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2xvZy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvYXNzZXJ0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9sb2NhdGlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvbmF2aWdhdG9yLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9kZWxheS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvZW11bGF0b3IudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2ZldGNoX3Byb3ZpZGVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9lcnJvcnMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2luZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvYWNjb3VudC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvdGltZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvaWRfdG9rZW5fcmVzdWx0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci9pbnZhbGlkYXRpb24udHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL3Byb2FjdGl2ZV9yZWZyZXNoLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci91c2VyX21ldGFkYXRhLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci9yZWxvYWQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2F1dGhlbnRpY2F0aW9uL3Rva2VuLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci90b2tlbl9tYW5hZ2VyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci91c2VyX2ltcGwudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2luc3RhbnRpYXRvci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3BlcnNpc3RlbmNlL2luX21lbW9yeS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3BlcnNpc3RlbmNlL3BlcnNpc3RlbmNlX3VzZXJfbWFuYWdlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvYnJvd3Nlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvdmVyc2lvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vcmVjYXB0Y2hhLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvcmVjYXB0Y2hhL3JlY2FwdGNoYS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL2xvYWRfanMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9yZWNhcHRjaGEvcmVjYXB0Y2hhX2VudGVycHJpc2VfdmVyaWZpZXIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hdXRoL21pZGRsZXdhcmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hdXRoL2F1dGhfaW1wbC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2F1dGgvaW5pdGlhbGl6ZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2F1dGgvZW11bGF0b3IudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9jcmVkZW50aWFscy9hdXRoX2NyZWRlbnRpYWwudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2FjY291bnRfbWFuYWdlbWVudC9lbWFpbF9hbmRfcGFzc3dvcmQudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2F1dGhlbnRpY2F0aW9uL2VtYWlsX2FuZF9wYXNzd29yZC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vZW1haWxfbGluay50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2NyZWRlbnRpYWxzL2VtYWlsLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9jcmVkZW50aWFscy9vYXV0aC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vc21zLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvY3JlZGVudGlhbHMvcGhvbmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hY3Rpb25fY29kZV91cmwudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9wcm92aWRlcnMvZW1haWwudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9wcm92aWRlcnMvZmVkZXJhdGVkLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcHJvdmlkZXJzL29hdXRoLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcHJvdmlkZXJzL2ZhY2Vib29rLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcHJvdmlkZXJzL2dvb2dsZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3Byb3ZpZGVycy9naXRodWIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9jcmVkZW50aWFscy9zYW1sLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcHJvdmlkZXJzL3NhbWwudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9wcm92aWRlcnMvdHdpdHRlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vc2lnbl91cC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvdXNlcl9jcmVkZW50aWFsX2ltcGwudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL2Fub255bW91cy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9tZmEvbWZhX2Vycm9yLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9wcm92aWRlcnMudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL2xpbmtfdW5saW5rLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci9yZWF1dGhlbnRpY2F0ZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3N0cmF0ZWdpZXMvY3JlZGVudGlhbC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vY3VzdG9tX3Rva2VuLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9jdXN0b21fdG9rZW4udHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvbWZhL21mYV9pbmZvLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9hY3Rpb25fY29kZV9zZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3N0cmF0ZWdpZXMvZW1haWxfYW5kX3Bhc3N3b3JkLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9lbWFpbF9saW5rLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9jcmVhdGVfYXV0aF91cmkudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL2VtYWlsLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvcHJvZmlsZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvYWNjb3VudF9pbmZvLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci9hZGRpdGlvbmFsX3VzZXJfaW5mby50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2luZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfc2Vzc2lvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9tZmEvbWZhX3Jlc29sdmVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvbWZhLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfdXNlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3BlcnNpc3RlbmNlL2luZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvcGVyc2lzdGVuY2UvYnJvd3Nlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3BlcnNpc3RlbmNlL2xvY2FsX3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9wZXJzaXN0ZW5jZS9zZXNzaW9uX3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9tZXNzYWdlY2hhbm5lbC9wcm9taXNlLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvbWVzc2FnZWNoYW5uZWwvcmVjZWl2ZXIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2V2ZW50X2lkLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvbWVzc2FnZWNoYW5uZWwvc2VuZGVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvYXV0aF93aW5kb3cudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci91dGlsL3dvcmtlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3BlcnNpc3RlbmNlL2luZGV4ZWRfZGIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2F1dGhlbnRpY2F0aW9uL21mYS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3JlY2FwdGNoYS9yZWNhcHRjaGFfbW9jay50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3JlY2FwdGNoYS9yZWNhcHRjaGFfbG9hZGVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvcmVjYXB0Y2hhL3JlY2FwdGNoYV92ZXJpZmllci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3N0cmF0ZWdpZXMvcGhvbmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9wcm92aWRlcnMvcGhvbmUudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL3Jlc29sdmVyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9pZHAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL2Fic3RyYWN0X3BvcHVwX3JlZGlyZWN0X29wZXJhdGlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3N0cmF0ZWdpZXMvcG9wdXAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL3JlZGlyZWN0LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvc3RyYXRlZ2llcy9yZWRpcmVjdC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2F1dGgvYXV0aF9ldmVudF9tYW5hZ2VyLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9wcm9qZWN0X2NvbmZpZy9nZXRfcHJvamVjdF9jb25maWcudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL3ZhbGlkYXRlX29yaWdpbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL2lmcmFtZS9nYXBpLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvaWZyYW1lL2lmcmFtZS50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3V0aWwvcG9wdXAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9wb3B1cF9yZWRpcmVjdC50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9tZmEvbWZhX2Fzc2VydGlvbi50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL21mYS9hc3NlcnRpb25zL3Bob25lLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9hc3NlcnRpb25zL3RvdHAudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hdXRoL2ZpcmViYXNlX2ludGVybmFsLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvYXV0aC9yZWdpc3Rlci50cyIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL2luZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2luZGV4LnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvZHJvcGJveF9hdXRoLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvY29tcG9uZW50cy9HYWxsZXJ5V2lkZ2V0LnN2ZWx0ZSIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL2NvbXBvbmVudHMvRmxvYXRpbmdNb2RhbC5zdmVsdGUiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9jb21wb25lbnRzL1BpY2tDb2xvdXJXaWRnZXQuc3ZlbHRlIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvY29tcG9uZW50cy9UZXh0dXJlV2lkZ2V0LnN2ZWx0ZSIsIndlYnBhY2s6Ly9zcGx1bmdlLy4vc3JjL2NvbXBvbmVudHMvQmxlbmRpbmdDb2xvdXJTcGFjZVdpZGdldC5zdmVsdGUiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9jb21wb25lbnRzL0NvbG91ckRpc3BsYXkuc3ZlbHRlIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvSU8udHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9nbC9CdWZmZXIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9nbC9TaGFkZXJQcm9ncmFtLnRzIiwid2VicGFjazovL3NwbHVuZ2UvLi9zcmMvZ2wvVGhpbmcudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9kcmF3ZXIudHMiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9jb21wb25lbnRzL0FwcC5zdmVsdGUiLCJ3ZWJwYWNrOi8vc3BsdW5nZS8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgYm9keSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgLyogYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7ICovXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcbn1cbmh0bWwge1xuICB0b3VjaC1hY3Rpb246IG5vbmU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5ib2R5e1xuICBtYXJnaW46IDBweDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuY2FudmFzIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBtYXgtaGVpZ2h0OiAxMDAlO1xuICAvKiB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlOyAqL1xuICB0b3VjaC1hY3Rpb246IG5vbmU7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3B1YmxpYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxTQUFTO0VBQ1QsVUFBVTtFQUNWLFlBQVk7RUFDWixhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLDZCQUE2QjtFQUM3QixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtBQUNkO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEI7aUJBQ2U7RUFDZixrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLyogYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7ICovXFxuICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVxcbmh0bWwge1xcbiAgdG91Y2gtYWN0aW9uOiBub25lO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbmJvZHl7XFxuICBtYXJnaW46IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG5jYW52YXMge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgbWF4LWhlaWdodDogMTAwJTtcXG4gIC8qIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlOyAqL1xcbiAgdG91Y2gtYWN0aW9uOiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3QoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLHQpOnQoKGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5Ecm9wYm94PXt9KX0odGhpcywoZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlLHQpe2Zvcih2YXIgcj0wO3QubGVuZ3RoPnI7cisrKXt2YXIgaT10W3JdO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLmtleSxpKX19ZnVuY3Rpb24gaShlLHQsaSl7cmV0dXJuIHQmJnIoZS5wcm90b3R5cGUsdCksaSYmcihlLGkpLGV9ZnVuY3Rpb24gcyhlKXtyZXR1cm4ocz1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKGUpe3JldHVybiBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpfSkoZSl9ZnVuY3Rpb24gbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5fX3Byb3RvX189dCxlfSkoZSx0KX1mdW5jdGlvbiBhKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIG8oZSx0LHIpe3JldHVybihvPWEoKT9SZWZsZWN0LmNvbnN0cnVjdDpmdW5jdGlvbihlLHQscil7dmFyIGk9W251bGxdO2kucHVzaC5hcHBseShpLHQpO3ZhciBzPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KGUsaSkpO3JldHVybiByJiZuKHMsci5wcm90b3R5cGUpLHN9KS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gdShlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXA/bmV3IE1hcDp2b2lkIDA7cmV0dXJuKHU9ZnVuY3Rpb24oZSl7aWYobnVsbD09PWV8fC0xPT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbChlKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSlyZXR1cm4gZTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtpZih2b2lkIDAhPT10KXtpZih0LmhhcyhlKSlyZXR1cm4gdC5nZXQoZSk7dC5zZXQoZSxyKX1mdW5jdGlvbiByKCl7cmV0dXJuIG8oZSxhcmd1bWVudHMscyh0aGlzKS5jb25zdHJ1Y3Rvcil9cmV0dXJuIHIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLG4ocixlKX0pKGUpfWZ1bmN0aW9uIGMoZSx0KXtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9KGUpOnR9dmFyIHA9XCJhcHBcIixsPVwidXNlclwiLGY9XCJ0ZWFtXCIsbT1cImRyb3Bib3hhcGkuY29tXCIsaD1cImRyb3Bib3guY29tXCIsZD17YXBpOlwiYXBpXCIsbm90aWZ5OlwiYm9sdFwiLGNvbnRlbnQ6XCJhcGktY29udGVudFwifSxfPXt9O2Z1bmN0aW9uIGcoZSl7dmFyIHQ9XCIwMDBcIi5jb25jYXQoZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO3JldHVyblwiXFxcXHVcIi5jb25jYXQodCl9Xy5hY2NvdW50U2V0UHJvZmlsZVBob3RvPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJhY2NvdW50L3NldF9wcm9maWxlX3Bob3RvXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJhY2NvdW50X2luZm8ud3JpdGVcIil9LF8uYXV0aFRva2VuRnJvbU9hdXRoMT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiYXV0aC90b2tlbi9mcm9tX29hdXRoMVwiLGUsXCJhcHBcIixcImFwaVwiLFwicnBjXCIsbnVsbCl9LF8uYXV0aFRva2VuUmV2b2tlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWVzdChcImF1dGgvdG9rZW4vcmV2b2tlXCIsbnVsbCxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsbnVsbCl9LF8uY2hlY2tBcHA9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImNoZWNrL2FwcFwiLGUsXCJhcHBcIixcImFwaVwiLFwicnBjXCIsbnVsbCl9LF8uY2hlY2tVc2VyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJjaGVjay91c2VyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJhY2NvdW50X2luZm8ucmVhZFwiKX0sXy5jb250YWN0c0RlbGV0ZU1hbnVhbENvbnRhY3RzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWVzdChcImNvbnRhY3RzL2RlbGV0ZV9tYW51YWxfY29udGFjdHNcIixudWxsLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImNvbnRhY3RzLndyaXRlXCIpfSxfLmNvbnRhY3RzRGVsZXRlTWFudWFsQ29udGFjdHNCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiY29udGFjdHMvZGVsZXRlX21hbnVhbF9jb250YWN0c19iYXRjaFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiY29udGFjdHMud3JpdGVcIil9LF8uZmlsZVByb3BlcnRpZXNQcm9wZXJ0aWVzQWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3Byb3BlcnRpZXMvcHJvcGVydGllcy9hZGRcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLndyaXRlXCIpfSxfLmZpbGVQcm9wZXJ0aWVzUHJvcGVydGllc092ZXJ3cml0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZV9wcm9wZXJ0aWVzL3Byb3BlcnRpZXMvb3ZlcndyaXRlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS53cml0ZVwiKX0sXy5maWxlUHJvcGVydGllc1Byb3BlcnRpZXNSZW1vdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy9wcm9wZXJ0aWVzL3JlbW92ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZVByb3BlcnRpZXNQcm9wZXJ0aWVzU2VhcmNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3Byb3BlcnRpZXMvcHJvcGVydGllcy9zZWFyY2hcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZVByb3BlcnRpZXNQcm9wZXJ0aWVzU2VhcmNoQ29udGludWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy9wcm9wZXJ0aWVzL3NlYXJjaC9jb250aW51ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEucmVhZFwiKX0sXy5maWxlUHJvcGVydGllc1Byb3BlcnRpZXNVcGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy9wcm9wZXJ0aWVzL3VwZGF0ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZVByb3BlcnRpZXNUZW1wbGF0ZXNBZGRGb3JUZWFtPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3Byb3BlcnRpZXMvdGVtcGxhdGVzL2FkZF9mb3JfdGVhbVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMudGVhbV9tZXRhZGF0YS53cml0ZVwiKX0sXy5maWxlUHJvcGVydGllc1RlbXBsYXRlc0FkZEZvclVzZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy90ZW1wbGF0ZXMvYWRkX2Zvcl91c2VyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS53cml0ZVwiKX0sXy5maWxlUHJvcGVydGllc1RlbXBsYXRlc0dldEZvclRlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy90ZW1wbGF0ZXMvZ2V0X2Zvcl90ZWFtXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy50ZWFtX21ldGFkYXRhLndyaXRlXCIpfSxfLmZpbGVQcm9wZXJ0aWVzVGVtcGxhdGVzR2V0Rm9yVXNlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZV9wcm9wZXJ0aWVzL3RlbXBsYXRlcy9nZXRfZm9yX3VzZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZVByb3BlcnRpZXNUZW1wbGF0ZXNMaXN0Rm9yVGVhbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3Byb3BlcnRpZXMvdGVtcGxhdGVzL2xpc3RfZm9yX3RlYW1cIixudWxsLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLnRlYW1fbWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZVByb3BlcnRpZXNUZW1wbGF0ZXNMaXN0Rm9yVXNlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3Byb3BlcnRpZXMvdGVtcGxhdGVzL2xpc3RfZm9yX3VzZXJcIixudWxsLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZVByb3BlcnRpZXNUZW1wbGF0ZXNSZW1vdmVGb3JUZWFtPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3Byb3BlcnRpZXMvdGVtcGxhdGVzL3JlbW92ZV9mb3JfdGVhbVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMudGVhbV9tZXRhZGF0YS53cml0ZVwiKX0sXy5maWxlUHJvcGVydGllc1RlbXBsYXRlc1JlbW92ZUZvclVzZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy90ZW1wbGF0ZXMvcmVtb3ZlX2Zvcl91c2VyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS53cml0ZVwiKX0sXy5maWxlUHJvcGVydGllc1RlbXBsYXRlc1VwZGF0ZUZvclRlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcHJvcGVydGllcy90ZW1wbGF0ZXMvdXBkYXRlX2Zvcl90ZWFtXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy50ZWFtX21ldGFkYXRhLndyaXRlXCIpfSxfLmZpbGVQcm9wZXJ0aWVzVGVtcGxhdGVzVXBkYXRlRm9yVXNlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZV9wcm9wZXJ0aWVzL3RlbXBsYXRlcy91cGRhdGVfZm9yX3VzZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLndyaXRlXCIpfSxfLmZpbGVSZXF1ZXN0c0NvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcmVxdWVzdHMvY291bnRcIixudWxsLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVfcmVxdWVzdHMucmVhZFwiKX0sXy5maWxlUmVxdWVzdHNDcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcmVxdWVzdHMvY3JlYXRlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlX3JlcXVlc3RzLndyaXRlXCIpfSxfLmZpbGVSZXF1ZXN0c0RlbGV0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZV9yZXF1ZXN0cy9kZWxldGVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVfcmVxdWVzdHMud3JpdGVcIil9LF8uZmlsZVJlcXVlc3RzRGVsZXRlQWxsQ2xvc2VkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcmVxdWVzdHMvZGVsZXRlX2FsbF9jbG9zZWRcIixudWxsLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVfcmVxdWVzdHMud3JpdGVcIil9LF8uZmlsZVJlcXVlc3RzR2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3JlcXVlc3RzL2dldFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZV9yZXF1ZXN0cy5yZWFkXCIpfSxfLmZpbGVSZXF1ZXN0c0xpc3RWMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZV9yZXF1ZXN0cy9saXN0X3YyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlX3JlcXVlc3RzLnJlYWRcIil9LF8uZmlsZVJlcXVlc3RzTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlX3JlcXVlc3RzL2xpc3RcIixudWxsLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVfcmVxdWVzdHMucmVhZFwiKX0sXy5maWxlUmVxdWVzdHNMaXN0Q29udGludWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVfcmVxdWVzdHMvbGlzdC9jb250aW51ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZV9yZXF1ZXN0cy5yZWFkXCIpfSxfLmZpbGVSZXF1ZXN0c1VwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZV9yZXF1ZXN0cy91cGRhdGVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVfcmVxdWVzdHMud3JpdGVcIil9LF8uZmlsZXNBbHBoYUdldE1ldGFkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9hbHBoYS9nZXRfbWV0YWRhdGFcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZXNBbHBoYVVwbG9hZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvYWxwaGEvdXBsb2FkXCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcInVwbG9hZFwiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NvcHlWMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvY29weV92MlwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NvcHk9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2NvcHlcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNDb3B5QmF0Y2hWMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvY29weV9iYXRjaF92MlwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NvcHlCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvY29weV9iYXRjaFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NvcHlCYXRjaENoZWNrVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2NvcHlfYmF0Y2gvY2hlY2tfdjJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNDb3B5QmF0Y2hDaGVjaz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvY29weV9iYXRjaC9jaGVja1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NvcHlSZWZlcmVuY2VHZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2NvcHlfcmVmZXJlbmNlL2dldFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NvcHlSZWZlcmVuY2VTYXZlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9jb3B5X3JlZmVyZW5jZS9zYXZlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzQ3JlYXRlRm9sZGVyVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2NyZWF0ZV9mb2xkZXJfdjJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNDcmVhdGVGb2xkZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2NyZWF0ZV9mb2xkZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNDcmVhdGVGb2xkZXJCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvY3JlYXRlX2ZvbGRlcl9iYXRjaFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc0NyZWF0ZUZvbGRlckJhdGNoQ2hlY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2NyZWF0ZV9mb2xkZXJfYmF0Y2gvY2hlY2tcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNEZWxldGVWMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvZGVsZXRlX3YyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzRGVsZXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9kZWxldGVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNEZWxldGVCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvZGVsZXRlX2JhdGNoXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzRGVsZXRlQmF0Y2hDaGVjaz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvZGVsZXRlX2JhdGNoL2NoZWNrXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzRG93bmxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2Rvd25sb2FkXCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcImRvd25sb2FkXCIsXCJmaWxlcy5jb250ZW50LnJlYWRcIil9LF8uZmlsZXNEb3dubG9hZFppcD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvZG93bmxvYWRfemlwXCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcImRvd25sb2FkXCIsXCJmaWxlcy5jb250ZW50LnJlYWRcIil9LF8uZmlsZXNFeHBvcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2V4cG9ydFwiLGUsXCJ1c2VyXCIsXCJjb250ZW50XCIsXCJkb3dubG9hZFwiLFwiZmlsZXMuY29udGVudC5yZWFkXCIpfSxfLmZpbGVzR2V0RmlsZUxvY2tCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvZ2V0X2ZpbGVfbG9ja19iYXRjaFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC5yZWFkXCIpfSxfLmZpbGVzR2V0TWV0YWRhdGE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2dldF9tZXRhZGF0YVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEucmVhZFwiKX0sXy5maWxlc0dldFByZXZpZXc9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2dldF9wcmV2aWV3XCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcImRvd25sb2FkXCIsXCJmaWxlcy5jb250ZW50LnJlYWRcIil9LF8uZmlsZXNHZXRUZW1wb3JhcnlMaW5rPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9nZXRfdGVtcG9yYXJ5X2xpbmtcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQucmVhZFwiKX0sXy5maWxlc0dldFRlbXBvcmFyeVVwbG9hZExpbms9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2dldF90ZW1wb3JhcnlfdXBsb2FkX2xpbmtcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNHZXRUaHVtYm5haWw9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2dldF90aHVtYm5haWxcIixlLFwidXNlclwiLFwiY29udGVudFwiLFwiZG93bmxvYWRcIixcImZpbGVzLmNvbnRlbnQucmVhZFwiKX0sXy5maWxlc0dldFRodW1ibmFpbFYyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9nZXRfdGh1bWJuYWlsX3YyXCIsZSxcImFwcCwgdXNlclwiLFwiY29udGVudFwiLFwiZG93bmxvYWRcIixcImZpbGVzLmNvbnRlbnQucmVhZFwiKX0sXy5maWxlc0dldFRodW1ibmFpbEJhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9nZXRfdGh1bWJuYWlsX2JhdGNoXCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC5yZWFkXCIpfSxfLmZpbGVzTGlzdEZvbGRlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvbGlzdF9mb2xkZXJcIixlLFwiYXBwLCB1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEucmVhZFwiKX0sXy5maWxlc0xpc3RGb2xkZXJDb250aW51ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvbGlzdF9mb2xkZXIvY29udGludWVcIixlLFwiYXBwLCB1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEucmVhZFwiKX0sXy5maWxlc0xpc3RGb2xkZXJHZXRMYXRlc3RDdXJzb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL2xpc3RfZm9sZGVyL2dldF9sYXRlc3RfY3Vyc29yXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS5yZWFkXCIpfSxfLmZpbGVzTGlzdEZvbGRlckxvbmdwb2xsPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9saXN0X2ZvbGRlci9sb25ncG9sbFwiLGUsXCJub2F1dGhcIixcIm5vdGlmeVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS5yZWFkXCIpfSxfLmZpbGVzTGlzdFJldmlzaW9ucz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvbGlzdF9yZXZpc2lvbnNcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZXNMb2NrRmlsZUJhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9sb2NrX2ZpbGVfYmF0Y2hcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNNb3ZlVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL21vdmVfdjJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNNb3ZlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9tb3ZlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzTW92ZUJhdGNoVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL21vdmVfYmF0Y2hfdjJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNNb3ZlQmF0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL21vdmVfYmF0Y2hcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNNb3ZlQmF0Y2hDaGVja1YyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9tb3ZlX2JhdGNoL2NoZWNrX3YyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzTW92ZUJhdGNoQ2hlY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL21vdmVfYmF0Y2gvY2hlY2tcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNQYXBlckNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvcGFwZXIvY3JlYXRlXCIsZSxcInVzZXJcIixcImFwaVwiLFwidXBsb2FkXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzUGFwZXJVcGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3BhcGVyL3VwZGF0ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInVwbG9hZFwiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc1Blcm1hbmVudGx5RGVsZXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9wZXJtYW5lbnRseV9kZWxldGVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLnBlcm1hbmVudF9kZWxldGVcIil9LF8uZmlsZXNQcm9wZXJ0aWVzQWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9wcm9wZXJ0aWVzL2FkZFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZXNQcm9wZXJ0aWVzT3ZlcndyaXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9wcm9wZXJ0aWVzL292ZXJ3cml0ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZXNQcm9wZXJ0aWVzUmVtb3ZlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9wcm9wZXJ0aWVzL3JlbW92ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZXNQcm9wZXJ0aWVzVGVtcGxhdGVHZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3Byb3BlcnRpZXMvdGVtcGxhdGUvZ2V0XCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS5yZWFkXCIpfSxfLmZpbGVzUHJvcGVydGllc1RlbXBsYXRlTGlzdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9wcm9wZXJ0aWVzL3RlbXBsYXRlL2xpc3RcIixudWxsLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZXNQcm9wZXJ0aWVzVXBkYXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9wcm9wZXJ0aWVzL3VwZGF0ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZXNSZXN0b3JlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9yZXN0b3JlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzU2F2ZVVybD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvc2F2ZV91cmxcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNTYXZlVXJsQ2hlY2tKb2JTdGF0dXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3NhdmVfdXJsL2NoZWNrX2pvYl9zdGF0dXNcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNTZWFyY2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3NlYXJjaFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEucmVhZFwiKX0sXy5maWxlc1NlYXJjaFYyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9zZWFyY2hfdjJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZXNTZWFyY2hDb250aW51ZVYyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy9zZWFyY2gvY29udGludWVfdjJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8uZmlsZXNUYWdzQWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy90YWdzL2FkZFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEud3JpdGVcIil9LF8uZmlsZXNUYWdzR2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy90YWdzL2dldFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMubWV0YWRhdGEucmVhZFwiKX0sXy5maWxlc1RhZ3NSZW1vdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3RhZ3MvcmVtb3ZlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5tZXRhZGF0YS53cml0ZVwiKX0sXy5maWxlc1VubG9ja0ZpbGVCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvdW5sb2NrX2ZpbGVfYmF0Y2hcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNVcGxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3VwbG9hZFwiLGUsXCJ1c2VyXCIsXCJjb250ZW50XCIsXCJ1cGxvYWRcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNVcGxvYWRTZXNzaW9uQXBwZW5kVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3VwbG9hZF9zZXNzaW9uL2FwcGVuZF92MlwiLGUsXCJ1c2VyXCIsXCJjb250ZW50XCIsXCJ1cGxvYWRcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNVcGxvYWRTZXNzaW9uQXBwZW5kPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy91cGxvYWRfc2Vzc2lvbi9hcHBlbmRcIixlLFwidXNlclwiLFwiY29udGVudFwiLFwidXBsb2FkXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzVXBsb2FkU2Vzc2lvbkZpbmlzaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvdXBsb2FkX3Nlc3Npb24vZmluaXNoXCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcInVwbG9hZFwiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc1VwbG9hZFNlc3Npb25GaW5pc2hCYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwiZmlsZXMvdXBsb2FkX3Nlc3Npb24vZmluaXNoX2JhdGNoXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLmZpbGVzVXBsb2FkU2Vzc2lvbkZpbmlzaEJhdGNoVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3VwbG9hZF9zZXNzaW9uL2ZpbmlzaF9iYXRjaF92MlwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc1VwbG9hZFNlc3Npb25GaW5pc2hCYXRjaENoZWNrPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy91cGxvYWRfc2Vzc2lvbi9maW5pc2hfYmF0Y2gvY2hlY2tcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uZmlsZXNVcGxvYWRTZXNzaW9uU3RhcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcImZpbGVzL3VwbG9hZF9zZXNzaW9uL3N0YXJ0XCIsZSxcInVzZXJcIixcImNvbnRlbnRcIixcInVwbG9hZFwiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5maWxlc1VwbG9hZFNlc3Npb25TdGFydEJhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJmaWxlcy91cGxvYWRfc2Vzc2lvbi9zdGFydF9iYXRjaFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5vcGVuaWRVc2VyaW5mbz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwib3BlbmlkL3VzZXJpbmZvXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJvcGVuaWRcIil9LF8ucGFwZXJEb2NzQXJjaGl2ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy9hcmNoaXZlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5jb250ZW50LndyaXRlXCIpfSxfLnBhcGVyRG9jc0NyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy9jcmVhdGVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJ1cGxvYWRcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8ucGFwZXJEb2NzRG93bmxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInBhcGVyL2RvY3MvZG93bmxvYWRcIixlLFwidXNlclwiLFwiYXBpXCIsXCJkb3dubG9hZFwiLFwiZmlsZXMuY29udGVudC5yZWFkXCIpfSxfLnBhcGVyRG9jc0ZvbGRlclVzZXJzTGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy9mb2xkZXJfdXNlcnMvbGlzdFwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy5yZWFkXCIpfSxfLnBhcGVyRG9jc0ZvbGRlclVzZXJzTGlzdENvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJwYXBlci9kb2NzL2ZvbGRlcl91c2Vycy9saXN0L2NvbnRpbnVlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8ucGFwZXJEb2NzR2V0Rm9sZGVySW5mbz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy9nZXRfZm9sZGVyX2luZm9cIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcucmVhZFwiKX0sXy5wYXBlckRvY3NMaXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJwYXBlci9kb2NzL2xpc3RcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8ucGFwZXJEb2NzTGlzdENvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJwYXBlci9kb2NzL2xpc3QvY29udGludWVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLm1ldGFkYXRhLnJlYWRcIil9LF8ucGFwZXJEb2NzUGVybWFuZW50bHlEZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInBhcGVyL2RvY3MvcGVybWFuZW50bHlfZGVsZXRlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy5wZXJtYW5lbnRfZGVsZXRlXCIpfSxfLnBhcGVyRG9jc1NoYXJpbmdQb2xpY3lHZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInBhcGVyL2RvY3Mvc2hhcmluZ19wb2xpY3kvZ2V0XCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8ucGFwZXJEb2NzU2hhcmluZ1BvbGljeVNldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy9zaGFyaW5nX3BvbGljeS9zZXRcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8ucGFwZXJEb2NzVXBkYXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJwYXBlci9kb2NzL3VwZGF0ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInVwbG9hZFwiLFwiZmlsZXMuY29udGVudC53cml0ZVwiKX0sXy5wYXBlckRvY3NVc2Vyc0FkZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy91c2Vycy9hZGRcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8ucGFwZXJEb2NzVXNlcnNMaXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJwYXBlci9kb2NzL3VzZXJzL2xpc3RcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcucmVhZFwiKX0sXy5wYXBlckRvY3NVc2Vyc0xpc3RDb250aW51ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZG9jcy91c2Vycy9saXN0L2NvbnRpbnVlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8ucGFwZXJEb2NzVXNlcnNSZW1vdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInBhcGVyL2RvY3MvdXNlcnMvcmVtb3ZlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnBhcGVyRm9sZGVyc0NyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwicGFwZXIvZm9sZGVycy9jcmVhdGVcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLmNvbnRlbnQud3JpdGVcIil9LF8uc2hhcmluZ0FkZEZpbGVNZW1iZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvYWRkX2ZpbGVfbWVtYmVyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnNoYXJpbmdBZGRGb2xkZXJNZW1iZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvYWRkX2ZvbGRlcl9tZW1iZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ0NoZWNrSm9iU3RhdHVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2NoZWNrX2pvYl9zdGF0dXNcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ0NoZWNrUmVtb3ZlTWVtYmVySm9iU3RhdHVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2NoZWNrX3JlbW92ZV9tZW1iZXJfam9iX3N0YXR1c1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nQ2hlY2tTaGFyZUpvYlN0YXR1cz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy9jaGVja19zaGFyZV9qb2Jfc3RhdHVzXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnNoYXJpbmdDcmVhdGVTaGFyZWRMaW5rPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2NyZWF0ZV9zaGFyZWRfbGlua1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nQ3JlYXRlU2hhcmVkTGlua1dpdGhTZXR0aW5ncz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy9jcmVhdGVfc2hhcmVkX2xpbmtfd2l0aF9zZXR0aW5nc1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nR2V0RmlsZU1ldGFkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2dldF9maWxlX21ldGFkYXRhXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0dldEZpbGVNZXRhZGF0YUJhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2dldF9maWxlX21ldGFkYXRhL2JhdGNoXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0dldEZvbGRlck1ldGFkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2dldF9mb2xkZXJfbWV0YWRhdGFcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcucmVhZFwiKX0sXy5zaGFyaW5nR2V0U2hhcmVkTGlua0ZpbGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvZ2V0X3NoYXJlZF9saW5rX2ZpbGVcIixlLFwidXNlclwiLFwiY29udGVudFwiLFwiZG93bmxvYWRcIixcInNoYXJpbmcucmVhZFwiKX0sXy5zaGFyaW5nR2V0U2hhcmVkTGlua01ldGFkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2dldF9zaGFyZWRfbGlua19tZXRhZGF0YVwiLGUsXCJhcHAsIHVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0dldFNoYXJlZExpbmtzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2dldF9zaGFyZWRfbGlua3NcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcucmVhZFwiKX0sXy5zaGFyaW5nTGlzdEZpbGVNZW1iZXJzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2xpc3RfZmlsZV9tZW1iZXJzXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0xpc3RGaWxlTWVtYmVyc0JhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2xpc3RfZmlsZV9tZW1iZXJzL2JhdGNoXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0xpc3RGaWxlTWVtYmVyc0NvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2xpc3RfZmlsZV9tZW1iZXJzL2NvbnRpbnVlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0xpc3RGb2xkZXJNZW1iZXJzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2xpc3RfZm9sZGVyX21lbWJlcnNcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcucmVhZFwiKX0sXy5zaGFyaW5nTGlzdEZvbGRlck1lbWJlcnNDb250aW51ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy9saXN0X2ZvbGRlcl9tZW1iZXJzL2NvbnRpbnVlXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0xpc3RGb2xkZXJzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2xpc3RfZm9sZGVyc1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy5yZWFkXCIpfSxfLnNoYXJpbmdMaXN0Rm9sZGVyc0NvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL2xpc3RfZm9sZGVycy9jb250aW51ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy5yZWFkXCIpfSxfLnNoYXJpbmdMaXN0TW91bnRhYmxlRm9sZGVycz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy9saXN0X21vdW50YWJsZV9mb2xkZXJzXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0xpc3RNb3VudGFibGVGb2xkZXJzQ29udGludWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvbGlzdF9tb3VudGFibGVfZm9sZGVycy9jb250aW51ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy5yZWFkXCIpfSxfLnNoYXJpbmdMaXN0UmVjZWl2ZWRGaWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy9saXN0X3JlY2VpdmVkX2ZpbGVzXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8uc2hhcmluZ0xpc3RSZWNlaXZlZEZpbGVzQ29udGludWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvbGlzdF9yZWNlaXZlZF9maWxlcy9jb250aW51ZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy5yZWFkXCIpfSxfLnNoYXJpbmdMaXN0U2hhcmVkTGlua3M9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvbGlzdF9zaGFyZWRfbGlua3NcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcucmVhZFwiKX0sXy5zaGFyaW5nTW9kaWZ5U2hhcmVkTGlua1NldHRpbmdzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL21vZGlmeV9zaGFyZWRfbGlua19zZXR0aW5nc1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nTW91bnRGb2xkZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvbW91bnRfZm9sZGVyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnNoYXJpbmdSZWxpbnF1aXNoRmlsZU1lbWJlcnNoaXA9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvcmVsaW5xdWlzaF9maWxlX21lbWJlcnNoaXBcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ1JlbGlucXVpc2hGb2xkZXJNZW1iZXJzaGlwPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL3JlbGlucXVpc2hfZm9sZGVyX21lbWJlcnNoaXBcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ1JlbW92ZUZpbGVNZW1iZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvcmVtb3ZlX2ZpbGVfbWVtYmVyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnNoYXJpbmdSZW1vdmVGaWxlTWVtYmVyMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy9yZW1vdmVfZmlsZV9tZW1iZXJfMlwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nUmVtb3ZlRm9sZGVyTWVtYmVyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL3JlbW92ZV9mb2xkZXJfbWVtYmVyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnNoYXJpbmdSZXZva2VTaGFyZWRMaW5rPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL3Jldm9rZV9zaGFyZWRfbGlua1wiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nU2V0QWNjZXNzSW5oZXJpdGFuY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvc2V0X2FjY2Vzc19pbmhlcml0YW5jZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nU2hhcmVGb2xkZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvc2hhcmVfZm9sZGVyXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnNoYXJpbmdUcmFuc2ZlckZvbGRlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy90cmFuc2Zlcl9mb2xkZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ1VubW91bnRGb2xkZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInNoYXJpbmcvdW5tb3VudF9mb2xkZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ1Vuc2hhcmVGaWxlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL3Vuc2hhcmVfZmlsZVwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nVW5zaGFyZUZvbGRlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy91bnNoYXJlX2ZvbGRlclwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nVXBkYXRlRmlsZU1lbWJlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy91cGRhdGVfZmlsZV9tZW1iZXJcIixlLFwidXNlclwiLFwiYXBpXCIsXCJycGNcIixcInNoYXJpbmcud3JpdGVcIil9LF8uc2hhcmluZ1VwZGF0ZUZvbGRlck1lbWJlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwic2hhcmluZy91cGRhdGVfZm9sZGVyX21lbWJlclwiLGUsXCJ1c2VyXCIsXCJhcGlcIixcInJwY1wiLFwic2hhcmluZy53cml0ZVwiKX0sXy5zaGFyaW5nVXBkYXRlRm9sZGVyUG9saWN5PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJzaGFyaW5nL3VwZGF0ZV9mb2xkZXJfcG9saWN5XCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLndyaXRlXCIpfSxfLnRlYW1EZXZpY2VzTGlzdE1lbWJlckRldmljZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZGV2aWNlcy9saXN0X21lbWJlcl9kZXZpY2VzXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJzZXNzaW9ucy5saXN0XCIpfSxfLnRlYW1EZXZpY2VzTGlzdE1lbWJlcnNEZXZpY2VzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2RldmljZXMvbGlzdF9tZW1iZXJzX2RldmljZXNcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInNlc3Npb25zLmxpc3RcIil9LF8udGVhbURldmljZXNMaXN0VGVhbURldmljZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZGV2aWNlcy9saXN0X3RlYW1fZGV2aWNlc1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwic2Vzc2lvbnMubGlzdFwiKX0sXy50ZWFtRGV2aWNlc1Jldm9rZURldmljZVNlc3Npb249ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZGV2aWNlcy9yZXZva2VfZGV2aWNlX3Nlc3Npb25cIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInNlc3Npb25zLm1vZGlmeVwiKX0sXy50ZWFtRGV2aWNlc1Jldm9rZURldmljZVNlc3Npb25CYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9kZXZpY2VzL3Jldm9rZV9kZXZpY2Vfc2Vzc2lvbl9iYXRjaFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwic2Vzc2lvbnMubW9kaWZ5XCIpfSxfLnRlYW1GZWF0dXJlc0dldFZhbHVlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9mZWF0dXJlcy9nZXRfdmFsdWVzXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2luZm8ucmVhZFwiKX0sXy50ZWFtR2V0SW5mbz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2dldF9pbmZvXCIsbnVsbCxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2luZm8ucmVhZFwiKX0sXy50ZWFtR3JvdXBzQ3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2dyb3Vwcy9jcmVhdGVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImdyb3Vwcy53cml0ZVwiKX0sXy50ZWFtR3JvdXBzRGVsZXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2dyb3Vwcy9kZWxldGVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImdyb3Vwcy53cml0ZVwiKX0sXy50ZWFtR3JvdXBzR2V0SW5mbz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9ncm91cHMvZ2V0X2luZm9cIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImdyb3Vwcy5yZWFkXCIpfSxfLnRlYW1Hcm91cHNKb2JTdGF0dXNHZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZ3JvdXBzL2pvYl9zdGF0dXMvZ2V0XCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJncm91cHMud3JpdGVcIil9LF8udGVhbUdyb3Vwc0xpc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZ3JvdXBzL2xpc3RcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImdyb3Vwcy5yZWFkXCIpfSxfLnRlYW1Hcm91cHNMaXN0Q29udGludWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZ3JvdXBzL2xpc3QvY29udGludWVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImdyb3Vwcy5yZWFkXCIpfSxfLnRlYW1Hcm91cHNNZW1iZXJzQWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2dyb3Vwcy9tZW1iZXJzL2FkZFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwiZ3JvdXBzLndyaXRlXCIpfSxfLnRlYW1Hcm91cHNNZW1iZXJzTGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9ncm91cHMvbWVtYmVycy9saXN0XCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJncm91cHMucmVhZFwiKX0sXy50ZWFtR3JvdXBzTWVtYmVyc0xpc3RDb250aW51ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9ncm91cHMvbWVtYmVycy9saXN0L2NvbnRpbnVlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJncm91cHMucmVhZFwiKX0sXy50ZWFtR3JvdXBzTWVtYmVyc1JlbW92ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9ncm91cHMvbWVtYmVycy9yZW1vdmVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImdyb3Vwcy53cml0ZVwiKX0sXy50ZWFtR3JvdXBzTWVtYmVyc1NldEFjY2Vzc1R5cGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vZ3JvdXBzL21lbWJlcnMvc2V0X2FjY2Vzc190eXBlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJncm91cHMud3JpdGVcIil9LF8udGVhbUdyb3Vwc1VwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9ncm91cHMvdXBkYXRlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJncm91cHMud3JpdGVcIil9LF8udGVhbUxlZ2FsSG9sZHNDcmVhdGVQb2xpY3k9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbGVnYWxfaG9sZHMvY3JlYXRlX3BvbGljeVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLmdvdmVybmFuY2Uud3JpdGVcIil9LF8udGVhbUxlZ2FsSG9sZHNHZXRQb2xpY3k9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbGVnYWxfaG9sZHMvZ2V0X3BvbGljeVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLmdvdmVybmFuY2Uud3JpdGVcIil9LF8udGVhbUxlZ2FsSG9sZHNMaXN0SGVsZFJldmlzaW9ucz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9sZWdhbF9ob2xkcy9saXN0X2hlbGRfcmV2aXNpb25zXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuZ292ZXJuYW5jZS53cml0ZVwiKX0sXy50ZWFtTGVnYWxIb2xkc0xpc3RIZWxkUmV2aXNpb25zQ29udGludWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbGVnYWxfaG9sZHMvbGlzdF9oZWxkX3JldmlzaW9uc19jb250aW51ZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLmdvdmVybmFuY2Uud3JpdGVcIil9LF8udGVhbUxlZ2FsSG9sZHNMaXN0UG9saWNpZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbGVnYWxfaG9sZHMvbGlzdF9wb2xpY2llc1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLmdvdmVybmFuY2Uud3JpdGVcIil9LF8udGVhbUxlZ2FsSG9sZHNSZWxlYXNlUG9saWN5PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2xlZ2FsX2hvbGRzL3JlbGVhc2VfcG9saWN5XCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuZ292ZXJuYW5jZS53cml0ZVwiKX0sXy50ZWFtTGVnYWxIb2xkc1VwZGF0ZVBvbGljeT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9sZWdhbF9ob2xkcy91cGRhdGVfcG9saWN5XCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuZ292ZXJuYW5jZS53cml0ZVwiKX0sXy50ZWFtTGlua2VkQXBwc0xpc3RNZW1iZXJMaW5rZWRBcHBzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2xpbmtlZF9hcHBzL2xpc3RfbWVtYmVyX2xpbmtlZF9hcHBzXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJzZXNzaW9ucy5saXN0XCIpfSxfLnRlYW1MaW5rZWRBcHBzTGlzdE1lbWJlcnNMaW5rZWRBcHBzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2xpbmtlZF9hcHBzL2xpc3RfbWVtYmVyc19saW5rZWRfYXBwc1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwic2Vzc2lvbnMubGlzdFwiKX0sXy50ZWFtTGlua2VkQXBwc0xpc3RUZWFtTGlua2VkQXBwcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9saW5rZWRfYXBwcy9saXN0X3RlYW1fbGlua2VkX2FwcHNcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInNlc3Npb25zLmxpc3RcIil9LF8udGVhbUxpbmtlZEFwcHNSZXZva2VMaW5rZWRBcHA9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbGlua2VkX2FwcHMvcmV2b2tlX2xpbmtlZF9hcHBcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInNlc3Npb25zLm1vZGlmeVwiKX0sXy50ZWFtTGlua2VkQXBwc1Jldm9rZUxpbmtlZEFwcEJhdGNoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL2xpbmtlZF9hcHBzL3Jldm9rZV9saW5rZWRfYXBwX2JhdGNoXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJzZXNzaW9ucy5tb2RpZnlcIil9LF8udGVhbU1lbWJlclNwYWNlTGltaXRzRXhjbHVkZWRVc2Vyc0FkZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJfc3BhY2VfbGltaXRzL2V4Y2x1ZGVkX3VzZXJzL2FkZFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyU3BhY2VMaW1pdHNFeGNsdWRlZFVzZXJzTGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJfc3BhY2VfbGltaXRzL2V4Y2x1ZGVkX3VzZXJzL2xpc3RcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMucmVhZFwiKX0sXy50ZWFtTWVtYmVyU3BhY2VMaW1pdHNFeGNsdWRlZFVzZXJzTGlzdENvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcl9zcGFjZV9saW1pdHMvZXhjbHVkZWRfdXNlcnMvbGlzdC9jb250aW51ZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJTcGFjZUxpbWl0c0V4Y2x1ZGVkVXNlcnNSZW1vdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVyX3NwYWNlX2xpbWl0cy9leGNsdWRlZF91c2Vycy9yZW1vdmVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlclNwYWNlTGltaXRzR2V0Q3VzdG9tUXVvdGE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVyX3NwYWNlX2xpbWl0cy9nZXRfY3VzdG9tX3F1b3RhXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLnJlYWRcIil9LF8udGVhbU1lbWJlclNwYWNlTGltaXRzUmVtb3ZlQ3VzdG9tUXVvdGE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVyX3NwYWNlX2xpbWl0cy9yZW1vdmVfY3VzdG9tX3F1b3RhXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJTcGFjZUxpbWl0c1NldEN1c3RvbVF1b3RhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcl9zcGFjZV9saW1pdHMvc2V0X2N1c3RvbV9xdW90YVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJzQWRkVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9hZGRfdjJcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlcnNBZGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9hZGRcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlcnNBZGRKb2JTdGF0dXNHZXRWMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL2FkZC9qb2Jfc3RhdHVzL2dldF92MlwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc0FkZEpvYlN0YXR1c0dldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL2FkZC9qb2Jfc3RhdHVzL2dldFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc0RlbGV0ZVByb2ZpbGVQaG90b1YyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvZGVsZXRlX3Byb2ZpbGVfcGhvdG9fdjJcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlcnNEZWxldGVQcm9maWxlUGhvdG89ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9kZWxldGVfcHJvZmlsZV9waG90b1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc0dldEF2YWlsYWJsZVRlYW1NZW1iZXJSb2xlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvZ2V0X2F2YWlsYWJsZV90ZWFtX21lbWJlcl9yb2xlc1wiLG51bGwsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJzR2V0SW5mb1YyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvZ2V0X2luZm9fdjJcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMucmVhZFwiKX0sXy50ZWFtTWVtYmVyc0dldEluZm89ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9nZXRfaW5mb1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJzTGlzdFYyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvbGlzdF92MlwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJzTGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL2xpc3RcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMucmVhZFwiKX0sXy50ZWFtTWVtYmVyc0xpc3RDb250aW51ZVYyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvbGlzdC9jb250aW51ZV92MlwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJzTGlzdENvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvbGlzdC9jb250aW51ZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5yZWFkXCIpfSxfLnRlYW1NZW1iZXJzTW92ZUZvcm1lck1lbWJlckZpbGVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvbW92ZV9mb3JtZXJfbWVtYmVyX2ZpbGVzXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJzTW92ZUZvcm1lck1lbWJlckZpbGVzSm9iU3RhdHVzQ2hlY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9tb3ZlX2Zvcm1lcl9tZW1iZXJfZmlsZXMvam9iX3N0YXR1cy9jaGVja1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc1JlY292ZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9yZWNvdmVyXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLmRlbGV0ZVwiKX0sXy50ZWFtTWVtYmVyc1JlbW92ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3JlbW92ZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy5kZWxldGVcIil9LF8udGVhbU1lbWJlcnNSZW1vdmVKb2JTdGF0dXNHZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9yZW1vdmUvam9iX3N0YXR1cy9nZXRcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMuZGVsZXRlXCIpfSxfLnRlYW1NZW1iZXJzU2Vjb25kYXJ5RW1haWxzQWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvc2Vjb25kYXJ5X2VtYWlscy9hZGRcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlcnNTZWNvbmRhcnlFbWFpbHNEZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9zZWNvbmRhcnlfZW1haWxzL2RlbGV0ZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc1NlY29uZGFyeUVtYWlsc1Jlc2VuZFZlcmlmaWNhdGlvbkVtYWlscz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3NlY29uZGFyeV9lbWFpbHMvcmVzZW5kX3ZlcmlmaWNhdGlvbl9lbWFpbHNcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlcnNTZW5kV2VsY29tZUVtYWlsPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvc2VuZF93ZWxjb21lX2VtYWlsXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJzU2V0QWRtaW5QZXJtaXNzaW9uc1YyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL21lbWJlcnMvc2V0X2FkbWluX3Blcm1pc3Npb25zX3YyXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJzU2V0QWRtaW5QZXJtaXNzaW9ucz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3NldF9hZG1pbl9wZXJtaXNzaW9uc1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc1NldFByb2ZpbGVWMj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3NldF9wcm9maWxlX3YyXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJzU2V0UHJvZmlsZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3NldF9wcm9maWxlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJzU2V0UHJvZmlsZVBob3RvVjI9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy9zZXRfcHJvZmlsZV9waG90b192MlwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwibWVtYmVycy53cml0ZVwiKX0sXy50ZWFtTWVtYmVyc1NldFByb2ZpbGVQaG90bz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3NldF9wcm9maWxlX3Bob3RvXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJtZW1iZXJzLndyaXRlXCIpfSxfLnRlYW1NZW1iZXJzU3VzcGVuZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9tZW1iZXJzL3N1c3BlbmRcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU1lbWJlcnNVbnN1c3BlbmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vbWVtYmVycy91bnN1c3BlbmRcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcIm1lbWJlcnMud3JpdGVcIil9LF8udGVhbU5hbWVzcGFjZXNMaXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL25hbWVzcGFjZXMvbGlzdFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLm1lbWJlclwiKX0sXy50ZWFtTmFtZXNwYWNlc0xpc3RDb250aW51ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9uYW1lc3BhY2VzL2xpc3QvY29udGludWVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1fZGF0YS5tZW1iZXJcIil9LF8udGVhbVByb3BlcnRpZXNUZW1wbGF0ZUFkZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9wcm9wZXJ0aWVzL3RlbXBsYXRlL2FkZFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwiZmlsZXMudGVhbV9tZXRhZGF0YS53cml0ZVwiKX0sXy50ZWFtUHJvcGVydGllc1RlbXBsYXRlR2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL3Byb3BlcnRpZXMvdGVtcGxhdGUvZ2V0XCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy50ZWFtX21ldGFkYXRhLndyaXRlXCIpfSxfLnRlYW1Qcm9wZXJ0aWVzVGVtcGxhdGVMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vcHJvcGVydGllcy90ZW1wbGF0ZS9saXN0XCIsbnVsbCxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJmaWxlcy50ZWFtX21ldGFkYXRhLndyaXRlXCIpfSxfLnRlYW1Qcm9wZXJ0aWVzVGVtcGxhdGVVcGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vcHJvcGVydGllcy90ZW1wbGF0ZS91cGRhdGVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcImZpbGVzLnRlYW1fbWV0YWRhdGEud3JpdGVcIil9LF8udGVhbVJlcG9ydHNHZXRBY3Rpdml0eT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9yZXBvcnRzL2dldF9hY3Rpdml0eVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9pbmZvLnJlYWRcIil9LF8udGVhbVJlcG9ydHNHZXREZXZpY2VzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL3JlcG9ydHMvZ2V0X2RldmljZXNcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1faW5mby5yZWFkXCIpfSxfLnRlYW1SZXBvcnRzR2V0TWVtYmVyc2hpcD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS9yZXBvcnRzL2dldF9tZW1iZXJzaGlwXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2luZm8ucmVhZFwiKX0sXy50ZWFtUmVwb3J0c0dldFN0b3JhZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vcmVwb3J0cy9nZXRfc3RvcmFnZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9pbmZvLnJlYWRcIil9LF8udGVhbVNoYXJpbmdBbGxvd2xpc3RBZGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vc2hhcmluZ19hbGxvd2xpc3QvYWRkXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2luZm8ud3JpdGVcIil9LF8udGVhbVNoYXJpbmdBbGxvd2xpc3RMaXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL3NoYXJpbmdfYWxsb3dsaXN0L2xpc3RcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1faW5mby5yZWFkXCIpfSxfLnRlYW1TaGFyaW5nQWxsb3dsaXN0TGlzdENvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL3NoYXJpbmdfYWxsb3dsaXN0L2xpc3QvY29udGludWVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1faW5mby5yZWFkXCIpfSxfLnRlYW1TaGFyaW5nQWxsb3dsaXN0UmVtb3ZlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL3NoYXJpbmdfYWxsb3dsaXN0L3JlbW92ZVwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9pbmZvLndyaXRlXCIpfSxfLnRlYW1UZWFtRm9sZGVyQWN0aXZhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vdGVhbV9mb2xkZXIvYWN0aXZhdGVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1fZGF0YS5jb250ZW50LndyaXRlXCIpfSxfLnRlYW1UZWFtRm9sZGVyQXJjaGl2ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90ZWFtX2ZvbGRlci9hcmNoaXZlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuY29udGVudC53cml0ZVwiKX0sXy50ZWFtVGVhbUZvbGRlckFyY2hpdmVDaGVjaz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90ZWFtX2ZvbGRlci9hcmNoaXZlL2NoZWNrXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuY29udGVudC53cml0ZVwiKX0sXy50ZWFtVGVhbUZvbGRlckNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90ZWFtX2ZvbGRlci9jcmVhdGVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1fZGF0YS5jb250ZW50LndyaXRlXCIpfSxfLnRlYW1UZWFtRm9sZGVyR2V0SW5mbz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90ZWFtX2ZvbGRlci9nZXRfaW5mb1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLmNvbnRlbnQucmVhZFwiKX0sXy50ZWFtVGVhbUZvbGRlckxpc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vdGVhbV9mb2xkZXIvbGlzdFwiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9kYXRhLmNvbnRlbnQucmVhZFwiKX0sXy50ZWFtVGVhbUZvbGRlckxpc3RDb250aW51ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90ZWFtX2ZvbGRlci9saXN0L2NvbnRpbnVlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuY29udGVudC5yZWFkXCIpfSxfLnRlYW1UZWFtRm9sZGVyUGVybWFuZW50bHlEZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInRlYW0vdGVhbV9mb2xkZXIvcGVybWFuZW50bHlfZGVsZXRlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuY29udGVudC53cml0ZVwiKX0sXy50ZWFtVGVhbUZvbGRlclJlbmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90ZWFtX2ZvbGRlci9yZW5hbWVcIixlLFwidGVhbVwiLFwiYXBpXCIsXCJycGNcIixcInRlYW1fZGF0YS5jb250ZW50LndyaXRlXCIpfSxfLnRlYW1UZWFtRm9sZGVyVXBkYXRlU3luY1NldHRpbmdzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtL3RlYW1fZm9sZGVyL3VwZGF0ZV9zeW5jX3NldHRpbmdzXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJ0ZWFtX2RhdGEuY29udGVudC53cml0ZVwiKX0sXy50ZWFtVG9rZW5HZXRBdXRoZW50aWNhdGVkQWRtaW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbS90b2tlbi9nZXRfYXV0aGVudGljYXRlZF9hZG1pblwiLG51bGwsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwidGVhbV9pbmZvLnJlYWRcIil9LF8udGVhbUxvZ0dldEV2ZW50cz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidGVhbV9sb2cvZ2V0X2V2ZW50c1wiLGUsXCJ0ZWFtXCIsXCJhcGlcIixcInJwY1wiLFwiZXZlbnRzLnJlYWRcIil9LF8udGVhbUxvZ0dldEV2ZW50c0NvbnRpbnVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ0ZWFtX2xvZy9nZXRfZXZlbnRzL2NvbnRpbnVlXCIsZSxcInRlYW1cIixcImFwaVwiLFwicnBjXCIsXCJldmVudHMucmVhZFwiKX0sXy51c2Vyc0ZlYXR1cmVzR2V0VmFsdWVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ1c2Vycy9mZWF0dXJlcy9nZXRfdmFsdWVzXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJhY2NvdW50X2luZm8ucmVhZFwiKX0sXy51c2Vyc0dldEFjY291bnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInVzZXJzL2dldF9hY2NvdW50XCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8udXNlcnNHZXRBY2NvdW50QmF0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVxdWVzdChcInVzZXJzL2dldF9hY2NvdW50X2JhdGNoXCIsZSxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJzaGFyaW5nLnJlYWRcIil9LF8udXNlcnNHZXRDdXJyZW50QWNjb3VudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVlc3QoXCJ1c2Vycy9nZXRfY3VycmVudF9hY2NvdW50XCIsbnVsbCxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJhY2NvdW50X2luZm8ucmVhZFwiKX0sXy51c2Vyc0dldFNwYWNlVXNhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KFwidXNlcnMvZ2V0X3NwYWNlX3VzYWdlXCIsbnVsbCxcInVzZXJcIixcImFwaVwiLFwicnBjXCIsXCJhY2NvdW50X2luZm8ucmVhZFwiKX07dmFyIHE9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm0scj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCIuXCI7cmV0dXJuIHI/KHQhPT1tJiZ2b2lkIDAhPT1kW2VdJiYoZT1kW2VdLHI9XCItXCIpLFwiaHR0cHM6Ly9cIi5jb25jYXQoZSkuY29uY2F0KHIpLmNvbmNhdCh0LFwiLzIvXCIpKTpcImh0dHBzOi8vXCIuY29uY2F0KHQsXCIvMi9cIil9LGI9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06aDtyZXR1cm4gZSE9PWgmJihlPVwibWV0YS1cIi5jb25jYXQoZSkpLFwiaHR0cHM6Ly9cIi5jb25jYXQoZSxcIi9vYXV0aDIvYXV0aG9yaXplXCIpfSx2PWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm0sdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCIuXCIscj1cImFwaVwiO3JldHVybiBlIT09bSYmKHI9ZFtyXSx0PVwiLVwiKSxcImh0dHBzOi8vXCIuY29uY2F0KHIpLmNvbmNhdCh0KS5jb25jYXQoZSxcIi9vYXV0aDIvdG9rZW5cIil9O2Z1bmN0aW9uIHcoZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpLnJlcGxhY2UoL1tcXHUwMDdmLVxcdWZmZmZdL2csZyl9ZnVuY3Rpb24gayhlKXtyZXR1cm4gbmV3IERhdGUoRGF0ZS5ub3coKSsxZTMqZSl9ZnVuY3Rpb24geSgpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSYmc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgbW9kdWxlfHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93fWZ1bmN0aW9uIEEoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93fWZ1bmN0aW9uIFMoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUmJnNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZX1mdW5jdGlvbiBDKGUpe3JldHVybiBlLnRvU3RyaW5nKFwiYmFzZTY0XCIpLnJlcGxhY2UoL1xcKy9nLFwiLVwiKS5yZXBsYWNlKC9cXC8vZyxcIl9cIikucmVwbGFjZSgvPS9nLFwiXCIpfXZhciBULEwsTSxQPWZ1bmN0aW9uKGUpeyFmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmbihlLHQpfSh1LGUpO3ZhciByLGksbz0ocj11LGk9YSgpLGZ1bmN0aW9uKCl7dmFyIGUsdD1zKHIpO2lmKGkpe3ZhciBuPXModGhpcykuY29uc3RydWN0b3I7ZT1SZWZsZWN0LmNvbnN0cnVjdCh0LGFyZ3VtZW50cyxuKX1lbHNlIGU9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGModGhpcyxlKX0pO2Z1bmN0aW9uIHUoZSxyLGkpe3ZhciBzO3JldHVybiB0KHRoaXMsdSksKHM9by5jYWxsKHRoaXMsXCJSZXNwb25zZSBmYWlsZWQgd2l0aCBhIFwiLmNvbmNhdChlLFwiIGNvZGVcIikpKS5uYW1lPVwiRHJvcGJveFJlc3BvbnNlRXJyb3JcIixzLnN0YXR1cz1lLHMuaGVhZGVycz1yLHMuZXJyb3I9aSxzfXJldHVybiB1fSh1KEVycm9yKSksUj1mdW5jdGlvbiBlKHIsaSxzKXt0KHRoaXMsZSksdGhpcy5zdGF0dXM9cix0aGlzLmhlYWRlcnM9aSx0aGlzLnJlc3VsdD1zfTtmdW5jdGlvbiBGKGUpe3JldHVybiBlLnRleHQoKS50aGVuKChmdW5jdGlvbih0KXt2YXIgcjt0cnl7cj1KU09OLnBhcnNlKHQpfWNhdGNoKGUpe3I9dH10aHJvdyBuZXcgUChlLnN0YXR1cyxlLmhlYWRlcnMscil9KSl9ZnVuY3Rpb24gRChlKXtyZXR1cm4gZS5vaz9lLnRleHQoKS50aGVuKChmdW5jdGlvbih0KXt2YXIgcjt0cnl7cj1KU09OLnBhcnNlKHQpfWNhdGNoKGUpe3I9dH1yZXR1cm4gbmV3IFIoZS5zdGF0dXMsZS5oZWFkZXJzLHIpfSkpOkYoZSl9dmFyIEc9W1wibGVnYWN5XCIsXCJvZmZsaW5lXCIsXCJvbmxpbmVcIl0sVT1bXCJjb2RlXCIsXCJ0b2tlblwiXSx4PVtcIm5vbmVcIixcInVzZXJcIixcInRlYW1cIl0sRT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocil7dCh0aGlzLGUpLHI9cnx8e30sQSgpPyhUPXdpbmRvdy5mZXRjaC5iaW5kKHdpbmRvdyksTD13aW5kb3cuY3J5cHRvfHx3aW5kb3cubXNDcnlwdG8pOlMoKT8oVD1zZWxmLmZldGNoLmJpbmQoc2VsZiksTD1zZWxmLmNyeXB0byk6KFQ9cmVxdWlyZShcIm5vZGUtZmV0Y2hcIiksTD1yZXF1aXJlKFwiY3J5cHRvXCIpKSxNPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBUZXh0RW5jb2Rlcj9yZXF1aXJlKFwidXRpbFwiKS5UZXh0RW5jb2RlcjpUZXh0RW5jb2Rlcix0aGlzLmZldGNoPXIuZmV0Y2h8fFQsdGhpcy5hY2Nlc3NUb2tlbj1yLmFjY2Vzc1Rva2VuLHRoaXMuYWNjZXNzVG9rZW5FeHBpcmVzQXQ9ci5hY2Nlc3NUb2tlbkV4cGlyZXNBdCx0aGlzLnJlZnJlc2hUb2tlbj1yLnJlZnJlc2hUb2tlbix0aGlzLmNsaWVudElkPXIuY2xpZW50SWQsdGhpcy5jbGllbnRTZWNyZXQ9ci5jbGllbnRTZWNyZXQsdGhpcy5kb21haW49ci5kb21haW4sdGhpcy5kb21haW5EZWxpbWl0ZXI9ci5kb21haW5EZWxpbWl0ZXIsdGhpcy5jdXN0b21IZWFkZXJzPXIuY3VzdG9tSGVhZGVycyx0aGlzLmRhdGFPbkJvZHk9ci5kYXRhT25Cb2R5fXJldHVybiBpKGUsW3trZXk6XCJzZXRBY2Nlc3NUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuYWNjZXNzVG9rZW49ZX19LHtrZXk6XCJnZXRBY2Nlc3NUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWNjZXNzVG9rZW59fSx7a2V5Olwic2V0Q2xpZW50SWRcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLmNsaWVudElkPWV9fSx7a2V5OlwiZ2V0Q2xpZW50SWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsaWVudElkfX0se2tleTpcInNldENsaWVudFNlY3JldFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuY2xpZW50U2VjcmV0PWV9fSx7a2V5OlwiZ2V0Q2xpZW50U2VjcmV0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGllbnRTZWNyZXR9fSx7a2V5OlwiZ2V0UmVmcmVzaFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW59fSx7a2V5Olwic2V0UmVmcmVzaFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5yZWZyZXNoVG9rZW49ZX19LHtrZXk6XCJnZXRBY2Nlc3NUb2tlbkV4cGlyZXNBdFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWNjZXNzVG9rZW5FeHBpcmVzQXR9fSx7a2V5Olwic2V0QWNjZXNzVG9rZW5FeHBpcmVzQXRcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLmFjY2Vzc1Rva2VuRXhwaXJlc0F0PWV9fSx7a2V5Olwic2V0Q29kZVZlcmlmaWVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5jb2RlVmVyaWZpZXI9ZX19LHtrZXk6XCJnZXRDb2RlVmVyaWZpZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvZGVWZXJpZmllcn19LHtrZXk6XCJnZW5lcmF0ZUNvZGVDaGFsbGVuZ2VcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxyPShuZXcgTSkuZW5jb2RlKHRoaXMuY29kZVZlcmlmaWVyKTtpZihBKCl8fFMoKSlyZXR1cm4gTC5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiLHIpLnRoZW4oKGZ1bmN0aW9uKHIpe3ZhciBpPWJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KHIpKSk7ZT1DKGkpLnN1YnN0cigwLDEyOCksdC5jb2RlQ2hhbGxlbmdlPWV9KSk7dmFyIGk9TC5jcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShyKS5kaWdlc3QoKTtyZXR1cm4gZT1DKGkpLHRoaXMuY29kZUNoYWxsZW5nZT1lLFByb21pc2UucmVzb2x2ZSgpfX0se2tleTpcImdlbmVyYXRlUEtDRUNvZGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZTtpZihBKCl8fFMoKSl7dmFyIHQ9bmV3IFVpbnQ4QXJyYXkoMTI4KSxyPUwuZ2V0UmFuZG9tVmFsdWVzKHQpO2U9QyhidG9hKHIpKS5zdWJzdHIoMCwxMjgpfWVsc2V7ZT1DKEwucmFuZG9tQnl0ZXMoMTI4KSkuc3Vic3RyKDAsMTI4KX1yZXR1cm4gdGhpcy5jb2RlVmVyaWZpZXI9ZSx0aGlzLmdlbmVyYXRlQ29kZUNoYWxsZW5nZSgpfX0se2tleTpcImdldEF1dGhlbnRpY2F0aW9uVXJsXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcixpPXRoaXMscz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCJ0b2tlblwiLG49YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGwsYT1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bnVsbCxvPWFyZ3VtZW50cy5sZW5ndGg+NSYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTpcIm5vbmVcIix1PWFyZ3VtZW50cy5sZW5ndGg+NiYmdm9pZCAwIT09YXJndW1lbnRzWzZdJiZhcmd1bWVudHNbNl0sYz10aGlzLmdldENsaWVudElkKCkscD1iKHRoaXMuZG9tYWluKTtpZighYyl0aHJvdyBFcnJvcihcIkEgY2xpZW50IGlkIGlzIHJlcXVpcmVkLiBZb3UgY2FuIHNldCB0aGUgY2xpZW50IGlkIHVzaW5nIC5zZXRDbGllbnRJZCgpLlwiKTtpZihcImNvZGVcIiE9PXMmJiFlKXRocm93IEVycm9yKFwiQSByZWRpcmVjdCB1cmkgaXMgcmVxdWlyZWQuXCIpO2lmKCFVLmluY2x1ZGVzKHMpKXRocm93IEVycm9yKFwiQXV0aG9yaXphdGlvbiB0eXBlIG11c3QgYmUgY29kZSBvciB0b2tlblwiKTtpZihuJiYhRy5pbmNsdWRlcyhuKSl0aHJvdyBFcnJvcihcIlRva2VuIEFjY2VzcyBUeXBlIG11c3QgYmUgbGVnYWN5LCBvZmZsaW5lLCBvciBvbmxpbmVcIik7aWYoYSYmIShhIGluc3RhbmNlb2YgQXJyYXkpKXRocm93IEVycm9yKFwiU2NvcGUgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzXCIpO2lmKCF4LmluY2x1ZGVzKG8pKXRocm93IEVycm9yKFwiaW5jbHVkZUdyYW50ZWRTY29wZXMgbXVzdCBiZSBub25lLCB1c2VyLCBvciB0ZWFtXCIpO3JldHVybiByPVwiY29kZVwiPT09cz9cIlwiLmNvbmNhdChwLFwiP3Jlc3BvbnNlX3R5cGU9Y29kZSZjbGllbnRfaWQ9XCIpLmNvbmNhdChjKTpcIlwiLmNvbmNhdChwLFwiP3Jlc3BvbnNlX3R5cGU9dG9rZW4mY2xpZW50X2lkPVwiKS5jb25jYXQoYyksZSYmKHIrPVwiJnJlZGlyZWN0X3VyaT1cIi5jb25jYXQoZSkpLHQmJihyKz1cIiZzdGF0ZT1cIi5jb25jYXQodCkpLG4mJihyKz1cIiZ0b2tlbl9hY2Nlc3NfdHlwZT1cIi5jb25jYXQobikpLGEmJihyKz1cIiZzY29wZT1cIi5jb25jYXQoYS5qb2luKFwiIFwiKSkpLFwibm9uZVwiIT09byYmKHIrPVwiJmluY2x1ZGVfZ3JhbnRlZF9zY29wZXM9XCIuY29uY2F0KG8pKSx1P3RoaXMuZ2VuZXJhdGVQS0NFQ29kZXMoKS50aGVuKChmdW5jdGlvbigpe3JldHVybiByKz1cIiZjb2RlX2NoYWxsZW5nZV9tZXRob2Q9UzI1NlwiLHIrPVwiJmNvZGVfY2hhbGxlbmdlPVwiLmNvbmNhdChpLmNvZGVDaGFsbGVuZ2UpfSkpOlByb21pc2UucmVzb2x2ZShyKX19LHtrZXk6XCJnZXRBY2Nlc3NUb2tlbkZyb21Db2RlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmdldENsaWVudElkKCksaT10aGlzLmdldENsaWVudFNlY3JldCgpO2lmKCFyKXRocm93IEVycm9yKFwiQSBjbGllbnQgaWQgaXMgcmVxdWlyZWQuIFlvdSBjYW4gc2V0IHRoZSBjbGllbnQgaWQgdXNpbmcgLnNldENsaWVudElkKCkuXCIpO3ZhciBzPXYodGhpcy5kb21haW4sdGhpcy5kb21haW5EZWxpbWl0ZXIpO2lmKHMrPVwiP2dyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlXCIscys9XCImY29kZT1cIi5jb25jYXQodCkscys9XCImY2xpZW50X2lkPVwiLmNvbmNhdChyKSxpKXMrPVwiJmNsaWVudF9zZWNyZXQ9XCIuY29uY2F0KGkpO2Vsc2V7aWYoIXRoaXMuY29kZVZlcmlmaWVyKXRocm93IEVycm9yKFwiWW91IG11c3QgdXNlIFBLQ0Ugd2hlbiBnZW5lcmF0aW5nIHRoZSBhdXRob3JpemF0aW9uIFVSTCB0byBub3QgaW5jbHVkZSBhIGNsaWVudCBzZWNyZXRcIik7cys9XCImY29kZV92ZXJpZmllcj1cIi5jb25jYXQodGhpcy5jb2RlVmVyaWZpZXIpfWUmJihzKz1cIiZyZWRpcmVjdF91cmk9XCIuY29uY2F0KGUpKTtyZXR1cm4gdGhpcy5mZXRjaChzLHttZXRob2Q6XCJQT1NUXCIsaGVhZGVyczp7XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwifX0pLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBEKGUpfSkpfX0se2tleTpcImNoZWNrQW5kUmVmcmVzaEFjY2Vzc1Rva2VuXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldFJlZnJlc2hUb2tlbigpJiZ0aGlzLmdldENsaWVudElkKCksdD0hdGhpcy5nZXRBY2Nlc3NUb2tlbkV4cGlyZXNBdCgpfHxuZXcgRGF0ZShEYXRlLm5vdygpKzNlNSk+PXRoaXMuZ2V0QWNjZXNzVG9rZW5FeHBpcmVzQXQoKSxyPSF0aGlzLmdldEFjY2Vzc1Rva2VuKCk7cmV0dXJuKHR8fHIpJiZlP3RoaXMucmVmcmVzaEFjY2Vzc1Rva2VuKCk6UHJvbWlzZS5yZXNvbHZlKCl9fSx7a2V5OlwicmVmcmVzaEFjY2Vzc1Rva2VuXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm51bGwscj10aGlzLmdldENsaWVudElkKCksaT10aGlzLmdldENsaWVudFNlY3JldCgpO2lmKCFyKXRocm93IEVycm9yKFwiQSBjbGllbnQgaWQgaXMgcmVxdWlyZWQuIFlvdSBjYW4gc2V0IHRoZSBjbGllbnQgaWQgdXNpbmcgLnNldENsaWVudElkKCkuXCIpO2lmKHQmJiEodCBpbnN0YW5jZW9mIEFycmF5KSl0aHJvdyBFcnJvcihcIlNjb3BlIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nc1wiKTt2YXIgcz12KHRoaXMuZG9tYWluLHRoaXMuZG9tYWluRGVsaW1pdGVyKSxuPXtoZWFkZXJzOntcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwifSxtZXRob2Q6XCJQT1NUXCJ9O2lmKHRoaXMuZGF0YU9uQm9keSl7dmFyIGE9e2dyYW50X3R5cGU6XCJyZWZyZXNoX3Rva2VuXCIsY2xpZW50X2lkOnIscmVmcmVzaF90b2tlbjp0aGlzLmdldFJlZnJlc2hUb2tlbigpfTtpJiYoYS5jbGllbnRfc2VjcmV0PWkpLHQmJihhLnNjb3BlPXQuam9pbihcIiBcIikpLG4uYm9keT1hfWVsc2Ugcys9XCI/Z3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuJnJlZnJlc2hfdG9rZW49XCIuY29uY2F0KHRoaXMuZ2V0UmVmcmVzaFRva2VuKCkpLHMrPVwiJmNsaWVudF9pZD1cIi5jb25jYXQociksaSYmKHMrPVwiJmNsaWVudF9zZWNyZXQ9XCIuY29uY2F0KGkpKSx0JiYocys9XCImc2NvcGU9XCIuY29uY2F0KHQuam9pbihcIiBcIikpKTtyZXR1cm4gdGhpcy5mZXRjaChzLG4pLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBEKGUpfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe2Uuc2V0QWNjZXNzVG9rZW4odC5yZXN1bHQuYWNjZXNzX3Rva2VuKSxlLnNldEFjY2Vzc1Rva2VuRXhwaXJlc0F0KGsodC5yZXN1bHQuZXhwaXJlc19pbikpfSkpfX1dKSxlfSgpLEI9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGJ0b2E/ZnVuY3Rpb24oZSl7cmV0dXJuIEJ1ZmZlci5mcm9tKGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfTpidG9hO2UuRHJvcGJveD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocil7dCh0aGlzLGUpLHRoaXMuYXV0aD0ocj1yfHx7fSkuYXV0aD9yLmF1dGg6bmV3IEUociksdGhpcy5mZXRjaD1yLmZldGNofHx0aGlzLmF1dGguZmV0Y2gsdGhpcy5zZWxlY3RVc2VyPXIuc2VsZWN0VXNlcix0aGlzLnNlbGVjdEFkbWluPXIuc2VsZWN0QWRtaW4sdGhpcy5wYXRoUm9vdD1yLnBhdGhSb290LHRoaXMuZG9tYWluPXIuZG9tYWlufHx0aGlzLmF1dGguZG9tYWluLHRoaXMuZG9tYWluRGVsaW1pdGVyPXIuZG9tYWluRGVsaW1pdGVyfHx0aGlzLmF1dGguZG9tYWluRGVsaW1pdGVyLHRoaXMuY3VzdG9tSGVhZGVycz1yLmN1c3RvbUhlYWRlcnN8fHRoaXMuYXV0aC5jdXN0b21IZWFkZXJzLE9iamVjdC5hc3NpZ24odGhpcyxfKX1yZXR1cm4gaShlLFt7a2V5OlwicmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLGkscyl7c3dpdGNoKHMpe2Nhc2VcInJwY1wiOnJldHVybiB0aGlzLnJwY1JlcXVlc3QoZSx0LHIsaSk7Y2FzZVwiZG93bmxvYWRcIjpyZXR1cm4gdGhpcy5kb3dubG9hZFJlcXVlc3QoZSx0LHIsaSk7Y2FzZVwidXBsb2FkXCI6cmV0dXJuIHRoaXMudXBsb2FkUmVxdWVzdChlLHQscixpKTtkZWZhdWx0OnRocm93IEVycm9yKFwiSW52YWxpZCByZXF1ZXN0IHN0eWxlOiBcIi5jb25jYXQocykpfX19LHtrZXk6XCJycGNSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsaSl7dmFyIHM9dGhpcztyZXR1cm4gdGhpcy5hdXRoLmNoZWNrQW5kUmVmcmVzaEFjY2Vzc1Rva2VuKCkudGhlbigoZnVuY3Rpb24oKXt2YXIgZT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6dD9KU09OLnN0cmluZ2lmeSh0KTpudWxsLGhlYWRlcnM6e319O3JldHVybiB0JiYoZS5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdPVwiYXBwbGljYXRpb24vanNvblwiKSxzLnNldEF1dGhIZWFkZXJzKHIsZSkscy5zZXRDb21tb25IZWFkZXJzKGUpLGV9KSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHMuZmV0Y2gocShpLHMuZG9tYWluLHMuZG9tYWluRGVsaW1pdGVyKStlLHQpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBEKGUpfSkpfX0se2tleTpcImRvd25sb2FkUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLGkpe3ZhciBzPXRoaXM7cmV0dXJuIHRoaXMuYXV0aC5jaGVja0FuZFJlZnJlc2hBY2Nlc3NUb2tlbigpLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIGU9e21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOntcIkRyb3Bib3gtQVBJLUFyZ1wiOncodCl9fTtyZXR1cm4gcy5zZXRBdXRoSGVhZGVycyhyLGUpLHMuc2V0Q29tbW9uSGVhZGVycyhlKSxlfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBzLmZldGNoKHEoaSxzLmRvbWFpbixzLmRvbWFpbkRlbGltaXRlcikrZSx0KX0pKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUub2s/bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3koKT9lLmJsb2IoKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gdChlKX0pKTplLmJ1ZmZlcigpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiB0KGUpfSkpfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciByPUpTT04ucGFyc2UoZS5oZWFkZXJzLmdldChcImRyb3Bib3gtYXBpLXJlc3VsdFwiKSk7cmV0dXJuIHkoKT9yLmZpbGVCbG9iPXQ6ci5maWxlQmluYXJ5PXQsbmV3IFIoZS5zdGF0dXMsZS5oZWFkZXJzLHIpfSkpOkYoZSl9KGUpfSkpfX0se2tleTpcInVwbG9hZFJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixpKXt2YXIgcz10aGlzO3JldHVybiB0aGlzLmF1dGguY2hlY2tBbmRSZWZyZXNoQWNjZXNzVG9rZW4oKS50aGVuKChmdW5jdGlvbigpe3ZhciBlPXQuY29udGVudHM7ZGVsZXRlIHQuY29udGVudHM7dmFyIGk9e2JvZHk6ZSxtZXRob2Q6XCJQT1NUXCIsaGVhZGVyczp7XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLFwiRHJvcGJveC1BUEktQXJnXCI6dyh0KX19O3JldHVybiBzLnNldEF1dGhIZWFkZXJzKHIsaSkscy5zZXRDb21tb25IZWFkZXJzKGkpLGl9KSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHMuZmV0Y2gocShpLHMuZG9tYWluLHMuZG9tYWluRGVsaW1pdGVyKStlLHQpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBEKGUpfSkpfX0se2tleTpcInNldEF1dGhIZWFkZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZihlLnNwbGl0KFwiLFwiKS5sZW5ndGg+MSl7dmFyIHI9ZS5yZXBsYWNlKFwiIFwiLFwiXCIpLnNwbGl0KFwiLFwiKTtyLmluY2x1ZGVzKGwpJiZ0aGlzLmF1dGguZ2V0QWNjZXNzVG9rZW4oKT9lPWw6ci5pbmNsdWRlcyhmKSYmdGhpcy5hdXRoLmdldEFjY2Vzc1Rva2VuKCk/ZT1mOnIuaW5jbHVkZXMocCkmJihlPXApfXN3aXRjaChlKXtjYXNlIHA6aWYodGhpcy5hdXRoLmNsaWVudElkJiZ0aGlzLmF1dGguY2xpZW50U2VjcmV0KXt2YXIgaT1CKFwiXCIuY29uY2F0KHRoaXMuYXV0aC5jbGllbnRJZCxcIjpcIikuY29uY2F0KHRoaXMuYXV0aC5jbGllbnRTZWNyZXQpKTt0LmhlYWRlcnMuQXV0aG9yaXphdGlvbj1cIkJhc2ljIFwiLmNvbmNhdChpKX1icmVhaztjYXNlIGY6Y2FzZSBsOnRoaXMuYXV0aC5nZXRBY2Nlc3NUb2tlbigpJiYodC5oZWFkZXJzLkF1dGhvcml6YXRpb249XCJCZWFyZXIgXCIuY29uY2F0KHRoaXMuYXV0aC5nZXRBY2Nlc3NUb2tlbigpKSk7YnJlYWs7Y2FzZVwibm9hdXRoXCI6Y2FzZVwiY29va2llXCI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVuaGFuZGxlZCBhdXRoIHR5cGU6IFwiLmNvbmNhdChlKSl9fX0se2tleTpcInNldENvbW1vbkhlYWRlcnNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzOyh0aGlzLnNlbGVjdFVzZXImJihlLmhlYWRlcnNbXCJEcm9wYm94LUFQSS1TZWxlY3QtVXNlclwiXT10aGlzLnNlbGVjdFVzZXIpLHRoaXMuc2VsZWN0QWRtaW4mJihlLmhlYWRlcnNbXCJEcm9wYm94LUFQSS1TZWxlY3QtQWRtaW5cIl09dGhpcy5zZWxlY3RBZG1pbiksdGhpcy5wYXRoUm9vdCYmKGUuaGVhZGVyc1tcIkRyb3Bib3gtQVBJLVBhdGgtUm9vdFwiXT10aGlzLnBhdGhSb290KSx0aGlzLmN1c3RvbUhlYWRlcnMpJiZPYmplY3Qua2V5cyh0aGlzLmN1c3RvbUhlYWRlcnMpLmZvckVhY2goKGZ1bmN0aW9uKHIpe2UuaGVhZGVyc1tyXT10LmN1c3RvbUhlYWRlcnNbcl19KSl9fV0pLGV9KCksZS5Ecm9wYm94QXV0aD1FLGUuRHJvcGJveFJlc3BvbnNlPVIsZS5Ecm9wYm94UmVzcG9uc2VFcnJvcj1QLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVhcmN1dDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBlYXJjdXQ7XG5cbmZ1bmN0aW9uIGVhcmN1dChkYXRhLCBob2xlSW5kaWNlcywgZGltKSB7XG5cbiAgICBkaW0gPSBkaW0gfHwgMjtcblxuICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aCxcbiAgICAgICAgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGgsXG4gICAgICAgIG91dGVyTm9kZSA9IGxpbmtlZExpc3QoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSksXG4gICAgICAgIHRyaWFuZ2xlcyA9IFtdO1xuXG4gICAgaWYgKCFvdXRlck5vZGUgfHwgb3V0ZXJOb2RlLm5leHQgPT09IG91dGVyTm9kZS5wcmV2KSByZXR1cm4gdHJpYW5nbGVzO1xuXG4gICAgdmFyIG1pblgsIG1pblksIG1heFgsIG1heFksIHgsIHksIGludlNpemU7XG5cbiAgICBpZiAoaGFzSG9sZXMpIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSk7XG5cbiAgICAvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcbiAgICBpZiAoZGF0YS5sZW5ndGggPiA4MCAqIGRpbSkge1xuICAgICAgICBtaW5YID0gbWF4WCA9IGRhdGFbMF07XG4gICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltKSB7XG4gICAgICAgICAgICB4ID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHkgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgICAgIGlmICh4IDwgbWluWCkgbWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICAgICAgaWYgKHggPiBtYXhYKSBtYXhYID0geDtcbiAgICAgICAgICAgIGlmICh5ID4gbWF4WSkgbWF4WSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxuICAgICAgICBpbnZTaXplID0gTWF0aC5tYXgobWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICAgICAgaW52U2l6ZSA9IGludlNpemUgIT09IDAgPyAzMjc2NyAvIGludlNpemUgOiAwO1xuICAgIH1cblxuICAgIGVhcmN1dExpbmtlZChvdXRlck5vZGUsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG59XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGNsb2Nrd2lzZSkge1xuICAgIHZhciBpLCBsYXN0O1xuXG4gICAgaWYgKGNsb2Nrd2lzZSA9PT0gKHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSA+IDApKSB7XG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGRpbSkgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IGVuZCAtIGRpbTsgaSA+PSBzdGFydDsgaSAtPSBkaW0pIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTtcbiAgICB9XG5cbiAgICBpZiAobGFzdCAmJiBlcXVhbHMobGFzdCwgbGFzdC5uZXh0KSkge1xuICAgICAgICByZW1vdmVOb2RlKGxhc3QpO1xuICAgICAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBsYXN0O1xufVxuXG4vLyBlbGltaW5hdGUgY29saW5lYXIgb3IgZHVwbGljYXRlIHBvaW50c1xuZnVuY3Rpb24gZmlsdGVyUG9pbnRzKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoIXN0YXJ0KSByZXR1cm4gc3RhcnQ7XG4gICAgaWYgKCFlbmQpIGVuZCA9IHN0YXJ0O1xuXG4gICAgdmFyIHAgPSBzdGFydCxcbiAgICAgICAgYWdhaW47XG4gICAgZG8ge1xuICAgICAgICBhZ2FpbiA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghcC5zdGVpbmVyICYmIChlcXVhbHMocCwgcC5uZXh0KSB8fCBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XG4gICAgICAgICAgICBwID0gZW5kID0gcC5wcmV2O1xuICAgICAgICAgICAgaWYgKHAgPT09IHAubmV4dCkgYnJlYWs7XG4gICAgICAgICAgICBhZ2FpbiA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChhZ2FpbiB8fCBwICE9PSBlbmQpO1xuXG4gICAgcmV0dXJuIGVuZDtcbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgcGFzcykge1xuICAgIGlmICghZWFyKSByZXR1cm47XG5cbiAgICAvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG4gICAgaWYgKCFwYXNzICYmIGludlNpemUpIGluZGV4Q3VydmUoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcblxuICAgIHZhciBzdG9wID0gZWFyLFxuICAgICAgICBwcmV2LCBuZXh0O1xuXG4gICAgLy8gaXRlcmF0ZSB0aHJvdWdoIGVhcnMsIHNsaWNpbmcgdGhlbSBvbmUgYnkgb25lXG4gICAgd2hpbGUgKGVhci5wcmV2ICE9PSBlYXIubmV4dCkge1xuICAgICAgICBwcmV2ID0gZWFyLnByZXY7XG4gICAgICAgIG5leHQgPSBlYXIubmV4dDtcblxuICAgICAgICBpZiAoaW52U2l6ZSA/IGlzRWFySGFzaGVkKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSkgOiBpc0VhcihlYXIpKSB7XG4gICAgICAgICAgICAvLyBjdXQgb2ZmIHRoZSB0cmlhbmdsZVxuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocHJldi5pIC8gZGltIHwgMCk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChlYXIuaSAvIGRpbSB8IDApO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltIHwgMCk7XG5cbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWFyKTtcblxuICAgICAgICAgICAgLy8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGV4IGxlYWRzIHRvIGxlc3Mgc2xpdmVyIHRyaWFuZ2xlc1xuICAgICAgICAgICAgZWFyID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgc3RvcCA9IG5leHQubmV4dDtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBlYXIgPSBuZXh0O1xuXG4gICAgICAgIC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG4gICAgICAgIGlmIChlYXIgPT09IHN0b3ApIHtcbiAgICAgICAgICAgIC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG4gICAgICAgICAgICBpZiAoIXBhc3MpIHtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxKTtcblxuICAgICAgICAgICAgLy8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGVhciA9IGN1cmVMb2NhbEludGVyc2VjdGlvbnMoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcywgZGltKTtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMik7XG5cbiAgICAgICAgICAgIC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xuZnVuY3Rpb24gaXNFYXIoZWFyKSB7XG4gICAgdmFyIGEgPSBlYXIucHJldixcbiAgICAgICAgYiA9IGVhcixcbiAgICAgICAgYyA9IGVhci5uZXh0O1xuXG4gICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG4gICAgLy8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcbiAgICB2YXIgYXggPSBhLngsIGJ4ID0gYi54LCBjeCA9IGMueCwgYXkgPSBhLnksIGJ5ID0gYi55LCBjeSA9IGMueTtcblxuICAgIC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXG4gICAgdmFyIHgwID0gYXggPCBieCA/IChheCA8IGN4ID8gYXggOiBjeCkgOiAoYnggPCBjeCA/IGJ4IDogY3gpLFxuICAgICAgICB5MCA9IGF5IDwgYnkgPyAoYXkgPCBjeSA/IGF5IDogY3kpIDogKGJ5IDwgY3kgPyBieSA6IGN5KSxcbiAgICAgICAgeDEgPSBheCA+IGJ4ID8gKGF4ID4gY3ggPyBheCA6IGN4KSA6IChieCA+IGN4ID8gYnggOiBjeCksXG4gICAgICAgIHkxID0gYXkgPiBieSA/IChheSA+IGN5ID8gYXkgOiBjeSkgOiAoYnkgPiBjeSA/IGJ5IDogY3kpO1xuXG4gICAgdmFyIHAgPSBjLm5leHQ7XG4gICAgd2hpbGUgKHAgIT09IGEpIHtcbiAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHAueCwgcC55KSAmJlxuICAgICAgICAgICAgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICB2YXIgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICB2YXIgYXggPSBhLngsIGJ4ID0gYi54LCBjeCA9IGMueCwgYXkgPSBhLnksIGJ5ID0gYi55LCBjeSA9IGMueTtcblxuICAgIC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXG4gICAgdmFyIHgwID0gYXggPCBieCA/IChheCA8IGN4ID8gYXggOiBjeCkgOiAoYnggPCBjeCA/IGJ4IDogY3gpLFxuICAgICAgICB5MCA9IGF5IDwgYnkgPyAoYXkgPCBjeSA/IGF5IDogY3kpIDogKGJ5IDwgY3kgPyBieSA6IGN5KSxcbiAgICAgICAgeDEgPSBheCA+IGJ4ID8gKGF4ID4gY3ggPyBheCA6IGN4KSA6IChieCA+IGN4ID8gYnggOiBjeCksXG4gICAgICAgIHkxID0gYXkgPiBieSA/IChheSA+IGN5ID8gYXkgOiBjeSkgOiAoYnkgPiBjeSA/IGJ5IDogY3kpO1xuXG4gICAgLy8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcbiAgICB2YXIgbWluWiA9IHpPcmRlcih4MCwgeTAsIG1pblgsIG1pblksIGludlNpemUpLFxuICAgICAgICBtYXhaID0gek9yZGVyKHgxLCB5MSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG5cbiAgICB2YXIgcCA9IGVhci5wcmV2WixcbiAgICAgICAgbiA9IGVhci5uZXh0WjtcblxuICAgIC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIGluIGJvdGggZGlyZWN0aW9uc1xuICAgIHdoaWxlIChwICYmIHAueiA+PSBtaW5aICYmIG4gJiYgbi56IDw9IG1heFopIHtcbiAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhICYmIHAgIT09IGMgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5wcmV2WjtcblxuICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55KSAmJiBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5leHRaO1xuICAgIH1cblxuICAgIC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gZGVjcmVhc2luZyB6LW9yZGVyXG4gICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblopIHtcbiAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhICYmIHAgIT09IGMgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5wcmV2WjtcbiAgICB9XG5cbiAgICAvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGluY3JlYXNpbmcgei1vcmRlclxuICAgIHdoaWxlIChuICYmIG4ueiA8PSBtYXhaKSB7XG4gICAgICAgIGlmIChuLnggPj0geDAgJiYgbi54IDw9IHgxICYmIG4ueSA+PSB5MCAmJiBuLnkgPD0geTEgJiYgbiAhPT0gYSAmJiBuICE9PSBjICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgbi54LCBuLnkpICYmIGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgbiA9IG4ubmV4dFo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYSA9IHAucHJldixcbiAgICAgICAgICAgIGIgPSBwLm5leHQubmV4dDtcblxuICAgICAgICBpZiAoIWVxdWFscyhhLCBiKSAmJiBpbnRlcnNlY3RzKGEsIHAsIHAubmV4dCwgYikgJiYgbG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpKSB7XG5cbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEuaSAvIGRpbSB8IDApO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltIHwgMCk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChiLmkgLyBkaW0gfCAwKTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocC5uZXh0KTtcblxuICAgICAgICAgICAgcCA9IHN0YXJ0ID0gYjtcbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBmaWx0ZXJQb2ludHMocCk7XG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dChzdGFydCwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICAvLyBsb29rIGZvciBhIHZhbGlkIGRpYWdvbmFsIHRoYXQgZGl2aWRlcyB0aGUgcG9seWdvbiBpbnRvIHR3b1xuICAgIHZhciBhID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYiA9IGEubmV4dC5uZXh0O1xuICAgICAgICB3aGlsZSAoYiAhPT0gYS5wcmV2KSB7XG4gICAgICAgICAgICBpZiAoYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKGEsIGIpKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuICAgICAgICAgICAgICAgIHZhciBjID0gc3BsaXRQb2x5Z29uKGEsIGIpO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIGNvbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcbiAgICAgICAgICAgICAgICBhID0gZmlsdGVyUG9pbnRzKGEsIGEubmV4dCk7XG4gICAgICAgICAgICAgICAgYyA9IGZpbHRlclBvaW50cyhjLCBjLm5leHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoYSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDApO1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChjLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYiA9IGIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBhID0gYS5uZXh0O1xuICAgIH0gd2hpbGUgKGEgIT09IHN0YXJ0KTtcbn1cblxuLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlc1xuZnVuY3Rpb24gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKSB7XG4gICAgdmFyIHF1ZXVlID0gW10sXG4gICAgICAgIGksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgIGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgICAgIGxpc3QgPSBsaW5rZWRMaXN0KGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UpO1xuICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuICAgICAgICBxdWV1ZS5wdXNoKGdldExlZnRtb3N0KGxpc3QpKTtcbiAgICB9XG5cbiAgICBxdWV1ZS5zb3J0KGNvbXBhcmVYKTtcblxuICAgIC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgZm9yIChpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGUocXVldWVbaV0sIG91dGVyTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dGVyTm9kZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVgoYSwgYikge1xuICAgIHJldHVybiBhLnggLSBiLng7XG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICB2YXIgYnJpZGdlID0gZmluZEhvbGVCcmlkZ2UoaG9sZSwgb3V0ZXJOb2RlKTtcbiAgICBpZiAoIWJyaWRnZSkge1xuICAgICAgICByZXR1cm4gb3V0ZXJOb2RlO1xuICAgIH1cblxuICAgIHZhciBicmlkZ2VSZXZlcnNlID0gc3BsaXRQb2x5Z29uKGJyaWRnZSwgaG9sZSk7XG5cbiAgICAvLyBmaWx0ZXIgY29sbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcbiAgICBmaWx0ZXJQb2ludHMoYnJpZGdlUmV2ZXJzZSwgYnJpZGdlUmV2ZXJzZS5uZXh0KTtcbiAgICByZXR1cm4gZmlsdGVyUG9pbnRzKGJyaWRnZSwgYnJpZGdlLm5leHQpO1xufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICB2YXIgcCA9IG91dGVyTm9kZSxcbiAgICAgICAgaHggPSBob2xlLngsXG4gICAgICAgIGh5ID0gaG9sZS55LFxuICAgICAgICBxeCA9IC1JbmZpbml0eSxcbiAgICAgICAgbTtcblxuICAgIC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcbiAgICAvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50XG4gICAgZG8ge1xuICAgICAgICBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcC54ICsgKGh5IC0gcC55KSAqIChwLm5leHQueCAtIHAueCkgLyAocC5uZXh0LnkgLSBwLnkpO1xuICAgICAgICAgICAgaWYgKHggPD0gaHggJiYgeCA+IHF4KSB7XG4gICAgICAgICAgICAgICAgcXggPSB4O1xuICAgICAgICAgICAgICAgIG0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKHggPT09IGh4KSByZXR1cm4gbTsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbGVmdG1vc3QgZW5kcG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IG91dGVyTm9kZSk7XG5cbiAgICBpZiAoIW0pIHJldHVybiBudWxsO1xuXG4gICAgLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuICAgIC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XG5cbiAgICB2YXIgc3RvcCA9IG0sXG4gICAgICAgIG14ID0gbS54LFxuICAgICAgICBteSA9IG0ueSxcbiAgICAgICAgdGFuTWluID0gSW5maW5pdHksXG4gICAgICAgIHRhbjtcblxuICAgIHAgPSBtO1xuXG4gICAgZG8ge1xuICAgICAgICBpZiAoaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXG4gICAgICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55KSkge1xuXG4gICAgICAgICAgICB0YW4gPSBNYXRoLmFicyhoeSAtIHAueSkgLyAoaHggLSBwLngpOyAvLyB0YW5nZW50aWFsXG5cbiAgICAgICAgICAgIGlmIChsb2NhbGx5SW5zaWRlKHAsIGhvbGUpICYmXG4gICAgICAgICAgICAgICAgKHRhbiA8IHRhbk1pbiB8fCAodGFuID09PSB0YW5NaW4gJiYgKHAueCA+IG0ueCB8fCAocC54ID09PSBtLnggJiYgc2VjdG9yQ29udGFpbnNTZWN0b3IobSwgcCkpKSkpKSB7XG4gICAgICAgICAgICAgICAgbSA9IHA7XG4gICAgICAgICAgICAgICAgdGFuTWluID0gdGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdG9wKTtcblxuICAgIHJldHVybiBtO1xufVxuXG4vLyB3aGV0aGVyIHNlY3RvciBpbiB2ZXJ0ZXggbSBjb250YWlucyBzZWN0b3IgaW4gdmVydGV4IHAgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZXNcbmZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApIHtcbiAgICByZXR1cm4gYXJlYShtLnByZXYsIG0sIHAucHJldikgPCAwICYmIGFyZWEocC5uZXh0LCBtLCBtLm5leHQpIDwgMDtcbn1cblxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuZnVuY3Rpb24gaW5kZXhDdXJ2ZShzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC56ID09PSAwKSBwLnogPSB6T3JkZXIocC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICBwLnByZXZaID0gcC5wcmV2O1xuICAgICAgICBwLm5leHRaID0gcC5uZXh0O1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHAucHJldloubmV4dFogPSBudWxsO1xuICAgIHAucHJldlogPSBudWxsO1xuXG4gICAgc29ydExpbmtlZChwKTtcbn1cblxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cbi8vIGh0dHA6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vYWxnb3JpdGhtcy9saXN0c29ydC5odG1sXG5mdW5jdGlvbiBzb3J0TGlua2VkKGxpc3QpIHtcbiAgICB2YXIgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsXG4gICAgICAgIGluU2l6ZSA9IDE7XG5cbiAgICBkbyB7XG4gICAgICAgIHAgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gbnVsbDtcbiAgICAgICAgdGFpbCA9IG51bGw7XG4gICAgICAgIG51bU1lcmdlcyA9IDA7XG5cbiAgICAgICAgd2hpbGUgKHApIHtcbiAgICAgICAgICAgIG51bU1lcmdlcysrO1xuICAgICAgICAgICAgcSA9IHA7XG4gICAgICAgICAgICBwU2l6ZSA9IDA7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5TaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwU2l6ZSsrO1xuICAgICAgICAgICAgICAgIHEgPSBxLm5leHRaO1xuICAgICAgICAgICAgICAgIGlmICghcSkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxU2l6ZSA9IGluU2l6ZTtcblxuICAgICAgICAgICAgd2hpbGUgKHBTaXplID4gMCB8fCAocVNpemUgPiAwICYmIHEpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBwO1xuICAgICAgICAgICAgICAgICAgICBwID0gcC5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcFNpemUtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlID0gcTtcbiAgICAgICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XG4gICAgICAgICAgICAgICAgICAgIHFTaXplLS07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRhaWwpIHRhaWwubmV4dFogPSBlO1xuICAgICAgICAgICAgICAgIGVsc2UgbGlzdCA9IGU7XG5cbiAgICAgICAgICAgICAgICBlLnByZXZaID0gdGFpbDtcbiAgICAgICAgICAgICAgICB0YWlsID0gZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IHE7XG4gICAgICAgIH1cblxuICAgICAgICB0YWlsLm5leHRaID0gbnVsbDtcbiAgICAgICAgaW5TaXplICo9IDI7XG5cbiAgICB9IHdoaWxlIChudW1NZXJnZXMgPiAxKTtcblxuICAgIHJldHVybiBsaXN0O1xufVxuXG4vLyB6LW9yZGVyIG9mIGEgcG9pbnQgZ2l2ZW4gY29vcmRzIGFuZCBpbnZlcnNlIG9mIHRoZSBsb25nZXIgc2lkZSBvZiBkYXRhIGJib3hcbmZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgLy8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxuICAgIHggPSAoeCAtIG1pblgpICogaW52U2l6ZSB8IDA7XG4gICAgeSA9ICh5IC0gbWluWSkgKiBpbnZTaXplIHwgMDtcblxuICAgIHggPSAoeCB8ICh4IDw8IDgpKSAmIDB4MDBGRjAwRkY7XG4gICAgeCA9ICh4IHwgKHggPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgICB4ID0gKHggfCAoeCA8PCAyKSkgJiAweDMzMzMzMzMzO1xuICAgIHggPSAoeCB8ICh4IDw8IDEpKSAmIDB4NTU1NTU1NTU7XG5cbiAgICB5ID0gKHkgfCAoeSA8PCA4KSkgJiAweDAwRkYwMEZGO1xuICAgIHkgPSAoeSB8ICh5IDw8IDQpKSAmIDB4MEYwRjBGMEY7XG4gICAgeSA9ICh5IHwgKHkgPDwgMikpICYgMHgzMzMzMzMzMztcbiAgICB5ID0gKHkgfCAoeSA8PCAxKSkgJiAweDU1NTU1NTU1O1xuXG4gICAgcmV0dXJuIHggfCAoeSA8PCAxKTtcbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuZnVuY3Rpb24gZ2V0TGVmdG1vc3Qoc3RhcnQpIHtcbiAgICB2YXIgcCA9IHN0YXJ0LFxuICAgICAgICBsZWZ0bW9zdCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAueCA8IGxlZnRtb3N0LnggfHwgKHAueCA9PT0gbGVmdG1vc3QueCAmJiBwLnkgPCBsZWZ0bW9zdC55KSkgbGVmdG1vc3QgPSBwO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBsZWZ0bW9zdDtcbn1cblxuLy8gY2hlY2sgaWYgYSBwb2ludCBsaWVzIHdpdGhpbiBhIGNvbnZleCB0cmlhbmdsZVxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSkge1xuICAgIHJldHVybiAoY3ggLSBweCkgKiAoYXkgLSBweSkgPj0gKGF4IC0gcHgpICogKGN5IC0gcHkpICYmXG4gICAgICAgICAgIChheCAtIHB4KSAqIChieSAtIHB5KSA+PSAoYnggLSBweCkgKiAoYXkgLSBweSkgJiZcbiAgICAgICAgICAgKGJ4IC0gcHgpICogKGN5IC0gcHkpID49IChjeCAtIHB4KSAqIChieSAtIHB5KTtcbn1cblxuLy8gY2hlY2sgaWYgYSBkaWFnb25hbCBiZXR3ZWVuIHR3byBwb2x5Z29uIG5vZGVzIGlzIHZhbGlkIChsaWVzIGluIHBvbHlnb24gaW50ZXJpb3IpXG5mdW5jdGlvbiBpc1ZhbGlkRGlhZ29uYWwoYSwgYikge1xuICAgIHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgIWludGVyc2VjdHNQb2x5Z29uKGEsIGIpICYmIC8vIGRvbmVzJ3QgaW50ZXJzZWN0IG90aGVyIGVkZ2VzXG4gICAgICAgICAgIChsb2NhbGx5SW5zaWRlKGEsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYSkgJiYgbWlkZGxlSW5zaWRlKGEsIGIpICYmIC8vIGxvY2FsbHkgdmlzaWJsZVxuICAgICAgICAgICAgKGFyZWEoYS5wcmV2LCBhLCBiLnByZXYpIHx8IGFyZWEoYSwgYi5wcmV2LCBiKSkgfHwgLy8gZG9lcyBub3QgY3JlYXRlIG9wcG9zaXRlLWZhY2luZyBzZWN0b3JzXG4gICAgICAgICAgICBlcXVhbHMoYSwgYikgJiYgYXJlYShhLnByZXYsIGEsIGEubmV4dCkgPiAwICYmIGFyZWEoYi5wcmV2LCBiLCBiLm5leHQpID4gMCk7IC8vIHNwZWNpYWwgemVyby1sZW5ndGggY2FzZVxufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5mdW5jdGlvbiBhcmVhKHAsIHEsIHIpIHtcbiAgICByZXR1cm4gKHEueSAtIHAueSkgKiAoci54IC0gcS54KSAtIChxLnggLSBwLngpICogKHIueSAtIHEueSk7XG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5mdW5jdGlvbiBlcXVhbHMocDEsIHAyKSB7XG4gICAgcmV0dXJuIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueTtcbn1cblxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxuZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEsIHAyLCBxMikge1xuICAgIHZhciBvMSA9IHNpZ24oYXJlYShwMSwgcTEsIHAyKSk7XG4gICAgdmFyIG8yID0gc2lnbihhcmVhKHAxLCBxMSwgcTIpKTtcbiAgICB2YXIgbzMgPSBzaWduKGFyZWEocDIsIHEyLCBwMSkpO1xuICAgIHZhciBvNCA9IHNpZ24oYXJlYShwMiwgcTIsIHExKSk7XG5cbiAgICBpZiAobzEgIT09IG8yICYmIG8zICE9PSBvNCkgcmV0dXJuIHRydWU7IC8vIGdlbmVyYWwgY2FzZVxuXG4gICAgaWYgKG8xID09PSAwICYmIG9uU2VnbWVudChwMSwgcDIsIHExKSkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcDIgYXJlIGNvbGxpbmVhciBhbmQgcDIgbGllcyBvbiBwMXExXG4gICAgaWYgKG8yID09PSAwICYmIG9uU2VnbWVudChwMSwgcTIsIHExKSkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcTIgYXJlIGNvbGxpbmVhciBhbmQgcTIgbGllcyBvbiBwMXExXG4gICAgaWYgKG8zID09PSAwICYmIG9uU2VnbWVudChwMiwgcDEsIHEyKSkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcDEgYXJlIGNvbGxpbmVhciBhbmQgcDEgbGllcyBvbiBwMnEyXG4gICAgaWYgKG80ID09PSAwICYmIG9uU2VnbWVudChwMiwgcTEsIHEyKSkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcTEgYXJlIGNvbGxpbmVhciBhbmQgcTEgbGllcyBvbiBwMnEyXG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGZvciBjb2xsaW5lYXIgcG9pbnRzIHAsIHEsIHIsIGNoZWNrIGlmIHBvaW50IHEgbGllcyBvbiBzZWdtZW50IHByXG5mdW5jdGlvbiBvblNlZ21lbnQocCwgcSwgcikge1xuICAgIHJldHVybiBxLnggPD0gTWF0aC5tYXgocC54LCByLngpICYmIHEueCA+PSBNYXRoLm1pbihwLngsIHIueCkgJiYgcS55IDw9IE1hdGgubWF4KHAueSwgci55KSAmJiBxLnkgPj0gTWF0aC5taW4ocC55LCByLnkpO1xufVxuXG5mdW5jdGlvbiBzaWduKG51bSkge1xuICAgIHJldHVybiBudW0gPiAwID8gMSA6IG51bSA8IDAgPyAtMSA6IDA7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhLCBiKSB7XG4gICAgdmFyIHAgPSBhO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxuICAgICAgICAgICAgICAgIGludGVyc2VjdHMocCwgcC5uZXh0LCBhLCBiKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbG9jYWxseUluc2lkZShhLCBiKSB7XG4gICAgcmV0dXJuIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpIDwgMCA/XG4gICAgICAgIGFyZWEoYSwgYiwgYS5uZXh0KSA+PSAwICYmIGFyZWEoYSwgYS5wcmV2LCBiKSA+PSAwIDpcbiAgICAgICAgYXJlYShhLCBiLCBhLnByZXYpIDwgMCB8fCBhcmVhKGEsIGEubmV4dCwgYikgPCAwO1xufVxuXG4vLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIG1pZGRsZUluc2lkZShhLCBiKSB7XG4gICAgdmFyIHAgPSBhLFxuICAgICAgICBpbnNpZGUgPSBmYWxzZSxcbiAgICAgICAgcHggPSAoYS54ICsgYi54KSAvIDIsXG4gICAgICAgIHB5ID0gKGEueSArIGIueSkgLyAyO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKCgocC55ID4gcHkpICE9PSAocC5uZXh0LnkgPiBweSkpICYmIHAubmV4dC55ICE9PSBwLnkgJiZcbiAgICAgICAgICAgICAgICAocHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpKVxuICAgICAgICAgICAgaW5zaWRlID0gIWluc2lkZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBhKTtcblxuICAgIHJldHVybiBpbnNpZGU7XG59XG5cbi8vIGxpbmsgdHdvIHBvbHlnb24gdmVydGljZXMgd2l0aCBhIGJyaWRnZTsgaWYgdGhlIHZlcnRpY2VzIGJlbG9uZyB0byB0aGUgc2FtZSByaW5nLCBpdCBzcGxpdHMgcG9seWdvbiBpbnRvIHR3bztcbi8vIGlmIG9uZSBiZWxvbmdzIHRvIHRoZSBvdXRlciByaW5nIGFuZCBhbm90aGVyIHRvIGEgaG9sZSwgaXQgbWVyZ2VzIGl0IGludG8gYSBzaW5nbGUgcmluZ1xuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKGEsIGIpIHtcbiAgICB2YXIgYTIgPSBuZXcgTm9kZShhLmksIGEueCwgYS55KSxcbiAgICAgICAgYjIgPSBuZXcgTm9kZShiLmksIGIueCwgYi55KSxcbiAgICAgICAgYW4gPSBhLm5leHQsXG4gICAgICAgIGJwID0gYi5wcmV2O1xuXG4gICAgYS5uZXh0ID0gYjtcbiAgICBiLnByZXYgPSBhO1xuXG4gICAgYTIubmV4dCA9IGFuO1xuICAgIGFuLnByZXYgPSBhMjtcblxuICAgIGIyLm5leHQgPSBhMjtcbiAgICBhMi5wcmV2ID0gYjI7XG5cbiAgICBicC5uZXh0ID0gYjI7XG4gICAgYjIucHJldiA9IGJwO1xuXG4gICAgcmV0dXJuIGIyO1xufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZShpLCB4LCB5LCBsYXN0KSB7XG4gICAgdmFyIHAgPSBuZXcgTm9kZShpLCB4LCB5KTtcblxuICAgIGlmICghbGFzdCkge1xuICAgICAgICBwLnByZXYgPSBwO1xuICAgICAgICBwLm5leHQgPSBwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5uZXh0ID0gbGFzdC5uZXh0O1xuICAgICAgICBwLnByZXYgPSBsYXN0O1xuICAgICAgICBsYXN0Lm5leHQucHJldiA9IHA7XG4gICAgICAgIGxhc3QubmV4dCA9IHA7XG4gICAgfVxuICAgIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKHApIHtcbiAgICBwLm5leHQucHJldiA9IHAucHJldjtcbiAgICBwLnByZXYubmV4dCA9IHAubmV4dDtcblxuICAgIGlmIChwLnByZXZaKSBwLnByZXZaLm5leHRaID0gcC5uZXh0WjtcbiAgICBpZiAocC5uZXh0WikgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG59XG5cbmZ1bmN0aW9uIE5vZGUoaSwgeCwgeSkge1xuICAgIC8vIHZlcnRleCBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxuICAgIHRoaXMuaSA9IGk7XG5cbiAgICAvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG5cbiAgICAvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0ZXggbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcbiAgICB0aGlzLnByZXYgPSBudWxsO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG5cbiAgICAvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXG4gICAgdGhpcy56ID0gMDtcblxuICAgIC8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXJcbiAgICB0aGlzLnByZXZaID0gbnVsbDtcbiAgICB0aGlzLm5leHRaID0gbnVsbDtcblxuICAgIC8vIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYSBzdGVpbmVyIHBvaW50XG4gICAgdGhpcy5zdGVpbmVyID0gZmFsc2U7XG59XG5cbi8vIHJldHVybiBhIHBlcmNlbnRhZ2UgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBwb2x5Z29uIGFyZWEgYW5kIGl0cyB0cmlhbmd1bGF0aW9uIGFyZWE7XG4vLyB1c2VkIHRvIHZlcmlmeSBjb3JyZWN0bmVzcyBvZiB0cmlhbmd1bGF0aW9uXG5lYXJjdXQuZGV2aWF0aW9uID0gZnVuY3Rpb24gKGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0sIHRyaWFuZ2xlcykge1xuICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDtcbiAgICB2YXIgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGg7XG5cbiAgICB2YXIgcG9seWdvbkFyZWEgPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIDAsIG91dGVyTGVuLCBkaW0pKTtcbiAgICBpZiAoaGFzSG9sZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBob2xlSW5kaWNlc1tpXSAqIGRpbTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgcG9seWdvbkFyZWEgLT0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0cmlhbmdsZXNBcmVhID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciBhID0gdHJpYW5nbGVzW2ldICogZGltO1xuICAgICAgICB2YXIgYiA9IHRyaWFuZ2xlc1tpICsgMV0gKiBkaW07XG4gICAgICAgIHZhciBjID0gdHJpYW5nbGVzW2kgKyAyXSAqIGRpbTtcbiAgICAgICAgdHJpYW5nbGVzQXJlYSArPSBNYXRoLmFicyhcbiAgICAgICAgICAgIChkYXRhW2FdIC0gZGF0YVtjXSkgKiAoZGF0YVtiICsgMV0gLSBkYXRhW2EgKyAxXSkgLVxuICAgICAgICAgICAgKGRhdGFbYV0gLSBkYXRhW2JdKSAqIChkYXRhW2MgKyAxXSAtIGRhdGFbYSArIDFdKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvbHlnb25BcmVhID09PSAwICYmIHRyaWFuZ2xlc0FyZWEgPT09IDAgPyAwIDpcbiAgICAgICAgTWF0aC5hYnMoKHRyaWFuZ2xlc0FyZWEgLSBwb2x5Z29uQXJlYSkgLyBwb2x5Z29uQXJlYSk7XG59O1xuXG5mdW5jdGlvbiBzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0pIHtcbiAgICAgICAgc3VtICs9IChkYXRhW2pdIC0gZGF0YVtpXSkgKiAoZGF0YVtpICsgMV0gKyBkYXRhW2ogKyAxXSk7XG4gICAgICAgIGogPSBpO1xuICAgIH1cbiAgICByZXR1cm4gc3VtO1xufVxuXG4vLyB0dXJuIGEgcG9seWdvbiBpbiBhIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IGZvcm0gKGUuZy4gYXMgaW4gR2VvSlNPTikgaW50byBhIGZvcm0gRWFyY3V0IGFjY2VwdHNcbmVhcmN1dC5mbGF0dGVuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZGltID0gZGF0YVswXVswXS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IHt2ZXJ0aWNlczogW10sIGhvbGVzOiBbXSwgZGltZW5zaW9uczogZGltfSxcbiAgICAgICAgaG9sZUluZGV4ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRhdGFbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGltOyBkKyspIHJlc3VsdC52ZXJ0aWNlcy5wdXNoKGRhdGFbaV1bal1bZF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgaG9sZUluZGV4ICs9IGRhdGFbaSAtIDFdLmxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdC5ob2xlcy5wdXNoKGhvbGVJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKlxuXG4gQ29weXJpZ2h0IDIwMDAsIFNpbGljb24gR3JhcGhpY3MsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiBDb3B5cmlnaHQgMjAxNSwgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0b1xuIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgaW5jbHVkaW5nIHRoZSBkYXRlcyBvZiBmaXJzdCBwdWJsaWNhdGlvbiBhbmRcbiBlaXRoZXIgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBvciBhIHJlZmVyZW5jZSB0byBodHRwOi8vb3NzLnNnaS5jb20vcHJvamVjdHMvRnJlZUIvXG4gc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTExcbiBTSUxJQ09OIEdSQVBISUNTLCBJTkMuIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SXG4gSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuIE9yaWdpbmFsIENvZGUuIFRoZSBPcmlnaW5hbCBDb2RlIGlzOiBPcGVuR0wgU2FtcGxlIEltcGxlbWVudGF0aW9uLFxuIFZlcnNpb24gMS4yLjEsIHJlbGVhc2VkIEphbnVhcnkgMjYsIDIwMDAsIGRldmVsb3BlZCBieSBTaWxpY29uIEdyYXBoaWNzLFxuIEluYy4gVGhlIE9yaWdpbmFsIENvZGUgaXMgQ29weXJpZ2h0IChjKSAxOTkxLTIwMDAgU2lsaWNvbiBHcmFwaGljcywgSW5jLlxuIENvcHlyaWdodCBpbiBhbnkgcG9ydGlvbnMgY3JlYXRlZCBieSB0aGlyZCBwYXJ0aWVzIGlzIGFzIGluZGljYXRlZFxuIGVsc2V3aGVyZSBoZXJlaW4uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBuO2Z1bmN0aW9uIHQoYSxiKXtyZXR1cm4gYS5iPT09Yi5iJiZhLmE9PT1iLmF9ZnVuY3Rpb24gdShhLGIpe3JldHVybiBhLmI8Yi5ifHxhLmI9PT1iLmImJmEuYTw9Yi5hfWZ1bmN0aW9uIHYoYSxiLGMpe3ZhciBkPWIuYi1hLmIsZT1jLmItYi5iO3JldHVybiAwPGQrZT9kPGU/Yi5hLWEuYStkLyhkK2UpKihhLmEtYy5hKTpiLmEtYy5hK2UvKGQrZSkqKGMuYS1hLmEpOjB9ZnVuY3Rpb24geChhLGIsYyl7dmFyIGQ9Yi5iLWEuYixlPWMuYi1iLmI7cmV0dXJuIDA8ZCtlPyhiLmEtYy5hKSpkKyhiLmEtYS5hKSplOjB9ZnVuY3Rpb24geihhLGIpe3JldHVybiBhLmE8Yi5hfHxhLmE9PT1iLmEmJmEuYjw9Yi5ifWZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZD1iLmEtYS5hLGU9Yy5hLWIuYTtyZXR1cm4gMDxkK2U/ZDxlP2IuYi1hLmIrZC8oZCtlKSooYS5iLWMuYik6Yi5iLWMuYitlLyhkK2UpKihjLmItYS5iKTowfVxuZnVuY3Rpb24gYmEoYSxiLGMpe3ZhciBkPWIuYS1hLmEsZT1jLmEtYi5hO3JldHVybiAwPGQrZT8oYi5iLWMuYikqZCsoYi5iLWEuYikqZTowfWZ1bmN0aW9uIGNhKGEpe3JldHVybiB1KGEuYi5hLGEuYSl9ZnVuY3Rpb24gZGEoYSl7cmV0dXJuIHUoYS5hLGEuYi5hKX1mdW5jdGlvbiBBKGEsYixjLGQpe2E9MD5hPzA6YTtjPTA+Yz8wOmM7cmV0dXJuIGE8PWM/MD09PWM/KGIrZCkvMjpiK2EvKGErYykqKGQtYik6ZCtjLyhhK2MpKihiLWQpfTtmdW5jdGlvbiBlYShhKXt2YXIgYj1CKGEuYik7QyhiLGEuYyk7QyhiLmIsYS5jKTtEKGIsYS5hKTtyZXR1cm4gYn1mdW5jdGlvbiBFKGEsYil7dmFyIGM9ITEsZD0hMTthIT09YiYmKGIuYSE9PWEuYSYmKGQ9ITAsRihiLmEsYS5hKSksYi5kIT09YS5kJiYoYz0hMCxHKGIuZCxhLmQpKSxIKGIsYSksZHx8KEMoYixhLmEpLGEuYS5jPWEpLGN8fChEKGIsYS5kKSxhLmQuYT1hKSl9ZnVuY3Rpb24gSShhKXt2YXIgYj1hLmIsYz0hMTthLmQhPT1hLmIuZCYmKGM9ITAsRyhhLmQsYS5iLmQpKTthLmM9PT1hP0YoYS5hLG51bGwpOihhLmIuZC5hPUooYSksYS5hLmM9YS5jLEgoYSxKKGEpKSxjfHxEKGEsYS5kKSk7Yi5jPT09Yj8oRihiLmEsbnVsbCksRyhiLmQsbnVsbCkpOihhLmQuYT1KKGIpLGIuYS5jPWIuYyxIKGIsSihiKSkpO2ZhKGEpfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1CKGEpLGM9Yi5iO0goYixhLmUpO2IuYT1hLmIuYTtDKGMsYi5hKTtiLmQ9Yy5kPWEuZDtiPWIuYjtIKGEuYixKKGEuYikpO0goYS5iLGIpO2EuYi5hPWIuYTtiLmIuYS5jPWIuYjtiLmIuZD1hLmIuZDtiLmY9YS5mO2IuYi5mPWEuYi5mO3JldHVybiBifWZ1bmN0aW9uIEwoYSxiKXt2YXIgYz0hMSxkPUIoYSksZT1kLmI7Yi5kIT09YS5kJiYoYz0hMCxHKGIuZCxhLmQpKTtIKGQsYS5lKTtIKGUsYik7ZC5hPWEuYi5hO2UuYT1iLmE7ZC5kPWUuZD1hLmQ7YS5kLmE9ZTtjfHxEKGQsYS5kKTtyZXR1cm4gZH1mdW5jdGlvbiBCKGEpe3ZhciBiPW5ldyBNLGM9bmV3IE0sZD1hLmIuaDtjLmg9ZDtkLmIuaD1iO2IuaD1hO2EuYi5oPWM7Yi5iPWM7Yi5jPWI7Yi5lPWM7Yy5iPWI7Yy5jPWM7cmV0dXJuIGMuZT1ifWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmMsZD1iLmM7Yy5iLmU9YjtkLmIuZT1hO2EuYz1kO2IuYz1jfVxuZnVuY3Rpb24gQyhhLGIpe3ZhciBjPWIuZixkPW5ldyBOKGIsYyk7Yy5lPWQ7Yi5mPWQ7Yz1kLmM9YTtkbyBjLmE9ZCxjPWMuYzt3aGlsZShjIT09YSl9ZnVuY3Rpb24gRChhLGIpe3ZhciBjPWIuZCxkPW5ldyBnYShiLGMpO2MuYj1kO2IuZD1kO2QuYT1hO2QuYz1iLmM7Yz1hO2RvIGMuZD1kLGM9Yy5lO3doaWxlKGMhPT1hKX1mdW5jdGlvbiBmYShhKXt2YXIgYj1hLmg7YT1hLmIuaDtiLmIuaD1hO2EuYi5oPWJ9ZnVuY3Rpb24gRihhLGIpe3ZhciBjPWEuYyxkPWM7ZG8gZC5hPWIsZD1kLmM7d2hpbGUoZCE9PWMpO2M9YS5mO2Q9YS5lO2QuZj1jO2MuZT1kfWZ1bmN0aW9uIEcoYSxiKXt2YXIgYz1hLmEsZD1jO2RvIGQuZD1iLGQ9ZC5lO3doaWxlKGQhPT1jKTtjPWEuZDtkPWEuYjtkLmQ9YztjLmI9ZH07ZnVuY3Rpb24gaGEoYSl7dmFyIGI9MDtNYXRoLmFicyhhWzFdKT5NYXRoLmFicyhhWzBdKSYmKGI9MSk7TWF0aC5hYnMoYVsyXSk+TWF0aC5hYnMoYVtiXSkmJihiPTIpO3JldHVybiBifTt2YXIgTz00KjFFMTUwO2Z1bmN0aW9uIFAoYSxiKXthLmYrPWIuZjthLmIuZis9Yi5iLmZ9ZnVuY3Rpb24gaWEoYSxiLGMpe2E9YS5hO2I9Yi5hO2M9Yy5hO2lmKGIuYi5hPT09YSlyZXR1cm4gYy5iLmE9PT1hP3UoYi5hLGMuYSk/MD49eChjLmIuYSxiLmEsYy5hKTowPD14KGIuYi5hLGMuYSxiLmEpOjA+PXgoYy5iLmEsYSxjLmEpO2lmKGMuYi5hPT09YSlyZXR1cm4gMDw9eChiLmIuYSxhLGIuYSk7Yj12KGIuYi5hLGEsYi5hKTthPXYoYy5iLmEsYSxjLmEpO3JldHVybiBiPj1hfWZ1bmN0aW9uIFEoYSl7YS5hLmk9bnVsbDt2YXIgYj1hLmU7Yi5hLmM9Yi5jO2IuYy5hPWIuYTthLmU9bnVsbH1mdW5jdGlvbiBqYShhLGIpe0koYS5hKTthLmM9ITE7YS5hPWI7Yi5pPWF9ZnVuY3Rpb24ga2EoYSl7dmFyIGI9YS5hLmE7ZG8gYT1SKGEpO3doaWxlKGEuYS5hPT09Yik7YS5jJiYoYj1MKFMoYSkuYS5iLGEuYS5lKSxqYShhLGIpLGE9UihhKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBsYShhLGIsYyl7dmFyIGQ9bmV3IG1hO2QuYT1jO2QuZT1uYShhLmYsYi5lLGQpO3JldHVybiBjLmk9ZH1mdW5jdGlvbiBvYShhLGIpe3N3aXRjaChhLnMpe2Nhc2UgMTAwMTMwOnJldHVybiAwIT09KGImMSk7Y2FzZSAxMDAxMzE6cmV0dXJuIDAhPT1iO2Nhc2UgMTAwMTMyOnJldHVybiAwPGI7Y2FzZSAxMDAxMzM6cmV0dXJuIDA+YjtjYXNlIDEwMDEzNDpyZXR1cm4gMjw9Ynx8LTI+PWJ9cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSl7dmFyIGI9YS5hLGM9Yi5kO2MuYz1hLmQ7Yy5hPWI7UShhKX1mdW5jdGlvbiBUKGEsYixjKXthPWI7Zm9yKGI9Yi5hO2EhPT1jOyl7YS5jPSExO3ZhciBkPVMoYSksZT1kLmE7aWYoZS5hIT09Yi5hKXtpZighZC5jKXtwYShhKTticmVha31lPUwoYi5jLmIsZS5iKTtqYShkLGUpfWIuYyE9PWUmJihFKEooZSksZSksRShiLGUpKTtwYShhKTtiPWQuYTthPWR9cmV0dXJuIGJ9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSxmKXt2YXIgZz0hMDtkbyBsYShhLGIsYy5iKSxjPWMuYzt3aGlsZShjIT09ZCk7Zm9yKG51bGw9PT1lJiYoZT1TKGIpLmEuYi5jKTs7KXtkPVMoYik7Yz1kLmEuYjtpZihjLmEhPT1lLmEpYnJlYWs7Yy5jIT09ZSYmKEUoSihjKSxjKSxFKEooZSksYykpO2QuZj1iLmYtYy5mO2QuZD1vYShhLGQuZik7Yi5iPSEwOyFnJiZxYShhLGIpJiYoUChjLGUpLFEoYiksSShlKSk7Zz0hMTtiPWQ7ZT1jfWIuYj0hMDtmJiZyYShhLGIpfWZ1bmN0aW9uIHNhKGEsYixjLGQsZSl7dmFyIGY9W2IuZ1swXSxiLmdbMV0sYi5nWzJdXTtiLmQ9bnVsbDtiLmQ9YS5vP2EubyhmLGMsZCxhLmMpfHxudWxsOm51bGw7bnVsbD09PWIuZCYmKGU/YS5ufHwoVihhLDEwMDE1NiksYS5uPSEwKTpiLmQ9Y1swXSl9XG5mdW5jdGlvbiB0YShhLGIsYyl7dmFyIGQ9W251bGwsbnVsbCxudWxsLG51bGxdO2RbMF09Yi5hLmQ7ZFsxXT1jLmEuZDtzYShhLGIuYSxkLFsuNSwuNSwwLDBdLCExKTtFKGIsYyl9ZnVuY3Rpb24gdWEoYSxiLGMsZCxlKXt2YXIgZj1NYXRoLmFicyhiLmItYS5iKStNYXRoLmFicyhiLmEtYS5hKSxnPU1hdGguYWJzKGMuYi1hLmIpK01hdGguYWJzKGMuYS1hLmEpLGg9ZSsxO2RbZV09LjUqZy8oZitnKTtkW2hdPS41KmYvKGYrZyk7YS5nWzBdKz1kW2VdKmIuZ1swXStkW2hdKmMuZ1swXTthLmdbMV0rPWRbZV0qYi5nWzFdK2RbaF0qYy5nWzFdO2EuZ1syXSs9ZFtlXSpiLmdbMl0rZFtoXSpjLmdbMl19XG5mdW5jdGlvbiBxYShhLGIpe3ZhciBjPVMoYiksZD1iLmEsZT1jLmE7aWYodShkLmEsZS5hKSl7aWYoMDx4KGUuYi5hLGQuYSxlLmEpKXJldHVybiExO2lmKCF0KGQuYSxlLmEpKUsoZS5iKSxFKGQsSihlKSksYi5iPWMuYj0hMDtlbHNlIGlmKGQuYSE9PWUuYSl7dmFyIGM9YS5lLGY9ZC5hLmg7aWYoMDw9Zil7dmFyIGM9Yy5iLGc9Yy5kLGg9Yy5lLGs9Yy5jLGw9a1tmXTtnW2xdPWdbYy5hXTtrW2dbbF1dPWw7bDw9LS1jLmEmJigxPj1sP1coYyxsKTp1KGhbZ1tsPj4xXV0saFtnW2xdXSk/VyhjLGwpOnZhKGMsbCkpO2hbZl09bnVsbDtrW2ZdPWMuYjtjLmI9Zn1lbHNlIGZvcihjLmNbLShmKzEpXT1udWxsOzA8Yy5hJiZudWxsPT09Yy5jW2MuZFtjLmEtMV1dOyktLWMuYTt0YShhLEooZSksZCl9fWVsc2V7aWYoMD54KGQuYi5hLGUuYSxkLmEpKXJldHVybiExO1IoYikuYj1iLmI9ITA7SyhkLmIpO0UoSihlKSxkKX1yZXR1cm4hMH1cbmZ1bmN0aW9uIHdhKGEsYil7dmFyIGM9UyhiKSxkPWIuYSxlPWMuYSxmPWQuYSxnPWUuYSxoPWQuYi5hLGs9ZS5iLmEsbD1uZXcgTjt4KGgsYS5hLGYpO3goayxhLmEsZyk7aWYoZj09PWd8fE1hdGgubWluKGYuYSxoLmEpPk1hdGgubWF4KGcuYSxrLmEpKXJldHVybiExO2lmKHUoZixnKSl7aWYoMDx4KGssZixnKSlyZXR1cm4hMX1lbHNlIGlmKDA+eChoLGcsZikpcmV0dXJuITE7dmFyIHI9aCxwPWYscT1rLHk9ZyxtLHc7dShyLHApfHwobT1yLHI9cCxwPW0pO3UocSx5KXx8KG09cSxxPXkseT1tKTt1KHIscSl8fChtPXIscj1xLHE9bSxtPXAscD15LHk9bSk7dShxLHApP3UocCx5KT8obT12KHIscSxwKSx3PXYocSxwLHkpLDA+bSt3JiYobT0tbSx3PS13KSxsLmI9QShtLHEuYix3LHAuYikpOihtPXgocixxLHApLHc9LXgocix5LHApLDA+bSt3JiYobT0tbSx3PS13KSxsLmI9QShtLHEuYix3LHkuYikpOmwuYj0ocS5iK3AuYikvMjt6KHIscCl8fChtPXIscj1wLHA9bSk7eihxLHkpfHxcbihtPXEscT15LHk9bSk7eihyLHEpfHwobT1yLHI9cSxxPW0sbT1wLHA9eSx5PW0pO3oocSxwKT96KHAseSk/KG09YWEocixxLHApLHc9YWEocSxwLHkpLDA+bSt3JiYobT0tbSx3PS13KSxsLmE9QShtLHEuYSx3LHAuYSkpOihtPWJhKHIscSxwKSx3PS1iYShyLHkscCksMD5tK3cmJihtPS1tLHc9LXcpLGwuYT1BKG0scS5hLHcseS5hKSk6bC5hPShxLmErcC5hKS8yO3UobCxhLmEpJiYobC5iPWEuYS5iLGwuYT1hLmEuYSk7cj11KGYsZyk/ZjpnO3UocixsKSYmKGwuYj1yLmIsbC5hPXIuYSk7aWYodChsLGYpfHx0KGwsZykpcmV0dXJuIHFhKGEsYiksITE7aWYoIXQoaCxhLmEpJiYwPD14KGgsYS5hLGwpfHwhdChrLGEuYSkmJjA+PXgoayxhLmEsbCkpe2lmKGs9PT1hLmEpcmV0dXJuIEsoZC5iKSxFKGUuYixkKSxiPWthKGIpLGQ9UyhiKS5hLFQoYSxTKGIpLGMpLFUoYSxiLEooZCksZCxkLCEwKSwhMDtpZihoPT09YS5hKXtLKGUuYik7RShkLmUsSihlKSk7Zj1jPWI7Zz1mLmEuYi5hO1xuZG8gZj1SKGYpO3doaWxlKGYuYS5iLmE9PT1nKTtiPWY7Zj1TKGIpLmEuYi5jO2MuYT1KKGUpO2U9VChhLGMsbnVsbCk7VShhLGIsZS5jLGQuYi5jLGYsITApO3JldHVybiEwfTA8PXgoaCxhLmEsbCkmJihSKGIpLmI9Yi5iPSEwLEsoZC5iKSxkLmEuYj1hLmEuYixkLmEuYT1hLmEuYSk7MD49eChrLGEuYSxsKSYmKGIuYj1jLmI9ITAsSyhlLmIpLGUuYS5iPWEuYS5iLGUuYS5hPWEuYS5hKTtyZXR1cm4hMX1LKGQuYik7SyhlLmIpO0UoSihlKSxkKTtkLmEuYj1sLmI7ZC5hLmE9bC5hO2QuYS5oPXhhKGEuZSxkLmEpO2Q9ZC5hO2U9WzAsMCwwLDBdO2w9W2YuZCxoLmQsZy5kLGsuZF07ZC5nWzBdPWQuZ1sxXT1kLmdbMl09MDt1YShkLGYsaCxlLDApO3VhKGQsZyxrLGUsMik7c2EoYSxkLGwsZSwhMCk7UihiKS5iPWIuYj1jLmI9ITA7cmV0dXJuITF9XG5mdW5jdGlvbiByYShhLGIpe2Zvcih2YXIgYz1TKGIpOzspe2Zvcig7Yy5iOyliPWMsYz1TKGMpO2lmKCFiLmImJihjPWIsYj1SKGIpLG51bGw9PT1ifHwhYi5iKSlicmVhaztiLmI9ITE7dmFyIGQ9Yi5hLGU9Yy5hLGY7aWYoZj1kLmIuYSE9PWUuYi5hKWE6e2Y9Yjt2YXIgZz1TKGYpLGg9Zi5hLGs9Zy5hLGw9dm9pZCAwO2lmKHUoaC5iLmEsay5iLmEpKXtpZigwPngoaC5iLmEsay5iLmEsaC5hKSl7Zj0hMTticmVhayBhfVIoZikuYj1mLmI9ITA7bD1LKGgpO0Uoay5iLGwpO2wuZC5jPWYuZH1lbHNle2lmKDA8eChrLmIuYSxoLmIuYSxrLmEpKXtmPSExO2JyZWFrIGF9Zi5iPWcuYj0hMDtsPUsoayk7RShoLmUsay5iKTtsLmIuZC5jPWYuZH1mPSEwfWYmJihjLmM/KFEoYyksSShlKSxjPVMoYiksZT1jLmEpOmIuYyYmKFEoYiksSShkKSxiPVIoYyksZD1iLmEpKTtpZihkLmEhPT1lLmEpaWYoZC5iLmE9PT1lLmIuYXx8Yi5jfHxjLmN8fGQuYi5hIT09YS5hJiZlLmIuYSE9PWEuYSlxYShhLFxuYik7ZWxzZSBpZih3YShhLGIpKWJyZWFrO2QuYT09PWUuYSYmZC5iLmE9PT1lLmIuYSYmKFAoZSxkKSxRKGIpLEkoZCksYj1SKGMpKX19XG5mdW5jdGlvbiB5YShhLGIpe2EuYT1iO2Zvcih2YXIgYz1iLmM7bnVsbD09PWMuaTspaWYoYz1jLmMsYz09PWIuYyl7dmFyIGM9YSxkPWIsZT1uZXcgbWE7ZS5hPWQuYy5iO3ZhciBmPWMuZixnPWYuYTtkbyBnPWcuYTt3aGlsZShudWxsIT09Zy5iJiYhZi5jKGYuYixlLGcuYikpO3ZhciBmPWcuYixoPVMoZiksZT1mLmEsZz1oLmE7aWYoMD09PXgoZS5iLmEsZCxlLmEpKWU9Zi5hLHQoZS5hLGQpfHx0KGUuYi5hLGQpfHwoSyhlLmIpLGYuYyYmKEkoZS5jKSxmLmM9ITEpLEUoZC5jLGUpLHlhKGMsZCkpO2Vsc2V7dmFyIGs9dShnLmIuYSxlLmIuYSk/ZjpoLGg9dm9pZCAwO2YuZHx8ay5jPyhrPT09Zj9oPUwoZC5jLmIsZS5lKTpoPUwoZy5iLmMuYixkLmMpLmIsay5jP2phKGssaCk6KGU9YyxmPWxhKGMsZixoKSxmLmY9UihmKS5mK2YuYS5mLGYuZD1vYShlLGYuZikpLHlhKGMsZCkpOlUoYyxmLGQuYyxkLmMsbnVsbCwhMCl9cmV0dXJufWM9a2EoYy5pKTtlPVMoYyk7Zj1lLmE7ZT1UKGEsXG5lLG51bGwpO2lmKGUuYz09PWYpe3ZhciBmPWUsZT1mLmMsZz1TKGMpLGg9Yy5hLGs9Zy5hLGw9ITE7aC5iLmEhPT1rLmIuYSYmd2EoYSxjKTt0KGguYSxhLmEpJiYoRShKKGUpLGgpLGM9a2EoYyksZT1TKGMpLmEsVChhLFMoYyksZyksbD0hMCk7dChrLmEsYS5hKSYmKEUoZixKKGspKSxmPVQoYSxnLG51bGwpLGw9ITApO2w/VShhLGMsZi5jLGUsZSwhMCk6KHUoay5hLGguYSk/ZD1KKGspOmQ9aCxkPUwoZi5jLmIsZCksVShhLGMsZCxkLmMsZC5jLCExKSxkLmIuaS5jPSEwLHJhKGEsYykpfWVsc2UgVShhLGMsZS5jLGYsZiwhMCl9ZnVuY3Rpb24gemEoYSxiKXt2YXIgYz1uZXcgbWEsZD1lYShhLmIpO2QuYS5iPU87ZC5hLmE9YjtkLmIuYS5iPS1PO2QuYi5hLmE9YjthLmE9ZC5iLmE7Yy5hPWQ7Yy5mPTA7Yy5kPSExO2MuYz0hMTtjLmg9ITA7Yy5iPSExO2Q9YS5mO2Q9bmEoZCxkLmEsYyk7Yy5lPWR9O2Z1bmN0aW9uIEFhKGEpe3RoaXMuYT1uZXcgQmE7dGhpcy5iPWE7dGhpcy5jPWlhfWZ1bmN0aW9uIG5hKGEsYixjKXtkbyBiPWIuYzt3aGlsZShudWxsIT09Yi5iJiYhYS5jKGEuYixiLmIsYykpO2E9bmV3IEJhKGMsYi5hLGIpO2IuYS5jPWE7cmV0dXJuIGIuYT1hfTtmdW5jdGlvbiBCYShhLGIsYyl7dGhpcy5iPWF8fG51bGw7dGhpcy5hPWJ8fHRoaXM7dGhpcy5jPWN8fHRoaXN9O2Z1bmN0aW9uIFgoKXt0aGlzLmQ9WTt0aGlzLnA9dGhpcy5iPXRoaXMucT1udWxsO3RoaXMuaj1bMCwwLDBdO3RoaXMucz0xMDAxMzA7dGhpcy5uPSExO3RoaXMubz10aGlzLmE9dGhpcy5lPXRoaXMuZj1udWxsO3RoaXMubT0hMTt0aGlzLmM9dGhpcy5yPXRoaXMuaT10aGlzLms9dGhpcy5sPXRoaXMuaD1udWxsfXZhciBZPTA7bj1YLnByb3RvdHlwZTtuLng9ZnVuY3Rpb24oKXtaKHRoaXMsWSl9O24uQj1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDEwMDE0MjpyZXR1cm47Y2FzZSAxMDAxNDA6c3dpdGNoKGIpe2Nhc2UgMTAwMTMwOmNhc2UgMTAwMTMxOmNhc2UgMTAwMTMyOmNhc2UgMTAwMTMzOmNhc2UgMTAwMTM0OnRoaXMucz1iO3JldHVybn1icmVhaztjYXNlIDEwMDE0MTp0aGlzLm09ISFiO3JldHVybjtkZWZhdWx0OlYodGhpcywxMDA5MDApO3JldHVybn1WKHRoaXMsMTAwOTAxKX07XG5uLnk9ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMTAwMTQyOnJldHVybiAwO2Nhc2UgMTAwMTQwOnJldHVybiB0aGlzLnM7Y2FzZSAxMDAxNDE6cmV0dXJuIHRoaXMubTtkZWZhdWx0OlYodGhpcywxMDA5MDApfXJldHVybiExfTtuLkE9ZnVuY3Rpb24oYSxiLGMpe3RoaXMualswXT1hO3RoaXMualsxXT1iO3RoaXMualsyXT1jfTtcbm4uej1mdW5jdGlvbihhLGIpe3ZhciBjPWI/YjpudWxsO3N3aXRjaChhKXtjYXNlIDEwMDEwMDpjYXNlIDEwMDEwNjp0aGlzLmg9YzticmVhaztjYXNlIDEwMDEwNDpjYXNlIDEwMDExMDp0aGlzLmw9YzticmVhaztjYXNlIDEwMDEwMTpjYXNlIDEwMDEwNzp0aGlzLms9YzticmVhaztjYXNlIDEwMDEwMjpjYXNlIDEwMDEwODp0aGlzLmk9YzticmVhaztjYXNlIDEwMDEwMzpjYXNlIDEwMDEwOTp0aGlzLnA9YzticmVhaztjYXNlIDEwMDEwNTpjYXNlIDEwMDExMTp0aGlzLm89YzticmVhaztjYXNlIDEwMDExMjp0aGlzLnI9YzticmVhaztkZWZhdWx0OlYodGhpcywxMDA5MDApfX07XG5uLkM9ZnVuY3Rpb24oYSxiKXt2YXIgYz0hMSxkPVswLDAsMF07Wih0aGlzLDIpO2Zvcih2YXIgZT0wOzM+ZTsrK2Upe3ZhciBmPWFbZV07LTFFMTUwPmYmJihmPS0xRTE1MCxjPSEwKTsxRTE1MDxmJiYoZj0xRTE1MCxjPSEwKTtkW2VdPWZ9YyYmVih0aGlzLDEwMDE1NSk7Yz10aGlzLnE7bnVsbD09PWM/KGM9ZWEodGhpcy5iKSxFKGMsYy5iKSk6KEsoYyksYz1jLmUpO2MuYS5kPWI7Yy5hLmdbMF09ZFswXTtjLmEuZ1sxXT1kWzFdO2MuYS5nWzJdPWRbMl07Yy5mPTE7Yy5iLmY9LTE7dGhpcy5xPWN9O24udT1mdW5jdGlvbihhKXtaKHRoaXMsWSk7dGhpcy5kPTE7dGhpcy5iPW5ldyBDYTt0aGlzLmM9YX07bi50PWZ1bmN0aW9uKCl7Wih0aGlzLDEpO3RoaXMuZD0yO3RoaXMucT1udWxsfTtuLnY9ZnVuY3Rpb24oKXtaKHRoaXMsMik7dGhpcy5kPTF9O1xubi53PWZ1bmN0aW9uKCl7Wih0aGlzLDEpO3RoaXMuZD1ZO3ZhciBhPXRoaXMualswXSxiPXRoaXMualsxXSxjPXRoaXMualsyXSxkPSExLGU9W2EsYixjXTtpZigwPT09YSYmMD09PWImJjA9PT1jKXtmb3IodmFyIGI9Wy0yKjFFMTUwLC0yKjFFMTUwLC0yKjFFMTUwXSxmPVsyKjFFMTUwLDIqMUUxNTAsMioxRTE1MF0sYz1bXSxnPVtdLGQ9dGhpcy5iLmMsYT1kLmU7YSE9PWQ7YT1hLmUpZm9yKHZhciBoPTA7Mz5oOysraCl7dmFyIGs9YS5nW2hdO2s8ZltoXSYmKGZbaF09ayxnW2hdPWEpO2s+YltoXSYmKGJbaF09ayxjW2hdPWEpfWE9MDtiWzFdLWZbMV0+YlswXS1mWzBdJiYoYT0xKTtiWzJdLWZbMl0+YlthXS1mW2FdJiYoYT0yKTtpZihmW2FdPj1iW2FdKWVbMF09MCxlWzFdPTAsZVsyXT0xO2Vsc2V7Yj0wO2Y9Z1thXTtjPWNbYV07Zz1bMCwwLDBdO2Y9W2YuZ1swXS1jLmdbMF0sZi5nWzFdLWMuZ1sxXSxmLmdbMl0tYy5nWzJdXTtoPVswLDAsMF07Zm9yKGE9ZC5lO2EhPT1kO2E9XG5hLmUpaFswXT1hLmdbMF0tYy5nWzBdLGhbMV09YS5nWzFdLWMuZ1sxXSxoWzJdPWEuZ1syXS1jLmdbMl0sZ1swXT1mWzFdKmhbMl0tZlsyXSpoWzFdLGdbMV09ZlsyXSpoWzBdLWZbMF0qaFsyXSxnWzJdPWZbMF0qaFsxXS1mWzFdKmhbMF0saz1nWzBdKmdbMF0rZ1sxXSpnWzFdK2dbMl0qZ1syXSxrPmImJihiPWssZVswXT1nWzBdLGVbMV09Z1sxXSxlWzJdPWdbMl0pOzA+PWImJihlWzBdPWVbMV09ZVsyXT0wLGVbaGEoZildPTEpfWQ9ITB9Zz1oYShlKTthPXRoaXMuYi5jO2I9KGcrMSklMztjPShnKzIpJTM7Zz0wPGVbZ10/MTotMTtmb3IoZT1hLmU7ZSE9PWE7ZT1lLmUpZS5iPWUuZ1tiXSxlLmE9ZyplLmdbY107aWYoZCl7ZT0wO2Q9dGhpcy5iLmE7Zm9yKGE9ZC5iO2EhPT1kO2E9YS5iKWlmKGI9YS5hLCEoMD49Yi5mKSl7ZG8gZSs9KGIuYS5iLWIuYi5hLmIpKihiLmEuYStiLmIuYS5hKSxiPWIuZTt3aGlsZShiIT09YS5hKX1pZigwPmUpZm9yKGU9dGhpcy5iLmMsZD1lLmU7ZCE9PVxuZTtkPWQuZSlkLmE9LWQuYX10aGlzLm49ITE7ZT10aGlzLmIuYjtmb3IoYT1lLmg7YSE9PWU7YT1kKWlmKGQ9YS5oLGI9YS5lLHQoYS5hLGEuYi5hKSYmYS5lLmUhPT1hJiYodGEodGhpcyxiLGEpLEkoYSksYT1iLGI9YS5lKSxiLmU9PT1hKXtpZihiIT09YSl7aWYoYj09PWR8fGI9PT1kLmIpZD1kLmg7SShiKX1pZihhPT09ZHx8YT09PWQuYilkPWQuaDtJKGEpfXRoaXMuZT1lPW5ldyBEYTtkPXRoaXMuYi5jO2ZvcihhPWQuZTthIT09ZDthPWEuZSlhLmg9eGEoZSxhKTtFYShlKTt0aGlzLmY9bmV3IEFhKHRoaXMpO3phKHRoaXMsLU8pO2Zvcih6YSh0aGlzLE8pO251bGwhPT0oZT1GYSh0aGlzLmUpKTspe2Zvcig7Oyl7YTppZihhPXRoaXMuZSwwPT09YS5hKWQ9R2EoYS5iKTtlbHNlIGlmKGQ9YS5jW2EuZFthLmEtMV1dLDAhPT1hLmIuYSYmKGE9R2EoYS5iKSx1KGEsZCkpKXtkPWE7YnJlYWsgYX1pZihudWxsPT09ZHx8IXQoZCxlKSlicmVhaztkPUZhKHRoaXMuZSk7dGEodGhpcyxlLmMsXG5kLmMpfXlhKHRoaXMsZSl9dGhpcy5hPXRoaXMuZi5hLmEuYi5hLmE7Zm9yKGU9MDtudWxsIT09KGQ9dGhpcy5mLmEuYS5iKTspZC5ofHwrK2UsUShkKTt0aGlzLmY9bnVsbDtlPXRoaXMuZTtlLmI9bnVsbDtlLmQ9bnVsbDt0aGlzLmU9ZS5jPW51bGw7ZT10aGlzLmI7Zm9yKGE9ZS5hLmI7YSE9PWUuYTthPWQpZD1hLmIsYT1hLmEsYS5lLmU9PT1hJiYoUChhLmMsYSksSShhKSk7aWYoIXRoaXMubil7ZT10aGlzLmI7aWYodGhpcy5tKWZvcihhPWUuYi5oO2EhPT1lLmI7YT1kKWQ9YS5oLGEuYi5kLmMhPT1hLmQuYz9hLmY9YS5kLmM/MTotMTpJKGEpO2Vsc2UgZm9yKGE9ZS5hLmI7YSE9PWUuYTthPWQpaWYoZD1hLmIsYS5jKXtmb3IoYT1hLmE7dShhLmIuYSxhLmEpO2E9YS5jLmIpO2Zvcig7dShhLmEsYS5iLmEpO2E9YS5lKTtiPWEuYy5iO2ZvcihjPXZvaWQgMDthLmUhPT1iOylpZih1KGEuYi5hLGIuYSkpe2Zvcig7Yi5lIT09YSYmKGNhKGIuZSl8fDA+PXgoYi5hLGIuYi5hLGIuZS5iLmEpKTspYz1cbkwoYi5lLGIpLGI9Yy5iO2I9Yi5jLmJ9ZWxzZXtmb3IoO2IuZSE9PWEmJihkYShhLmMuYil8fDA8PXgoYS5iLmEsYS5hLGEuYy5iLmEpKTspYz1MKGEsYS5jLmIpLGE9Yy5iO2E9YS5lfWZvcig7Yi5lLmUhPT1hOyljPUwoYi5lLGIpLGI9Yy5ifWlmKHRoaXMuaHx8dGhpcy5pfHx0aGlzLmt8fHRoaXMubClpZih0aGlzLm0pZm9yKGU9dGhpcy5iLGQ9ZS5hLmI7ZCE9PWUuYTtkPWQuYil7aWYoZC5jKXt0aGlzLmgmJnRoaXMuaCgyLHRoaXMuYyk7YT1kLmE7ZG8gdGhpcy5rJiZ0aGlzLmsoYS5hLmQsdGhpcy5jKSxhPWEuZTt3aGlsZShhIT09ZC5hKTt0aGlzLmkmJnRoaXMuaSh0aGlzLmMpfX1lbHNle2U9dGhpcy5iO2Q9ISF0aGlzLmw7YT0hMTtiPS0xO2ZvcihjPWUuYS5kO2MhPT1lLmE7Yz1jLmQpaWYoYy5jKXthfHwodGhpcy5oJiZ0aGlzLmgoNCx0aGlzLmMpLGE9ITApO2c9Yy5hO2RvIGQmJihmPWcuYi5kLmM/MDoxLGIhPT1mJiYoYj1mLHRoaXMubCYmdGhpcy5sKCEhYix0aGlzLmMpKSksXG50aGlzLmsmJnRoaXMuayhnLmEuZCx0aGlzLmMpLGc9Zy5lO3doaWxlKGchPT1jLmEpfWEmJnRoaXMuaSYmdGhpcy5pKHRoaXMuYyl9aWYodGhpcy5yKXtlPXRoaXMuYjtmb3IoYT1lLmEuYjthIT09ZS5hO2E9ZClpZihkPWEuYiwhYS5jKXtiPWEuYTtjPWIuZTtnPXZvaWQgMDtkbyBnPWMsYz1nLmUsZy5kPW51bGwsbnVsbD09PWcuYi5kJiYoZy5jPT09Zz9GKGcuYSxudWxsKTooZy5hLmM9Zy5jLEgoZyxKKGcpKSksZj1nLmIsZi5jPT09Zj9GKGYuYSxudWxsKTooZi5hLmM9Zi5jLEgoZixKKGYpKSksZmEoZykpO3doaWxlKGchPT1iKTtiPWEuZDthPWEuYjthLmQ9YjtiLmI9YX10aGlzLnIodGhpcy5iKTt0aGlzLmM9dGhpcy5iPW51bGw7cmV0dXJufX10aGlzLmI9dGhpcy5jPW51bGx9O1xuZnVuY3Rpb24gWihhLGIpe2lmKGEuZCE9PWIpZm9yKDthLmQhPT1iOylpZihhLmQ8Yilzd2l0Y2goYS5kKXtjYXNlIFk6VihhLDEwMDE1MSk7YS51KG51bGwpO2JyZWFrO2Nhc2UgMTpWKGEsMTAwMTUyKSxhLnQoKX1lbHNlIHN3aXRjaChhLmQpe2Nhc2UgMjpWKGEsMTAwMTU0KTthLnYoKTticmVhaztjYXNlIDE6VihhLDEwMDE1MyksYS53KCl9fWZ1bmN0aW9uIFYoYSxiKXthLnAmJmEucChiLGEuYyl9O2Z1bmN0aW9uIGdhKGEsYil7dGhpcy5iPWF8fHRoaXM7dGhpcy5kPWJ8fHRoaXM7dGhpcy5hPW51bGw7dGhpcy5jPSExfTtmdW5jdGlvbiBNKCl7dGhpcy5oPXRoaXM7dGhpcy5pPXRoaXMuZD10aGlzLmE9dGhpcy5lPXRoaXMuYz10aGlzLmI9bnVsbDt0aGlzLmY9MH1mdW5jdGlvbiBKKGEpe3JldHVybiBhLmIuZX07ZnVuY3Rpb24gQ2EoKXt0aGlzLmM9bmV3IE47dGhpcy5hPW5ldyBnYTt0aGlzLmI9bmV3IE07dGhpcy5kPW5ldyBNO3RoaXMuYi5iPXRoaXMuZDt0aGlzLmQuYj10aGlzLmJ9O2Z1bmN0aW9uIE4oYSxiKXt0aGlzLmU9YXx8dGhpczt0aGlzLmY9Ynx8dGhpczt0aGlzLmQ9dGhpcy5jPW51bGw7dGhpcy5nPVswLDAsMF07dGhpcy5oPXRoaXMuYT10aGlzLmI9MH07ZnVuY3Rpb24gRGEoKXt0aGlzLmM9W107dGhpcy5kPW51bGw7dGhpcy5hPTA7dGhpcy5lPSExO3RoaXMuYj1uZXcgSGF9ZnVuY3Rpb24gRWEoYSl7YS5kPVtdO2Zvcih2YXIgYj0wO2I8YS5hO2IrKylhLmRbYl09YjthLmQuc29ydChmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixlKXtyZXR1cm4gdShhW2JdLGFbZV0pPzE6LTF9fShhLmMpKTthLmU9ITA7SWEoYS5iKX1mdW5jdGlvbiB4YShhLGIpe2lmKGEuZSl7dmFyIGM9YS5iLGQ9KytjLmE7MipkPmMuZiYmKGMuZio9MixjLmM9SmEoYy5jLGMuZisxKSk7dmFyIGU7MD09PWMuYj9lPWQ6KGU9Yy5iLGMuYj1jLmNbYy5iXSk7Yy5lW2VdPWI7Yy5jW2VdPWQ7Yy5kW2RdPWU7Yy5oJiZ2YShjLGQpO3JldHVybiBlfWM9YS5hKys7YS5jW2NdPWI7cmV0dXJuLShjKzEpfVxuZnVuY3Rpb24gRmEoYSl7aWYoMD09PWEuYSlyZXR1cm4gS2EoYS5iKTt2YXIgYj1hLmNbYS5kW2EuYS0xXV07aWYoMCE9PWEuYi5hJiZ1KEdhKGEuYiksYikpcmV0dXJuIEthKGEuYik7ZG8tLWEuYTt3aGlsZSgwPGEuYSYmbnVsbD09PWEuY1thLmRbYS5hLTFdXSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIEhhKCl7dGhpcy5kPUphKFswXSwzMyk7dGhpcy5lPVtudWxsLG51bGxdO3RoaXMuYz1bMCwwXTt0aGlzLmE9MDt0aGlzLmY9MzI7dGhpcy5iPTA7dGhpcy5oPSExO3RoaXMuZFsxXT0xfWZ1bmN0aW9uIEphKGEsYil7Zm9yKHZhciBjPUFycmF5KGIpLGQ9MDtkPGEubGVuZ3RoO2QrKyljW2RdPWFbZF07Zm9yKDtkPGI7ZCsrKWNbZF09MDtyZXR1cm4gY31mdW5jdGlvbiBJYShhKXtmb3IodmFyIGI9YS5hOzE8PWI7LS1iKVcoYSxiKTthLmg9ITB9ZnVuY3Rpb24gR2EoYSl7cmV0dXJuIGEuZVthLmRbMV1dfWZ1bmN0aW9uIEthKGEpe3ZhciBiPWEuZCxjPWEuZSxkPWEuYyxlPWJbMV0sZj1jW2VdOzA8YS5hJiYoYlsxXT1iW2EuYV0sZFtiWzFdXT0xLGNbZV09bnVsbCxkW2VdPWEuYixhLmI9ZSwwPC0tYS5hJiZXKGEsMSkpO3JldHVybiBmfVxuZnVuY3Rpb24gVyhhLGIpe2Zvcih2YXIgYz1hLmQsZD1hLmUsZT1hLmMsZj1iLGc9Y1tmXTs7KXt2YXIgaD1mPDwxO2g8YS5hJiZ1KGRbY1toKzFdXSxkW2NbaF1dKSYmKGgrPTEpO3ZhciBrPWNbaF07aWYoaD5hLmF8fHUoZFtnXSxkW2tdKSl7Y1tmXT1nO2VbZ109ZjticmVha31jW2ZdPWs7ZVtrXT1mO2Y9aH19ZnVuY3Rpb24gdmEoYSxiKXtmb3IodmFyIGM9YS5kLGQ9YS5lLGU9YS5jLGY9YixnPWNbZl07Oyl7dmFyIGg9Zj4+MSxrPWNbaF07aWYoMD09PWh8fHUoZFtrXSxkW2ddKSl7Y1tmXT1nO2VbZ109ZjticmVha31jW2ZdPWs7ZVtrXT1mO2Y9aH19O2Z1bmN0aW9uIG1hKCl7dGhpcy5lPXRoaXMuYT1udWxsO3RoaXMuZj0wO3RoaXMuYz10aGlzLmI9dGhpcy5oPXRoaXMuZD0hMX1mdW5jdGlvbiBTKGEpe3JldHVybiBhLmUuYy5ifWZ1bmN0aW9uIFIoYSl7cmV0dXJuIGEuZS5hLmJ9O3RoaXMubGlidGVzcz17R2x1VGVzc2VsYXRvcjpYLHdpbmRpbmdSdWxlOntHTFVfVEVTU19XSU5ESU5HX09ERDoxMDAxMzAsR0xVX1RFU1NfV0lORElOR19OT05aRVJPOjEwMDEzMSxHTFVfVEVTU19XSU5ESU5HX1BPU0lUSVZFOjEwMDEzMixHTFVfVEVTU19XSU5ESU5HX05FR0FUSVZFOjEwMDEzMyxHTFVfVEVTU19XSU5ESU5HX0FCU19HRVFfVFdPOjEwMDEzNH0scHJpbWl0aXZlVHlwZTp7R0xfTElORV9MT09QOjIsR0xfVFJJQU5HTEVTOjQsR0xfVFJJQU5HTEVfU1RSSVA6NSxHTF9UUklBTkdMRV9GQU46Nn0sZXJyb3JUeXBlOntHTFVfVEVTU19NSVNTSU5HX0JFR0lOX1BPTFlHT046MTAwMTUxLEdMVV9URVNTX01JU1NJTkdfRU5EX1BPTFlHT046MTAwMTUzLEdMVV9URVNTX01JU1NJTkdfQkVHSU5fQ09OVE9VUjoxMDAxNTIsR0xVX1RFU1NfTUlTU0lOR19FTkRfQ09OVE9VUjoxMDAxNTQsR0xVX1RFU1NfQ09PUkRfVE9PX0xBUkdFOjEwMDE1NSxHTFVfVEVTU19ORUVEX0NPTUJJTkVfQ0FMTEJBQ0s6MTAwMTU2fSxcbmdsdUVudW06e0dMVV9URVNTX01FU0g6MTAwMTEyLEdMVV9URVNTX1RPTEVSQU5DRToxMDAxNDIsR0xVX1RFU1NfV0lORElOR19SVUxFOjEwMDE0MCxHTFVfVEVTU19CT1VOREFSWV9PTkxZOjEwMDE0MSxHTFVfSU5WQUxJRF9FTlVNOjEwMDkwMCxHTFVfSU5WQUxJRF9WQUxVRToxMDA5MDEsR0xVX1RFU1NfQkVHSU46MTAwMTAwLEdMVV9URVNTX1ZFUlRFWDoxMDAxMDEsR0xVX1RFU1NfRU5EOjEwMDEwMixHTFVfVEVTU19FUlJPUjoxMDAxMDMsR0xVX1RFU1NfRURHRV9GTEFHOjEwMDEwNCxHTFVfVEVTU19DT01CSU5FOjEwMDEwNSxHTFVfVEVTU19CRUdJTl9EQVRBOjEwMDEwNixHTFVfVEVTU19WRVJURVhfREFUQToxMDAxMDcsR0xVX1RFU1NfRU5EX0RBVEE6MTAwMTA4LEdMVV9URVNTX0VSUk9SX0RBVEE6MTAwMTA5LEdMVV9URVNTX0VER0VfRkxBR19EQVRBOjEwMDExMCxHTFVfVEVTU19DT01CSU5FX0RBVEE6MTAwMTExfX07WC5wcm90b3R5cGUuZ2x1RGVsZXRlVGVzcz1YLnByb3RvdHlwZS54O1xuWC5wcm90b3R5cGUuZ2x1VGVzc1Byb3BlcnR5PVgucHJvdG90eXBlLkI7WC5wcm90b3R5cGUuZ2x1R2V0VGVzc1Byb3BlcnR5PVgucHJvdG90eXBlLnk7WC5wcm90b3R5cGUuZ2x1VGVzc05vcm1hbD1YLnByb3RvdHlwZS5BO1gucHJvdG90eXBlLmdsdVRlc3NDYWxsYmFjaz1YLnByb3RvdHlwZS56O1gucHJvdG90eXBlLmdsdVRlc3NWZXJ0ZXg9WC5wcm90b3R5cGUuQztYLnByb3RvdHlwZS5nbHVUZXNzQmVnaW5Qb2x5Z29uPVgucHJvdG90eXBlLnU7WC5wcm90b3R5cGUuZ2x1VGVzc0JlZ2luQ29udG91cj1YLnByb3RvdHlwZS50O1gucHJvdG90eXBlLmdsdVRlc3NFbmRDb250b3VyPVgucHJvdG90eXBlLnY7WC5wcm90b3R5cGUuZ2x1VGVzc0VuZFBvbHlnb249WC5wcm90b3R5cGUudzsgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7IG1vZHVsZS5leHBvcnRzID0gdGhpcy5saWJ0ZXNzOyB9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG5cdC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuXHQvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcblx0Ly8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG5cdGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHNlbGY7IH1cblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB3aW5kb3c7IH1cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cblx0dGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn1cblxudmFyIGdsb2JhbE9iamVjdCA9IGdldEdsb2JhbCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBnbG9iYWxPYmplY3QuZmV0Y2g7XG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBhbmQgV2VicGFjay5cbmlmIChnbG9iYWxPYmplY3QuZmV0Y2gpIHtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZ2xvYmFsT2JqZWN0LmZldGNoLmJpbmQoZ2xvYmFsT2JqZWN0KTtcbn1cblxuZXhwb3J0cy5IZWFkZXJzID0gZ2xvYmFsT2JqZWN0LkhlYWRlcnM7XG5leHBvcnRzLlJlcXVlc3QgPSBnbG9iYWxPYmplY3QuUmVxdWVzdDtcbmV4cG9ydHMuUmVzcG9uc2UgPSBnbG9iYWxPYmplY3QuUmVzcG9uc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGZpbGw9XFxcIiMwMDAwMDBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjx0aXRsZT5jYXB0dXJlPC90aXRsZT48cGF0aCBkPVxcXCJNNCAydjI4aDI0di0yOGgtMjR6TTI0IDIyaC0xNnYtMTZoMTZ2MTZ6XFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBmaWxsPVxcXCIjMDAwMDAwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMzIgMzJcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48dGl0bGU+Y29weTwvdGl0bGU+PHBhdGggZD1cXFwiTTQgMTJoMTZ2MTZoLTE2di0xNnpNMTIgNHY0aDEydjEyaDR2LTE2aC0xNnpcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGZpbGw9XFxcIiMwMDAwMDBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjx0aXRsZT5kb3dubG9hZDwvdGl0bGU+PHBhdGggZD1cXFwiTTE2LjAwMSAxOS4zMTRsLTguNDg1LTguNDg1IDIuODI4LTIuODI5IDUuNjU3IDUuNjU3IDUuNjU3LTUuNjU3IDIuODI4IDIuODI4LTguNDg1IDguNDg2ek04IDI4aDE2di00aC0xNnY0elxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgZmlsbD1cXFwiIzAwMDAwMFxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHRpdGxlPmZvcmJpZDwvdGl0bGU+PHBhdGggZD1cXFwiTTE4LjgyOCAxNmw0LjI0MyA0LjI0My0yLjgyOCAyLjgyOC00LjI0My00LjI0My00LjI0MyA0LjI0My0yLjgyOC0yLjgyOCA0LjI0My00LjI0My00LjI0My00LjI0MyAyLjgyOC0yLjgyOCA0LjI0MyA0LjI0MyA0LjI0My00LjI0MyAyLjgyOCAyLjgyOC00LjI0MyA0LjI0M3pcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGZpbGw9XFxcIiMwMDAwMDBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjx0aXRsZT5sYXVuY2g8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yNCAyNGgtNnY0aC00di00aC02bDQtNHYtMTNsNC00IDQgNHYxM2w0IDR6XFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBpZD1cXFwiTGF5ZXJfMVxcXCIgZGF0YS1uYW1lPVxcXCJMYXllciAxXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MjUuODYgNDMxLjk1XFxcIj48cGF0aCBkPVxcXCJNMzg1LDYwNy4zOCwxNDguNjQsNDIyLjYybDYxLjU3LTc4LjhMMzY3Ljc4LDQ2N2wyMjgtMjkxLjU3TDY3NC41LDIzN1pcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0xNDguNjQgLTE3NS40MylcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgeD1cXFwiMHB4XFxcIiB5PVxcXCIwcHhcXFwiIHZpZXdCb3g9XFxcIjAgMCAxMDAgMTI1XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxMDAgMTAwO1xcXCIgeG1sOnNwYWNlPVxcXCJwcmVzZXJ2ZVxcXCI+PHBhdGggZD1cXFwiTTUwLDQuNUMyNC44LDQuNSw0LjUsMjQuOCw0LjUsNTBTMjQuOCw5NS41LDUwLDk1LjVTOTUuNSw3NS4yLDk1LjUsNTBTNzUuMiw0LjUsNTAsNC41eiBNNzAuOCw1My4zTDQwLjUsNzEgYy0wLjYsMC40LTEuMywwLjUtMS45LDAuNWMtMC42LDAtMS4zLTAuMS0xLjktMC41Yy0xLjEtMC42LTEuOS0xLjktMS45LTMuM1YzMi4zYzAtMS40LDAuOC0yLjcsMS45LTMuM2MxLjEtMC42LDIuNy0wLjYsMy44LDAgbDMwLjQsMTcuN2MxLjEsMC42LDEuOCwxLjksMS44LDMuM1M3MS45LDUyLjcsNzAuOCw1My4zelxcXCI+PC9wYXRoPjx0ZXh0IHg9XFxcIjBcXFwiIHk9XFxcIjExNVxcXCIgZmlsbD1cXFwiIzAwMDAwMFxcXCIgZm9udC1zaXplPVxcXCI1cHhcXFwiIGZvbnQtd2VpZ2h0PVxcXCJib2xkXFxcIiBmb250LWZhbWlseT1cXFwiJiN4Mjc7SGVsdmV0aWNhIE5ldWUmI3gyNzssIEhlbHZldGljYSwgQXJpYWwtVW5pY29kZSwgQXJpYWwsIFNhbnMtc2VyaWZcXFwiPkNyZWF0ZWQgYnkgRm9jdXM8L3RleHQ+PHRleHQgeD1cXFwiMFxcXCIgeT1cXFwiMTIwXFxcIiBmaWxsPVxcXCIjMDAwMDAwXFxcIiBmb250LXNpemU9XFxcIjVweFxcXCIgZm9udC13ZWlnaHQ9XFxcImJvbGRcXFwiIGZvbnQtZmFtaWx5PVxcXCImI3gyNztIZWx2ZXRpY2EgTmV1ZSYjeDI3OywgSGVsdmV0aWNhLCBBcmlhbC1Vbmljb2RlLCBBcmlhbCwgU2Fucy1zZXJpZlxcXCI+ZnJvbSB0aGUgTm91biBQcm9qZWN0PC90ZXh0Pjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgZmlsbD1cXFwiIzAwMDAwMFxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHRpdGxlPnBsdWc8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yMiAxMXYtOGgtMTJ2OGgtMnYxNGg2djRoNHYtNGg2di0xNGgtMnpNMTggMTFoLTR2LTRoNHY0elxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgZmlsbD1cXFwiIzAwMDAwMFxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHRpdGxlPnJlZG88L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOCAyNHY0aC0yNHYtMjBoMTAuMDcxbC0zLjY1Ny0zLjY1NCAyLjgyOC0yLjgyNiA4LjQ4NSA4LjQ4NS04LjQ4NSA4LjQ4NC0yLjgyOC0yLjgzIDMuNjU3LTMuNjU5aC02LjA3MXYxMmgyMHpcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGZpbGw9XFxcIiMwMDAwMDBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjx0aXRsZT5yZXNpemU8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOCAxMnYtOGgtOHYyaC04di0yaC04djhoMnY4aC0ydjhoOHYtMmg4djJoOHYtOGgtMnYtOGgyek0yMiAyMGgtMnYyaC04di0yaC0ydi04aDJ2LTJoOHYyaDJ2OHpcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGZpbGw9XFxcIiMwMDAwMDBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjx0aXRsZT5zb2x2ZTwvdGl0bGU+PHBhdGggZD1cXFwiTTI4IDEydjRoLTR2NmgtNnY0aC00di00aC02di02aC00di00aDR2LTZoNnY0aDR2LTRoNnY2aDR6XFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBmaWxsPVxcXCIjMDAwMDAwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMzIgMzJcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48dGl0bGU+dGltZTwvdGl0bGU+PHBhdGggZD1cXFwiTTIyIDE4aC04di04aDR2NGg0djR6TTMwIDJ2MjhoLTI4di0yOGgyOHpNMjYgNmgtMjB2MjBoMjB2LTIwelxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgZmlsbD1cXFwiIzAwMDAwMFxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHRpdGxlPnVuZG88L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOCA4djIwaC0yNHYtNGgyMHYtMTJoLTYuMDcxbDMuNjU3IDMuNjYtMi44MjggMi44My04LjQ4NS04LjQ4NCA4LjQ4NS04LjQ4NSAyLjgyOCAyLjgyNi0zLjY1NyAzLjY1M2gxMC4wNzF6XFxcIj48L3BhdGg+PC9zdmc+XCIiLCJleHBvcnQgZGVmYXVsdCBcIi9pbWFnZXMvYzllYzI3NDY2ZmVlYzY2MzljMGU3Y2RkNzk4ZTU3MDcud2VicFwiOyIsImV4cG9ydCBkZWZhdWx0IFwiL2ltYWdlcy8xMWQxODE5YzMyOTA5N2JkNDJkNjEyYWY1MTk4NGViZi53ZWJwXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIvaW1hZ2VzL2Y1ODIyMTRmZjMzNTBmMTk1N2QyZTVmNzFhYzYwODljLndlYnBcIjsiLCJleHBvcnQgZGVmYXVsdCBcIi9pbWFnZXMvZjA2OTMyYWM1MTZmN2M3MmNlODQ4ZGZlNWExNTU3Y2Eud2VicFwiOyIsImV4cG9ydCBkZWZhdWx0IFwiL2ltYWdlcy9mNzQ0MjA0MWNiOWQ2ZGIwMmI3ZjgwZTlhM2FhMjk4Zi53ZWJwXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIvaW1hZ2VzLzJlZTVkZDJmNzY1NDQ4OTlkOTE3NDY0ZjFjN2VkNjg3LndlYnBcIjsiLCJleHBvcnQgZGVmYXVsdCBcIi9pbWFnZXMvMzIwZmM3YjdiMWE2NTg1ODhkNWIwMjBhOTBjM2VlMjYud2VicFwiOyIsIi8qIChpZ25vcmVkKSAqLyIsIi8qIChpZ25vcmVkKSAqLyIsIi8qKlxuICogY2hyb21hLmpzIC0gSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBjb2xvciBjb252ZXJzaW9uc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE5LCBHcmVnb3IgQWlzY2hcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAqIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIDMuIFRoZSBuYW1lIEdyZWdvciBBaXNjaCBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gKiBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuICogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBHUkVHT1IgQUlTQ0ggT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCxcbiAqIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLFxuICogQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUllcbiAqIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gKiBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBjaHJvbWEuanMgaW5jbHVkZXMgY29sb3JzIGZyb20gY29sb3JicmV3ZXIyLm9yZywgd2hpY2ggYXJlIHJlbGVhc2VkIHVuZGVyXG4gKiB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDAyIEN5bnRoaWEgQnJld2VyLCBNYXJrIEhhcnJvd2VyLFxuICogYW5kIFRoZSBQZW5uc3lsdmFuaWEgU3RhdGUgVW5pdmVyc2l0eS5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCxcbiAqIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljXG4gKiBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIE5hbWVkIGNvbG9ycyBhcmUgdGFrZW4gZnJvbSBYMTEgQ29sb3IgTmFtZXMuXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNzdmctY29sb3JcbiAqXG4gKiBAcHJlc2VydmVcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5jaHJvbWEgPSBmYWN0b3J5KCkpO1xufSkodGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGxpbWl0JDIgPSBmdW5jdGlvbiAoeCwgbWluLCBtYXgpIHtcbiAgICAgICAgaWYgKCBtaW4gPT09IHZvaWQgMCApIG1pbj0wO1xuICAgICAgICBpZiAoIG1heCA9PT0gdm9pZCAwICkgbWF4PTE7XG5cbiAgICAgICAgcmV0dXJuIHggPCBtaW4gPyBtaW4gOiB4ID4gbWF4ID8gbWF4IDogeDtcbiAgICB9O1xuXG4gICAgdmFyIGxpbWl0JDEgPSBsaW1pdCQyO1xuXG4gICAgdmFyIGNsaXBfcmdiJDMgPSBmdW5jdGlvbiAocmdiKSB7XG4gICAgICAgIHJnYi5fY2xpcHBlZCA9IGZhbHNlO1xuICAgICAgICByZ2IuX3VuY2xpcHBlZCA9IHJnYi5zbGljZSgwKTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPD0zOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIDwgMykge1xuICAgICAgICAgICAgICAgIGlmIChyZ2JbaV0gPCAwIHx8IHJnYltpXSA+IDI1NSkgeyByZ2IuX2NsaXBwZWQgPSB0cnVlOyB9XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gbGltaXQkMShyZ2JbaV0sIDAsIDI1NSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZ2JbaV0gPSBsaW1pdCQxKHJnYltpXSwgMCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJnYjtcbiAgICB9O1xuXG4gICAgLy8gcG9ydGVkIGZyb20galF1ZXJ5J3MgJC50eXBlXG4gICAgdmFyIGNsYXNzVG9UeXBlID0ge307XG4gICAgZm9yICh2YXIgaSQxID0gMCwgbGlzdCQxID0gWydCb29sZWFuJywgJ051bWJlcicsICdTdHJpbmcnLCAnRnVuY3Rpb24nLCAnQXJyYXknLCAnRGF0ZScsICdSZWdFeHAnLCAnVW5kZWZpbmVkJywgJ051bGwnXTsgaSQxIDwgbGlzdCQxLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBsaXN0JDFbaSQxXTtcblxuICAgICAgICBjbGFzc1RvVHlwZVsoXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiKV0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHZhciB0eXBlJHAgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVG9UeXBlW09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopXSB8fCBcIm9iamVjdFwiO1xuICAgIH07XG5cbiAgICB2YXIgdHlwZSRvID0gdHlwZSRwO1xuXG4gICAgdmFyIHVucGFjayRCID0gZnVuY3Rpb24gKGFyZ3MsIGtleU9yZGVyKSB7XG4gICAgICAgIGlmICgga2V5T3JkZXIgPT09IHZvaWQgMCApIGtleU9yZGVyPW51bGw7XG5cbiAgICBcdC8vIGlmIGNhbGxlZCB3aXRoIG1vcmUgdGhhbiAzIGFyZ3VtZW50cywgd2UgcmV0dXJuIHRoZSBhcmd1bWVudHNcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID49IDMpIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpOyB9XG4gICAgICAgIC8vIHdpdGggbGVzcyB0aGFuIDMgYXJncyB3ZSBjaGVjayBpZiBmaXJzdCBhcmcgaXMgb2JqZWN0XG4gICAgICAgIC8vIGFuZCB1c2UgdGhlIGtleU9yZGVyIHN0cmluZyB0byBleHRyYWN0IGFuZCBzb3J0IHByb3BlcnRpZXNcbiAgICBcdGlmICh0eXBlJG8oYXJnc1swXSkgPT0gJ29iamVjdCcgJiYga2V5T3JkZXIpIHtcbiAgICBcdFx0cmV0dXJuIGtleU9yZGVyLnNwbGl0KCcnKVxuICAgIFx0XHRcdC5maWx0ZXIoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGFyZ3NbMF1ba10gIT09IHVuZGVmaW5lZDsgfSlcbiAgICBcdFx0XHQubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBhcmdzWzBdW2tdOyB9KTtcbiAgICBcdH1cbiAgICBcdC8vIG90aGVyd2lzZSB3ZSBqdXN0IHJldHVybiB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICBcdC8vICh3aGljaCB3ZSBzdXBwb3NlIGlzIGFuIGFycmF5IG9mIGFyZ3MpXG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgIH07XG5cbiAgICB2YXIgdHlwZSRuID0gdHlwZSRwO1xuXG4gICAgdmFyIGxhc3QkNCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgdmFyIGwgPSBhcmdzLmxlbmd0aC0xO1xuICAgICAgICBpZiAodHlwZSRuKGFyZ3NbbF0pID09ICdzdHJpbmcnKSB7IHJldHVybiBhcmdzW2xdLnRvTG93ZXJDYXNlKCk7IH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBQSSQyID0gTWF0aC5QSTtcblxuICAgIHZhciB1dGlscyA9IHtcbiAgICBcdGNsaXBfcmdiOiBjbGlwX3JnYiQzLFxuICAgIFx0bGltaXQ6IGxpbWl0JDIsXG4gICAgXHR0eXBlOiB0eXBlJHAsXG4gICAgXHR1bnBhY2s6IHVucGFjayRCLFxuICAgIFx0bGFzdDogbGFzdCQ0LFxuICAgIFx0UEk6IFBJJDIsXG4gICAgXHRUV09QSTogUEkkMioyLFxuICAgIFx0UElUSElSRDogUEkkMi8zLFxuICAgIFx0REVHMlJBRDogUEkkMiAvIDE4MCxcbiAgICBcdFJBRDJERUc6IDE4MCAvIFBJJDJcbiAgICB9O1xuXG4gICAgdmFyIGlucHV0JGggPSB7XG4gICAgXHRmb3JtYXQ6IHt9LFxuICAgIFx0YXV0b2RldGVjdDogW11cbiAgICB9O1xuXG4gICAgdmFyIGxhc3QkMyA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIGNsaXBfcmdiJDIgPSB1dGlscy5jbGlwX3JnYjtcbiAgICB2YXIgdHlwZSRtID0gdXRpbHMudHlwZTtcbiAgICB2YXIgX2lucHV0ID0gaW5wdXQkaDtcblxuICAgIHZhciBDb2xvciREID0gZnVuY3Rpb24gQ29sb3IoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGUkbShhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGFyZ3NbMF0uY29uc3RydWN0b3IgJiZcbiAgICAgICAgICAgIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudCBpcyBhbHJlYWR5IGEgQ29sb3IgaW5zdGFuY2VcbiAgICAgICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGFzdCBhcmd1bWVudCBjb3VsZCBiZSB0aGUgbW9kZVxuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMyhhcmdzKTtcbiAgICAgICAgdmFyIGF1dG9kZXRlY3QgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIW1vZGUpIHtcbiAgICAgICAgICAgIGF1dG9kZXRlY3QgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFfaW5wdXQuc29ydGVkKSB7XG4gICAgICAgICAgICAgICAgX2lucHV0LmF1dG9kZXRlY3QgPSBfaW5wdXQuYXV0b2RldGVjdC5zb3J0KGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIGIucCAtIGEucDsgfSk7XG4gICAgICAgICAgICAgICAgX2lucHV0LnNvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhdXRvLWRldGVjdCBmb3JtYXRcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gX2lucHV0LmF1dG9kZXRlY3Q7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoayA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgICAgICBtb2RlID0gY2hrLnRlc3QuYXBwbHkoY2hrLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBpZiAobW9kZSkgeyBicmVhazsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9pbnB1dC5mb3JtYXRbbW9kZV0pIHtcbiAgICAgICAgICAgIHZhciByZ2IgPSBfaW5wdXQuZm9ybWF0W21vZGVdLmFwcGx5KG51bGwsIGF1dG9kZXRlY3QgPyBhcmdzIDogYXJncy5zbGljZSgwLC0xKSk7XG4gICAgICAgICAgICBtZS5fcmdiID0gY2xpcF9yZ2IkMihyZ2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGZvcm1hdDogJythcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBhbHBoYSBjaGFubmVsXG4gICAgICAgIGlmIChtZS5fcmdiLmxlbmd0aCA9PT0gMykgeyBtZS5fcmdiLnB1c2goMSk7IH1cbiAgICB9O1xuXG4gICAgQ29sb3IkRC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIGlmICh0eXBlJG0odGhpcy5oZXgpID09ICdmdW5jdGlvbicpIHsgcmV0dXJuIHRoaXMuaGV4KCk7IH1cbiAgICAgICAgcmV0dXJuIChcIltcIiArICh0aGlzLl9yZ2Iuam9pbignLCcpKSArIFwiXVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIENvbG9yXzEgPSBDb2xvciREO1xuXG4gICAgdmFyIGNocm9tYSRrID0gZnVuY3Rpb24gKCkge1xuICAgIFx0dmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBcdHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBcdHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBjaHJvbWEkay5Db2xvciwgWyBudWxsIF0uY29uY2F0KCBhcmdzKSApKTtcbiAgICB9O1xuXG4gICAgY2hyb21hJGsuQ29sb3IgPSBDb2xvcl8xO1xuICAgIGNocm9tYSRrLnZlcnNpb24gPSAnMi40LjInO1xuXG4gICAgdmFyIGNocm9tYV8xID0gY2hyb21hJGs7XG5cbiAgICB2YXIgdW5wYWNrJEEgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIG1heCQyID0gTWF0aC5tYXg7XG5cbiAgICB2YXIgcmdiMmNteWskMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJEEoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICByID0gciAvIDI1NTtcbiAgICAgICAgZyA9IGcgLyAyNTU7XG4gICAgICAgIGIgPSBiIC8gMjU1O1xuICAgICAgICB2YXIgayA9IDEgLSBtYXgkMihyLG1heCQyKGcsYikpO1xuICAgICAgICB2YXIgZiA9IGsgPCAxID8gMSAvICgxLWspIDogMDtcbiAgICAgICAgdmFyIGMgPSAoMS1yLWspICogZjtcbiAgICAgICAgdmFyIG0gPSAoMS1nLWspICogZjtcbiAgICAgICAgdmFyIHkgPSAoMS1iLWspICogZjtcbiAgICAgICAgcmV0dXJuIFtjLG0seSxrXTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJjbXlrXzEgPSByZ2IyY215ayQxO1xuXG4gICAgdmFyIHVucGFjayR6ID0gdXRpbHMudW5wYWNrO1xuXG4gICAgdmFyIGNteWsycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIGFyZ3MgPSB1bnBhY2skeihhcmdzLCAnY215aycpO1xuICAgICAgICB2YXIgYyA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBtID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIHkgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgayA9IGFyZ3NbM107XG4gICAgICAgIHZhciBhbHBoYSA9IGFyZ3MubGVuZ3RoID4gNCA/IGFyZ3NbNF0gOiAxO1xuICAgICAgICBpZiAoayA9PT0gMSkgeyByZXR1cm4gWzAsMCwwLGFscGhhXTsgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgYyA+PSAxID8gMCA6IDI1NSAqICgxLWMpICogKDEtayksIC8vIHJcbiAgICAgICAgICAgIG0gPj0gMSA/IDAgOiAyNTUgKiAoMS1tKSAqICgxLWspLCAvLyBnXG4gICAgICAgICAgICB5ID49IDEgPyAwIDogMjU1ICogKDEteSkgKiAoMS1rKSwgLy8gYlxuICAgICAgICAgICAgYWxwaGFcbiAgICAgICAgXTtcbiAgICB9O1xuXG4gICAgdmFyIGNteWsycmdiXzEgPSBjbXlrMnJnYjtcblxuICAgIHZhciBjaHJvbWEkaiA9IGNocm9tYV8xO1xuICAgIHZhciBDb2xvciRDID0gQ29sb3JfMTtcbiAgICB2YXIgaW5wdXQkZyA9IGlucHV0JGg7XG4gICAgdmFyIHVucGFjayR5ID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJGwgPSB1dGlscy50eXBlO1xuXG4gICAgdmFyIHJnYjJjbXlrID0gcmdiMmNteWtfMTtcblxuICAgIENvbG9yJEMucHJvdG90eXBlLmNteWsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJjbXlrKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYSRqLmNteWsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yJEMsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydjbXlrJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dCRnLmZvcm1hdC5jbXlrID0gY215azJyZ2JfMTtcblxuICAgIGlucHV0JGcuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMixcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skeShhcmdzLCAnY215aycpO1xuICAgICAgICAgICAgaWYgKHR5cGUkbChhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnY215ayc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skeCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGFzdCQyID0gdXRpbHMubGFzdDtcbiAgICB2YXIgcm5kID0gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIE1hdGgucm91bmQoYSoxMDApLzEwMDsgfTtcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIGhzbDJjc3MoaCxzLGwpXG4gICAgICogLSBoc2wyY3NzKGgscyxsLGEpXG4gICAgICogLSBoc2wyY3NzKFtoLHMsbF0sIG1vZGUpXG4gICAgICogLSBoc2wyY3NzKFtoLHMsbCxhXSwgbW9kZSlcbiAgICAgKiAtIGhzbDJjc3Moe2gscyxsLGF9LCBtb2RlKVxuICAgICAqL1xuICAgIHZhciBoc2wyY3NzJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIGhzbGEgPSB1bnBhY2skeChhcmdzLCAnaHNsYScpO1xuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMihhcmdzKSB8fCAnbHNhJztcbiAgICAgICAgaHNsYVswXSA9IHJuZChoc2xhWzBdIHx8IDApO1xuICAgICAgICBoc2xhWzFdID0gcm5kKGhzbGFbMV0qMTAwKSArICclJztcbiAgICAgICAgaHNsYVsyXSA9IHJuZChoc2xhWzJdKjEwMCkgKyAnJSc7XG4gICAgICAgIGlmIChtb2RlID09PSAnaHNsYScgfHwgKGhzbGEubGVuZ3RoID4gMyAmJiBoc2xhWzNdPDEpKSB7XG4gICAgICAgICAgICBoc2xhWzNdID0gaHNsYS5sZW5ndGggPiAzID8gaHNsYVszXSA6IDE7XG4gICAgICAgICAgICBtb2RlID0gJ2hzbGEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHNsYS5sZW5ndGggPSAzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobW9kZSArIFwiKFwiICsgKGhzbGEuam9pbignLCcpKSArIFwiKVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIGhzbDJjc3NfMSA9IGhzbDJjc3MkMTtcblxuICAgIHZhciB1bnBhY2skdyA9IHV0aWxzLnVucGFjaztcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIHJnYjJoc2wocixnLGIpXG4gICAgICogLSByZ2IyaHNsKHIsZyxiLGEpXG4gICAgICogLSByZ2IyaHNsKFtyLGcsYl0pXG4gICAgICogLSByZ2IyaHNsKFtyLGcsYixhXSlcbiAgICAgKiAtIHJnYjJoc2woe3IsZyxiLGF9KVxuICAgICAqL1xuICAgIHZhciByZ2IyaHNsJDMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayR3KGFyZ3MsICdyZ2JhJyk7XG4gICAgICAgIHZhciByID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGcgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgYiA9IGFyZ3NbMl07XG5cbiAgICAgICAgciAvPSAyNTU7XG4gICAgICAgIGcgLz0gMjU1O1xuICAgICAgICBiIC89IDI1NTtcblxuICAgICAgICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcblxuICAgICAgICB2YXIgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICAgICAgdmFyIHMsIGg7XG5cbiAgICAgICAgaWYgKG1heCA9PT0gbWluKXtcbiAgICAgICAgICAgIHMgPSAwO1xuICAgICAgICAgICAgaCA9IE51bWJlci5OYU47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzID0gbCA8IDAuNSA/IChtYXggLSBtaW4pIC8gKG1heCArIG1pbikgOiAobWF4IC0gbWluKSAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyID09IG1heCkgeyBoID0gKGcgLSBiKSAvIChtYXggLSBtaW4pOyB9XG4gICAgICAgIGVsc2UgaWYgKGcgPT0gbWF4KSB7IGggPSAyICsgKGIgLSByKSAvIChtYXggLSBtaW4pOyB9XG4gICAgICAgIGVsc2UgaWYgKGIgPT0gbWF4KSB7IGggPSA0ICsgKHIgLSBnKSAvIChtYXggLSBtaW4pOyB9XG5cbiAgICAgICAgaCAqPSA2MDtcbiAgICAgICAgaWYgKGggPCAwKSB7IGggKz0gMzYwOyB9XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aD4zICYmIGFyZ3NbM10hPT11bmRlZmluZWQpIHsgcmV0dXJuIFtoLHMsbCxhcmdzWzNdXTsgfVxuICAgICAgICByZXR1cm4gW2gscyxsXTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJoc2xfMSA9IHJnYjJoc2wkMztcblxuICAgIHZhciB1bnBhY2skdiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGFzdCQxID0gdXRpbHMubGFzdDtcbiAgICB2YXIgaHNsMmNzcyA9IGhzbDJjc3NfMTtcbiAgICB2YXIgcmdiMmhzbCQyID0gcmdiMmhzbF8xO1xuICAgIHZhciByb3VuZCQ2ID0gTWF0aC5yb3VuZDtcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIHJnYjJjc3MocixnLGIpXG4gICAgICogLSByZ2IyY3NzKHIsZyxiLGEpXG4gICAgICogLSByZ2IyY3NzKFtyLGcsYl0sIG1vZGUpXG4gICAgICogLSByZ2IyY3NzKFtyLGcsYixhXSwgbW9kZSlcbiAgICAgKiAtIHJnYjJjc3Moe3IsZyxiLGF9LCBtb2RlKVxuICAgICAqL1xuICAgIHZhciByZ2IyY3NzJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJnYmEgPSB1bnBhY2skdihhcmdzLCAncmdiYScpO1xuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMShhcmdzKSB8fCAncmdiJztcbiAgICAgICAgaWYgKG1vZGUuc3Vic3RyKDAsMykgPT0gJ2hzbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBoc2wyY3NzKHJnYjJoc2wkMihyZ2JhKSwgbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmdiYVswXSA9IHJvdW5kJDYocmdiYVswXSk7XG4gICAgICAgIHJnYmFbMV0gPSByb3VuZCQ2KHJnYmFbMV0pO1xuICAgICAgICByZ2JhWzJdID0gcm91bmQkNihyZ2JhWzJdKTtcbiAgICAgICAgaWYgKG1vZGUgPT09ICdyZ2JhJyB8fCAocmdiYS5sZW5ndGggPiAzICYmIHJnYmFbM108MSkpIHtcbiAgICAgICAgICAgIHJnYmFbM10gPSByZ2JhLmxlbmd0aCA+IDMgPyByZ2JhWzNdIDogMTtcbiAgICAgICAgICAgIG1vZGUgPSAncmdiYSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChtb2RlICsgXCIoXCIgKyAocmdiYS5zbGljZSgwLG1vZGU9PT0ncmdiJz8zOjQpLmpvaW4oJywnKSkgKyBcIilcIik7XG4gICAgfTtcblxuICAgIHZhciByZ2IyY3NzXzEgPSByZ2IyY3NzJDE7XG5cbiAgICB2YXIgdW5wYWNrJHUgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHJvdW5kJDUgPSBNYXRoLnJvdW5kO1xuXG4gICAgdmFyIGhzbDJyZ2IkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFzc2lnbjtcblxuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuICAgICAgICBhcmdzID0gdW5wYWNrJHUoYXJncywgJ2hzbCcpO1xuICAgICAgICB2YXIgaCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBzID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGwgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcixnLGI7XG4gICAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgICAgICByID0gZyA9IGIgPSBsKjI1NTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0MyA9IFswLDAsMF07XG4gICAgICAgICAgICB2YXIgYyA9IFswLDAsMF07XG4gICAgICAgICAgICB2YXIgdDIgPSBsIDwgMC41ID8gbCAqICgxK3MpIDogbCtzLWwqcztcbiAgICAgICAgICAgIHZhciB0MSA9IDIgKiBsIC0gdDI7XG4gICAgICAgICAgICB2YXIgaF8gPSBoIC8gMzYwO1xuICAgICAgICAgICAgdDNbMF0gPSBoXyArIDEvMztcbiAgICAgICAgICAgIHQzWzFdID0gaF87XG4gICAgICAgICAgICB0M1syXSA9IGhfIC0gMS8zO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPDM7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0M1tpXSA8IDApIHsgdDNbaV0gKz0gMTsgfVxuICAgICAgICAgICAgICAgIGlmICh0M1tpXSA+IDEpIHsgdDNbaV0gLT0gMTsgfVxuICAgICAgICAgICAgICAgIGlmICg2ICogdDNbaV0gPCAxKVxuICAgICAgICAgICAgICAgICAgICB7IGNbaV0gPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0M1tpXTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKDIgKiB0M1tpXSA8IDEpXG4gICAgICAgICAgICAgICAgICAgIHsgY1tpXSA9IHQyOyB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoMyAqIHQzW2ldIDwgMilcbiAgICAgICAgICAgICAgICAgICAgeyBjW2ldID0gdDEgKyAodDIgLSB0MSkgKiAoKDIgLyAzKSAtIHQzW2ldKSAqIDY7IH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHsgY1tpXSA9IHQxOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoYXNzaWduID0gW3JvdW5kJDUoY1swXSoyNTUpLHJvdW5kJDUoY1sxXSoyNTUpLHJvdW5kJDUoY1syXSoyNTUpXSwgciA9IGFzc2lnblswXSwgZyA9IGFzc2lnblsxXSwgYiA9IGFzc2lnblsyXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgLy8ga2VlcCBhbHBoYSBjaGFubmVsXG4gICAgICAgICAgICByZXR1cm4gW3IsZyxiLGFyZ3NbM11dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcixnLGIsMV07XG4gICAgfTtcblxuICAgIHZhciBoc2wycmdiXzEgPSBoc2wycmdiJDE7XG5cbiAgICB2YXIgaHNsMnJnYiA9IGhzbDJyZ2JfMTtcbiAgICB2YXIgaW5wdXQkZiA9IGlucHV0JGg7XG5cbiAgICB2YXIgUkVfUkdCID0gL15yZ2JcXChcXHMqKC0/XFxkKyksXFxzKigtP1xcZCspXFxzKixcXHMqKC0/XFxkKylcXHMqXFwpJC87XG4gICAgdmFyIFJFX1JHQkEgPSAvXnJnYmFcXChcXHMqKC0/XFxkKyksXFxzKigtP1xcZCspXFxzKixcXHMqKC0/XFxkKylcXHMqLFxccyooWzAxXXxbMDFdP1xcLlxcZCspXFwpJC87XG4gICAgdmFyIFJFX1JHQl9QQ1QgPSAvXnJnYlxcKFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSUsXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccypcXCkkLztcbiAgICB2YXIgUkVfUkdCQV9QQ1QgPSAvXnJnYmFcXChcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyklLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWzAxXXxbMDFdP1xcLlxcZCspXFwpJC87XG4gICAgdmFyIFJFX0hTTCA9IC9eaHNsXFwoXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpJC87XG4gICAgdmFyIFJFX0hTTEEgPSAvXmhzbGFcXChcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyksXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbMDFdfFswMV0/XFwuXFxkKylcXCkkLztcblxuICAgIHZhciByb3VuZCQ0ID0gTWF0aC5yb3VuZDtcblxuICAgIHZhciBjc3MycmdiJDEgPSBmdW5jdGlvbiAoY3NzKSB7XG4gICAgICAgIGNzcyA9IGNzcy50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgdmFyIG07XG5cbiAgICAgICAgaWYgKGlucHV0JGYuZm9ybWF0Lm5hbWVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCRmLmZvcm1hdC5uYW1lZChjc3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmdiKDI1MCwyMCwwKVxuICAgICAgICBpZiAoKG0gPSBjc3MubWF0Y2goUkVfUkdCKSkpIHtcbiAgICAgICAgICAgIHZhciByZ2IgPSBtLnNsaWNlKDEsNCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8MzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gK3JnYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJnYlszXSA9IDE7ICAvLyBkZWZhdWx0IGFscGhhXG4gICAgICAgICAgICByZXR1cm4gcmdiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmdiYSgyNTAsMjAsMCwwLjQpXG4gICAgICAgIGlmICgobSA9IGNzcy5tYXRjaChSRV9SR0JBKSkpIHtcbiAgICAgICAgICAgIHZhciByZ2IkMSA9IG0uc2xpY2UoMSw1KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMT0wOyBpJDE8NDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgICByZ2IkMVtpJDFdID0gK3JnYiQxW2kkMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmdiJDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZ2IoMTAwJSwwJSwwJSlcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX1JHQl9QQ1QpKSkge1xuICAgICAgICAgICAgdmFyIHJnYiQyID0gbS5zbGljZSgxLDQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQyPTA7IGkkMjwzOyBpJDIrKykge1xuICAgICAgICAgICAgICAgIHJnYiQyW2kkMl0gPSByb3VuZCQ0KHJnYiQyW2kkMl0gKiAyLjU1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJnYiQyWzNdID0gMTsgIC8vIGRlZmF1bHQgYWxwaGFcbiAgICAgICAgICAgIHJldHVybiByZ2IkMjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJnYmEoMTAwJSwwJSwwJSwwLjQpXG4gICAgICAgIGlmICgobSA9IGNzcy5tYXRjaChSRV9SR0JBX1BDVCkpKSB7XG4gICAgICAgICAgICB2YXIgcmdiJDMgPSBtLnNsaWNlKDEsNSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDM9MDsgaSQzPDM7IGkkMysrKSB7XG4gICAgICAgICAgICAgICAgcmdiJDNbaSQzXSA9IHJvdW5kJDQocmdiJDNbaSQzXSAqIDIuNTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmdiJDNbM10gPSArcmdiJDNbM107XG4gICAgICAgICAgICByZXR1cm4gcmdiJDM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoc2woMCwxMDAlLDUwJSlcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX0hTTCkpKSB7XG4gICAgICAgICAgICB2YXIgaHNsID0gbS5zbGljZSgxLDQpO1xuICAgICAgICAgICAgaHNsWzFdICo9IDAuMDE7XG4gICAgICAgICAgICBoc2xbMl0gKj0gMC4wMTtcbiAgICAgICAgICAgIHZhciByZ2IkNCA9IGhzbDJyZ2IoaHNsKTtcbiAgICAgICAgICAgIHJnYiQ0WzNdID0gMTtcbiAgICAgICAgICAgIHJldHVybiByZ2IkNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhzbGEoMCwxMDAlLDUwJSwwLjUpXG4gICAgICAgIGlmICgobSA9IGNzcy5tYXRjaChSRV9IU0xBKSkpIHtcbiAgICAgICAgICAgIHZhciBoc2wkMSA9IG0uc2xpY2UoMSw0KTtcbiAgICAgICAgICAgIGhzbCQxWzFdICo9IDAuMDE7XG4gICAgICAgICAgICBoc2wkMVsyXSAqPSAwLjAxO1xuICAgICAgICAgICAgdmFyIHJnYiQ1ID0gaHNsMnJnYihoc2wkMSk7XG4gICAgICAgICAgICByZ2IkNVszXSA9ICttWzRdOyAgLy8gZGVmYXVsdCBhbHBoYSA9IDFcbiAgICAgICAgICAgIHJldHVybiByZ2IkNTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjc3MycmdiJDEudGVzdCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBSRV9SR0IudGVzdChzKSB8fFxuICAgICAgICAgICAgUkVfUkdCQS50ZXN0KHMpIHx8XG4gICAgICAgICAgICBSRV9SR0JfUENULnRlc3QocykgfHxcbiAgICAgICAgICAgIFJFX1JHQkFfUENULnRlc3QocykgfHxcbiAgICAgICAgICAgIFJFX0hTTC50ZXN0KHMpIHx8XG4gICAgICAgICAgICBSRV9IU0xBLnRlc3Qocyk7XG4gICAgfTtcblxuICAgIHZhciBjc3MycmdiXzEgPSBjc3MycmdiJDE7XG5cbiAgICB2YXIgY2hyb21hJGkgPSBjaHJvbWFfMTtcbiAgICB2YXIgQ29sb3IkQiA9IENvbG9yXzE7XG4gICAgdmFyIGlucHV0JGUgPSBpbnB1dCRoO1xuICAgIHZhciB0eXBlJGsgPSB1dGlscy50eXBlO1xuXG4gICAgdmFyIHJnYjJjc3MgPSByZ2IyY3NzXzE7XG4gICAgdmFyIGNzczJyZ2IgPSBjc3MycmdiXzE7XG5cbiAgICBDb2xvciRCLnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgICAgIHJldHVybiByZ2IyY3NzKHRoaXMuX3JnYiwgbW9kZSk7XG4gICAgfTtcblxuICAgIGNocm9tYSRpLmNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkQiwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2NzcyddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQkZS5mb3JtYXQuY3NzID0gY3NzMnJnYjtcblxuICAgIGlucHV0JGUuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogNSxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICAgIHZhciByZXN0ID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSByZXN0WyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3QubGVuZ3RoICYmIHR5cGUkayhoKSA9PT0gJ3N0cmluZycgJiYgY3NzMnJnYi50ZXN0KGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjc3MnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgQ29sb3IkQSA9IENvbG9yXzE7XG4gICAgdmFyIGNocm9tYSRoID0gY2hyb21hXzE7XG4gICAgdmFyIGlucHV0JGQgPSBpbnB1dCRoO1xuICAgIHZhciB1bnBhY2skdCA9IHV0aWxzLnVucGFjaztcblxuICAgIGlucHV0JGQuZm9ybWF0LmdsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZ2IgPSB1bnBhY2skdChhcmdzLCAncmdiYScpO1xuICAgICAgICByZ2JbMF0gKj0gMjU1O1xuICAgICAgICByZ2JbMV0gKj0gMjU1O1xuICAgICAgICByZ2JbMl0gKj0gMjU1O1xuICAgICAgICByZXR1cm4gcmdiO1xuICAgIH07XG5cbiAgICBjaHJvbWEkaC5nbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkQSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2dsJ10pICkpO1xuICAgIH07XG5cbiAgICBDb2xvciRBLnByb3RvdHlwZS5nbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmdiID0gdGhpcy5fcmdiO1xuICAgICAgICByZXR1cm4gW3JnYlswXS8yNTUsIHJnYlsxXS8yNTUsIHJnYlsyXS8yNTUsIHJnYlszXV07XG4gICAgfTtcblxuICAgIHZhciB1bnBhY2skcyA9IHV0aWxzLnVucGFjaztcblxuICAgIHZhciByZ2IyaGNnJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRzKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICAgIHZhciBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgICAgdmFyIGMgPSBkZWx0YSAqIDEwMCAvIDI1NTtcbiAgICAgICAgdmFyIF9nID0gbWluIC8gKDI1NSAtIGRlbHRhKSAqIDEwMDtcbiAgICAgICAgdmFyIGg7XG4gICAgICAgIGlmIChkZWx0YSA9PT0gMCkge1xuICAgICAgICAgICAgaCA9IE51bWJlci5OYU47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAociA9PT0gbWF4KSB7IGggPSAoZyAtIGIpIC8gZGVsdGE7IH1cbiAgICAgICAgICAgIGlmIChnID09PSBtYXgpIHsgaCA9IDIrKGIgLSByKSAvIGRlbHRhOyB9XG4gICAgICAgICAgICBpZiAoYiA9PT0gbWF4KSB7IGggPSA0KyhyIC0gZykgLyBkZWx0YTsgfVxuICAgICAgICAgICAgaCAqPSA2MDtcbiAgICAgICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaCwgYywgX2ddO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMmhjZ18xID0gcmdiMmhjZyQxO1xuXG4gICAgdmFyIHVucGFjayRyID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBmbG9vciQzID0gTWF0aC5mbG9vcjtcblxuICAgIC8qXG4gICAgICogdGhpcyBpcyBiYXNpY2FsbHkganVzdCBIU1Ygd2l0aCBzb21lIG1pbm9yIHR3ZWFrc1xuICAgICAqXG4gICAgICogaHVlLi4gWzAuLjM2MF1cbiAgICAgKiBjaHJvbWEgLi4gWzAuLjFdXG4gICAgICogZ3JheW5lc3MgLi4gWzAuLjFdXG4gICAgICovXG5cbiAgICB2YXIgaGNnMnJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFzc2lnbiwgYXNzaWduJDEsIGFzc2lnbiQyLCBhc3NpZ24kMywgYXNzaWduJDQsIGFzc2lnbiQ1O1xuXG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgICAgIGFyZ3MgPSB1bnBhY2skcihhcmdzLCAnaGNnJyk7XG4gICAgICAgIHZhciBoID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGMgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgX2cgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcixnLGI7XG4gICAgICAgIF9nID0gX2cgKiAyNTU7XG4gICAgICAgIHZhciBfYyA9IGMgKiAyNTU7XG4gICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICByID0gZyA9IGIgPSBfZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoID09PSAzNjApIHsgaCA9IDA7IH1cbiAgICAgICAgICAgIGlmIChoID4gMzYwKSB7IGggLT0gMzYwOyB9XG4gICAgICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgICAgIGggLz0gNjA7XG4gICAgICAgICAgICB2YXIgaSA9IGZsb29yJDMoaCk7XG4gICAgICAgICAgICB2YXIgZiA9IGggLSBpO1xuICAgICAgICAgICAgdmFyIHAgPSBfZyAqICgxIC0gYyk7XG4gICAgICAgICAgICB2YXIgcSA9IHAgKyBfYyAqICgxIC0gZik7XG4gICAgICAgICAgICB2YXIgdCA9IHAgKyBfYyAqIGY7XG4gICAgICAgICAgICB2YXIgdiA9IHAgKyBfYztcbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogKGFzc2lnbiA9IFt2LCB0LCBwXSwgciA9IGFzc2lnblswXSwgZyA9IGFzc2lnblsxXSwgYiA9IGFzc2lnblsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAxOiAoYXNzaWduJDEgPSBbcSwgdiwgcF0sIHIgPSBhc3NpZ24kMVswXSwgZyA9IGFzc2lnbiQxWzFdLCBiID0gYXNzaWduJDFbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMjogKGFzc2lnbiQyID0gW3AsIHYsIHRdLCByID0gYXNzaWduJDJbMF0sIGcgPSBhc3NpZ24kMlsxXSwgYiA9IGFzc2lnbiQyWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IChhc3NpZ24kMyA9IFtwLCBxLCB2XSwgciA9IGFzc2lnbiQzWzBdLCBnID0gYXNzaWduJDNbMV0sIGIgPSBhc3NpZ24kM1syXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSA0OiAoYXNzaWduJDQgPSBbdCwgcCwgdl0sIHIgPSBhc3NpZ24kNFswXSwgZyA9IGFzc2lnbiQ0WzFdLCBiID0gYXNzaWduJDRbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgNTogKGFzc2lnbiQ1ID0gW3YsIHAsIHFdLCByID0gYXNzaWduJDVbMF0sIGcgPSBhc3NpZ24kNVsxXSwgYiA9IGFzc2lnbiQ1WzJdKTsgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsIGcsIGIsIGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIGhjZzJyZ2JfMSA9IGhjZzJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJHEgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkaiA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIGNocm9tYSRnID0gY2hyb21hXzE7XG4gICAgdmFyIENvbG9yJHogPSBDb2xvcl8xO1xuICAgIHZhciBpbnB1dCRjID0gaW5wdXQkaDtcblxuICAgIHZhciByZ2IyaGNnID0gcmdiMmhjZ18xO1xuXG4gICAgQ29sb3Ikei5wcm90b3R5cGUuaGNnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IyaGNnKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYSRnLmhjZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkeiwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2hjZyddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQkYy5mb3JtYXQuaGNnID0gaGNnMnJnYl8xO1xuXG4gICAgaW5wdXQkYy5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAxLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRxKGFyZ3MsICdoY2cnKTtcbiAgICAgICAgICAgIGlmICh0eXBlJGooYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hjZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skcCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGFzdCA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIHJvdW5kJDMgPSBNYXRoLnJvdW5kO1xuXG4gICAgdmFyIHJnYjJoZXgkMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJHAoYXJncywgJ3JnYmEnKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIGEgPSByZWZbM107XG4gICAgICAgIHZhciBtb2RlID0gbGFzdChhcmdzKSB8fCAnYXV0byc7XG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHsgYSA9IDE7IH1cbiAgICAgICAgaWYgKG1vZGUgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgbW9kZSA9IGEgPCAxID8gJ3JnYmEnIDogJ3JnYic7XG4gICAgICAgIH1cbiAgICAgICAgciA9IHJvdW5kJDMocik7XG4gICAgICAgIGcgPSByb3VuZCQzKGcpO1xuICAgICAgICBiID0gcm91bmQkMyhiKTtcbiAgICAgICAgdmFyIHUgPSByIDw8IDE2IHwgZyA8PCA4IHwgYjtcbiAgICAgICAgdmFyIHN0ciA9IFwiMDAwMDAwXCIgKyB1LnRvU3RyaW5nKDE2KTsgLy8jLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoc3RyLmxlbmd0aCAtIDYpO1xuICAgICAgICB2YXIgaHhhID0gJzAnICsgcm91bmQkMyhhICogMjU1KS50b1N0cmluZygxNik7XG4gICAgICAgIGh4YSA9IGh4YS5zdWJzdHIoaHhhLmxlbmd0aCAtIDIpO1xuICAgICAgICBzd2l0Y2ggKG1vZGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSAncmdiYSc6IHJldHVybiAoXCIjXCIgKyBzdHIgKyBoeGEpO1xuICAgICAgICAgICAgY2FzZSAnYXJnYic6IHJldHVybiAoXCIjXCIgKyBoeGEgKyBzdHIpO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIChcIiNcIiArIHN0cik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJnYjJoZXhfMSA9IHJnYjJoZXgkMjtcblxuICAgIHZhciBSRV9IRVggPSAvXiM/KFtBLUZhLWYwLTldezZ9fFtBLUZhLWYwLTldezN9KSQvO1xuICAgIHZhciBSRV9IRVhBID0gL14jPyhbQS1GYS1mMC05XXs4fXxbQS1GYS1mMC05XXs0fSkkLztcblxuICAgIHZhciBoZXgycmdiJDEgPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgICAgIGlmIChoZXgubWF0Y2goUkVfSEVYKSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9wdGlvbmFsIGxlYWRpbmcgI1xuICAgICAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDQgfHwgaGV4Lmxlbmd0aCA9PT0gNykge1xuICAgICAgICAgICAgICAgIGhleCA9IGhleC5zdWJzdHIoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBleHBhbmQgc2hvcnQtbm90YXRpb24gdG8gZnVsbCBzaXgtZGlnaXRcbiAgICAgICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnNwbGl0KCcnKTtcbiAgICAgICAgICAgICAgICBoZXggPSBoZXhbMF0raGV4WzBdK2hleFsxXStoZXhbMV0raGV4WzJdK2hleFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1ID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgICAgICAgICB2YXIgciA9IHUgPj4gMTY7XG4gICAgICAgICAgICB2YXIgZyA9IHUgPj4gOCAmIDB4RkY7XG4gICAgICAgICAgICB2YXIgYiA9IHUgJiAweEZGO1xuICAgICAgICAgICAgcmV0dXJuIFtyLGcsYiwxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1hdGNoIHJnYmEgaGV4IGZvcm1hdCwgZWcgI0ZGMDAwMDc3XG4gICAgICAgIGlmIChoZXgubWF0Y2goUkVfSEVYQSkpIHtcbiAgICAgICAgICAgIGlmIChoZXgubGVuZ3RoID09PSA1IHx8IGhleC5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgb3B0aW9uYWwgbGVhZGluZyAjXG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnN1YnN0cigxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGV4cGFuZCBzaG9ydC1ub3RhdGlvbiB0byBmdWxsIGVpZ2h0LWRpZ2l0XG4gICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGhleCA9IGhleC5zcGxpdCgnJyk7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4WzBdK2hleFswXStoZXhbMV0raGV4WzFdK2hleFsyXStoZXhbMl0raGV4WzNdK2hleFszXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1JDEgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgICAgICAgIHZhciByJDEgPSB1JDEgPj4gMjQgJiAweEZGO1xuICAgICAgICAgICAgdmFyIGckMSA9IHUkMSA+PiAxNiAmIDB4RkY7XG4gICAgICAgICAgICB2YXIgYiQxID0gdSQxID4+IDggJiAweEZGO1xuICAgICAgICAgICAgdmFyIGEgPSBNYXRoLnJvdW5kKCh1JDEgJiAweEZGKSAvIDB4RkYgKiAxMDApIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIFtyJDEsZyQxLGIkMSxhXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIHVzZWQgdG8gY2hlY2sgZm9yIGNzcyBjb2xvcnMgaGVyZVxuICAgICAgICAvLyBpZiBfaW5wdXQuY3NzPyBhbmQgcmdiID0gX2lucHV0LmNzcyBoZXhcbiAgICAgICAgLy8gICAgIHJldHVybiByZ2JcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwidW5rbm93biBoZXggY29sb3I6IFwiICsgaGV4KSk7XG4gICAgfTtcblxuICAgIHZhciBoZXgycmdiXzEgPSBoZXgycmdiJDE7XG5cbiAgICB2YXIgY2hyb21hJGYgPSBjaHJvbWFfMTtcbiAgICB2YXIgQ29sb3IkeSA9IENvbG9yXzE7XG4gICAgdmFyIHR5cGUkaSA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIGlucHV0JGIgPSBpbnB1dCRoO1xuXG4gICAgdmFyIHJnYjJoZXgkMSA9IHJnYjJoZXhfMTtcblxuICAgIENvbG9yJHkucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJoZXgkMSh0aGlzLl9yZ2IsIG1vZGUpO1xuICAgIH07XG5cbiAgICBjaHJvbWEkZi5oZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yJHksIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydoZXgnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0JGIuZm9ybWF0LmhleCA9IGhleDJyZ2JfMTtcbiAgICBpbnB1dCRiLmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDQsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdCA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICAgICAgaWYgKCFyZXN0Lmxlbmd0aCAmJiB0eXBlJGkoaCkgPT09ICdzdHJpbmcnICYmIFszLDQsNSw2LDcsOCw5XS5pbmRleE9mKGgubGVuZ3RoKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoZXgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJG8gPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIFRXT1BJJDIgPSB1dGlscy5UV09QSTtcbiAgICB2YXIgbWluJDIgPSBNYXRoLm1pbjtcbiAgICB2YXIgc3FydCQ0ID0gTWF0aC5zcXJ0O1xuICAgIHZhciBhY29zID0gTWF0aC5hY29zO1xuXG4gICAgdmFyIHJnYjJoc2kkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAvKlxuICAgICAgICBib3Jyb3dlZCBmcm9tIGhlcmU6XG4gICAgICAgIGh0dHA6Ly9odW1tZXIuc3RhbmZvcmQuZWR1L211c2VpbmZvL2RvYy9leGFtcGxlcy9odW1kcnVtL2tleXNjYXBlMi9yZ2IyaHNpLmNwcFxuICAgICAgICAqL1xuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJG8oYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICByIC89IDI1NTtcbiAgICAgICAgZyAvPSAyNTU7XG4gICAgICAgIGIgLz0gMjU1O1xuICAgICAgICB2YXIgaDtcbiAgICAgICAgdmFyIG1pbl8gPSBtaW4kMihyLGcsYik7XG4gICAgICAgIHZhciBpID0gKHIrZytiKSAvIDM7XG4gICAgICAgIHZhciBzID0gaSA+IDAgPyAxIC0gbWluXy9pIDogMDtcbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIGggPSBOYU47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoID0gKChyLWcpKyhyLWIpKSAvIDI7XG4gICAgICAgICAgICBoIC89IHNxcnQkNCgoci1nKSooci1nKSArIChyLWIpKihnLWIpKTtcbiAgICAgICAgICAgIGggPSBhY29zKGgpO1xuICAgICAgICAgICAgaWYgKGIgPiBnKSB7XG4gICAgICAgICAgICAgICAgaCA9IFRXT1BJJDIgLSBoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCAvPSBUV09QSSQyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaCozNjAscyxpXTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJoc2lfMSA9IHJnYjJoc2kkMTtcblxuICAgIHZhciB1bnBhY2skbiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGltaXQgPSB1dGlscy5saW1pdDtcbiAgICB2YXIgVFdPUEkkMSA9IHV0aWxzLlRXT1BJO1xuICAgIHZhciBQSVRISVJEID0gdXRpbHMuUElUSElSRDtcbiAgICB2YXIgY29zJDQgPSBNYXRoLmNvcztcblxuICAgIC8qXG4gICAgICogaHVlIFswLi4zNjBdXG4gICAgICogc2F0dXJhdGlvbiBbMC4uMV1cbiAgICAgKiBpbnRlbnNpdHkgWzAuLjFdXG4gICAgICovXG4gICAgdmFyIGhzaTJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgLypcbiAgICAgICAgYm9ycm93ZWQgZnJvbSBoZXJlOlxuICAgICAgICBodHRwOi8vaHVtbWVyLnN0YW5mb3JkLmVkdS9tdXNlaW5mby9kb2MvZXhhbXBsZXMvaHVtZHJ1bS9rZXlzY2FwZTIvaHNpMnJnYi5jcHBcbiAgICAgICAgKi9cbiAgICAgICAgYXJncyA9IHVucGFjayRuKGFyZ3MsICdoc2knKTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzBdO1xuICAgICAgICB2YXIgcyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBpID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHIsZyxiO1xuXG4gICAgICAgIGlmIChpc05hTihoKSkgeyBoID0gMDsgfVxuICAgICAgICBpZiAoaXNOYU4ocykpIHsgcyA9IDA7IH1cbiAgICAgICAgLy8gbm9ybWFsaXplIGh1ZVxuICAgICAgICBpZiAoaCA+IDM2MCkgeyBoIC09IDM2MDsgfVxuICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgaCAvPSAzNjA7XG4gICAgICAgIGlmIChoIDwgMS8zKSB7XG4gICAgICAgICAgICBiID0gKDEtcykvMztcbiAgICAgICAgICAgIHIgPSAoMStzKmNvcyQ0KFRXT1BJJDEqaCkvY29zJDQoUElUSElSRC1UV09QSSQxKmgpKS8zO1xuICAgICAgICAgICAgZyA9IDEgLSAoYityKTtcbiAgICAgICAgfSBlbHNlIGlmIChoIDwgMi8zKSB7XG4gICAgICAgICAgICBoIC09IDEvMztcbiAgICAgICAgICAgIHIgPSAoMS1zKS8zO1xuICAgICAgICAgICAgZyA9ICgxK3MqY29zJDQoVFdPUEkkMSpoKS9jb3MkNChQSVRISVJELVRXT1BJJDEqaCkpLzM7XG4gICAgICAgICAgICBiID0gMSAtIChyK2cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaCAtPSAyLzM7XG4gICAgICAgICAgICBnID0gKDEtcykvMztcbiAgICAgICAgICAgIGIgPSAoMStzKmNvcyQ0KFRXT1BJJDEqaCkvY29zJDQoUElUSElSRC1UV09QSSQxKmgpKS8zO1xuICAgICAgICAgICAgciA9IDEgLSAoZytiKTtcbiAgICAgICAgfVxuICAgICAgICByID0gbGltaXQoaSpyKjMpO1xuICAgICAgICBnID0gbGltaXQoaSpnKjMpO1xuICAgICAgICBiID0gbGltaXQoaSpiKjMpO1xuICAgICAgICByZXR1cm4gW3IqMjU1LCBnKjI1NSwgYioyNTUsIGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIGhzaTJyZ2JfMSA9IGhzaTJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJG0gPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkaCA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIGNocm9tYSRlID0gY2hyb21hXzE7XG4gICAgdmFyIENvbG9yJHggPSBDb2xvcl8xO1xuICAgIHZhciBpbnB1dCRhID0gaW5wdXQkaDtcblxuICAgIHZhciByZ2IyaHNpID0gcmdiMmhzaV8xO1xuXG4gICAgQ29sb3IkeC5wcm90b3R5cGUuaHNpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IyaHNpKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYSRlLmhzaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkeCwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2hzaSddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQkYS5mb3JtYXQuaHNpID0gaHNpMnJnYl8xO1xuXG4gICAgaW5wdXQkYS5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRtKGFyZ3MsICdoc2knKTtcbiAgICAgICAgICAgIGlmICh0eXBlJGgoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hzaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skbCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSRnID0gdXRpbHMudHlwZTtcbiAgICB2YXIgY2hyb21hJGQgPSBjaHJvbWFfMTtcbiAgICB2YXIgQ29sb3IkdyA9IENvbG9yXzE7XG4gICAgdmFyIGlucHV0JDkgPSBpbnB1dCRoO1xuXG4gICAgdmFyIHJnYjJoc2wkMSA9IHJnYjJoc2xfMTtcblxuICAgIENvbG9yJHcucHJvdG90eXBlLmhzbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmdiMmhzbCQxKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYSRkLmhzbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkdywgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2hzbCddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQkOS5mb3JtYXQuaHNsID0gaHNsMnJnYl8xO1xuXG4gICAgaW5wdXQkOS5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRsKGFyZ3MsICdoc2wnKTtcbiAgICAgICAgICAgIGlmICh0eXBlJGcoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hzbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skayA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbWluJDEgPSBNYXRoLm1pbjtcbiAgICB2YXIgbWF4JDEgPSBNYXRoLm1heDtcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIHJnYjJoc3YocixnLGIpXG4gICAgICogLSByZ2IyaHN2KFtyLGcsYl0pXG4gICAgICogLSByZ2IyaHN2KHtyLGcsYn0pXG4gICAgICovXG4gICAgdmFyIHJnYjJoc2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayRrKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgZyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBiID0gYXJnc1syXTtcbiAgICAgICAgdmFyIG1pbl8gPSBtaW4kMShyLCBnLCBiKTtcbiAgICAgICAgdmFyIG1heF8gPSBtYXgkMShyLCBnLCBiKTtcbiAgICAgICAgdmFyIGRlbHRhID0gbWF4XyAtIG1pbl87XG4gICAgICAgIHZhciBoLHMsdjtcbiAgICAgICAgdiA9IG1heF8gLyAyNTUuMDtcbiAgICAgICAgaWYgKG1heF8gPT09IDApIHtcbiAgICAgICAgICAgIGggPSBOdW1iZXIuTmFOO1xuICAgICAgICAgICAgcyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzID0gZGVsdGEgLyBtYXhfO1xuICAgICAgICAgICAgaWYgKHIgPT09IG1heF8pIHsgaCA9IChnIC0gYikgLyBkZWx0YTsgfVxuICAgICAgICAgICAgaWYgKGcgPT09IG1heF8pIHsgaCA9IDIrKGIgLSByKSAvIGRlbHRhOyB9XG4gICAgICAgICAgICBpZiAoYiA9PT0gbWF4XykgeyBoID0gNCsociAtIGcpIC8gZGVsdGE7IH1cbiAgICAgICAgICAgIGggKj0gNjA7XG4gICAgICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2gsIHMsIHZdXG4gICAgfTtcblxuICAgIHZhciByZ2IyaHN2JDEgPSByZ2IyaHNsO1xuXG4gICAgdmFyIHVucGFjayRqID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBmbG9vciQyID0gTWF0aC5mbG9vcjtcblxuICAgIHZhciBoc3YycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXNzaWduLCBhc3NpZ24kMSwgYXNzaWduJDIsIGFzc2lnbiQzLCBhc3NpZ24kNCwgYXNzaWduJDU7XG5cbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICAgICAgYXJncyA9IHVucGFjayRqKGFyZ3MsICdoc3YnKTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzBdO1xuICAgICAgICB2YXIgcyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciB2ID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHIsZyxiO1xuICAgICAgICB2ICo9IDI1NTtcbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IHY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaCA9PT0gMzYwKSB7IGggPSAwOyB9XG4gICAgICAgICAgICBpZiAoaCA+IDM2MCkgeyBoIC09IDM2MDsgfVxuICAgICAgICAgICAgaWYgKGggPCAwKSB7IGggKz0gMzYwOyB9XG4gICAgICAgICAgICBoIC89IDYwO1xuXG4gICAgICAgICAgICB2YXIgaSA9IGZsb29yJDIoaCk7XG4gICAgICAgICAgICB2YXIgZiA9IGggLSBpO1xuICAgICAgICAgICAgdmFyIHAgPSB2ICogKDEgLSBzKTtcbiAgICAgICAgICAgIHZhciBxID0gdiAqICgxIC0gcyAqIGYpO1xuICAgICAgICAgICAgdmFyIHQgPSB2ICogKDEgLSBzICogKDEgLSBmKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogKGFzc2lnbiA9IFt2LCB0LCBwXSwgciA9IGFzc2lnblswXSwgZyA9IGFzc2lnblsxXSwgYiA9IGFzc2lnblsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAxOiAoYXNzaWduJDEgPSBbcSwgdiwgcF0sIHIgPSBhc3NpZ24kMVswXSwgZyA9IGFzc2lnbiQxWzFdLCBiID0gYXNzaWduJDFbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMjogKGFzc2lnbiQyID0gW3AsIHYsIHRdLCByID0gYXNzaWduJDJbMF0sIGcgPSBhc3NpZ24kMlsxXSwgYiA9IGFzc2lnbiQyWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IChhc3NpZ24kMyA9IFtwLCBxLCB2XSwgciA9IGFzc2lnbiQzWzBdLCBnID0gYXNzaWduJDNbMV0sIGIgPSBhc3NpZ24kM1syXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSA0OiAoYXNzaWduJDQgPSBbdCwgcCwgdl0sIHIgPSBhc3NpZ24kNFswXSwgZyA9IGFzc2lnbiQ0WzFdLCBiID0gYXNzaWduJDRbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgNTogKGFzc2lnbiQ1ID0gW3YsIHAsIHFdLCByID0gYXNzaWduJDVbMF0sIGcgPSBhc3NpZ24kNVsxXSwgYiA9IGFzc2lnbiQ1WzJdKTsgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsZyxiLGFyZ3MubGVuZ3RoID4gMz9hcmdzWzNdOjFdO1xuICAgIH07XG5cbiAgICB2YXIgaHN2MnJnYl8xID0gaHN2MnJnYjtcblxuICAgIHZhciB1bnBhY2skaSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSRmID0gdXRpbHMudHlwZTtcbiAgICB2YXIgY2hyb21hJGMgPSBjaHJvbWFfMTtcbiAgICB2YXIgQ29sb3IkdiA9IENvbG9yXzE7XG4gICAgdmFyIGlucHV0JDggPSBpbnB1dCRoO1xuXG4gICAgdmFyIHJnYjJoc3YgPSByZ2IyaHN2JDE7XG5cbiAgICBDb2xvciR2LnByb3RvdHlwZS5oc3YgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJoc3YodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hJGMuaHN2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvciR2LCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaHN2J10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dCQ4LmZvcm1hdC5oc3YgPSBoc3YycmdiXzE7XG5cbiAgICBpbnB1dCQ4LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDIsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJGkoYXJncywgJ2hzdicpO1xuICAgICAgICAgICAgaWYgKHR5cGUkZihhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnaHN2JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGxhYkNvbnN0YW50cyA9IHtcbiAgICAgICAgLy8gQ29ycmVzcG9uZHMgcm91Z2hseSB0byBSR0IgYnJpZ2h0ZXIvZGFya2VyXG4gICAgICAgIEtuOiAxOCxcblxuICAgICAgICAvLyBENjUgc3RhbmRhcmQgcmVmZXJlbnRcbiAgICAgICAgWG46IDAuOTUwNDcwLFxuICAgICAgICBZbjogMSxcbiAgICAgICAgWm46IDEuMDg4ODMwLFxuXG4gICAgICAgIHQwOiAwLjEzNzkzMTAzNCwgIC8vIDQgLyAyOVxuICAgICAgICB0MTogMC4yMDY4OTY1NTIsICAvLyA2IC8gMjlcbiAgICAgICAgdDI6IDAuMTI4NDE4NTUsICAgLy8gMyAqIHQxICogdDFcbiAgICAgICAgdDM6IDAuMDA4ODU2NDUyLCAgLy8gdDEgKiB0MSAqIHQxXG4gICAgfTtcblxuICAgIHZhciBMQUJfQ09OU1RBTlRTJDMgPSBsYWJDb25zdGFudHM7XG4gICAgdmFyIHVucGFjayRoID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBwb3ckYSA9IE1hdGgucG93O1xuXG4gICAgdmFyIHJnYjJsYWIkMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJGgoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICB2YXIgcmVmJDEgPSByZ2IyeHl6KHIsZyxiKTtcbiAgICAgICAgdmFyIHggPSByZWYkMVswXTtcbiAgICAgICAgdmFyIHkgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIHogPSByZWYkMVsyXTtcbiAgICAgICAgdmFyIGwgPSAxMTYgKiB5IC0gMTY7XG4gICAgICAgIHJldHVybiBbbCA8IDAgPyAwIDogbCwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KV07XG4gICAgfTtcblxuICAgIHZhciByZ2JfeHl6ID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgaWYgKChyIC89IDI1NSkgPD0gMC4wNDA0NSkgeyByZXR1cm4gciAvIDEyLjkyOyB9XG4gICAgICAgIHJldHVybiBwb3ckYSgociArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH07XG5cbiAgICB2YXIgeHl6X2xhYiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGlmICh0ID4gTEFCX0NPTlNUQU5UUyQzLnQzKSB7IHJldHVybiBwb3ckYSh0LCAxIC8gMyk7IH1cbiAgICAgICAgcmV0dXJuIHQgLyBMQUJfQ09OU1RBTlRTJDMudDIgKyBMQUJfQ09OU1RBTlRTJDMudDA7XG4gICAgfTtcblxuICAgIHZhciByZ2IyeHl6ID0gZnVuY3Rpb24gKHIsZyxiKSB7XG4gICAgICAgIHIgPSByZ2JfeHl6KHIpO1xuICAgICAgICBnID0gcmdiX3h5eihnKTtcbiAgICAgICAgYiA9IHJnYl94eXooYik7XG4gICAgICAgIHZhciB4ID0geHl6X2xhYigoMC40MTI0NTY0ICogciArIDAuMzU3NTc2MSAqIGcgKyAwLjE4MDQzNzUgKiBiKSAvIExBQl9DT05TVEFOVFMkMy5Ybik7XG4gICAgICAgIHZhciB5ID0geHl6X2xhYigoMC4yMTI2NzI5ICogciArIDAuNzE1MTUyMiAqIGcgKyAwLjA3MjE3NTAgKiBiKSAvIExBQl9DT05TVEFOVFMkMy5Zbik7XG4gICAgICAgIHZhciB6ID0geHl6X2xhYigoMC4wMTkzMzM5ICogciArIDAuMTE5MTkyMCAqIGcgKyAwLjk1MDMwNDEgKiBiKSAvIExBQl9DT05TVEFOVFMkMy5abik7XG4gICAgICAgIHJldHVybiBbeCx5LHpdO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMmxhYl8xID0gcmdiMmxhYiQyO1xuXG4gICAgdmFyIExBQl9DT05TVEFOVFMkMiA9IGxhYkNvbnN0YW50cztcbiAgICB2YXIgdW5wYWNrJGcgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHBvdyQ5ID0gTWF0aC5wb3c7XG5cbiAgICAvKlxuICAgICAqIEwqIFswLi4xMDBdXG4gICAgICogYSBbLTEwMC4uMTAwXVxuICAgICAqIGIgWy0xMDAuLjEwMF1cbiAgICAgKi9cbiAgICB2YXIgbGFiMnJnYiQxID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIGFyZ3MgPSB1bnBhY2skZyhhcmdzLCAnbGFiJyk7XG4gICAgICAgIHZhciBsID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGEgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgYiA9IGFyZ3NbMl07XG4gICAgICAgIHZhciB4LHkseiwgcixnLGJfO1xuXG4gICAgICAgIHkgPSAobCArIDE2KSAvIDExNjtcbiAgICAgICAgeCA9IGlzTmFOKGEpID8geSA6IHkgKyBhIC8gNTAwO1xuICAgICAgICB6ID0gaXNOYU4oYikgPyB5IDogeSAtIGIgLyAyMDA7XG5cbiAgICAgICAgeSA9IExBQl9DT05TVEFOVFMkMi5ZbiAqIGxhYl94eXooeSk7XG4gICAgICAgIHggPSBMQUJfQ09OU1RBTlRTJDIuWG4gKiBsYWJfeHl6KHgpO1xuICAgICAgICB6ID0gTEFCX0NPTlNUQU5UUyQyLlpuICogbGFiX3h5eih6KTtcblxuICAgICAgICByID0geHl6X3JnYigzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIDAuNDk4NTMxNCAqIHopOyAgLy8gRDY1IC0+IHNSR0JcbiAgICAgICAgZyA9IHh5el9yZ2IoLTAuOTY5MjY2MCAqIHggKyAxLjg3NjAxMDggKiB5ICsgMC4wNDE1NTYwICogeik7XG4gICAgICAgIGJfID0geHl6X3JnYigwLjA1NTY0MzQgKiB4IC0gMC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopO1xuXG4gICAgICAgIHJldHVybiBbcixnLGJfLGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIHh5el9yZ2IgPSBmdW5jdGlvbiAocikge1xuICAgICAgICByZXR1cm4gMjU1ICogKHIgPD0gMC4wMDMwNCA/IDEyLjkyICogciA6IDEuMDU1ICogcG93JDkociwgMSAvIDIuNCkgLSAwLjA1NSlcbiAgICB9O1xuXG4gICAgdmFyIGxhYl94eXogPSBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdCA+IExBQl9DT05TVEFOVFMkMi50MSA/IHQgKiB0ICogdCA6IExBQl9DT05TVEFOVFMkMi50MiAqICh0IC0gTEFCX0NPTlNUQU5UUyQyLnQwKVxuICAgIH07XG5cbiAgICB2YXIgbGFiMnJnYl8xID0gbGFiMnJnYiQxO1xuXG4gICAgdmFyIHVucGFjayRmID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJGUgPSB1dGlscy50eXBlO1xuICAgIHZhciBjaHJvbWEkYiA9IGNocm9tYV8xO1xuICAgIHZhciBDb2xvciR1ID0gQ29sb3JfMTtcbiAgICB2YXIgaW5wdXQkNyA9IGlucHV0JGg7XG5cbiAgICB2YXIgcmdiMmxhYiQxID0gcmdiMmxhYl8xO1xuXG4gICAgQ29sb3IkdS5wcm90b3R5cGUubGFiID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IybGFiJDEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hJGIubGFiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvciR1LCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnbGFiJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dCQ3LmZvcm1hdC5sYWIgPSBsYWIycmdiXzE7XG5cbiAgICBpbnB1dCQ3LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDIsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJGYoYXJncywgJ2xhYicpO1xuICAgICAgICAgICAgaWYgKHR5cGUkZShhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbGFiJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHVucGFjayRlID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBSQUQyREVHID0gdXRpbHMuUkFEMkRFRztcbiAgICB2YXIgc3FydCQzID0gTWF0aC5zcXJ0O1xuICAgIHZhciBhdGFuMiQyID0gTWF0aC5hdGFuMjtcbiAgICB2YXIgcm91bmQkMiA9IE1hdGgucm91bmQ7XG5cbiAgICB2YXIgbGFiMmxjaCQyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skZShhcmdzLCAnbGFiJyk7XG4gICAgICAgIHZhciBsID0gcmVmWzBdO1xuICAgICAgICB2YXIgYSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHZhciBjID0gc3FydCQzKGEgKiBhICsgYiAqIGIpO1xuICAgICAgICB2YXIgaCA9IChhdGFuMiQyKGIsIGEpICogUkFEMkRFRyArIDM2MCkgJSAzNjA7XG4gICAgICAgIGlmIChyb3VuZCQyKGMqMTAwMDApID09PSAwKSB7IGggPSBOdW1iZXIuTmFOOyB9XG4gICAgICAgIHJldHVybiBbbCwgYywgaF07XG4gICAgfTtcblxuICAgIHZhciBsYWIybGNoXzEgPSBsYWIybGNoJDI7XG5cbiAgICB2YXIgdW5wYWNrJGQgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHJnYjJsYWIgPSByZ2IybGFiXzE7XG4gICAgdmFyIGxhYjJsY2gkMSA9IGxhYjJsY2hfMTtcblxuICAgIHZhciByZ2IybGNoJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRkKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gcmdiMmxhYihyLGcsYik7XG4gICAgICAgIHZhciBsID0gcmVmJDFbMF07XG4gICAgICAgIHZhciBhID0gcmVmJDFbMV07XG4gICAgICAgIHZhciBiXyA9IHJlZiQxWzJdO1xuICAgICAgICByZXR1cm4gbGFiMmxjaCQxKGwsYSxiXyk7XG4gICAgfTtcblxuICAgIHZhciByZ2IybGNoXzEgPSByZ2IybGNoJDE7XG5cbiAgICB2YXIgdW5wYWNrJGMgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIERFRzJSQUQgPSB1dGlscy5ERUcyUkFEO1xuICAgIHZhciBzaW4kMyA9IE1hdGguc2luO1xuICAgIHZhciBjb3MkMyA9IE1hdGguY29zO1xuXG4gICAgdmFyIGxjaDJsYWIkMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAvKlxuICAgICAgICBDb252ZXJ0IGZyb20gYSBxdWFsaXRhdGl2ZSBwYXJhbWV0ZXIgaCBhbmQgYSBxdWFudGl0YXRpdmUgcGFyYW1ldGVyIGwgdG8gYSAyNC1iaXQgcGl4ZWwuXG4gICAgICAgIFRoZXNlIGZvcm11bGFzIHdlcmUgaW52ZW50ZWQgYnkgRGF2aWQgRGFscnltcGxlIHRvIG9idGFpbiBtYXhpbXVtIGNvbnRyYXN0IHdpdGhvdXQgZ29pbmdcbiAgICAgICAgb3V0IG9mIGdhbXV0IGlmIHRoZSBwYXJhbWV0ZXJzIGFyZSBpbiB0aGUgcmFuZ2UgMC0xLlxuXG4gICAgICAgIEEgc2F0dXJhdGlvbiBtdWx0aXBsaWVyIHdhcyBhZGRlZCBieSBHcmVnb3IgQWlzY2hcbiAgICAgICAgKi9cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRjKGFyZ3MsICdsY2gnKTtcbiAgICAgICAgdmFyIGwgPSByZWZbMF07XG4gICAgICAgIHZhciBjID0gcmVmWzFdO1xuICAgICAgICB2YXIgaCA9IHJlZlsyXTtcbiAgICAgICAgaWYgKGlzTmFOKGgpKSB7IGggPSAwOyB9XG4gICAgICAgIGggPSBoICogREVHMlJBRDtcbiAgICAgICAgcmV0dXJuIFtsLCBjb3MkMyhoKSAqIGMsIHNpbiQzKGgpICogY11cbiAgICB9O1xuXG4gICAgdmFyIGxjaDJsYWJfMSA9IGxjaDJsYWIkMjtcblxuICAgIHZhciB1bnBhY2skYiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGNoMmxhYiQxID0gbGNoMmxhYl8xO1xuICAgIHZhciBsYWIycmdiID0gbGFiMnJnYl8xO1xuXG4gICAgdmFyIGxjaDJyZ2IkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICBhcmdzID0gdW5wYWNrJGIoYXJncywgJ2xjaCcpO1xuICAgICAgICB2YXIgbCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBjID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcmVmID0gbGNoMmxhYiQxIChsLGMsaCk7XG4gICAgICAgIHZhciBMID0gcmVmWzBdO1xuICAgICAgICB2YXIgYSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGJfID0gcmVmWzJdO1xuICAgICAgICB2YXIgcmVmJDEgPSBsYWIycmdiIChMLGEsYl8pO1xuICAgICAgICB2YXIgciA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZiQxWzJdO1xuICAgICAgICByZXR1cm4gW3IsIGcsIGIsIGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIGxjaDJyZ2JfMSA9IGxjaDJyZ2IkMTtcblxuICAgIHZhciB1bnBhY2skYSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGNoMnJnYiA9IGxjaDJyZ2JfMTtcblxuICAgIHZhciBoY2wycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciBoY2wgPSB1bnBhY2skYShhcmdzLCAnaGNsJykucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gbGNoMnJnYi5hcHBseSh2b2lkIDAsIGhjbCk7XG4gICAgfTtcblxuICAgIHZhciBoY2wycmdiXzEgPSBoY2wycmdiO1xuXG4gICAgdmFyIHVucGFjayQ5ID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJGQgPSB1dGlscy50eXBlO1xuICAgIHZhciBjaHJvbWEkYSA9IGNocm9tYV8xO1xuICAgIHZhciBDb2xvciR0ID0gQ29sb3JfMTtcbiAgICB2YXIgaW5wdXQkNiA9IGlucHV0JGg7XG5cbiAgICB2YXIgcmdiMmxjaCA9IHJnYjJsY2hfMTtcblxuICAgIENvbG9yJHQucHJvdG90eXBlLmxjaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmdiMmxjaCh0aGlzLl9yZ2IpOyB9O1xuICAgIENvbG9yJHQucHJvdG90eXBlLmhjbCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmdiMmxjaCh0aGlzLl9yZ2IpLnJldmVyc2UoKTsgfTtcblxuICAgIGNocm9tYSRhLmxjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkdCwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2xjaCddKSApKTtcbiAgICB9O1xuICAgIGNocm9tYSRhLmhjbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkdCwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2hjbCddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQkNi5mb3JtYXQubGNoID0gbGNoMnJnYl8xO1xuICAgIGlucHV0JDYuZm9ybWF0LmhjbCA9IGhjbDJyZ2JfMTtcblxuICAgIFsnbGNoJywnaGNsJ10uZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXR1cm4gaW5wdXQkNi5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayQ5KGFyZ3MsIG0pO1xuICAgICAgICAgICAgaWYgKHR5cGUkZChhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7IH0pO1xuXG4gICAgLyoqXG4gICAgXHRYMTEgY29sb3IgbmFtZXNcblxuICAgIFx0aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yXG4gICAgKi9cblxuICAgIHZhciB3M2N4MTEkMSA9IHtcbiAgICAgICAgYWxpY2VibHVlOiAnI2YwZjhmZicsXG4gICAgICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgICAgICBhcXVhOiAnIzAwZmZmZicsXG4gICAgICAgIGFxdWFtYXJpbmU6ICcjN2ZmZmQ0JyxcbiAgICAgICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICAgICAgYmVpZ2U6ICcjZjVmNWRjJyxcbiAgICAgICAgYmlzcXVlOiAnI2ZmZTRjNCcsXG4gICAgICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgICAgIGJsYW5jaGVkYWxtb25kOiAnI2ZmZWJjZCcsXG4gICAgICAgIGJsdWU6ICcjMDAwMGZmJyxcbiAgICAgICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgICAgICBicm93bjogJyNhNTJhMmEnLFxuICAgICAgICBidXJseXdvb2Q6ICcjZGViODg3JyxcbiAgICAgICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgICAgIGNoYXJ0cmV1c2U6ICcjN2ZmZjAwJyxcbiAgICAgICAgY2hvY29sYXRlOiAnI2QyNjkxZScsXG4gICAgICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgICAgIGNvcm5mbG93ZXI6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybnNpbGs6ICcjZmZmOGRjJyxcbiAgICAgICAgY3JpbXNvbjogJyNkYzE0M2MnLFxuICAgICAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgICAgIGRhcmtibHVlOiAnIzAwMDA4YicsXG4gICAgICAgIGRhcmtjeWFuOiAnIzAwOGI4YicsXG4gICAgICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICAgICAgZGFya2dyYXk6ICcjYTlhOWE5JyxcbiAgICAgICAgZGFya2dyZWVuOiAnIzAwNjQwMCcsXG4gICAgICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgICAgICBkYXJrbWFnZW50YTogJyM4YjAwOGInLFxuICAgICAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgICAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgICAgIGRhcmtvcmNoaWQ6ICcjOTkzMmNjJyxcbiAgICAgICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgICAgICBkYXJrc2FsbW9uOiAnI2U5OTY3YScsXG4gICAgICAgIGRhcmtzZWFncmVlbjogJyM4ZmJjOGYnLFxuICAgICAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgICAgIGRhcmtzbGF0ZWdyYXk6ICcjMmY0ZjRmJyxcbiAgICAgICAgZGFya3NsYXRlZ3JleTogJyMyZjRmNGYnLFxuICAgICAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgICAgIGRhcmt2aW9sZXQ6ICcjOTQwMGQzJyxcbiAgICAgICAgZGVlcHBpbms6ICcjZmYxNDkzJyxcbiAgICAgICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICAgICAgZGltZ3JheTogJyM2OTY5NjknLFxuICAgICAgICBkaW1ncmV5OiAnIzY5Njk2OScsXG4gICAgICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICAgICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgICAgIGZsb3JhbHdoaXRlOiAnI2ZmZmFmMCcsXG4gICAgICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgICAgIGZ1Y2hzaWE6ICcjZmYwMGZmJyxcbiAgICAgICAgZ2FpbnNib3JvOiAnI2RjZGNkYycsXG4gICAgICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICAgICAgZ29sZDogJyNmZmQ3MDAnLFxuICAgICAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICAgICAgZ3JheTogJyM4MDgwODAnLFxuICAgICAgICBncmVlbjogJyMwMDgwMDAnLFxuICAgICAgICBncmVlbnllbGxvdzogJyNhZGZmMmYnLFxuICAgICAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgICAgIGhvbmV5ZGV3OiAnI2YwZmZmMCcsXG4gICAgICAgIGhvdHBpbms6ICcjZmY2OWI0JyxcbiAgICAgICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgICAgIGluZGlnbzogJyM0YjAwODInLFxuICAgICAgICBpdm9yeTogJyNmZmZmZjAnLFxuICAgICAgICBraGFraTogJyNmMGU2OGMnLFxuICAgICAgICBsYXNlcmxlbW9uOiAnI2ZmZmY1NCcsXG4gICAgICAgIGxhdmVuZGVyOiAnI2U2ZTZmYScsXG4gICAgICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICAgICAgbGF3bmdyZWVuOiAnIzdjZmMwMCcsXG4gICAgICAgIGxlbW9uY2hpZmZvbjogJyNmZmZhY2QnLFxuICAgICAgICBsaWdodGJsdWU6ICcjYWRkOGU2JyxcbiAgICAgICAgbGlnaHRjb3JhbDogJyNmMDgwODAnLFxuICAgICAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICAgICAgbGlnaHRnb2xkZW5yb2Q6ICcjZmFmYWQyJyxcbiAgICAgICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6ICcjZmFmYWQyJyxcbiAgICAgICAgbGlnaHRncmF5OiAnI2QzZDNkMycsXG4gICAgICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICAgICAgbGlnaHRncmV5OiAnI2QzZDNkMycsXG4gICAgICAgIGxpZ2h0cGluazogJyNmZmI2YzEnLFxuICAgICAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgICAgICBsaWdodHNlYWdyZWVuOiAnIzIwYjJhYScsXG4gICAgICAgIGxpZ2h0c2t5Ymx1ZTogJyM4N2NlZmEnLFxuICAgICAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHNsYXRlZ3JleTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHN0ZWVsYmx1ZTogJyNiMGM0ZGUnLFxuICAgICAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgICAgICBsaW1lOiAnIzAwZmYwMCcsXG4gICAgICAgIGxpbWVncmVlbjogJyMzMmNkMzInLFxuICAgICAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgICAgICBtYWdlbnRhOiAnI2ZmMDBmZicsXG4gICAgICAgIG1hcm9vbjogJyM4MDAwMDAnLFxuICAgICAgICBtYXJvb24yOiAnIzdmMDAwMCcsXG4gICAgICAgIG1hcm9vbjM6ICcjYjAzMDYwJyxcbiAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgICAgICBtZWRpdW1ibHVlOiAnIzAwMDBjZCcsXG4gICAgICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgICAgICBtZWRpdW1wdXJwbGU6ICcjOTM3MGRiJyxcbiAgICAgICAgbWVkaXVtc2VhZ3JlZW46ICcjM2NiMzcxJyxcbiAgICAgICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAnIzAwZmE5YScsXG4gICAgICAgIG1lZGl1bXR1cnF1b2lzZTogJyM0OGQxY2MnLFxuICAgICAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICAgICAgbWlkbmlnaHRibHVlOiAnIzE5MTk3MCcsXG4gICAgICAgIG1pbnRjcmVhbTogJyNmNWZmZmEnLFxuICAgICAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICAgICAgbW9jY2FzaW46ICcjZmZlNGI1JyxcbiAgICAgICAgbmF2YWpvd2hpdGU6ICcjZmZkZWFkJyxcbiAgICAgICAgbmF2eTogJyMwMDAwODAnLFxuICAgICAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgICAgIG9saXZlOiAnIzgwODAwMCcsXG4gICAgICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgICAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICAgICAgb3JhbmdlcmVkOiAnI2ZmNDUwMCcsXG4gICAgICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgICAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgICAgIHBhbGVncmVlbjogJyM5OGZiOTgnLFxuICAgICAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgICAgIHBhbGV2aW9sZXRyZWQ6ICcjZGI3MDkzJyxcbiAgICAgICAgcGFwYXlhd2hpcDogJyNmZmVmZDUnLFxuICAgICAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICAgICAgcGVydTogJyNjZDg1M2YnLFxuICAgICAgICBwaW5rOiAnI2ZmYzBjYicsXG4gICAgICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICAgICAgcG93ZGVyYmx1ZTogJyNiMGUwZTYnLFxuICAgICAgICBwdXJwbGU6ICcjODAwMDgwJyxcbiAgICAgICAgcHVycGxlMjogJyM3ZjAwN2YnLFxuICAgICAgICBwdXJwbGUzOiAnI2EwMjBmMCcsXG4gICAgICAgIHJlYmVjY2FwdXJwbGU6ICcjNjYzMzk5JyxcbiAgICAgICAgcmVkOiAnI2ZmMDAwMCcsXG4gICAgICAgIHJvc3licm93bjogJyNiYzhmOGYnLFxuICAgICAgICByb3lhbGJsdWU6ICcjNDE2OWUxJyxcbiAgICAgICAgc2FkZGxlYnJvd246ICcjOGI0NTEzJyxcbiAgICAgICAgc2FsbW9uOiAnI2ZhODA3MicsXG4gICAgICAgIHNhbmR5YnJvd246ICcjZjRhNDYwJyxcbiAgICAgICAgc2VhZ3JlZW46ICcjMmU4YjU3JyxcbiAgICAgICAgc2Vhc2hlbGw6ICcjZmZmNWVlJyxcbiAgICAgICAgc2llbm5hOiAnI2EwNTIyZCcsXG4gICAgICAgIHNpbHZlcjogJyNjMGMwYzAnLFxuICAgICAgICBza3libHVlOiAnIzg3Y2VlYicsXG4gICAgICAgIHNsYXRlYmx1ZTogJyM2YTVhY2QnLFxuICAgICAgICBzbGF0ZWdyYXk6ICcjNzA4MDkwJyxcbiAgICAgICAgc2xhdGVncmV5OiAnIzcwODA5MCcsXG4gICAgICAgIHNub3c6ICcjZmZmYWZhJyxcbiAgICAgICAgc3ByaW5nZ3JlZW46ICcjMDBmZjdmJyxcbiAgICAgICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgICAgIHRhbjogJyNkMmI0OGMnLFxuICAgICAgICB0ZWFsOiAnIzAwODA4MCcsXG4gICAgICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICAgICAgdG9tYXRvOiAnI2ZmNjM0NycsXG4gICAgICAgIHR1cnF1b2lzZTogJyM0MGUwZDAnLFxuICAgICAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICAgICAgd2hlYXQ6ICcjZjVkZWIzJyxcbiAgICAgICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICAgICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgICAgICB5ZWxsb3c6ICcjZmZmZjAwJyxcbiAgICAgICAgeWVsbG93Z3JlZW46ICcjOWFjZDMyJ1xuICAgIH07XG5cbiAgICB2YXIgdzNjeDExXzEgPSB3M2N4MTEkMTtcblxuICAgIHZhciBDb2xvciRzID0gQ29sb3JfMTtcbiAgICB2YXIgaW5wdXQkNSA9IGlucHV0JGg7XG4gICAgdmFyIHR5cGUkYyA9IHV0aWxzLnR5cGU7XG5cbiAgICB2YXIgdzNjeDExID0gdzNjeDExXzE7XG4gICAgdmFyIGhleDJyZ2IgPSBoZXgycmdiXzE7XG4gICAgdmFyIHJnYjJoZXggPSByZ2IyaGV4XzE7XG5cbiAgICBDb2xvciRzLnByb3RvdHlwZS5uYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZXggPSByZ2IyaGV4KHRoaXMuX3JnYiwgJ3JnYicpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IE9iamVjdC5rZXlzKHczY3gxMSk7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgIGlmICh3M2N4MTFbbl0gPT09IGhleCkgeyByZXR1cm4gbi50b0xvd2VyQ2FzZSgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleDtcbiAgICB9O1xuXG4gICAgaW5wdXQkNS5mb3JtYXQubmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodzNjeDExW25hbWVdKSB7IHJldHVybiBoZXgycmdiKHczY3gxMVtuYW1lXSk7IH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGNvbG9yIG5hbWU6ICcrbmFtZSk7XG4gICAgfTtcblxuICAgIGlucHV0JDUuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogNSxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICAgIHZhciByZXN0ID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSByZXN0WyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3QubGVuZ3RoICYmIHR5cGUkYyhoKSA9PT0gJ3N0cmluZycgJiYgdzNjeDExW2gudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25hbWVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHVucGFjayQ4ID0gdXRpbHMudW5wYWNrO1xuXG4gICAgdmFyIHJnYjJudW0kMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJDgoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICByZXR1cm4gKHIgPDwgMTYpICsgKGcgPDwgOCkgKyBiO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMm51bV8xID0gcmdiMm51bSQxO1xuXG4gICAgdmFyIHR5cGUkYiA9IHV0aWxzLnR5cGU7XG5cbiAgICB2YXIgbnVtMnJnYiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgaWYgKHR5cGUkYihudW0pID09IFwibnVtYmVyXCIgJiYgbnVtID49IDAgJiYgbnVtIDw9IDB4RkZGRkZGKSB7XG4gICAgICAgICAgICB2YXIgciA9IG51bSA+PiAxNjtcbiAgICAgICAgICAgIHZhciBnID0gKG51bSA+PiA4KSAmIDB4RkY7XG4gICAgICAgICAgICB2YXIgYiA9IG51bSAmIDB4RkY7XG4gICAgICAgICAgICByZXR1cm4gW3IsZyxiLDFdO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gbnVtIGNvbG9yOiBcIitudW0pO1xuICAgIH07XG5cbiAgICB2YXIgbnVtMnJnYl8xID0gbnVtMnJnYjtcblxuICAgIHZhciBjaHJvbWEkOSA9IGNocm9tYV8xO1xuICAgIHZhciBDb2xvciRyID0gQ29sb3JfMTtcbiAgICB2YXIgaW5wdXQkNCA9IGlucHV0JGg7XG4gICAgdmFyIHR5cGUkYSA9IHV0aWxzLnR5cGU7XG5cbiAgICB2YXIgcmdiMm51bSA9IHJnYjJudW1fMTtcblxuICAgIENvbG9yJHIucHJvdG90eXBlLm51bSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmdiMm51bSh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWEkOS5udW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yJHIsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydudW0nXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0JDQuZm9ybWF0Lm51bSA9IG51bTJyZ2JfMTtcblxuICAgIGlucHV0JDQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogNSxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlJGEoYXJnc1swXSkgPT09ICdudW1iZXInICYmIGFyZ3NbMF0gPj0gMCAmJiBhcmdzWzBdIDw9IDB4RkZGRkZGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdudW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgY2hyb21hJDggPSBjaHJvbWFfMTtcbiAgICB2YXIgQ29sb3IkcSA9IENvbG9yXzE7XG4gICAgdmFyIGlucHV0JDMgPSBpbnB1dCRoO1xuICAgIHZhciB1bnBhY2skNyA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSQ5ID0gdXRpbHMudHlwZTtcbiAgICB2YXIgcm91bmQkMSA9IE1hdGgucm91bmQ7XG5cbiAgICBDb2xvciRxLnByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbihybmQpIHtcbiAgICAgICAgaWYgKCBybmQgPT09IHZvaWQgMCApIHJuZD10cnVlO1xuXG4gICAgICAgIGlmIChybmQgPT09IGZhbHNlKSB7IHJldHVybiB0aGlzLl9yZ2Iuc2xpY2UoMCwzKTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmdiLnNsaWNlKDAsMykubWFwKHJvdW5kJDEpO1xuICAgIH07XG5cbiAgICBDb2xvciRxLnByb3RvdHlwZS5yZ2JhID0gZnVuY3Rpb24ocm5kKSB7XG4gICAgICAgIGlmICggcm5kID09PSB2b2lkIDAgKSBybmQ9dHJ1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fcmdiLnNsaWNlKDAsNCkubWFwKGZ1bmN0aW9uICh2LGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpPDMgPyAocm5kID09PSBmYWxzZSA/IHYgOiByb3VuZCQxKHYpKSA6IHY7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjaHJvbWEkOC5yZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yJHEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydyZ2InXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0JDMuZm9ybWF0LnJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmdiYSA9IHVucGFjayQ3KGFyZ3MsICdyZ2JhJyk7XG4gICAgICAgIGlmIChyZ2JhWzNdID09PSB1bmRlZmluZWQpIHsgcmdiYVszXSA9IDE7IH1cbiAgICAgICAgcmV0dXJuIHJnYmE7XG4gICAgfTtcblxuICAgIGlucHV0JDMuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMyxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skNyhhcmdzLCAncmdiYScpO1xuICAgICAgICAgICAgaWYgKHR5cGUkOShhcmdzKSA9PT0gJ2FycmF5JyAmJiAoYXJncy5sZW5ndGggPT09IDMgfHxcbiAgICAgICAgICAgICAgICBhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlJDkoYXJnc1szXSkgPT0gJ251bWJlcicgJiYgYXJnc1szXSA+PSAwICYmIGFyZ3NbM10gPD0gMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JnYic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qXG4gICAgICogQmFzZWQgb24gaW1wbGVtZW50YXRpb24gYnkgTmVpbCBCYXJ0bGV0dFxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZWlsYmFydGxldHQvY29sb3ItdGVtcGVyYXR1cmVcbiAgICAgKi9cblxuICAgIHZhciBsb2ckMSA9IE1hdGgubG9nO1xuXG4gICAgdmFyIHRlbXBlcmF0dXJlMnJnYiQxID0gZnVuY3Rpb24gKGtlbHZpbikge1xuICAgICAgICB2YXIgdGVtcCA9IGtlbHZpbiAvIDEwMDtcbiAgICAgICAgdmFyIHIsZyxiO1xuICAgICAgICBpZiAodGVtcCA8IDY2KSB7XG4gICAgICAgICAgICByID0gMjU1O1xuICAgICAgICAgICAgZyA9IHRlbXAgPCA2ID8gMCA6IC0xNTUuMjU0ODU1NjI3MDkxNzkgLSAwLjQ0NTk2OTUwNDY5NTc5MTMzICogKGcgPSB0ZW1wLTIpICsgMTA0LjQ5MjE2MTk5MzkzODg4ICogbG9nJDEoZyk7XG4gICAgICAgICAgICBiID0gdGVtcCA8IDIwID8gMCA6IC0yNTQuNzY5MzUxODQxMjA5MDIgKyAwLjgyNzQwOTYwNjQwMDczOTUgKiAoYiA9IHRlbXAtMTApICsgMTE1LjY3OTk0NDAxMDY2MTQ3ICogbG9nJDEoYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByID0gMzUxLjk3NjkwNTY2ODA1NjkzICsgMC4xMTQyMDY0NTM3ODQxNjUgKiAociA9IHRlbXAtNTUpIC0gNDAuMjUzNjYzMDkzMzIxMjcgKiBsb2ckMShyKTtcbiAgICAgICAgICAgIGcgPSAzMjUuNDQ5NDEyNTcxMTk3NCArIDAuMDc5NDM0NTY1MzY2NjIzNDIgKiAoZyA9IHRlbXAtNTApIC0gMjguMDg1Mjk2MzUwNzk1NyAqIGxvZyQxKGcpO1xuICAgICAgICAgICAgYiA9IDI1NTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsZyxiLDFdO1xuICAgIH07XG5cbiAgICB2YXIgdGVtcGVyYXR1cmUycmdiXzEgPSB0ZW1wZXJhdHVyZTJyZ2IkMTtcblxuICAgIC8qXG4gICAgICogQmFzZWQgb24gaW1wbGVtZW50YXRpb24gYnkgTmVpbCBCYXJ0bGV0dFxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZWlsYmFydGxldHQvY29sb3ItdGVtcGVyYXR1cmVcbiAgICAgKiovXG5cbiAgICB2YXIgdGVtcGVyYXR1cmUycmdiID0gdGVtcGVyYXR1cmUycmdiXzE7XG4gICAgdmFyIHVucGFjayQ2ID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQ7XG5cbiAgICB2YXIgcmdiMnRlbXBlcmF0dXJlJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJnYiA9IHVucGFjayQ2KGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZ2JbMF0sIGIgPSByZ2JbMl07XG4gICAgICAgIHZhciBtaW5UZW1wID0gMTAwMDtcbiAgICAgICAgdmFyIG1heFRlbXAgPSA0MDAwMDtcbiAgICAgICAgdmFyIGVwcyA9IDAuNDtcbiAgICAgICAgdmFyIHRlbXA7XG4gICAgICAgIHdoaWxlIChtYXhUZW1wIC0gbWluVGVtcCA+IGVwcykge1xuICAgICAgICAgICAgdGVtcCA9IChtYXhUZW1wICsgbWluVGVtcCkgKiAwLjU7XG4gICAgICAgICAgICB2YXIgcmdiJDEgPSB0ZW1wZXJhdHVyZTJyZ2IodGVtcCk7XG4gICAgICAgICAgICBpZiAoKHJnYiQxWzJdIC8gcmdiJDFbMF0pID49IChiIC8gcikpIHtcbiAgICAgICAgICAgICAgICBtYXhUZW1wID0gdGVtcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluVGVtcCA9IHRlbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdW5kKHRlbXApO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMnRlbXBlcmF0dXJlXzEgPSByZ2IydGVtcGVyYXR1cmUkMTtcblxuICAgIHZhciBjaHJvbWEkNyA9IGNocm9tYV8xO1xuICAgIHZhciBDb2xvciRwID0gQ29sb3JfMTtcbiAgICB2YXIgaW5wdXQkMiA9IGlucHV0JGg7XG5cbiAgICB2YXIgcmdiMnRlbXBlcmF0dXJlID0gcmdiMnRlbXBlcmF0dXJlXzE7XG5cbiAgICBDb2xvciRwLnByb3RvdHlwZS50ZW1wID1cbiAgICBDb2xvciRwLnByb3RvdHlwZS5rZWx2aW4gPVxuICAgIENvbG9yJHAucHJvdG90eXBlLnRlbXBlcmF0dXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IydGVtcGVyYXR1cmUodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hJDcudGVtcCA9XG4gICAgY2hyb21hJDcua2VsdmluID1cbiAgICBjaHJvbWEkNy50ZW1wZXJhdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkcCwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ3RlbXAnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0JDIuZm9ybWF0LnRlbXAgPVxuICAgIGlucHV0JDIuZm9ybWF0LmtlbHZpbiA9XG4gICAgaW5wdXQkMi5mb3JtYXQudGVtcGVyYXR1cmUgPSB0ZW1wZXJhdHVyZTJyZ2JfMTtcblxuICAgIHZhciB1bnBhY2skNSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgY2JydCA9IE1hdGguY2JydDtcbiAgICB2YXIgcG93JDggPSBNYXRoLnBvdztcbiAgICB2YXIgc2lnbiQxID0gTWF0aC5zaWduO1xuXG4gICAgdmFyIHJnYjJva2xhYiQyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIC8vIE9LTGFiIGNvbG9yIHNwYWNlIGltcGxlbWVudGF0aW9uIHRha2VuIGZyb21cbiAgICAgICAgLy8gaHR0cHM6Ly9ib3R0b3Nzb24uZ2l0aHViLmlvL3Bvc3RzL29rbGFiL1xuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJDUoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICB2YXIgcmVmJDEgPSBbcmdiMmxyZ2IociAvIDI1NSksIHJnYjJscmdiKGcgLyAyNTUpLCByZ2IybHJnYihiIC8gMjU1KV07XG4gICAgICAgIHZhciBsciA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgbGcgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIGxiID0gcmVmJDFbMl07XG4gICAgICAgIHZhciBsID0gY2JydCgwLjQxMjIyMTQ3MDggKiBsciArIDAuNTM2MzMyNTM2MyAqIGxnICsgMC4wNTE0NDU5OTI5ICogbGIpO1xuICAgICAgICB2YXIgbSA9IGNicnQoMC4yMTE5MDM0OTgyICogbHIgKyAwLjY4MDY5OTU0NTEgKiBsZyArIDAuMTA3Mzk2OTU2NiAqIGxiKTtcbiAgICAgICAgdmFyIHMgPSBjYnJ0KDAuMDg4MzAyNDYxOSAqIGxyICsgMC4yODE3MTg4Mzc2ICogbGcgKyAwLjYyOTk3ODcwMDUgKiBsYik7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIDAuMjEwNDU0MjU1MyAqIGwgKyAwLjc5MzYxNzc4NSAqIG0gLSAwLjAwNDA3MjA0NjggKiBzLFxuICAgICAgICAgICAgMS45Nzc5OTg0OTUxICogbCAtIDIuNDI4NTkyMjA1ICogbSArIDAuNDUwNTkzNzA5OSAqIHMsXG4gICAgICAgICAgICAwLjAyNTkwNDAzNzEgKiBsICsgMC43ODI3NzE3NjYyICogbSAtIDAuODA4Njc1NzY2ICogc1xuICAgICAgICBdO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMm9rbGFiXzEgPSByZ2Iyb2tsYWIkMjtcblxuICAgIGZ1bmN0aW9uIHJnYjJscmdiKGMpIHtcbiAgICAgICAgdmFyIGFicyA9IE1hdGguYWJzKGMpO1xuICAgICAgICBpZiAoYWJzIDwgMC4wNDA0NSkge1xuICAgICAgICAgICAgcmV0dXJuIGMgLyAxMi45MjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHNpZ24kMShjKSB8fCAxKSAqIHBvdyQ4KChhYnMgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICB9XG5cbiAgICB2YXIgdW5wYWNrJDQgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHBvdyQ3ID0gTWF0aC5wb3c7XG4gICAgdmFyIHNpZ24gPSBNYXRoLnNpZ247XG5cbiAgICAvKlxuICAgICAqIEwqIFswLi4xMDBdXG4gICAgICogYSBbLTEwMC4uMTAwXVxuICAgICAqIGIgWy0xMDAuLjEwMF1cbiAgICAgKi9cbiAgICB2YXIgb2tsYWIycmdiJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayQ0KGFyZ3MsICdsYWInKTtcbiAgICAgICAgdmFyIEwgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgYSA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBiID0gYXJnc1syXTtcblxuICAgICAgICB2YXIgbCA9IHBvdyQ3KEwgKyAwLjM5NjMzNzc3NzQgKiBhICsgMC4yMTU4MDM3NTczICogYiwgMyk7XG4gICAgICAgIHZhciBtID0gcG93JDcoTCAtIDAuMTA1NTYxMzQ1OCAqIGEgLSAwLjA2Mzg1NDE3MjggKiBiLCAzKTtcbiAgICAgICAgdmFyIHMgPSBwb3ckNyhMIC0gMC4wODk0ODQxNzc1ICogYSAtIDEuMjkxNDg1NTQ4ICogYiwgMyk7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIDI1NSAqIGxyZ2IycmdiKCs0LjA3Njc0MTY2MjEgKiBsIC0gMy4zMDc3MTE1OTEzICogbSArIDAuMjMwOTY5OTI5MiAqIHMpLFxuICAgICAgICAgICAgMjU1ICogbHJnYjJyZ2IoLTEuMjY4NDM4MDA0NiAqIGwgKyAyLjYwOTc1NzQwMTEgKiBtIC0gMC4zNDEzMTkzOTY1ICogcyksXG4gICAgICAgICAgICAyNTUgKiBscmdiMnJnYigtMC4wMDQxOTYwODYzICogbCAtIDAuNzAzNDE4NjE0NyAqIG0gKyAxLjcwNzYxNDcwMSAqIHMpLFxuICAgICAgICAgICAgYXJncy5sZW5ndGggPiAzID8gYXJnc1szXSA6IDFcbiAgICAgICAgXTtcbiAgICB9O1xuXG4gICAgdmFyIG9rbGFiMnJnYl8xID0gb2tsYWIycmdiJDE7XG5cbiAgICBmdW5jdGlvbiBscmdiMnJnYihjKSB7XG4gICAgICAgIHZhciBhYnMgPSBNYXRoLmFicyhjKTtcbiAgICAgICAgaWYgKGFicyA+IDAuMDAzMTMwOCkge1xuICAgICAgICAgICAgcmV0dXJuIChzaWduKGMpIHx8IDEpICogKDEuMDU1ICogcG93JDcoYWJzLCAxIC8gMi40KSAtIDAuMDU1KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYyAqIDEyLjkyO1xuICAgIH1cblxuICAgIHZhciB1bnBhY2skMyA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSQ4ID0gdXRpbHMudHlwZTtcbiAgICB2YXIgY2hyb21hJDYgPSBjaHJvbWFfMTtcbiAgICB2YXIgQ29sb3IkbyA9IENvbG9yXzE7XG4gICAgdmFyIGlucHV0JDEgPSBpbnB1dCRoO1xuXG4gICAgdmFyIHJnYjJva2xhYiQxID0gcmdiMm9rbGFiXzE7XG5cbiAgICBDb2xvciRvLnByb3RvdHlwZS5va2xhYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJva2xhYiQxKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYSQ2Lm9rbGFiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvciRvLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnb2tsYWInXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0JDEuZm9ybWF0Lm9rbGFiID0gb2tsYWIycmdiXzE7XG5cbiAgICBpbnB1dCQxLmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDMsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJDMoYXJncywgJ29rbGFiJyk7XG4gICAgICAgICAgICBpZiAodHlwZSQ4KGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdva2xhYic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skMiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgcmdiMm9rbGFiID0gcmdiMm9rbGFiXzE7XG4gICAgdmFyIGxhYjJsY2ggPSBsYWIybGNoXzE7XG5cbiAgICB2YXIgcmdiMm9rbGNoJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayQyKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gcmdiMm9rbGFiKHIsIGcsIGIpO1xuICAgICAgICB2YXIgbCA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgYSA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYl8gPSByZWYkMVsyXTtcbiAgICAgICAgcmV0dXJuIGxhYjJsY2gobCwgYSwgYl8pO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMm9rbGNoXzEgPSByZ2Iyb2tsY2gkMTtcblxuICAgIHZhciB1bnBhY2skMSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGNoMmxhYiA9IGxjaDJsYWJfMTtcbiAgICB2YXIgb2tsYWIycmdiID0gb2tsYWIycmdiXzE7XG5cbiAgICB2YXIgb2tsY2gycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIGFyZ3MgPSB1bnBhY2skMShhcmdzLCAnbGNoJyk7XG4gICAgICAgIHZhciBsID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGMgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgaCA9IGFyZ3NbMl07XG4gICAgICAgIHZhciByZWYgPSBsY2gybGFiKGwsIGMsIGgpO1xuICAgICAgICB2YXIgTCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGEgPSByZWZbMV07XG4gICAgICAgIHZhciBiXyA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gb2tsYWIycmdiKEwsIGEsIGJfKTtcbiAgICAgICAgdmFyIHIgPSByZWYkMVswXTtcbiAgICAgICAgdmFyIGcgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIGIgPSByZWYkMVsyXTtcbiAgICAgICAgcmV0dXJuIFtyLCBnLCBiLCBhcmdzLmxlbmd0aCA+IDMgPyBhcmdzWzNdIDogMV07XG4gICAgfTtcblxuICAgIHZhciBva2xjaDJyZ2JfMSA9IG9rbGNoMnJnYjtcblxuICAgIHZhciB1bnBhY2sgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkNyA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIGNocm9tYSQ1ID0gY2hyb21hXzE7XG4gICAgdmFyIENvbG9yJG4gPSBDb2xvcl8xO1xuICAgIHZhciBpbnB1dCA9IGlucHV0JGg7XG5cbiAgICB2YXIgcmdiMm9rbGNoID0gcmdiMm9rbGNoXzE7XG5cbiAgICBDb2xvciRuLnByb3RvdHlwZS5va2xjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJva2xjaCh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWEkNS5va2xjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3IkbiwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ29rbGNoJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQub2tsY2ggPSBva2xjaDJyZ2JfMTtcblxuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDMsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrKGFyZ3MsICdva2xjaCcpO1xuICAgICAgICAgICAgaWYgKHR5cGUkNyhhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnb2tsY2gnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgQ29sb3IkbSA9IENvbG9yXzE7XG4gICAgdmFyIHR5cGUkNiA9IHV0aWxzLnR5cGU7XG5cbiAgICBDb2xvciRtLnByb3RvdHlwZS5hbHBoYSA9IGZ1bmN0aW9uKGEsIG11dGF0ZSkge1xuICAgICAgICBpZiAoIG11dGF0ZSA9PT0gdm9pZCAwICkgbXV0YXRlPWZhbHNlO1xuXG4gICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQgJiYgdHlwZSQ2KGEpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKG11dGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JnYlszXSA9IGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yJG0oW3RoaXMuX3JnYlswXSwgdGhpcy5fcmdiWzFdLCB0aGlzLl9yZ2JbMl0sIGFdLCAncmdiJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JnYlszXTtcbiAgICB9O1xuXG4gICAgdmFyIENvbG9yJGwgPSBDb2xvcl8xO1xuXG4gICAgQ29sb3IkbC5wcm90b3R5cGUuY2xpcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmdiLl9jbGlwcGVkIHx8IGZhbHNlO1xuICAgIH07XG5cbiAgICB2YXIgQ29sb3IkayA9IENvbG9yXzE7XG4gICAgdmFyIExBQl9DT05TVEFOVFMkMSA9IGxhYkNvbnN0YW50cztcblxuICAgIENvbG9yJGsucHJvdG90eXBlLmRhcmtlbiA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgIFx0aWYgKCBhbW91bnQgPT09IHZvaWQgMCApIGFtb3VudD0xO1xuXG4gICAgXHR2YXIgbWUgPSB0aGlzO1xuICAgIFx0dmFyIGxhYiA9IG1lLmxhYigpO1xuICAgIFx0bGFiWzBdIC09IExBQl9DT05TVEFOVFMkMS5LbiAqIGFtb3VudDtcbiAgICBcdHJldHVybiBuZXcgQ29sb3IkayhsYWIsICdsYWInKS5hbHBoYShtZS5hbHBoYSgpLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgQ29sb3Ikay5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICBcdGlmICggYW1vdW50ID09PSB2b2lkIDAgKSBhbW91bnQ9MTtcblxuICAgIFx0cmV0dXJuIHRoaXMuZGFya2VuKC1hbW91bnQpO1xuICAgIH07XG5cbiAgICBDb2xvciRrLnByb3RvdHlwZS5kYXJrZXIgPSBDb2xvciRrLnByb3RvdHlwZS5kYXJrZW47XG4gICAgQ29sb3Ikay5wcm90b3R5cGUuYnJpZ2h0ZXIgPSBDb2xvciRrLnByb3RvdHlwZS5icmlnaHRlbjtcblxuICAgIHZhciBDb2xvciRqID0gQ29sb3JfMTtcblxuICAgIENvbG9yJGoucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChtYykge1xuICAgICAgICB2YXIgcmVmID0gbWMuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIG1vZGUgPSByZWZbMF07XG4gICAgICAgIHZhciBjaGFubmVsID0gcmVmWzFdO1xuICAgICAgICB2YXIgc3JjID0gdGhpc1ttb2RlXSgpO1xuICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgICAgdmFyIGkgPSBtb2RlLmluZGV4T2YoY2hhbm5lbCkgLSAobW9kZS5zdWJzdHIoMCwgMikgPT09ICdvaycgPyAyIDogMCk7XG4gICAgICAgICAgICBpZiAoaSA+IC0xKSB7IHJldHVybiBzcmNbaV07IH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJ1bmtub3duIGNoYW5uZWwgXCIgKyBjaGFubmVsICsgXCIgaW4gbW9kZSBcIiArIG1vZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIENvbG9yJGkgPSBDb2xvcl8xO1xuICAgIHZhciB0eXBlJDUgPSB1dGlscy50eXBlO1xuICAgIHZhciBwb3ckNiA9IE1hdGgucG93O1xuXG4gICAgdmFyIEVQUyA9IDFlLTc7XG4gICAgdmFyIE1BWF9JVEVSID0gMjA7XG5cbiAgICBDb2xvciRpLnByb3RvdHlwZS5sdW1pbmFuY2UgPSBmdW5jdGlvbihsdW0pIHtcbiAgICAgICAgaWYgKGx1bSAhPT0gdW5kZWZpbmVkICYmIHR5cGUkNShsdW0pID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGx1bSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBwdXJlIGJsYWNrXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvciRpKFswLDAsMCx0aGlzLl9yZ2JbM11dLCAncmdiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobHVtID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHB1cmUgd2hpdGVcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yJGkoWzI1NSwyNTUsMjU1LHRoaXMuX3JnYlszXV0sICdyZ2InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgbmV3IGNvbG9yIHVzaW5nLi4uXG4gICAgICAgICAgICB2YXIgY3VyX2x1bSA9IHRoaXMubHVtaW5hbmNlKCk7XG4gICAgICAgICAgICB2YXIgbW9kZSA9ICdyZ2InO1xuICAgICAgICAgICAgdmFyIG1heF9pdGVyID0gTUFYX0lURVI7XG5cbiAgICAgICAgICAgIHZhciB0ZXN0ID0gZnVuY3Rpb24gKGxvdywgaGlnaCkge1xuICAgICAgICAgICAgICAgIHZhciBtaWQgPSBsb3cuaW50ZXJwb2xhdGUoaGlnaCwgMC41LCBtb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgbG0gPSBtaWQubHVtaW5hbmNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGx1bSAtIGxtKSA8IEVQUyB8fCAhbWF4X2l0ZXItLSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSBlbm91Z2hcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxtID4gbHVtID8gdGVzdChsb3csIG1pZCkgOiB0ZXN0KG1pZCwgaGlnaCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgcmdiID0gKGN1cl9sdW0gPiBsdW0gPyB0ZXN0KG5ldyBDb2xvciRpKFswLDAsMF0pLCB0aGlzKSA6IHRlc3QodGhpcywgbmV3IENvbG9yJGkoWzI1NSwyNTUsMjU1XSkpKS5yZ2IoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IkaShyZ2IuY29uY2F0KCBbdGhpcy5fcmdiWzNdXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZ2IybHVtaW5hbmNlLmFwcGx5KHZvaWQgMCwgKHRoaXMuX3JnYikuc2xpY2UoMCwzKSk7XG4gICAgfTtcblxuXG4gICAgdmFyIHJnYjJsdW1pbmFuY2UgPSBmdW5jdGlvbiAocixnLGIpIHtcbiAgICAgICAgLy8gcmVsYXRpdmUgbHVtaW5hbmNlXG4gICAgICAgIC8vIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICAgIHIgPSBsdW1pbmFuY2VfeChyKTtcbiAgICAgICAgZyA9IGx1bWluYW5jZV94KGcpO1xuICAgICAgICBiID0gbHVtaW5hbmNlX3goYik7XG4gICAgICAgIHJldHVybiAwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGI7XG4gICAgfTtcblxuICAgIHZhciBsdW1pbmFuY2VfeCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHggLz0gMjU1O1xuICAgICAgICByZXR1cm4geCA8PSAwLjAzOTI4ID8geC8xMi45MiA6IHBvdyQ2KCh4KzAuMDU1KS8xLjA1NSwgMi40KTtcbiAgICB9O1xuXG4gICAgdmFyIGludGVycG9sYXRvciQxID0ge307XG5cbiAgICB2YXIgQ29sb3IkaCA9IENvbG9yXzE7XG4gICAgdmFyIHR5cGUkNCA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIGludGVycG9sYXRvciA9IGludGVycG9sYXRvciQxO1xuXG4gICAgdmFyIG1peCQxID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgaWYgKCBmID09PSB2b2lkIDAgKSBmPTAuNTtcbiAgICAgICAgdmFyIHJlc3QgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDM7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDMgXTtcblxuICAgICAgICB2YXIgbW9kZSA9IHJlc3RbMF0gfHwgJ2xyZ2InO1xuICAgICAgICBpZiAoIWludGVycG9sYXRvclttb2RlXSAmJiAhcmVzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGZhbGwgYmFjayB0byB0aGUgZmlyc3Qgc3VwcG9ydGVkIG1vZGVcbiAgICAgICAgICAgIG1vZGUgPSBPYmplY3Qua2V5cyhpbnRlcnBvbGF0b3IpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW50ZXJwb2xhdG9yW21vZGVdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiaW50ZXJwb2xhdGlvbiBtb2RlIFwiICsgbW9kZSArIFwiIGlzIG5vdCBkZWZpbmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSQ0KGNvbDEpICE9PSAnb2JqZWN0JykgeyBjb2wxID0gbmV3IENvbG9yJGgoY29sMSk7IH1cbiAgICAgICAgaWYgKHR5cGUkNChjb2wyKSAhPT0gJ29iamVjdCcpIHsgY29sMiA9IG5ldyBDb2xvciRoKGNvbDIpOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JbbW9kZV0oY29sMSwgY29sMiwgZilcbiAgICAgICAgICAgIC5hbHBoYShjb2wxLmFscGhhKCkgKyBmICogKGNvbDIuYWxwaGEoKSAtIGNvbDEuYWxwaGEoKSkpO1xuICAgIH07XG5cbiAgICB2YXIgQ29sb3IkZyA9IENvbG9yXzE7XG4gICAgdmFyIG1peCA9IG1peCQxO1xuXG4gICAgQ29sb3IkZy5wcm90b3R5cGUubWl4ID1cbiAgICBDb2xvciRnLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKGNvbDIsIGYpIHtcbiAgICBcdGlmICggZiA9PT0gdm9pZCAwICkgZj0wLjU7XG4gICAgXHR2YXIgcmVzdCA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICBcdHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDIgXTtcblxuICAgIFx0cmV0dXJuIG1peC5hcHBseSh2b2lkIDAsIFsgdGhpcywgY29sMiwgZiBdLmNvbmNhdCggcmVzdCApKTtcbiAgICB9O1xuXG4gICAgdmFyIENvbG9yJGYgPSBDb2xvcl8xO1xuXG4gICAgQ29sb3IkZi5wcm90b3R5cGUucHJlbXVsdGlwbHkgPSBmdW5jdGlvbihtdXRhdGUpIHtcbiAgICBcdGlmICggbXV0YXRlID09PSB2b2lkIDAgKSBtdXRhdGU9ZmFsc2U7XG5cbiAgICBcdHZhciByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgXHR2YXIgYSA9IHJnYlszXTtcbiAgICBcdGlmIChtdXRhdGUpIHtcbiAgICBcdFx0dGhpcy5fcmdiID0gW3JnYlswXSphLCByZ2JbMV0qYSwgcmdiWzJdKmEsIGFdO1xuICAgIFx0XHRyZXR1cm4gdGhpcztcbiAgICBcdH0gZWxzZSB7XG4gICAgXHRcdHJldHVybiBuZXcgQ29sb3IkZihbcmdiWzBdKmEsIHJnYlsxXSphLCByZ2JbMl0qYSwgYV0sICdyZ2InKTtcbiAgICBcdH1cbiAgICB9O1xuXG4gICAgdmFyIENvbG9yJGUgPSBDb2xvcl8xO1xuICAgIHZhciBMQUJfQ09OU1RBTlRTID0gbGFiQ29uc3RhbnRzO1xuXG4gICAgQ29sb3IkZS5wcm90b3R5cGUuc2F0dXJhdGUgPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICBcdGlmICggYW1vdW50ID09PSB2b2lkIDAgKSBhbW91bnQ9MTtcblxuICAgIFx0dmFyIG1lID0gdGhpcztcbiAgICBcdHZhciBsY2ggPSBtZS5sY2goKTtcbiAgICBcdGxjaFsxXSArPSBMQUJfQ09OU1RBTlRTLktuICogYW1vdW50O1xuICAgIFx0aWYgKGxjaFsxXSA8IDApIHsgbGNoWzFdID0gMDsgfVxuICAgIFx0cmV0dXJuIG5ldyBDb2xvciRlKGxjaCwgJ2xjaCcpLmFscGhhKG1lLmFscGhhKCksIHRydWUpO1xuICAgIH07XG5cbiAgICBDb2xvciRlLnByb3RvdHlwZS5kZXNhdHVyYXRlID0gZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgXHRpZiAoIGFtb3VudCA9PT0gdm9pZCAwICkgYW1vdW50PTE7XG5cbiAgICBcdHJldHVybiB0aGlzLnNhdHVyYXRlKC1hbW91bnQpO1xuICAgIH07XG5cbiAgICB2YXIgQ29sb3IkZCA9IENvbG9yXzE7XG4gICAgdmFyIHR5cGUkMyA9IHV0aWxzLnR5cGU7XG5cbiAgICBDb2xvciRkLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobWMsIHZhbHVlLCBtdXRhdGUpIHtcbiAgICAgICAgaWYgKCBtdXRhdGUgPT09IHZvaWQgMCApIG11dGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciByZWYgPSBtYy5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgbW9kZSA9IHJlZlswXTtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSByZWZbMV07XG4gICAgICAgIHZhciBzcmMgPSB0aGlzW21vZGVdKCk7XG4gICAgICAgIGlmIChjaGFubmVsKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG1vZGUuaW5kZXhPZihjaGFubmVsKSAtIChtb2RlLnN1YnN0cigwLCAyKSA9PT0gJ29rJyA/IDIgOiAwKTtcbiAgICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSQzKHZhbHVlKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjW2ldICs9ICt2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1tpXSArPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNbaV0gKj0gK3ZhbHVlLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1tpXSAvPSArdmFsdWUuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNbaV0gPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUkMyh2YWx1ZSkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHNyY1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHZhbHVlIGZvciBDb2xvci5zZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvdXQgPSBuZXcgQ29sb3IkZChzcmMsIG1vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChtdXRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmdiID0gb3V0Ll9yZ2I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcInVua25vd24gY2hhbm5lbCBcIiArIGNoYW5uZWwgKyBcIiBpbiBtb2RlIFwiICsgbW9kZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNyYztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgQ29sb3IkYyA9IENvbG9yXzE7XG5cbiAgICB2YXIgcmdiID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgdmFyIHh5ejAgPSBjb2wxLl9yZ2I7XG4gICAgICAgIHZhciB4eXoxID0gY29sMi5fcmdiO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yJGMoXG4gICAgICAgICAgICB4eXowWzBdICsgZiAqICh4eXoxWzBdLXh5ejBbMF0pLFxuICAgICAgICAgICAgeHl6MFsxXSArIGYgKiAoeHl6MVsxXS14eXowWzFdKSxcbiAgICAgICAgICAgIHh5ejBbMl0gKyBmICogKHh5ejFbMl0teHl6MFsyXSksXG4gICAgICAgICAgICAncmdiJ1xuICAgICAgICApXG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvciQxLnJnYiA9IHJnYjtcblxuICAgIHZhciBDb2xvciRiID0gQ29sb3JfMTtcbiAgICB2YXIgc3FydCQyID0gTWF0aC5zcXJ0O1xuICAgIHZhciBwb3ckNSA9IE1hdGgucG93O1xuXG4gICAgdmFyIGxyZ2IgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgICAgICB2YXIgcmVmID0gY29sMS5fcmdiO1xuICAgICAgICB2YXIgeDEgPSByZWZbMF07XG4gICAgICAgIHZhciB5MSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHoxID0gcmVmWzJdO1xuICAgICAgICB2YXIgcmVmJDEgPSBjb2wyLl9yZ2I7XG4gICAgICAgIHZhciB4MiA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgeTIgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIHoyID0gcmVmJDFbMl07XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IkYihcbiAgICAgICAgICAgIHNxcnQkMihwb3ckNSh4MSwyKSAqICgxLWYpICsgcG93JDUoeDIsMikgKiBmKSxcbiAgICAgICAgICAgIHNxcnQkMihwb3ckNSh5MSwyKSAqICgxLWYpICsgcG93JDUoeTIsMikgKiBmKSxcbiAgICAgICAgICAgIHNxcnQkMihwb3ckNSh6MSwyKSAqICgxLWYpICsgcG93JDUoejIsMikgKiBmKSxcbiAgICAgICAgICAgICdyZ2InXG4gICAgICAgIClcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEubHJnYiA9IGxyZ2I7XG5cbiAgICB2YXIgQ29sb3IkYSA9IENvbG9yXzE7XG5cbiAgICB2YXIgbGFiID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgdmFyIHh5ejAgPSBjb2wxLmxhYigpO1xuICAgICAgICB2YXIgeHl6MSA9IGNvbDIubGFiKCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IkYShcbiAgICAgICAgICAgIHh5ejBbMF0gKyBmICogKHh5ejFbMF0teHl6MFswXSksXG4gICAgICAgICAgICB4eXowWzFdICsgZiAqICh4eXoxWzFdLXh5ejBbMV0pLFxuICAgICAgICAgICAgeHl6MFsyXSArIGYgKiAoeHl6MVsyXS14eXowWzJdKSxcbiAgICAgICAgICAgICdsYWInXG4gICAgICAgIClcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEubGFiID0gbGFiO1xuXG4gICAgdmFyIENvbG9yJDkgPSBDb2xvcl8xO1xuXG4gICAgdmFyIF9oc3ggPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZiwgbSkge1xuICAgICAgICB2YXIgYXNzaWduLCBhc3NpZ24kMTtcblxuICAgICAgICB2YXIgeHl6MCwgeHl6MTtcbiAgICAgICAgaWYgKG0gPT09ICdoc2wnKSB7XG4gICAgICAgICAgICB4eXowID0gY29sMS5oc2woKTtcbiAgICAgICAgICAgIHh5ejEgPSBjb2wyLmhzbCgpO1xuICAgICAgICB9IGVsc2UgaWYgKG0gPT09ICdoc3YnKSB7XG4gICAgICAgICAgICB4eXowID0gY29sMS5oc3YoKTtcbiAgICAgICAgICAgIHh5ejEgPSBjb2wyLmhzdigpO1xuICAgICAgICB9IGVsc2UgaWYgKG0gPT09ICdoY2cnKSB7XG4gICAgICAgICAgICB4eXowID0gY29sMS5oY2coKTtcbiAgICAgICAgICAgIHh5ejEgPSBjb2wyLmhjZygpO1xuICAgICAgICB9IGVsc2UgaWYgKG0gPT09ICdoc2knKSB7XG4gICAgICAgICAgICB4eXowID0gY29sMS5oc2koKTtcbiAgICAgICAgICAgIHh5ejEgPSBjb2wyLmhzaSgpO1xuICAgICAgICB9IGVsc2UgaWYgKG0gPT09ICdsY2gnIHx8IG0gPT09ICdoY2wnKSB7XG4gICAgICAgICAgICBtID0gJ2hjbCc7XG4gICAgICAgICAgICB4eXowID0gY29sMS5oY2woKTtcbiAgICAgICAgICAgIHh5ejEgPSBjb2wyLmhjbCgpO1xuICAgICAgICB9IGVsc2UgaWYgKG0gPT09ICdva2xjaCcpIHtcbiAgICAgICAgICAgIHh5ejAgPSBjb2wxLm9rbGNoKCkucmV2ZXJzZSgpO1xuICAgICAgICAgICAgeHl6MSA9IGNvbDIub2tsY2goKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaHVlMCwgaHVlMSwgc2F0MCwgc2F0MSwgbGJ2MCwgbGJ2MTtcbiAgICAgICAgaWYgKG0uc3Vic3RyKDAsIDEpID09PSAnaCcgfHwgbSA9PT0gJ29rbGNoJykge1xuICAgICAgICAgICAgKGFzc2lnbiA9IHh5ejAsIGh1ZTAgPSBhc3NpZ25bMF0sIHNhdDAgPSBhc3NpZ25bMV0sIGxidjAgPSBhc3NpZ25bMl0pO1xuICAgICAgICAgICAgKGFzc2lnbiQxID0geHl6MSwgaHVlMSA9IGFzc2lnbiQxWzBdLCBzYXQxID0gYXNzaWduJDFbMV0sIGxidjEgPSBhc3NpZ24kMVsyXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2F0LCBodWUsIGxidiwgZGg7XG5cbiAgICAgICAgaWYgKCFpc05hTihodWUwKSAmJiAhaXNOYU4oaHVlMSkpIHtcbiAgICAgICAgICAgIC8vIGJvdGggY29sb3JzIGhhdmUgaHVlXG4gICAgICAgICAgICBpZiAoaHVlMSA+IGh1ZTAgJiYgaHVlMSAtIGh1ZTAgPiAxODApIHtcbiAgICAgICAgICAgICAgICBkaCA9IGh1ZTEgLSAoaHVlMCArIDM2MCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGh1ZTEgPCBodWUwICYmIGh1ZTAgLSBodWUxID4gMTgwKSB7XG4gICAgICAgICAgICAgICAgZGggPSBodWUxICsgMzYwIC0gaHVlMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGggPSBodWUxIC0gaHVlMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh1ZSA9IGh1ZTAgKyBmICogZGg7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKGh1ZTApKSB7XG4gICAgICAgICAgICBodWUgPSBodWUwO1xuICAgICAgICAgICAgaWYgKChsYnYxID09IDEgfHwgbGJ2MSA9PSAwKSAmJiBtICE9ICdoc3YnKSB7IHNhdCA9IHNhdDA7IH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNOYU4oaHVlMSkpIHtcbiAgICAgICAgICAgIGh1ZSA9IGh1ZTE7XG4gICAgICAgICAgICBpZiAoKGxidjAgPT0gMSB8fCBsYnYwID09IDApICYmIG0gIT0gJ2hzdicpIHsgc2F0ID0gc2F0MTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHVlID0gTnVtYmVyLk5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzYXQgPT09IHVuZGVmaW5lZCkgeyBzYXQgPSBzYXQwICsgZiAqIChzYXQxIC0gc2F0MCk7IH1cbiAgICAgICAgbGJ2ID0gbGJ2MCArIGYgKiAobGJ2MSAtIGxidjApO1xuICAgICAgICByZXR1cm4gbSA9PT0gJ29rbGNoJyA/IG5ldyBDb2xvciQ5KFtsYnYsIHNhdCwgaHVlXSwgbSkgOiBuZXcgQ29sb3IkOShbaHVlLCBzYXQsIGxidl0sIG0pO1xuICAgIH07XG5cbiAgICB2YXIgaW50ZXJwb2xhdGVfaHN4JDUgPSBfaHN4O1xuXG4gICAgdmFyIGxjaCA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgXHRyZXR1cm4gaW50ZXJwb2xhdGVfaHN4JDUoY29sMSwgY29sMiwgZiwgJ2xjaCcpO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IkMS5sY2ggPSBsY2g7XG4gICAgaW50ZXJwb2xhdG9yJDEuaGNsID0gbGNoO1xuXG4gICAgdmFyIENvbG9yJDggPSBDb2xvcl8xO1xuXG4gICAgdmFyIG51bSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgICAgIHZhciBjMSA9IGNvbDEubnVtKCk7XG4gICAgICAgIHZhciBjMiA9IGNvbDIubnVtKCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IkOChjMSArIGYgKiAoYzItYzEpLCAnbnVtJylcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEubnVtID0gbnVtO1xuXG4gICAgdmFyIGludGVycG9sYXRlX2hzeCQ0ID0gX2hzeDtcblxuICAgIHZhciBoY2cgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIGludGVycG9sYXRlX2hzeCQ0KGNvbDEsIGNvbDIsIGYsICdoY2cnKTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEuaGNnID0gaGNnO1xuXG4gICAgdmFyIGludGVycG9sYXRlX2hzeCQzID0gX2hzeDtcblxuICAgIHZhciBoc2kgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIGludGVycG9sYXRlX2hzeCQzKGNvbDEsIGNvbDIsIGYsICdoc2knKTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEuaHNpID0gaHNpO1xuXG4gICAgdmFyIGludGVycG9sYXRlX2hzeCQyID0gX2hzeDtcblxuICAgIHZhciBoc2wgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIGludGVycG9sYXRlX2hzeCQyKGNvbDEsIGNvbDIsIGYsICdoc2wnKTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEuaHNsID0gaHNsO1xuXG4gICAgdmFyIGludGVycG9sYXRlX2hzeCQxID0gX2hzeDtcblxuICAgIHZhciBoc3YgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIGludGVycG9sYXRlX2hzeCQxKGNvbDEsIGNvbDIsIGYsICdoc3YnKTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yJDEuaHN2ID0gaHN2O1xuXG4gICAgdmFyIENvbG9yJDcgPSBDb2xvcl8xO1xuXG4gICAgdmFyIG9rbGFiID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgdmFyIHh5ejAgPSBjb2wxLm9rbGFiKCk7XG4gICAgICAgIHZhciB4eXoxID0gY29sMi5va2xhYigpO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yJDcoXG4gICAgICAgICAgICB4eXowWzBdICsgZiAqICh4eXoxWzBdIC0geHl6MFswXSksXG4gICAgICAgICAgICB4eXowWzFdICsgZiAqICh4eXoxWzFdIC0geHl6MFsxXSksXG4gICAgICAgICAgICB4eXowWzJdICsgZiAqICh4eXoxWzJdIC0geHl6MFsyXSksXG4gICAgICAgICAgICAnb2tsYWInXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvciQxLm9rbGFiID0gb2tsYWI7XG5cbiAgICB2YXIgaW50ZXJwb2xhdGVfaHN4ID0gX2hzeDtcblxuICAgIHZhciBva2xjaCA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZV9oc3goY29sMSwgY29sMiwgZiwgJ29rbGNoJyk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvciQxLm9rbGNoID0gb2tsY2g7XG5cbiAgICB2YXIgQ29sb3IkNiA9IENvbG9yXzE7XG4gICAgdmFyIGNsaXBfcmdiJDEgPSB1dGlscy5jbGlwX3JnYjtcbiAgICB2YXIgcG93JDQgPSBNYXRoLnBvdztcbiAgICB2YXIgc3FydCQxID0gTWF0aC5zcXJ0O1xuICAgIHZhciBQSSQxID0gTWF0aC5QSTtcbiAgICB2YXIgY29zJDIgPSBNYXRoLmNvcztcbiAgICB2YXIgc2luJDIgPSBNYXRoLnNpbjtcbiAgICB2YXIgYXRhbjIkMSA9IE1hdGguYXRhbjI7XG5cbiAgICB2YXIgYXZlcmFnZSA9IGZ1bmN0aW9uIChjb2xvcnMsIG1vZGUsIHdlaWdodHMpIHtcbiAgICAgICAgaWYgKCBtb2RlID09PSB2b2lkIDAgKSBtb2RlPSdscmdiJztcbiAgICAgICAgaWYgKCB3ZWlnaHRzID09PSB2b2lkIDAgKSB3ZWlnaHRzPW51bGw7XG5cbiAgICAgICAgdmFyIGwgPSBjb2xvcnMubGVuZ3RoO1xuICAgICAgICBpZiAoIXdlaWdodHMpIHsgd2VpZ2h0cyA9IEFycmF5LmZyb20obmV3IEFycmF5KGwpKS5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSk7IH1cbiAgICAgICAgLy8gbm9ybWFsaXplIHdlaWdodHNcbiAgICAgICAgdmFyIGsgPSBsIC8gd2VpZ2h0cy5yZWR1Y2UoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYSArIGI7IH0pO1xuICAgICAgICB3ZWlnaHRzLmZvckVhY2goZnVuY3Rpb24gKHcsaSkgeyB3ZWlnaHRzW2ldICo9IGs7IH0pO1xuICAgICAgICAvLyBjb252ZXJ0IGNvbG9ycyB0byBDb2xvciBvYmplY3RzXG4gICAgICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG5ldyBDb2xvciQ2KGMpOyB9KTtcbiAgICAgICAgaWYgKG1vZGUgPT09ICdscmdiJykge1xuICAgICAgICAgICAgcmV0dXJuIF9hdmVyYWdlX2xyZ2IoY29sb3JzLCB3ZWlnaHRzKVxuICAgICAgICB9XG4gICAgICAgIHZhciBmaXJzdCA9IGNvbG9ycy5zaGlmdCgpO1xuICAgICAgICB2YXIgeHl6ID0gZmlyc3QuZ2V0KG1vZGUpO1xuICAgICAgICB2YXIgY250ID0gW107XG4gICAgICAgIHZhciBkeCA9IDA7XG4gICAgICAgIHZhciBkeSA9IDA7XG4gICAgICAgIC8vIGluaXRpYWwgY29sb3JcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHh5ei5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHl6W2ldID0gKHh5eltpXSB8fCAwKSAqIHdlaWdodHNbMF07XG4gICAgICAgICAgICBjbnQucHVzaChpc05hTih4eXpbaV0pID8gMCA6IHdlaWdodHNbMF0pO1xuICAgICAgICAgICAgaWYgKG1vZGUuY2hhckF0KGkpID09PSAnaCcgJiYgIWlzTmFOKHh5eltpXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgQSA9IHh5eltpXSAvIDE4MCAqIFBJJDE7XG4gICAgICAgICAgICAgICAgZHggKz0gY29zJDIoQSkgKiB3ZWlnaHRzWzBdO1xuICAgICAgICAgICAgICAgIGR5ICs9IHNpbiQyKEEpICogd2VpZ2h0c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbHBoYSA9IGZpcnN0LmFscGhhKCkgKiB3ZWlnaHRzWzBdO1xuICAgICAgICBjb2xvcnMuZm9yRWFjaChmdW5jdGlvbiAoYyxjaSkge1xuICAgICAgICAgICAgdmFyIHh5ejIgPSBjLmdldChtb2RlKTtcbiAgICAgICAgICAgIGFscGhhICs9IGMuYWxwaGEoKSAqIHdlaWdodHNbY2krMV07XG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8eHl6Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih4eXoyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBjbnRbaV0gKz0gd2VpZ2h0c1tjaSsxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUuY2hhckF0KGkpID09PSAnaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBBID0geHl6MltpXSAvIDE4MCAqIFBJJDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBkeCArPSBjb3MkMihBKSAqIHdlaWdodHNbY2krMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkeSArPSBzaW4kMihBKSAqIHdlaWdodHNbY2krMV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4eXpbaV0gKz0geHl6MltpXSAqIHdlaWdodHNbY2krMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkkMT0wOyBpJDE8eHl6Lmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgIGlmIChtb2RlLmNoYXJBdChpJDEpID09PSAnaCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgQSQxID0gYXRhbjIkMShkeSAvIGNudFtpJDFdLCBkeCAvIGNudFtpJDFdKSAvIFBJJDEgKiAxODA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKEEkMSA8IDApIHsgQSQxICs9IDM2MDsgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChBJDEgPj0gMzYwKSB7IEEkMSAtPSAzNjA7IH1cbiAgICAgICAgICAgICAgICB4eXpbaSQxXSA9IEEkMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeHl6W2kkMV0gPSB4eXpbaSQxXS9jbnRbaSQxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhbHBoYSAvPSBsO1xuICAgICAgICByZXR1cm4gKG5ldyBDb2xvciQ2KHh5eiwgbW9kZSkpLmFscGhhKGFscGhhID4gMC45OTk5OSA/IDEgOiBhbHBoYSwgdHJ1ZSk7XG4gICAgfTtcblxuXG4gICAgdmFyIF9hdmVyYWdlX2xyZ2IgPSBmdW5jdGlvbiAoY29sb3JzLCB3ZWlnaHRzKSB7XG4gICAgICAgIHZhciBsID0gY29sb3JzLmxlbmd0aDtcbiAgICAgICAgdmFyIHh5eiA9IFswLDAsMCwwXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgY29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29sID0gY29sb3JzW2ldO1xuICAgICAgICAgICAgdmFyIGYgPSB3ZWlnaHRzW2ldIC8gbDtcbiAgICAgICAgICAgIHZhciByZ2IgPSBjb2wuX3JnYjtcbiAgICAgICAgICAgIHh5elswXSArPSBwb3ckNChyZ2JbMF0sMikgKiBmO1xuICAgICAgICAgICAgeHl6WzFdICs9IHBvdyQ0KHJnYlsxXSwyKSAqIGY7XG4gICAgICAgICAgICB4eXpbMl0gKz0gcG93JDQocmdiWzJdLDIpICogZjtcbiAgICAgICAgICAgIHh5elszXSArPSByZ2JbM10gKiBmO1xuICAgICAgICB9XG4gICAgICAgIHh5elswXSA9IHNxcnQkMSh4eXpbMF0pO1xuICAgICAgICB4eXpbMV0gPSBzcXJ0JDEoeHl6WzFdKTtcbiAgICAgICAgeHl6WzJdID0gc3FydCQxKHh5elsyXSk7XG4gICAgICAgIGlmICh4eXpbM10gPiAwLjk5OTk5OTkpIHsgeHl6WzNdID0gMTsgfVxuICAgICAgICByZXR1cm4gbmV3IENvbG9yJDYoY2xpcF9yZ2IkMSh4eXopKTtcbiAgICB9O1xuXG4gICAgLy8gbWluaW1hbCBtdWx0aS1wdXJwb3NlIGludGVyZmFjZVxuXG4gICAgLy8gQHJlcXVpcmVzIHV0aWxzIGNvbG9yIGFuYWx5emVcblxuICAgIHZhciBjaHJvbWEkNCA9IGNocm9tYV8xO1xuICAgIHZhciB0eXBlJDIgPSB1dGlscy50eXBlO1xuXG4gICAgdmFyIHBvdyQzID0gTWF0aC5wb3c7XG5cbiAgICB2YXIgc2NhbGUkMiA9IGZ1bmN0aW9uKGNvbG9ycykge1xuXG4gICAgICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgIHZhciBfbW9kZSA9ICdyZ2InO1xuICAgICAgICB2YXIgX25hY29sID0gY2hyb21hJDQoJyNjY2MnKTtcbiAgICAgICAgdmFyIF9zcHJlYWQgPSAwO1xuICAgICAgICAvLyBjb25zdCBfZml4ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9kb21haW4gPSBbMCwgMV07XG4gICAgICAgIHZhciBfcG9zID0gW107XG4gICAgICAgIHZhciBfcGFkZGluZyA9IFswLDBdO1xuICAgICAgICB2YXIgX2NsYXNzZXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9jb2xvcnMgPSBbXTtcbiAgICAgICAgdmFyIF9vdXQgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9taW4gPSAwO1xuICAgICAgICB2YXIgX21heCA9IDE7XG4gICAgICAgIHZhciBfY29ycmVjdExpZ2h0bmVzcyA9IGZhbHNlO1xuICAgICAgICB2YXIgX2NvbG9yQ2FjaGUgPSB7fTtcbiAgICAgICAgdmFyIF91c2VDYWNoZSA9IHRydWU7XG4gICAgICAgIHZhciBfZ2FtbWEgPSAxO1xuXG4gICAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuXG4gICAgICAgIHZhciBzZXRDb2xvcnMgPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgICAgICAgIGNvbG9ycyA9IGNvbG9ycyB8fCBbJyNmZmYnLCAnIzAwMCddO1xuICAgICAgICAgICAgaWYgKGNvbG9ycyAmJiB0eXBlJDIoY29sb3JzKSA9PT0gJ3N0cmluZycgJiYgY2hyb21hJDQuYnJld2VyICYmXG4gICAgICAgICAgICAgICAgY2hyb21hJDQuYnJld2VyW2NvbG9ycy50b0xvd2VyQ2FzZSgpXSkge1xuICAgICAgICAgICAgICAgIGNvbG9ycyA9IGNocm9tYSQ0LmJyZXdlcltjb2xvcnMudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSQyKGNvbG9ycykgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgc2luZ2xlIGNvbG9yXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzID0gW2NvbG9yc1swXSwgY29sb3JzWzBdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBhIGNvcHkgb2YgdGhlIGNvbG9yc1xuICAgICAgICAgICAgICAgIGNvbG9ycyA9IGNvbG9ycy5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRvIGNocm9tYSBjbGFzc2VzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYz0wOyBjPGNvbG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcnNbY10gPSBjaHJvbWEkNChjb2xvcnNbY10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhdXRvLWZpbGwgY29sb3IgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBfcG9zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYyQxPTA7IGMkMTxjb2xvcnMubGVuZ3RoOyBjJDErKykge1xuICAgICAgICAgICAgICAgICAgICBfcG9zLnB1c2goYyQxLyhjb2xvcnMubGVuZ3RoLTEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNldENhY2hlKCk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Q2xhc3MgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKF9jbGFzc2VzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IF9jbGFzc2VzLmxlbmd0aC0xO1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IG4gJiYgdmFsdWUgPj0gX2NsYXNzZXNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaS0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHRNYXBMaWdodG5lc3MgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfTtcbiAgICAgICAgdmFyIHRNYXBEb21haW4gPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfTtcblxuICAgICAgICAvLyBjb25zdCBjbGFzc2lmeVZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gICAgIGxldCB2YWwgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIGlmIChfY2xhc3Nlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgbiA9IF9jbGFzc2VzLmxlbmd0aC0xO1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGkgPSBnZXRDbGFzcyh2YWx1ZSk7XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgbWluYyA9IF9jbGFzc2VzWzBdICsgKChfY2xhc3Nlc1sxXS1fY2xhc3Nlc1swXSkgKiAoMCArIChfc3ByZWFkICogMC41KSkpOyAgLy8gY2VudGVyIG9mIDFzdCBjbGFzc1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IG1heGMgPSBfY2xhc3Nlc1tuLTFdICsgKChfY2xhc3Nlc1tuXS1fY2xhc3Nlc1tuLTFdKSAqICgxIC0gKF9zcHJlYWQgKiAwLjUpKSk7ICAvLyBjZW50ZXIgb2YgbGFzdCBjbGFzc1xuICAgICAgICAvLyAgICAgICAgIHZhbCA9IF9taW4gKyAoKCgoX2NsYXNzZXNbaV0gKyAoKF9jbGFzc2VzW2krMV0gLSBfY2xhc3Nlc1tpXSkgKiAwLjUpKSAtIG1pbmMpIC8gKG1heGMtbWluYykpICogKF9tYXggLSBfbWluKSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICByZXR1cm4gdmFsO1xuICAgICAgICAvLyB9O1xuXG4gICAgICAgIHZhciBnZXRDb2xvciA9IGZ1bmN0aW9uKHZhbCwgYnlwYXNzTWFwKSB7XG4gICAgICAgICAgICB2YXIgY29sLCB0O1xuICAgICAgICAgICAgaWYgKGJ5cGFzc01hcCA9PSBudWxsKSB7IGJ5cGFzc01hcCA9IGZhbHNlOyB9XG4gICAgICAgICAgICBpZiAoaXNOYU4odmFsKSB8fCAodmFsID09PSBudWxsKSkgeyByZXR1cm4gX25hY29sOyB9XG4gICAgICAgICAgICBpZiAoIWJ5cGFzc01hcCkge1xuICAgICAgICAgICAgICAgIGlmIChfY2xhc3NlcyAmJiAoX2NsYXNzZXMubGVuZ3RoID4gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBnZXRDbGFzcyh2YWwpO1xuICAgICAgICAgICAgICAgICAgICB0ID0gYyAvIChfY2xhc3Nlcy5sZW5ndGgtMik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfbWF4ICE9PSBfbWluKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgaW50ZXJwb2xhdGUgYmV0d2VlbiBtaW4vbWF4XG4gICAgICAgICAgICAgICAgICAgIHQgPSAodmFsIC0gX21pbikgLyAoX21heCAtIF9taW4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdCA9IHZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG9tYWluIG1hcFxuICAgICAgICAgICAgdCA9IHRNYXBEb21haW4odCk7XG5cbiAgICAgICAgICAgIGlmICghYnlwYXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdCA9IHRNYXBMaWdodG5lc3ModCk7ICAvLyBsaWdodG5lc3MgY29ycmVjdGlvblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX2dhbW1hICE9PSAxKSB7IHQgPSBwb3ckMyh0LCBfZ2FtbWEpOyB9XG5cbiAgICAgICAgICAgIHQgPSBfcGFkZGluZ1swXSArICh0ICogKDEgLSBfcGFkZGluZ1swXSAtIF9wYWRkaW5nWzFdKSk7XG5cbiAgICAgICAgICAgIHQgPSBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCB0KSk7XG5cbiAgICAgICAgICAgIHZhciBrID0gTWF0aC5mbG9vcih0ICogMTAwMDApO1xuXG4gICAgICAgICAgICBpZiAoX3VzZUNhY2hlICYmIF9jb2xvckNhY2hlW2tdKSB7XG4gICAgICAgICAgICAgICAgY29sID0gX2NvbG9yQ2FjaGVba107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlJDIoX2NvbG9ycykgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgaSBpbiBbMC4uX3Bvcy5sZW5ndGgtMV1cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPF9wb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gX3Bvc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0IDw9IHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBfY29sb3JzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0ID49IHApICYmIChpID09PSAoX3Bvcy5sZW5ndGgtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gX2NvbG9yc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID4gcCAmJiB0IDwgX3Bvc1tpKzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0LXApLyhfcG9zW2krMV0tcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gY2hyb21hJDQuaW50ZXJwb2xhdGUoX2NvbG9yc1tpXSwgX2NvbG9yc1tpKzFdLCB0LCBfbW9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUkMihfY29sb3JzKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSBfY29sb3JzKHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3VzZUNhY2hlKSB7IF9jb2xvckNhY2hlW2tdID0gY29sOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29sO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXNldENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX2NvbG9yQ2FjaGUgPSB7fTsgfTtcblxuICAgICAgICBzZXRDb2xvcnMoY29sb3JzKTtcblxuICAgICAgICAvLyBwdWJsaWMgaW50ZXJmYWNlXG5cbiAgICAgICAgdmFyIGYgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICB2YXIgYyA9IGNocm9tYSQ0KGdldENvbG9yKHYpKTtcbiAgICAgICAgICAgIGlmIChfb3V0ICYmIGNbX291dF0pIHsgcmV0dXJuIGNbX291dF0oKTsgfSBlbHNlIHsgcmV0dXJuIGM7IH1cbiAgICAgICAgfTtcblxuICAgICAgICBmLmNsYXNzZXMgPSBmdW5jdGlvbihjbGFzc2VzKSB7XG4gICAgICAgICAgICBpZiAoY2xhc3NlcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUkMihjbGFzc2VzKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgICAgICBfY2xhc3NlcyA9IGNsYXNzZXM7XG4gICAgICAgICAgICAgICAgICAgIF9kb21haW4gPSBbY2xhc3Nlc1swXSwgY2xhc3Nlc1tjbGFzc2VzLmxlbmd0aC0xXV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBjaHJvbWEkNC5hbmFseXplKF9kb21haW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NlcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzZXMgPSBbZC5taW4sIGQubWF4XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc2VzID0gY2hyb21hJDQubGltaXRzKGQsICdlJywgY2xhc3Nlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX2NsYXNzZXM7XG4gICAgICAgIH07XG5cblxuICAgICAgICBmLmRvbWFpbiA9IGZ1bmN0aW9uKGRvbWFpbikge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9kb21haW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfbWluID0gZG9tYWluWzBdO1xuICAgICAgICAgICAgX21heCA9IGRvbWFpbltkb21haW4ubGVuZ3RoLTFdO1xuICAgICAgICAgICAgX3BvcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGsgPSBfY29sb3JzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICgoZG9tYWluLmxlbmd0aCA9PT0gaykgJiYgKF9taW4gIT09IF9tYXgpKSB7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHBvc2l0aW9uc1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gQXJyYXkuZnJvbShkb21haW4pOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgICAgICAgIF9wb3MucHVzaCgoZC1fbWluKSAvIChfbWF4LV9taW4pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGM9MDsgYzxrOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgX3Bvcy5wdXNoKGMvKGstMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9tYWluLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGRvbWFpbiBtYXBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRPdXQgPSBkb21haW4ubWFwKGZ1bmN0aW9uIChkLGkpIHsgcmV0dXJuIGkvKGRvbWFpbi5sZW5ndGgtMSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdEJyZWFrcyA9IGRvbWFpbi5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIChkIC0gX21pbikgLyAoX21heCAtIF9taW4pOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0QnJlYWtzLmV2ZXJ5KGZ1bmN0aW9uICh2YWwsIGkpIHsgcmV0dXJuIHRPdXRbaV0gPT09IHZhbDsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRNYXBEb21haW4gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0IDw9IDAgfHwgdCA+PSAxKSB7IHJldHVybiB0OyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ID49IHRCcmVha3NbaSsxXSkgeyBpKys7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9ICh0IC0gdEJyZWFrc1tpXSkgLyAodEJyZWFrc1tpKzFdIC0gdEJyZWFrc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dCA9IHRPdXRbaV0gKyBmICogKHRPdXRbaSsxXSAtIHRPdXRbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZG9tYWluID0gW19taW4sIF9tYXhdO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5tb2RlID0gZnVuY3Rpb24oX20pIHtcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbW9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9tb2RlID0gX207XG4gICAgICAgICAgICByZXNldENhY2hlKCk7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLnJhbmdlID0gZnVuY3Rpb24oY29sb3JzLCBfcG9zKSB7XG4gICAgICAgICAgICBzZXRDb2xvcnMoY29sb3JzKTtcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYub3V0ID0gZnVuY3Rpb24oX28pIHtcbiAgICAgICAgICAgIF9vdXQgPSBfbztcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYuc3ByZWFkID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NwcmVhZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zcHJlYWQgPSB2YWw7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLmNvcnJlY3RMaWdodG5lc3MgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICBpZiAodiA9PSBudWxsKSB7IHYgPSB0cnVlOyB9XG4gICAgICAgICAgICBfY29ycmVjdExpZ2h0bmVzcyA9IHY7XG4gICAgICAgICAgICByZXNldENhY2hlKCk7XG4gICAgICAgICAgICBpZiAoX2NvcnJlY3RMaWdodG5lc3MpIHtcbiAgICAgICAgICAgICAgICB0TWFwTGlnaHRuZXNzID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgTDAgPSBnZXRDb2xvcigwLCB0cnVlKS5sYWIoKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEwxID0gZ2V0Q29sb3IoMSwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2wgPSBMMCA+IEwxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgTF9hY3R1YWwgPSBnZXRDb2xvcih0LCB0cnVlKS5sYWIoKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIExfaWRlYWwgPSBMMCArICgoTDEgLSBMMCkgKiB0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIExfZGlmZiA9IExfYWN0dWFsIC0gTF9pZGVhbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQxID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heF9pdGVyID0gMjA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoTWF0aC5hYnMoTF9kaWZmKSA+IDFlLTIpICYmIChtYXhfaXRlci0tID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9sKSB7IExfZGlmZiAqPSAtMTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChMX2RpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQwID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCArPSAodDEgLSB0KSAqIDAuNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0MSA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gKHQwIC0gdCkgKiAwLjU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExfYWN0dWFsID0gZ2V0Q29sb3IodCwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExfZGlmZiA9IExfYWN0dWFsIC0gTF9pZGVhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdE1hcExpZ2h0bmVzcyA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0OyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5wYWRkaW5nID0gZnVuY3Rpb24ocCkge1xuICAgICAgICAgICAgaWYgKHAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlJDIocCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBbcCxwXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3BhZGRpbmcgPSBwO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3BhZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5jb2xvcnMgPSBmdW5jdGlvbihudW1Db2xvcnMsIG91dCkge1xuICAgICAgICAgICAgLy8gSWYgbm8gYXJndW1lbnRzIGFyZSBnaXZlbiwgcmV0dXJuIHRoZSBvcmlnaW5hbCBjb2xvcnMgdGhhdCB3ZXJlIHByb3ZpZGVkXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHsgb3V0ID0gJ2hleCc7IH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfY29sb3JzLnNsaWNlKDApO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bUNvbG9ycyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtmKDAuNSldO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bUNvbG9ycyA+IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG0gPSBfZG9tYWluWzBdO1xuICAgICAgICAgICAgICAgIHZhciBkZCA9IF9kb21haW5bMV0gLSBkbTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfX3JhbmdlX18oMCwgbnVtQ29sb3JzLCBmYWxzZSkubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBmKCBkbSArICgoaS8obnVtQ29sb3JzLTEpKSAqIGRkKSApOyB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gcmV0dXJucyBhbGwgY29sb3JzIGJhc2VkIG9uIHRoZSBkZWZpbmVkIGNsYXNzZXNcbiAgICAgICAgICAgICAgICBjb2xvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc2FtcGxlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChfY2xhc3NlcyAmJiAoX2NsYXNzZXMubGVuZ3RoID4gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGVuZCA9IF9jbGFzc2VzLmxlbmd0aCwgYXNjID0gMSA8PSBlbmQ7IGFzYyA/IGkgPCBlbmQgOiBpID4gZW5kOyBhc2MgPyBpKysgOiBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZXMucHVzaCgoX2NsYXNzZXNbaS0xXStfY2xhc3Nlc1tpXSkqMC41KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXMgPSBfZG9tYWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzYW1wbGVzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gZih2KTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaHJvbWEkNFtvdXRdKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gY1tvdXRdKCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBmLmNhY2hlID0gZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgaWYgKGMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIF91c2VDYWNoZSA9IGM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdXNlQ2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5nYW1tYSA9IGZ1bmN0aW9uKGcpIHtcbiAgICAgICAgICAgIGlmIChnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfZ2FtbWEgPSBnO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2dhbW1hO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGYubm9kYXRhID0gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgaWYgKGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIF9uYWNvbCA9IGNocm9tYSQ0KGQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX25hY29sO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfX3JhbmdlX18obGVmdCwgcmlnaHQsIGluY2x1c2l2ZSkge1xuICAgICAgdmFyIHJhbmdlID0gW107XG4gICAgICB2YXIgYXNjZW5kaW5nID0gbGVmdCA8IHJpZ2h0O1xuICAgICAgdmFyIGVuZCA9ICFpbmNsdXNpdmUgPyByaWdodCA6IGFzY2VuZGluZyA/IHJpZ2h0ICsgMSA6IHJpZ2h0IC0gMTtcbiAgICAgIGZvciAodmFyIGkgPSBsZWZ0OyBhc2NlbmRpbmcgPyBpIDwgZW5kIDogaSA+IGVuZDsgYXNjZW5kaW5nID8gaSsrIDogaS0tKSB7XG4gICAgICAgIHJhbmdlLnB1c2goaSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBpbnRlcnBvbGF0ZXMgYmV0d2VlbiBhIHNldCBvZiBjb2xvcnMgdXppbmcgYSBiZXppZXIgc3BsaW5lXG4gICAgLy9cblxuICAgIC8vIEByZXF1aXJlcyB1dGlscyBsYWJcbiAgICB2YXIgQ29sb3IkNSA9IENvbG9yXzE7XG5cbiAgICB2YXIgc2NhbGUkMSA9IHNjYWxlJDI7XG5cbiAgICAvLyBudGggcm93IG9mIHRoZSBwYXNjYWwgdHJpYW5nbGVcbiAgICB2YXIgYmlub21fcm93ID0gZnVuY3Rpb24obikge1xuICAgICAgICB2YXIgcm93ID0gWzEsIDFdO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgdmFyIG5ld3JvdyA9IFsxXTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDw9IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIG5ld3Jvd1tqXSA9IChyb3dbal0gfHwgMCkgKyByb3dbaiAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93ID0gbmV3cm93O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3c7XG4gICAgfTtcblxuICAgIHZhciBiZXppZXIgPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgICAgdmFyIGFzc2lnbiwgYXNzaWduJDEsIGFzc2lnbiQyO1xuXG4gICAgICAgIHZhciBJLCBsYWIwLCBsYWIxLCBsYWIyO1xuICAgICAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZXcgQ29sb3IkNShjKTsgfSk7XG4gICAgICAgIGlmIChjb2xvcnMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAvLyBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgKGFzc2lnbiA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubGFiKCk7IH0pLCBsYWIwID0gYXNzaWduWzBdLCBsYWIxID0gYXNzaWduWzFdKTtcbiAgICAgICAgICAgIEkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhYiA9IChbMCwgMSwgMl0ubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBsYWIwW2ldICsgKHQgKiAobGFiMVtpXSAtIGxhYjBbaV0pKTsgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IkNShsYWIsICdsYWInKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3JzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgLy8gcXVhZHJhdGljIGJlemllciBpbnRlcnBvbGF0aW9uXG4gICAgICAgICAgICAoYXNzaWduJDEgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmxhYigpOyB9KSwgbGFiMCA9IGFzc2lnbiQxWzBdLCBsYWIxID0gYXNzaWduJDFbMV0sIGxhYjIgPSBhc3NpZ24kMVsyXSk7XG4gICAgICAgICAgICBJID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBsYWIgPSAoWzAsIDEsIDJdLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gKCgxLXQpKigxLXQpICogbGFiMFtpXSkgKyAoMiAqICgxLXQpICogdCAqIGxhYjFbaV0pICsgKHQgKiB0ICogbGFiMltpXSk7IH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yJDUobGFiLCAnbGFiJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9ycy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIC8vIGN1YmljIGJlemllciBpbnRlcnBvbGF0aW9uXG4gICAgICAgICAgICB2YXIgbGFiMztcbiAgICAgICAgICAgIChhc3NpZ24kMiA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubGFiKCk7IH0pLCBsYWIwID0gYXNzaWduJDJbMF0sIGxhYjEgPSBhc3NpZ24kMlsxXSwgbGFiMiA9IGFzc2lnbiQyWzJdLCBsYWIzID0gYXNzaWduJDJbM10pO1xuICAgICAgICAgICAgSSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiID0gKFswLCAxLCAyXS5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuICgoMS10KSooMS10KSooMS10KSAqIGxhYjBbaV0pICsgKDMgKiAoMS10KSAqICgxLXQpICogdCAqIGxhYjFbaV0pICsgKDMgKiAoMS10KSAqIHQgKiB0ICogbGFiMltpXSkgKyAodCp0KnQgKiBsYWIzW2ldKTsgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IkNShsYWIsICdsYWInKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3JzLmxlbmd0aCA+PSA1KSB7XG4gICAgICAgICAgICAvLyBnZW5lcmFsIGNhc2UgKGRlZ3JlZSBuIGJlemllcilcbiAgICAgICAgICAgIHZhciBsYWJzLCByb3csIG47XG4gICAgICAgICAgICBsYWJzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5sYWIoKTsgfSk7XG4gICAgICAgICAgICBuID0gY29sb3JzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICByb3cgPSBiaW5vbV9yb3cobik7XG4gICAgICAgICAgICBJID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IDEgLSB0O1xuICAgICAgICAgICAgICAgIHZhciBsYWIgPSAoWzAsIDEsIDJdLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gbGFicy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgZWwsIGopIHsgcmV0dXJuIChzdW0gKyByb3dbal0gKiBNYXRoLnBvdyggdSwgKG4gLSBqKSApICogTWF0aC5wb3coIHQsIGogKSAqIGVsW2ldKTsgfSwgMCk7IH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yJDUobGFiLCAnbGFiJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJObyBwb2ludCBpbiBydW5uaW5nIGJlemllciB3aXRoIG9ubHkgb25lIGNvbG9yLlwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBJO1xuICAgIH07XG5cbiAgICB2YXIgYmV6aWVyXzEgPSBmdW5jdGlvbiAoY29sb3JzKSB7XG4gICAgICAgIHZhciBmID0gYmV6aWVyKGNvbG9ycyk7XG4gICAgICAgIGYuc2NhbGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzY2FsZSQxKGYpOyB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBpbnRlcnBvbGF0ZXMgYmV0d2VlbiBhIHNldCBvZiBjb2xvcnMgdXppbmcgYSBiZXppZXIgc3BsaW5lXG4gICAgICogYmxlbmQgbW9kZSBmb3JtdWxhcyB0YWtlbiBmcm9tIGh0dHA6Ly93d3cudmVudHVyZS13YXJlLmNvbS9rZXZpbi9jb2RpbmcvbGV0cy1sZWFybi1tYXRoLXBob3Rvc2hvcC1ibGVuZC1tb2Rlcy9cbiAgICAgKi9cblxuICAgIHZhciBjaHJvbWEkMyA9IGNocm9tYV8xO1xuXG4gICAgdmFyIGJsZW5kID0gZnVuY3Rpb24gKGJvdHRvbSwgdG9wLCBtb2RlKSB7XG4gICAgICAgIGlmICghYmxlbmRbbW9kZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBibGVuZCBtb2RlICcgKyBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmxlbmRbbW9kZV0oYm90dG9tLCB0b3ApO1xuICAgIH07XG5cbiAgICB2YXIgYmxlbmRfZiA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBmdW5jdGlvbiAoYm90dG9tLHRvcCkge1xuICAgICAgICAgICAgdmFyIGMwID0gY2hyb21hJDModG9wKS5yZ2IoKTtcbiAgICAgICAgICAgIHZhciBjMSA9IGNocm9tYSQzKGJvdHRvbSkucmdiKCk7XG4gICAgICAgICAgICByZXR1cm4gY2hyb21hJDMucmdiKGYoYzAsIGMxKSk7XG4gICAgICAgIH07IH07XG5cbiAgICB2YXIgZWFjaCA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBmdW5jdGlvbiAoYzAsIGMxKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgICAgICBvdXRbMF0gPSBmKGMwWzBdLCBjMVswXSk7XG4gICAgICAgICAgICBvdXRbMV0gPSBmKGMwWzFdLCBjMVsxXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBmKGMwWzJdLCBjMVsyXSk7XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9OyB9O1xuXG4gICAgdmFyIG5vcm1hbCA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhOyB9O1xuICAgIHZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIGEgKiBiIC8gMjU1OyB9O1xuICAgIHZhciBkYXJrZW4gPSBmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhID4gYiA/IGIgOiBhOyB9O1xuICAgIHZhciBsaWdodGVuID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gYSA+IGIgPyBhIDogYjsgfTtcbiAgICB2YXIgc2NyZWVuID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gMjU1ICogKDEgLSAoMS1hLzI1NSkgKiAoMS1iLzI1NSkpOyB9O1xuICAgIHZhciBvdmVybGF5ID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gYiA8IDEyOCA/IDIgKiBhICogYiAvIDI1NSA6IDI1NSAqICgxIC0gMiAqICgxIC0gYSAvIDI1NSApICogKCAxIC0gYiAvIDI1NSApKTsgfTtcbiAgICB2YXIgYnVybiA9IGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIDI1NSAqICgxIC0gKDEgLSBiIC8gMjU1KSAvIChhLzI1NSkpOyB9O1xuICAgIHZhciBkb2RnZSA9IGZ1bmN0aW9uIChhLGIpIHtcbiAgICAgICAgaWYgKGEgPT09IDI1NSkgeyByZXR1cm4gMjU1OyB9XG4gICAgICAgIGEgPSAyNTUgKiAoYiAvIDI1NSkgLyAoMSAtIGEgLyAyNTUpO1xuICAgICAgICByZXR1cm4gYSA+IDI1NSA/IDI1NSA6IGFcbiAgICB9O1xuXG4gICAgLy8gIyBhZGQgPSAoYSxiKSAtPlxuICAgIC8vICMgICAgIGlmIChhICsgYiA+IDI1NSkgdGhlbiAyNTUgZWxzZSBhICsgYlxuXG4gICAgYmxlbmQubm9ybWFsID0gYmxlbmRfZihlYWNoKG5vcm1hbCkpO1xuICAgIGJsZW5kLm11bHRpcGx5ID0gYmxlbmRfZihlYWNoKG11bHRpcGx5KSk7XG4gICAgYmxlbmQuc2NyZWVuID0gYmxlbmRfZihlYWNoKHNjcmVlbikpO1xuICAgIGJsZW5kLm92ZXJsYXkgPSBibGVuZF9mKGVhY2gob3ZlcmxheSkpO1xuICAgIGJsZW5kLmRhcmtlbiA9IGJsZW5kX2YoZWFjaChkYXJrZW4pKTtcbiAgICBibGVuZC5saWdodGVuID0gYmxlbmRfZihlYWNoKGxpZ2h0ZW4pKTtcbiAgICBibGVuZC5kb2RnZSA9IGJsZW5kX2YoZWFjaChkb2RnZSkpO1xuICAgIGJsZW5kLmJ1cm4gPSBibGVuZF9mKGVhY2goYnVybikpO1xuICAgIC8vIGJsZW5kLmFkZCA9IGJsZW5kX2YoZWFjaChhZGQpKTtcblxuICAgIHZhciBibGVuZF8xID0gYmxlbmQ7XG5cbiAgICAvLyBjdWJlaGVsaXggaW50ZXJwb2xhdGlvblxuICAgIC8vIGJhc2VkIG9uIEQuQS4gR3JlZW4gXCJBIGNvbG91ciBzY2hlbWUgZm9yIHRoZSBkaXNwbGF5IG9mIGFzdHJvbm9taWNhbCBpbnRlbnNpdHkgaW1hZ2VzXCJcbiAgICAvLyBodHRwOi8vYXN0cm9uLXNvYy5pbi9idWxsZXRpbi8xMUp1bmUvMjg5MzkyMDExLnBkZlxuXG4gICAgdmFyIHR5cGUkMSA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIGNsaXBfcmdiID0gdXRpbHMuY2xpcF9yZ2I7XG4gICAgdmFyIFRXT1BJID0gdXRpbHMuVFdPUEk7XG4gICAgdmFyIHBvdyQyID0gTWF0aC5wb3c7XG4gICAgdmFyIHNpbiQxID0gTWF0aC5zaW47XG4gICAgdmFyIGNvcyQxID0gTWF0aC5jb3M7XG4gICAgdmFyIGNocm9tYSQyID0gY2hyb21hXzE7XG5cbiAgICB2YXIgY3ViZWhlbGl4ID0gZnVuY3Rpb24oc3RhcnQsIHJvdGF0aW9ucywgaHVlLCBnYW1tYSwgbGlnaHRuZXNzKSB7XG4gICAgICAgIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0PTMwMDtcbiAgICAgICAgaWYgKCByb3RhdGlvbnMgPT09IHZvaWQgMCApIHJvdGF0aW9ucz0tMS41O1xuICAgICAgICBpZiAoIGh1ZSA9PT0gdm9pZCAwICkgaHVlPTE7XG4gICAgICAgIGlmICggZ2FtbWEgPT09IHZvaWQgMCApIGdhbW1hPTE7XG4gICAgICAgIGlmICggbGlnaHRuZXNzID09PSB2b2lkIDAgKSBsaWdodG5lc3M9WzAsMV07XG5cbiAgICAgICAgdmFyIGRoID0gMCwgZGw7XG4gICAgICAgIGlmICh0eXBlJDEobGlnaHRuZXNzKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgZGwgPSBsaWdodG5lc3NbMV0gLSBsaWdodG5lc3NbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkbCA9IDA7XG4gICAgICAgICAgICBsaWdodG5lc3MgPSBbbGlnaHRuZXNzLCBsaWdodG5lc3NdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGYgPSBmdW5jdGlvbihmcmFjdCkge1xuICAgICAgICAgICAgdmFyIGEgPSBUV09QSSAqICgoKHN0YXJ0KzEyMCkvMzYwKSArIChyb3RhdGlvbnMgKiBmcmFjdCkpO1xuICAgICAgICAgICAgdmFyIGwgPSBwb3ckMihsaWdodG5lc3NbMF0gKyAoZGwgKiBmcmFjdCksIGdhbW1hKTtcbiAgICAgICAgICAgIHZhciBoID0gZGggIT09IDAgPyBodWVbMF0gKyAoZnJhY3QgKiBkaCkgOiBodWU7XG4gICAgICAgICAgICB2YXIgYW1wID0gKGggKiBsICogKDEtbCkpIC8gMjtcbiAgICAgICAgICAgIHZhciBjb3NfYSA9IGNvcyQxKGEpO1xuICAgICAgICAgICAgdmFyIHNpbl9hID0gc2luJDEoYSk7XG4gICAgICAgICAgICB2YXIgciA9IGwgKyAoYW1wICogKCgtMC4xNDg2MSAqIGNvc19hKSArICgxLjc4Mjc3KiBzaW5fYSkpKTtcbiAgICAgICAgICAgIHZhciBnID0gbCArIChhbXAgKiAoKC0wLjI5MjI3ICogY29zX2EpIC0gKDAuOTA2NDkqIHNpbl9hKSkpO1xuICAgICAgICAgICAgdmFyIGIgPSBsICsgKGFtcCAqICgrMS45NzI5NCAqIGNvc19hKSk7XG4gICAgICAgICAgICByZXR1cm4gY2hyb21hJDIoY2xpcF9yZ2IoW3IqMjU1LGcqMjU1LGIqMjU1LDFdKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5zdGFydCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIGlmICgocyA9PSBudWxsKSkgeyByZXR1cm4gc3RhcnQ7IH1cbiAgICAgICAgICAgIHN0YXJ0ID0gcztcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYucm90YXRpb25zID0gZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgaWYgKChyID09IG51bGwpKSB7IHJldHVybiByb3RhdGlvbnM7IH1cbiAgICAgICAgICAgIHJvdGF0aW9ucyA9IHI7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLmdhbW1hID0gZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgaWYgKChnID09IG51bGwpKSB7IHJldHVybiBnYW1tYTsgfVxuICAgICAgICAgICAgZ2FtbWEgPSBnO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5odWUgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBpZiAoKGggPT0gbnVsbCkpIHsgcmV0dXJuIGh1ZTsgfVxuICAgICAgICAgICAgaHVlID0gaDtcbiAgICAgICAgICAgIGlmICh0eXBlJDEoaHVlKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgIGRoID0gaHVlWzFdIC0gaHVlWzBdO1xuICAgICAgICAgICAgICAgIGlmIChkaCA9PT0gMCkgeyBodWUgPSBodWVbMV07IH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5saWdodG5lc3MgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBpZiAoKGggPT0gbnVsbCkpIHsgcmV0dXJuIGxpZ2h0bmVzczsgfVxuICAgICAgICAgICAgaWYgKHR5cGUkMShoKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgIGxpZ2h0bmVzcyA9IGg7XG4gICAgICAgICAgICAgICAgZGwgPSBoWzFdIC0gaFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlnaHRuZXNzID0gW2gsaF07XG4gICAgICAgICAgICAgICAgZGwgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5zY2FsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNocm9tYSQyLnNjYWxlKGYpOyB9O1xuXG4gICAgICAgIGYuaHVlKGh1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGY7XG4gICAgfTtcblxuICAgIHZhciBDb2xvciQ0ID0gQ29sb3JfMTtcbiAgICB2YXIgZGlnaXRzID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuXG4gICAgdmFyIGZsb29yJDEgPSBNYXRoLmZsb29yO1xuICAgIHZhciByYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuICAgIHZhciByYW5kb21fMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvZGUgPSAnIyc7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTw2OyBpKyspIHtcbiAgICAgICAgICAgIGNvZGUgKz0gZGlnaXRzLmNoYXJBdChmbG9vciQxKHJhbmRvbSgpICogMTYpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbG9yJDQoY29kZSwgJ2hleCcpO1xuICAgIH07XG5cbiAgICB2YXIgdHlwZSA9IHR5cGUkcDtcbiAgICB2YXIgbG9nID0gTWF0aC5sb2c7XG4gICAgdmFyIHBvdyQxID0gTWF0aC5wb3c7XG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuXG4gICAgdmFyIGFuYWx5emUgPSBmdW5jdGlvbiAoZGF0YSwga2V5KSB7XG4gICAgICAgIGlmICgga2V5ID09PSB2b2lkIDAgKSBrZXk9bnVsbDtcblxuICAgICAgICB2YXIgciA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICAgIG1heDogTnVtYmVyLk1BWF9WQUxVRSotMSxcbiAgICAgICAgICAgIHN1bTogMCxcbiAgICAgICAgICAgIHZhbHVlczogW10sXG4gICAgICAgICAgICBjb3VudDogMFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZShkYXRhKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGRhdGEgPSBPYmplY3QudmFsdWVzKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICYmIHR5cGUodmFsKSA9PT0gJ29iamVjdCcpIHsgdmFsID0gdmFsW2tleV07IH1cbiAgICAgICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwgJiYgIWlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByLnZhbHVlcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICAgICAgci5zdW0gKz0gdmFsO1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPCByLm1pbikgeyByLm1pbiA9IHZhbDsgfVxuICAgICAgICAgICAgICAgIGlmICh2YWwgPiByLm1heCkgeyByLm1heCA9IHZhbDsgfVxuICAgICAgICAgICAgICAgIHIuY291bnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgci5kb21haW4gPSBbci5taW4sIHIubWF4XTtcblxuICAgICAgICByLmxpbWl0cyA9IGZ1bmN0aW9uIChtb2RlLCBudW0pIHsgcmV0dXJuIGxpbWl0cyhyLCBtb2RlLCBudW0pOyB9O1xuXG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG5cblxuICAgIHZhciBsaW1pdHMgPSBmdW5jdGlvbiAoZGF0YSwgbW9kZSwgbnVtKSB7XG4gICAgICAgIGlmICggbW9kZSA9PT0gdm9pZCAwICkgbW9kZT0nZXF1YWwnO1xuICAgICAgICBpZiAoIG51bSA9PT0gdm9pZCAwICkgbnVtPTc7XG5cbiAgICAgICAgaWYgKHR5cGUoZGF0YSkgPT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgZGF0YSA9IGFuYWx5emUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1pbiA9IGRhdGEubWluO1xuICAgICAgICB2YXIgbWF4ID0gZGF0YS5tYXg7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBkYXRhLnZhbHVlcy5zb3J0KGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIGEtYjsgfSk7XG5cbiAgICAgICAgaWYgKG51bSA9PT0gMSkgeyByZXR1cm4gW21pbixtYXhdOyB9XG5cbiAgICAgICAgdmFyIGxpbWl0cyA9IFtdO1xuXG4gICAgICAgIGlmIChtb2RlLnN1YnN0cigwLDEpID09PSAnYycpIHsgLy8gY29udGludW91c1xuICAgICAgICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kZS5zdWJzdHIoMCwxKSA9PT0gJ2UnKSB7IC8vIGVxdWFsIGludGVydmFsXG4gICAgICAgICAgICBsaW1pdHMucHVzaChtaW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0xOyBpPG51bTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGltaXRzLnB1c2gobWluKygoaS9udW0pKihtYXgtbWluKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKG1vZGUuc3Vic3RyKDAsMSkgPT09ICdsJykgeyAvLyBsb2cgc2NhbGVcbiAgICAgICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTG9nYXJpdGhtaWMgc2NhbGVzIGFyZSBvbmx5IHBvc3NpYmxlIGZvciB2YWx1ZXMgPiAwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWluX2xvZyA9IE1hdGguTE9HMTBFICogbG9nKG1pbik7XG4gICAgICAgICAgICB2YXIgbWF4X2xvZyA9IE1hdGguTE9HMTBFICogbG9nKG1heCk7XG4gICAgICAgICAgICBsaW1pdHMucHVzaChtaW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxPTE7IGkkMTxudW07IGkkMSsrKSB7XG4gICAgICAgICAgICAgICAgbGltaXRzLnB1c2gocG93JDEoMTAsIG1pbl9sb2cgKyAoKGkkMS9udW0pICogKG1heF9sb2cgLSBtaW5fbG9nKSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChtb2RlLnN1YnN0cigwLDEpID09PSAncScpIHsgLy8gcXVhbnRpbGUgc2NhbGVcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbik7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDI9MTsgaSQyPG51bTsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9ICgodmFsdWVzLmxlbmd0aC0xKSAqIGkkMikvbnVtO1xuICAgICAgICAgICAgICAgIHZhciBwYiA9IGZsb29yKHApO1xuICAgICAgICAgICAgICAgIGlmIChwYiA9PT0gcCkge1xuICAgICAgICAgICAgICAgICAgICBsaW1pdHMucHVzaCh2YWx1ZXNbcGJdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBwID4gcGJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByID0gcCAtIHBiO1xuICAgICAgICAgICAgICAgICAgICBsaW1pdHMucHVzaCgodmFsdWVzW3BiXSooMS1wcikpICsgKHZhbHVlc1twYisxXSpwcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKG1vZGUuc3Vic3RyKDAsMSkgPT09ICdrJykgeyAvLyBrLW1lYW5zIGNsdXN0ZXJpbmdcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiBiYXNlZCBvblxuICAgICAgICAgICAgaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2ZpZ3VlL3NvdXJjZS9icm93c2UvdHJ1bmsvZmlndWUuanMjMzM2XG4gICAgICAgICAgICBzaW1wbGlmaWVkIGZvciAxLWQgaW5wdXQgdmFsdWVzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGNsdXN0ZXI7XG4gICAgICAgICAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgYXNzaWdubWVudHMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgICAgICB2YXIgY2x1c3RlclNpemVzID0gbmV3IEFycmF5KG51bSk7XG4gICAgICAgICAgICB2YXIgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBuYl9pdGVycyA9IDA7XG4gICAgICAgICAgICB2YXIgY2VudHJvaWRzID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gZ2V0IHNlZWQgdmFsdWVzXG4gICAgICAgICAgICBjZW50cm9pZHMgPSBbXTtcbiAgICAgICAgICAgIGNlbnRyb2lkcy5wdXNoKG1pbik7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDM9MTsgaSQzPG51bTsgaSQzKyspIHtcbiAgICAgICAgICAgICAgICBjZW50cm9pZHMucHVzaChtaW4gKyAoKGkkMy9udW0pICogKG1heC1taW4pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZW50cm9pZHMucHVzaChtYXgpO1xuXG4gICAgICAgICAgICB3aGlsZSAocmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgLy8gYXNzaWdubWVudCBzdGVwXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaj0wOyBqPG51bTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJTaXplc1tqXSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkND0wOyBpJDQ8bjsgaSQ0KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzW2kkNF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW5kaXN0ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3QgPSAodm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiQxPTA7IGokMTxudW07IGokMSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdCA9IGFicyQxKGNlbnRyb2lkc1tqJDFdLXZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0IDwgbWluZGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmRpc3QgPSBkaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3QgPSBqJDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHVzdGVyU2l6ZXNbYmVzdF0rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnRzW2kkNF0gPSBiZXN0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGNlbnRyb2lkcyBzdGVwXG4gICAgICAgICAgICAgICAgdmFyIG5ld0NlbnRyb2lkcyA9IG5ldyBBcnJheShudW0pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGokMj0wOyBqJDI8bnVtOyBqJDIrKykge1xuICAgICAgICAgICAgICAgICAgICBuZXdDZW50cm9pZHNbaiQyXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkNT0wOyBpJDU8bjsgaSQ1KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2x1c3RlciA9IGFzc2lnbm1lbnRzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdDZW50cm9pZHNbY2x1c3Rlcl0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbnRyb2lkc1tjbHVzdGVyXSA9IHZhbHVlc1tpJDVdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VudHJvaWRzW2NsdXN0ZXJdICs9IHZhbHVlc1tpJDVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGokMz0wOyBqJDM8bnVtOyBqJDMrKykge1xuICAgICAgICAgICAgICAgICAgICBuZXdDZW50cm9pZHNbaiQzXSAqPSAxL2NsdXN0ZXJTaXplc1tqJDNdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGNvbnZlcmdlbmNlXG4gICAgICAgICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiQ0PTA7IGokNDxudW07IGokNCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdDZW50cm9pZHNbaiQ0XSAhPT0gY2VudHJvaWRzW2okNF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNlbnRyb2lkcyA9IG5ld0NlbnRyb2lkcztcbiAgICAgICAgICAgICAgICBuYl9pdGVycysrO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5iX2l0ZXJzID4gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZmluaXNoZWQgay1tZWFucyBjbHVzdGVyaW5nXG4gICAgICAgICAgICAvLyB0aGUgbmV4dCBwYXJ0IGlzIGJvcnJvd2VkIGZyb20gZ2FicmllbGZsb3IuaXRcbiAgICAgICAgICAgIHZhciBrQ2x1c3RlcnMgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGokNT0wOyBqJDU8bnVtOyBqJDUrKykge1xuICAgICAgICAgICAgICAgIGtDbHVzdGVyc1tqJDVdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpJDY9MDsgaSQ2PG47IGkkNisrKSB7XG4gICAgICAgICAgICAgICAgY2x1c3RlciA9IGFzc2lnbm1lbnRzW2kkNl07XG4gICAgICAgICAgICAgICAga0NsdXN0ZXJzW2NsdXN0ZXJdLnB1c2godmFsdWVzW2kkNl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRtcEtNZWFuc0JyZWFrcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiQ2PTA7IGokNjxudW07IGokNisrKSB7XG4gICAgICAgICAgICAgICAgdG1wS01lYW5zQnJlYWtzLnB1c2goa0NsdXN0ZXJzW2okNl1bMF0pO1xuICAgICAgICAgICAgICAgIHRtcEtNZWFuc0JyZWFrcy5wdXNoKGtDbHVzdGVyc1tqJDZdW2tDbHVzdGVyc1tqJDZdLmxlbmd0aC0xXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0bXBLTWVhbnNCcmVha3MgPSB0bXBLTWVhbnNCcmVha3Muc29ydChmdW5jdGlvbiAoYSxiKXsgcmV0dXJuIGEtYjsgfSk7XG4gICAgICAgICAgICBsaW1pdHMucHVzaCh0bXBLTWVhbnNCcmVha3NbMF0pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQ3PTE7IGkkNyA8IHRtcEtNZWFuc0JyZWFrcy5sZW5ndGg7IGkkNys9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IHRtcEtNZWFuc0JyZWFrc1tpJDddO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odikgJiYgKGxpbWl0cy5pbmRleE9mKHYpID09PSAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRzLnB1c2godik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW1pdHM7XG4gICAgfTtcblxuICAgIHZhciBhbmFseXplXzEgPSB7YW5hbHl6ZTogYW5hbHl6ZSwgbGltaXRzOiBsaW1pdHN9O1xuXG4gICAgdmFyIENvbG9yJDMgPSBDb2xvcl8xO1xuXG5cbiAgICB2YXIgY29udHJhc3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAvLyBXQ0FHIGNvbnRyYXN0IHJhdGlvXG4gICAgICAgIC8vIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmXG4gICAgICAgIGEgPSBuZXcgQ29sb3IkMyhhKTtcbiAgICAgICAgYiA9IG5ldyBDb2xvciQzKGIpO1xuICAgICAgICB2YXIgbDEgPSBhLmx1bWluYW5jZSgpO1xuICAgICAgICB2YXIgbDIgPSBiLmx1bWluYW5jZSgpO1xuICAgICAgICByZXR1cm4gbDEgPiBsMiA/IChsMSArIDAuMDUpIC8gKGwyICsgMC4wNSkgOiAobDIgKyAwLjA1KSAvIChsMSArIDAuMDUpO1xuICAgIH07XG5cbiAgICB2YXIgQ29sb3IkMiA9IENvbG9yXzE7XG4gICAgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG4gICAgdmFyIHBvdyA9IE1hdGgucG93O1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbjtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXg7XG4gICAgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbiAgICB2YXIgYWJzID0gTWF0aC5hYnM7XG4gICAgdmFyIGNvcyA9IE1hdGguY29zO1xuICAgIHZhciBzaW4gPSBNYXRoLnNpbjtcbiAgICB2YXIgZXhwID0gTWF0aC5leHA7XG4gICAgdmFyIFBJID0gTWF0aC5QSTtcblxuICAgIHZhciBkZWx0YUUgPSBmdW5jdGlvbihhLCBiLCBLbCwgS2MsIEtoKSB7XG4gICAgICAgIGlmICggS2wgPT09IHZvaWQgMCApIEtsPTE7XG4gICAgICAgIGlmICggS2MgPT09IHZvaWQgMCApIEtjPTE7XG4gICAgICAgIGlmICggS2ggPT09IHZvaWQgMCApIEtoPTE7XG5cbiAgICAgICAgLy8gRGVsdGEgRSAoQ0lFIDIwMDApXG4gICAgICAgIC8vIHNlZSBodHRwOi8vd3d3LmJydWNlbGluZGJsb29tLmNvbS9pbmRleC5odG1sP0Vxbl9EZWx0YUVfQ0lFMjAwMC5odG1sXG4gICAgICAgIHZhciByYWQyZGVnID0gZnVuY3Rpb24ocmFkKSB7XG4gICAgICAgICAgICByZXR1cm4gMzYwICogcmFkIC8gKDIgKiBQSSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkZWcycmFkID0gZnVuY3Rpb24oZGVnKSB7XG4gICAgICAgICAgICByZXR1cm4gKDIgKiBQSSAqIGRlZykgLyAzNjA7XG4gICAgICAgIH07XG4gICAgICAgIGEgPSBuZXcgQ29sb3IkMihhKTtcbiAgICAgICAgYiA9IG5ldyBDb2xvciQyKGIpO1xuICAgICAgICB2YXIgcmVmID0gQXJyYXkuZnJvbShhLmxhYigpKTtcbiAgICAgICAgdmFyIEwxID0gcmVmWzBdO1xuICAgICAgICB2YXIgYTEgPSByZWZbMV07XG4gICAgICAgIHZhciBiMSA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gQXJyYXkuZnJvbShiLmxhYigpKTtcbiAgICAgICAgdmFyIEwyID0gcmVmJDFbMF07XG4gICAgICAgIHZhciBhMiA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYjIgPSByZWYkMVsyXTtcbiAgICAgICAgdmFyIGF2Z0wgPSAoTDEgKyBMMikvMjtcbiAgICAgICAgdmFyIEMxID0gc3FydChwb3coYTEsIDIpICsgcG93KGIxLCAyKSk7XG4gICAgICAgIHZhciBDMiA9IHNxcnQocG93KGEyLCAyKSArIHBvdyhiMiwgMikpO1xuICAgICAgICB2YXIgYXZnQyA9IChDMSArIEMyKS8yO1xuICAgICAgICB2YXIgRyA9IDAuNSooMS1zcXJ0KHBvdyhhdmdDLCA3KS8ocG93KGF2Z0MsIDcpICsgcG93KDI1LCA3KSkpKTtcbiAgICAgICAgdmFyIGExcCA9IGExKigxK0cpO1xuICAgICAgICB2YXIgYTJwID0gYTIqKDErRyk7XG4gICAgICAgIHZhciBDMXAgPSBzcXJ0KHBvdyhhMXAsIDIpICsgcG93KGIxLCAyKSk7XG4gICAgICAgIHZhciBDMnAgPSBzcXJ0KHBvdyhhMnAsIDIpICsgcG93KGIyLCAyKSk7XG4gICAgICAgIHZhciBhdmdDcCA9IChDMXAgKyBDMnApLzI7XG4gICAgICAgIHZhciBhcmN0YW4xID0gcmFkMmRlZyhhdGFuMihiMSwgYTFwKSk7XG4gICAgICAgIHZhciBhcmN0YW4yID0gcmFkMmRlZyhhdGFuMihiMiwgYTJwKSk7XG4gICAgICAgIHZhciBoMXAgPSBhcmN0YW4xID49IDAgPyBhcmN0YW4xIDogYXJjdGFuMSArIDM2MDtcbiAgICAgICAgdmFyIGgycCA9IGFyY3RhbjIgPj0gMCA/IGFyY3RhbjIgOiBhcmN0YW4yICsgMzYwO1xuICAgICAgICB2YXIgYXZnSHAgPSBhYnMoaDFwIC0gaDJwKSA+IDE4MCA/IChoMXAgKyBoMnAgKyAzNjApLzIgOiAoaDFwICsgaDJwKS8yO1xuICAgICAgICB2YXIgVCA9IDEgLSAwLjE3KmNvcyhkZWcycmFkKGF2Z0hwIC0gMzApKSArIDAuMjQqY29zKGRlZzJyYWQoMiphdmdIcCkpICsgMC4zMipjb3MoZGVnMnJhZCgzKmF2Z0hwICsgNikpIC0gMC4yKmNvcyhkZWcycmFkKDQqYXZnSHAgLSA2MykpO1xuICAgICAgICB2YXIgZGVsdGFIcCA9IGgycCAtIGgxcDtcbiAgICAgICAgZGVsdGFIcCA9IGFicyhkZWx0YUhwKSA8PSAxODAgPyBkZWx0YUhwIDogaDJwIDw9IGgxcCA/IGRlbHRhSHAgKyAzNjAgOiBkZWx0YUhwIC0gMzYwO1xuICAgICAgICBkZWx0YUhwID0gMipzcXJ0KEMxcCpDMnApKnNpbihkZWcycmFkKGRlbHRhSHApLzIpO1xuICAgICAgICB2YXIgZGVsdGFMID0gTDIgLSBMMTtcbiAgICAgICAgdmFyIGRlbHRhQ3AgPSBDMnAgLSBDMXA7ICAgIFxuICAgICAgICB2YXIgc2wgPSAxICsgKDAuMDE1KnBvdyhhdmdMIC0gNTAsIDIpKS9zcXJ0KDIwICsgcG93KGF2Z0wgLSA1MCwgMikpO1xuICAgICAgICB2YXIgc2MgPSAxICsgMC4wNDUqYXZnQ3A7XG4gICAgICAgIHZhciBzaCA9IDEgKyAwLjAxNSphdmdDcCpUO1xuICAgICAgICB2YXIgZGVsdGFUaGV0YSA9IDMwKmV4cCgtcG93KChhdmdIcCAtIDI3NSkvMjUsIDIpKTtcbiAgICAgICAgdmFyIFJjID0gMipzcXJ0KHBvdyhhdmdDcCwgNykvKHBvdyhhdmdDcCwgNykgKyBwb3coMjUsIDcpKSk7XG4gICAgICAgIHZhciBSdCA9IC1SYypzaW4oMipkZWcycmFkKGRlbHRhVGhldGEpKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHNxcnQocG93KGRlbHRhTC8oS2wqc2wpLCAyKSArIHBvdyhkZWx0YUNwLyhLYypzYyksIDIpICsgcG93KGRlbHRhSHAvKEtoKnNoKSwgMikgKyBSdCooZGVsdGFDcC8oS2Mqc2MpKSooZGVsdGFIcC8oS2gqc2gpKSk7XG4gICAgICAgIHJldHVybiBtYXgoMCwgbWluKDEwMCwgcmVzdWx0KSk7XG4gICAgfTtcblxuICAgIHZhciBDb2xvciQxID0gQ29sb3JfMTtcblxuICAgIC8vIHNpbXBsZSBFdWNsaWRlYW4gZGlzdGFuY2VcbiAgICB2YXIgZGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiLCBtb2RlKSB7XG4gICAgICAgIGlmICggbW9kZSA9PT0gdm9pZCAwICkgbW9kZT0nbGFiJztcblxuICAgICAgICAvLyBEZWx0YSBFIChDSUUgMTk3NilcbiAgICAgICAgLy8gc2VlIGh0dHA6Ly93d3cuYnJ1Y2VsaW5kYmxvb20uY29tL2luZGV4Lmh0bWw/RXF1YXRpb25zLmh0bWxcbiAgICAgICAgYSA9IG5ldyBDb2xvciQxKGEpO1xuICAgICAgICBiID0gbmV3IENvbG9yJDEoYik7XG4gICAgICAgIHZhciBsMSA9IGEuZ2V0KG1vZGUpO1xuICAgICAgICB2YXIgbDIgPSBiLmdldChtb2RlKTtcbiAgICAgICAgdmFyIHN1bV9zcSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgaW4gbDEpIHtcbiAgICAgICAgICAgIHZhciBkID0gKGwxW2ldIHx8IDApIC0gKGwyW2ldIHx8IDApO1xuICAgICAgICAgICAgc3VtX3NxICs9IGQqZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHN1bV9zcSk7XG4gICAgfTtcblxuICAgIHZhciBDb2xvciA9IENvbG9yXzE7XG5cbiAgICB2YXIgdmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MpICkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzb21lIHByZS1kZWZpbmVkIGNvbG9yIHNjYWxlczpcbiAgICB2YXIgY2hyb21hJDEgPSBjaHJvbWFfMTtcblxuICAgIHZhciBzY2FsZSA9IHNjYWxlJDI7XG5cbiAgICB2YXIgc2NhbGVzID0ge1xuICAgIFx0Y29vbDogZnVuY3Rpb24gY29vbCgpIHsgcmV0dXJuIHNjYWxlKFtjaHJvbWEkMS5oc2woMTgwLDEsLjkpLCBjaHJvbWEkMS5oc2woMjUwLC43LC40KV0pIH0sXG4gICAgXHRob3Q6IGZ1bmN0aW9uIGhvdCgpIHsgcmV0dXJuIHNjYWxlKFsnIzAwMCcsJyNmMDAnLCcjZmYwJywnI2ZmZiddKS5tb2RlKCdyZ2InKSB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAgICBDb2xvckJyZXdlciBjb2xvcnMgZm9yIGNocm9tYS5qc1xuXG4gICAgICAgIENvcHlyaWdodCAoYykgMjAwMiBDeW50aGlhIEJyZXdlciwgTWFyayBIYXJyb3dlciwgYW5kIFRoZVxuICAgICAgICBQZW5uc3lsdmFuaWEgU3RhdGUgVW5pdmVyc2l0eS5cblxuICAgICAgICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICAgICAgICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkXG4gICAgICAgIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SXG4gICAgICAgIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gICAgICAgIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgKi9cblxuICAgIHZhciBjb2xvcmJyZXdlciA9IHtcbiAgICAgICAgLy8gc2VxdWVudGlhbFxuICAgICAgICBPclJkOiBbJyNmZmY3ZWMnLCAnI2ZlZThjOCcsICcjZmRkNDllJywgJyNmZGJiODQnLCAnI2ZjOGQ1OScsICcjZWY2NTQ4JywgJyNkNzMwMWYnLCAnI2IzMDAwMCcsICcjN2YwMDAwJ10sXG4gICAgICAgIFB1QnU6IFsnI2ZmZjdmYicsICcjZWNlN2YyJywgJyNkMGQxZTYnLCAnI2E2YmRkYicsICcjNzRhOWNmJywgJyMzNjkwYzAnLCAnIzA1NzBiMCcsICcjMDQ1YThkJywgJyMwMjM4NTgnXSxcbiAgICAgICAgQnVQdTogWycjZjdmY2ZkJywgJyNlMGVjZjQnLCAnI2JmZDNlNicsICcjOWViY2RhJywgJyM4Yzk2YzYnLCAnIzhjNmJiMScsICcjODg0MTlkJywgJyM4MTBmN2MnLCAnIzRkMDA0YiddLFxuICAgICAgICBPcmFuZ2VzOiBbJyNmZmY1ZWInLCAnI2ZlZTZjZScsICcjZmRkMGEyJywgJyNmZGFlNmInLCAnI2ZkOGQzYycsICcjZjE2OTEzJywgJyNkOTQ4MDEnLCAnI2E2MzYwMycsICcjN2YyNzA0J10sXG4gICAgICAgIEJ1R246IFsnI2Y3ZmNmZCcsICcjZTVmNWY5JywgJyNjY2VjZTYnLCAnIzk5ZDhjOScsICcjNjZjMmE0JywgJyM0MWFlNzYnLCAnIzIzOGI0NScsICcjMDA2ZDJjJywgJyMwMDQ0MWInXSxcbiAgICAgICAgWWxPckJyOiBbJyNmZmZmZTUnLCAnI2ZmZjdiYycsICcjZmVlMzkxJywgJyNmZWM0NGYnLCAnI2ZlOTkyOScsICcjZWM3MDE0JywgJyNjYzRjMDInLCAnIzk5MzQwNCcsICcjNjYyNTA2J10sXG4gICAgICAgIFlsR246IFsnI2ZmZmZlNScsICcjZjdmY2I5JywgJyNkOWYwYTMnLCAnI2FkZGQ4ZScsICcjNzhjNjc5JywgJyM0MWFiNWQnLCAnIzIzODQ0MycsICcjMDA2ODM3JywgJyMwMDQ1MjknXSxcbiAgICAgICAgUmVkczogWycjZmZmNWYwJywgJyNmZWUwZDInLCAnI2ZjYmJhMScsICcjZmM5MjcyJywgJyNmYjZhNGEnLCAnI2VmM2IyYycsICcjY2IxODFkJywgJyNhNTBmMTUnLCAnIzY3MDAwZCddLFxuICAgICAgICBSZFB1OiBbJyNmZmY3ZjMnLCAnI2ZkZTBkZCcsICcjZmNjNWMwJywgJyNmYTlmYjUnLCAnI2Y3NjhhMScsICcjZGQzNDk3JywgJyNhZTAxN2UnLCAnIzdhMDE3NycsICcjNDkwMDZhJ10sXG4gICAgICAgIEdyZWVuczogWycjZjdmY2Y1JywgJyNlNWY1ZTAnLCAnI2M3ZTljMCcsICcjYTFkOTliJywgJyM3NGM0NzYnLCAnIzQxYWI1ZCcsICcjMjM4YjQ1JywgJyMwMDZkMmMnLCAnIzAwNDQxYiddLFxuICAgICAgICBZbEduQnU6IFsnI2ZmZmZkOScsICcjZWRmOGIxJywgJyNjN2U5YjQnLCAnIzdmY2RiYicsICcjNDFiNmM0JywgJyMxZDkxYzAnLCAnIzIyNWVhOCcsICcjMjUzNDk0JywgJyMwODFkNTgnXSxcbiAgICAgICAgUHVycGxlczogWycjZmNmYmZkJywgJyNlZmVkZjUnLCAnI2RhZGFlYicsICcjYmNiZGRjJywgJyM5ZTlhYzgnLCAnIzgwN2RiYScsICcjNmE1MWEzJywgJyM1NDI3OGYnLCAnIzNmMDA3ZCddLFxuICAgICAgICBHbkJ1OiBbJyNmN2ZjZjAnLCAnI2UwZjNkYicsICcjY2NlYmM1JywgJyNhOGRkYjUnLCAnIzdiY2NjNCcsICcjNGViM2QzJywgJyMyYjhjYmUnLCAnIzA4NjhhYycsICcjMDg0MDgxJ10sXG4gICAgICAgIEdyZXlzOiBbJyNmZmZmZmYnLCAnI2YwZjBmMCcsICcjZDlkOWQ5JywgJyNiZGJkYmQnLCAnIzk2OTY5NicsICcjNzM3MzczJywgJyM1MjUyNTInLCAnIzI1MjUyNScsICcjMDAwMDAwJ10sXG4gICAgICAgIFlsT3JSZDogWycjZmZmZmNjJywgJyNmZmVkYTAnLCAnI2ZlZDk3NicsICcjZmViMjRjJywgJyNmZDhkM2MnLCAnI2ZjNGUyYScsICcjZTMxYTFjJywgJyNiZDAwMjYnLCAnIzgwMDAyNiddLFxuICAgICAgICBQdVJkOiBbJyNmN2Y0ZjknLCAnI2U3ZTFlZicsICcjZDRiOWRhJywgJyNjOTk0YzcnLCAnI2RmNjViMCcsICcjZTcyOThhJywgJyNjZTEyNTYnLCAnIzk4MDA0MycsICcjNjcwMDFmJ10sXG4gICAgICAgIEJsdWVzOiBbJyNmN2ZiZmYnLCAnI2RlZWJmNycsICcjYzZkYmVmJywgJyM5ZWNhZTEnLCAnIzZiYWVkNicsICcjNDI5MmM2JywgJyMyMTcxYjUnLCAnIzA4NTE5YycsICcjMDgzMDZiJ10sXG4gICAgICAgIFB1QnVHbjogWycjZmZmN2ZiJywgJyNlY2UyZjAnLCAnI2QwZDFlNicsICcjYTZiZGRiJywgJyM2N2E5Y2YnLCAnIzM2OTBjMCcsICcjMDI4MThhJywgJyMwMTZjNTknLCAnIzAxNDYzNiddLFxuICAgICAgICBWaXJpZGlzOiBbJyM0NDAxNTQnLCAnIzQ4Mjc3NycsICcjM2Y0YThhJywgJyMzMTY3OGUnLCAnIzI2ODM4ZicsICcjMWY5ZDhhJywgJyM2Y2NlNWEnLCAnI2I2ZGUyYicsICcjZmVlODI1J10sXG5cbiAgICAgICAgLy8gZGl2ZXJnaW5nXG5cbiAgICAgICAgU3BlY3RyYWw6IFsnIzllMDE0MicsICcjZDUzZTRmJywgJyNmNDZkNDMnLCAnI2ZkYWU2MScsICcjZmVlMDhiJywgJyNmZmZmYmYnLCAnI2U2ZjU5OCcsICcjYWJkZGE0JywgJyM2NmMyYTUnLCAnIzMyODhiZCcsICcjNWU0ZmEyJ10sXG4gICAgICAgIFJkWWxHbjogWycjYTUwMDI2JywgJyNkNzMwMjcnLCAnI2Y0NmQ0MycsICcjZmRhZTYxJywgJyNmZWUwOGInLCAnI2ZmZmZiZicsICcjZDllZjhiJywgJyNhNmQ5NmEnLCAnIzY2YmQ2MycsICcjMWE5ODUwJywgJyMwMDY4MzcnXSxcbiAgICAgICAgUmRCdTogWycjNjcwMDFmJywgJyNiMjE4MmInLCAnI2Q2NjA0ZCcsICcjZjRhNTgyJywgJyNmZGRiYzcnLCAnI2Y3ZjdmNycsICcjZDFlNWYwJywgJyM5MmM1ZGUnLCAnIzQzOTNjMycsICcjMjE2NmFjJywgJyMwNTMwNjEnXSxcbiAgICAgICAgUGlZRzogWycjOGUwMTUyJywgJyNjNTFiN2QnLCAnI2RlNzdhZScsICcjZjFiNmRhJywgJyNmZGUwZWYnLCAnI2Y3ZjdmNycsICcjZTZmNWQwJywgJyNiOGUxODYnLCAnIzdmYmM0MScsICcjNGQ5MjIxJywgJyMyNzY0MTknXSxcbiAgICAgICAgUFJHbjogWycjNDAwMDRiJywgJyM3NjJhODMnLCAnIzk5NzBhYicsICcjYzJhNWNmJywgJyNlN2Q0ZTgnLCAnI2Y3ZjdmNycsICcjZDlmMGQzJywgJyNhNmRiYTAnLCAnIzVhYWU2MScsICcjMWI3ODM3JywgJyMwMDQ0MWInXSxcbiAgICAgICAgUmRZbEJ1OiBbJyNhNTAwMjYnLCAnI2Q3MzAyNycsICcjZjQ2ZDQzJywgJyNmZGFlNjEnLCAnI2ZlZTA5MCcsICcjZmZmZmJmJywgJyNlMGYzZjgnLCAnI2FiZDllOScsICcjNzRhZGQxJywgJyM0NTc1YjQnLCAnIzMxMzY5NSddLFxuICAgICAgICBCckJHOiBbJyM1NDMwMDUnLCAnIzhjNTEwYScsICcjYmY4MTJkJywgJyNkZmMyN2QnLCAnI2Y2ZThjMycsICcjZjVmNWY1JywgJyNjN2VhZTUnLCAnIzgwY2RjMScsICcjMzU5NzhmJywgJyMwMTY2NWUnLCAnIzAwM2MzMCddLFxuICAgICAgICBSZEd5OiBbJyM2NzAwMWYnLCAnI2IyMTgyYicsICcjZDY2MDRkJywgJyNmNGE1ODInLCAnI2ZkZGJjNycsICcjZmZmZmZmJywgJyNlMGUwZTAnLCAnI2JhYmFiYScsICcjODc4Nzg3JywgJyM0ZDRkNGQnLCAnIzFhMWExYSddLFxuICAgICAgICBQdU9yOiBbJyM3ZjNiMDgnLCAnI2IzNTgwNicsICcjZTA4MjE0JywgJyNmZGI4NjMnLCAnI2ZlZTBiNicsICcjZjdmN2Y3JywgJyNkOGRhZWInLCAnI2IyYWJkMicsICcjODA3M2FjJywgJyM1NDI3ODgnLCAnIzJkMDA0YiddLFxuXG4gICAgICAgIC8vIHF1YWxpdGF0aXZlXG5cbiAgICAgICAgU2V0MjogWycjNjZjMmE1JywgJyNmYzhkNjInLCAnIzhkYTBjYicsICcjZTc4YWMzJywgJyNhNmQ4NTQnLCAnI2ZmZDkyZicsICcjZTVjNDk0JywgJyNiM2IzYjMnXSxcbiAgICAgICAgQWNjZW50OiBbJyM3ZmM5N2YnLCAnI2JlYWVkNCcsICcjZmRjMDg2JywgJyNmZmZmOTknLCAnIzM4NmNiMCcsICcjZjAwMjdmJywgJyNiZjViMTcnLCAnIzY2NjY2NiddLFxuICAgICAgICBTZXQxOiBbJyNlNDFhMWMnLCAnIzM3N2ViOCcsICcjNGRhZjRhJywgJyM5ODRlYTMnLCAnI2ZmN2YwMCcsICcjZmZmZjMzJywgJyNhNjU2MjgnLCAnI2Y3ODFiZicsICcjOTk5OTk5J10sXG4gICAgICAgIFNldDM6IFsnIzhkZDNjNycsICcjZmZmZmIzJywgJyNiZWJhZGEnLCAnI2ZiODA3MicsICcjODBiMWQzJywgJyNmZGI0NjInLCAnI2IzZGU2OScsICcjZmNjZGU1JywgJyNkOWQ5ZDknLCAnI2JjODBiZCcsICcjY2NlYmM1JywgJyNmZmVkNmYnXSxcbiAgICAgICAgRGFyazI6IFsnIzFiOWU3NycsICcjZDk1ZjAyJywgJyM3NTcwYjMnLCAnI2U3Mjk4YScsICcjNjZhNjFlJywgJyNlNmFiMDInLCAnI2E2NzYxZCcsICcjNjY2NjY2J10sXG4gICAgICAgIFBhaXJlZDogWycjYTZjZWUzJywgJyMxZjc4YjQnLCAnI2IyZGY4YScsICcjMzNhMDJjJywgJyNmYjlhOTknLCAnI2UzMWExYycsICcjZmRiZjZmJywgJyNmZjdmMDAnLCAnI2NhYjJkNicsICcjNmEzZDlhJywgJyNmZmZmOTknLCAnI2IxNTkyOCddLFxuICAgICAgICBQYXN0ZWwyOiBbJyNiM2UyY2QnLCAnI2ZkY2RhYycsICcjY2JkNWU4JywgJyNmNGNhZTQnLCAnI2U2ZjVjOScsICcjZmZmMmFlJywgJyNmMWUyY2MnLCAnI2NjY2NjYyddLFxuICAgICAgICBQYXN0ZWwxOiBbJyNmYmI0YWUnLCAnI2IzY2RlMycsICcjY2NlYmM1JywgJyNkZWNiZTQnLCAnI2ZlZDlhNicsICcjZmZmZmNjJywgJyNlNWQ4YmQnLCAnI2ZkZGFlYycsICcjZjJmMmYyJ10sXG4gICAgfTtcblxuICAgIC8vIGFkZCBsb3dlcmNhc2UgYWxpYXNlcyBmb3IgY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaGVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBPYmplY3Qua2V5cyhjb2xvcmJyZXdlcik7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBrZXkgPSBsaXN0W2ldO1xuXG4gICAgICAgIGNvbG9yYnJld2VyW2tleS50b0xvd2VyQ2FzZSgpXSA9IGNvbG9yYnJld2VyW2tleV07XG4gICAgfVxuXG4gICAgdmFyIGNvbG9yYnJld2VyXzEgPSBjb2xvcmJyZXdlcjtcblxuICAgIHZhciBjaHJvbWEgPSBjaHJvbWFfMTtcblxuICAgIC8vIGZlZWwgZnJlZSB0byBjb21tZW50IG91dCBhbnl0aGluZyB0byByb2xsdXBcbiAgICAvLyBhIHNtYWxsZXIgY2hyb21hLmpzIGJ1aWx0XG5cbiAgICAvLyBpbyAtLT4gY29udmVydCBjb2xvcnNcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgLy8gb3BlcmF0b3JzIC0tPiBtb2RpZnkgZXhpc3RpbmcgQ29sb3JzXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAvLyBpbnRlcnBvbGF0b3JzXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgLy8gZ2VuZXJhdG9ycyAtLSA+IGNyZWF0ZSBuZXcgY29sb3JzXG4gICAgY2hyb21hLmF2ZXJhZ2UgPSBhdmVyYWdlO1xuICAgIGNocm9tYS5iZXppZXIgPSBiZXppZXJfMTtcbiAgICBjaHJvbWEuYmxlbmQgPSBibGVuZF8xO1xuICAgIGNocm9tYS5jdWJlaGVsaXggPSBjdWJlaGVsaXg7XG4gICAgY2hyb21hLm1peCA9IGNocm9tYS5pbnRlcnBvbGF0ZSA9IG1peCQxO1xuICAgIGNocm9tYS5yYW5kb20gPSByYW5kb21fMTtcbiAgICBjaHJvbWEuc2NhbGUgPSBzY2FsZSQyO1xuXG4gICAgLy8gb3RoZXIgdXRpbGl0eSBtZXRob2RzXG4gICAgY2hyb21hLmFuYWx5emUgPSBhbmFseXplXzEuYW5hbHl6ZTtcbiAgICBjaHJvbWEuY29udHJhc3QgPSBjb250cmFzdDtcbiAgICBjaHJvbWEuZGVsdGFFID0gZGVsdGFFO1xuICAgIGNocm9tYS5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGNocm9tYS5saW1pdHMgPSBhbmFseXplXzEubGltaXRzO1xuICAgIGNocm9tYS52YWxpZCA9IHZhbGlkO1xuXG4gICAgLy8gc2NhbGVcbiAgICBjaHJvbWEuc2NhbGVzID0gc2NhbGVzO1xuXG4gICAgLy8gY29sb3JzXG4gICAgY2hyb21hLmNvbG9ycyA9IHczY3gxMV8xO1xuICAgIGNocm9tYS5icmV3ZXIgPSBjb2xvcmJyZXdlcl8xO1xuXG4gICAgdmFyIGNocm9tYV9qcyA9IGNocm9tYTtcblxuICAgIHJldHVybiBjaHJvbWFfanM7XG5cbn0pKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjczZmI3YjdmMGU2OGIzNzJhZGZlY2VmZmUxMTU4OTBhLnR0ZlwiOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG4vKiogQHR5cGUgeygpID0+IG51bWJlcn0gKi9cbmV4cG9ydCBsZXQgbm93ID0gaXNfY2xpZW50ID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogKCkgPT4gRGF0ZS5ub3coKTtcblxuZXhwb3J0IGxldCByYWYgPSBpc19jbGllbnQgPyAoY2IpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuXG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3Rpbmdcbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfbm93KGZuKSB7XG5cdG5vdyA9IGZuO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3JhZihmbikge1xuXHRyYWYgPSBmbjtcbn1cbiIsImltcG9ydCB7IHJhZiB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuXG5jb25zdCB0YXNrcyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbm93XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuXHR0YXNrcy5mb3JFYWNoKCh0YXNrKSA9PiB7XG5cdFx0aWYgKCF0YXNrLmMobm93KSkge1xuXHRcdFx0dGFza3MuZGVsZXRlKHRhc2spO1xuXHRcdFx0dGFzay5mKCk7XG5cdFx0fVxuXHR9KTtcblx0aWYgKHRhc2tzLnNpemUgIT09IDApIHJhZihydW5fdGFza3MpO1xufVxuXG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkhXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuXHR0YXNrcy5jbGVhcigpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFzayB0aGF0IHJ1bnMgb24gZWFjaCByYWYgZnJhbWVcbiAqIHVudGlsIGl0IHJldHVybnMgYSBmYWxzeSB2YWx1ZSBvciBpcyBhYm9ydGVkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuVGFza0NhbGxiYWNrfSBjYWxsYmFja1xuICogQHJldHVybnMge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuVGFza31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlRhc2tFbnRyeX0gKi9cblx0bGV0IHRhc2s7XG5cdGlmICh0YXNrcy5zaXplID09PSAwKSByYWYocnVuX3Rhc2tzKTtcblx0cmV0dXJuIHtcblx0XHRwcm9taXNlOiBuZXcgUHJvbWlzZSgoZnVsZmlsbCkgPT4ge1xuXHRcdFx0dGFza3MuYWRkKCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KSk7XG5cdFx0fSksXG5cdFx0YWJvcnQoKSB7XG5cdFx0XHR0YXNrcy5kZWxldGUodGFzayk7XG5cdFx0fVxuXHR9O1xufVxuIiwiLyoqIEB0eXBlIHt0eXBlb2YgZ2xvYmFsVGhpc30gKi9cbmV4cG9ydCBjb25zdCBnbG9iYWxzID1cblx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcblx0XHQ/IHdpbmRvd1xuXHRcdDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG5cdFx0PyBnbG9iYWxUaGlzXG5cdFx0OiAvLyBAdHMtaWdub3JlIE5vZGUgdHlwaW5ncyBoYXZlIHRoaXNcblx0XHQgIGdsb2JhbDtcbiIsImltcG9ydCB7IGdsb2JhbHMgfSBmcm9tICcuL2dsb2JhbHMuanMnO1xuXG4vKipcbiAqIFJlc2l6ZSBvYnNlcnZlciBzaW5nbGV0b24uXG4gKiBPbmUgbGlzdGVuZXIgcGVyIGVsZW1lbnQgb25seSFcbiAqIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vYS9jaHJvbWl1bS5vcmcvZy9ibGluay1kZXYvYy96Nmllbk9OVWI1QS9tL0Y1LVZjVVp0QkFBSlxuICovXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24ge1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICogQHJlYWRvbmx5XG5cdCAqIEB0eXBlIHtXZWFrTWFwPEVsZW1lbnQsIGltcG9ydCgnLi9wcml2YXRlLmpzJykuTGlzdGVuZXI+fVxuXHQgKi9cblx0X2xpc3RlbmVycyA9ICdXZWFrTWFwJyBpbiBnbG9iYWxzID8gbmV3IFdlYWtNYXAoKSA6IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICogQHR5cGUge1Jlc2l6ZU9ic2VydmVyfVxuXHQgKi9cblx0X29ic2VydmVyID0gdW5kZWZpbmVkO1xuXG5cdC8qKiBAdHlwZSB7UmVzaXplT2JzZXJ2ZXJPcHRpb25zfSAqL1xuXHRvcHRpb25zO1xuXG5cdC8qKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyT3B0aW9uc30gb3B0aW9ucyAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkxpc3RlbmVyfSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cblx0ICovXG5cdG9ic2VydmUoZWxlbWVudCwgbGlzdGVuZXIpIHtcblx0XHR0aGlzLl9saXN0ZW5lcnMuc2V0KGVsZW1lbnQsIGxpc3RlbmVyKTtcblx0XHR0aGlzLl9nZXRPYnNlcnZlcigpLm9ic2VydmUoZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0dGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShlbGVtZW50KTtcblx0XHRcdHRoaXMuX29ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTsgLy8gdGhpcyBsaW5lIGNhbiBwcm9iYWJseSBiZSByZW1vdmVkXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldE9ic2VydmVyKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHR0aGlzLl9vYnNlcnZlciA/P1xuXHRcdFx0KHRoaXMuX29ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG5cdFx0XHRcdGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuXHRcdFx0XHRcdFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uLmVudHJpZXMuc2V0KGVudHJ5LnRhcmdldCwgZW50cnkpO1xuXHRcdFx0XHRcdHRoaXMuX2xpc3RlbmVycy5nZXQoZW50cnkudGFyZ2V0KT8uKGVudHJ5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSkpXG5cdFx0KTtcblx0fVxufVxuXG4vLyBOZWVkcyB0byBiZSB3cml0dGVuIGxpa2UgdGhpcyB0byBwYXNzIHRoZSB0cmVlLXNoYWtlLXRlc3RcblJlc2l6ZU9ic2VydmVyU2luZ2xldG9uLmVudHJpZXMgPSAnV2Vha01hcCcgaW4gZ2xvYmFscyA/IG5ldyBXZWFrTWFwKCkgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbiB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24uanMnO1xuaW1wb3J0IHsgY29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMsIGhhc19wcm9wIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBUcmFjayB3aGljaCBub2RlcyBhcmUgY2xhaW1lZCBkdXJpbmcgaHlkcmF0aW9uLiBVbmNsYWltZWQgbm9kZXMgY2FuIHRoZW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbi8vIGF0IHRoZSBlbmQgb2YgaHlkcmF0aW9uIHdpdGhvdXQgdG91Y2hpbmcgdGhlIHJlbWFpbmluZyBub2Rlcy5cbmxldCBpc19oeWRyYXRpbmcgPSBmYWxzZTtcblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0X2h5ZHJhdGluZygpIHtcblx0aXNfaHlkcmF0aW5nID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZF9oeWRyYXRpbmcoKSB7XG5cdGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3dcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoXG4gKiBAcGFyYW0geyhpbmRleDogbnVtYmVyKSA9PiBudW1iZXJ9IGtleVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiB1cHBlcl9ib3VuZChsb3csIGhpZ2gsIGtleSwgdmFsdWUpIHtcblx0Ly8gUmV0dXJuIGZpcnN0IGluZGV4IG9mIHZhbHVlIGxhcmdlciB0aGFuIGlucHV0IHZhbHVlIGluIHRoZSByYW5nZSBbbG93LCBoaWdoKVxuXHR3aGlsZSAobG93IDwgaGlnaCkge1xuXHRcdGNvbnN0IG1pZCA9IGxvdyArICgoaGlnaCAtIGxvdykgPj4gMSk7XG5cdFx0aWYgKGtleShtaWQpIDw9IHZhbHVlKSB7XG5cdFx0XHRsb3cgPSBtaWQgKyAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWdoID0gbWlkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbG93O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUV4fSB0YXJnZXRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBpbml0X2h5ZHJhdGUodGFyZ2V0KSB7XG5cdGlmICh0YXJnZXQuaHlkcmF0ZV9pbml0KSByZXR1cm47XG5cdHRhcmdldC5oeWRyYXRlX2luaXQgPSB0cnVlO1xuXHQvLyBXZSBrbm93IHRoYXQgYWxsIGNoaWxkcmVuIGhhdmUgY2xhaW1fb3JkZXIgdmFsdWVzIHNpbmNlIHRoZSB1bmNsYWltZWQgaGF2ZSBiZWVuIGRldGFjaGVkIGlmIHRhcmdldCBpcyBub3QgPGhlYWQ+XG5cblx0bGV0IGNoaWxkcmVuID0gLyoqIEB0eXBlIHtBcnJheUxpa2U8Tm9kZUV4Mj59ICovICh0YXJnZXQuY2hpbGROb2Rlcyk7XG5cdC8vIElmIHRhcmdldCBpcyA8aGVhZD4sIHRoZXJlIG1heSBiZSBjaGlsZHJlbiB3aXRob3V0IGNsYWltX29yZGVyXG5cdGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdIRUFEJykge1xuXHRcdGNvbnN0IG15Q2hpbGRyZW4gPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBub2RlID0gY2hpbGRyZW5baV07XG5cdFx0XHRpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG15Q2hpbGRyZW4ucHVzaChub2RlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y2hpbGRyZW4gPSBteUNoaWxkcmVuO1xuXHR9XG5cdC8qXG5cdCAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG5cdCAqIFdlIGNhbiByZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5IGJ5IGZpbmRpbmcgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugb2Zcblx0ICogbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBjbGFpbWVkIGluIG9yZGVyIGFuZCBvbmx5IG1vdmluZyB0aGUgcmVzdC4gVGhlIGxvbmdlc3Rcblx0ICogc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcblx0ICogY29tcHV0aW5nIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgLmNsYWltX29yZGVyIHZhbHVlcy5cblx0ICpcblx0ICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG5cdCAqIHBvc3NpYmxlLlxuXHQgKlxuXHQgKiBQcm9vZjpcblx0ICogV2Uga25vdyB0aGF0LCBnaXZlbiBhIHNldCBvZiByZW9yZGVyaW5nIG9wZXJhdGlvbnMsIHRoZSBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlXG5cdCAqIGFsd2F5cyBmb3JtIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2UsIHNpbmNlIHRoZXkgZG8gbm90IG1vdmUgYW1vbmcgZWFjaCBvdGhlclxuXHQgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuXHQgKiBzZXQgb2Ygbm9kZXMgdGhhdCBkbyBub3QgbW92ZSBmb3JtIGEgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLlxuXHQgKi9cblx0Ly8gQ29tcHV0ZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Vcblx0Ly8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuXHRjb25zdCBtID0gbmV3IEludDMyQXJyYXkoY2hpbGRyZW4ubGVuZ3RoICsgMSk7XG5cdC8vIFByZWRlY2Vzc29yIGluZGljZXMgKyAxXG5cdGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuXHRtWzBdID0gLTE7XG5cdGxldCBsb25nZXN0ID0gMDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBjaGlsZHJlbltpXS5jbGFpbV9vcmRlcjtcblx0XHQvLyBGaW5kIHRoZSBsYXJnZXN0IHN1YnNlcXVlbmNlIGxlbmd0aCBzdWNoIHRoYXQgaXQgZW5kcyBpbiBhIHZhbHVlIGxlc3MgdGhhbiBvdXIgY3VycmVudCB2YWx1ZVxuXHRcdC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG5cdFx0Ly8gd2l0aCBmYXN0IHBhdGggZm9yIHdoZW4gd2UgYXJlIG9uIHRoZSBjdXJyZW50IGxvbmdlc3Qgc3Vic2VxdWVuY2Vcblx0XHRjb25zdCBzZXFMZW4gPVxuXHRcdFx0KGxvbmdlc3QgPiAwICYmIGNoaWxkcmVuW21bbG9uZ2VzdF1dLmNsYWltX29yZGVyIDw9IGN1cnJlbnRcblx0XHRcdFx0PyBsb25nZXN0ICsgMVxuXHRcdFx0XHQ6IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QsIChpZHgpID0+IGNoaWxkcmVuW21baWR4XV0uY2xhaW1fb3JkZXIsIGN1cnJlbnQpKSAtIDE7XG5cdFx0cFtpXSA9IG1bc2VxTGVuXSArIDE7XG5cdFx0Y29uc3QgbmV3TGVuID0gc2VxTGVuICsgMTtcblx0XHQvLyBXZSBjYW4gZ3VhcmFudGVlIHRoYXQgY3VycmVudCBpcyB0aGUgc21hbGxlc3QgdmFsdWUuIE90aGVyd2lzZSwgd2Ugd291bGQgaGF2ZSBnZW5lcmF0ZWQgYSBsb25nZXIgc2VxdWVuY2UuXG5cdFx0bVtuZXdMZW5dID0gaTtcblx0XHRsb25nZXN0ID0gTWF0aC5tYXgobmV3TGVuLCBsb25nZXN0KTtcblx0fVxuXHQvLyBUaGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIG5vZGVzIChpbml0aWFsbHkgcmV2ZXJzZWQpXG5cblx0LyoqXG5cdCAqIEB0eXBlIHtOb2RlRXgyW119XG5cdCAqL1xuXHRjb25zdCBsaXMgPSBbXTtcblx0Ly8gVGhlIHJlc3Qgb2YgdGhlIG5vZGVzLCBub2RlcyB0aGF0IHdpbGwgYmUgbW92ZWRcblxuXHQvKipcblx0ICogQHR5cGUge05vZGVFeDJbXX1cblx0ICovXG5cdGNvbnN0IHRvTW92ZSA9IFtdO1xuXHRsZXQgbGFzdCA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7XG5cdGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuXHRcdGxpcy5wdXNoKGNoaWxkcmVuW2N1ciAtIDFdKTtcblx0XHRmb3IgKDsgbGFzdCA+PSBjdXI7IGxhc3QtLSkge1xuXHRcdFx0dG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuXHRcdH1cblx0XHRsYXN0LS07XG5cdH1cblx0Zm9yICg7IGxhc3QgPj0gMDsgbGFzdC0tKSB7XG5cdFx0dG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuXHR9XG5cdGxpcy5yZXZlcnNlKCk7XG5cdC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuXHR0b01vdmUuc29ydCgoYSwgYikgPT4gYS5jbGFpbV9vcmRlciAtIGIuY2xhaW1fb3JkZXIpO1xuXHQvLyBGaW5hbGx5LCB3ZSBtb3ZlIHRoZSBub2Rlc1xuXHRmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b01vdmUubGVuZ3RoOyBpKyspIHtcblx0XHR3aGlsZSAoaiA8IGxpcy5sZW5ndGggJiYgdG9Nb3ZlW2ldLmNsYWltX29yZGVyID49IGxpc1tqXS5jbGFpbV9vcmRlcikge1xuXHRcdFx0aisrO1xuXHRcdH1cblx0XHRjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSh0b01vdmVbaV0sIGFuY2hvcik7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcblx0dGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVfc2hlZXRfaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kX3N0eWxlcyh0YXJnZXQsIHN0eWxlX3NoZWV0X2lkLCBzdHlsZXMpIHtcblx0Y29uc3QgYXBwZW5kX3N0eWxlc190byA9IGdldF9yb290X2Zvcl9zdHlsZSh0YXJnZXQpO1xuXHRpZiAoIWFwcGVuZF9zdHlsZXNfdG8uZ2V0RWxlbWVudEJ5SWQoc3R5bGVfc2hlZXRfaWQpKSB7XG5cdFx0Y29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuXHRcdHN0eWxlLmlkID0gc3R5bGVfc2hlZXRfaWQ7XG5cdFx0c3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG5cdFx0YXBwZW5kX3N0eWxlc2hlZXQoYXBwZW5kX3N0eWxlc190bywgc3R5bGUpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7U2hhZG93Um9vdCB8IERvY3VtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpIHtcblx0aWYgKCFub2RlKSByZXR1cm4gZG9jdW1lbnQ7XG5cdGNvbnN0IHJvb3QgPSBub2RlLmdldFJvb3ROb2RlID8gbm9kZS5nZXRSb290Tm9kZSgpIDogbm9kZS5vd25lckRvY3VtZW50O1xuXHRpZiAocm9vdCAmJiAvKiogQHR5cGUge1NoYWRvd1Jvb3R9ICovIChyb290KS5ob3N0KSB7XG5cdFx0cmV0dXJuIC8qKiBAdHlwZSB7U2hhZG93Um9vdH0gKi8gKHJvb3QpO1xuXHR9XG5cdHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Q1NTU3R5bGVTaGVldH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpIHtcblx0Y29uc3Qgc3R5bGVfZWxlbWVudCA9IGVsZW1lbnQoJ3N0eWxlJyk7XG5cdC8vIEZvciB0cmFuc2l0aW9ucyB0byB3b3JrIHdpdGhvdXQgJ3N0eWxlLXNyYzogdW5zYWZlLWlubGluZScgQ29udGVudCBTZWN1cml0eSBQb2xpY3ksXG5cdC8vIHRoZXNlIGVtcHR5IHRhZ3MgbmVlZCB0byBiZSBhbGxvd2VkIHdpdGggYSBoYXNoIGFzIGEgd29ya2Fyb3VuZCB1bnRpbCB3ZSBtb3ZlIHRvIHRoZSBXZWIgQW5pbWF0aW9ucyBBUEkuXG5cdC8vIFVzaW5nIHRoZSBoYXNoIGZvciB0aGUgZW1wdHkgc3RyaW5nIChmb3IgYW4gZW1wdHkgdGFnKSB3b3JrcyBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IFNhZmFyaS5cblx0Ly8gU28gYXMgYSB3b3JrYXJvdW5kIGZvciB0aGUgd29ya2Fyb3VuZCwgd2hlbiB3ZSBhcHBlbmQgZW1wdHkgc3R5bGUgdGFncyB3ZSBzZXQgdGhlaXIgY29udGVudCB0byAvKiBlbXB0eSAqLy5cblx0Ly8gVGhlIGhhc2ggJ3NoYTI1Ni05T2xOTzBETkVlYVZ6SEw0Ulp3Q0xzQkhBOFdCUTh0b0JwLzRGNVhWMm5jPScgd2lsbCB0aGVuIHdvcmsgZXZlbiBpbiBTYWZhcmkuXG5cdHN0eWxlX2VsZW1lbnQudGV4dENvbnRlbnQgPSAnLyogZW1wdHkgKi8nO1xuXHRhcHBlbmRfc3R5bGVzaGVldChnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSksIHN0eWxlX2VsZW1lbnQpO1xuXHRyZXR1cm4gc3R5bGVfZWxlbWVudC5zaGVldDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NoYWRvd1Jvb3QgfCBEb2N1bWVudH0gbm9kZVxuICogQHBhcmFtIHtIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICogQHJldHVybnMge0NTU1N0eWxlU2hlZXR9XG4gKi9cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXNoZWV0KG5vZGUsIHN0eWxlKSB7XG5cdGFwcGVuZCgvKiogQHR5cGUge0RvY3VtZW50fSAqLyAobm9kZSkuaGVhZCB8fCBub2RlLCBzdHlsZSk7XG5cdHJldHVybiBzdHlsZS5zaGVldDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVFeH0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGVFeH0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSkge1xuXHRpZiAoaXNfaHlkcmF0aW5nKSB7XG5cdFx0aW5pdF9oeWRyYXRlKHRhcmdldCk7XG5cdFx0aWYgKFxuXHRcdFx0dGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0KHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsICYmIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLnBhcmVudE5vZGUgIT09IHRhcmdldClcblx0XHQpIHtcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XG5cdFx0fVxuXHRcdC8vIFNraXAgbm9kZXMgb2YgdW5kZWZpbmVkIG9yZGVyaW5nXG5cdFx0d2hpbGUgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsICYmIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLmNsYWltX29yZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHRcdGlmIChub2RlICE9PSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCkge1xuXHRcdFx0Ly8gV2Ugb25seSBpbnNlcnQgaWYgdGhlIG9yZGVyaW5nIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUgbW9kaWZpZWQgb3IgdGhlIHBhcmVudCBub2RlIGlzIG5vdCB0YXJnZXRcblx0XHRcdGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQgfHwgbm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQpIHtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gbm9kZS5uZXh0U2libGluZztcblx0XHR9XG5cdH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gW2FuY2hvcl1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG5cdHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUV4fSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZUV4fSBub2RlXG4gKiBAcGFyYW0ge05vZGVFeH0gW2FuY2hvcl1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuXHRpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcblx0XHRhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG5cdH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPSBhbmNob3IpIHtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuXHRpZiAobm9kZS5wYXJlbnROb2RlKSB7XG5cdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuXHR9XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9lYWNoKGl0ZXJhdGlvbnMsIGRldGFjaGluZykge1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoaXRlcmF0aW9uc1tpXSkgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge2tleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcH0gS1xuICogQHBhcmFtIHtLfSBuYW1lXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7a2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwfSBLXG4gKiBAcGFyYW0ge0t9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBpc1xuICogQHJldHVybnMge0hUTUxFbGVtZW50VGFnTmFtZU1hcFtLXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcblx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHRlbXBsYXRlIHtrZXlvZiBUfSBLXG4gKiBAcGFyYW0ge1R9IG9ialxuICogQHBhcmFtIHtLW119IGV4Y2x1ZGVcbiAqIEByZXR1cm5zIHtQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcblx0Y29uc3QgdGFyZ2V0ID0gLyoqIEB0eXBlIHtQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+fSAqLyAoe30pO1xuXHRmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG5cdFx0aWYgKFxuXHRcdFx0aGFzX3Byb3Aob2JqLCBrKSAmJlxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0ZXhjbHVkZS5pbmRleE9mKGspID09PSAtMVxuXHRcdCkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0dGFyZ2V0W2tdID0gb2JqW2tdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7a2V5b2YgU1ZHRWxlbWVudFRhZ05hbWVNYXB9IEtcbiAqIEBwYXJhbSB7S30gbmFtZVxuICogQHJldHVybnMge1NWR0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmFtZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFcbiAqIEByZXR1cm5zIHtUZXh0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dChkYXRhKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7VGV4dH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGFjZSgpIHtcblx0cmV0dXJuIHRleHQoJyAnKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7VGV4dH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eSgpIHtcblx0cmV0dXJuIHRleHQoJycpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcmV0dXJucyB7Q29tbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQoY29udGVudCkge1xuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChjb250ZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gaGFuZGxlclxuICogQHBhcmFtIHtib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgfCBFdmVudExpc3RlbmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuXHRub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuXHRyZXR1cm4gKCkgPT4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBhbnkpID0+IGFueX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBhbnkpID0+IGFueX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHsoZXZlbnQ6IGFueSkgPT4gYW55fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHsoZXZlbnQ6IGFueSkgPT4gdm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxmKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0aWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcykgZm4uY2FsbCh0aGlzLCBldmVudCk7XG5cdH07XG59XG5cbi8qKlxuICogQHJldHVybnMgeyhldmVudDogYW55KSA9PiB2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRydXN0ZWQoZm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRpZiAoZXZlbnQuaXNUcnVzdGVkKSBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcblx0ZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuLyoqXG4gKiBMaXN0IG9mIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYWx3YXlzIGJlIHNldCB0aHJvdWdoIHRoZSBhdHRyIG1ldGhvZCxcbiAqIGJlY2F1c2UgdXBkYXRpbmcgdGhlbSB0aHJvdWdoIHRoZSBwcm9wZXJ0eSBzZXR0ZXIgZG9lc24ndCB3b3JrIHJlbGlhYmx5LlxuICogSW4gdGhlIGV4YW1wbGUgb2YgYHdpZHRoYC9gaGVpZ2h0YCwgdGhlIHByb2JsZW0gaXMgdGhhdCB0aGUgc2V0dGVyIG9ubHlcbiAqIGFjY2VwdHMgbnVtZXJpYyB2YWx1ZXMsIGJ1dCB0aGUgYXR0cmlidXRlIGNhbiBhbHNvIGJlIHNldCB0byBhIHN0cmluZyBsaWtlIGA1MCVgLlxuICogSWYgdGhpcyBsaXN0IGJlY29tZXMgdG9vIGJpZywgcmV0aGluayB0aGlzIGFwcHJvYWNoLlxuICovXG5jb25zdCBhbHdheXNfc2V0X3Rocm91Z2hfc2V0X2F0dHJpYnV0ZSA9IFsnd2lkdGgnLCAnaGVpZ2h0J107XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcGFyYW0ge3sgW3g6IHN0cmluZ106IHN0cmluZyB9fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcblx0Ly8gQHRzLWlnbm9yZVxuXHRjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcblx0Zm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuXHRcdGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuXHRcdFx0bm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcblx0XHR9IGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuXHRcdFx0bm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuXHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnX192YWx1ZScpIHtcblx0XHRcdC8qKiBAdHlwZSB7YW55fSAqLyAobm9kZSkudmFsdWUgPSBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdGRlc2NyaXB0b3JzW2tleV0gJiZcblx0XHRcdGRlc2NyaXB0b3JzW2tleV0uc2V0ICYmXG5cdFx0XHRhbHdheXNfc2V0X3Rocm91Z2hfc2V0X2F0dHJpYnV0ZS5pbmRleE9mKGtleSkgPT09IC0xXG5cdFx0KSB7XG5cdFx0XHRub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHt7IFt4OiBzdHJpbmddOiBzdHJpbmcgfX0gYXR0cmlidXRlc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfc3ZnX2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuXHRmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0YXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBkYXRhX21hcFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YV9tYXAobm9kZSwgZGF0YV9tYXApIHtcblx0T2JqZWN0LmtleXMoZGF0YV9tYXApLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIGtleSwgZGF0YV9tYXBba2V5XSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG5cdGlmIChwcm9wIGluIG5vZGUpIHtcblx0XHRub2RlW3Byb3BdID0gdHlwZW9mIG5vZGVbcHJvcF0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0YXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZHluYW1pY19lbGVtZW50X2RhdGEodGFnKSB7XG5cdHJldHVybiAvLS8udGVzdCh0YWcpID8gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGFfbWFwIDogc2V0X2F0dHJpYnV0ZXM7XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblx0bm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfc3ZlbHRlX2RhdGFzZXQobm9kZSkge1xuXHRyZXR1cm4gbm9kZS5kYXRhc2V0LnN2ZWx0ZUg7XG59XG5cbi8qKlxuICogQHJldHVybnMge3Vua25vd25bXX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuXHRjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChncm91cFtpXS5jaGVja2VkKSB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG5cdH1cblx0aWYgKCFjaGVja2VkKSB7XG5cdFx0dmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuXHR9XG5cdHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnRbXX0gZ3JvdXBcbiAqIEByZXR1cm5zIHt7IHAoLi4uaW5wdXRzOiBIVE1MSW5wdXRFbGVtZW50W10pOiB2b2lkOyByKCk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0X2JpbmRpbmdfZ3JvdXAoZ3JvdXApIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50W119ICovXG5cdGxldCBfaW5wdXRzO1xuXHRyZXR1cm4ge1xuXHRcdC8qIHB1c2ggKi8gcCguLi5pbnB1dHMpIHtcblx0XHRcdF9pbnB1dHMgPSBpbnB1dHM7XG5cdFx0XHRfaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiBncm91cC5wdXNoKGlucHV0KSk7XG5cdFx0fSxcblx0XHQvKiByZW1vdmUgKi8gcigpIHtcblx0XHRcdF9pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKGlucHV0KSwgMSkpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzXG4gKiBAcmV0dXJucyB7eyB1KG5ld19pbmRleGVzOiBudW1iZXJbXSk6IHZvaWQ7IHAoLi4uaW5wdXRzOiBIVE1MSW5wdXRFbGVtZW50W10pOiB2b2lkOyByOiAoKSA9PiB2b2lkOyB9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9iaW5kaW5nX2dyb3VwX2R5bmFtaWMoZ3JvdXAsIGluZGV4ZXMpIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50W119ICovXG5cdGxldCBfZ3JvdXAgPSBnZXRfYmluZGluZ19ncm91cChncm91cCk7XG5cblx0LyoqXG5cdCAqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50W119ICovXG5cdGxldCBfaW5wdXRzO1xuXG5cdGZ1bmN0aW9uIGdldF9iaW5kaW5nX2dyb3VwKGdyb3VwKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRncm91cCA9IGdyb3VwW2luZGV4ZXNbaV1dID0gZ3JvdXBbaW5kZXhlc1tpXV0gfHwgW107XG5cdFx0fVxuXHRcdHJldHVybiBncm91cDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gcHVzaCgpIHtcblx0XHRfaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiBfZ3JvdXAucHVzaChpbnB1dCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiByZW1vdmUoKSB7XG5cdFx0X2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gX2dyb3VwLnNwbGljZShfZ3JvdXAuaW5kZXhPZihpbnB1dCksIDEpKTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdC8qIHVwZGF0ZSAqLyB1KG5ld19pbmRleGVzKSB7XG5cdFx0XHRpbmRleGVzID0gbmV3X2luZGV4ZXM7XG5cdFx0XHRjb25zdCBuZXdfZ3JvdXAgPSBnZXRfYmluZGluZ19ncm91cChncm91cCk7XG5cdFx0XHRpZiAobmV3X2dyb3VwICE9PSBfZ3JvdXApIHtcblx0XHRcdFx0cmVtb3ZlKCk7XG5cdFx0XHRcdF9ncm91cCA9IG5ld19ncm91cDtcblx0XHRcdFx0cHVzaCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0LyogcHVzaCAqLyBwKC4uLmlucHV0cykge1xuXHRcdFx0X2lucHV0cyA9IGlucHV0cztcblx0XHRcdHB1c2goKTtcblx0XHR9LFxuXHRcdC8qIHJlbW92ZSAqLyByOiByZW1vdmVcblx0fTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7YW55W119ICovXG5leHBvcnQgZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG5cdGNvbnN0IGFycmF5ID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0YXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcblx0fVxuXHRyZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7Q2hpbGROb2RlW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG5cdHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGlsZE5vZGVBcnJheX0gbm9kZXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBpbml0X2NsYWltX2luZm8obm9kZXMpIHtcblx0aWYgKG5vZGVzLmNsYWltX2luZm8gPT09IHVuZGVmaW5lZCkge1xuXHRcdG5vZGVzLmNsYWltX2luZm8gPSB7IGxhc3RfaW5kZXg6IDAsIHRvdGFsX2NsYWltZWQ6IDAgfTtcblx0fVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7Q2hpbGROb2RlRXh9IFJcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcGFyYW0geyhub2RlOiBDaGlsZE5vZGVFeCkgPT4gbm9kZSBpcyBSfSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7KG5vZGU6IENoaWxkTm9kZUV4KSA9PiBDaGlsZE5vZGVFeCB8IHVuZGVmaW5lZH0gcHJvY2Vzc05vZGVcbiAqIEBwYXJhbSB7KCkgPT4gUn0gY3JlYXRlTm9kZVxuICogQHBhcmFtIHtib29sZWFufSBkb250VXBkYXRlTGFzdEluZGV4XG4gKiBAcmV0dXJucyB7Un1cbiAqL1xuZnVuY3Rpb24gY2xhaW1fbm9kZShub2RlcywgcHJlZGljYXRlLCBwcm9jZXNzTm9kZSwgY3JlYXRlTm9kZSwgZG9udFVwZGF0ZUxhc3RJbmRleCA9IGZhbHNlKSB7XG5cdC8vIFRyeSB0byBmaW5kIG5vZGVzIGluIGFuIG9yZGVyIHN1Y2ggdGhhdCB3ZSBsZW5ndGhlbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG5cdGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG5cdGNvbnN0IHJlc3VsdE5vZGUgPSAoKCkgPT4ge1xuXHRcdC8vIFdlIGZpcnN0IHRyeSB0byBmaW5kIGFuIGVsZW1lbnQgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZVxuXHRcdGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXg7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuXHRcdFx0aWYgKHByZWRpY2F0ZShub2RlKSkge1xuXHRcdFx0XHRjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuXHRcdFx0XHRpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdG5vZGVzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuXHRcdFx0XHRcdG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE90aGVyd2lzZSwgd2UgdHJ5IHRvIGZpbmQgb25lIGJlZm9yZVxuXHRcdC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBzbyB0aGF0IHdlIGRvbid0IGdvIHRvbyBmYXIgYmFja1xuXHRcdGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0Y29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuXHRcdFx0aWYgKHByZWRpY2F0ZShub2RlKSkge1xuXHRcdFx0XHRjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuXHRcdFx0XHRpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdG5vZGVzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuXHRcdFx0XHRcdG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG5cdFx0XHRcdH0gZWxzZSBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIFNpbmNlIHdlIHNwbGljZWQgYmVmb3JlIHRoZSBsYXN0X2luZGV4LCB3ZSBkZWNyZWFzZSBpdFxuXHRcdFx0XHRcdG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBJZiB3ZSBjYW4ndCBmaW5kIGFueSBtYXRjaGluZyBub2RlLCB3ZSBjcmVhdGUgYSBuZXcgb25lXG5cdFx0cmV0dXJuIGNyZWF0ZU5vZGUoKTtcblx0fSkoKTtcblx0cmVzdWx0Tm9kZS5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcblx0bm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG5cdHJldHVybiByZXN1bHROb2RlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfX0gYXR0cmlidXRlc1xuICogQHBhcmFtIHsobmFtZTogc3RyaW5nKSA9PiBFbGVtZW50IHwgU1ZHRWxlbWVudH0gY3JlYXRlX2VsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50IHwgU1ZHRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBjcmVhdGVfZWxlbWVudCkge1xuXHRyZXR1cm4gY2xhaW1fbm9kZShcblx0XHRub2Rlcyxcblx0XHQvKiogQHJldHVybnMge25vZGUgaXMgRWxlbWVudCB8IFNWR0VsZW1lbnR9ICovXG5cdFx0KG5vZGUpID0+IG5vZGUubm9kZU5hbWUgPT09IG5hbWUsXG5cdFx0LyoqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSAqL1xuXHRcdChub2RlKSA9PiB7XG5cdFx0XHRjb25zdCByZW1vdmUgPSBbXTtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqXTtcblx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSkge1xuXHRcdFx0XHRcdHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVtb3ZlLmZvckVhY2goKHYpID0+IG5vZGUucmVtb3ZlQXR0cmlidXRlKHYpKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblx0XHQoKSA9PiBjcmVhdGVfZWxlbWVudChuYW1lKVxuXHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfX0gYXR0cmlidXRlc1xuICogQHJldHVybnMge0VsZW1lbnQgfCBTVkdFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuXHRyZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBlbGVtZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBib29sZWFuIH19IGF0dHJpYnV0ZXNcbiAqIEByZXR1cm5zIHtFbGVtZW50IHwgU1ZHRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltX3N2Z19lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG5cdHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Z19lbGVtZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHJldHVybnMge1RleHR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG5cdHJldHVybiBjbGFpbV9ub2RlKFxuXHRcdG5vZGVzLFxuXHRcdC8qKiBAcmV0dXJucyB7bm9kZSBpcyBUZXh0fSAqL1xuXHRcdChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAzLFxuXHRcdC8qKiBAcGFyYW0ge1RleHR9IG5vZGUgKi9cblx0XHQobm9kZSkgPT4ge1xuXHRcdFx0Y29uc3QgZGF0YVN0ciA9ICcnICsgZGF0YTtcblx0XHRcdGlmIChub2RlLmRhdGEuc3RhcnRzV2l0aChkYXRhU3RyKSkge1xuXHRcdFx0XHRpZiAobm9kZS5kYXRhLmxlbmd0aCAhPT0gZGF0YVN0ci5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZS5zcGxpdFRleHQoZGF0YVN0ci5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlLmRhdGEgPSBkYXRhU3RyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0KCkgPT4gdGV4dChkYXRhKSxcblx0XHR0cnVlIC8vIFRleHQgbm9kZXMgc2hvdWxkIG5vdCB1cGRhdGUgbGFzdCBpbmRleCBzaW5jZSBpdCBpcyBsaWtlbHkgbm90IHdvcnRoIGl0IHRvIGVsaW1pbmF0ZSBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGFjdHVhbCBlbGVtZW50c1xuXHQpO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHtUZXh0fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG5cdHJldHVybiBjbGFpbV90ZXh0KG5vZGVzLCAnICcpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcmV0dXJucyB7Q29tbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltX2NvbW1lbnQobm9kZXMsIGRhdGEpIHtcblx0cmV0dXJuIGNsYWltX25vZGUoXG5cdFx0bm9kZXMsXG5cdFx0LyoqIEByZXR1cm5zIHtub2RlIGlzIENvbW1lbnR9ICovXG5cdFx0KG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDgsXG5cdFx0LyoqIEBwYXJhbSB7Q29tbWVudH0gbm9kZSAqL1xuXHRcdChub2RlKSA9PiB7XG5cdFx0XHRub2RlLmRhdGEgPSAnJyArIGRhdGE7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH0sXG5cdFx0KCkgPT4gY29tbWVudChkYXRhKSxcblx0XHR0cnVlXG5cdCk7XG59XG5cbmZ1bmN0aW9uIGZpbmRfY29tbWVudChub2RlcywgdGV4dCwgc3RhcnQpIHtcblx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRjb25zdCBub2RlID0gbm9kZXNbaV07XG5cdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogY29tbWVudCBub2RlICovICYmIG5vZGUudGV4dENvbnRlbnQudHJpbSgpID09PSB0ZXh0KSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG5vZGVzLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3N2Z1xuICogQHJldHVybnMge0h0bWxUYWdIeWRyYXRpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV9odG1sX3RhZyhub2RlcywgaXNfc3ZnKSB7XG5cdC8vIGZpbmQgaHRtbCBvcGVuaW5nIHRhZ1xuXHRjb25zdCBzdGFydF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX1NUQVJUJywgMCk7XG5cdGNvbnN0IGVuZF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX0VORCcsIHN0YXJ0X2luZGV4KTtcblx0aWYgKHN0YXJ0X2luZGV4ID09PSBlbmRfaW5kZXgpIHtcblx0XHRyZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24odW5kZWZpbmVkLCBpc19zdmcpO1xuXHR9XG5cdGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG5cdGNvbnN0IGh0bWxfdGFnX25vZGVzID0gbm9kZXMuc3BsaWNlKHN0YXJ0X2luZGV4LCBlbmRfaW5kZXggLSBzdGFydF9pbmRleCArIDEpO1xuXHRkZXRhY2goaHRtbF90YWdfbm9kZXNbMF0pO1xuXHRkZXRhY2goaHRtbF90YWdfbm9kZXNbaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMV0pO1xuXHRjb25zdCBjbGFpbWVkX25vZGVzID0gaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSk7XG5cdGZvciAoY29uc3QgbiBvZiBjbGFpbWVkX25vZGVzKSB7XG5cdFx0bi5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcblx0XHRub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcblx0fVxuXHRyZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24oY2xhaW1lZF9ub2RlcywgaXNfc3ZnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG5cdGRhdGEgPSAnJyArIGRhdGE7XG5cdGlmICh0ZXh0LmRhdGEgPT09IGRhdGEpIHJldHVybjtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9jb250ZW50ZWRpdGFibGUodGV4dCwgZGF0YSkge1xuXHRkYXRhID0gJycgKyBkYXRhO1xuXHRpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpIHJldHVybjtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJfdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2RhdGFfbWF5YmVfY29udGVudGVkaXRhYmxlKHRleHQsIGRhdGEsIGF0dHJfdmFsdWUpIHtcblx0aWYgKH5jb250ZW50ZWRpdGFibGVfdHJ1dGh5X3ZhbHVlcy5pbmRleE9mKGF0dHJfdmFsdWUpKSB7XG5cdFx0c2V0X2RhdGFfY29udGVudGVkaXRhYmxlKHRleHQsIGRhdGEpO1xuXHR9IGVsc2Uge1xuXHRcdHNldF9kYXRhKHRleHQsIGRhdGEpO1xuXHR9XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuXHRpbnB1dC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG5cdHRyeSB7XG5cdFx0aW5wdXQudHlwZSA9IHR5cGU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBkbyBub3RoaW5nXG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0bm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpO1xuXHR9IGVsc2Uge1xuXHRcdG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUsIG1vdW50aW5nKSB7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcblx0XHRpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG5cdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHRpZiAoIW1vdW50aW5nIHx8IHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRzZWxlY3Quc2VsZWN0ZWRJbmRleCA9IC0xOyAvLyBubyBvcHRpb24gc2hvdWxkIGJlIHNlbGVjdGVkXG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcblx0XHRvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcblx0Y29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJyk7XG5cdHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG5cdHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgKG9wdGlvbikgPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuLy8gdW5mb3J0dW5hdGVseSB0aGlzIGNhbid0IGJlIGEgY29uc3RhbnQgYXMgdGhhdCB3b3VsZG4ndCBiZSB0cmVlLXNoYWtlYWJsZVxuLy8gc28gd2UgY2FjaGUgdGhlIHJlc3VsdCBpbnN0ZWFkXG5cbi8qKlxuICogQHR5cGUge2Jvb2xlYW59ICovXG5sZXQgY3Jvc3NvcmlnaW47XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59ICovXG5leHBvcnQgZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG5cdGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Y3Jvc3NvcmlnaW4gPSBmYWxzZTtcblx0XHR0cnkge1xuXHRcdFx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wYXJlbnQpIHtcblx0XHRcdFx0dm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjcm9zc29yaWdpbiA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjcm9zc29yaWdpbjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGZuXG4gKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9pZnJhbWVfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG5cdGNvbnN0IGNvbXB1dGVkX3N0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0aWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuXHRcdG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuXHR9XG5cdGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuXHRpZnJhbWUuc2V0QXR0cmlidXRlKFxuXHRcdCdzdHlsZScsXG5cdFx0J2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG5cdFx0XHQnb3ZlcmZsb3c6IGhpZGRlbjsgYm9yZGVyOiAwOyBvcGFjaXR5OiAwOyBwb2ludGVyLWV2ZW50czogbm9uZTsgei1pbmRleDogLTE7J1xuXHQpO1xuXHRpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cdGlmcmFtZS50YWJJbmRleCA9IC0xO1xuXHRjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG5cblx0LyoqXG5cdCAqIEB0eXBlIHsoKSA9PiB2b2lkfVxuXHQgKi9cblx0bGV0IHVuc3Vic2NyaWJlO1xuXHRpZiAoY3Jvc3NvcmlnaW4pIHtcblx0XHRpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcblx0XHR1bnN1YnNjcmliZSA9IGxpc3Rlbihcblx0XHRcdHdpbmRvdyxcblx0XHRcdCdtZXNzYWdlJyxcblx0XHRcdC8qKiBAcGFyYW0ge01lc3NhZ2VFdmVudH0gZXZlbnQgKi8gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KSBmbigpO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0aWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG5cdFx0aWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcblx0XHRcdHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuXHRcdFx0Ly8gbWFrZSBzdXJlIGFuIGluaXRpYWwgcmVzaXplIGV2ZW50IGlzIGZpcmVkIF9hZnRlcl8gdGhlIGlmcmFtZSBpcyBsb2FkZWQgKHdoaWNoIGlzIGFzeW5jaHJvbm91cylcblx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy80MjMzXG5cdFx0XHRmbigpO1xuXHRcdH07XG5cdH1cblx0YXBwZW5kKG5vZGUsIGlmcmFtZSk7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKGNyb3Nzb3JpZ2luKSB7XG5cdFx0XHR1bnN1YnNjcmliZSgpO1xuXHRcdH0gZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcblx0XHRcdHVuc3Vic2NyaWJlKCk7XG5cdFx0fVxuXHRcdGRldGFjaChpZnJhbWUpO1xuXHR9O1xufVxuZXhwb3J0IGNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9jb250ZW50X2JveCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24oe1xuXHRib3g6ICdjb250ZW50LWJveCdcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9ib3JkZXJfYm94ID0gLyogQF9fUFVSRV9fICovIG5ldyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbih7XG5cdGJveDogJ2JvcmRlci1ib3gnXG59KTtcbmV4cG9ydCBjb25zdCByZXNpemVfb2JzZXJ2ZXJfZGV2aWNlX3BpeGVsX2NvbnRlbnRfYm94ID0gLyogQF9fUFVSRV9fICovIG5ldyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbihcblx0eyBib3g6ICdkZXZpY2UtcGl4ZWwtY29udGVudC1ib3gnIH1cbik7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbiB9O1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcblx0Ly8gVGhlIGAhIWAgaXMgcmVxdWlyZWQgYmVjYXVzZSBhbiBgdW5kZWZpbmVkYCBmbGFnIG1lYW5zIGZsaXBwaW5nIHRoZSBjdXJyZW50IHN0YXRlLlxuXHRlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUobmFtZSwgISF0b2dnbGUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtUfSBbZGV0YWlsXVxuICogQHBhcmFtIHt7IGJ1YmJsZXM/OiBib29sZWFuLCBjYW5jZWxhYmxlPzogYm9vbGVhbiB9fSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtDdXN0b21FdmVudDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgYnViYmxlcyA9IGZhbHNlLCBjYW5jZWxhYmxlID0gZmFsc2UgfSA9IHt9KSB7XG5cdHJldHVybiBuZXcgQ3VzdG9tRXZlbnQodHlwZSwgeyBkZXRhaWwsIGJ1YmJsZXMsIGNhbmNlbGFibGUgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRcbiAqIEByZXR1cm5zIHtDaGlsZE5vZGVBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5X3NlbGVjdG9yX2FsbChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQuYm9keSkge1xuXHRyZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlSWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGhlYWRcbiAqIEByZXR1cm5zIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhlYWRfc2VsZWN0b3Iobm9kZUlkLCBoZWFkKSB7XG5cdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRsZXQgc3RhcnRlZCA9IDA7XG5cdGZvciAoY29uc3Qgbm9kZSBvZiBoZWFkLmNoaWxkTm9kZXMpIHtcblx0XHRpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8pIHtcblx0XHRcdGNvbnN0IGNvbW1lbnQgPSBub2RlLnRleHRDb250ZW50LnRyaW0oKTtcblx0XHRcdGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fRU5EYCkge1xuXHRcdFx0XHRzdGFydGVkIC09IDE7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKG5vZGUpO1xuXHRcdFx0fSBlbHNlIGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fU1RBUlRgKSB7XG5cdFx0XHRcdHN0YXJ0ZWQgKz0gMTtcblx0XHRcdFx0cmVzdWx0LnB1c2gobm9kZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzdGFydGVkID4gMCkge1xuXHRcdFx0cmVzdWx0LnB1c2gobm9kZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG4vKiogKi9cbmV4cG9ydCBjbGFzcyBIdG1sVGFnIHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqL1xuXHRpc19zdmcgPSBmYWxzZTtcblx0Ly8gcGFyZW50IGZvciBjcmVhdGluZyBub2RlXG5cdC8qKiAqL1xuXHRlID0gdW5kZWZpbmVkO1xuXHQvLyBodG1sIHRhZyBub2Rlc1xuXHQvKiogKi9cblx0biA9IHVuZGVmaW5lZDtcblx0Ly8gdGFyZ2V0XG5cdC8qKiAqL1xuXHR0ID0gdW5kZWZpbmVkO1xuXHQvLyBhbmNob3Jcblx0LyoqICovXG5cdGEgPSB1bmRlZmluZWQ7XG5cdGNvbnN0cnVjdG9yKGlzX3N2ZyA9IGZhbHNlKSB7XG5cdFx0dGhpcy5pc19zdmcgPSBpc19zdmc7XG5cdFx0dGhpcy5lID0gdGhpcy5uID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGMoaHRtbCkge1xuXHRcdHRoaXMuaChodG1sKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50IHwgU1ZHRWxlbWVudH0gdGFyZ2V0XG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50fSBhbmNob3Jcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuXHRcdGlmICghdGhpcy5lKSB7XG5cdFx0XHRpZiAodGhpcy5pc19zdmcpXG5cdFx0XHRcdHRoaXMuZSA9IHN2Z19lbGVtZW50KC8qKiBAdHlwZSB7a2V5b2YgU1ZHRWxlbWVudFRhZ05hbWVNYXB9ICovICh0YXJnZXQubm9kZU5hbWUpKTtcblx0XHRcdC8qKiAjNzM2NCAgdGFyZ2V0IGZvciA8dGVtcGxhdGU+IG1heSBiZSBwcm92aWRlZCBhcyAjZG9jdW1lbnQtZnJhZ21lbnQoMTEpICovIGVsc2Vcblx0XHRcdFx0dGhpcy5lID0gZWxlbWVudChcblx0XHRcdFx0XHQvKiogQHR5cGUge2tleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcH0gKi8gKFxuXHRcdFx0XHRcdFx0dGFyZ2V0Lm5vZGVUeXBlID09PSAxMSA/ICdURU1QTEFURScgOiB0YXJnZXQubm9kZU5hbWVcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLnQgPVxuXHRcdFx0XHR0YXJnZXQudGFnTmFtZSAhPT0gJ1RFTVBMQVRFJ1xuXHRcdFx0XHRcdD8gdGFyZ2V0XG5cdFx0XHRcdFx0OiAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovICh0YXJnZXQpLmNvbnRlbnQ7XG5cdFx0XHR0aGlzLmMoaHRtbCk7XG5cdFx0fVxuXHRcdHRoaXMuaShhbmNob3IpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0aChodG1sKSB7XG5cdFx0dGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG5cdFx0dGhpcy5uID0gQXJyYXkuZnJvbShcblx0XHRcdHRoaXMuZS5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJyA/IHRoaXMuZS5jb250ZW50LmNoaWxkTm9kZXMgOiB0aGlzLmUuY2hpbGROb2Rlc1xuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMge3ZvaWR9ICovXG5cdGkoYW5jaG9yKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm4ubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGluc2VydCh0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRwKGh0bWwpIHtcblx0XHR0aGlzLmQoKTtcblx0XHR0aGlzLmgoaHRtbCk7XG5cdFx0dGhpcy5pKHRoaXMuYSk7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMge3ZvaWR9ICovXG5cdGQoKSB7XG5cdFx0dGhpcy5uLmZvckVhY2goZGV0YWNoKTtcblx0fVxufVxuXG4vKipcbiAqIEBleHRlbmRzIEh0bWxUYWcgKi9cbmV4cG9ydCBjbGFzcyBIdG1sVGFnSHlkcmF0aW9uIGV4dGVuZHMgSHRtbFRhZyB7XG5cdC8vIGh5ZHJhdGlvbiBjbGFpbWVkIG5vZGVzXG5cdC8qKiAqL1xuXHRsID0gdW5kZWZpbmVkO1xuXHRjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzLCBpc19zdmcgPSBmYWxzZSkge1xuXHRcdHN1cGVyKGlzX3N2Zyk7XG5cdFx0dGhpcy5lID0gdGhpcy5uID0gbnVsbDtcblx0XHR0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0YyhodG1sKSB7XG5cdFx0aWYgKHRoaXMubCkge1xuXHRcdFx0dGhpcy5uID0gdGhpcy5sO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdXBlci5jKGh0bWwpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0aShhbmNob3IpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0aW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05hbWVkTm9kZU1hcH0gYXR0cmlidXRlc1xuICogQHJldHVybnMge3t9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXR0cmlidXRlX3RvX29iamVjdChhdHRyaWJ1dGVzKSB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXHRmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG5cdFx0cmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblx0ZWxlbWVudC5jaGlsZE5vZGVzLmZvckVhY2goXG5cdFx0LyoqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSAqLyAobm9kZSkgPT4ge1xuXHRcdFx0cmVzdWx0W25vZGUuc2xvdCB8fCAnZGVmYXVsdCddID0gdHJ1ZTtcblx0XHR9XG5cdCk7XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudChjb21wb25lbnQsIHByb3BzKSB7XG5cdHJldHVybiBuZXcgY29tcG9uZW50KHByb3BzKTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7Tm9kZSAmIHtcbiAqIFx0Y2xhaW1fb3JkZXI/OiBudW1iZXI7XG4gKiBcdGh5ZHJhdGVfaW5pdD86IHRydWU7XG4gKiBcdGFjdHVhbF9lbmRfY2hpbGQ/OiBOb2RlRXg7XG4gKiBcdGNoaWxkTm9kZXM6IE5vZGVMaXN0T2Y8Tm9kZUV4PjtcbiAqIH19IE5vZGVFeFxuICovXG5cbi8qKiBAdHlwZWRlZiB7Q2hpbGROb2RlICYgTm9kZUV4fSBDaGlsZE5vZGVFeCAqL1xuXG4vKiogQHR5cGVkZWYge05vZGVFeCAmIHsgY2xhaW1fb3JkZXI6IG51bWJlciB9fSBOb2RlRXgyICovXG5cbi8qKlxuICogQHR5cGVkZWYge0NoaWxkTm9kZUV4W10gJiB7XG4gKiBcdGNsYWltX2luZm8/OiB7XG4gKiBcdFx0bGFzdF9pbmRleDogbnVtYmVyO1xuICogXHRcdHRvdGFsX2NsYWltZWQ6IG51bWJlcjtcbiAqIFx0fTtcbiAqIH19IENoaWxkTm9kZUFycmF5XG4gKi9cbiIsImltcG9ydCB7IGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0LCBkZXRhY2gsIGdldF9yb290X2Zvcl9zdHlsZSB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IHJhZiB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuXG4vLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBpbmZvcm1hdGlvbiBmb3IgbXVsdGlwbGUgZG9jdW1lbnRzIGJlY2F1c2UgYSBTdmVsdGUgYXBwbGljYXRpb24gY291bGQgYWxzbyBjb250YWluIGlmcmFtZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzM2MjRcbi8qKiBAdHlwZSB7TWFwPERvY3VtZW50IHwgU2hhZG93Um9vdCwgaW1wb3J0KCcuL3ByaXZhdGUuZC50cycpLlN0eWxlSW5mb3JtYXRpb24+fSAqL1xuY29uc3QgbWFuYWdlZF9zdHlsZXMgPSBuZXcgTWFwKCk7XG5cbmxldCBhY3RpdmUgPSAwO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaC9ibG9iL21hc3Rlci9pbmRleC5qc1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuXHRsZXQgaGFzaCA9IDUzODE7XG5cdGxldCBpID0gc3RyLmxlbmd0aDtcblx0d2hpbGUgKGktLSkgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG5cdHJldHVybiBoYXNoID4+PiAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RG9jdW1lbnQgfCBTaGFkb3dSb290fSBkb2NcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHJldHVybnMge3sgc3R5bGVzaGVldDogYW55OyBydWxlczoge307IH19XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpIHtcblx0Y29uc3QgaW5mbyA9IHsgc3R5bGVzaGVldDogYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSksIHJ1bGVzOiB7fSB9O1xuXHRtYW5hZ2VkX3N0eWxlcy5zZXQoZG9jLCBpbmZvKTtcblx0cmV0dXJuIGluZm87XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gKiBAcGFyYW0geyh0OiBudW1iZXIpID0+IG51bWJlcn0gZWFzZVxuICogQHBhcmFtIHsodDogbnVtYmVyLCB1OiBudW1iZXIpID0+IHN0cmluZ30gZm5cbiAqIEBwYXJhbSB7bnVtYmVyfSB1aWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG5cdGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcblx0bGV0IGtleWZyYW1lcyA9ICd7XFxuJztcblx0Zm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG5cdFx0Y29uc3QgdCA9IGEgKyAoYiAtIGEpICogZWFzZShwKTtcblx0XHRrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuXHR9XG5cdGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuXHRjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcblx0Y29uc3QgZG9jID0gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpO1xuXHRjb25zdCB7IHN0eWxlc2hlZXQsIHJ1bGVzIH0gPSBtYW5hZ2VkX3N0eWxlcy5nZXQoZG9jKSB8fCBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKTtcblx0aWYgKCFydWxlc1tuYW1lXSkge1xuXHRcdHJ1bGVzW25hbWVdID0gdHJ1ZTtcblx0XHRzdHlsZXNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtuYW1lfSAke3J1bGV9YCwgc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuXHR9XG5cdGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuXHRub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke1xuXHRcdGFuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiAnJ1xuXHR9JHtuYW1lfSAke2R1cmF0aW9ufW1zIGxpbmVhciAke2RlbGF5fW1zIDEgYm90aGA7XG5cdGFjdGl2ZSArPSAxO1xuXHRyZXR1cm4gbmFtZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQgJiBFbGVtZW50Q1NTSW5saW5lU3R5bGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuXHRjb25zdCBwcmV2aW91cyA9IChub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJykuc3BsaXQoJywgJyk7XG5cdGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIoXG5cdFx0bmFtZVxuXHRcdFx0PyAoYW5pbSkgPT4gYW5pbS5pbmRleE9mKG5hbWUpIDwgMCAvLyByZW1vdmUgc3BlY2lmaWMgYW5pbWF0aW9uXG5cdFx0XHQ6IChhbmltKSA9PiBhbmltLmluZGV4T2YoJ19fc3ZlbHRlJykgPT09IC0xIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcblx0KTtcblx0Y29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuXHRpZiAoZGVsZXRlZCkge1xuXHRcdG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKCcsICcpO1xuXHRcdGFjdGl2ZSAtPSBkZWxldGVkO1xuXHRcdGlmICghYWN0aXZlKSBjbGVhcl9ydWxlcygpO1xuXHR9XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcblx0cmFmKCgpID0+IHtcblx0XHRpZiAoYWN0aXZlKSByZXR1cm47XG5cdFx0bWFuYWdlZF9zdHlsZXMuZm9yRWFjaCgoaW5mbykgPT4ge1xuXHRcdFx0Y29uc3QgeyBvd25lck5vZGUgfSA9IGluZm8uc3R5bGVzaGVldDtcblx0XHRcdC8vIHRoZXJlIGlzIG5vIG93bmVyTm9kZSBpZiBpdCBydW5zIG9uIGpzZG9tLlxuXHRcdFx0aWYgKG93bmVyTm9kZSkgZGV0YWNoKG93bmVyTm9kZSk7XG5cdFx0fSk7XG5cdFx0bWFuYWdlZF9zdHlsZXMuY2xlYXIoKTtcblx0fSk7XG59XG4iLCJpbXBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIsIG5vb3AgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IG5vdyB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuaW1wb3J0IHsgbG9vcCB9IGZyb20gJy4vbG9vcC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVfcnVsZSwgZGVsZXRlX3J1bGUgfSBmcm9tICcuL3N0eWxlX21hbmFnZXIuanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlBvc2l0aW9uUmVjdH0gZnJvbVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkFuaW1hdGlvbkZufSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG5cdGlmICghZnJvbSkgcmV0dXJuIG5vb3A7XG5cdGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0aWYgKFxuXHRcdGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJlxuXHRcdGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmXG5cdFx0ZnJvbS50b3AgPT09IHRvLnRvcCAmJlxuXHRcdGZyb20uYm90dG9tID09PSB0by5ib3R0b21cblx0KVxuXHRcdHJldHVybiBub29wO1xuXHRjb25zdCB7XG5cdFx0ZGVsYXkgPSAwLFxuXHRcdGR1cmF0aW9uID0gMzAwLFxuXHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHQvLyBAdHMtaWdub3JlIHRvZG86IHNob3VsZCB0aGlzIGJlIHNlcGFyYXRlZCBmcm9tIGRlc3RydWN0dXJpbmc/IE9yIHN0YXJ0L2VuZCBhZGRlZCB0byBwdWJsaWMgYXBpIGFuZCBkb2N1bWVudGF0aW9uP1xuXHRcdHN0YXJ0OiBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheSxcblx0XHQvLyBAdHMtaWdub3JlIHRvZG86XG5cdFx0ZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLFxuXHRcdHRpY2sgPSBub29wLFxuXHRcdGNzc1xuXHR9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuXHRsZXQgcnVubmluZyA9IHRydWU7XG5cdGxldCBzdGFydGVkID0gZmFsc2U7XG5cdGxldCBuYW1lO1xuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdGZ1bmN0aW9uIHN0YXJ0KCkge1xuXHRcdGlmIChjc3MpIHtcblx0XHRcdG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcblx0XHR9XG5cdFx0aWYgKCFkZWxheSkge1xuXHRcdFx0c3RhcnRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdC8qKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gc3RvcCgpIHtcblx0XHRpZiAoY3NzKSBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcblx0XHRydW5uaW5nID0gZmFsc2U7XG5cdH1cblx0bG9vcCgobm93KSA9PiB7XG5cdFx0aWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG5cdFx0XHRzdGFydGVkID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuXHRcdFx0dGljaygxLCAwKTtcblx0XHRcdHN0b3AoKTtcblx0XHR9XG5cdFx0aWYgKCFydW5uaW5nKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChzdGFydGVkKSB7XG5cdFx0XHRjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcblx0XHRcdGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuXHRcdFx0dGljayh0LCAxIC0gdCk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9KTtcblx0c3RhcnQoKTtcblx0dGljaygwLCAxKTtcblx0cmV0dXJuIHN0b3A7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0aWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcblx0XHRjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0bm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0YWRkX3RyYW5zZm9ybShub2RlLCBhKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlBvc2l0aW9uUmVjdH0gYVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcblx0Y29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcblx0XHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdFx0Y29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcblx0XHRub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcblx0fVxufVxuIiwiLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgY29uc3QgaWRlbnRpdHkgPSAoeCkgPT4geDtcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHRlbXBsYXRlIFNcbiAqIEBwYXJhbSB7VH0gdGFyXG4gKiBAcGFyYW0ge1N9IHNyY1xuICogQHJldHVybnMge1QgJiBTfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG5cdC8vIEB0cy1pZ25vcmVcblx0Zm9yIChjb25zdCBrIGluIHNyYykgdGFyW2tdID0gc3JjW2tdO1xuXHRyZXR1cm4gLyoqIEB0eXBlIHtUICYgU30gKi8gKHRhcik7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdGhlbi9pcy1wcm9taXNlL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vdGhlbi9pcy1wcm9taXNlL2Jsb2IvbWFzdGVyL0xJQ0VOU0Vcbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgUHJvbWlzZUxpa2U8YW55Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcblx0cmV0dXJuIChcblx0XHQhIXZhbHVlICYmXG5cdFx0KHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSAmJlxuXHRcdHR5cGVvZiAoLyoqIEB0eXBlIHthbnl9ICovICh2YWx1ZSkudGhlbikgPT09ICdmdW5jdGlvbidcblx0KTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcblx0ZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuXHRcdGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuKGZuKSB7XG5cdHJldHVybiBmbigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuXHRyZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Z1bmN0aW9uW119IGZuc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5fYWxsKGZucykge1xuXHRmbnMuZm9yRWFjaChydW4pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB0aGluZ1xuICogQHJldHVybnMge3RoaW5nIGlzIEZ1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcblx0cmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqIEByZXR1cm5zIHtib29sZWFufSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcblx0cmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxubGV0IHNyY191cmxfZXF1YWxfYW5jaG9yO1xuXG4vKiogQHJldHVybnMge2Jvb2xlYW59ICovXG5leHBvcnQgZnVuY3Rpb24gc3JjX3VybF9lcXVhbChlbGVtZW50X3NyYywgdXJsKSB7XG5cdGlmICghc3JjX3VybF9lcXVhbF9hbmNob3IpIHtcblx0XHRzcmNfdXJsX2VxdWFsX2FuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0fVxuXHRzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuXHRyZXR1cm4gZWxlbWVudF9zcmMgPT09IHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWY7XG59XG5cbi8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RfZXF1YWwoYSwgYikge1xuXHRyZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cblxuLyoqIEByZXR1cm5zIHtib29sZWFufSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2VtcHR5KG9iaikge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuXHRpZiAoc3RvcmUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIC4uLmNhbGxiYWNrcykge1xuXHRpZiAoc3RvcmUgPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XG5cdFx0XHRjYWxsYmFjayh1bmRlZmluZWQpO1xuXHRcdH1cblx0XHRyZXR1cm4gbm9vcDtcblx0fVxuXHRjb25zdCB1bnN1YiA9IHN0b3JlLnN1YnNjcmliZSguLi5jYWxsYmFja3MpO1xuXHRyZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IHZhbHVlIGZyb20gYSBzdG9yZSBieSBzdWJzY3JpYmluZyBhbmQgaW1tZWRpYXRlbHkgdW5zdWJzY3JpYmluZy5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtc3RvcmUjZ2V0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL3N0b3JlL3B1YmxpYy5qcycpLlJlYWRhYmxlPFQ+fSBzdG9yZVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcblx0bGV0IHZhbHVlO1xuXHRzdWJzY3JpYmUoc3RvcmUsIChfKSA9PiAodmFsdWUgPSBfKSkoKTtcblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuXHRjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcblx0aWYgKGRlZmluaXRpb24pIHtcblx0XHRjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbik7XG5cdFx0cmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuXHRyZXR1cm4gZGVmaW5pdGlvblsxXSAmJiBmbiA/IGFzc2lnbigkJHNjb3BlLmN0eC5zbGljZSgpLCBkZWZpbml0aW9uWzFdKGZuKGN0eCkpKSA6ICQkc2NvcGUuY3R4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3Nsb3RfY2hhbmdlcyhkZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZm4pIHtcblx0aWYgKGRlZmluaXRpb25bMl0gJiYgZm4pIHtcblx0XHRjb25zdCBsZXRzID0gZGVmaW5pdGlvblsyXShmbihkaXJ0eSkpO1xuXHRcdGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBsZXRzO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIGxldHMgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRjb25zdCBtZXJnZWQgPSBbXTtcblx0XHRcdGNvbnN0IGxlbiA9IE1hdGgubWF4KCQkc2NvcGUuZGlydHkubGVuZ3RoLCBsZXRzLmxlbmd0aCk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG5cdFx0XHRcdG1lcmdlZFtpXSA9ICQkc2NvcGUuZGlydHlbaV0gfCBsZXRzW2ldO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1lcmdlZDtcblx0XHR9XG5cdFx0cmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuXHR9XG5cdHJldHVybiAkJHNjb3BlLmRpcnR5O1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3Nsb3RfYmFzZShcblx0c2xvdCxcblx0c2xvdF9kZWZpbml0aW9uLFxuXHRjdHgsXG5cdCQkc2NvcGUsXG5cdHNsb3RfY2hhbmdlcyxcblx0Z2V0X3Nsb3RfY29udGV4dF9mblxuKSB7XG5cdGlmIChzbG90X2NoYW5nZXMpIHtcblx0XHRjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcblx0XHRzbG90LnAoc2xvdF9jb250ZXh0LCBzbG90X2NoYW5nZXMpO1xuXHR9XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfc2xvdChcblx0c2xvdCxcblx0c2xvdF9kZWZpbml0aW9uLFxuXHRjdHgsXG5cdCQkc2NvcGUsXG5cdGRpcnR5LFxuXHRnZXRfc2xvdF9jaGFuZ2VzX2ZuLFxuXHRnZXRfc2xvdF9jb250ZXh0X2ZuXG4pIHtcblx0Y29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcblx0dXBkYXRlX3Nsb3RfYmFzZShzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbn1cblxuLyoqIEByZXR1cm5zIHthbnlbXSB8IC0xfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9hbGxfZGlydHlfZnJvbV9zY29wZSgkJHNjb3BlKSB7XG5cdGlmICgkJHNjb3BlLmN0eC5sZW5ndGggPiAzMikge1xuXHRcdGNvbnN0IGRpcnR5ID0gW107XG5cdFx0Y29uc3QgbGVuZ3RoID0gJCRzY29wZS5jdHgubGVuZ3RoIC8gMzI7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0ZGlydHlbaV0gPSAtMTtcblx0XHR9XG5cdFx0cmV0dXJuIGRpcnR5O1xuXHR9XG5cdHJldHVybiAtMTtcbn1cblxuLyoqIEByZXR1cm5zIHt7fX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXHRmb3IgKGNvbnN0IGsgaW4gcHJvcHMpIGlmIChrWzBdICE9PSAnJCcpIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogQHJldHVybnMge3t9fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuXHRjb25zdCByZXN0ID0ge307XG5cdGtleXMgPSBuZXcgU2V0KGtleXMpO1xuXHRmb3IgKGNvbnN0IGsgaW4gcHJvcHMpIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKSByZXN0W2tdID0gcHJvcHNba107XG5cdHJldHVybiByZXN0O1xufVxuXG4vKiogQHJldHVybnMge3t9fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVfc2xvdHMoc2xvdHMpIHtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cdGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG5cdFx0cmVzdWx0W2tleV0gPSB0cnVlO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBAcmV0dXJucyB7KHRoaXM6IGFueSwgLi4uYXJnczogYW55W10pID0+IHZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gb25jZShmbikge1xuXHRsZXQgcmFuID0gZmFsc2U7XG5cdHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdGlmIChyYW4pIHJldHVybjtcblx0XHRyYW4gPSB0cnVlO1xuXHRcdGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudWxsX3RvX2VtcHR5KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSkge1xuXHRzdG9yZS5zZXQodmFsdWUpO1xuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgY29uc3QgaGFzX3Byb3AgPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGlvbl9kZXN0cm95ZXIoYWN0aW9uX3Jlc3VsdCkge1xuXHRyZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuLyoqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge1tudW1iZXIsIHN0cmluZ119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdF9jc3NfdW5pdCh2YWx1ZSkge1xuXHRjb25zdCBzcGxpdCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubWF0Y2goL15cXHMqKC0/W1xcZC5dKykoW15cXHNdKilcXHMqJC8pO1xuXHRyZXR1cm4gc3BsaXQgPyBbcGFyc2VGbG9hdChzcGxpdFsxXSksIHNwbGl0WzJdIHx8ICdweCddIDogWy8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodmFsdWUpLCAncHgnXTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbnRlbnRlZGl0YWJsZV90cnV0aHlfdmFsdWVzID0gWycnLCB0cnVlLCAxLCAndHJ1ZScsICdjb250ZW50ZWRpdGFibGUnXTtcbiIsImltcG9ydCB7IGN1c3RvbV9ldmVudCB9IGZyb20gJy4vZG9tLmpzJztcblxuZXhwb3J0IGxldCBjdXJyZW50X2NvbXBvbmVudDtcblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcblx0Y3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG5cdGlmICghY3VycmVudF9jb21wb25lbnQpIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG5cdHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBTY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgdXBkYXRlZCBhZnRlciBhbnkgc3RhdGUgY2hhbmdlLlxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBydW5zIHdpbGwgYmUgYmVmb3JlIHRoZSBpbml0aWFsIGBvbk1vdW50YFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNiZWZvcmV1cGRhdGVcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcblx0Z2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBUaGUgYG9uTW91bnRgIGZ1bmN0aW9uIHNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBhcyBzb29uIGFzIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCB0byB0aGUgRE9NLlxuICogSXQgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBjb21wb25lbnQncyBpbml0aWFsaXNhdGlvbiAoYnV0IGRvZXNuJ3QgbmVlZCB0byBsaXZlICppbnNpZGUqIHRoZSBjb21wb25lbnQ7XG4gKiBpdCBjYW4gYmUgY2FsbGVkIGZyb20gYW4gZXh0ZXJuYWwgbW9kdWxlKS5cbiAqXG4gKiBJZiBhIGZ1bmN0aW9uIGlzIHJldHVybmVkIF9zeW5jaHJvbm91c2x5XyBmcm9tIGBvbk1vdW50YCwgaXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBgb25Nb3VudGAgZG9lcyBub3QgcnVuIGluc2lkZSBhIFtzZXJ2ZXItc2lkZSBjb21wb25lbnRdKC9kb2NzI3J1bi10aW1lLXNlcnZlci1zaWRlLWNvbXBvbmVudC1hcGkpLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNvbm1vdW50XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHsoKSA9PiBpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLk5vdEZ1bmN0aW9uPFQ+IHwgUHJvbWlzZTxpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLk5vdEZ1bmN0aW9uPFQ+PiB8ICgoKSA9PiBhbnkpfSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbk1vdW50KGZuKSB7XG5cdGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuXG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBhZnRlciB0aGUgaW5pdGlhbCBgb25Nb3VudGBcbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUjYWZ0ZXJ1cGRhdGVcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuXHRnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5cbi8qKlxuICogU2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBPdXQgb2YgYG9uTW91bnRgLCBgYmVmb3JlVXBkYXRlYCwgYGFmdGVyVXBkYXRlYCBhbmQgYG9uRGVzdHJveWAsIHRoaXMgaXMgdGhlXG4gKiBvbmx5IG9uZSB0aGF0IHJ1bnMgaW5zaWRlIGEgc2VydmVyLXNpZGUgY29tcG9uZW50LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNvbmRlc3Ryb3lcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcblx0Z2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGV2ZW50IGRpc3BhdGNoZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBkaXNwYXRjaCBbY29tcG9uZW50IGV2ZW50c10oL2RvY3MjdGVtcGxhdGUtc3ludGF4LWNvbXBvbmVudC1kaXJlY3RpdmVzLW9uLWV2ZW50bmFtZSkuXG4gKiBFdmVudCBkaXNwYXRjaGVycyBhcmUgZnVuY3Rpb25zIHRoYXQgY2FuIHRha2UgdHdvIGFyZ3VtZW50czogYG5hbWVgIGFuZCBgZGV0YWlsYC5cbiAqXG4gKiBDb21wb25lbnQgZXZlbnRzIGNyZWF0ZWQgd2l0aCBgY3JlYXRlRXZlbnREaXNwYXRjaGVyYCBjcmVhdGUgYVxuICogW0N1c3RvbUV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQpLlxuICogVGhlc2UgZXZlbnRzIGRvIG5vdCBbYnViYmxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0xlYXJuL0phdmFTY3JpcHQvQnVpbGRpbmdfYmxvY2tzL0V2ZW50cyNFdmVudF9idWJibGluZ19hbmRfY2FwdHVyZSkuXG4gKiBUaGUgYGRldGFpbGAgYXJndW1lbnQgY29ycmVzcG9uZHMgdG8gdGhlIFtDdXN0b21FdmVudC5kZXRhaWxdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC9kZXRhaWwpXG4gKiBwcm9wZXJ0eSBhbmQgY2FuIGNvbnRhaW4gYW55IHR5cGUgb2YgZGF0YS5cbiAqXG4gKiBUaGUgZXZlbnQgZGlzcGF0Y2hlciBjYW4gYmUgdHlwZWQgdG8gbmFycm93IHRoZSBhbGxvd2VkIGV2ZW50IG5hbWVzIGFuZCB0aGUgdHlwZSBvZiB0aGUgYGRldGFpbGAgYXJndW1lbnQ6XG4gKiBgYGB0c1xuICogY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXI8e1xuICogIGxvYWRlZDogbmV2ZXI7IC8vIGRvZXMgbm90IHRha2UgYSBkZXRhaWwgYXJndW1lbnRcbiAqICBjaGFuZ2U6IHN0cmluZzsgLy8gdGFrZXMgYSBkZXRhaWwgYXJndW1lbnQgb2YgdHlwZSBzdHJpbmcsIHdoaWNoIGlzIHJlcXVpcmVkXG4gKiAgb3B0aW9uYWw6IG51bWJlciB8IG51bGw7IC8vIHRha2VzIGFuIG9wdGlvbmFsIGRldGFpbCBhcmd1bWVudCBvZiB0eXBlIG51bWJlclxuICogfT4oKTtcbiAqIGBgYFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNjcmVhdGVldmVudGRpc3BhdGNoZXJcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW0V2ZW50TWFwPWFueV1cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuRXZlbnREaXNwYXRjaGVyPEV2ZW50TWFwPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcblx0Y29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG5cdHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcblx0XHRjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuXHRcdGlmIChjYWxsYmFja3MpIHtcblx0XHRcdC8vIFRPRE8gYXJlIHRoZXJlIHNpdHVhdGlvbnMgd2hlcmUgZXZlbnRzIGNvdWxkIGJlIGRpc3BhdGNoZWRcblx0XHRcdC8vIGluIGEgc2VydmVyIChub24tRE9NKSBlbnZpcm9ubWVudD9cblx0XHRcdGNvbnN0IGV2ZW50ID0gY3VzdG9tX2V2ZW50KC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodHlwZSksIGRldGFpbCwgeyBjYW5jZWxhYmxlIH0pO1xuXHRcdFx0Y2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaCgoZm4pID0+IHtcblx0XHRcdFx0Zm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcbn1cblxuLyoqXG4gKiBBc3NvY2lhdGVzIGFuIGFyYml0cmFyeSBgY29udGV4dGAgb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgY29tcG9uZW50IGFuZCB0aGUgc3BlY2lmaWVkIGBrZXlgXG4gKiBhbmQgcmV0dXJucyB0aGF0IG9iamVjdC4gVGhlIGNvbnRleHQgaXMgdGhlbiBhdmFpbGFibGUgdG8gY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudFxuICogKGluY2x1ZGluZyBzbG90dGVkIGNvbnRlbnQpIHdpdGggYGdldENvbnRleHRgLlxuICpcbiAqIExpa2UgbGlmZWN5Y2xlIGZ1bmN0aW9ucywgdGhpcyBtdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNzZXRjb250ZXh0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHBhcmFtIHtUfSBjb250ZXh0XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG5cdGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG5cdHJldHVybiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29udGV4dCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCB3aXRoIHRoZSBzcGVjaWZpZWQgYGtleWAuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNnZXRjb250ZXh0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KGtleSkge1xuXHRyZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHdob2xlIGNvbnRleHQgbWFwIHRoYXQgYmVsb25ncyB0byB0aGUgY2xvc2VzdCBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi4gVXNlZnVsLCBmb3IgZXhhbXBsZSwgaWYgeW91XG4gKiBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZSBhIGNvbXBvbmVudCBhbmQgd2FudCB0byBwYXNzIHRoZSBleGlzdGluZyBjb250ZXh0IHRvIGl0LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNnZXRhbGxjb250ZXh0c1xuICogQHRlbXBsYXRlIHtNYXA8YW55LCBhbnk+fSBbVD1NYXA8YW55LCBhbnk+XVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxDb250ZXh0cygpIHtcblx0cmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiBga2V5YCBoYXMgYmVlbiBzZXQgaW4gdGhlIGNvbnRleHQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUjaGFzY29udGV4dFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250ZXh0KGtleSkge1xuXHRyZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cblxuLy8gVE9ETyBmaWd1cmUgb3V0IGlmIHdlIHN0aWxsIHdhbnQgdG8gc3VwcG9ydFxuLy8gc2hvcnRoYW5kIGV2ZW50cywgb3IgaWYgd2Ugd2FudCB0byBpbXBsZW1lbnRcbi8vIGEgcmVhbCBidWJibGluZyBtZWNoYW5pc21cbi8qKlxuICogQHBhcmFtIGNvbXBvbmVudFxuICogQHBhcmFtIGV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZShjb21wb25lbnQsIGV2ZW50KSB7XG5cdGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG5cdGlmIChjYWxsYmFja3MpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaCgoZm4pID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgcnVuX2FsbCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgY3VycmVudF9jb21wb25lbnQsIHNldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gJy4vbGlmZWN5Y2xlLmpzJztcblxuZXhwb3J0IGNvbnN0IGRpcnR5X2NvbXBvbmVudHMgPSBbXTtcbmV4cG9ydCBjb25zdCBpbnRyb3MgPSB7IGVuYWJsZWQ6IGZhbHNlIH07XG5leHBvcnQgY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcblxubGV0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcblxuY29uc3QgZmx1c2hfY2FsbGJhY2tzID0gW107XG5cbmNvbnN0IHJlc29sdmVkX3Byb21pc2UgPSAvKiBAX19QVVJFX18gKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbmxldCB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZV91cGRhdGUoKSB7XG5cdGlmICghdXBkYXRlX3NjaGVkdWxlZCkge1xuXHRcdHVwZGF0ZV9zY2hlZHVsZWQgPSB0cnVlO1xuXHRcdHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpY2soKSB7XG5cdHNjaGVkdWxlX3VwZGF0ZSgpO1xuXHRyZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcblx0cmVuZGVyX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9mbHVzaF9jYWxsYmFjayhmbikge1xuXHRmbHVzaF9jYWxsYmFja3MucHVzaChmbik7XG59XG5cbi8vIGZsdXNoKCkgY2FsbHMgY2FsbGJhY2tzIGluIHRoaXMgb3JkZXI6XG4vLyAxLiBBbGwgYmVmb3JlVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuXG4vLyAyLiBBbGwgYmluZDp0aGlzIGNhbGxiYWNrcywgaW4gcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyAzLiBBbGwgYWZ0ZXJVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW4uIEVYQ0VQVFxuLy8gICAgZm9yIGFmdGVyVXBkYXRlcyBjYWxsZWQgZHVyaW5nIHRoZSBpbml0aWFsIG9uTW91bnQsIHdoaWNoIGFyZSBjYWxsZWQgaW5cbi8vICAgIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gU2luY2UgY2FsbGJhY2tzIG1pZ2h0IHVwZGF0ZSBjb21wb25lbnQgdmFsdWVzLCB3aGljaCBjb3VsZCB0cmlnZ2VyIGFub3RoZXJcbi8vIGNhbGwgdG8gZmx1c2goKSwgdGhlIGZvbGxvd2luZyBzdGVwcyBndWFyZCBhZ2FpbnN0IHRoaXM6XG4vLyAxLiBEdXJpbmcgYmVmb3JlVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4vLyAgICBkaXJ0eV9jb21wb25lbnRzIGFycmF5IGFuZCB3aWxsIGNhdXNlIGEgcmVlbnRyYW50IGNhbGwgdG8gZmx1c2goKS4gQmVjYXVzZVxuLy8gICAgdGhlIGZsdXNoIGluZGV4IGlzIGtlcHQgb3V0c2lkZSB0aGUgZnVuY3Rpb24sIHRoZSByZWVudHJhbnQgY2FsbCB3aWxsIHBpY2tcbi8vICAgIHVwIHdoZXJlIHRoZSBlYXJsaWVyIGNhbGwgbGVmdCBvZmYgYW5kIGdvIHRocm91Z2ggYWxsIGRpcnR5IGNvbXBvbmVudHMuIFRoZVxuLy8gICAgY3VycmVudF9jb21wb25lbnQgdmFsdWUgaXMgc2F2ZWQgYW5kIHJlc3RvcmVkIHNvIHRoYXQgdGhlIHJlZW50cmFudCBjYWxsIHdpbGxcbi8vICAgIG5vdCBpbnRlcmZlcmUgd2l0aCB0aGUgXCJwYXJlbnRcIiBmbHVzaCgpIGNhbGwuXG4vLyAyLiBiaW5kOnRoaXMgY2FsbGJhY2tzIGNhbm5vdCB0cmlnZ2VyIG5ldyBmbHVzaCgpIGNhbGxzLlxuLy8gMy4gRHVyaW5nIGFmdGVyVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgTk9UIGhhdmUgdGhlaXIgYWZ0ZXJVcGRhdGVcbi8vICAgIGNhbGxiYWNrIGNhbGxlZCBhIHNlY29uZCB0aW1lOyB0aGUgc2Vlbl9jYWxsYmFja3Mgc2V0LCBvdXRzaWRlIHRoZSBmbHVzaCgpXG4vLyAgICBmdW5jdGlvbiwgZ3VhcmFudGVlcyB0aGlzIGJlaGF2aW9yLlxuY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG5cbmxldCBmbHVzaGlkeCA9IDA7IC8vIERvICpub3QqIG1vdmUgdGhpcyBpbnNpZGUgdGhlIGZsdXNoKCkgZnVuY3Rpb25cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKCkge1xuXHQvLyBEbyBub3QgcmVlbnRlciBmbHVzaCB3aGlsZSBkaXJ0eSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBhcyB0aGlzIGNhblxuXHQvLyByZXN1bHQgaW4gYW4gaW5maW5pdGUgbG9vcC4gSW5zdGVhZCwgbGV0IHRoZSBpbm5lciBmbHVzaCBoYW5kbGUgaXQuXG5cdC8vIFJlZW50cmFuY3kgaXMgb2sgYWZ0ZXJ3YXJkcyBmb3IgYmluZGluZ3MgZXRjLlxuXHRpZiAoZmx1c2hpZHggIT09IDApIHtcblx0XHRyZXR1cm47XG5cdH1cblx0Y29uc3Qgc2F2ZWRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG5cdGRvIHtcblx0XHQvLyBmaXJzdCwgY2FsbCBiZWZvcmVVcGRhdGUgZnVuY3Rpb25zXG5cdFx0Ly8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG5cdFx0dHJ5IHtcblx0XHRcdHdoaWxlIChmbHVzaGlkeCA8IGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHNbZmx1c2hpZHhdO1xuXHRcdFx0XHRmbHVzaGlkeCsrO1xuXHRcdFx0XHRzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcblx0XHRcdFx0dXBkYXRlKGNvbXBvbmVudC4kJCk7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gcmVzZXQgZGlydHkgc3RhdGUgdG8gbm90IGVuZCB1cCBpbiBhIGRlYWRsb2NrZWQgc3RhdGUgYW5kIHRoZW4gcmV0aHJvd1xuXHRcdFx0ZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuXHRcdFx0Zmx1c2hpZHggPSAwO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9XG5cdFx0c2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuXHRcdGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcblx0XHRmbHVzaGlkeCA9IDA7XG5cdFx0d2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aCkgYmluZGluZ19jYWxsYmFja3MucG9wKCkoKTtcblx0XHQvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcblx0XHQvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG5cdFx0Ly8gc3Vic2VxdWVudCB1cGRhdGVzLi4uXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG5cdFx0XHRpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcblx0XHRcdFx0Ly8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuXHRcdFx0XHRzZWVuX2NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuXHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZW5kZXJfY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG5cdH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcblx0d2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcblx0fVxuXHR1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG5cdHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG5cdHNldF9jdXJyZW50X2NvbXBvbmVudChzYXZlZF9jb21wb25lbnQpO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcblx0aWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG5cdFx0JCQudXBkYXRlKCk7XG5cdFx0cnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcblx0XHRjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuXHRcdCQkLmRpcnR5ID0gWy0xXTtcblx0XHQkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5wKCQkLmN0eCwgZGlydHkpO1xuXHRcdCQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuXHR9XG59XG5cbi8qKlxuICogVXNlZnVsIGZvciBleGFtcGxlIHRvIGV4ZWN1dGUgcmVtYWluaW5nIGBhZnRlclVwZGF0ZWAgY2FsbGJhY2tzIGJlZm9yZSBleGVjdXRpbmcgYGRlc3Ryb3lgLlxuICogQHBhcmFtIHtGdW5jdGlvbltdfSBmbnNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2hfcmVuZGVyX2NhbGxiYWNrcyhmbnMpIHtcblx0Y29uc3QgZmlsdGVyZWQgPSBbXTtcblx0Y29uc3QgdGFyZ2V0cyA9IFtdO1xuXHRyZW5kZXJfY2FsbGJhY2tzLmZvckVhY2goKGMpID0+IChmbnMuaW5kZXhPZihjKSA9PT0gLTEgPyBmaWx0ZXJlZC5wdXNoKGMpIDogdGFyZ2V0cy5wdXNoKGMpKSk7XG5cdHRhcmdldHMuZm9yRWFjaCgoYykgPT4gYygpKTtcblx0cmVuZGVyX2NhbGxiYWNrcyA9IGZpbHRlcmVkO1xufVxuIiwiaW1wb3J0IHsgaWRlbnRpdHkgYXMgbGluZWFyLCBpc19mdW5jdGlvbiwgbm9vcCwgcnVuX2FsbCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgbm93IH0gZnJvbSAnLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgeyBsb29wIH0gZnJvbSAnLi9sb29wLmpzJztcbmltcG9ydCB7IGNyZWF0ZV9ydWxlLCBkZWxldGVfcnVsZSB9IGZyb20gJy4vc3R5bGVfbWFuYWdlci5qcyc7XG5pbXBvcnQgeyBjdXN0b21fZXZlbnQgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBhZGRfcmVuZGVyX2NhbGxiYWNrIH0gZnJvbSAnLi9zY2hlZHVsZXIuanMnO1xuXG4vKipcbiAqIEB0eXBlIHtQcm9taXNlPHZvaWQ+IHwgbnVsbH1cbiAqL1xubGV0IHByb21pc2U7XG5cbi8qKlxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbmZ1bmN0aW9uIHdhaXQoKSB7XG5cdGlmICghcHJvbWlzZSkge1xuXHRcdHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcblx0XHRwcm9taXNlLnRoZW4oKCkgPT4ge1xuXHRcdFx0cHJvbWlzZSA9IG51bGw7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHByb21pc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge0lOVFJPIHwgT1VUUk8gfCBib29sZWFufSBkaXJlY3Rpb25cbiAqIEBwYXJhbSB7J3N0YXJ0JyB8ICdlbmQnfSBraW5kXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG5cdG5vZGUuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQoYCR7ZGlyZWN0aW9uID8gJ2ludHJvJyA6ICdvdXRybyd9JHtraW5kfWApKTtcbn1cblxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogQHR5cGUge091dHJvfVxuICovXG5sZXQgb3V0cm9zO1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwX291dHJvcygpIHtcblx0b3V0cm9zID0ge1xuXHRcdHI6IDAsXG5cdFx0YzogW10sXG5cdFx0cDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuXHR9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrX291dHJvcygpIHtcblx0aWYgKCFvdXRyb3Mucikge1xuXHRcdHJ1bl9hbGwob3V0cm9zLmMpO1xuXHR9XG5cdG91dHJvcyA9IG91dHJvcy5wO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5GcmFnbWVudH0gYmxvY2tcbiAqIEBwYXJhbSB7MCB8IDF9IFtsb2NhbF1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcblx0aWYgKGJsb2NrICYmIGJsb2NrLmkpIHtcblx0XHRvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuXHRcdGJsb2NrLmkobG9jYWwpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkZyYWdtZW50fSBibG9ja1xuICogQHBhcmFtIHswIHwgMX0gbG9jYWxcbiAqIEBwYXJhbSB7MCB8IDF9IFtkZXRhY2hdXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IFtjYWxsYmFja11cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNpdGlvbl9vdXQoYmxvY2ssIGxvY2FsLCBkZXRhY2gsIGNhbGxiYWNrKSB7XG5cdGlmIChibG9jayAmJiBibG9jay5vKSB7XG5cdFx0aWYgKG91dHJvaW5nLmhhcyhibG9jaykpIHJldHVybjtcblx0XHRvdXRyb2luZy5hZGQoYmxvY2spO1xuXHRcdG91dHJvcy5jLnB1c2goKCkgPT4ge1xuXHRcdFx0b3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcblx0XHRcdGlmIChjYWxsYmFjaykge1xuXHRcdFx0XHRpZiAoZGV0YWNoKSBibG9jay5kKDEpO1xuXHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGJsb2NrLm8obG9jYWwpO1xuXHR9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG5cdFx0Y2FsbGJhY2soKTtcblx0fVxufVxuXG4vKipcbiAqIEB0eXBlIHtpbXBvcnQoJy4uL3RyYW5zaXRpb24vcHVibGljLmpzJykuVHJhbnNpdGlvbkNvbmZpZ31cbiAqL1xuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtUcmFuc2l0aW9uRm59IGZuXG4gKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gKiBAcmV0dXJucyB7eyBzdGFydCgpOiB2b2lkOyBpbnZhbGlkYXRlKCk6IHZvaWQ7IGVuZCgpOiB2b2lkOyB9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuXHQvKipcblx0ICogQHR5cGUge1RyYW5zaXRpb25PcHRpb25zfSAqL1xuXHRjb25zdCBvcHRpb25zID0geyBkaXJlY3Rpb246ICdpbicgfTtcblx0bGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcywgb3B0aW9ucyk7XG5cdGxldCBydW5uaW5nID0gZmFsc2U7XG5cdGxldCBhbmltYXRpb25fbmFtZTtcblx0bGV0IHRhc2s7XG5cdGxldCB1aWQgPSAwO1xuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gY2xlYW51cCgpIHtcblx0XHRpZiAoYW5pbWF0aW9uX25hbWUpIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gZ28oKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0ZGVsYXkgPSAwLFxuXHRcdFx0ZHVyYXRpb24gPSAzMDAsXG5cdFx0XHRlYXNpbmcgPSBsaW5lYXIsXG5cdFx0XHR0aWNrID0gbm9vcCxcblx0XHRcdGNzc1xuXHRcdH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuXHRcdGlmIChjc3MpIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuXHRcdHRpY2soMCwgMSk7XG5cdFx0Y29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG5cdFx0Y29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG5cdFx0aWYgKHRhc2spIHRhc2suYWJvcnQoKTtcblx0XHRydW5uaW5nID0gdHJ1ZTtcblx0XHRhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIHRydWUsICdzdGFydCcpKTtcblx0XHR0YXNrID0gbG9vcCgobm93KSA9PiB7XG5cdFx0XHRpZiAocnVubmluZykge1xuXHRcdFx0XHRpZiAobm93ID49IGVuZF90aW1lKSB7XG5cdFx0XHRcdFx0dGljaygxLCAwKTtcblx0XHRcdFx0XHRkaXNwYXRjaChub2RlLCB0cnVlLCAnZW5kJyk7XG5cdFx0XHRcdFx0Y2xlYW51cCgpO1xuXHRcdFx0XHRcdHJldHVybiAocnVubmluZyA9IGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcblx0XHRcdFx0XHRjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0XHR0aWNrKHQsIDEgLSB0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJ1bm5pbmc7XG5cdFx0fSk7XG5cdH1cblx0bGV0IHN0YXJ0ZWQgPSBmYWxzZTtcblx0cmV0dXJuIHtcblx0XHRzdGFydCgpIHtcblx0XHRcdGlmIChzdGFydGVkKSByZXR1cm47XG5cdFx0XHRzdGFydGVkID0gdHJ1ZTtcblx0XHRcdGRlbGV0ZV9ydWxlKG5vZGUpO1xuXHRcdFx0aWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcblx0XHRcdFx0Y29uZmlnID0gY29uZmlnKG9wdGlvbnMpO1xuXHRcdFx0XHR3YWl0KCkudGhlbihnbyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRnbygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZSgpIHtcblx0XHRcdHN0YXJ0ZWQgPSBmYWxzZTtcblx0XHR9LFxuXHRcdGVuZCgpIHtcblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGNsZWFudXAoKTtcblx0XHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQgJiBFbGVtZW50Q1NTSW5saW5lU3R5bGV9IG5vZGVcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbkZufSBmblxuICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICogQHJldHVybnMge3sgZW5kKHJlc2V0OiBhbnkpOiB2b2lkOyB9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX291dF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcblx0LyoqIEB0eXBlIHtUcmFuc2l0aW9uT3B0aW9uc30gKi9cblx0Y29uc3Qgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnb3V0JyB9O1xuXHRsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zLCBvcHRpb25zKTtcblx0bGV0IHJ1bm5pbmcgPSB0cnVlO1xuXHRsZXQgYW5pbWF0aW9uX25hbWU7XG5cdGNvbnN0IGdyb3VwID0gb3V0cm9zO1xuXHRncm91cC5yICs9IDE7XG5cdC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblx0bGV0IG9yaWdpbmFsX2luZXJ0X3ZhbHVlO1xuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gZ28oKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0ZGVsYXkgPSAwLFxuXHRcdFx0ZHVyYXRpb24gPSAzMDAsXG5cdFx0XHRlYXNpbmcgPSBsaW5lYXIsXG5cdFx0XHR0aWNrID0gbm9vcCxcblx0XHRcdGNzc1xuXHRcdH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuXG5cdFx0aWYgKGNzcykgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcblxuXHRcdGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuXHRcdGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuXHRcdGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdzdGFydCcpKTtcblxuXHRcdGlmICgnaW5lcnQnIGluIG5vZGUpIHtcblx0XHRcdG9yaWdpbmFsX2luZXJ0X3ZhbHVlID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8gKG5vZGUpLmluZXJ0O1xuXHRcdFx0bm9kZS5pbmVydCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0bG9vcCgobm93KSA9PiB7XG5cdFx0XHRpZiAocnVubmluZykge1xuXHRcdFx0XHRpZiAobm93ID49IGVuZF90aW1lKSB7XG5cdFx0XHRcdFx0dGljaygwLCAxKTtcblx0XHRcdFx0XHRkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuXHRcdFx0XHRcdGlmICghLS1ncm91cC5yKSB7XG5cdFx0XHRcdFx0XHQvLyB0aGlzIHdpbGwgcmVzdWx0IGluIGBlbmQoKWAgYmVpbmcgY2FsbGVkLFxuXHRcdFx0XHRcdFx0Ly8gc28gd2UgZG9uJ3QgbmVlZCB0byBjbGVhbiB1cCBoZXJlXG5cdFx0XHRcdFx0XHRydW5fYWxsKGdyb3VwLmMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG5cdFx0XHRcdFx0Y29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG5cdFx0XHRcdFx0dGljaygxIC0gdCwgdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBydW5uaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcblx0XHR3YWl0KCkudGhlbigoKSA9PiB7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG5cdFx0XHRnbygpO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdGdvKCk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGVuZChyZXNldCkge1xuXHRcdFx0aWYgKHJlc2V0ICYmICdpbmVydCcgaW4gbm9kZSkge1xuXHRcdFx0XHRub2RlLmluZXJ0ID0gb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcblx0XHRcdFx0Y29uZmlnLnRpY2soMSwgMCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocnVubmluZykge1xuXHRcdFx0XHRpZiAoYW5pbWF0aW9uX25hbWUpIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcblx0XHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQgJiBFbGVtZW50Q1NTSW5saW5lU3R5bGV9IG5vZGVcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbkZufSBmblxuICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICogQHBhcmFtIHtib29sZWFufSBpbnRyb1xuICogQHJldHVybnMge3sgcnVuKGI6IDAgfCAxKTogdm9pZDsgZW5kKCk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG5cdC8qKlxuXHQgKiBAdHlwZSB7VHJhbnNpdGlvbk9wdGlvbnN9ICovXG5cdGNvbnN0IG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogJ2JvdGgnIH07XG5cdGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMsIG9wdGlvbnMpO1xuXHRsZXQgdCA9IGludHJvID8gMCA6IDE7XG5cblx0LyoqXG5cdCAqIEB0eXBlIHtQcm9ncmFtIHwgbnVsbH0gKi9cblx0bGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG5cblx0LyoqXG5cdCAqIEB0eXBlIHtQZW5kaW5nUHJvZ3JhbSB8IG51bGx9ICovXG5cdGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuXHRsZXQgYW5pbWF0aW9uX25hbWUgPSBudWxsO1xuXG5cdC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblx0bGV0IG9yaWdpbmFsX2luZXJ0X3ZhbHVlO1xuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuXHRcdGlmIChhbmltYXRpb25fbmFtZSkgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7UGVuZGluZ1Byb2dyYW19IHByb2dyYW1cblx0ICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG5cdCAqIEByZXR1cm5zIHtQcm9ncmFtfVxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuXHRcdGNvbnN0IGQgPSAvKiogQHR5cGUge1Byb2dyYW1bJ2QnXX0gKi8gKHByb2dyYW0uYiAtIHQpO1xuXHRcdGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRhOiB0LFxuXHRcdFx0YjogcHJvZ3JhbS5iLFxuXHRcdFx0ZCxcblx0XHRcdGR1cmF0aW9uLFxuXHRcdFx0c3RhcnQ6IHByb2dyYW0uc3RhcnQsXG5cdFx0XHRlbmQ6IHByb2dyYW0uc3RhcnQgKyBkdXJhdGlvbixcblx0XHRcdGdyb3VwOiBwcm9ncmFtLmdyb3VwXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0lOVFJPIHwgT1VUUk99IGJcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRmdW5jdGlvbiBnbyhiKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0ZGVsYXkgPSAwLFxuXHRcdFx0ZHVyYXRpb24gPSAzMDAsXG5cdFx0XHRlYXNpbmcgPSBsaW5lYXIsXG5cdFx0XHR0aWNrID0gbm9vcCxcblx0XHRcdGNzc1xuXHRcdH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuXG5cdFx0LyoqXG5cdFx0ICogQHR5cGUge1BlbmRpbmdQcm9ncmFtfSAqL1xuXHRcdGNvbnN0IHByb2dyYW0gPSB7XG5cdFx0XHRzdGFydDogbm93KCkgKyBkZWxheSxcblx0XHRcdGJcblx0XHR9O1xuXG5cdFx0aWYgKCFiKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuXHRcdFx0cHJvZ3JhbS5ncm91cCA9IG91dHJvcztcblx0XHRcdG91dHJvcy5yICs9IDE7XG5cdFx0fVxuXG5cdFx0aWYgKCdpbmVydCcgaW4gbm9kZSkge1xuXHRcdFx0aWYgKGIpIHtcblx0XHRcdFx0aWYgKG9yaWdpbmFsX2luZXJ0X3ZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHQvLyBhYm9ydGVkL3JldmVyc2VkIG91dHJvIOKAlCByZXN0b3JlIHByZXZpb3VzIGluZXJ0IHZhbHVlXG5cdFx0XHRcdFx0bm9kZS5pbmVydCA9IG9yaWdpbmFsX2luZXJ0X3ZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcmlnaW5hbF9pbmVydF92YWx1ZSA9IC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovIChub2RlKS5pbmVydDtcblx0XHRcdFx0bm9kZS5pbmVydCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pIHtcblx0XHRcdHBlbmRpbmdfcHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cblx0XHRcdC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuXHRcdFx0aWYgKGNzcykge1xuXHRcdFx0XHRjbGVhcl9hbmltYXRpb24oKTtcblx0XHRcdFx0YW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcblx0XHRcdH1cblx0XHRcdGlmIChiKSB0aWNrKDAsIDEpO1xuXHRcdFx0cnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG5cdFx0XHRhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcblx0XHRcdGxvb3AoKG5vdykgPT4ge1xuXHRcdFx0XHRpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuXHRcdFx0XHRcdHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG5cdFx0XHRcdFx0cGVuZGluZ19wcm9ncmFtID0gbnVsbDtcblx0XHRcdFx0XHRkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG5cdFx0XHRcdFx0aWYgKGNzcykge1xuXHRcdFx0XHRcdFx0Y2xlYXJfYW5pbWF0aW9uKCk7XG5cdFx0XHRcdFx0XHRhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKFxuXHRcdFx0XHRcdFx0XHRub2RlLFxuXHRcdFx0XHRcdFx0XHR0LFxuXHRcdFx0XHRcdFx0XHRydW5uaW5nX3Byb2dyYW0uYixcblx0XHRcdFx0XHRcdFx0cnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLFxuXHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRlYXNpbmcsXG5cdFx0XHRcdFx0XHRcdGNvbmZpZy5jc3Ncblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChydW5uaW5nX3Byb2dyYW0pIHtcblx0XHRcdFx0XHRpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcblx0XHRcdFx0XHRcdHRpY2soKHQgPSBydW5uaW5nX3Byb2dyYW0uYiksIDEgLSB0KTtcblx0XHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnZW5kJyk7XG5cdFx0XHRcdFx0XHRpZiAoIXBlbmRpbmdfcHJvZ3JhbSkge1xuXHRcdFx0XHRcdFx0XHQvLyB3ZSdyZSBkb25lXG5cdFx0XHRcdFx0XHRcdGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuXHRcdFx0XHRcdFx0XHRcdC8vIGludHJvIOKAlCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuXHRcdFx0XHRcdFx0XHRcdGNsZWFyX2FuaW1hdGlvbigpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIG91dHJvIOKAlCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuXHRcdFx0XHRcdFx0XHRcdGlmICghLS1ydW5uaW5nX3Byb2dyYW0uZ3JvdXAucikgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG5cdFx0XHRcdFx0XHRjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuXHRcdFx0XHRcdFx0dCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG5cdFx0XHRcdFx0XHR0aWNrKHQsIDEgLSB0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICEhKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB7XG5cdFx0cnVuKGIpIHtcblx0XHRcdGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG5cdFx0XHRcdHdhaXQoKS50aGVuKCgpID0+IHtcblx0XHRcdFx0XHRjb25zdCBvcHRzID0geyBkaXJlY3Rpb246IGIgPyAnaW4nIDogJ291dCcgfTtcblx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0Y29uZmlnID0gY29uZmlnKG9wdHMpO1xuXHRcdFx0XHRcdGdvKGIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdvKGIpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZW5kKCkge1xuXHRcdFx0Y2xlYXJfYW5pbWF0aW9uKCk7XG5cdFx0XHRydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqIEB0eXBlZGVmIHsxfSBJTlRSTyAqL1xuLyoqIEB0eXBlZGVmIHswfSBPVVRSTyAqL1xuLyoqIEB0eXBlZGVmIHt7IGRpcmVjdGlvbjogJ2luJyB8ICdvdXQnIHwgJ2JvdGgnIH19IFRyYW5zaXRpb25PcHRpb25zICovXG4vKiogQHR5cGVkZWYgeyhub2RlOiBFbGVtZW50LCBwYXJhbXM6IGFueSwgb3B0aW9uczogVHJhbnNpdGlvbk9wdGlvbnMpID0+IGltcG9ydCgnLi4vdHJhbnNpdGlvbi9wdWJsaWMuanMnKS5UcmFuc2l0aW9uQ29uZmlnfSBUcmFuc2l0aW9uRm4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPdXRyb1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb25bXX0gY1xuICogQHByb3BlcnR5IHtPYmplY3R9IHBcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBlbmRpbmdQcm9ncmFtXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3RhcnRcbiAqIEBwcm9wZXJ0eSB7SU5UUk98T1VUUk99IGJcbiAqIEBwcm9wZXJ0eSB7T3V0cm99IFtncm91cF1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFByb2dyYW1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhXG4gKiBAcHJvcGVydHkge0lOVFJPfE9VVFJPfSBiXG4gKiBAcHJvcGVydHkgezF8LTF9IGRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkdXJhdGlvblxuICogQHByb3BlcnR5IHtudW1iZXJ9IHN0YXJ0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZW5kXG4gKiBAcHJvcGVydHkge091dHJvfSBbZ3JvdXBdXG4gKi9cbiIsImltcG9ydCB7IGlzX3Byb21pc2UgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGNoZWNrX291dHJvcywgZ3JvdXBfb3V0cm9zLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCB9IGZyb20gJy4vdHJhbnNpdGlvbnMuanMnO1xuaW1wb3J0IHsgZmx1c2ggfSBmcm9tICcuL3NjaGVkdWxlci5qcyc7XG5pbXBvcnQgeyBnZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gJy4vbGlmZWN5Y2xlLmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtQcm9taXNlPFQ+fSBwcm9taXNlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuUHJvbWlzZUluZm88VD59IGluZm9cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuXHRjb25zdCB0b2tlbiA9IChpbmZvLnRva2VuID0ge30pO1xuXHQvKipcblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkZyYWdtZW50RmFjdG9yeX0gdHlwZVxuXHQgKiBAcGFyYW0gezAgfCAxIHwgMn0gaW5kZXhcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtrZXldXG5cdCAqIEBwYXJhbSB7YW55fSBbdmFsdWVdXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGluZGV4LCBrZXksIHZhbHVlKSB7XG5cdFx0aWYgKGluZm8udG9rZW4gIT09IHRva2VuKSByZXR1cm47XG5cdFx0aW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuXHRcdGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuXHRcdFx0Y2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcblx0XHR9XG5cdFx0Y29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuXHRcdGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuXHRcdGlmIChpbmZvLmJsb2NrKSB7XG5cdFx0XHRpZiAoaW5mby5ibG9ja3MpIHtcblx0XHRcdFx0aW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcblx0XHRcdFx0XHRpZiAoaSAhPT0gaW5kZXggJiYgYmxvY2spIHtcblx0XHRcdFx0XHRcdGdyb3VwX291dHJvcygpO1xuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jaykge1xuXHRcdFx0XHRcdFx0XHRcdGluZm8uYmxvY2tzW2ldID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRjaGVja19vdXRyb3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5mby5ibG9jay5kKDEpO1xuXHRcdFx0fVxuXHRcdFx0YmxvY2suYygpO1xuXHRcdFx0dHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG5cdFx0XHRibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuXHRcdFx0bmVlZHNfZmx1c2ggPSB0cnVlO1xuXHRcdH1cblx0XHRpbmZvLmJsb2NrID0gYmxvY2s7XG5cdFx0aWYgKGluZm8uYmxvY2tzKSBpbmZvLmJsb2Nrc1tpbmRleF0gPSBibG9jaztcblx0XHRpZiAobmVlZHNfZmx1c2gpIHtcblx0XHRcdGZsdXNoKCk7XG5cdFx0fVxuXHR9XG5cdGlmIChpc19wcm9taXNlKHByb21pc2UpKSB7XG5cdFx0Y29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcblx0XHRwcm9taXNlLnRoZW4oXG5cdFx0XHQodmFsdWUpID0+IHtcblx0XHRcdFx0c2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcblx0XHRcdFx0dXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgdmFsdWUpO1xuXHRcdFx0XHRzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG5cdFx0XHR9LFxuXHRcdFx0KGVycm9yKSA9PiB7XG5cdFx0XHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG5cdFx0XHRcdHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG5cdFx0XHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcblx0XHRcdFx0aWYgKCFpbmZvLmhhc0NhdGNoKSB7XG5cdFx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHRcdC8vIGlmIHdlIHByZXZpb3VzbHkgaGFkIGEgdGhlbi9jYXRjaCBibG9jaywgZGVzdHJveSBpdFxuXHRcdGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuXHRcdFx0dXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG5cdFx0XHR1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpbmZvLnJlc29sdmVkID0gLyoqIEB0eXBlIHtUfSAqLyAocHJvbWlzZSk7XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSkge1xuXHRjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcblx0Y29uc3QgeyByZXNvbHZlZCB9ID0gaW5mbztcblx0aWYgKGluZm8uY3VycmVudCA9PT0gaW5mby50aGVuKSB7XG5cdFx0Y2hpbGRfY3R4W2luZm8udmFsdWVdID0gcmVzb2x2ZWQ7XG5cdH1cblx0aWYgKGluZm8uY3VycmVudCA9PT0gaW5mby5jYXRjaCkge1xuXHRcdGNoaWxkX2N0eFtpbmZvLmVycm9yXSA9IHJlc29sdmVkO1xuXHR9XG5cdGluZm8uYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbn1cbiIsImltcG9ydCB7IHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0IH0gZnJvbSAnLi90cmFuc2l0aW9ucy5qcyc7XG5pbXBvcnQgeyBydW5fYWxsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8vIGdlbmVyYWwgZWFjaCBmdW5jdGlvbnM6XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVfYXJyYXlfbGlrZShhcnJheV9saWtlX29yX2l0ZXJhdG9yKSB7XG5cdHJldHVybiBhcnJheV9saWtlX29yX2l0ZXJhdG9yPy5sZW5ndGggIT09IHVuZGVmaW5lZFxuXHRcdD8gYXJyYXlfbGlrZV9vcl9pdGVyYXRvclxuXHRcdDogQXJyYXkuZnJvbShhcnJheV9saWtlX29yX2l0ZXJhdG9yKTtcbn1cblxuLy8ga2V5ZWQgZWFjaCBmdW5jdGlvbnM6XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcblx0YmxvY2suZCgxKTtcblx0bG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuXHR0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuXHRcdGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcblx0fSk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuXHRibG9jay5mKCk7XG5cdGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcblx0YmxvY2suZigpO1xuXHRvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cblxuLyoqIEByZXR1cm5zIHthbnlbXX0gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChcblx0b2xkX2Jsb2Nrcyxcblx0ZGlydHksXG5cdGdldF9rZXksXG5cdGR5bmFtaWMsXG5cdGN0eCxcblx0bGlzdCxcblx0bG9va3VwLFxuXHRub2RlLFxuXHRkZXN0cm95LFxuXHRjcmVhdGVfZWFjaF9ibG9jayxcblx0bmV4dCxcblx0Z2V0X2NvbnRleHRcbikge1xuXHRsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuXHRsZXQgbiA9IGxpc3QubGVuZ3RoO1xuXHRsZXQgaSA9IG87XG5cdGNvbnN0IG9sZF9pbmRleGVzID0ge307XG5cdHdoaWxlIChpLS0pIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG5cdGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcblx0Y29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcblx0Y29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuXHRjb25zdCB1cGRhdGVzID0gW107XG5cdGkgPSBuO1xuXHR3aGlsZSAoaS0tKSB7XG5cdFx0Y29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcblx0XHRjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG5cdFx0bGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuXHRcdGlmICghYmxvY2spIHtcblx0XHRcdGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2soa2V5LCBjaGlsZF9jdHgpO1xuXHRcdFx0YmxvY2suYygpO1xuXHRcdH0gZWxzZSBpZiAoZHluYW1pYykge1xuXHRcdFx0Ly8gZGVmZXIgdXBkYXRlcyB1bnRpbCBhbGwgdGhlIERPTSBzaHVmZmxpbmcgaXMgZG9uZVxuXHRcdFx0dXBkYXRlcy5wdXNoKCgpID0+IGJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSkpO1xuXHRcdH1cblx0XHRuZXdfbG9va3VwLnNldChrZXksIChuZXdfYmxvY2tzW2ldID0gYmxvY2spKTtcblx0XHRpZiAoa2V5IGluIG9sZF9pbmRleGVzKSBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcblx0fVxuXHRjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG5cdGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuXHRcdHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuXHRcdGJsb2NrLm0obm9kZSwgbmV4dCk7XG5cdFx0bG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcblx0XHRuZXh0ID0gYmxvY2suZmlyc3Q7XG5cdFx0bi0tO1xuXHR9XG5cdHdoaWxlIChvICYmIG4pIHtcblx0XHRjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcblx0XHRjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcblx0XHRjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcblx0XHRjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcblx0XHRpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcblx0XHRcdC8vIGRvIG5vdGhpbmdcblx0XHRcdG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG5cdFx0XHRvLS07XG5cdFx0XHRuLS07XG5cdFx0fSBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcblx0XHRcdC8vIHJlbW92ZSBvbGQgYmxvY2tcblx0XHRcdGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuXHRcdFx0by0tO1xuXHRcdH0gZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuXHRcdFx0aW5zZXJ0KG5ld19ibG9jayk7XG5cdFx0fSBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcblx0XHRcdG8tLTtcblx0XHR9IGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG5cdFx0XHRkaWRfbW92ZS5hZGQobmV3X2tleSk7XG5cdFx0XHRpbnNlcnQobmV3X2Jsb2NrKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcblx0XHRcdG8tLTtcblx0XHR9XG5cdH1cblx0d2hpbGUgKG8tLSkge1xuXHRcdGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG5cdFx0aWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSkgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG5cdH1cblx0d2hpbGUgKG4pIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG5cdHJ1bl9hbGwodXBkYXRlcyk7XG5cdHJldHVybiBuZXdfYmxvY2tzO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcblx0Y29uc3Qga2V5cyA9IG5ldyBNYXAoKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3Qga2V5ID0gZ2V0X2tleShnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpKTtcblx0XHRpZiAoa2V5cy5oYXMoa2V5KSkge1xuXHRcdFx0bGV0IHZhbHVlID0gJyc7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWx1ZSA9IGB3aXRoIHZhbHVlICcke1N0cmluZyhrZXkpfScgYDtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Ly8gY2FuJ3Qgc3RyaW5naWZ5XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2g6IEtleXMgYXQgaW5kZXggJHtrZXlzLmdldChcblx0XHRcdFx0XHRrZXlcblx0XHRcdFx0KX0gYW5kICR7aX0gJHt2YWx1ZX1hcmUgZHVwbGljYXRlc2Bcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGtleXMuc2V0KGtleSwgaSk7XG5cdH1cbn1cbiIsImNvbnN0IF9ib29sZWFuX2F0dHJpYnV0ZXMgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuXHQnYWxsb3dmdWxsc2NyZWVuJyxcblx0J2FsbG93cGF5bWVudHJlcXVlc3QnLFxuXHQnYXN5bmMnLFxuXHQnYXV0b2ZvY3VzJyxcblx0J2F1dG9wbGF5Jyxcblx0J2NoZWNrZWQnLFxuXHQnY29udHJvbHMnLFxuXHQnZGVmYXVsdCcsXG5cdCdkZWZlcicsXG5cdCdkaXNhYmxlZCcsXG5cdCdmb3Jtbm92YWxpZGF0ZScsXG5cdCdoaWRkZW4nLFxuXHQnaW5lcnQnLFxuXHQnaXNtYXAnLFxuXHQnbG9vcCcsXG5cdCdtdWx0aXBsZScsXG5cdCdtdXRlZCcsXG5cdCdub21vZHVsZScsXG5cdCdub3ZhbGlkYXRlJyxcblx0J29wZW4nLFxuXHQncGxheXNpbmxpbmUnLFxuXHQncmVhZG9ubHknLFxuXHQncmVxdWlyZWQnLFxuXHQncmV2ZXJzZWQnLFxuXHQnc2VsZWN0ZWQnXG5dKTtcblxuLyoqXG4gKiBMaXN0IG9mIEhUTUwgYm9vbGVhbiBhdHRyaWJ1dGVzIChlLmcuIGA8aW5wdXQgZGlzYWJsZWQ+YCkuXG4gKiBTb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuICpcbiAqIEB0eXBlIHtTZXQ8c3RyaW5nPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoWy4uLl9ib29sZWFuX2F0dHJpYnV0ZXNdKTtcblxuLyoqIEB0eXBlZGVmIHt0eXBlb2YgX2Jvb2xlYW5fYXR0cmlidXRlc1tudW1iZXJdfSBCb29sZWFuQXR0cmlidXRlcyAqL1xuIiwiaW1wb3J0IHsgc2V0X2N1cnJlbnRfY29tcG9uZW50LCBjdXJyZW50X2NvbXBvbmVudCB9IGZyb20gJy4vbGlmZWN5Y2xlLmpzJztcbmltcG9ydCB7IHJ1bl9hbGwsIGJsYW5rX29iamVjdCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgYm9vbGVhbl9hdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2Jvb2xlYW5fYXR0cmlidXRlcy5qcyc7XG5pbXBvcnQgeyBlbnN1cmVfYXJyYXlfbGlrZSB9IGZyb20gJy4vZWFjaC5qcyc7XG5leHBvcnQgeyBpc192b2lkIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzL25hbWVzLmpzJztcblxuZXhwb3J0IGNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID1cblx0L1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuXG4vKiogQHJldHVybnMge3N0cmluZ30gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcHJlYWQoYXJncywgYXR0cnNfdG9fYWRkKSB7XG5cdGNvbnN0IGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5hcmdzKTtcblx0aWYgKGF0dHJzX3RvX2FkZCkge1xuXHRcdGNvbnN0IGNsYXNzZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLmNsYXNzZXM7XG5cdFx0Y29uc3Qgc3R5bGVzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5zdHlsZXM7XG5cdFx0aWYgKGNsYXNzZXNfdG9fYWRkKSB7XG5cdFx0XHRpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG5cdFx0XHRcdGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChzdHlsZXNfdG9fYWRkKSB7XG5cdFx0XHRpZiAoYXR0cmlidXRlcy5zdHlsZSA9PSBudWxsKSB7XG5cdFx0XHRcdGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlc190b19hZGQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoXG5cdFx0XHRcdFx0bWVyZ2Vfc3NyX3N0eWxlcyhhdHRyaWJ1dGVzLnN0eWxlLCBzdHlsZXNfdG9fYWRkKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRsZXQgc3RyID0gJyc7XG5cdE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKG5hbWUpID0+IHtcblx0XHRpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSkgcmV0dXJuO1xuXHRcdGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IHRydWUpIHN0ciArPSAnICcgKyBuYW1lO1xuXHRcdGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdFx0aWYgKHZhbHVlKSBzdHIgKz0gJyAnICsgbmFtZTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdHN0ciArPSBgICR7bmFtZX09XCIke3ZhbHVlfVwiYDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gc3RyO1xufVxuXG4vKiogQHJldHVybnMge3t9fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlX3Nzcl9zdHlsZXMoc3R5bGVfYXR0cmlidXRlLCBzdHlsZV9kaXJlY3RpdmUpIHtcblx0Y29uc3Qgc3R5bGVfb2JqZWN0ID0ge307XG5cdGZvciAoY29uc3QgaW5kaXZpZHVhbF9zdHlsZSBvZiBzdHlsZV9hdHRyaWJ1dGUuc3BsaXQoJzsnKSkge1xuXHRcdGNvbnN0IGNvbG9uX2luZGV4ID0gaW5kaXZpZHVhbF9zdHlsZS5pbmRleE9mKCc6Jyk7XG5cdFx0Y29uc3QgbmFtZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoMCwgY29sb25faW5kZXgpLnRyaW0oKTtcblx0XHRjb25zdCB2YWx1ZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoY29sb25faW5kZXggKyAxKS50cmltKCk7XG5cdFx0aWYgKCFuYW1lKSBjb250aW51ZTtcblx0XHRzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxuXHRmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGVfZGlyZWN0aXZlKSB7XG5cdFx0Y29uc3QgdmFsdWUgPSBzdHlsZV9kaXJlY3RpdmVbbmFtZV07XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVsZXRlIHN0eWxlX29iamVjdFtuYW1lXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0eWxlX29iamVjdDtcbn1cblxuY29uc3QgQVRUUl9SRUdFWCA9IC9bJlwiXS9nO1xuY29uc3QgQ09OVEVOVF9SRUdFWCA9IC9bJjxdL2c7XG5cbi8qKlxuICogTm90ZTogdGhpcyBtZXRob2QgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIGFuZCBoYXMgYmVlbiBvcHRpbWl6ZWRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvcHVsbC81NzAxXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlKHZhbHVlLCBpc19hdHRyID0gZmFsc2UpIHtcblx0Y29uc3Qgc3RyID0gU3RyaW5nKHZhbHVlKTtcblx0Y29uc3QgcGF0dGVybiA9IGlzX2F0dHIgPyBBVFRSX1JFR0VYIDogQ09OVEVOVF9SRUdFWDtcblx0cGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXHRsZXQgZXNjYXBlZCA9ICcnO1xuXHRsZXQgbGFzdCA9IDA7XG5cdHdoaWxlIChwYXR0ZXJuLnRlc3Qoc3RyKSkge1xuXHRcdGNvbnN0IGkgPSBwYXR0ZXJuLmxhc3RJbmRleCAtIDE7XG5cdFx0Y29uc3QgY2ggPSBzdHJbaV07XG5cdFx0ZXNjYXBlZCArPSBzdHIuc3Vic3RyaW5nKGxhc3QsIGkpICsgKGNoID09PSAnJicgPyAnJmFtcDsnIDogY2ggPT09ICdcIicgPyAnJnF1b3Q7JyA6ICcmbHQ7Jyk7XG5cdFx0bGFzdCA9IGkgKyAxO1xuXHR9XG5cdHJldHVybiBlc2NhcGVkICsgc3RyLnN1YnN0cmluZyhsYXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUodmFsdWUpIHtcblx0Ly8ga2VlcCBib29sZWFucywgbnVsbCwgYW5kIHVuZGVmaW5lZCBmb3IgdGhlIHNha2Ugb2YgYHNwcmVhZGBcblx0Y29uc3Qgc2hvdWxkX2VzY2FwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpO1xuXHRyZXR1cm4gc2hvdWxkX2VzY2FwZSA/IGVzY2FwZSh2YWx1ZSwgdHJ1ZSkgOiB2YWx1ZTtcbn1cblxuLyoqIEByZXR1cm5zIHt7fX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVfb2JqZWN0KG9iaikge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblx0Zm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG5cdFx0cmVzdWx0W2tleV0gPSBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKG9ialtrZXldKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogQHJldHVybnMge3N0cmluZ30gKi9cbmV4cG9ydCBmdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuXHRpdGVtcyA9IGVuc3VyZV9hcnJheV9saWtlKGl0ZW1zKTtcblx0bGV0IHN0ciA9ICcnO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0c3RyICs9IGZuKGl0ZW1zW2ldLCBpKTtcblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG5cdCQkcmVuZGVyOiAoKSA9PiAnJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlX2NvbXBvbmVudChjb21wb25lbnQsIG5hbWUpIHtcblx0aWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuXHRcdGlmIChuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpIG5hbWUgKz0gJyB0aGlzPXsuLi59Jztcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRgPCR7bmFtZX0+IGlzIG5vdCBhIHZhbGlkIFNTUiBjb21wb25lbnQuIFlvdSBtYXkgbmVlZCB0byByZXZpZXcgeW91ciBidWlsZCBjb25maWcgdG8gZW5zdXJlIHRoYXQgZGVwZW5kZW5jaWVzIGFyZSBjb21waWxlZCwgcmF0aGVyIHRoYW4gaW1wb3J0ZWQgYXMgcHJlLWNvbXBpbGVkIG1vZHVsZXMuIE90aGVyd2lzZSB5b3UgbWF5IG5lZWQgdG8gZml4IGEgPCR7bmFtZX0+LmBcblx0XHQpO1xuXHR9XG5cdHJldHVybiBjb21wb25lbnQ7XG59XG5cbi8qKiBAcmV0dXJucyB7c3RyaW5nfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKGZpbGUsIGxpbmUsIGNvbHVtbiwgdmFsdWVzKSB7XG5cdGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblx0Y29uc29sZS5sb2codmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdHJldHVybiAnJztcbn1cblxubGV0IG9uX2Rlc3Ryb3k7XG5cbi8qKiBAcmV0dXJucyB7eyByZW5kZXI6IChwcm9wcz86IHt9LCB7ICQkc2xvdHMsIGNvbnRleHQgfT86IHsgJCRzbG90cz86IHt9OyBjb250ZXh0PzogTWFwPGFueSwgYW55PjsgfSkgPT4geyBodG1sOiBhbnk7IGNzczogeyBjb2RlOiBzdHJpbmc7IG1hcDogYW55OyB9OyBoZWFkOiBzdHJpbmc7IH07ICQkcmVuZGVyOiAocmVzdWx0OiBhbnksIHByb3BzOiBhbnksIGJpbmRpbmdzOiBhbnksIHNsb3RzOiBhbnksIGNvbnRleHQ6IGFueSkgPT4gYW55OyB9fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG5cdGZ1bmN0aW9uICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cywgY29udGV4dCkge1xuXHRcdGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcblx0XHRjb25zdCAkJCA9IHtcblx0XHRcdG9uX2Rlc3Ryb3ksXG5cdFx0XHRjb250ZXh0OiBuZXcgTWFwKGNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuXHRcdFx0Ly8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcblx0XHRcdG9uX21vdW50OiBbXSxcblx0XHRcdGJlZm9yZV91cGRhdGU6IFtdLFxuXHRcdFx0YWZ0ZXJfdXBkYXRlOiBbXSxcblx0XHRcdGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcblx0XHR9O1xuXHRcdHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuXHRcdGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuXHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcblx0XHRyZXR1cm4gaHRtbDtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdHJlbmRlcjogKHByb3BzID0ge30sIHsgJCRzbG90cyA9IHt9LCBjb250ZXh0ID0gbmV3IE1hcCgpIH0gPSB7fSkgPT4ge1xuXHRcdFx0b25fZGVzdHJveSA9IFtdO1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0geyB0aXRsZTogJycsIGhlYWQ6ICcnLCBjc3M6IG5ldyBTZXQoKSB9O1xuXHRcdFx0Y29uc3QgaHRtbCA9ICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIHt9LCAkJHNsb3RzLCBjb250ZXh0KTtcblx0XHRcdHJ1bl9hbGwob25fZGVzdHJveSk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRodG1sLFxuXHRcdFx0XHRjc3M6IHtcblx0XHRcdFx0XHRjb2RlOiBBcnJheS5mcm9tKHJlc3VsdC5jc3MpXG5cdFx0XHRcdFx0XHQubWFwKChjc3MpID0+IGNzcy5jb2RlKVxuXHRcdFx0XHRcdFx0LmpvaW4oJ1xcbicpLFxuXHRcdFx0XHRcdG1hcDogbnVsbCAvLyBUT0RPXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG5cdFx0XHR9O1xuXHRcdH0sXG5cdFx0JCRyZW5kZXJcblx0fTtcbn1cblxuLyoqIEByZXR1cm5zIHtzdHJpbmd9ICovXG5leHBvcnQgZnVuY3Rpb24gYWRkX2F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgYm9vbGVhbikge1xuXHRpZiAodmFsdWUgPT0gbnVsbCB8fCAoYm9vbGVhbiAmJiAhdmFsdWUpKSByZXR1cm4gJyc7XG5cdGNvbnN0IGFzc2lnbm1lbnQgPSBib29sZWFuICYmIHZhbHVlID09PSB0cnVlID8gJycgOiBgPVwiJHtlc2NhcGUodmFsdWUsIHRydWUpfVwiYDtcblx0cmV0dXJuIGAgJHtuYW1lfSR7YXNzaWdubWVudH1gO1xufVxuXG4vKiogQHJldHVybnMge3N0cmluZ30gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfY2xhc3NlcyhjbGFzc2VzKSB7XG5cdHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiAnJztcbn1cblxuLyoqIEByZXR1cm5zIHtzdHJpbmd9ICovXG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVfb2JqZWN0KVxuXHRcdC5maWx0ZXIoKGtleSkgPT4gc3R5bGVfb2JqZWN0W2tleV0pXG5cdFx0Lm1hcCgoa2V5KSA9PiBgJHtrZXl9OiAke2VzY2FwZV9hdHRyaWJ1dGVfdmFsdWUoc3R5bGVfb2JqZWN0W2tleV0pfTtgKVxuXHRcdC5qb2luKCcgJyk7XG59XG5cbi8qKiBAcmV0dXJucyB7c3RyaW5nfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9zdHlsZXMoc3R5bGVfb2JqZWN0KSB7XG5cdGNvbnN0IHN0eWxlcyA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KTtcblx0cmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cbiIsImltcG9ydCB7XG5cdGFkZF9yZW5kZXJfY2FsbGJhY2ssXG5cdGZsdXNoLFxuXHRmbHVzaF9yZW5kZXJfY2FsbGJhY2tzLFxuXHRzY2hlZHVsZV91cGRhdGUsXG5cdGRpcnR5X2NvbXBvbmVudHNcbn0gZnJvbSAnLi9zY2hlZHVsZXIuanMnO1xuaW1wb3J0IHsgY3VycmVudF9jb21wb25lbnQsIHNldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gJy4vbGlmZWN5Y2xlLmpzJztcbmltcG9ydCB7IGJsYW5rX29iamVjdCwgaXNfZW1wdHksIGlzX2Z1bmN0aW9uLCBydW4sIHJ1bl9hbGwsIG5vb3AgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7XG5cdGNoaWxkcmVuLFxuXHRkZXRhY2gsXG5cdHN0YXJ0X2h5ZHJhdGluZyxcblx0ZW5kX2h5ZHJhdGluZyxcblx0Z2V0X2N1c3RvbV9lbGVtZW50c19zbG90cyxcblx0aW5zZXJ0XG59IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IHRyYW5zaXRpb25faW4gfSBmcm9tICcuL3RyYW5zaXRpb25zLmpzJztcblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmQoY29tcG9uZW50LCBuYW1lLCBjYWxsYmFjaykge1xuXHRjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcblx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG5cdFx0Y2FsbGJhY2soY29tcG9uZW50LiQkLmN0eFtpbmRleF0pO1xuXHR9XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG5cdGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG5cdGJsb2NrICYmIGJsb2NrLmwocGFyZW50X25vZGVzKTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIHRhcmdldCwgYW5jaG9yKSB7XG5cdGNvbnN0IHsgZnJhZ21lbnQsIGFmdGVyX3VwZGF0ZSB9ID0gY29tcG9uZW50LiQkO1xuXHRmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcblx0Ly8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuXHRhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcblx0XHRjb25zdCBuZXdfb25fZGVzdHJveSA9IGNvbXBvbmVudC4kJC5vbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuXHRcdC8vIGlmIHRoZSBjb21wb25lbnQgd2FzIGRlc3Ryb3llZCBpbW1lZGlhdGVseVxuXHRcdC8vIGl0IHdpbGwgdXBkYXRlIHRoZSBgJCQub25fZGVzdHJveWAgcmVmZXJlbmNlIHRvIGBudWxsYC5cblx0XHQvLyB0aGUgZGVzdHJ1Y3R1cmVkIG9uX2Rlc3Ryb3kgbWF5IHN0aWxsIHJlZmVyZW5jZSB0byB0aGUgb2xkIGFycmF5XG5cdFx0aWYgKGNvbXBvbmVudC4kJC5vbl9kZXN0cm95KSB7XG5cdFx0XHRjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG5cdFx0XHQvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG5cdFx0XHRydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcblx0XHR9XG5cdFx0Y29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG5cdH0pO1xuXHRhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG5cdGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuXHRpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcblx0XHRmbHVzaF9yZW5kZXJfY2FsbGJhY2tzKCQkLmFmdGVyX3VwZGF0ZSk7XG5cdFx0cnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcblx0XHQkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG5cdFx0Ly8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuXHRcdC8vIHByZXNlcnZlIGZpbmFsIHN0YXRlPylcblx0XHQkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuXHRcdCQkLmN0eCA9IFtdO1xuXHR9XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKSB7XG5cdGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG5cdFx0ZGlydHlfY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG5cdFx0c2NoZWR1bGVfdXBkYXRlKCk7XG5cdFx0Y29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG5cdH1cblx0Y29tcG9uZW50LiQkLmRpcnR5WyhpIC8gMzEpIHwgMF0gfD0gMSA8PCBpICUgMzE7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KFxuXHRjb21wb25lbnQsXG5cdG9wdGlvbnMsXG5cdGluc3RhbmNlLFxuXHRjcmVhdGVfZnJhZ21lbnQsXG5cdG5vdF9lcXVhbCxcblx0cHJvcHMsXG5cdGFwcGVuZF9zdHlsZXMsXG5cdGRpcnR5ID0gWy0xXVxuKSB7XG5cdGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcblx0c2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5UJCR9ICovXG5cdGNvbnN0ICQkID0gKGNvbXBvbmVudC4kJCA9IHtcblx0XHRmcmFnbWVudDogbnVsbCxcblx0XHRjdHg6IFtdLFxuXHRcdC8vIHN0YXRlXG5cdFx0cHJvcHMsXG5cdFx0dXBkYXRlOiBub29wLFxuXHRcdG5vdF9lcXVhbCxcblx0XHRib3VuZDogYmxhbmtfb2JqZWN0KCksXG5cdFx0Ly8gbGlmZWN5Y2xlXG5cdFx0b25fbW91bnQ6IFtdLFxuXHRcdG9uX2Rlc3Ryb3k6IFtdLFxuXHRcdG9uX2Rpc2Nvbm5lY3Q6IFtdLFxuXHRcdGJlZm9yZV91cGRhdGU6IFtdLFxuXHRcdGFmdGVyX3VwZGF0ZTogW10sXG5cdFx0Y29udGV4dDogbmV3IE1hcChvcHRpb25zLmNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuXHRcdC8vIGV2ZXJ5dGhpbmcgZWxzZVxuXHRcdGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG5cdFx0ZGlydHksXG5cdFx0c2tpcF9ib3VuZDogZmFsc2UsXG5cdFx0cm9vdDogb3B0aW9ucy50YXJnZXQgfHwgcGFyZW50X2NvbXBvbmVudC4kJC5yb290XG5cdH0pO1xuXHRhcHBlbmRfc3R5bGVzICYmIGFwcGVuZF9zdHlsZXMoJCQucm9vdCk7XG5cdGxldCByZWFkeSA9IGZhbHNlO1xuXHQkJC5jdHggPSBpbnN0YW5jZVxuXHRcdD8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gcmVzdC5sZW5ndGggPyByZXN0WzBdIDogcmV0O1xuXHRcdFx0XHRpZiAoJCQuY3R4ICYmIG5vdF9lcXVhbCgkJC5jdHhbaV0sICgkJC5jdHhbaV0gPSB2YWx1ZSkpKSB7XG5cdFx0XHRcdFx0aWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKSAkJC5ib3VuZFtpXSh2YWx1ZSk7XG5cdFx0XHRcdFx0aWYgKHJlYWR5KSBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHQgIH0pXG5cdFx0OiBbXTtcblx0JCQudXBkYXRlKCk7XG5cdHJlYWR5ID0gdHJ1ZTtcblx0cnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcblx0Ly8gYGZhbHNlYCBhcyBhIHNwZWNpYWwgY2FzZSBvZiBubyBET00gY29tcG9uZW50XG5cdCQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcblx0aWYgKG9wdGlvbnMudGFyZ2V0KSB7XG5cdFx0aWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuXHRcdFx0c3RhcnRfaHlkcmF0aW5nKCk7XG5cdFx0XHRjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG5cdFx0XHQkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcblx0XHRcdG5vZGVzLmZvckVhY2goZGV0YWNoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cblx0XHRcdCQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmMoKTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnMuaW50cm8pIHRyYW5zaXRpb25faW4oY29tcG9uZW50LiQkLmZyYWdtZW50KTtcblx0XHRtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IpO1xuXHRcdGVuZF9oeWRyYXRpbmcoKTtcblx0XHRmbHVzaCgpO1xuXHR9XG5cdHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbn1cblxuZXhwb3J0IGxldCBTdmVsdGVFbGVtZW50O1xuXG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG5cdFN2ZWx0ZUVsZW1lbnQgPSBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcblx0XHQkJGNvbXBvbmVudEN0b3I7XG5cdFx0JCRzbG90cztcblx0XHQkJGNvbXBvbmVudDtcblx0XHQkJGNvbm5lY3RlZCA9IGZhbHNlO1xuXHRcdCQkZGF0YSA9IHt9O1xuXHRcdCQkcmVmbGVjdGluZyA9IGZhbHNlO1xuXHRcdC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgQ3VzdG9tRWxlbWVudFByb3BEZWZpbml0aW9uPn0gKi9cblx0XHQkJHByb3BzX2RlZmluaXRpb24gPSB7fTtcblx0XHQvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIEZ1bmN0aW9uW10+fSAqL1xuXHRcdCQkbGlzdGVuZXJzID0ge307XG5cdFx0LyoqIEB0eXBlIHtNYXA8RnVuY3Rpb24sIEZ1bmN0aW9uPn0gKi9cblx0XHQkJGxpc3RlbmVyX3Vuc3Vic2NyaWJlX2ZucyA9IG5ldyBNYXAoKTtcblxuXHRcdGNvbnN0cnVjdG9yKCQkY29tcG9uZW50Q3RvciwgJCRzbG90cywgdXNlX3NoYWRvd19kb20pIHtcblx0XHRcdHN1cGVyKCk7XG5cdFx0XHR0aGlzLiQkY29tcG9uZW50Q3RvciA9ICQkY29tcG9uZW50Q3Rvcjtcblx0XHRcdHRoaXMuJCRzbG90cyA9ICQkc2xvdHM7XG5cdFx0XHRpZiAodXNlX3NoYWRvd19kb20pIHtcblx0XHRcdFx0dGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuXHRcdFx0Ly8gV2UgY2FuJ3QgZGV0ZXJtaW5lIHVwZnJvbnQgaWYgdGhlIGV2ZW50IGlzIGEgY3VzdG9tIGV2ZW50IG9yIG5vdCwgc28gd2UgaGF2ZSB0b1xuXHRcdFx0Ly8gbGlzdGVuIHRvIGJvdGguIElmIHNvbWVvbmUgdXNlcyBhIGN1c3RvbSBldmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYSByZWd1bGFyXG5cdFx0XHQvLyBicm93c2VyIGV2ZW50LCB0aGlzIGZpcmVzIHR3aWNlIC0gd2UgY2FuJ3QgYXZvaWQgdGhhdC5cblx0XHRcdHRoaXMuJCRsaXN0ZW5lcnNbdHlwZV0gPSB0aGlzLiQkbGlzdGVuZXJzW3R5cGVdIHx8IFtdO1xuXHRcdFx0dGhpcy4kJGxpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcblx0XHRcdGlmICh0aGlzLiQkY29tcG9uZW50KSB7XG5cdFx0XHRcdGNvbnN0IHVuc3ViID0gdGhpcy4kJGNvbXBvbmVudC4kb24odHlwZSwgbGlzdGVuZXIpO1xuXHRcdFx0XHR0aGlzLiQkbGlzdGVuZXJfdW5zdWJzY3JpYmVfZm5zLnNldChsaXN0ZW5lciwgdW5zdWIpO1xuXHRcdFx0fVxuXHRcdFx0c3VwZXIuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuXHRcdFx0c3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG5cdFx0XHRpZiAodGhpcy4kJGNvbXBvbmVudCkge1xuXHRcdFx0XHRjb25zdCB1bnN1YiA9IHRoaXMuJCRsaXN0ZW5lcl91bnN1YnNjcmliZV9mbnMuZ2V0KGxpc3RlbmVyKTtcblx0XHRcdFx0aWYgKHVuc3ViKSB7XG5cdFx0XHRcdFx0dW5zdWIoKTtcblx0XHRcdFx0XHR0aGlzLiQkbGlzdGVuZXJfdW5zdWJzY3JpYmVfZm5zLmRlbGV0ZShsaXN0ZW5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcblx0XHRcdHRoaXMuJCRjb25uZWN0ZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCF0aGlzLiQkY29tcG9uZW50KSB7XG5cdFx0XHRcdC8vIFdlIHdhaXQgb25lIHRpY2sgdG8gbGV0IHBvc3NpYmxlIGNoaWxkIHNsb3QgZWxlbWVudHMgYmUgY3JlYXRlZC9tb3VudGVkXG5cdFx0XHRcdGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdFx0XHRpZiAoIXRoaXMuJCRjb25uZWN0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnVuY3Rpb24gY3JlYXRlX3Nsb3QobmFtZSkge1xuXHRcdFx0XHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgbm9kZTtcblx0XHRcdFx0XHRcdGNvbnN0IG9iaiA9IHtcblx0XHRcdFx0XHRcdFx0YzogZnVuY3Rpb24gY3JlYXRlKCkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzbG90Jyk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG5hbWUgIT09ICdkZWZhdWx0Jykge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBuYW1lKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdFx0XHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcblx0XHRcdFx0XHRcdFx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW2FuY2hvcl1cblx0XHRcdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0XHRcdG06IGZ1bmN0aW9uIG1vdW50KHRhcmdldCwgYW5jaG9yKSB7XG5cdFx0XHRcdFx0XHRcdFx0aW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0ZDogZnVuY3Rpb24gZGVzdHJveShkZXRhY2hpbmcpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGV0YWNoaW5nKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRkZXRhY2gobm9kZSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0ICQkc2xvdHMgPSB7fTtcblx0XHRcdFx0Y29uc3QgZXhpc3Rpbmdfc2xvdHMgPSBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzKHRoaXMpO1xuXHRcdFx0XHRmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy4kJHNsb3RzKSB7XG5cdFx0XHRcdFx0aWYgKG5hbWUgaW4gZXhpc3Rpbmdfc2xvdHMpIHtcblx0XHRcdFx0XHRcdCQkc2xvdHNbbmFtZV0gPSBbY3JlYXRlX3Nsb3QobmFtZSldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0XHQvLyB0aGlzLiQkZGF0YSB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhpcy5hdHRyaWJ1dGVzXG5cdFx0XHRcdFx0Y29uc3QgbmFtZSA9IHRoaXMuJCRnZXRfcHJvcF9uYW1lKGF0dHJpYnV0ZS5uYW1lKTtcblx0XHRcdFx0XHRpZiAoIShuYW1lIGluIHRoaXMuJCRkYXRhKSkge1xuXHRcdFx0XHRcdFx0dGhpcy4kJGRhdGFbbmFtZV0gPSBnZXRfY3VzdG9tX2VsZW1lbnRfdmFsdWUoXG5cdFx0XHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0XHRcdGF0dHJpYnV0ZS52YWx1ZSxcblx0XHRcdFx0XHRcdFx0dGhpcy4kJHByb3BzX2RlZmluaXRpb24sXG5cdFx0XHRcdFx0XHRcdCd0b1Byb3AnXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLiQkY29tcG9uZW50ID0gbmV3IHRoaXMuJCRjb21wb25lbnRDdG9yKHtcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXMuc2hhZG93Um9vdCB8fCB0aGlzLFxuXHRcdFx0XHRcdHByb3BzOiB7XG5cdFx0XHRcdFx0XHQuLi50aGlzLiQkZGF0YSxcblx0XHRcdFx0XHRcdCQkc2xvdHMsXG5cdFx0XHRcdFx0XHQkJHNjb3BlOiB7XG5cdFx0XHRcdFx0XHRcdGN0eDogW11cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmb3IgKGNvbnN0IHR5cGUgaW4gdGhpcy4kJGxpc3RlbmVycykge1xuXHRcdFx0XHRcdGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy4kJGxpc3RlbmVyc1t0eXBlXSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgdW5zdWIgPSB0aGlzLiQkY29tcG9uZW50LiRvbih0eXBlLCBsaXN0ZW5lcik7XG5cdFx0XHRcdFx0XHR0aGlzLiQkbGlzdGVuZXJfdW5zdWJzY3JpYmVfZm5zLnNldChsaXN0ZW5lciwgdW5zdWIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLiQkbGlzdGVuZXJzID0ge307XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gV2UgZG9uJ3QgbmVlZCB0aGlzIHdoZW4gd29ya2luZyB3aXRoaW4gU3ZlbHRlIGNvZGUsIGJ1dCBmb3IgY29tcGF0aWJpbGl0eSBvZiBwZW9wbGUgdXNpbmcgdGhpcyBvdXRzaWRlIG9mIFN2ZWx0ZVxuXHRcdC8vIGFuZCBzZXR0aW5nIGF0dHJpYnV0ZXMgdGhyb3VnaCBzZXRBdHRyaWJ1dGUgZXRjLCB0aGlzIGlzIGhlbHBmdWxcblx0XHRhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuXHRcdFx0aWYgKHRoaXMuJCRyZWZsZWN0aW5nKSByZXR1cm47XG5cdFx0XHRhdHRyID0gdGhpcy4kJGdldF9wcm9wX25hbWUoYXR0cik7XG5cdFx0XHR0aGlzLiQkZGF0YVthdHRyXSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShcblx0XHRcdFx0YXR0cixcblx0XHRcdFx0bmV3VmFsdWUsXG5cdFx0XHRcdHRoaXMuJCRwcm9wc19kZWZpbml0aW9uLFxuXHRcdFx0XHQndG9Qcm9wJ1xuXHRcdFx0KTtcblx0XHRcdHRoaXMuJCRjb21wb25lbnQ/LiRzZXQoeyBbYXR0cl06IHRoaXMuJCRkYXRhW2F0dHJdIH0pO1xuXHRcdH1cblxuXHRcdGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuXHRcdFx0dGhpcy4kJGNvbm5lY3RlZCA9IGZhbHNlO1xuXHRcdFx0Ly8gSW4gYSBtaWNyb3Rhc2ssIGJlY2F1c2UgdGhpcyBjb3VsZCBiZSBhIG1vdmUgd2l0aGluIHRoZSBET01cblx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRpZiAoIXRoaXMuJCRjb25uZWN0ZWQpIHtcblx0XHRcdFx0XHR0aGlzLiQkY29tcG9uZW50LiRkZXN0cm95KCk7XG5cdFx0XHRcdFx0dGhpcy4kJGNvbXBvbmVudCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0JCRnZXRfcHJvcF9uYW1lKGF0dHJpYnV0ZV9uYW1lKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRPYmplY3Qua2V5cyh0aGlzLiQkcHJvcHNfZGVmaW5pdGlvbikuZmluZChcblx0XHRcdFx0XHQoa2V5KSA9PlxuXHRcdFx0XHRcdFx0dGhpcy4kJHByb3BzX2RlZmluaXRpb25ba2V5XS5hdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZV9uYW1lIHx8XG5cdFx0XHRcdFx0XHQoIXRoaXMuJCRwcm9wc19kZWZpbml0aW9uW2tleV0uYXR0cmlidXRlICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSBhdHRyaWJ1dGVfbmFtZSlcblx0XHRcdFx0KSB8fCBhdHRyaWJ1dGVfbmFtZVxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBDdXN0b21FbGVtZW50UHJvcERlZmluaXRpb24+fSBwcm9wc19kZWZpbml0aW9uXG4gKiBAcGFyYW0geyd0b0F0dHJpYnV0ZScgfCAndG9Qcm9wJ30gW3RyYW5zZm9ybV1cbiAqL1xuZnVuY3Rpb24gZ2V0X2N1c3RvbV9lbGVtZW50X3ZhbHVlKHByb3AsIHZhbHVlLCBwcm9wc19kZWZpbml0aW9uLCB0cmFuc2Zvcm0pIHtcblx0Y29uc3QgdHlwZSA9IHByb3BzX2RlZmluaXRpb25bcHJvcF0/LnR5cGU7XG5cdHZhbHVlID0gdHlwZSA9PT0gJ0Jvb2xlYW4nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nID8gdmFsdWUgIT0gbnVsbCA6IHZhbHVlO1xuXHRpZiAoIXRyYW5zZm9ybSB8fCAhcHJvcHNfZGVmaW5pdGlvbltwcm9wXSkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fSBlbHNlIGlmICh0cmFuc2Zvcm0gPT09ICd0b0F0dHJpYnV0ZScpIHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ09iamVjdCc6XG5cdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdGNhc2UgJ0Jvb2xlYW4nOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPyAnJyA6IG51bGw7XG5cdFx0XHRjYXNlICdOdW1iZXInOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlICdPYmplY3QnOlxuXHRcdFx0Y2FzZSAnQXJyYXknOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgJiYgSlNPTi5wYXJzZSh2YWx1ZSk7XG5cdFx0XHRjYXNlICdCb29sZWFuJzpcblx0XHRcdFx0cmV0dXJuIHZhbHVlOyAvLyBjb252ZXJzaW9uIGFscmVhZHkgaGFuZGxlZCBhYm92ZVxuXHRcdFx0Y2FzZSAnTnVtYmVyJzpcblx0XHRcdFx0cmV0dXJuIHZhbHVlICE9IG51bGwgPyArdmFsdWUgOiB2YWx1ZTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBUdXJuIGEgU3ZlbHRlIGNvbXBvbmVudCBpbnRvIGEgY3VzdG9tIGVsZW1lbnQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5Db21wb25lbnRUeXBlfSBDb21wb25lbnQgIEEgU3ZlbHRlIGNvbXBvbmVudCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBDdXN0b21FbGVtZW50UHJvcERlZmluaXRpb24+fSBwcm9wc19kZWZpbml0aW9uICBUaGUgcHJvcHMgdG8gb2JzZXJ2ZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gc2xvdHMgIFRoZSBzbG90cyB0byBjcmVhdGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFjY2Vzc29ycyAgT3RoZXIgYWNjZXNzb3JzIGJlc2lkZXMgdGhlIG9uZXMgZm9yIHByb3BzIHRoZSBjb21wb25lbnQgaGFzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZV9zaGFkb3dfZG9tICBXaGV0aGVyIHRvIHVzZSBzaGFkb3cgRE9NXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfY3VzdG9tX2VsZW1lbnQoXG5cdENvbXBvbmVudCxcblx0cHJvcHNfZGVmaW5pdGlvbixcblx0c2xvdHMsXG5cdGFjY2Vzc29ycyxcblx0dXNlX3NoYWRvd19kb21cbikge1xuXHRjb25zdCBDbGFzcyA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlRWxlbWVudCB7XG5cdFx0Y29uc3RydWN0b3IoKSB7XG5cdFx0XHRzdXBlcihDb21wb25lbnQsIHNsb3RzLCB1c2Vfc2hhZG93X2RvbSk7XG5cdFx0XHR0aGlzLiQkcHJvcHNfZGVmaW5pdGlvbiA9IHByb3BzX2RlZmluaXRpb247XG5cdFx0fVxuXHRcdHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5rZXlzKHByb3BzX2RlZmluaXRpb24pLm1hcCgoa2V5KSA9PlxuXHRcdFx0XHQocHJvcHNfZGVmaW5pdGlvbltrZXldLmF0dHJpYnV0ZSB8fCBrZXkpLnRvTG93ZXJDYXNlKClcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xuXHRPYmplY3Qua2V5cyhwcm9wc19kZWZpbml0aW9uKS5mb3JFYWNoKChwcm9wKSA9PiB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KENsYXNzLnByb3RvdHlwZSwgcHJvcCwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy4kJGNvbXBvbmVudCAmJiBwcm9wIGluIHRoaXMuJCRjb21wb25lbnRcblx0XHRcdFx0XHQ/IHRoaXMuJCRjb21wb25lbnRbcHJvcF1cblx0XHRcdFx0XHQ6IHRoaXMuJCRkYXRhW3Byb3BdO1xuXHRcdFx0fSxcblx0XHRcdHNldCh2YWx1ZSkge1xuXHRcdFx0XHR2YWx1ZSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShwcm9wLCB2YWx1ZSwgcHJvcHNfZGVmaW5pdGlvbik7XG5cdFx0XHRcdHRoaXMuJCRkYXRhW3Byb3BdID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMuJCRjb21wb25lbnQ/LiRzZXQoeyBbcHJvcF06IHZhbHVlIH0pO1xuXHRcdFx0XHRpZiAocHJvcHNfZGVmaW5pdGlvbltwcm9wXS5yZWZsZWN0KSB7XG5cdFx0XHRcdFx0dGhpcy4kJHJlZmxlY3RpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZV92YWx1ZSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShcblx0XHRcdFx0XHRcdHByb3AsXG5cdFx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHRcdHByb3BzX2RlZmluaXRpb24sXG5cdFx0XHRcdFx0XHQndG9BdHRyaWJ1dGUnXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpZiAoYXR0cmlidXRlX3ZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZShwcm9wc19kZWZpbml0aW9uW3Byb3BdLmF0dHJpYnV0ZSB8fCBwcm9wLCBhdHRyaWJ1dGVfdmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLiQkcmVmbGVjdGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHRhY2Nlc3NvcnMuZm9yRWFjaCgoYWNjZXNzb3IpID0+IHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xhc3MucHJvdG90eXBlLCBhY2Nlc3Nvciwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy4kJGNvbXBvbmVudD8uW2FjY2Vzc29yXTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdENvbXBvbmVudC5lbGVtZW50ID0gLyoqIEB0eXBlIHthbnl9ICovIChDbGFzcyk7XG5cdHJldHVybiBDbGFzcztcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtQcm9wcz1hbnldXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtFdmVudHM9YW55XVxuICovXG5leHBvcnQgY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcblx0LyoqXG5cdCAqICMjIyBQUklWQVRFIEFQSVxuXHQgKlxuXHQgKiBEbyBub3QgdXNlLCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lXG5cdCAqXG5cdCAqIEB0eXBlIHthbnl9XG5cdCAqL1xuXHQkJCA9IHVuZGVmaW5lZDtcblx0LyoqXG5cdCAqICMjIyBQUklWQVRFIEFQSVxuXHQgKlxuXHQgKiBEbyBub3QgdXNlLCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lXG5cdCAqXG5cdCAqIEB0eXBlIHthbnl9XG5cdCAqL1xuXHQkJHNldCA9IHVuZGVmaW5lZDtcblxuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdCRkZXN0cm95KCkge1xuXHRcdGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuXHRcdHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuXHR9XG5cblx0LyoqXG5cdCAqIEB0ZW1wbGF0ZSB7RXh0cmFjdDxrZXlvZiBFdmVudHMsIHN0cmluZz59IEtcblx0ICogQHBhcmFtIHtLfSB0eXBlXG5cdCAqIEBwYXJhbSB7KChlOiBFdmVudHNbS10pID0+IHZvaWQpIHwgbnVsbCB8IHVuZGVmaW5lZH0gY2FsbGJhY2tcblx0ICogQHJldHVybnMgeygpID0+IHZvaWR9XG5cdCAqL1xuXHQkb24odHlwZSwgY2FsbGJhY2spIHtcblx0XHRpZiAoIWlzX2Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuXHRcdFx0cmV0dXJuIG5vb3A7XG5cdFx0fVxuXHRcdGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKTtcblx0XHRjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGluZGV4ICE9PSAtMSkgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge1BhcnRpYWw8UHJvcHM+fSBwcm9wc1xuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdCRzZXQocHJvcHMpIHtcblx0XHRpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkocHJvcHMpKSB7XG5cdFx0XHR0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuXHRcdFx0dGhpcy4kJHNldChwcm9wcyk7XG5cdFx0XHR0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDdXN0b21FbGVtZW50UHJvcERlZmluaXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYXR0cmlidXRlXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbcmVmbGVjdF1cbiAqIEBwcm9wZXJ0eSB7J1N0cmluZyd8J0Jvb2xlYW4nfCdOdW1iZXInfCdBcnJheSd8J09iamVjdCd9IFt0eXBlXVxuICovXG4iLCIvLyBnZW5lcmF0ZWQgZHVyaW5nIHJlbGVhc2UsIGRvIG5vdCBtb2RpZnlcblxuLyoqXG4gKiBUaGUgY3VycmVudCB2ZXJzaW9uLCBhcyBzZXQgaW4gcGFja2FnZS5qc29uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1jb21waWxlciNzdmVsdGUtdmVyc2lvblxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4wLjAnO1xuZXhwb3J0IGNvbnN0IFBVQkxJQ19WRVJTSU9OID0gJzQnO1xuIiwiaW1wb3J0IHtcblx0Y3VzdG9tX2V2ZW50LFxuXHRhcHBlbmQsXG5cdGFwcGVuZF9oeWRyYXRpb24sXG5cdGluc2VydCxcblx0aW5zZXJ0X2h5ZHJhdGlvbixcblx0ZGV0YWNoLFxuXHRsaXN0ZW4sXG5cdGF0dHJcbn0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50IH0gZnJvbSAnLi9Db21wb25lbnQuanMnO1xuaW1wb3J0IHsgaXNfdm9pZCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy9uYW1lcy5qcyc7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3ZlcnNpb24uanMnO1xuaW1wb3J0IHsgY29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGVuc3VyZV9hcnJheV9saWtlIH0gZnJvbSAnLi9lYWNoLmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7VH0gW2RldGFpbF1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuXHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCB7IHZlcnNpb246IFZFUlNJT04sIC4uLmRldGFpbCB9LCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcblx0ZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcblx0YXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUpIHtcblx0ZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcblx0YXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gW2FuY2hvcl1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG5cdGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5cbi8qKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge05vZGV9IFthbmNob3JdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcblx0aW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcblx0ZGV0YWNoKG5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYmVmb3JlXG4gKiBAcGFyYW0ge05vZGV9IGFmdGVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaF9iZXR3ZWVuX2RldihiZWZvcmUsIGFmdGVyKSB7XG5cdHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuXHRcdGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYWZ0ZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcblx0d2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuXHRcdGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYmVmb3JlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaF9hZnRlcl9kZXYoYmVmb3JlKSB7XG5cdHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcblx0XHRkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0fSBoYW5kbGVyXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyB8IEV2ZW50TGlzdGVuZXJPcHRpb25zfSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc19wcmV2ZW50X2RlZmF1bHRdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtoYXNfc3RvcF9wcm9wYWdhdGlvbl1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc19zdG9wX2ltbWVkaWF0ZV9wcm9wYWdhdGlvbl1cbiAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuX2Rldihcblx0bm9kZSxcblx0ZXZlbnQsXG5cdGhhbmRsZXIsXG5cdG9wdGlvbnMsXG5cdGhhc19wcmV2ZW50X2RlZmF1bHQsXG5cdGhhc19zdG9wX3Byb3BhZ2F0aW9uLFxuXHRoYXNfc3RvcF9pbW1lZGlhdGVfcHJvcGFnYXRpb25cbikge1xuXHRjb25zdCBtb2RpZmllcnMgPVxuXHRcdG9wdGlvbnMgPT09IHRydWUgPyBbJ2NhcHR1cmUnXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuXHRpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdCkgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG5cdGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbikgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuXHRpZiAoaGFzX3N0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uKSBtb2RpZmllcnMucHVzaCgnc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uJyk7XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcblx0Y29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0ZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuXHRcdGRpc3Bvc2UoKTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblx0YXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcblx0aWYgKHZhbHVlID09IG51bGwpIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG5cdGVsc2UgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7YW55fSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuXHRub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldFByb3BlcnR5JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge2FueX0gW3ZhbHVlXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRhc2V0X2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcblx0bm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGFzZXQnLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuXHRkYXRhID0gJycgKyBkYXRhO1xuXHRpZiAodGV4dC5kYXRhID09PSBkYXRhKSByZXR1cm47XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9jb250ZW50ZWRpdGFibGVfZGV2KHRleHQsIGRhdGEpIHtcblx0ZGF0YSA9ICcnICsgZGF0YTtcblx0aWYgKHRleHQud2hvbGVUZXh0ID09PSBkYXRhKSByZXR1cm47XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJfdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2RhdGFfbWF5YmVfY29udGVudGVkaXRhYmxlX2Rldih0ZXh0LCBkYXRhLCBhdHRyX3ZhbHVlKSB7XG5cdGlmICh+Y29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMuaW5kZXhPZihhdHRyX3ZhbHVlKSkge1xuXHRcdHNldF9kYXRhX2NvbnRlbnRlZGl0YWJsZV9kZXYodGV4dCwgZGF0YSk7XG5cdH0gZWxzZSB7XG5cdFx0c2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVfYXJyYXlfbGlrZV9kZXYoYXJnKSB7XG5cdGlmIChcblx0XHR0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJlxuXHRcdCEoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIGFyZykgJiZcblx0XHQhKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgYXJnICYmIFN5bWJvbC5pdGVyYXRvciBpbiBhcmcpXG5cdCkge1xuXHRcdHRocm93IG5ldyBFcnJvcigneyNlYWNofSBvbmx5IHdvcmtzIHdpdGggaXRlcmFibGUgdmFsdWVzLicpO1xuXHR9XG5cdHJldHVybiBlbnN1cmVfYXJyYXlfbGlrZShhcmcpO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcblx0Zm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuXHRcdGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcblx0XHRcdGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSB0YWdcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfZHluYW1pY19lbGVtZW50KHRhZykge1xuXHRjb25zdCBpc19zdHJpbmcgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJztcblx0aWYgKHRhZyAmJiAhaXNfc3RyaW5nKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCc8c3ZlbHRlOmVsZW1lbnQ+IGV4cGVjdHMgXCJ0aGlzXCIgYXR0cmlidXRlIHRvIGJlIGEgc3RyaW5nLicpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmRlZmluZWQgfCBzdHJpbmd9IHRhZ1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV92b2lkX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcblx0aWYgKHRhZyAmJiBpc192b2lkKHRhZykpIHtcblx0XHRjb25zb2xlLndhcm4oYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJHt0YWd9XCI+IGlzIHNlbGYtY2xvc2luZyBhbmQgY2Fubm90IGhhdmUgY29udGVudC5gKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnRfZGV2KGNvbXBvbmVudCwgcHJvcHMpIHtcblx0Y29uc3QgZXJyb3JfbWVzc2FnZSA9ICd0aGlzPXsuLi59IG9mIDxzdmVsdGU6Y29tcG9uZW50PiBzaG91bGQgc3BlY2lmeSBhIFN2ZWx0ZSBjb21wb25lbnQuJztcblx0dHJ5IHtcblx0XHRjb25zdCBpbnN0YW5jZSA9IG5ldyBjb21wb25lbnQocHJvcHMpO1xuXHRcdGlmICghaW5zdGFuY2UuJCQgfHwgIWluc3RhbmNlLiRzZXQgfHwgIWluc3RhbmNlLiRvbiB8fCAhaW5zdGFuY2UuJGRlc3Ryb3kpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnJvcl9tZXNzYWdlKTtcblx0XHR9XG5cdFx0cmV0dXJuIGluc3RhbmNlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zdCB7IG1lc3NhZ2UgfSA9IGVycjtcblx0XHRpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIG1lc3NhZ2UuaW5kZXhPZignaXMgbm90IGEgY29uc3RydWN0b3InKSAhPT0gLTEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnJvcl9tZXNzYWdlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgZXJyO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzIHdpdGggc29tZSBtaW5vciBkZXYtZW5oYW5jZW1lbnRzLiBVc2VkIHdoZW4gZGV2PXRydWUuXG4gKlxuICogQ2FuIGJlIHVzZWQgdG8gY3JlYXRlIHN0cm9uZ2x5IHR5cGVkIFN2ZWx0ZSBjb21wb25lbnRzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiBZb3UgaGF2ZSBjb21wb25lbnQgbGlicmFyeSBvbiBucG0gY2FsbGVkIGBjb21wb25lbnQtbGlicmFyeWAsIGZyb20gd2hpY2hcbiAqIHlvdSBleHBvcnQgYSBjb21wb25lbnQgY2FsbGVkIGBNeUNvbXBvbmVudGAuIEZvciBTdmVsdGUrVHlwZVNjcmlwdCB1c2VycyxcbiAqIHlvdSB3YW50IHRvIHByb3ZpZGUgdHlwaW5ncy4gVGhlcmVmb3JlIHlvdSBjcmVhdGUgYSBgaW5kZXguZC50c2A6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50PHtmb286IHN0cmluZ30+IHt9XG4gKiBgYGBcbiAqIFR5cGluZyB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBJREVzIGxpa2UgVlMgQ29kZSB3aXRoIHRoZSBTdmVsdGUgZXh0ZW5zaW9uXG4gKiB0byBwcm92aWRlIGludGVsbGlzZW5zZSBhbmQgdG8gdXNlIHRoZSBjb21wb25lbnQgbGlrZSB0aGlzIGluIGEgU3ZlbHRlIGZpbGVcbiAqIHdpdGggVHlwZVNjcmlwdDpcbiAqIGBgYHN2ZWx0ZVxuICogPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAqIFx0aW1wb3J0IHsgTXlDb21wb25lbnQgfSBmcm9tIFwiY29tcG9uZW50LWxpYnJhcnlcIjtcbiAqIDwvc2NyaXB0PlxuICogPE15Q29tcG9uZW50IGZvbz17J2Jhcid9IC8+XG4gKiBgYGBcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW1Byb3BzPWFueV1cbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW0V2ZW50cz1hbnldXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtTbG90cz1hbnldXG4gKiBAZXh0ZW5kcyB7U3ZlbHRlQ29tcG9uZW50PFByb3BzLCBFdmVudHM+fVxuICovXG5leHBvcnQgY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcblx0LyoqXG5cdCAqIEZvciB0eXBlIGNoZWNraW5nIGNhcGFiaWxpdGllcyBvbmx5LlxuXHQgKiBEb2VzIG5vdCBleGlzdCBhdCBydW50aW1lLlxuXHQgKiAjIyMgRE8gTk9UIFVTRSFcblx0ICpcblx0ICogQHR5cGUge1Byb3BzfVxuXHQgKi9cblx0JCRwcm9wX2RlZjtcblx0LyoqXG5cdCAqIEZvciB0eXBlIGNoZWNraW5nIGNhcGFiaWxpdGllcyBvbmx5LlxuXHQgKiBEb2VzIG5vdCBleGlzdCBhdCBydW50aW1lLlxuXHQgKiAjIyMgRE8gTk9UIFVTRSFcblx0ICpcblx0ICogQHR5cGUge0V2ZW50c31cblx0ICovXG5cdCQkZXZlbnRzX2RlZjtcblx0LyoqXG5cdCAqIEZvciB0eXBlIGNoZWNraW5nIGNhcGFiaWxpdGllcyBvbmx5LlxuXHQgKiBEb2VzIG5vdCBleGlzdCBhdCBydW50aW1lLlxuXHQgKiAjIyMgRE8gTk9UIFVTRSFcblx0ICpcblx0ICogQHR5cGUge1Nsb3RzfVxuXHQgKi9cblx0JCRzbG90X2RlZjtcblxuXHQvKiogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljLmpzJykuQ29tcG9uZW50Q29uc3RydWN0b3JPcHRpb25zPFByb3BzPn0gb3B0aW9ucyAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0aWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCIndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvblwiKTtcblx0XHR9XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdC8qKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0JGRlc3Ryb3koKSB7XG5cdFx0c3VwZXIuJGRlc3Ryb3koKTtcblx0XHR0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuXHRcdFx0Y29uc29sZS53YXJuKCdDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXHRcdH07XG5cdH1cblxuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdCRjYXB0dXJlX3N0YXRlKCkge31cblxuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdCRpbmplY3Rfc3RhdGUoKSB7fVxufVxuLyoqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtQcm9wcz1hbnldXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtFdmVudHM9YW55XVxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBbU2xvdHM9YW55XVxuICogQGRlcHJlY2F0ZWQgVXNlIGBTdmVsdGVDb21wb25lbnRgIGluc3RlYWQuIFNlZSBQUiBmb3IgbW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9wdWxsLzg1MTJcbiAqIEBleHRlbmRzIHtTdmVsdGVDb21wb25lbnREZXY8UHJvcHMsIEV2ZW50cywgU2xvdHM+fVxuICovXG5leHBvcnQgY2xhc3MgU3ZlbHRlQ29tcG9uZW50VHlwZWQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnREZXYge31cblxuLyoqIEByZXR1cm5zIHsoKSA9PiB2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuXHRjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuXHRcdH1cblx0fTtcbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vYW5pbWF0aW9ucy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2F3YWl0X2Jsb2NrLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZG9tLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9nbG9iYWxzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZWFjaC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpZmVjeWNsZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvb3AuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zY2hlZHVsZXIuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcHJlYWQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zc3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2l0aW9ucy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vQ29tcG9uZW50LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZGV2LmpzJztcbiIsImltcG9ydCB7IFBVQkxJQ19WRVJTSU9OIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3ZlcnNpb24uanMnO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpXG5cdC8vIEB0cy1pZ25vcmVcblx0KHdpbmRvdy5fX3N2ZWx0ZSB8fCAod2luZG93Ll9fc3ZlbHRlID0geyB2OiBuZXcgU2V0KCkgfSkpLnYuYWRkKFBVQkxJQ19WRVJTSU9OKTtcbiIsImV4cG9ydCB7XG5cdFN2ZWx0ZUNvbXBvbmVudERldiBhcyBTdmVsdGVDb21wb25lbnQsXG5cdG9uTW91bnQsXG5cdG9uRGVzdHJveSxcblx0YmVmb3JlVXBkYXRlLFxuXHRhZnRlclVwZGF0ZSxcblx0c2V0Q29udGV4dCxcblx0Z2V0Q29udGV4dCxcblx0Z2V0QWxsQ29udGV4dHMsXG5cdGhhc0NvbnRleHQsXG5cdHRpY2ssXG5cdGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcixcblx0U3ZlbHRlQ29tcG9uZW50VHlwZWRcbn0gZnJvbSAnLi9pbnRlcm5hbC9pbmRleC5qcyc7XG4iLCJpbXBvcnQge1xuXHRydW5fYWxsLFxuXHRzdWJzY3JpYmUsXG5cdG5vb3AsXG5cdHNhZmVfbm90X2VxdWFsLFxuXHRpc19mdW5jdGlvbixcblx0Z2V0X3N0b3JlX3ZhbHVlXG59IGZyb20gJy4uL2ludGVybmFsL2luZGV4LmpzJztcblxuY29uc3Qgc3Vic2NyaWJlcl9xdWV1ZSA9IFtdO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgUmVhZGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1zdG9yZSNyZWFkYWJsZVxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gW3ZhbHVlXSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5TdGFydFN0b3BOb3RpZmllcjxUPn0gW3N0YXJ0XVxuICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5SZWFkYWJsZTxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlKHZhbHVlLCBzdGFydCkge1xuXHRyZXR1cm4ge1xuXHRcdHN1YnNjcmliZTogd3JpdGFibGUodmFsdWUsIHN0YXJ0KS5zdWJzY3JpYmVcblx0fTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBgV3JpdGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIGJvdGggdXBkYXRpbmcgYW5kIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1zdG9yZSN3cml0YWJsZVxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gW3ZhbHVlXSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5TdGFydFN0b3BOb3RpZmllcjxUPn0gW3N0YXJ0XVxuICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5Xcml0YWJsZTxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRhYmxlKHZhbHVlLCBzdGFydCA9IG5vb3ApIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vcHVibGljLmpzJykuVW5zdWJzY3JpYmVyfSAqL1xuXHRsZXQgc3RvcDtcblx0LyoqIEB0eXBlIHtTZXQ8aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5TdWJzY3JpYmVJbnZhbGlkYXRlVHVwbGU8VD4+fSAqL1xuXHRjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcblx0LyoqIEBwYXJhbSB7VH0gbmV3X3ZhbHVlXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0ZnVuY3Rpb24gc2V0KG5ld192YWx1ZSkge1xuXHRcdGlmIChzYWZlX25vdF9lcXVhbCh2YWx1ZSwgbmV3X3ZhbHVlKSkge1xuXHRcdFx0dmFsdWUgPSBuZXdfdmFsdWU7XG5cdFx0XHRpZiAoc3RvcCkge1xuXHRcdFx0XHQvLyBzdG9yZSBpcyByZWFkeVxuXHRcdFx0XHRjb25zdCBydW5fcXVldWUgPSAhc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGg7XG5cdFx0XHRcdGZvciAoY29uc3Qgc3Vic2NyaWJlciBvZiBzdWJzY3JpYmVycykge1xuXHRcdFx0XHRcdHN1YnNjcmliZXJbMV0oKTtcblx0XHRcdFx0XHRzdWJzY3JpYmVyX3F1ZXVlLnB1c2goc3Vic2NyaWJlciwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChydW5fcXVldWUpIHtcblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN1YnNjcmliZXJfcXVldWUubGVuZ3RoOyBpICs9IDIpIHtcblx0XHRcdFx0XHRcdHN1YnNjcmliZXJfcXVldWVbaV1bMF0oc3Vic2NyaWJlcl9xdWV1ZVtpICsgMV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aCA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljLmpzJykuVXBkYXRlcjxUPn0gZm5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRmdW5jdGlvbiB1cGRhdGUoZm4pIHtcblx0XHRzZXQoZm4odmFsdWUpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5TdWJzY3JpYmVyPFQ+fSBydW5cblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkludmFsaWRhdG9yPFQ+fSBbaW52YWxpZGF0ZV1cblx0ICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5VbnN1YnNjcmliZXJ9XG5cdCAqL1xuXHRmdW5jdGlvbiBzdWJzY3JpYmUocnVuLCBpbnZhbGlkYXRlID0gbm9vcCkge1xuXHRcdC8qKiBAdHlwZSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5TdWJzY3JpYmVJbnZhbGlkYXRlVHVwbGU8VD59ICovXG5cdFx0Y29uc3Qgc3Vic2NyaWJlciA9IFtydW4sIGludmFsaWRhdGVdO1xuXHRcdHN1YnNjcmliZXJzLmFkZChzdWJzY3JpYmVyKTtcblx0XHRpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuXHRcdFx0c3RvcCA9IHN0YXJ0KHNldCwgdXBkYXRlKSB8fCBub29wO1xuXHRcdH1cblx0XHRydW4odmFsdWUpO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRzdWJzY3JpYmVycy5kZWxldGUoc3Vic2NyaWJlcik7XG5cdFx0XHRpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCAmJiBzdG9wKSB7XG5cdFx0XHRcdHN0b3AoKTtcblx0XHRcdFx0c3RvcCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4geyBzZXQsIHVwZGF0ZSwgc3Vic2NyaWJlIH07XG59XG5cbi8qKlxuICogRGVyaXZlZCB2YWx1ZSBzdG9yZSBieSBzeW5jaHJvbml6aW5nIG9uZSBvciBtb3JlIHJlYWRhYmxlIHN0b3JlcyBhbmRcbiAqIGFwcGx5aW5nIGFuIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIG92ZXIgaXRzIGlucHV0IHZhbHVlcy5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtc3RvcmUjZGVyaXZlZFxuICogQHRlbXBsYXRlIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlN0b3Jlc30gU1xuICogQHRlbXBsYXRlIFRcbiAqIEBvdmVybG9hZFxuICogQHBhcmFtIHtTfSBzdG9yZXMgLSBpbnB1dCBzdG9yZXNcbiAqIEBwYXJhbSB7KHZhbHVlczogaW1wb3J0KCcuL3ByaXZhdGUuanMnKS5TdG9yZXNWYWx1ZXM8Uz4sIHNldDogKHZhbHVlOiBUKSA9PiB2b2lkLCB1cGRhdGU6IChmbjogaW1wb3J0KCcuL3B1YmxpYy5qcycpLlVwZGF0ZXI8VD4pID0+IHZvaWQpID0+IGltcG9ydCgnLi9wdWJsaWMuanMnKS5VbnN1YnNjcmliZXIgfCB2b2lkfSBmbiAtIGZ1bmN0aW9uIGNhbGxiYWNrIHRoYXQgYWdncmVnYXRlcyB0aGUgdmFsdWVzXG4gKiBAcGFyYW0ge1R9IFtpbml0aWFsX3ZhbHVlXSAtIGluaXRpYWwgdmFsdWVcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuUmVhZGFibGU8VD59XG4gKi9cblxuLyoqXG4gKiBEZXJpdmVkIHZhbHVlIHN0b3JlIGJ5IHN5bmNocm9uaXppbmcgb25lIG9yIG1vcmUgcmVhZGFibGUgc3RvcmVzIGFuZFxuICogYXBwbHlpbmcgYW4gYWdncmVnYXRpb24gZnVuY3Rpb24gb3ZlciBpdHMgaW5wdXQgdmFsdWVzLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1zdG9yZSNkZXJpdmVkXG4gKiBAdGVtcGxhdGUge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuU3RvcmVzfSBTXG4gKiBAdGVtcGxhdGUgVFxuICogQG92ZXJsb2FkXG4gKiBAcGFyYW0ge1N9IHN0b3JlcyAtIGlucHV0IHN0b3Jlc1xuICogQHBhcmFtIHsodmFsdWVzOiBpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlN0b3Jlc1ZhbHVlczxTPikgPT4gVH0gZm4gLSBmdW5jdGlvbiBjYWxsYmFjayB0aGF0IGFnZ3JlZ2F0ZXMgdGhlIHZhbHVlc1xuICogQHBhcmFtIHtUfSBbaW5pdGlhbF92YWx1ZV0gLSBpbml0aWFsIHZhbHVlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlJlYWRhYmxlPFQ+fVxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlN0b3Jlc30gU1xuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7U30gc3RvcmVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtUfSBbaW5pdGlhbF92YWx1ZV1cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuUmVhZGFibGU8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXJpdmVkKHN0b3JlcywgZm4sIGluaXRpYWxfdmFsdWUpIHtcblx0Y29uc3Qgc2luZ2xlID0gIUFycmF5LmlzQXJyYXkoc3RvcmVzKTtcblx0LyoqIEB0eXBlIHtBcnJheTxpbXBvcnQoJy4vcHVibGljLmpzJykuUmVhZGFibGU8YW55Pj59ICovXG5cdGNvbnN0IHN0b3Jlc19hcnJheSA9IHNpbmdsZSA/IFtzdG9yZXNdIDogc3RvcmVzO1xuXHRpZiAoIXN0b3Jlc19hcnJheS5ldmVyeShCb29sZWFuKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZGVyaXZlZCgpIGV4cGVjdHMgc3RvcmVzIGFzIGlucHV0LCBnb3QgYSBmYWxzeSB2YWx1ZScpO1xuXHR9XG5cdGNvbnN0IGF1dG8gPSBmbi5sZW5ndGggPCAyO1xuXHRyZXR1cm4gcmVhZGFibGUoaW5pdGlhbF92YWx1ZSwgKHNldCwgdXBkYXRlKSA9PiB7XG5cdFx0bGV0IHN0YXJ0ZWQgPSBmYWxzZTtcblx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblx0XHRsZXQgcGVuZGluZyA9IDA7XG5cdFx0bGV0IGNsZWFudXAgPSBub29wO1xuXHRcdGNvbnN0IHN5bmMgPSAoKSA9PiB7XG5cdFx0XHRpZiAocGVuZGluZykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjbGVhbnVwKCk7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBmbihzaW5nbGUgPyB2YWx1ZXNbMF0gOiB2YWx1ZXMsIHNldCwgdXBkYXRlKTtcblx0XHRcdGlmIChhdXRvKSB7XG5cdFx0XHRcdHNldChyZXN1bHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xlYW51cCA9IGlzX2Z1bmN0aW9uKHJlc3VsdCkgPyByZXN1bHQgOiBub29wO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0Y29uc3QgdW5zdWJzY3JpYmVycyA9IHN0b3Jlc19hcnJheS5tYXAoKHN0b3JlLCBpKSA9PlxuXHRcdFx0c3Vic2NyaWJlKFxuXHRcdFx0XHRzdG9yZSxcblx0XHRcdFx0KHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dmFsdWVzW2ldID0gdmFsdWU7XG5cdFx0XHRcdFx0cGVuZGluZyAmPSB+KDEgPDwgaSk7XG5cdFx0XHRcdFx0aWYgKHN0YXJ0ZWQpIHtcblx0XHRcdFx0XHRcdHN5bmMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRwZW5kaW5nIHw9IDEgPDwgaTtcblx0XHRcdFx0fVxuXHRcdFx0KVxuXHRcdCk7XG5cdFx0c3RhcnRlZCA9IHRydWU7XG5cdFx0c3luYygpO1xuXHRcdHJldHVybiBmdW5jdGlvbiBzdG9wKCkge1xuXHRcdFx0cnVuX2FsbCh1bnN1YnNjcmliZXJzKTtcblx0XHRcdGNsZWFudXAoKTtcblx0XHRcdC8vIFdlIG5lZWQgdG8gc2V0IHRoaXMgdG8gZmFsc2UgYmVjYXVzZSBjYWxsYmFja3MgY2FuIHN0aWxsIGhhcHBlbiBkZXNwaXRlIGhhdmluZyB1bnN1YnNjcmliZWQ6XG5cdFx0XHQvLyBDYWxsYmFja3MgbWlnaHQgYWxyZWFkeSBiZSBwbGFjZWQgaW4gdGhlIHF1ZXVlIHdoaWNoIGRvZXNuJ3Qga25vdyBpdCBzaG91bGQgbm8gbG9uZ2VyXG5cdFx0XHQvLyBpbnZva2UgdGhpcyBkZXJpdmVkIHN0b3JlLlxuXHRcdFx0c3RhcnRlZCA9IGZhbHNlO1xuXHRcdH07XG5cdH0pO1xufVxuXG4vKipcbiAqIFRha2VzIGEgc3RvcmUgYW5kIHJldHVybnMgYSBuZXcgb25lIGRlcml2ZWQgZnJvbSB0aGUgb2xkIG9uZSB0aGF0IGlzIHJlYWRhYmxlLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1zdG9yZSNyZWFkb25seVxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlJlYWRhYmxlPFQ+fSBzdG9yZSAgLSBzdG9yZSB0byBtYWtlIHJlYWRvbmx5XG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlJlYWRhYmxlPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZG9ubHkoc3RvcmUpIHtcblx0cmV0dXJuIHtcblx0XHRzdWJzY3JpYmU6IHN0b3JlLnN1YnNjcmliZS5iaW5kKHN0b3JlKVxuXHR9O1xufVxuXG5leHBvcnQgeyBnZXRfc3RvcmVfdmFsdWUgYXMgZ2V0IH07XG4iLCJpbXBvcnQge3R5cGUgV3JpdGFibGUsIHdyaXRhYmxlfSBmcm9tICdzdmVsdGUvc3RvcmUnXG4vLyBpbXBvcnQgdHlwZSAqIGFzIE1vbmFjbyBmcm9tICdtb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvZWRpdG9yLmFwaSdcblxuZXhwb3J0IGxldCBmbG9hdGluZ19tb2RhbF9tZXNzYWdlOiBXcml0YWJsZTxzdHJpbmcgfCB1bmRlZmluZWQ+ID0gd3JpdGFibGUodW5kZWZpbmVkKVxuLy8gQHRzLWlnbm9yZVxuLy8gZXhwb3J0IGxldCBfbW9uYWNvOiB0eXBlb2Ygd3JpdGFibGU8dHlwZW9mIE1vbmFjbz4gPSB3cml0YWJsZSgwKTtcbiIsIi8vIHlvaW5rZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMzQ0NTAwL2VmZmljaWVudC13YXktdG8taW5zZXJ0LWEtbnVtYmVyLWludG8tYS1zb3J0ZWQtYXJyYXktb2YtbnVtYmVyc1xuXG4vKipcbiAqIExvb2sgZm9yIGFuIGluZGV4IGZyb20gYSBzb3J0ZWQgbGlzdCB1c2luZyBiaW5hcnkgc2VhcmNoLlxuICpcbiAqIElmIHlvdSBkb24ndCBwcm92aWRlIGEgY29tcGFyZSBmdW5jdGlvbiwgaXQgd2lsbCBsb29rIGZvciAqKnRoZSBmaXJzdCBzYW1lIHZhbHVlKiogaXQgY2FuIGZpbmQuXG4gKiBJZiBpdCBjYW5ub3QgZmluZCBhbiBleGFjdGx5IG1hdGNoaW5nIHZhbHVlLCBpdCBjYW4gcmV0dXJuIE4gd2hlcmUgdGhlIGxlbmd0aCBvZiBnaXZlbiBhcnJheSBpcyBOLlxuICpcbiAqIEBwYXJhbSBhcnJheSBBIHNvcnRlZCBhcnJheVxuICogQHBhcmFtIGNvbXBhcmUgTWFrZSB0aGlzIGZ1bmN0aW9uIHJldHVybiBgZmFsc2VgIGlmIHlvdSB3YW50IHRvIHBvaW50IHJpZ2h0IHNpZGUgb2YgZ2l2ZW4gZWxlbWVudCwgYHRydWVgIGlmIHlvdSB3YW50IHRvIHBvaW50IGxlZnQgc2lkZSBvZiBnaXZlbiBlbGVtZW50LlxuICogQHJldHVybnMgQW4gaW5kZXggZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmFyeVNlYXJjaDxUPiggYXJyYXk6IEFycmF5TGlrZTxUPiwgZWxlbWVudDogVCApOiBudW1iZXI7XG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5U2VhcmNoPFQ+KCBhcnJheTogQXJyYXlMaWtlPFQ+LCBjb21wYXJlOiAoIGVsZW1lbnQ6IFQgKSA9PiBib29sZWFuICk6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBiaW5hcnlTZWFyY2g8VD4oXG4gIGFycmF5OiBBcnJheUxpa2U8VD4sXG4gIGVsZW1lbnRPckNvbXBhcmU6IFQgfCAoICggZWxlbWVudDogVCApID0+IGJvb2xlYW4gKSxcbik6IG51bWJlciB7XG4gIGlmICggdHlwZW9mIGVsZW1lbnRPckNvbXBhcmUgIT09ICdmdW5jdGlvbicgKSB7XG4gICAgcmV0dXJuIGJpbmFyeVNlYXJjaCggYXJyYXksICggZWxlbWVudCApID0+ICggZWxlbWVudCA8IGVsZW1lbnRPckNvbXBhcmUgKSApO1xuICB9XG4gIGNvbnN0IGNvbXBhcmUgPSBlbGVtZW50T3JDb21wYXJlIGFzICggZWxlbWVudDogVCApID0+IGJvb2xlYW47XG5cbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoIHN0YXJ0IDwgZW5kICkge1xuICAgIGNvbnN0IGNlbnRlciA9ICggc3RhcnQgKyBlbmQgKSA+PiAxO1xuICAgIGNvbnN0IGNlbnRlckVsZW1lbnQgPSBhcnJheVsgY2VudGVyIF07XG5cbiAgICBjb25zdCBjb21wYXJlUmVzdWx0ID0gY29tcGFyZSggY2VudGVyRWxlbWVudCApO1xuXG4gICAgaWYgKCBjb21wYXJlUmVzdWx0ICkge1xuICAgICAgc3RhcnQgPSBjZW50ZXIgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmQgPSBjZW50ZXI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXJ0O1xufVxuIiwiLyoqXG4gKiBHZW5lcmljIHRyYXZlcnNlIGZ1bmN0aW9uLlxuICpcbiAqIEl0IHBlcmZvcm1zIERlcHRoLUZpcnN0IFNlYXJjaC5cbiAqXG4gKiBUaGUgYHRyYXZlcnNlcmAgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZCBmb3IgZWFjaCBkZXNjZW5kYW50cy5cbiAqIFlvdSBuZWVkIHRvIHJldHVybiB0aGVpciBcImNoaWxkcmVuXCIgaW4gYW4gYXJyYXkuXG4gKiBJZiB5b3Ugd2FudCB0byBzdG9wIHRoZSB0cmF2ZXJzYWwsIHJldHVybiBgZmFsc2VgIGluc3RlYWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiAvLyByZXBsaWNhdGUgVGhyZWUuanMgdHJhdmVyc2UgZm9yIG5vIHJlYXNvblxuICogY29uc3QgbWVzaGVzID0gW107XG4gKiB0cmF2ZXJzZSggb2JqZWN0M0RSb290LCAoIG9iamVjdCApID0+IHtcbiAqICAgaWYgKCBvYmplY3QuaXNNZXNoICkge1xuICogICAgIG1lc2hlcy5wdXNoKCBvYmplY3QgKTtcbiAqICAgfVxuICogICByZXR1cm4gb2JqZWN0M0RSb290LmNoaWxkcmVuO1xuICogfSApO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHJvb3QgVGhlIFwicm9vdFwiIG5vZGVcbiAqIEBwYXJhbSB0cmF2ZXJzZXIgVGhlIHRyYXZlcnNlIGZ1bmN0aW9uLiBJZiB0aGUgbm9kZSBoYXMgXCJjaGlsZHJlblwiIHJldHVybiB0aGVtIGluIGFuIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhdmVyc2U8VE5vZGU+KFxuICByb290OiBUTm9kZSxcbiAgdHJhdmVyc2VyOiAoIG5vZGU6IFROb2RlICkgPT4gVE5vZGVbXSB8IGZhbHNlLFxuKTogdm9pZCB7XG4gIGNvbnN0IG5vZGVzTmVlZFByb2Nlc3M6IFROb2RlW10gPSBbIHJvb3QgXTtcbiAgY29uc3Qgbm9kZXNTZWVuID0gbmV3IFNldDxUTm9kZT4oIG5vZGVzTmVlZFByb2Nlc3MgKTtcblxuICB3aGlsZSAoIG5vZGVzTmVlZFByb2Nlc3MubGVuZ3RoID4gMCApIHtcbiAgICBjb25zdCBjdXJyZW50Tm9kZSA9IG5vZGVzTmVlZFByb2Nlc3Muc2hpZnQoKSE7XG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IHRyYXZlcnNlciggY3VycmVudE5vZGUgKTtcblxuICAgIGlmICggIWNoaWxkcmVuICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZXNGb3VuZCA9IGNoaWxkcmVuLmZpbHRlciggKCBub2RlICkgPT4gIW5vZGVzU2Vlbi5oYXMoIG5vZGUgKSApO1xuICAgIG5vZGVzTmVlZFByb2Nlc3MudW5zaGlmdCggLi4ubm9kZXNGb3VuZCApO1xuICAgIG5vZGVzRm91bmQubWFwKCAoIG5vZGUgKSA9PiBub2Rlc1NlZW4uYWRkKCBub2RlICkgKTtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFycmF5UmFuZ2UoIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBzdGVwPzogbnVtYmVyICk6IG51bWJlcltdIHtcbiAgbGV0IGN1cnJlbnQgPSBzdGFydDtcbiAgY29uc3QgcmV0OiBudW1iZXJbXSA9IFtdO1xuXG4gIGlmICggc3RhcnQgPCBlbmQgKSB7XG4gICAgc3RlcCA9IHN0ZXAgPz8gMTtcbiAgICB3aGlsZSAoIGN1cnJlbnQgPCBlbmQgKSB7XG4gICAgICByZXQucHVzaCggY3VycmVudCApO1xuICAgICAgY3VycmVudCArPSBzdGVwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGVwID0gc3RlcCA/PyAtMTtcbiAgICB3aGlsZSAoIGN1cnJlbnQgPiBlbmQgKSB7XG4gICAgICByZXQucHVzaCggY3VycmVudCApO1xuICAgICAgY3VycmVudCArPSBzdGVwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbiIsImV4cG9ydCBjb25zdCBhcnJheVNlcmlhbCA9ICggY291bnQ6IG51bWJlciApOiBudW1iZXJbXSA9PiAoXG4gIFsgLi4uQXJyYXkoIGNvdW50ICkgXS5tYXAoICggXywgaSApID0+IGkgKVxuKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBhcnJheVNldERlbGV0ZTxUPiggYXJyYXk6IEFycmF5PFQ+LCB2YWx1ZTogVCApOiBib29sZWFuIHtcbiAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKCB2YWx1ZSApO1xuICBpZiAoIGluZGV4ID09PSAtMSApIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgYXJyYXkuc3BsaWNlKCBpbmRleCwgMSApO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5U2V0SGFzPFQ+KCBhcnJheTogQXJyYXk8VD4sIHZhbHVlOiBUICk6IGJvb2xlYW4ge1xuICByZXR1cm4gYXJyYXkuaW5kZXhPZiggdmFsdWUgKSAhPT0gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVNldEFkZDxUPiggYXJyYXk6IEFycmF5PFQ+LCB2YWx1ZTogVCApOiBib29sZWFuIHtcbiAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKCB2YWx1ZSApO1xuICBpZiAoIGluZGV4ICE9PSAtMSApIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgYXJyYXkucHVzaCggdmFsdWUgKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVNldFVuaW9uPFQ+KCBhOiBBcnJheTxUPiwgYjogQXJyYXk8VD4gKTogQXJyYXk8VD4ge1xuICBjb25zdCBvdXQgPSBbIC4uLmEgXTtcbiAgYi5mb3JFYWNoKCAoIHYgKSA9PiB7XG4gICAgaWYgKCAhYXJyYXlTZXRIYXMoIG91dCwgdiApICkge1xuICAgICAgb3V0LnB1c2goIHYgKTtcbiAgICB9XG4gIH0gKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5U2V0RGlmZjxUPiggZnJvbTogQXJyYXk8VD4sIGRpZmY6IEFycmF5PFQ+ICk6IEFycmF5PFQ+IHtcbiAgY29uc3Qgb3V0ID0gWyAuLi5mcm9tIF07XG4gIGRpZmYuZm9yRWFjaCggKCB2ICkgPT4ge1xuICAgIGFycmF5U2V0RGVsZXRlKCBvdXQsIHYgKTtcbiAgfSApO1xuICByZXR1cm4gb3V0O1xufVxuIiwiLyoqXG4gKiBgWyAtMSwgLTEsIDEsIC0xLCAtMSwgMSwgMSwgMSBdYFxuICovXG5leHBvcnQgY29uc3QgVFJJQU5HTEVfU1RSSVBfUVVBRCA9IFsgLTEsIC0xLCAxLCAtMSwgLTEsIDEsIDEsIDEgXTtcblxuLyoqXG4gKiBgWyAtMSwgLTEsIDAsIDEsIC0xLCAwLCAtMSwgMSwgMCwgMSwgMSwgMCBdYFxuICovXG5leHBvcnQgY29uc3QgVFJJQU5HTEVfU1RSSVBfUVVBRF8zRCA9IFsgLTEsIC0xLCAwLCAxLCAtMSwgMCwgLTEsIDEsIDAsIDEsIDEsIDAgXTtcblxuLyoqXG4gKiBgWyAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxIF1gXG4gKi9cbmV4cG9ydCBjb25zdCBUUklBTkdMRV9TVFJJUF9RVUFEX05PUk1BTCA9IFsgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSBdO1xuXG4vKipcbiAqIGBbIDAsIDAsIDEsIDAsIDAsIDEsIDEsIDEgXWBcbiAqL1xuZXhwb3J0IGNvbnN0IFRSSUFOR0xFX1NUUklQX1FVQURfVVYgPSBbIDAsIDAsIDEsIDAsIDAsIDEsIDEsIDEgXTtcbiIsIi8qKlxuICogU2h1ZmZsZSBnaXZlbiBgYXJyYXlgIHVzaW5nIGdpdmVuIGBkaWNlYCBSTkcuICoqRGVzdHJ1Y3RpdmUqKi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheTxUPiggYXJyYXk6IFRbXSwgZGljZT86ICgpID0+IG51bWJlciApOiBUW10ge1xuICBjb25zdCBmID0gZGljZSA/IGRpY2UgOiAoKSA9PiBNYXRoLnJhbmRvbSgpO1xuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGggLSAxOyBpICsrICkge1xuICAgIGNvbnN0IGlyID0gaSArIE1hdGguZmxvb3IoIGYoKSAqICggYXJyYXkubGVuZ3RoIC0gaSApICk7XG4gICAgY29uc3QgdGVtcCA9IGFycmF5WyBpciBdO1xuICAgIGFycmF5WyBpciBdID0gYXJyYXlbIGkgXTtcbiAgICBhcnJheVsgaSBdID0gdGVtcDtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogSSBsaWtlIHdpcmVmcmFtZVxuICpcbiAqIGB0cmlJbmRleFRvTGluZUluZGV4KCBbIDAsIDEsIDIsIDUsIDYsIDcgXSApYCAtPiBgWyAwLCAxLCAxLCAyLCAyLCAwLCA1LCA2LCA2LCA3LCA3LCA1IF1gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlJbmRleFRvTGluZUluZGV4PFQ+KCBhcnJheTogVFtdICk6IFRbXSB7XG4gIGNvbnN0IHJldDogVFtdID0gW107XG4gIGZvciAoIGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAvIDM7IGkgKysgKSB7XG4gICAgY29uc3QgaGVhZCA9IGkgKiAzO1xuICAgIHJldC5wdXNoKFxuICAgICAgYXJyYXlbIGhlYWQgICAgIF0sIGFycmF5WyBoZWFkICsgMSBdLFxuICAgICAgYXJyYXlbIGhlYWQgKyAxIF0sIGFycmF5WyBoZWFkICsgMiBdLFxuICAgICAgYXJyYXlbIGhlYWQgKyAyIF0sIGFycmF5WyBoZWFkICAgICBdXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIGBtYXRyaXgyZCggMywgMiApYCAtPiBgWyAwLCAwLCAwLCAxLCAwLCAyLCAxLCAwLCAxLCAxLCAxLCAyIF1gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRyaXgyZCggdzogbnVtYmVyLCBoOiBudW1iZXIgKTogbnVtYmVyW10ge1xuICBjb25zdCBhcnI6IG51bWJlcltdID0gW107XG4gIGZvciAoIGxldCBpeSA9IDA7IGl5IDwgaDsgaXkgKysgKSB7XG4gICAgZm9yICggbGV0IGl4ID0gMDsgaXggPCB3OyBpeCArKyApIHtcbiAgICAgIGFyci5wdXNoKCBpeCwgaXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBTZWUgYWxzbzoge0BsaW5rIG1hdHJpeDJkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0cml4M2QoIHc6IG51bWJlciwgaDogbnVtYmVyLCBkOiBudW1iZXIgKTogbnVtYmVyW10ge1xuICBjb25zdCBhcnI6IG51bWJlcltdID0gW107XG4gIGZvciAoIGxldCBpeiA9IDA7IGl6IDwgZDsgaXogKysgKSB7XG4gICAgZm9yICggbGV0IGl5ID0gMDsgaXkgPCBoOyBpeSArKyApIHtcbiAgICAgIGZvciAoIGxldCBpeCA9IDA7IGl4IDwgdzsgaXggKysgKSB7XG4gICAgICAgIGFyci5wdXNoKCBpeCwgaXksIGl6ICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59XG4iLCIvKipcbiAqIENyaXRpY2FsbHkgRGFtcGVkIFNwcmluZ1xuICpcbiAqIFNob3V0b3V0cyB0byBLZWlqaXJvIFRha2FoYXNoaVxuICovXG5leHBvcnQgY2xhc3MgQ0RTIHtcbiAgcHVibGljIGZhY3RvciA9IDEwMC4wO1xuICBwdWJsaWMgcmF0aW8gPSAxLjA7XG4gIHB1YmxpYyB2ZWxvY2l0eSA9IDAuMDtcbiAgcHVibGljIHZhbHVlID0gMC4wO1xuICBwdWJsaWMgdGFyZ2V0ID0gMC4wO1xuXG4gIHB1YmxpYyB1cGRhdGUoIGRlbHRhVGltZTogbnVtYmVyICk6IG51bWJlciB7XG4gICAgdGhpcy52ZWxvY2l0eSArPSAoXG4gICAgICAtdGhpcy5mYWN0b3IgKiAoIHRoaXMudmFsdWUgLSB0aGlzLnRhcmdldCApXG4gICAgICAtIDIuMCAqIHRoaXMudmVsb2NpdHkgKiBNYXRoLnNxcnQoIHRoaXMuZmFjdG9yICkgKiB0aGlzLnJhdGlvXG4gICAgKSAqIGRlbHRhVGltZTtcbiAgICB0aGlzLnZhbHVlICs9IHRoaXMudmVsb2NpdHkgKiBkZWx0YVRpbWU7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn1cbiIsIi8qKlxuICogQ2xhc3MgdGhhdCBkZWFscyB3aXRoIHRpbWUuXG4gKiBJbiB0aGlzIGJhc2UgY2xhc3MsIHlvdSBuZWVkIHRvIHNldCB0aW1lIG1hbnVhbGx5IGZyb20gYEF1dG9tYXRvbi51cGRhdGUoKWAuXG4gKiBCZXN0IGZvciBzeW5jIHdpdGggZXh0ZXJuYWwgY2xvY2sgc3R1ZmYuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG9jayB7XG4gIC8qKlxuICAgKiBJdHMgY3VycmVudCB0aW1lLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9fdGltZSA9IDAuMDtcblxuICAvKipcbiAgICogSXRzIGRlbHRhVGltZSBvZiBsYXN0IHVwZGF0ZS5cbiAgICovXG4gIHByb3RlY3RlZCBfX2RlbHRhVGltZSA9IDAuMDtcblxuICAvKipcbiAgICogV2hldGhlciBpdHMgY3VycmVudGx5IHBsYXlpbmcgb3Igbm90LlxuICAgKi9cbiAgcHJvdGVjdGVkIF9faXNQbGF5aW5nID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEl0cyBjdXJyZW50IHRpbWUuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHRpbWUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX190aW1lOyB9XG5cbiAgLyoqXG4gICAqIEl0cyBkZWx0YVRpbWUgb2YgbGFzdCB1cGRhdGUuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGRlbHRhVGltZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fX2RlbHRhVGltZTsgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGl0cyBjdXJyZW50bHkgcGxheWluZyBvciBub3QuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGlzUGxheWluZygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX19pc1BsYXlpbmc7IH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjbG9jay5cbiAgICogQHBhcmFtIHRpbWUgVGltZS4gWW91IG5lZWQgdG8gc2V0IG1hbnVhbGx5IHdoZW4geW91IGFyZSB1c2luZyBtYW51YWwgQ2xvY2tcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoIHRpbWU/OiBudW1iZXIgKTogdm9pZCB7XG4gICAgY29uc3QgcHJldlRpbWUgPSB0aGlzLl9fdGltZTtcbiAgICB0aGlzLl9fdGltZSA9IHRpbWUgfHwgMC4wO1xuICAgIHRoaXMuX19kZWx0YVRpbWUgPSB0aGlzLl9fdGltZSAtIHByZXZUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSBjbG9jay5cbiAgICovXG4gIHB1YmxpYyBwbGF5KCk6IHZvaWQge1xuICAgIHRoaXMuX19pc1BsYXlpbmcgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIGNsb2NrLlxuICAgKi9cbiAgcHVibGljIHBhdXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX19pc1BsYXlpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRpbWUgbWFudWFsbHkuXG4gICAqIEBwYXJhbSB0aW1lIFRpbWVcbiAgICovXG4gIHB1YmxpYyBzZXRUaW1lKCB0aW1lOiBudW1iZXIgKTogdm9pZCB7XG4gICAgdGhpcy5fX3RpbWUgPSB0aW1lO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDbG9jayB9IGZyb20gJy4vQ2xvY2snO1xuXG4vKipcbiAqIENsYXNzIHRoYXQgZGVhbHMgd2l0aCB0aW1lLlxuICogVGhpcyBpcyBcImZyYW1lXCIgdHlwZSBjbG9jaywgdGhlIGZyYW1lIGluY3JlYXNlcyBldmVyeSB7QGxpbmsgQ2xvY2tGcmFtZSN1cGRhdGV9IGNhbGwuXG4gKiBAcGFyYW0gZnBzIEZyYW1lcyBwZXIgc2Vjb25kXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG9ja0ZyYW1lIGV4dGVuZHMgQ2xvY2sge1xuICAvKipcbiAgICogSXRzIGN1cnJlbnQgZnJhbWUuXG4gICAqL1xuICBwcml2YXRlIF9fZnJhbWUgPSAwO1xuXG4gIC8qKlxuICAgKiBJdHMgZnBzLlxuICAgKi9cbiAgcHJpdmF0ZSBfX2ZwczogbnVtYmVyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZnBzID0gNjAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9fZnBzID0gZnBzO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0cyBjdXJyZW50IGZyYW1lLlxuICAgKi9cbiAgcHVibGljIGdldCBmcmFtZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fX2ZyYW1lOyB9XG5cbiAgLyoqXG4gICAqIEl0cyBmcHMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGZwcygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fX2ZwczsgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGNsb2NrLiBJdCB3aWxsIGluY3JlYXNlIHRoZSBmcmFtZSBieSAxLlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAoIHRoaXMuX19pc1BsYXlpbmcgKSB7XG4gICAgICB0aGlzLl9fdGltZSA9IHRoaXMuX19mcmFtZSAvIHRoaXMuX19mcHM7XG4gICAgICB0aGlzLl9fZGVsdGFUaW1lID0gMS4wIC8gdGhpcy5fX2ZwcztcbiAgICAgIHRoaXMuX19mcmFtZSArKztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX2RlbHRhVGltZSA9IDAuMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB0aW1lIG1hbnVhbGx5LlxuICAgKiBUaGUgc2V0IHRpbWUgd2lsbCBiZSBjb252ZXJ0ZWQgaW50byBpbnRlcm5hbCBmcmFtZSBjb3VudCwgc28gdGhlIHRpbWUgd2lsbCBub3QgYmUgZXhhY3RseSBzYW1lIGFzIHNldCBvbmUuXG4gICAqIEBwYXJhbSB0aW1lIFRpbWVcbiAgICovXG4gIHB1YmxpYyBzZXRUaW1lKCB0aW1lOiBudW1iZXIgKTogdm9pZCB7XG4gICAgdGhpcy5fX2ZyYW1lID0gTWF0aC5mbG9vciggdGhpcy5fX2ZwcyAqIHRpbWUgKTtcbiAgICB0aGlzLl9fdGltZSA9IHRoaXMuX19mcmFtZSAvIHRoaXMuX19mcHM7XG4gIH1cbn1cbiIsImltcG9ydCB7IENsb2NrIH0gZnJvbSAnLi9DbG9jayc7XG5cbi8qKlxuICogQ2xhc3MgdGhhdCBkZWFscyB3aXRoIHRpbWUuXG4gKiBUaGlzIGlzIFwicmVhbHRpbWVcIiB0eXBlIGNsb2NrLCB0aGUgdGltZSBnb2VzIG9uIGFzIHJlYWwgd29ybGQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG9ja1JlYWx0aW1lIGV4dGVuZHMgQ2xvY2sge1xuICAvKipcbiAgICogXCJZb3Ugc2V0IHRoZSB0aW1lIG1hbnVhbGx5IHRvIGBfX3J0VGltZWAgd2hlbiBpdCdzIGBfX3J0RGF0ZWAuXCJcbiAgICovXG4gIHByaXZhdGUgX19ydFRpbWUgPSAwLjA7XG5cbiAgLyoqXG4gICAqIFwiWW91IHNldCB0aGUgdGltZSBtYW51YWxseSB0byBgX19ydFRpbWVgIHdoZW4gaXQncyBgX19ydERhdGVgLlwiXG4gICAqL1xuICBwcml2YXRlIF9fcnREYXRlOiBudW1iZXIgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAvKipcbiAgICogVGhlIGNsb2NrIGlzIHJlYWx0aW1lLiB5ZWFoLlxuICAgKi9cbiAgcHVibGljIGdldCBpc1JlYWx0aW1lKCk6IGJvb2xlYW4geyByZXR1cm4gdHJ1ZTsgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGNsb2NrLiBUaW1lIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGltZSBpbiByZWFsIHdvcmxkLlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgIGlmICggdGhpcy5fX2lzUGxheWluZyApIHtcbiAgICAgIGNvbnN0IHByZXZUaW1lID0gdGhpcy5fX3RpbWU7XG4gICAgICBjb25zdCBkZWx0YURhdGUgPSAoIG5vdyAtIHRoaXMuX19ydERhdGUgKTtcbiAgICAgIHRoaXMuX190aW1lID0gdGhpcy5fX3J0VGltZSArIGRlbHRhRGF0ZSAvIDEwMDAuMDtcbiAgICAgIHRoaXMuX19kZWx0YVRpbWUgPSB0aGlzLnRpbWUgLSBwcmV2VGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX3J0VGltZSA9IHRoaXMudGltZTtcbiAgICAgIHRoaXMuX19ydERhdGUgPSBub3c7XG4gICAgICB0aGlzLl9fZGVsdGFUaW1lID0gMC4wO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRpbWUgbWFudWFsbHkuXG4gICAqIEBwYXJhbSB0aW1lIFRpbWVcbiAgICovXG4gIHB1YmxpYyBzZXRUaW1lKCB0aW1lOiBudW1iZXIgKTogdm9pZCB7XG4gICAgdGhpcy5fX3RpbWUgPSB0aW1lO1xuICAgIHRoaXMuX19ydFRpbWUgPSB0aGlzLnRpbWU7XG4gICAgdGhpcy5fX3J0RGF0ZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd1JHQiB9IGZyb20gJy4vUmF3UkdCJztcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgaW5wdXQgY29sb3IgaW4gQXRhcmktU1QgY29sb3IgcGFsZXR0ZSBmb3JtYXQgdG8gYSB7QGxpbmsgUmF3UkdCfS5cbiAqXG4gKiBAcGFyYW0gc3RDb2xvciBBIGNvbG9yIGluIEF0YXJpLVNUIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29sb3JGcm9tQXRhcmlTVCggc3RDb2xvcjogbnVtYmVyICk6IFJhd1JHQiB7XG4gIHJldHVybiBbXG4gICAgKCBzdENvbG9yID4+IDggJiA3ICkgLyA3LjAsXG4gICAgKCBzdENvbG9yID4+IDQgJiA3ICkgLyA3LjAsXG4gICAgKCBzdENvbG9yICYgNyApIC8gNy4wLFxuICBdO1xufVxuIiwiLyoqXG4gKiBgbGVycGAsIG9yIGBtaXhgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKCBhOiBudW1iZXIsIGI6IG51bWJlciwgeDogbnVtYmVyICk6IG51bWJlciB7XG4gIHJldHVybiBhICsgKCBiIC0gYSApICogeDtcbn1cblxuLyoqXG4gKiBgY2xhbXBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCggeDogbnVtYmVyLCBsOiBudW1iZXIsIGg6IG51bWJlciApOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5taW4oIE1hdGgubWF4KCB4LCBsICksIGggKTtcbn1cblxuLyoqXG4gKiBgY2xhbXAoIHgsIDAuMCwgMS4wIClgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYXR1cmF0ZSggeDogbnVtYmVyICk6IG51bWJlciB7XG4gIHJldHVybiBjbGFtcCggeCwgMC4wLCAxLjAgKTtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSB2YWx1ZSBmcm9tIGlucHV0IHJhbmdlIHRvIG91dHB1dCByYW5nZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKCB4OiBudW1iZXIsIHgwOiBudW1iZXIsIHgxOiBudW1iZXIsIHkwOiBudW1iZXIsIHkxOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgcmV0dXJuICggKCB4IC0geDAgKSAqICggeTEgLSB5MCApIC8gKCB4MSAtIHgwICkgKyB5MCApO1xufVxuXG4vKipcbiAqIGBzbW9vdGhzdGVwYCBidXQgbm90IHNtb290aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyc3RlcCggYTogbnVtYmVyLCBiOiBudW1iZXIsIHg6IG51bWJlciApOiBudW1iZXIge1xuICByZXR1cm4gc2F0dXJhdGUoICggeCAtIGEgKSAvICggYiAtIGEgKSApO1xufVxuXG4vKipcbiAqIHdvcmxkIGZhbW91cyBgc21vb3Roc3RlcGAgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNtb290aHN0ZXAoIGE6IG51bWJlciwgYjogbnVtYmVyLCB4OiBudW1iZXIgKTogbnVtYmVyIHtcbiAgY29uc3QgdCA9IGxpbmVhcnN0ZXAoIGEsIGIsIHggKTtcbiAgcmV0dXJuIHQgKiB0ICogKCAzLjAgLSAyLjAgKiB0ICk7XG59XG5cbi8qKlxuICogYHNtb290aHN0ZXBgIGJ1dCBtb3JlIHNtb290aFxuICovXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoZXJzdGVwKCBhOiBudW1iZXIsIGI6IG51bWJlciwgeDogbnVtYmVyICk6IG51bWJlciB7XG4gIGNvbnN0IHQgPSBsaW5lYXJzdGVwKCBhLCBiLCB4ICk7XG4gIHJldHVybiB0ICogdCAqIHQgKiAoIHQgKiAoIHQgKiA2LjAgLSAxNS4wICkgKyAxMC4wICk7XG59XG5cbi8qKlxuICogYHNtb290aHN0ZXBgIGJ1dCBXQVkgbW9yZSBzbW9vdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNtb290aGVzdHN0ZXAoIGE6IG51bWJlciwgYjogbnVtYmVyLCB4OiBudW1iZXIgKTogbnVtYmVyIHtcbiAgY29uc3QgdCA9IGxpbmVhcnN0ZXAoIGEsIGIsIHggKTtcbiAgcmV0dXJuIHQgKiB0ICogdCAqIHQgKiAoIHQgKiAoIHQgKiAoIC0yMC4wICogdCArIDcwLjAgKSAtIDg0LjAgKSArIDM1LjAgKTtcbn1cbiIsImltcG9ydCB7IFJhd1JHQiB9IGZyb20gJy4vUmF3UkdCJztcbmltcG9ydCB7IGxlcnAgfSBmcm9tICcuLi9tYXRoL3V0aWxzJztcblxuLyoqXG4gKiBDb252ZXJ0IGEgY29sb3IgZnJvbSBIU1YgdG8gUkdCLlxuICogRWFjaCBjb21wb25lbnQgb2YgdGhlIEhTViBtdXN0IGJlIGdpdmVuIGluIFswIC0gMV0gcmFuZ2UuXG4gKlxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU1ZfY29sb3Jfc3BhY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbG9ySFNWMlJHQiggWyBoLCBzLCB2IF06IFsgbnVtYmVyLCBudW1iZXIsIG51bWJlciBdICk6IFJhd1JHQiB7XG4gIGNvbnN0IGh0ID0gaCAlIDEuMCAqIDYuMDtcblxuICByZXR1cm4gWyAwLjAsIDQuMCwgMi4wIF0ubWFwKCAoIHAgKSA9PiB7XG4gICAgY29uc3QgY29sSCA9IE1hdGgubWluKCBNYXRoLm1heCggKFxuICAgICAgTWF0aC5hYnMoICggaHQgKyBwICkgJSA2LjAgLSAzLjAgKSAtIDEuMFxuICAgICksIDAuMCApLCAxLjAgKTtcbiAgICBjb25zdCBjb2xTID0gbGVycCggMS4wLCBjb2xILCBzICk7XG4gICAgcmV0dXJuIHYgKiBjb2xTO1xuICB9ICkgYXMgUmF3UkdCO1xufVxuIiwiaW1wb3J0IHsgc2F0dXJhdGUgfSBmcm9tICcuLi9tYXRoL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgUmF3UkdCIH0gZnJvbSAnLi9SYXdSR0InO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBpbnB1dCBjb2xvciB0byBoZXggcmVwcmVzZW50YXRpb24gKGUuZy4gIzdmN2Y3ZilcbiAqIEBwYXJhbSBjb2xvciBjb2xvciBpbiB7QGxpbmsgUmF3UkdCfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29sb3JUb0hleCggY29sb3I6IFJhd1JHQiApOiBzdHJpbmcge1xuICByZXR1cm4gJyMnICsgY29sb3IubWFwKCAoIHYgKSA9PiAoXG4gICAgKCAnMCcgKyAoIE1hdGgucm91bmQoIHNhdHVyYXRlKCB2ICkgKiAyNTUuMCApICkudG9TdHJpbmcoIDE2ICkgKS5zbGljZSggLTIgKVxuICApICkuam9pbiggJycgKTtcbn1cbiIsIi8qKlxuICogUmV0dXJuIGEgZG90IHByb2R1Y3Qgb2YgZ2l2ZW4gdHdvIHZlY3RvcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWNEb3Q8VCBleHRlbmRzIG51bWJlcltdPiggdmVjQTogVCwgdmVjQjogVCApOiBudW1iZXIge1xuICByZXR1cm4gdmVjQS5yZWR1Y2UoICggc3VtLCB2LCBpICkgPT4gc3VtICsgdiAqIHZlY0JbIGkgXSwgMC4wICk7XG59XG4iLCIvKiFcbiAqIFR1cmJvIGNvbG9ybWFwXG4gKlxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gKEFwYWNoZS0yLjApXG4gKlxuICogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbWlraGFpbG92LXdvcmsvMGQxNzc0NjVhODE1MWViNmVkZTE3NjhkNTFkNDc2YzdcbiAqL1xuXG5pbXBvcnQgeyBSYXdSR0IgfSBmcm9tICcuL1Jhd1JHQic7XG5pbXBvcnQgeyBzYXR1cmF0ZSB9IGZyb20gJy4uL21hdGgvdXRpbHMnO1xuaW1wb3J0IHsgdmVjRG90IH0gZnJvbSAnLi4vbWF0aC92ZWMvdmVjRG90JztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHR1cmJvIGdyYWRpZW50LlxuICpcbiAqIFJlZjogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbWlraGFpbG92LXdvcmsvMGQxNzc0NjVhODE1MWViNmVkZTE3NjhkNTFkNDc2YzdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbG9yVHVyYm8oIHg6IG51bWJlciApOiBSYXdSR0Ige1xuICBjb25zdCBrciA9IFtcbiAgICAwLjEzNTcyMTM4LCA0LjYxNTM5MjYwLCAtNDIuNjYwMzIyNTgsXG4gICAgMTMyLjEzMTA4MjM0LCAtMTUyLjk0MjM5Mzk2LCA1OS4yODYzNzk0MyxcbiAgXTtcbiAgY29uc3Qga2cgPSBbXG4gICAgMC4wOTE0MDI2MSwgMi4xOTQxODgzOSwgNC44NDI5NjY1OCxcbiAgICAtMTQuMTg1MDMzMzMsIDQuMjc3Mjk4NTcsIDIuODI5NTY2MDQsXG4gIF07XG4gIGNvbnN0IGtiID0gW1xuICAgIDAuMTA2NjczMzAsIDEyLjY0MTk0NjA4LCAtNjAuNTgyMDQ4MzYsXG4gICAgMTEwLjM2Mjc2NzcxLCAtODkuOTAzMTA5MTIsIDI3LjM0ODI0OTczLFxuICBdO1xuXG4gIGNvbnN0IHh0ID0gc2F0dXJhdGUoIHggKTtcbiAgY29uc3QgeHYgPSBbXG4gICAgMS4wLFxuICAgIHh0LFxuICAgIHh0ICogeHQsXG4gICAgeHQgKiB4dCAqIHh0LFxuICAgIHh0ICogeHQgKiB4dCAqIHh0LFxuICAgIHh0ICogeHQgKiB4dCAqIHh0ICogeHQsXG4gIF07XG5cbiAgY29uc3QgY29sID0gW1xuICAgIHNhdHVyYXRlKCB2ZWNEb3QoIGtyLCB4diApICksXG4gICAgc2F0dXJhdGUoIHZlY0RvdCgga2csIHh2ICkgKSxcbiAgICBzYXR1cmF0ZSggdmVjRG90KCBrYiwgeHYgKSApLFxuICBdO1xuXG4gIHJldHVybiBjb2wgYXMgUmF3UkdCO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSYXdSR0IgfSBmcm9tICcuL1Jhd1JHQic7XG5cbi8qKlxuICogRU9URiBvZiBSZWMuNzA5IGEuay5hLiBzUkdCLXRvLUxpbmVhclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW90ZlJlYzcwOSggdmFsdWU6IFJhd1JHQiApOiBSYXdSR0Ige1xuICByZXR1cm4gdmFsdWUubWFwKCAoIHYgKSA9PiAoXG4gICAgdiA8IDAuMDgxXG4gICAgICA/IHYgLyA0LjVcbiAgICAgIDogTWF0aC5wb3coICggdiArIDAuMDk5ICkgLyAxLjA5OSwgMS4wIC8gMC40NSApXG4gICkgKSBhcyBSYXdSR0I7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd1JHQiB9IGZyb20gJy4vUmF3UkdCJztcblxuLyoqXG4gKiBPRVRGIG9mIFJlYy43MDkgYS5rLmEuIExpbmVhci10by1zUkdCXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZXRmUmVjNzA5KCBsdW1pbmFuY2U6IFJhd1JHQiApOiBSYXdSR0Ige1xuICByZXR1cm4gbHVtaW5hbmNlLm1hcCggKCBsICkgPT4gKFxuICAgIGwgPCAwLjAxOFxuICAgICAgPyA0LjUgKiBsXG4gICAgICA6IDEuMDk5ICogTWF0aC5wb3coIGwsIDAuNDUgKSAtIDAuMDk5XG4gICkgKSBhcyBSYXdSR0I7XG59XG4iLCJpbXBvcnQgeyBSYXdEYWdFZGdlIH0gZnJvbSAnLi9SYXdEYWdFZGdlJztcblxuLyoqXG4gKiBSZXR1cm4gYWxsIHBhcmVudCBzb3VyY2VzIHRoZSBzcGVjaWZpZWQgZGVzdGluYXRpb24gaGFzLlxuICogQHBhcmFtIGVkZ2VzIEFuIGFycmF5IG9mIGRhZyBlZGdlXG4gKiBAcGFyYW0gZGVzdGluYXRpb24gVGhlIHRhcmdldCBkZXN0aW5hdGlvblxuICpcbiAqIFNlZSBhbHNvOiB7QGxpbmsgZGFnRWRnZXNDaGlsZHJlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhZ0VkZ2VzUGFyZW50czxUPiggZWRnZXM6IFJhd0RhZ0VkZ2U8VD5bXSwgZGVzdGluYXRpb246IFQgKTogVFtdIHtcbiAgcmV0dXJuIGVkZ2VzXG4gICAgLmZpbHRlciggKCBlZGdlICkgPT4gZWRnZVsgMSBdID09PSBkZXN0aW5hdGlvbiApXG4gICAgLm1hcCggKCBlZGdlICkgPT4gZWRnZVsgMCBdICk7XG59XG4iLCJpbXBvcnQgeyBkYWdFZGdlc1BhcmVudHMgfSBmcm9tICcuL2RhZ0VkZ2VzUGFyZW50cyc7XG5pbXBvcnQgeyB0cmF2ZXJzZSB9IGZyb20gJy4uL2FsZ29yaXRobS90cmF2ZXJzZSc7XG5pbXBvcnQgdHlwZSB7IFJhd0RhZ0VkZ2UgfSBmcm9tICcuL1Jhd0RhZ0VkZ2UnO1xuXG4vKipcbiAqIFJldHVybiBhbGwgYW5jZXN0b3Igc291cmNlcyB0aGUgc3BlY2lmaWVkIGRlc3RpbmF0aW9uIGhhcy5cbiAqIEBwYXJhbSBlZGdlcyBBbiBhcnJheSBvZiBkYWcgZWRnZVxuICogQHBhcmFtIGRlc3RpbmF0aW9uIFRoZSB0YXJnZXQgZGVzdGluYXRpb25cbiAqXG4gKiBTZWUgYWxzbzoge0BsaW5rIGRhZ0VkZ2VzQ2hpbGRyZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYWdFZGdlc0FuY2VzdG9yczxUPiggZWRnZXM6IFJhd0RhZ0VkZ2U8VD5bXSwgZGVzdGluYXRpb246IFQgKTogVFtdIHtcbiAgY29uc3QgYW5jZXN0b3JzID0gbmV3IFNldDxUPigpO1xuXG4gIHRyYXZlcnNlKCBkZXN0aW5hdGlvbiwgKCBub2RlICkgPT4ge1xuICAgIGNvbnN0IHBhcmVudHMgPSBkYWdFZGdlc1BhcmVudHMoIGVkZ2VzLCBub2RlICk7XG4gICAgcGFyZW50cy5tYXAoICggcGFyZW50ICkgPT4gYW5jZXN0b3JzLmFkZCggcGFyZW50ICkgKTtcbiAgICByZXR1cm4gcGFyZW50cztcbiAgfSApO1xuXG4gIHJldHVybiBBcnJheS5mcm9tKCBhbmNlc3RvcnMgKTtcbn1cbiIsImltcG9ydCB7IFJhd0RhZ0VkZ2UgfSBmcm9tICcuL1Jhd0RhZ0VkZ2UnO1xuXG4vKipcbiAqIFJldHVybiBhbGwgY2hpbGRyZW4gZGVzdGluYXRpb25zIHRoZSBzcGVjaWZpZWQgc291cmNlIGhhcy5cbiAqIEBwYXJhbSBlZGdlcyBBbiBhcnJheSBvZiBkYWcgZWRnZVxuICogQHBhcmFtIHNvdXJjZSBUaGUgdGFyZ2V0IHNvdXJjZVxuICpcbiAqIFNlZSBhbHNvOiB7QGxpbmsgZGFnRWRnZXNEZXNjZW5kYW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFnRWRnZXNDaGlsZHJlbjxUPiggZWRnZXM6IFJhd0RhZ0VkZ2U8VD5bXSwgc291cmNlOiBUICk6IFRbXSB7XG4gIHJldHVybiBlZGdlc1xuICAgIC5maWx0ZXIoICggZWRnZSApID0+IGVkZ2VbIDAgXSA9PT0gc291cmNlIClcbiAgICAubWFwKCAoIGVkZ2UgKSA9PiBlZGdlWyAxIF0gKTtcbn1cbiIsImltcG9ydCB7IGRhZ0VkZ2VzQ2hpbGRyZW4gfSBmcm9tICcuL2RhZ0VkZ2VzQ2hpbGRyZW4nO1xuaW1wb3J0IHsgdHJhdmVyc2UgfSBmcm9tICcuLi9hbGdvcml0aG0vdHJhdmVyc2UnO1xuaW1wb3J0IHR5cGUgeyBSYXdEYWdFZGdlIH0gZnJvbSAnLi9SYXdEYWdFZGdlJztcblxuLyoqXG4gKiBSZXR1cm4gYWxsIGRlc2NlbmRhbnQgZGVzdGluYXRpb25zIHRoZSBzcGVjaWZpZWQgc291cmNlIGhhcy5cbiAqIEBwYXJhbSBlZGdlcyBBbiBhcnJheSBvZiBkYWcgZWRnZVxuICogQHBhcmFtIHNvdXJjZSBUaGUgdGFyZ2V0IHNvdXJjZVxuICpcbiAqIFNlZSBhbHNvOiB7QGxpbmsgZGFnRWRnZXNDaGlsZHJlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhZ0VkZ2VzRGVzY2VuZGFudHM8VD4oIGVkZ2VzOiBSYXdEYWdFZGdlPFQ+W10sIHNvdXJjZTogVCApOiBUW10ge1xuICBjb25zdCBkZXNjZW5kYW50cyA9IG5ldyBTZXQ8VD4oKTtcblxuICB0cmF2ZXJzZSggc291cmNlLCAoIG5vZGUgKSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBkYWdFZGdlc0NoaWxkcmVuKCBlZGdlcywgbm9kZSApO1xuICAgIGNoaWxkcmVuLm1hcCggKCBjaGlsZCApID0+IGRlc2NlbmRhbnRzLmFkZCggY2hpbGQgKSApO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfSApO1xuXG4gIHJldHVybiBBcnJheS5mcm9tKCBkZXNjZW5kYW50cyApO1xufVxuIiwiaW1wb3J0IHsgUmF3RGFnRWRnZSB9IGZyb20gJy4vUmF3RGFnRWRnZSc7XG5cbi8qKlxuICogUmV0dXJuIGZpcnN0IHBhcmVudCBzb3VyY2UgdGhlIHNwZWNpZmllZCBkZXN0aW5hdGlvbiBoYXMuXG4gKiBJZiBpdCBjYW4ndCBmaW5kIGEgcGFyZW50LCBpdCB3aWxsIHJldHVybiBgbnVsbGAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gZWRnZXMgQW4gYXJyYXkgb2YgZGFnIGVkZ2VcbiAqIEBwYXJhbSBkZXN0aW5hdGlvbiBUaGUgdGFyZ2V0IGRlc3RpbmF0aW9uXG4gKlxuICogU2VlIGFsc286IHtAbGluayBkYWdFZGdlc1BhcmVudHN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYWdFZGdlc1BhcmVudDxUPiggZWRnZXM6IFJhd0RhZ0VkZ2U8VD5bXSwgZGVzdGluYXRpb246IFQgKTogVCB8IG51bGwge1xuICByZXR1cm4gZWRnZXMuZmluZCggKCBlZGdlICkgPT4gZWRnZVsgMSBdID09PSBkZXN0aW5hdGlvbiApPy5bIDAgXSA/PyBudWxsO1xufVxuIiwiaW1wb3J0IHsgUmF3RGFnRWRnZSB9IGZyb20gJy4vUmF3RGFnRWRnZSc7XG5pbXBvcnQgeyBkYWdFZGdlc1BhcmVudCB9IGZyb20gJy4vZGFnRWRnZXNQYXJlbnQnO1xuXG4vKipcbiAqIFJlc29sdmUgZGFnIGRlcGVuZGVuY3kgcmVsYXRpb25zaGlwIGFuZCBnaXZlIHlvdSBhIGNvcnJlY3Qgb3JkZXIuXG4gKlxuICogQHBhcmFtIGVkZ2VzIEFuIGFycmF5IG9mIGRhZyBlZGdlc1xuICogQHBhcmFtIG5vZGVzIEFuIGFycmF5IG9mIGRhZyBub2Rlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGFnRWRnZXNSZXNvbHZlPFQ+KCBlZGdlczogUmF3RGFnRWRnZTxUPltdLCBub2RlczogVFtdICk6IFRbXSB7XG4gIGNvbnN0IG9yZGVyOiBUW10gPSBbXTtcblxuICBjb25zdCBub2RlU2V0ID0gbmV3IFNldCggbm9kZXMgKTtcbiAgbGV0IHRlbXBFZGdlcyA9IGVkZ2VzLmNvbmNhdCgpO1xuXG4gIHdoaWxlICggdGVtcEVkZ2VzLmxlbmd0aCA+IDAgKSB7XG4gICAgbm9kZVNldC5mb3JFYWNoKCAoIG5vZGUgKSA9PiB7XG4gICAgICAvLyBpcyB0aGlzIGFuIGVudHJ5cG9pbnQ/XG4gICAgICBjb25zdCBoYXNQYXJlbnRzID0gZGFnRWRnZXNQYXJlbnQoIHRlbXBFZGdlcywgbm9kZSApICE9IG51bGw7XG5cbiAgICAgIGlmICggIWhhc1BhcmVudHMgKSB7XG4gICAgICAgIG5vZGVTZXQuZGVsZXRlKCBub2RlICk7XG4gICAgICAgIG9yZGVyLnB1c2goIG5vZGUgKTtcblxuICAgICAgICAvLyBkZWxldGUgdGhlIHN0cnVjdHVyZSBvZiB0ZW1wRWRnZXMgZnJvbSBlbnRyeXBvaW50IHNpZGVcbiAgICAgICAgdGVtcEVkZ2VzID0gdGVtcEVkZ2VzLmZpbHRlciggKCBbIHNyYyBdICkgPT4gKCBzcmMgIT09IG5vZGUgKSApO1xuICAgICAgfVxuICAgIH0gKTtcbiAgfVxuXG4gIHJldHVybiBvcmRlci5jb25jYXQoIEFycmF5LmZyb20oIG5vZGVTZXQgKSApO1xuICAvLyAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl4gdGVybWluYXRvciBub2Rlc1xufVxuIiwiLy8geW9pbmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvdGlueS1zZGYgKEJTRCAyLUNsYXVzZSlcbi8vIGltcGxlbWVudHMgaHR0cDovL3Blb3BsZS5jcy51Y2hpY2Fnby5lZHUvfnBmZi9wYXBlcnMvZHQucGRmXG5cbi8qKlxuICogQ29tcHV0ZSBhIG9uZSBkaW1lbnNpb25hbCBlZHQgZnJvbSB0aGUgc291cmNlIGRhdGEuXG4gKiBSZXR1cm5pbmcgZGlzdGFuY2Ugd2lsbCBiZSBzcXVhcmVkLlxuICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpbnRlcm5hbGx5IGluIHtAbGluayBlZHQyZH0uXG4gKlxuICogQHBhcmFtIGRhdGEgRGF0YSBvZiB0aGUgc291cmNlXG4gKiBAcGFyYW0gb2Zmc2V0IE9mZnNldCBvZiB0aGUgc291cmNlIGZyb20gYmVnaW5uaW5nXG4gKiBAcGFyYW0gc3RyaWRlIFN0cmlkZSBvZiB0aGUgc291cmNlXG4gKiBAcGFyYW0gbGVuZ3RoIExlbmd0aCBvZiB0aGUgc291cmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZHQxZChcbiAgZGF0YTogRmxvYXQzMkFycmF5LFxuICBvZmZzZXQ6IG51bWJlcixcbiAgc3RyaWRlOiBudW1iZXIsXG4gIGxlbmd0aDogbnVtYmVyXG4pOiB2b2lkIHtcbiAgLy8gaW5kZXggb2YgcmlnaHRtb3N0IHBhcmFib2xhIGluIGxvd2VyIGVudmVsb3BlXG4gIGxldCBrID0gMDtcblxuICAvLyBsb2NhdGlvbnMgb2YgcGFyYWJvbGFzIGluIGxvd2VyIGVudmVsb3BlXG4gIGNvbnN0IHYgPSBuZXcgRmxvYXQzMkFycmF5KCBsZW5ndGggKTtcbiAgdlsgMCBdID0gMC4wO1xuXG4gIC8vIGxvY2F0aW9ucyBvZiBib3VuZGFyaWVzIGJldHdlZW4gcGFyYWJvbGFzXG4gIGNvbnN0IHogPSBuZXcgRmxvYXQzMkFycmF5KCBsZW5ndGggKyAxICk7XG4gIHpbIDAgXSA9IC1JbmZpbml0eTtcbiAgelsgMSBdID0gSW5maW5pdHk7XG5cbiAgLy8gY3JlYXRlIGEgc3RyYWlnaHQgYXJyYXkgb2YgaW5wdXQgZGF0YVxuICBjb25zdCBmID0gbmV3IEZsb2F0MzJBcnJheSggbGVuZ3RoICk7XG4gIGZvciAoIGxldCBxID0gMDsgcSA8IGxlbmd0aDsgcSArKyApIHtcbiAgICBmWyBxIF0gPSBkYXRhWyBvZmZzZXQgKyBxICogc3RyaWRlIF07XG4gIH1cblxuICAvLyBjb21wdXRlIGxvd2VyIGVudmVsb3BlXG4gIGZvciAoIGxldCBxID0gMTsgcSA8IGxlbmd0aDsgcSArKyApIHtcbiAgICBsZXQgcyA9IDAuMDtcblxuICAgIHdoaWxlICggMCA8PSBrICkge1xuICAgICAgcyA9ICggZlsgcSBdICsgcSAqIHEgLSBmWyB2WyBrIF0gXSAtIHZbIGsgXSAqIHZbIGsgXSApIC8gKCAyLjAgKiBxIC0gMi4wICogdlsgayBdICk7XG4gICAgICBpZiAoIHMgPD0gelsgayBdICkge1xuICAgICAgICBrIC0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgayArKztcbiAgICB2WyBrIF0gPSBxO1xuICAgIHpbIGsgXSA9IHM7XG4gICAgelsgayArIDEgXSA9IEluZmluaXR5O1xuICB9XG5cbiAgayA9IDA7XG5cbiAgLy8gZmlsbCBpbiB2YWx1ZXMgb2YgZGlzdGFuY2UgdHJhbnNmb3JtXG4gIGZvciAoIGxldCBxID0gMDsgcSA8IGxlbmd0aDsgcSArKyApIHtcbiAgICB3aGlsZSAoIHpbIGsgKyAxIF0gPCBxICkgeyBrICsrOyB9XG4gICAgY29uc3QgcVN1YlZLID0gcSAtIHZbIGsgXTtcbiAgICBkYXRhWyBvZmZzZXQgKyBxICogc3RyaWRlIF0gPSBmWyB2WyBrIF0gXSArIHFTdWJWSyAqIHFTdWJWSztcbiAgfVxufVxuXG4vKipcbiAqIENvbXB1dGUgYSB0d28gZGltZW5zaW9uYWwgZWR0IGZyb20gdGhlIHNvdXJjZSBkYXRhLlxuICogUmV0dXJuaW5nIGRpc3RhbmNlIHdpbGwgYmUgc3F1YXJlZC5cbiAqXG4gKiBAcGFyYW0gZGF0YSBEYXRhIG9mIHRoZSBzb3VyY2UuXG4gKiBAcGFyYW0gd2lkdGggV2lkdGggb2YgdGhlIHNvdXJjZS5cbiAqIEBwYXJhbSBoZWlnaHQgSGVpZ2h0IG9mIHRoZSBzb3VyY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZHQyZChcbiAgZGF0YTogRmxvYXQzMkFycmF5LFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIGZvciAoIGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4ICsrICkge1xuICAgIGVkdDFkKCBkYXRhLCB4LCB3aWR0aCwgaGVpZ2h0ICk7XG4gIH1cblxuICBmb3IgKCBsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkgKysgKSB7XG4gICAgZWR0MWQoIGRhdGEsIHkgKiB3aWR0aCwgMSwgd2lkdGggKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgbGVycCB9IGZyb20gJy4uL21hdGgvdXRpbHMnO1xuXG4vKipcbiAqIERvIGV4cCBzbW9vdGhpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIEV4cFNtb290aCB7XG4gIHB1YmxpYyBmYWN0b3IgPSAxMC4wO1xuICBwdWJsaWMgdGFyZ2V0ID0gMC4wO1xuICBwdWJsaWMgdmFsdWUgPSAwLjA7XG5cbiAgcHVibGljIHVwZGF0ZSggZGVsdGFUaW1lOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgICB0aGlzLnZhbHVlID0gbGVycCggdGhpcy50YXJnZXQsIHRoaXMudmFsdWUsIE1hdGguZXhwKCAtdGhpcy5mYWN0b3IgKiBkZWx0YVRpbWUgKSApO1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgUG9vbDxUPiB7XG4gIHB1YmxpYyBhcnJheTogVFtdO1xuXG4gIHB1YmxpYyBpbmRleCA9IDA7XG5cbiAgcHVibGljIGdldCBjdXJyZW50KCk6IFQge1xuICAgIHJldHVybiB0aGlzLmFycmF5WyB0aGlzLmluZGV4IF07XG4gIH1cblxuICBwdWJsaWMgY29uc3RydWN0b3IoIGFycmF5OiBUW10gKSB7XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xuICB9XG5cbiAgcHVibGljIG5leHQoKTogVCB7XG4gICAgdGhpcy5pbmRleCA9ICggdGhpcy5pbmRleCArIDEgKSAlIHRoaXMuYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBvb2wgfSBmcm9tICcuLi9Qb29sL1Bvb2wnO1xuXG5leHBvcnQgY2xhc3MgR1BVVGltZXIge1xuICBwdWJsaWMgcXVlcmllczogUG9vbDxXZWJHTFF1ZXJ5PjtcbiAgcHVibGljIHN0YWNrOiBQcm9taXNlPG51bWJlcj5bXTtcbiAgcHVibGljIGV4dDogYW55O1xuICBwdWJsaWMgcmVhZG9ubHkgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG5cbiAgcHJpdmF0ZSBfX2xvb3BUYXNrczogU2V0PCgpID0+IHZvaWQ+O1xuXG4gIHB1YmxpYyBzdGF0aWMgaXNTdXBwb3J0ZWQoIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBuZXcgU2V0KCBnbC5nZXRTdXBwb3J0ZWRFeHRlbnNpb25zKCkgKS5oYXMoICdFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyJyApO1xuICB9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCApIHtcbiAgICB0aGlzLmdsID0gZ2w7XG5cbiAgICBjb25zdCBxdWVyaWVzID0gbmV3IEFycmF5KCAxMDI0ICkuZmlsbCggMSApLm1hcCggKCkgPT4gZ2wuY3JlYXRlUXVlcnkoKSEgKTtcbiAgICB0aGlzLnF1ZXJpZXMgPSBuZXcgUG9vbCggcXVlcmllcyApO1xuXG4gICAgdGhpcy5zdGFjayA9IFtdO1xuXG4gICAgdGhpcy5leHQgPSBnbC5nZXRFeHRlbnNpb24oICdFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyJyApO1xuXG4gICAgdGhpcy5fX2xvb3BUYXNrcyA9IG5ldyBTZXQoKTtcblxuICAgIC8vIGxvb3BcbiAgICBjb25zdCB1cGRhdGUgPSAoKTogdm9pZCA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCB1cGRhdGUgKTtcbiAgICB9O1xuICAgIHVwZGF0ZSgpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBBcnJheS5mcm9tKCB0aGlzLl9fbG9vcFRhc2tzICkuZm9yRWFjaCggKCB0YXNrICkgPT4gdGFzaygpICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbWVhc3VyZSggZnVuYzogKCkgPT4gdm9pZCApOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cbiAgICBpZiAoIHRoaXMuc3RhY2subGVuZ3RoICE9PSAwICkge1xuICAgICAgZ2wuZW5kUXVlcnkoIHRoaXMuZXh0LlRJTUVfRUxBUFNFRF9FWFQgKTtcbiAgICAgIGNvbnN0IHByb21pc2VGaW5pc2hpbmdQcmV2ID0gdGhpcy5jaGVjayggdGhpcy5xdWVyaWVzLmN1cnJlbnQgKTtcblxuICAgICAgdGhpcy5zdGFjayA9IHRoaXMuc3RhY2subWFwKCBhc3luYyAoIHByb21pc2VBY2N1bSApID0+IHtcbiAgICAgICAgcmV0dXJuICggYXdhaXQgcHJvbWlzZUFjY3VtICkgKyAoIGF3YWl0IHByb21pc2VGaW5pc2hpbmdQcmV2ICk7XG4gICAgICB9ICk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFjay5wdXNoKCBQcm9taXNlLnJlc29sdmUoIDAuMCApICk7XG5cbiAgICBnbC5iZWdpblF1ZXJ5KCB0aGlzLmV4dC5USU1FX0VMQVBTRURfRVhULCB0aGlzLnF1ZXJpZXMubmV4dCgpICk7XG5cbiAgICBmdW5jKCk7XG5cbiAgICBnbC5lbmRRdWVyeSggdGhpcy5leHQuVElNRV9FTEFQU0VEX0VYVCApO1xuXG4gICAgY29uc3QgcHJvbWlzZUFjY3VtID0gdGhpcy5zdGFjay5wb3AoKSE7XG4gICAgY29uc3QgcHJvbWlzZVRoaXMgPSB0aGlzLmNoZWNrKCB0aGlzLnF1ZXJpZXMuY3VycmVudCApO1xuXG4gICAgaWYgKCB0aGlzLnN0YWNrLmxlbmd0aCAhPT0gMCApIHtcbiAgICAgIHRoaXMuc3RhY2sgPSB0aGlzLnN0YWNrLm1hcCggYXN5bmMgKCBwcm9taXNlQWNjdW0gKSA9PiB7XG4gICAgICAgIHJldHVybiAoIGF3YWl0IHByb21pc2VBY2N1bSApICsgKCBhd2FpdCBwcm9taXNlVGhpcyApO1xuICAgICAgfSApO1xuXG4gICAgICBnbC5iZWdpblF1ZXJ5KCB0aGlzLmV4dC5USU1FX0VMQVBTRURfRVhULCB0aGlzLnF1ZXJpZXMubmV4dCgpICk7XG4gICAgfVxuXG4gICAgcmV0dXJuICggYXdhaXQgcHJvbWlzZUFjY3VtICkgKyAoIGF3YWl0IHByb21pc2VUaGlzICk7XG4gIH1cblxuICBwdWJsaWMgY2hlY2soIHF1ZXJ5OiBXZWJHTFF1ZXJ5ICk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgeyBnbCB9ID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlICkgPT4ge1xuICAgICAgY29uc3QgdGFzayA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSBnbC5nZXRRdWVyeVBhcmFtZXRlciggcXVlcnksIGdsLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUgKTtcblxuICAgICAgICBpZiAoIGlzQXZhaWxhYmxlICkge1xuICAgICAgICAgIHRoaXMuX19sb29wVGFza3MuZGVsZXRlKCB0YXNrICk7XG4gICAgICAgICAgcmVzb2x2ZSggZ2wuZ2V0UXVlcnlQYXJhbWV0ZXIoIHF1ZXJ5LCBnbC5RVUVSWV9SRVNVTFQgKSAqIDAuMDAxICogMC4wMDEgKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5fX2xvb3BUYXNrcy5hZGQoIHRhc2sgKTtcbiAgICB9ICk7XG4gIH1cbn1cbiIsIi8qKlxuICogVXNlZnVsIGZvciB0YXAgdGVtcG9cbiAqIFNlZSBhbHNvOiB7QGxpbmsgSGlzdG9yeU1lYW5DYWxjdWxhdG9yfVxuICovXG5leHBvcnQgY2xhc3MgSGlzdG9yeU1lYW5DYWxjdWxhdG9yIHtcbiAgcHJpdmF0ZSBfX3JlY2FsY0ZvckVhY2ggPSAwO1xuICBwcml2YXRlIF9fY291bnRVbnRpbFJlY2FsYyA9IDA7XG4gIHByaXZhdGUgX19oaXN0b3J5OiBudW1iZXJbXSA9IFtdO1xuICBwcml2YXRlIF9faW5kZXggPSAwO1xuICBwcml2YXRlIF9fbGVuZ3RoOiBudW1iZXI7XG4gIHByaXZhdGUgX19jb3VudCA9IDA7XG4gIHByaXZhdGUgX19jYWNoZSA9IDA7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsZW5ndGg6IG51bWJlciApIHtcbiAgICB0aGlzLl9fbGVuZ3RoID0gbGVuZ3RoO1xuICAgIHRoaXMuX19yZWNhbGNGb3JFYWNoID0gbGVuZ3RoO1xuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcbiAgICAgIHRoaXMuX19oaXN0b3J5WyBpIF0gPSAwO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWVhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4oIHRoaXMuX19jb3VudCwgdGhpcy5fX2xlbmd0aCApO1xuICAgIHJldHVybiBjb3VudCA9PT0gMCA/IDAuMCA6IHRoaXMuX19jYWNoZSAvIGNvdW50O1xuICB9XG5cbiAgcHVibGljIGdldCByZWNhbGNGb3JFYWNoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX19yZWNhbGNGb3JFYWNoO1xuICB9XG5cbiAgcHVibGljIHNldCByZWNhbGNGb3JFYWNoKCB2YWx1ZTogbnVtYmVyICkge1xuICAgIGNvbnN0IGRlbHRhID0gdmFsdWUgLSB0aGlzLl9fcmVjYWxjRm9yRWFjaDtcbiAgICB0aGlzLl9fcmVjYWxjRm9yRWFjaCA9IHZhbHVlO1xuICAgIHRoaXMuX19jb3VudFVudGlsUmVjYWxjID0gTWF0aC5tYXgoIDAsIHRoaXMuX19jb3VudFVudGlsUmVjYWxjICsgZGVsdGEgKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLl9faW5kZXggPSAwO1xuICAgIHRoaXMuX19jb3VudCA9IDA7XG4gICAgdGhpcy5fX2NhY2hlID0gMDtcbiAgICB0aGlzLl9fY291bnRVbnRpbFJlY2FsYyA9IDA7XG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fX2xlbmd0aDsgaSArKyApIHtcbiAgICAgIHRoaXMuX19oaXN0b3J5WyBpIF0gPSAwO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwdXNoKCB2YWx1ZTogbnVtYmVyICk6IHZvaWQge1xuICAgIGNvbnN0IHByZXYgPSB0aGlzLl9faGlzdG9yeVsgdGhpcy5fX2luZGV4IF07XG4gICAgdGhpcy5fX2hpc3RvcnlbIHRoaXMuX19pbmRleCBdID0gdmFsdWU7XG4gICAgdGhpcy5fX2NvdW50ICsrO1xuICAgIHRoaXMuX19pbmRleCA9ICggdGhpcy5fX2luZGV4ICsgMSApICUgdGhpcy5fX2xlbmd0aDtcblxuICAgIGlmICggdGhpcy5fX2NvdW50VW50aWxSZWNhbGMgPT09IDAgKSB7XG4gICAgICB0aGlzLnJlY2FsYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fY291bnRVbnRpbFJlY2FsYyAtLTtcbiAgICAgIHRoaXMuX19jYWNoZSAtPSBwcmV2O1xuICAgICAgdGhpcy5fX2NhY2hlICs9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWNhbGMoKTogdm9pZCB7XG4gICAgdGhpcy5fX2NvdW50VW50aWxSZWNhbGMgPSB0aGlzLl9fcmVjYWxjRm9yRWFjaDtcbiAgICBjb25zdCBzdW0gPSB0aGlzLl9faGlzdG9yeVxuICAgICAgLnNsaWNlKCAwLCBNYXRoLm1pbiggdGhpcy5fX2NvdW50LCB0aGlzLl9fbGVuZ3RoICkgKVxuICAgICAgLnJlZHVjZSggKCBzdW0sIHYgKSA9PiBzdW0gKyB2LCAwICk7XG4gICAgdGhpcy5fX2NhY2hlID0gc3VtO1xuICB9XG59XG4iLCJpbXBvcnQgeyBiaW5hcnlTZWFyY2ggfSBmcm9tICcuLi9hbGdvcml0aG0vYmluYXJ5U2VhcmNoJztcblxuLyoqXG4gKiBVc2VmdWwgZm9yIGZwcyBjYWxjXG4gKiBTZWUgYWxzbzoge0BsaW5rIEhpc3RvcnlNZWFuQ2FsY3VsYXRvcn1cbiAqL1xuZXhwb3J0IGNsYXNzIEhpc3RvcnlQZXJjZW50aWxlQ2FsY3VsYXRvciB7XG4gIHByaXZhdGUgX19oaXN0b3J5OiBudW1iZXJbXSA9IFtdO1xuICBwcml2YXRlIF9fc29ydGVkOiBudW1iZXJbXSA9IFtdO1xuICBwcml2YXRlIF9faW5kZXggPSAwO1xuICBwcml2YXRlIHJlYWRvbmx5IF9fbGVuZ3RoOiBudW1iZXI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsZW5ndGg6IG51bWJlciApIHtcbiAgICB0aGlzLl9fbGVuZ3RoID0gbGVuZ3RoO1xuICB9XG5cbiAgcHVibGljIGdldCBtZWRpYW4oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wZXJjZW50aWxlKCA1MC4wICk7XG4gIH1cblxuICBwdWJsaWMgcGVyY2VudGlsZSggcGVyY2VudGlsZTogbnVtYmVyICk6IG51bWJlciB7XG4gICAgaWYgKCB0aGlzLl9faGlzdG9yeS5sZW5ndGggPT09IDAgKSB7IHJldHVybiAwLjA7IH1cbiAgICByZXR1cm4gdGhpcy5fX3NvcnRlZFsgTWF0aC5yb3VuZCggcGVyY2VudGlsZSAqIDAuMDEgKiAoIHRoaXMuX19oaXN0b3J5Lmxlbmd0aCAtIDEgKSApIF07XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5fX2luZGV4ID0gMDtcbiAgICB0aGlzLl9faGlzdG9yeSA9IFtdO1xuICAgIHRoaXMuX19zb3J0ZWQgPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyBwdXNoKCB2YWx1ZTogbnVtYmVyICk6IHZvaWQge1xuICAgIGNvbnN0IHByZXYgPSB0aGlzLl9faGlzdG9yeVsgdGhpcy5fX2luZGV4IF07XG4gICAgdGhpcy5fX2hpc3RvcnlbIHRoaXMuX19pbmRleCBdID0gdmFsdWU7XG4gICAgdGhpcy5fX2luZGV4ID0gKCB0aGlzLl9faW5kZXggKyAxICkgJSB0aGlzLl9fbGVuZ3RoO1xuXG4gICAgLy8gcmVtb3ZlIHRoZSBwcmV2IGZyb20gc29ydGVkIGFycmF5XG4gICAgaWYgKCB0aGlzLl9fc29ydGVkLmxlbmd0aCA9PT0gdGhpcy5fX2xlbmd0aCApIHtcbiAgICAgIGNvbnN0IHByZXZJbmRleCA9IGJpbmFyeVNlYXJjaCggdGhpcy5fX3NvcnRlZCwgcHJldiApO1xuICAgICAgdGhpcy5fX3NvcnRlZC5zcGxpY2UoIHByZXZJbmRleCwgMSApO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gYmluYXJ5U2VhcmNoKCB0aGlzLl9fc29ydGVkLCB2YWx1ZSApO1xuICAgIHRoaXMuX19zb3J0ZWQuc3BsaWNlKCBpbmRleCwgMCwgdmFsdWUgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSGlzdG9yeVBlcmNlbnRpbGVDYWxjdWxhdG9yIH0gZnJvbSAnLi9IaXN0b3J5UGVyY2VudGlsZUNhbGN1bGF0b3InO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIEl0J3MgYWN0dWFsbHkganVzdCBhIHNwZWNpYWwgY2FzZSBvZiB7QGxpbmsgSGlzdG9yeVBlcmNlbnRpbGVDYWxjdWxhdG9yfVxuICovXG5leHBvcnQgY2xhc3MgSGlzdG9yeU1lZGlhbkNhbGN1bGF0b3IgZXh0ZW5kcyBIaXN0b3J5UGVyY2VudGlsZUNhbGN1bGF0b3Ige1xuICBwdWJsaWMgY29uc3RydWN0b3IoIGxlbmd0aDogbnVtYmVyICkge1xuICAgIHN1cGVyKCBsZW5ndGggKTtcbiAgICBjb25zb2xlLndhcm4oICdIaXN0b3J5TWVkaWFuQ2FsY3VsYXRvcjogRGVwcmVjYXRlZC4gVXNlIEhpc3RvcnlQZXJjZW50aWxlQ2FsY3VsYXRvciBpbnN0ZWFkJyApO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgTWFwT2ZTZXQ8SywgVj4ge1xuICBwdWJsaWMgcmVhZG9ubHkgbWFwOiBNYXA8SywgU2V0PFY+PjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0KCBrZXk6IEsgKTogU2V0PFY+IHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KCBrZXkgKSA/PyBuZXcgU2V0KCk7XG4gIH1cblxuICBwdWJsaWMgYWRkKCBrZXk6IEssIHZhbHVlOiBWICk6IHZvaWQge1xuICAgIGxldCBzZXQgPSB0aGlzLm1hcC5nZXQoIGtleSApO1xuICAgIGlmICggc2V0ID09IG51bGwgKSB7XG4gICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICB0aGlzLm1hcC5zZXQoIGtleSwgc2V0ICk7XG4gICAgfVxuICAgIHNldC5hZGQoIHZhbHVlICk7XG4gIH1cbn1cbiIsIi8qKlxuICogUmV0dXJuIGEgdmVjdG9yIHdpdGggdGhlIGFic29sdXRlIG9mIGVhY2ggY29tcG9uZW50IG9mIHRoZSBnaXZlbiB2ZWN0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWNBYnM8VCBleHRlbmRzIG51bWJlcltdPiggdmVjOiBUICk6IFQge1xuICByZXR1cm4gdmVjLm1hcCggKCB2ICkgPT4gTWF0aC5hYnMoIHYgKSApIGFzIFQ7XG59XG4iLCIvKipcbiAqIFJldHVybiBhIHN1bSBvZiB2ZWN0b3JzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVjQWRkPFQgZXh0ZW5kcyBudW1iZXJbXT4oIC4uLnZlY3M6IFRbXSApOiBUIHtcbiAgaWYgKCB2ZWNzLmxlbmd0aCA8IDIgKSB7XG4gICAgcmV0dXJuIHZlY3NbIDAgXTtcbiAgfVxuXG4gIGNvbnN0IGEgPSB2ZWNzLnNoaWZ0KCkhO1xuICBjb25zdCBiID0gdmVjQWRkKCAuLi52ZWNzICk7XG5cbiAgcmV0dXJuIGEubWFwKCAoIHYsIGkgKSA9PiB2ICsgYlsgaSBdICkgYXMgVDtcbn1cbiIsIi8qKlxuICogRGl2aWRlIGEgdmVjdG9yIGJ5IGEgdmVjdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVjRGl2aWRlPFQgZXh0ZW5kcyBudW1iZXJbXT4oIHZlY0E6IFQsIHZlY0I6IFQgKTogVCB7XG4gIHJldHVybiB2ZWNBLm1hcCggKCB2LCBpICkgPT4gdiAvIHZlY0JbIGkgXSApIGFzIFQ7XG59XG4iLCIvKipcbiAqIFJldHVybiBhbiBldWNsaWRlYW4gbGVuZ3RoIG9mIGdpdmVuIHZlY3Rvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlY0xlbmd0aDxUIGV4dGVuZHMgbnVtYmVyW10+KCB2ZWM6IFQgKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguc3FydCggdmVjLnJlZHVjZSggKCBzdW0sIHYgKSA9PiBzdW0gKyB2ICogdiwgMC4wICkgKTtcbn1cbiIsIi8qKlxuICogUmV0dXJuIGFuIHNxdWFyZWQgZXVjbGlkZWFuIGxlbmd0aCBvZiBnaXZlbiB2ZWN0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWNMZW5ndGhTcTxUIGV4dGVuZHMgbnVtYmVyW10+KCB2ZWM6IFQgKTogbnVtYmVyIHtcbiAgcmV0dXJuIHZlYy5yZWR1Y2UoICggc3VtLCB2ICkgPT4gc3VtICsgdiAqIHYsIDAuMCApO1xufVxuIiwiLyoqXG4gKiBSZXR1cm4gYSBtYW5oYXR0YW4gbGVuZ3RoIG9mIGdpdmVuIHZlY3Rvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlY01hbmhhdHRhbkxlbmd0aDxUIGV4dGVuZHMgbnVtYmVyW10+KCB2ZWM6IFQgKTogbnVtYmVyIHtcbiAgcmV0dXJuIHZlYy5yZWR1Y2UoICggc3VtLCB2ICkgPT4gc3VtICsgTWF0aC5hYnMoIHYgKSwgMC4wICk7XG59XG4iLCIvKipcbiAqIFJldHVybiBhIHByb2R1Y3Qgb2YgdmVjdG9ycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlY011bHRpcGx5PFQgZXh0ZW5kcyBudW1iZXJbXT4oIC4uLnZlY3M6IFRbXSApOiBUIHtcbiAgaWYgKCB2ZWNzLmxlbmd0aCA8IDIgKSB7XG4gICAgcmV0dXJuIHZlY3NbIDAgXTtcbiAgfVxuXG4gIGNvbnN0IGEgPSB2ZWNzLnNoaWZ0KCkhO1xuICBjb25zdCBiID0gdmVjTXVsdGlwbHkoIC4uLnZlY3MgKTtcblxuICByZXR1cm4gYS5tYXAoICggdiwgaSApID0+IHYgKiBiWyBpIF0gKSBhcyBUO1xufVxuIiwiLyoqXG4gKiBOZWdhdGUgYSB2ZWN0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWNOZWc8VCBleHRlbmRzIG51bWJlcltdPiggdmVjOiBUICk6IFQge1xuICByZXR1cm4gdmVjLm1hcCggKCB2ICkgPT4gLXYgKSBhcyBUO1xufVxuIiwiLyoqXG4gKiBTY2FsZSB0aGUgZ2l2ZW4gdmVjdG9yIGJ5IGEgc2NhbGFyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVjU2NhbGU8VCBleHRlbmRzIG51bWJlcltdPiggdmVjOiBULCBzY2FsYXI6IG51bWJlciApOiBUIHtcbiAgcmV0dXJuIHZlYy5tYXAoICggdiApID0+IHYgKiBzY2FsYXIgKSBhcyBUO1xufVxuIiwiaW1wb3J0IHsgdmVjTGVuZ3RoIH0gZnJvbSAnLi92ZWNMZW5ndGgnO1xuaW1wb3J0IHsgdmVjU2NhbGUgfSBmcm9tICcuL3ZlY1NjYWxlJztcblxuLyoqXG4gKiBOb3JtYWxpemUgZ2l2ZW4gdmVjdG9yLlxuICogSWYgdGhlIGxlbmd0aCBvZiBnaXZlbiB2ZWN0b3IgaXMgMC4wLCBpdCB3aWxsIHJldHVybiBhIHplcm8gdmVjdG9yIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWNOb3JtYWxpemU8VCBleHRlbmRzIG51bWJlcltdPiggdmVjOiBUICk6IFQge1xuICBjb25zdCBsZW4gPSB2ZWNMZW5ndGgoIHZlYyApO1xuICBjb25zdCBpbnZMZW4gPSBsZW4gPT09IDAuMCA/IDAuMCA6IDEuMCAvIGxlbjtcbiAgcmV0dXJuIHZlY1NjYWxlKCB2ZWMsIGludkxlbiApO1xufVxuIiwiLyoqXG4gKiBTdWJ0cmFjdCBhIHZlY3RvciBmcm9tIGEgdmVjdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVjU3ViPFQgZXh0ZW5kcyBudW1iZXJbXT4oIHZlY0E6IFQsIHZlY0I6IFQgKTogVCB7XG4gIHJldHVybiB2ZWNBLm1hcCggKCB2LCBpICkgPT4gdiAtIHZlY0JbIGkgXSApIGFzIFQ7XG59XG4iLCJpbXBvcnQgeyB2ZWNBYnMgfSBmcm9tICcuL3ZlY0Ficyc7XG5pbXBvcnQgeyB2ZWNBZGQgfSBmcm9tICcuL3ZlY0FkZCc7XG5pbXBvcnQgeyB2ZWNEaXZpZGUgfSBmcm9tICcuL3ZlY0RpdmlkZSc7XG5pbXBvcnQgeyB2ZWNEb3QgfSBmcm9tICcuL3ZlY0RvdCc7XG5pbXBvcnQgeyB2ZWNMZW5ndGggfSBmcm9tICcuL3ZlY0xlbmd0aCc7XG5pbXBvcnQgeyB2ZWNMZW5ndGhTcSB9IGZyb20gJy4vdmVjTGVuZ3RoU3EnO1xuaW1wb3J0IHsgdmVjTWFuaGF0dGFuTGVuZ3RoIH0gZnJvbSAnLi92ZWNNYW5oYXR0YW5MZW5ndGgnO1xuaW1wb3J0IHsgdmVjTXVsdGlwbHkgfSBmcm9tICcuL3ZlY011bHRpcGx5JztcbmltcG9ydCB7IHZlY05lZyB9IGZyb20gJy4vdmVjTmVnJztcbmltcG9ydCB7IHZlY05vcm1hbGl6ZSB9IGZyb20gJy4vdmVjTm9ybWFsaXplJztcbmltcG9ydCB7IHZlY1NjYWxlIH0gZnJvbSAnLi92ZWNTY2FsZSc7XG5pbXBvcnQgeyB2ZWNTdWIgfSBmcm9tICcuL3ZlY1N1Yic7XG5cbi8qKlxuICogQSBWZWN0b3IuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWZWN0b3I8VCBleHRlbmRzIFZlY3RvcjxUPj4ge1xuICBwdWJsaWMgYWJzdHJhY3QgZWxlbWVudHM6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoaXMuXG4gICAqIGEuay5hLiBgbWFnbml0dWRlYFxuICAgKi9cbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdmVjTGVuZ3RoKCB0aGlzLmVsZW1lbnRzICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGxlbmd0aFNxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHZlY0xlbmd0aFNxKCB0aGlzLmVsZW1lbnRzICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1hbmhhdHRhbiBsZW5ndGggb2YgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgbWFuaGF0dGFuTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHZlY01hbmhhdHRhbkxlbmd0aCggdGhpcy5lbGVtZW50cyApO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbm9ybWFsaXplZCBWZWN0b3IzIG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5vcm1hbGl6ZWQoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX19uZXcoIHZlY05vcm1hbGl6ZSggdGhpcy5lbGVtZW50cyApICk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBidXQgbmVnYXRlZC5cbiAgICovXG4gIHB1YmxpYyBnZXQgbmVnYXRlZCgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fX25ldyggdmVjTmVnKCB0aGlzLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGJ1dCBlYWNoIGNvbXBvbmVudCBpcyB0aGUgYWJzb2x1dGUuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGFicygpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fX25ldyggdmVjQWJzKCB0aGlzLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGlzLlxuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl9fbmV3KCB0aGlzLmVsZW1lbnRzLmNvbmNhdCgpICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG9uZSBvciBtb3JlIFZlY3RvciBpbnRvIHRoaXMuXG4gICAqIEBwYXJhbSB2ZWN0b3JzIE90aGVyIFZlY3RvcnNcbiAgICovXG4gIHB1YmxpYyBhZGQoIC4uLnZlY3RvcnM6IFRbXSApOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fX25ldyggdmVjQWRkKCB0aGlzLmVsZW1lbnRzLCAuLi52ZWN0b3JzLm1hcCggKCB2ICkgPT4gdi5lbGVtZW50cyApICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzdHJhY3QgdGhpcyBmcm9tIGFub3RoZXIgVmVjdG9yLlxuICAgKiBAcGFyYW0gdiBBbm90aGVyIHZlY3RvclxuICAgKi9cbiAgcHVibGljIHN1YiggdmVjdG9yOiBUICk6IFQge1xuICAgIHJldHVybiB0aGlzLl9fbmV3KCB2ZWNTdWIoIHRoaXMuZWxlbWVudHMsIHZlY3Rvci5lbGVtZW50cyApICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgb25lIG9yIG1vcmUgVmVjdG9yIHdpdGggdGhpcy5cbiAgICogQHBhcmFtIHZlY3RvcnMgT3RoZXIgVmVjdG9yc1xuICAgKi9cbiAgcHVibGljIG11bHRpcGx5KCAuLi52ZWN0b3JzOiBUW10gKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX19uZXcoIHZlY011bHRpcGx5KCB0aGlzLmVsZW1lbnRzLCAuLi52ZWN0b3JzLm1hcCggKCB2ICkgPT4gdi5lbGVtZW50cyApICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXZpZGUgdGhpcyBmcm9tIGFub3RoZXIgVmVjdG9yLlxuICAgKiBAcGFyYW0gdmVjdG9yIEFub3RoZXIgVmVjdG9yXG4gICAqL1xuICBwdWJsaWMgZGl2aWRlKCB2ZWN0b3I6IFQgKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX19uZXcoIHZlY0RpdmlkZSggdGhpcy5lbGVtZW50cywgdmVjdG9yLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIGJ5IHNjYWxhci5cbiAgICogYS5rLmEuIGBtdWx0aXBseVNjYWxhcmBcbiAgICogQHBhcmFtIHNjYWxhciBBIHNjYWxhclxuICAgKi9cbiAgcHVibGljIHNjYWxlKCBzY2FsYXI6IG51bWJlciApOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fX25ldyggdmVjU2NhbGUoIHRoaXMuZWxlbWVudHMsIHNjYWxhciApICk7XG4gIH1cblxuICAvKipcbiAgICogRG90IHR3byBWZWN0b3JzLlxuICAgKiBAcGFyYW0gdmVjdG9yIEFub3RoZXIgdmVjdG9yXG4gICAqL1xuICBwdWJsaWMgZG90KCB2ZWN0b3I6IFQgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdmVjRG90KCB0aGlzLmVsZW1lbnRzLCB2ZWN0b3IuZWxlbWVudHMgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfX25ldyggdjogbnVtYmVyW10gKTogVDtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4uL21hdDQnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3I0IH0gZnJvbSAnLi9SYXdWZWN0b3I0JztcblxuLyoqXG4gKiBNdWx0aXBseSBhIHZlYzQgYnkgYSBtYXQ0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVjNEFwcGx5TWF0cml4NCggdjogUmF3VmVjdG9yNCwgbTogUmF3TWF0cml4NCApOiBSYXdWZWN0b3I0IHtcbiAgcmV0dXJuIFtcbiAgICBtWyAwIF0gKiB2WyAwIF0gKyBtWyA0IF0gKiB2WyAxIF0gKyBtWyA4IF0gKiB2WyAyIF0gKyBtWyAxMiBdICogdlsgMyBdLFxuICAgIG1bIDEgXSAqIHZbIDAgXSArIG1bIDUgXSAqIHZbIDEgXSArIG1bIDkgXSAqIHZbIDIgXSArIG1bIDEzIF0gKiB2WyAzIF0sXG4gICAgbVsgMiBdICogdlsgMCBdICsgbVsgNiBdICogdlsgMSBdICsgbVsgMTAgXSAqIHZbIDIgXSArIG1bIDE0IF0gKiB2WyAzIF0sXG4gICAgbVsgMyBdICogdlsgMCBdICsgbVsgNyBdICogdlsgMSBdICsgbVsgMTEgXSAqIHZbIDIgXSArIG1bIDE1IF0gKiB2WyAzIF0sXG4gIF07XG59XG4iLCJpbXBvcnQgeyB2ZWM0QXBwbHlNYXRyaXg0IH0gZnJvbSAnLi4vdmVjNC92ZWM0QXBwbHlNYXRyaXg0JztcbmltcG9ydCB7IHZlY1NjYWxlIH0gZnJvbSAnLi4vdmVjL3ZlY1NjYWxlJztcbmltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4uL21hdDQvUmF3TWF0cml4NCc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEFwcGx5IGEgdmVjMyAod2l0aCBhbiBpbXBsaWNpdCAxIGluIHRoZSA0dGggZGltZW5zaW9uKSBhIG1hdDQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWMzQXBwbHlNYXRyaXg0KCB2OiBSYXdWZWN0b3IzLCBtOiBSYXdNYXRyaXg0ICk6IFJhd1ZlY3RvcjMge1xuICBjb25zdCB2ZWM0ID0gdmVjNEFwcGx5TWF0cml4NCggWyAuLi52LCAxIF0sIG0gKTtcbiAgY29uc3QgeHl6OiBSYXdWZWN0b3IzID0gWyB2ZWM0WyAwIF0sIHZlYzRbIDEgXSwgdmVjNFsgMiBdIF07XG4gIGNvbnN0IHcgPSB2ZWM0WyAzIF07XG4gIHJldHVybiB2ZWNTY2FsZSggeHl6LCAxLjAgLyB3ICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd1F1YXRlcm5pb24gfSBmcm9tICcuL1Jhd1F1YXRlcm5pb24nO1xuXG4vKipcbiAqIFJldHVybiBhbiBpbnZlcnNlIG9mIGEgcXVhdGVybmlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXRJbnZlcnNlKCBxdWF0OiBSYXdRdWF0ZXJuaW9uICk6IFJhd1F1YXRlcm5pb24ge1xuICByZXR1cm4gWyAtcXVhdFsgMCBdLCAtcXVhdFsgMSBdLCAtcXVhdFsgMiBdLCBxdWF0WyAzIF0gXTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4vUmF3UXVhdGVybmlvbic7XG5cbi8qKlxuICogUmV0dXJuIGEgbXVsdGlwbGljYXRpb24gcmVzdWx0IG9mIHF1YXRlcm5pb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhdE11bHRpcGx5KCAuLi5xdWF0czogUmF3UXVhdGVybmlvbltdICk6IFJhd1F1YXRlcm5pb24ge1xuICBpZiAoIHF1YXRzLmxlbmd0aCA8IDIgKSB7XG4gICAgcmV0dXJuIHF1YXRzWyAwIF07XG4gIH1cblxuICBjb25zdCBhID0gcXVhdHMuc2hpZnQoKSE7XG4gIGNvbnN0IGIgPSBxdWF0TXVsdGlwbHkoIC4uLnF1YXRzICk7XG5cbiAgcmV0dXJuIFtcbiAgICBhWyAzIF0gKiBiWyAwIF0gKyBhWyAwIF0gKiBiWyAzIF0gKyBhWyAxIF0gKiBiWyAyIF0gLSBhWyAyIF0gKiBiWyAxIF0sXG4gICAgYVsgMyBdICogYlsgMSBdIC0gYVsgMCBdICogYlsgMiBdICsgYVsgMSBdICogYlsgMyBdICsgYVsgMiBdICogYlsgMCBdLFxuICAgIGFbIDMgXSAqIGJbIDIgXSArIGFbIDAgXSAqIGJbIDEgXSAtIGFbIDEgXSAqIGJbIDAgXSArIGFbIDIgXSAqIGJbIDMgXSxcbiAgICBhWyAzIF0gKiBiWyAzIF0gLSBhWyAwIF0gKiBiWyAwIF0gLSBhWyAxIF0gKiBiWyAxIF0gLSBhWyAyIF0gKiBiWyAyIF0sXG4gIF07XG59XG4iLCJpbXBvcnQgeyBxdWF0SW52ZXJzZSB9IGZyb20gJy4uL3F1YXQvcXVhdEludmVyc2UnO1xuaW1wb3J0IHsgcXVhdE11bHRpcGx5IH0gZnJvbSAnLi4vcXVhdC9xdWF0TXVsdGlwbHknO1xuaW1wb3J0IHR5cGUgeyBSYXdRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vcXVhdC9SYXdRdWF0ZXJuaW9uJztcbmltcG9ydCB0eXBlIHsgUmF3VmVjdG9yMyB9IGZyb20gJy4vUmF3VmVjdG9yMyc7XG5cbi8qKlxuICogQXBwbHkgYSB2ZWMzICh3aXRoIGFuIGltcGxpY2l0IDEgaW4gdGhlIDR0aCBkaW1lbnNpb24pIGEgcXVhdGVybmlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlYzNBcHBseVF1YXRlcm5pb24oIHZlYzogUmF3VmVjdG9yMywgcXVhdDogUmF3UXVhdGVybmlvbiApOiBSYXdWZWN0b3IzIHtcbiAgY29uc3QgcDogUmF3UXVhdGVybmlvbiA9IFsgLi4udmVjLCAwLjAgXTtcbiAgY29uc3QgciA9IHF1YXRJbnZlcnNlKCBxdWF0ICk7XG4gIGNvbnN0IHJlcyA9IHF1YXRNdWx0aXBseSggcXVhdCwgcCwgciApO1xuICByZXMucG9wKCk7XG4gIHJldHVybiByZXMgYXMgdW5rbm93biBhcyBSYXdWZWN0b3IzO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBSZXR1cm4gYSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlYzNDcm9zcyggdmVjQTogUmF3VmVjdG9yMywgdmVjQjogUmF3VmVjdG9yMyApOiBSYXdWZWN0b3IzIHtcbiAgcmV0dXJuIFtcbiAgICB2ZWNBWyAxIF0gKiB2ZWNCWyAyIF0gLSB2ZWNBWyAyIF0gKiB2ZWNCWyAxIF0sXG4gICAgdmVjQVsgMiBdICogdmVjQlsgMCBdIC0gdmVjQVsgMCBdICogdmVjQlsgMiBdLFxuICAgIHZlY0FbIDAgXSAqIHZlY0JbIDEgXSAtIHZlY0FbIDEgXSAqIHZlY0JbIDAgXSxcbiAgXTtcbn1cbiIsImltcG9ydCB7IHZlYzNDcm9zcyB9IGZyb20gJy4vdmVjM0Nyb3NzJztcbmltcG9ydCB7IHZlY0RvdCB9IGZyb20gJy4uL3ZlYy92ZWNEb3QnO1xuaW1wb3J0IHsgdmVjTmVnIH0gZnJvbSAnLi4vdmVjL3ZlY05lZyc7XG5pbXBvcnQgeyB2ZWNOb3JtYWxpemUgfSBmcm9tICcuLi92ZWMvdmVjTm9ybWFsaXplJztcbmltcG9ydCB7IHZlY1NjYWxlIH0gZnJvbSAnLi4vdmVjL3ZlY1NjYWxlJztcbmltcG9ydCB7IHZlY1N1YiB9IGZyb20gJy4uL3ZlYy92ZWNTdWInO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBSZXR1cm4gYSB0YW5nZW50IHdoaWNoIGlzIG9ydGhvZ29uYWwgdG8gbm9ybWFsLlxuICogSWYgYmlub3JtYWwgaXMgc3BlY2lmaWVkLCBpdCBpcyBhbHNvIHJldHVybmVkIGFuZCBpdCdzIG9ydGhvZ29uYWwgdG8gYm90aCBub3JtYWwgYW5kIHRhbmdlbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWMzT3J0aG9Ob3JtYWxpemUoXG4gIG5vcm1hbDogUmF3VmVjdG9yMyxcbiAgdGFuZ2VudDogUmF3VmVjdG9yMyA9IFsgMC4wLCAxLjAsIDAuMCBdLFxuICBiaW5vcm1hbD86IFJhd1ZlY3RvcjMsXG4pOiB7XG4gICAgbm9ybWFsOiBSYXdWZWN0b3IzLFxuICAgIHRhbmdlbnQ6IFJhd1ZlY3RvcjMsXG4gICAgYmlub3JtYWw6IFJhd1ZlY3RvcjMsXG4gIH0ge1xuICBjb25zdCBuID0gdmVjTm9ybWFsaXplKCBub3JtYWwgKTtcbiAgbGV0IHQgPSB2ZWNOb3JtYWxpemUoIHRhbmdlbnQgKTtcblxuICBsZXQgZG90TlQgPSB2ZWNEb3QoIG4sIHQgKTtcblxuICBpZiAoIGRvdE5UID09PSAxLjAgKSB7XG4gICAgaWYgKCBNYXRoLmFicyggblsgMSBdICkgPiBNYXRoLmFicyggblsgMiBdICkgKSB7XG4gICAgICB0ID0gWyAwLjAsIDAuMCwgMS4wIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHQgPSBbIDAuMCwgMS4wLCAwLjAgXTtcbiAgICB9XG4gICAgZG90TlQgPSB2ZWNEb3QoIG4sIHQgKTtcbiAgfVxuXG4gIHQgPSB2ZWNOb3JtYWxpemUoIHZlY1N1YiggdCwgdmVjU2NhbGUoIG4sIGRvdE5UICkgKSApO1xuXG4gIGxldCBiID0gdmVjM0Nyb3NzKCB0LCBuICk7XG4gIGlmICggYmlub3JtYWwgJiYgdmVjRG90KCBiLCBiaW5vcm1hbCApIDwgMC4wICkge1xuICAgIGIgPSB2ZWNOZWcoIGIgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbm9ybWFsOiBuLFxuICAgIHRhbmdlbnQ6IHQsXG4gICAgYmlub3JtYWw6IGIsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9NYXRyaXg0JztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuLi9xdWF0L1F1YXRlcm5pb24nO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjL1ZlY3Rvcic7XG5pbXBvcnQgeyB2ZWMzQXBwbHlNYXRyaXg0IH0gZnJvbSAnLi92ZWMzQXBwbHlNYXRyaXg0JztcbmltcG9ydCB7IHZlYzNBcHBseVF1YXRlcm5pb24gfSBmcm9tICcuL3ZlYzNBcHBseVF1YXRlcm5pb24nO1xuaW1wb3J0IHsgdmVjM0Nyb3NzIH0gZnJvbSAnLi92ZWMzQ3Jvc3MnO1xuaW1wb3J0IHsgdmVjM09ydGhvTm9ybWFsaXplIH0gZnJvbSAnLi92ZWMzT3J0aG9Ob3JtYWxpemUnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBBIFZlY3RvcjMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3IzIGV4dGVuZHMgVmVjdG9yPFZlY3RvcjM+IHtcbiAgcHVibGljIGVsZW1lbnRzOiBSYXdWZWN0b3IzO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdjogUmF3VmVjdG9yMyA9IFsgMC4wLCAwLjAsIDAuMCBdICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5lbGVtZW50cyA9IHY7XG4gIH1cblxuICAvKipcbiAgICogQW4geCBjb21wb25lbnQgb2YgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWyAwIF07XG4gIH1cblxuICBwdWJsaWMgc2V0IHgoIHg6IG51bWJlciApIHtcbiAgICB0aGlzLmVsZW1lbnRzWyAwIF0gPSB4O1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIHkgY29tcG9uZW50IG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1sgMSBdO1xuICB9XG5cbiAgcHVibGljIHNldCB5KCB5OiBudW1iZXIgKSB7XG4gICAgdGhpcy5lbGVtZW50c1sgMSBdID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiB6IGNvbXBvbmVudCBvZiB0aGlzLlxuICAgKi9cbiAgcHVibGljIGdldCB6KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbIDIgXTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgeiggejogbnVtYmVyICkge1xuICAgIHRoaXMuZWxlbWVudHNbIDIgXSA9IHo7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFZlY3RvcjMoICR7IHRoaXMueC50b0ZpeGVkKCAzICkgfSwgJHsgdGhpcy55LnRvRml4ZWQoIDMgKSB9LCAkeyB0aGlzLnoudG9GaXhlZCggMyApIH0gKWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgY3Jvc3Mgb2YgdGhpcyBhbmQgYW5vdGhlciBWZWN0b3IzLlxuICAgKiBAcGFyYW0gdmVjdG9yIEFub3RoZXIgdmVjdG9yXG4gICAqL1xuICBwdWJsaWMgY3Jvc3MoIHZlY3RvcjogVmVjdG9yMyApOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoIHZlYzNDcm9zcyggdGhpcy5lbGVtZW50cywgdmVjdG9yLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGUgdGhpcyB2ZWN0b3IgdXNpbmcgYSBRdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiBBIHF1YXRlcm5pb25cbiAgICovXG4gIHB1YmxpYyBhcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb246IFF1YXRlcm5pb24gKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKCB2ZWMzQXBwbHlRdWF0ZXJuaW9uKCB0aGlzLmVsZW1lbnRzLCBxdWF0ZXJuaW9uLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGlzIHZlY3RvciAod2l0aCBhbiBpbXBsaWNpdCAxIGluIHRoZSA0dGggZGltZW5zaW9uKSBieSBtLlxuICAgKi9cbiAgcHVibGljIGFwcGx5TWF0cml4NCggbWF0cml4OiBNYXRyaXg0ICk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggdmVjM0FwcGx5TWF0cml4NCggdGhpcy5lbGVtZW50cywgbWF0cml4LmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfX25ldyggdjogUmF3VmVjdG9yMyApOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoIHYgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZWN0b3IzKCAwLjAsIDAuMCwgMC4wIClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHplcm8oKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKCBbIDAuMCwgMC4wLCAwLjAgXSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlY3RvcjMoIDEuMCwgMC4wLCAwLjAgKVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXQgcHgoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKCBbIDEuMCwgMC4wLCAwLjAgXSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlY3RvcjMoIC0xLjAsIDAuMCwgMC4wIClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG54KCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggWyAtMS4wLCAwLjAsIDAuMCBdICk7XG4gIH1cblxuICAvKipcbiAgICogVmVjdG9yMyggMC4wLCAxLjAsIDAuMCApXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldCBweSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoIFsgMC4wLCAxLjAsIDAuMCBdICk7XG4gIH1cblxuICAvKipcbiAgICogVmVjdG9yMyggMC4wLCAtMS4wLCAwLjAgKVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXQgbnkoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKCBbIDAuMCwgLTEuMCwgMC4wIF0gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZWN0b3IzKCAwLjAsIDAuMCwgMS4wIClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHB6KCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggWyAwLjAsIDAuMCwgMS4wIF0gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZWN0b3IzKCAwLjAsIDAuMCwgLTEuMCApXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldCBueigpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoIFsgMC4wLCAwLjAsIC0xLjAgXSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlY3RvcjMoIDEuMCwgMS4wLCAxLjAgKVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXQgb25lKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggWyAxLjAsIDEuMCwgMS4wIF0gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSB0YW5nZW50IHdoaWNoIGlzIG9ydGhvZ29uYWwgdG8gbm9ybWFsLlxuICAgKiBJZiBiaW5vcm1hbCBpcyBzcGVjaWZpZWQsIGl0IGlzIGFsc28gcmV0dXJuZWQgYW5kIGl0J3Mgb3J0aG9nb25hbCB0byBib3RoIG5vcm1hbCBhbmQgdGFuZ2VudC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgb3J0aG9Ob3JtYWxpemUoIG5vcm1hbDogVmVjdG9yMywgdGFuZ2VudDogVmVjdG9yMywgYmlub3JtYWw6IFZlY3RvcjMgKToge1xuICAgIG5vcm1hbDogVmVjdG9yMyxcbiAgICB0YW5nZW50OiBWZWN0b3IzLFxuICAgIGJpbm9ybWFsOiBWZWN0b3IzLFxuICB9IHtcbiAgICBjb25zdCByZXN1bHQgPSB2ZWMzT3J0aG9Ob3JtYWxpemUoIG5vcm1hbC5lbGVtZW50cywgdGFuZ2VudC5lbGVtZW50cywgYmlub3JtYWwuZWxlbWVudHMgKTtcbiAgICByZXR1cm4ge1xuICAgICAgbm9ybWFsOiBuZXcgVmVjdG9yMyggcmVzdWx0Lm5vcm1hbCApLFxuICAgICAgdGFuZ2VudDogbmV3IFZlY3RvcjMoIHJlc3VsdC50YW5nZW50ICksXG4gICAgICBiaW5vcm1hbDogbmV3IFZlY3RvcjMoIHJlc3VsdC5iaW5vcm1hbCApLFxuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3Qm94MyB9IGZyb20gJy4vUmF3Qm94Myc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIFRlc3QgaWYgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIGluIGdpdmVuIGJveCBvciBub3QuXG4gKiBAcGFyYW0gYm94IEEgYm94XG4gKiBAcGFyYW0gcG9pbnQgQSBwb2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gYm94M0NvbnRhaW5zUG9pbnQoIGJveDogUmF3Qm94MywgcG9pbnQ6IFJhd1ZlY3RvcjMgKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgYm94WyAwIF1bIDAgXSA8PSBwb2ludFsgMCBdICYmXG4gICAgYm94WyAxIF1bIDAgXSA+PSBwb2ludFsgMCBdICYmXG4gICAgYm94WyAwIF1bIDEgXSA8PSBwb2ludFsgMSBdICYmXG4gICAgYm94WyAxIF1bIDEgXSA+PSBwb2ludFsgMSBdICYmXG4gICAgYm94WyAwIF1bIDIgXSA8PSBwb2ludFsgMiBdICYmXG4gICAgYm94WyAxIF1bIDIgXSA+PSBwb2ludFsgMiBdXG4gICk7XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9WZWN0b3IzJztcbmltcG9ydCB7IGJveDNDb250YWluc1BvaW50IH0gZnJvbSAnLi9ib3gzQ29udGFpbnNQb2ludCc7XG5pbXBvcnQgdHlwZSB7IFJhd0JveDMgfSBmcm9tICcuL1Jhd0JveDMnO1xuXG4vKipcbiAqIEEgM0QgYm94LlxuICovXG5leHBvcnQgY2xhc3MgQm94MyB7XG4gIHB1YmxpYyBtaW46IFZlY3RvcjM7XG4gIHB1YmxpYyBtYXg6IFZlY3RvcjM7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtaW46IFZlY3RvcjMgPSBWZWN0b3IzLnplcm8sIG1heDogVmVjdG9yMyA9IFZlY3RvcjMuemVybyApIHtcbiAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICB0aGlzLm1heCA9IG1heDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IHtAbGluayBSYXdCb3gzfSBmb3JtLlxuICAgKi9cbiAgcHVibGljIGdldCByYXcoKTogUmF3Qm94MyB7XG4gICAgcmV0dXJuIFsgdGhpcy5taW4uZWxlbWVudHMsIHRoaXMubWF4LmVsZW1lbnRzIF07XG4gIH1cblxuICAvKipcbiAgICogVGVzdCBpZiBnaXZlbiBwb2ludCBpcyBjb250YWluZWQgaW4gdGhlIGJveCBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludCBBIHBvaW50XG4gICAqL1xuICBwdWJsaWMgY29udGFpbnNQb2ludCggcG9pbnQ6IFZlY3RvcjMgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGJveDNDb250YWluc1BvaW50KCB0aGlzLnJhdywgcG9pbnQuZWxlbWVudHMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHtAbGluayBSYXdCb3gzfSB0byBjbGFzcyBmb3JtLlxuICAgKiBAcGFyYW0gYm94IEEge0BsaW5rIFJhd0JveDN9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21SYXcoIGJveDogUmF3Qm94MyApOiBCb3gzIHtcbiAgICByZXR1cm4gbmV3IEJveDMoIG5ldyBWZWN0b3IzKCBib3hbIDAgXSApLCBuZXcgVmVjdG9yMyggYm94WyAxIF0gKSApO1xuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuL1Jhd01hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9SYXdNYXRyaXg0JztcblxuLyoqXG4gKiBXaG8gbmVlZHMgdGhpcz9cbiAqXG4gKiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IHtAbGluayBtYXQzQ3JlYXRlTm9ybWFsTWF0cml4fS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDNGcm9tTWF0NFRyYW5zcG9zZShcbiAgc291cmNlOiBSYXdNYXRyaXg0LFxuKTogUmF3TWF0cml4MyB7XG4gIHJldHVybiBbXG4gICAgc291cmNlWyAwIF0sIHNvdXJjZVsgNCBdLCBzb3VyY2VbIDggXSxcbiAgICBzb3VyY2VbIDEgXSwgc291cmNlWyA1IF0sIHNvdXJjZVsgOSBdLFxuICAgIHNvdXJjZVsgMiBdLCBzb3VyY2VbIDYgXSwgc291cmNlWyAxMCBdLFxuICBdO1xufVxuIiwiaW1wb3J0IHsgdmVjU2NhbGUgfSBmcm9tICcuLi92ZWMvdmVjU2NhbGUnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXgzIH0gZnJvbSAnLi9SYXdNYXRyaXgzJztcblxuLyoqXG4gKiBSZXR1cm4gYW4gaW52ZXJzZSBvZiBnaXZlbiBtYXQzLlxuICpcbiAqIFlvaW5rZWQgZnJvbSBUaHJlZS5qc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0M0ludmVyc2UoIG06IFJhd01hdHJpeDMgKTogUmF3TWF0cml4MyB7XG4gIGNvbnN0XG4gICAgbjExID0gbVsgMCBdLCBuMjEgPSBtWyAxIF0sIG4zMSA9IG1bIDIgXSxcbiAgICBuMTIgPSBtWyAzIF0sIG4yMiA9IG1bIDQgXSwgbjMyID0gbVsgNSBdLFxuICAgIG4xMyA9IG1bIDYgXSwgbjIzID0gbVsgNyBdLCBuMzMgPSBtWyA4IF0sXG4gICAgdDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuICAgIHQxMiA9IG4zMiAqIG4xMyAtIG4zMyAqIG4xMixcbiAgICB0MTMgPSBuMjMgKiBuMTIgLSBuMjIgKiBuMTMsXG4gICAgZGV0ID0gbjExICogdDExICsgbjIxICogdDEyICsgbjMxICogdDEzO1xuXG4gIGlmICggZGV0ID09PSAwLjAgKSB7IHJldHVybiB2ZWNTY2FsZSggbSwgMC4wICk7IH1cblxuICByZXR1cm4gdmVjU2NhbGUoIFtcbiAgICB0MTEsXG4gICAgbjMxICogbjIzIC0gbjMzICogbjIxLFxuICAgIG4zMiAqIG4yMSAtIG4zMSAqIG4yMixcbiAgICB0MTIsXG4gICAgbjMzICogbjExIC0gbjMxICogbjEzLFxuICAgIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSxcbiAgICB0MTMsXG4gICAgbjIxICogbjEzIC0gbjIzICogbjExLFxuICAgIG4yMiAqIG4xMSAtIG4yMSAqIG4xMixcbiAgXSwgMS4wIC8gZGV0ICk7XG59XG4iLCJpbXBvcnQgeyBtYXQzRnJvbU1hdDRUcmFuc3Bvc2UgfSBmcm9tICcuL21hdDNGcm9tTWF0NFRyYW5zcG9zZSc7XG5pbXBvcnQgeyBtYXQzSW52ZXJzZSB9IGZyb20gJy4vbWF0M0ludmVyc2UnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXgzIH0gZnJvbSAnLi9SYXdNYXRyaXgzJztcbmltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4uL21hdDQvUmF3TWF0cml4NCc7XG5cbi8qKlxuICogQ3JlYXRlIGEgbm9ybWFsIG1hdHJpeCBvdXQgb2YgYSBtYXRyaXg0LlxuICpcbiAqIEBwYXJhbSBtYXRyaXggQSBtYXRyaXg0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXQzQ3JlYXRlTm9ybWFsTWF0cml4KCBtOiBSYXdNYXRyaXg0ICk6IFJhd01hdHJpeDMge1xuICByZXR1cm4gbWF0M0ludmVyc2UoIG1hdDNGcm9tTWF0NFRyYW5zcG9zZSggbSApICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuL1Jhd01hdHJpeDMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0M0RldGVybWluYW50KCBtOiBSYXdNYXRyaXgzICk6IG51bWJlciB7XG4gIGNvbnN0XG4gICAgbjExID0gbVsgMCBdLCBuMjEgPSBtWyAxIF0sIG4zMSA9IG1bIDIgXSxcbiAgICBuMTIgPSBtWyAzIF0sIG4yMiA9IG1bIDQgXSwgbjMyID0gbVsgNSBdLFxuICAgIG4xMyA9IG1bIDYgXSwgbjIzID0gbVsgNyBdLCBuMzMgPSBtWyA4IF0sXG4gICAgdDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuICAgIHQxMiA9IG4zMiAqIG4xMyAtIG4zMyAqIG4xMixcbiAgICB0MTMgPSBuMjMgKiBuMTIgLSBuMjIgKiBuMTM7XG5cbiAgcmV0dXJuIG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMztcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4MyB9IGZyb20gJy4vUmF3TWF0cml4Myc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuLi9tYXQ0L1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG1hdHJpeDMgZnJvbSBtYXRyaXg0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0M0Zyb21NYXQ0KFxuICBzb3VyY2U6IFJhd01hdHJpeDQsXG4pOiBSYXdNYXRyaXgzIHtcbiAgcmV0dXJuIFtcbiAgICBzb3VyY2VbIDAgXSwgc291cmNlWyAxIF0sIHNvdXJjZVsgMiBdLFxuICAgIHNvdXJjZVsgNCBdLCBzb3VyY2VbIDUgXSwgc291cmNlWyA2IF0sXG4gICAgc291cmNlWyA4IF0sIHNvdXJjZVsgOSBdLCBzb3VyY2VbIDEwIF0sXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuL1Jhd01hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vcXVhdC9SYXdRdWF0ZXJuaW9uJztcblxuLyoqXG4gKiBDb252ZXJ0IGEgcXVhdGVybmlvbiBpbnRvIGEgbWF0cml4My5cbiAqXG4gKiBZb2lua2VkIGZyb20gVGhyZWUuanMuXG4gKlxuICogU2VlOiBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRoL01hdHJpeDQubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDNGcm9tUXVhdGVybmlvbiggcXVhdDogUmF3UXVhdGVybmlvbiApOiBSYXdNYXRyaXgzIHtcbiAgY29uc3QgeCA9IHF1YXRbIDAgXTtcbiAgY29uc3QgeSA9IHF1YXRbIDEgXTtcbiAgY29uc3QgeiA9IHF1YXRbIDIgXTtcbiAgY29uc3QgdyA9IHF1YXRbIDMgXTtcblxuICByZXR1cm4gW1xuICAgIDEuMCAtIDIuMCAqIHkgKiB5IC0gMi4wICogeiAqIHosIDIuMCAqIHggKiB5ICsgMi4wICogeiAqIHcsIDIuMCAqIHggKiB6IC0gMi4wICogeSAqIHcsXG4gICAgMi4wICogeCAqIHkgLSAyLjAgKiB6ICogdywgMS4wIC0gMi4wICogeCAqIHggLSAyLjAgKiB6ICogeiwgMi4wICogeSAqIHogKyAyLjAgKiB4ICogdyxcbiAgICAyLjAgKiB4ICogeiArIDIuMCAqIHkgKiB3LCAyLjAgKiB5ICogeiAtIDIuMCAqIHggKiB3LCAxLjAgLSAyLjAgKiB4ICogeCAtIDIuMCAqIHkgKiB5LFxuICBdO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXgzIH0gZnJvbSAnLi9SYXdNYXRyaXgzJztcblxuLyoqXG4gKiBSZXR1cm4gYSBtdWx0aXBsaWNhdGlvbiByZXN1bHQgb2YgbWF0cmljZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXQzTXVsdGlwbHkoIC4uLm1hdHM6IFJhd01hdHJpeDNbXSApOiBSYXdNYXRyaXgzIHtcbiAgaWYgKCBtYXRzLmxlbmd0aCA8IDIgKSB7XG4gICAgcmV0dXJuIG1hdHNbIDAgXTtcbiAgfVxuXG4gIGNvbnN0IGEgPSBtYXRzLnNoaWZ0KCkhO1xuICBjb25zdCBiID0gbWF0M011bHRpcGx5KCAuLi5tYXRzICk7XG4gIGNvbnN0XG4gICAgYTAwID0gYVsgMCBdLCBhMDEgPSBhWyAxIF0sIGEwMiA9IGFbIDIgXSxcbiAgICBhMTAgPSBhWyAzIF0sIGExMSA9IGFbIDQgXSwgYTEyID0gYVsgNSBdLFxuICAgIGEyMCA9IGFbIDYgXSwgYTIxID0gYVsgNyBdLCBhMjIgPSBhWyA4IF0sXG4gICAgYjAwID0gYlsgMCBdLCBiMDEgPSBiWyAxIF0sIGIwMiA9IGJbIDIgXSxcbiAgICBiMTAgPSBiWyAzIF0sIGIxMSA9IGJbIDQgXSwgYjEyID0gYlsgNSBdLFxuICAgIGIyMCA9IGJbIDYgXSwgYjIxID0gYlsgNyBdLCBiMjIgPSBiWyA4IF07XG5cbiAgcmV0dXJuIFtcbiAgICBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDIsXG4gICAgYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyLFxuICAgIGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMixcblxuICAgIGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMixcbiAgICBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTIsXG4gICAgYTAyICogYjEwICsgYTEyICogYjExICsgYTIyICogYjEyLFxuXG4gICAgYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyLFxuICAgIGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMixcbiAgICBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjIsXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuL1Jhd01hdHJpeDMnO1xuXG4vKipcbiAqIFRyYW5zcG9zZSBhIG1hdDMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXQzVHJhbnNwb3NlKFxuICBzb3VyY2U6IFJhd01hdHJpeDMsXG4pOiBSYXdNYXRyaXgzIHtcbiAgcmV0dXJuIFtcbiAgICBzb3VyY2VbIDAgXSwgc291cmNlWyAzIF0sIHNvdXJjZVsgNiBdLFxuICAgIHNvdXJjZVsgMSBdLCBzb3VyY2VbIDQgXSwgc291cmNlWyA3IF0sXG4gICAgc291cmNlWyAyIF0sIHNvdXJjZVsgNSBdLCBzb3VyY2VbIDggXSxcbiAgXTtcbn1cbiIsImltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXQ0L01hdHJpeDQnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL3F1YXQvUXVhdGVybmlvbic7XG5pbXBvcnQgeyBtYXQzQ3JlYXRlTm9ybWFsTWF0cml4IH0gZnJvbSAnLi9tYXQzQ3JlYXRlTm9ybWFsTWF0cml4JztcbmltcG9ydCB7IG1hdDNEZXRlcm1pbmFudCB9IGZyb20gJy4vbWF0M0RldGVybWluYW50JztcbmltcG9ydCB7IG1hdDNGcm9tTWF0NCB9IGZyb20gJy4vbWF0M0Zyb21NYXQ0JztcbmltcG9ydCB7IG1hdDNGcm9tUXVhdGVybmlvbiB9IGZyb20gJy4vbWF0M0Zyb21RdWF0ZXJuaW9uJztcbmltcG9ydCB7IG1hdDNJbnZlcnNlIH0gZnJvbSAnLi9tYXQzSW52ZXJzZSc7XG5pbXBvcnQgeyBtYXQzTXVsdGlwbHkgfSBmcm9tICcuL21hdDNNdWx0aXBseSc7XG5pbXBvcnQgeyBtYXQzVHJhbnNwb3NlIH0gZnJvbSAnLi9tYXQzVHJhbnNwb3NlJztcbmltcG9ydCB7IHZlY1NjYWxlIH0gZnJvbSAnLi4vdmVjL3ZlY1NjYWxlJztcbmltcG9ydCB0eXBlIHsgUmF3TWF0cml4MyB9IGZyb20gJy4vUmF3TWF0cml4Myc7XG5cbmNvbnN0IHJhd0lkZW50aXR5TWF0cml4MzogUmF3TWF0cml4MyA9IFtcbiAgMS4wLCAwLjAsIDAuMCxcbiAgMC4wLCAxLjAsIDAuMCxcbiAgMC4wLCAwLjAsIDEuMCxcbl07XG5cbi8qKlxuICogQSBNYXRyaXgzLlxuICovXG5leHBvcnQgY2xhc3MgTWF0cml4MyB7XG4gIHB1YmxpYyBlbGVtZW50czogUmF3TWF0cml4MztcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHY6IFJhd01hdHJpeDMgPSByYXdJZGVudGl0eU1hdHJpeDMgKSB7XG4gICAgdGhpcy5lbGVtZW50cyA9IHY7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCB0cmFuc3Bvc2VkLlxuICAgKi9cbiAgcHVibGljIGdldCB0cmFuc3Bvc2UoKTogTWF0cml4MyB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgzKCBtYXQzVHJhbnNwb3NlKCB0aGlzLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHMgZGV0ZXJtaW5hbnQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGRldGVybWluYW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIG1hdDNEZXRlcm1pbmFudCggdGhpcy5lbGVtZW50cyApO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0c2VsZiBidXQgaW52ZXJ0ZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGludmVyc2UoKTogTWF0cml4MyB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgzKCBtYXQzSW52ZXJzZSggdGhpcy5lbGVtZW50cyApICk7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCBtYXRyaXg0LlxuICAgKi9cbiAgcHVibGljIGdldCBtYXRyaXg0KCk6IE1hdHJpeDQge1xuICAgIHJldHVybiBNYXRyaXg0LmZyb21NYXRyaXgzKCB0aGlzICk7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBtID0gdGhpcy5lbGVtZW50cy5tYXAoICggdiApID0+IHYudG9GaXhlZCggMyApICk7XG4gICAgcmV0dXJuIGBNYXRyaXgzKCAkeyBtWyAwIF0gfSwgJHsgbVsgMyBdIH0sICR7IG1bIDYgXSB9OyAkeyBtWyAxIF0gfSwgJHsgbVsgNCBdIH0sICR7IG1bIDcgXSB9OyAkeyBtWyAyIF0gfSwgJHsgbVsgNSBdIH0sICR7IG1bIDggXSB9IClgO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogTWF0cml4MyB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgzKCB0aGlzLmVsZW1lbnRzLmNvbmNhdCgpIGFzIFJhd01hdHJpeDMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGlzIE1hdHJpeDMgYnkgb25lIG9yIG1vcmUgTWF0cml4M3MuXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHkoIC4uLm1hdHJpY2VzOiBNYXRyaXgzW10gKTogTWF0cml4MyB7XG4gICAgcmV0dXJuIE1hdHJpeDMubXVsdGlwbHkoIHRoaXMsIC4uLm1hdHJpY2VzICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgdGhpcyBNYXRyaXgzIGJ5IGEgc2NhbGFyLlxuICAgKi9cbiAgcHVibGljIHNjYWxlU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBNYXRyaXgzIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDMoIHZlY1NjYWxlKCB0aGlzLmVsZW1lbnRzLCBzY2FsYXIgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGlkZW50aXR5IE1hdHJpeDQuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldCBpZGVudGl0eSgpOiBNYXRyaXgzIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDMoIHJhd0lkZW50aXR5TWF0cml4MyApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IHR3byBvciBtb3JlIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gbWF0cmljZXMgTWF0cmljZXNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbXVsdGlwbHkoIC4uLm1hdHJpY2VzOiBNYXRyaXgzW10gKTogTWF0cml4MyB7XG4gICAgaWYgKCBtYXRyaWNlcy5sZW5ndGggPT09IDAgKSB7XG4gICAgICByZXR1cm4gTWF0cml4My5pZGVudGl0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKCBtYXQzTXVsdGlwbHkoIC4uLm1hdHJpY2VzLm1hcCggKCBtICkgPT4gbS5lbGVtZW50cyApICkgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbm9ybWFsIG1hdHJpeCBvdXQgb2YgbWF0cml4NC5cbiAgICogQHBhcmFtIG1hdHJpeDQgQSBtYXRyaXg0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZU5vcm1hbE1hdHJpeCggbWF0cml4NDogTWF0cml4NCApOiBNYXRyaXgzIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDMoIG1hdDNDcmVhdGVOb3JtYWxNYXRyaXgoIG1hdHJpeDQuZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENhc3QgYSB7QGxpbmsgTWF0cml4NH0gaW50byBhIE1hdHJpeDMuXG4gICAqIEBwYXJhbSBtYXRyaXg0IEEgbWF0cml4NFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tTWF0cml4NCggbWF0cml4NDogTWF0cml4NCApOiBNYXRyaXgzIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDMoIG1hdDNGcm9tTWF0NCggbWF0cml4NC5lbGVtZW50cyApICk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbWF0cml4IG91dCBvZiBhIHtAbGluayBRdWF0ZXJuaW9ufS5cbiAgICogQHBhcmFtIHF1YXRlcm5pb24gQSBxdWF0ZXJuaW9uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uICk6IE1hdHJpeDMge1xuICAgIHJldHVybiBuZXcgTWF0cml4MyggbWF0M0Zyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLmVsZW1lbnRzICkgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLic7XG5pbXBvcnQgdHlwZSB7IFJhd1F1YXRlcm5pb24gfSBmcm9tICcuLi9xdWF0L1Jhd1F1YXRlcm5pb24nO1xuXG4vKipcbiAqIENvbnZlcnQgYSBxdWF0ZXJuaW9uIGludG8gYSBtYXRyaXg0LlxuICpcbiAqIFlvaW5rZWQgZnJvbSBUaHJlZS5qcy5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGgvTWF0cml4NC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NEZyb21RdWF0ZXJuaW9uKCBxdWF0OiBSYXdRdWF0ZXJuaW9uICk6IFJhd01hdHJpeDQge1xuICBjb25zdCB4ID0gcXVhdFsgMCBdO1xuICBjb25zdCB5ID0gcXVhdFsgMSBdO1xuICBjb25zdCB6ID0gcXVhdFsgMiBdO1xuICBjb25zdCB3ID0gcXVhdFsgMyBdO1xuXG4gIHJldHVybiBbXG4gICAgMS4wIC0gMi4wICogeSAqIHkgLSAyLjAgKiB6ICogeiwgMi4wICogeCAqIHkgKyAyLjAgKiB6ICogdywgMi4wICogeCAqIHogLSAyLjAgKiB5ICogdywgMC4wLFxuICAgIDIuMCAqIHggKiB5IC0gMi4wICogeiAqIHcsIDEuMCAtIDIuMCAqIHggKiB4IC0gMi4wICogeiAqIHosIDIuMCAqIHkgKiB6ICsgMi4wICogeCAqIHcsIDAuMCxcbiAgICAyLjAgKiB4ICogeiArIDIuMCAqIHkgKiB3LCAyLjAgKiB5ICogeiAtIDIuMCAqIHggKiB3LCAxLjAgLSAyLjAgKiB4ICogeCAtIDIuMCAqIHkgKiB5LCAwLjAsXG4gICAgMC4wLCAwLjAsIDAuMCwgMS4wLFxuICBdO1xufVxuIiwiaW1wb3J0IHsgbWF0NEZyb21RdWF0ZXJuaW9uIH0gZnJvbSAnLi9tYXQ0RnJvbVF1YXRlcm5pb24nO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi9SYXdNYXRyaXg0JztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4uL3F1YXQvUmF3UXVhdGVybmlvbic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIENvbXBvc2UgYSBtYXRyaXggb3V0IG9mIHBvc2l0aW9uLCBzY2FsZSwgYW5kIHJvdGF0aW9uLlxuICogWW9pbmtlZCBmcm9tIFRocmVlLmpzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NENvbXBvc2UoXG4gIHBvc2l0aW9uOiBSYXdWZWN0b3IzLFxuICByb3RhdGlvbjogUmF3UXVhdGVybmlvbixcbiAgc2NhbGU6IFJhd1ZlY3RvcjMsXG4pOiBSYXdNYXRyaXg0IHtcbiAgY29uc3QgbWF0Um90ID0gbWF0NEZyb21RdWF0ZXJuaW9uKCByb3RhdGlvbiApO1xuXG4gIGNvbnN0IHN4ID0gc2NhbGVbIDAgXSwgc3kgPSBzY2FsZVsgMSBdLCBzeiA9IHNjYWxlWyAyIF07XG5cbiAgcmV0dXJuIFtcbiAgICBtYXRSb3RbIDAgXSAqIHN4LFxuICAgIG1hdFJvdFsgMSBdICogc3gsXG4gICAgbWF0Um90WyAyIF0gKiBzeCxcbiAgICAwLjAsXG5cbiAgICBtYXRSb3RbIDQgXSAqIHN5LFxuICAgIG1hdFJvdFsgNSBdICogc3ksXG4gICAgbWF0Um90WyA2IF0gKiBzeSxcbiAgICAwLjAsXG5cbiAgICBtYXRSb3RbIDggXSAqIHN6LFxuICAgIG1hdFJvdFsgOSBdICogc3osXG4gICAgbWF0Um90WyAxMCBdICogc3osXG4gICAgMC4wLFxuXG4gICAgcG9zaXRpb25bIDAgXSxcbiAgICBwb3NpdGlvblsgMSBdLFxuICAgIHBvc2l0aW9uWyAyIF0sXG4gICAgMS4wXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqIFJldHVybiBhIGRldGVybWluYW50IG9mIGdpdmVuIG1hdDQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXQ0RGV0ZXJtaW5hbnQoIG06IFJhd01hdHJpeDQgKTogbnVtYmVyIHtcbiAgY29uc3RcbiAgICBhMDAgPSBtWyAgMCBdLCBhMDEgPSBtWyAgMSBdLCBhMDIgPSBtWyAgMiBdLCBhMDMgPSBtWyAgMyBdLFxuICAgIGExMCA9IG1bICA0IF0sIGExMSA9IG1bICA1IF0sIGExMiA9IG1bICA2IF0sIGExMyA9IG1bICA3IF0sXG4gICAgYTIwID0gbVsgIDggXSwgYTIxID0gbVsgIDkgXSwgYTIyID0gbVsgMTAgXSwgYTIzID0gbVsgMTEgXSxcbiAgICBhMzAgPSBtWyAxMiBdLCBhMzEgPSBtWyAxMyBdLCBhMzIgPSBtWyAxNCBdLCBhMzMgPSBtWyAxNSBdLFxuICAgIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMCwgIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMCxcbiAgICBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTAsICBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTEsXG4gICAgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLCAgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyLFxuICAgIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMCwgIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMCxcbiAgICBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzAsICBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzEsXG4gICAgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLCAgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuLi9tYXQzL1Jhd01hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdRdWF0ZXJuaW9uIH0gZnJvbSAnLi9SYXdRdWF0ZXJuaW9uJztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIFF1YXRlcm5pb24gb3V0IG9mIGEgcm90YXRpb24gbWF0cml4LlxuICogWW9pbmtlZCBmcm9tIFRocmVlLmpzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhdEZyb21NYXRyaXgzKCBtOiBSYXdNYXRyaXgzICk6IFJhd1F1YXRlcm5pb24ge1xuICBjb25zdCBtMTEgPSBtWyAwIF0sIG0xMiA9IG1bIDMgXSwgbTEzID0gbVsgNiBdLFxuICAgIG0yMSA9IG1bIDEgXSwgbTIyID0gbVsgNCBdLCBtMjMgPSBtWyA3IF0sXG4gICAgbTMxID0gbVsgMiBdLCBtMzIgPSBtWyA1IF0sIG0zMyA9IG1bIDggXSxcbiAgICB0cmFjZSA9IG0xMSArIG0yMiArIG0zMztcblxuICBpZiAoIHRyYWNlID4gMCApIHtcbiAgICBjb25zdCBzID0gMC41IC8gTWF0aC5zcXJ0KCB0cmFjZSArIDEuMCApO1xuICAgIHJldHVybiBbXG4gICAgICAoIG0zMiAtIG0yMyApICogcyxcbiAgICAgICggbTEzIC0gbTMxICkgKiBzLFxuICAgICAgKCBtMjEgLSBtMTIgKSAqIHMsXG4gICAgICAwLjI1IC8gc1xuICAgIF07XG4gIH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG4gICAgY29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTExIC0gbTIyIC0gbTMzICk7XG4gICAgcmV0dXJuIFtcbiAgICAgIDAuMjUgKiBzLFxuICAgICAgKCBtMTIgKyBtMjEgKSAvIHMsXG4gICAgICAoIG0xMyArIG0zMSApIC8gcyxcbiAgICAgICggbTMyIC0gbTIzICkgLyBzXG4gICAgXTtcbiAgfSBlbHNlIGlmICggbTIyID4gbTMzICkge1xuICAgIGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuICAgIHJldHVybiBbXG4gICAgICAoIG0xMiArIG0yMSApIC8gcyxcbiAgICAgIDAuMjUgKiBzLFxuICAgICAgKCBtMjMgKyBtMzIgKSAvIHMsXG4gICAgICAoIG0xMyAtIG0zMSApIC8gc1xuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTMzIC0gbTExIC0gbTIyICk7XG4gICAgcmV0dXJuIFtcbiAgICAgICggbTEzICsgbTMxICkgLyBzLFxuICAgICAgKCBtMjMgKyBtMzIgKSAvIHMsXG4gICAgICAwLjI1ICogcyxcbiAgICAgICggbTIxIC0gbTEyICkgLyBzXG4gICAgXTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgbWF0M0Zyb21NYXQ0IH0gZnJvbSAnLi4vbWF0My9tYXQzRnJvbU1hdDQnO1xuaW1wb3J0IHsgcXVhdEZyb21NYXRyaXgzIH0gZnJvbSAnLi9xdWF0RnJvbU1hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9SYXdNYXRyaXg0JztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4vUmF3UXVhdGVybmlvbic7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBRdWF0ZXJuaW9uIG91dCBvZiBhIHJvdGF0aW9uIG1hdHJpeC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXRGcm9tTWF0cml4NCggbTogUmF3TWF0cml4NCApOiBSYXdRdWF0ZXJuaW9uIHtcbiAgcmV0dXJuIHF1YXRGcm9tTWF0cml4MyggbWF0M0Zyb21NYXQ0KCBtICkgKTtcbn1cbiIsImltcG9ydCB7IG1hdDREZXRlcm1pbmFudCB9IGZyb20gJy4vbWF0NERldGVybWluYW50JztcbmltcG9ydCB7IHF1YXRGcm9tTWF0cml4NCB9IGZyb20gJy4uL3F1YXQvcXVhdEZyb21NYXRyaXg0JztcbmltcG9ydCB7IHZlY0xlbmd0aCB9IGZyb20gJy4uL3ZlYy92ZWNMZW5ndGgnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi9SYXdNYXRyaXg0JztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4uL3F1YXQvUmF3UXVhdGVybmlvbic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIERlY29tcG9zZSBhIG1hdHJpeCBpbnRvIGEgcG9zaXRpb24sIGEgc2NhbGUsIGFuZCBhIHJvdGF0aW9uLlxuICogWW9pbmtlZCBmcm9tIFRocmVlLmpzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NERlY29tcG9zZSggbTogUmF3TWF0cml4NCApOiB7XG4gIHBvc2l0aW9uOiBSYXdWZWN0b3IzO1xuICBzY2FsZTogUmF3VmVjdG9yMztcbiAgcm90YXRpb246IFJhd1F1YXRlcm5pb247XG59IHtcbiAgbGV0IHN4ID0gdmVjTGVuZ3RoKCBbIG1bIDAgXSwgbVsgMSBdLCBtWyAyIF0gXSApO1xuICBjb25zdCBzeSA9IHZlY0xlbmd0aCggWyBtWyA0IF0sIG1bIDUgXSwgbVsgNiBdIF0gKTtcbiAgY29uc3Qgc3ogPSB2ZWNMZW5ndGgoIFsgbVsgOCBdLCBtWyA5IF0sIG1bIDEwIF0gXSApO1xuXG4gIC8vIGlmIGRldGVybWluYW50IGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcbiAgY29uc3QgZGV0ID0gbWF0NERldGVybWluYW50KCBtICk7XG4gIGlmICggZGV0IDwgMCApIHsgc3ggPSAtc3g7IH1cblxuICBjb25zdCBpbnZTeCA9IDEuMCAvIHN4O1xuICBjb25zdCBpbnZTeSA9IDEuMCAvIHN5O1xuICBjb25zdCBpbnZTeiA9IDEuMCAvIHN6O1xuXG4gIGNvbnN0IHJvdGF0aW9uTWF0cml4ID0gbS5jb25jYXQoKSBhcyBSYXdNYXRyaXg0O1xuXG4gIHJvdGF0aW9uTWF0cml4WyAwIF0gKj0gaW52U3g7XG4gIHJvdGF0aW9uTWF0cml4WyAxIF0gKj0gaW52U3g7XG4gIHJvdGF0aW9uTWF0cml4WyAyIF0gKj0gaW52U3g7XG5cbiAgcm90YXRpb25NYXRyaXhbIDQgXSAqPSBpbnZTeTtcbiAgcm90YXRpb25NYXRyaXhbIDUgXSAqPSBpbnZTeTtcbiAgcm90YXRpb25NYXRyaXhbIDYgXSAqPSBpbnZTeTtcblxuICByb3RhdGlvbk1hdHJpeFsgOCBdICo9IGludlN6O1xuICByb3RhdGlvbk1hdHJpeFsgOSBdICo9IGludlN6O1xuICByb3RhdGlvbk1hdHJpeFsgMTAgXSAqPSBpbnZTejtcblxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiBbIG1bIDEyIF0sIG1bIDEzIF0sIG1bIDE0IF0gXSxcbiAgICBzY2FsZTogWyBzeCwgc3ksIHN6IF0sXG4gICAgcm90YXRpb246IHF1YXRGcm9tTWF0cml4NCggcm90YXRpb25NYXRyaXggKSxcbiAgfTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4MyB9IGZyb20gJy4uL21hdDMvUmF3TWF0cml4Myc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG1hdHJpeDQgZnJvbSBtYXRyaXgzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NEZyb21NYXQzKFxuICBzb3VyY2U6IFJhd01hdHJpeDMsXG4pOiBSYXdNYXRyaXg0IHtcbiAgcmV0dXJuIFtcbiAgICBzb3VyY2VbIDAgXSwgc291cmNlWyAxIF0sIHNvdXJjZVsgMiBdLCAwLjAsXG4gICAgc291cmNlWyAzIF0sIHNvdXJjZVsgNCBdLCBzb3VyY2VbIDUgXSwgMC4wLFxuICAgIHNvdXJjZVsgNiBdLCBzb3VyY2VbIDcgXSwgc291cmNlWyA4IF0sIDAuMCxcbiAgICAwLjAsIDAuMCwgMC4wLCAxLjAsXG4gIF07XG59XG4iLCJpbXBvcnQgeyB2ZWNTY2FsZSB9IGZyb20gJy4uL3ZlYy92ZWNTY2FsZSc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqICBhbiBpbnZlcnNlIG9mIGdpdmVuIG1hdDQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXQ0SW52ZXJzZSggbTogUmF3TWF0cml4NCApOiBSYXdNYXRyaXg0IHtcbiAgY29uc3RcbiAgICBhMDAgPSBtWyAgMCBdLCBhMDEgPSBtWyAgMSBdLCBhMDIgPSBtWyAgMiBdLCBhMDMgPSBtWyAgMyBdLFxuICAgIGExMCA9IG1bICA0IF0sIGExMSA9IG1bICA1IF0sIGExMiA9IG1bICA2IF0sIGExMyA9IG1bICA3IF0sXG4gICAgYTIwID0gbVsgIDggXSwgYTIxID0gbVsgIDkgXSwgYTIyID0gbVsgMTAgXSwgYTIzID0gbVsgMTEgXSxcbiAgICBhMzAgPSBtWyAxMiBdLCBhMzEgPSBtWyAxMyBdLCBhMzIgPSBtWyAxNCBdLCBhMzMgPSBtWyAxNSBdLFxuICAgIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMCwgIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMCxcbiAgICBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTAsICBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTEsXG4gICAgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLCAgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyLFxuICAgIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMCwgIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMCxcbiAgICBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzAsICBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzEsXG4gICAgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLCAgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gIGNvbnN0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICBpZiAoIGRldCA9PT0gMC4wICkgeyByZXR1cm4gdmVjU2NhbGUoIG0sIDAuMCApOyB9XG5cbiAgcmV0dXJuIHZlY1NjYWxlKCBbXG4gICAgYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5LFxuICAgIGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSxcbiAgICBhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMsXG4gICAgYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzLFxuICAgIGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNyxcbiAgICBhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcsXG4gICAgYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxLFxuICAgIGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSxcbiAgICBhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYsXG4gICAgYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2LFxuICAgIGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCxcbiAgICBhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDAsXG4gICAgYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2LFxuICAgIGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNixcbiAgICBhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDAsXG4gICAgYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwLFxuICBdLCAxLjAgLyBkZXQgKTtcbn1cbiIsImltcG9ydCB7IHZlYzNDcm9zcyB9IGZyb20gJy4uL3ZlYzMvdmVjM0Nyb3NzJztcbmltcG9ydCB7IHZlY0FkZCB9IGZyb20gJy4uL3ZlYy92ZWNBZGQnO1xuaW1wb3J0IHsgdmVjTm9ybWFsaXplIH0gZnJvbSAnLi4vdmVjL3ZlY05vcm1hbGl6ZSc7XG5pbXBvcnQgeyB2ZWNTY2FsZSB9IGZyb20gJy4uL3ZlYy92ZWNTY2FsZSc7XG5pbXBvcnQgeyB2ZWNTdWIgfSBmcm9tICcuLi92ZWMvdmVjU3ViJztcbmltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4vUmF3TWF0cml4NCc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgXCJMb29rQXRcIiBtYXRyaXguXG4gKlxuICogU2VlIGFsc286IHtAbGluayBtYXQ0TG9va0F0SW52ZXJzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRMb29rQXQoXG4gIHBvc2l0aW9uOiBSYXdWZWN0b3IzLFxuICB0YXJnZXQ6IFJhd1ZlY3RvcjMgPSBbIDAuMCwgMC4wLCAwLjAgXSxcbiAgdXA6IFJhd1ZlY3RvcjMgPSBbIDAuMCwgMS4wLCAwLjAgXSxcbiAgcm9sbCA9IDAuMCxcbik6IFJhd01hdHJpeDQge1xuICBjb25zdCBkaXIgPSB2ZWNOb3JtYWxpemUoIHZlY1N1YiggcG9zaXRpb24sIHRhcmdldCApICk7XG5cbiAgbGV0IHNpZCA9IHZlY05vcm1hbGl6ZSggdmVjM0Nyb3NzKCB1cCwgZGlyICkgKTtcblxuICBpZiAoIHJvbGwgIT09IDAuMCApIHtcbiAgICBzaWQgPSB2ZWNBZGQoXG4gICAgICB2ZWNTY2FsZSggc2lkLCBNYXRoLmNvcyggcm9sbCApICksXG4gICAgICB2ZWNTY2FsZSggdmVjM0Nyb3NzKCBkaXIsIHNpZCApLCBNYXRoLnNpbiggcm9sbCApICksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHRvcCA9IHZlYzNDcm9zcyggZGlyLCBzaWQgKTtcblxuICByZXR1cm4gW1xuICAgIHNpZFsgMCBdLCBzaWRbIDEgXSwgc2lkWyAyIF0sIDAuMCxcbiAgICB0b3BbIDAgXSwgdG9wWyAxIF0sIHRvcFsgMiBdLCAwLjAsXG4gICAgZGlyWyAwIF0sIGRpclsgMSBdLCBkaXJbIDIgXSwgMC4wLFxuICAgIHBvc2l0aW9uWyAwIF0sIHBvc2l0aW9uWyAxIF0sIHBvc2l0aW9uWyAyIF0sIDEuMFxuICBdO1xufVxuIiwiaW1wb3J0IHsgdmVjM0Nyb3NzIH0gZnJvbSAnLi4vdmVjMy92ZWMzQ3Jvc3MnO1xuaW1wb3J0IHsgdmVjQWRkIH0gZnJvbSAnLi4vdmVjL3ZlY0FkZCc7XG5pbXBvcnQgeyB2ZWNEb3QgfSBmcm9tICcuLi92ZWMvdmVjRG90JztcbmltcG9ydCB7IHZlY05vcm1hbGl6ZSB9IGZyb20gJy4uL3ZlYy92ZWNOb3JtYWxpemUnO1xuaW1wb3J0IHsgdmVjU2NhbGUgfSBmcm9tICcuLi92ZWMvdmVjU2NhbGUnO1xuaW1wb3J0IHsgdmVjU3ViIH0gZnJvbSAnLi4vdmVjL3ZlY1N1Yic7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBpbnZlcnNlIG9mIFwiTG9va0F0XCIgbWF0cml4LiBHb29kIGZvciBjcmVhdGluZyBhIHZpZXcgbWF0cml4LlxuICpcbiAqIFNlZSBhbHNvOiB7QGxpbmsgbWF0NExvb2tBdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRMb29rQXRJbnZlcnNlKFxuICBwb3NpdGlvbjogUmF3VmVjdG9yMyxcbiAgdGFyZ2V0OiBSYXdWZWN0b3IzID0gWyAwLjAsIDAuMCwgMC4wIF0sXG4gIHVwOiBSYXdWZWN0b3IzID0gWyAwLjAsIDEuMCwgMC4wIF0sXG4gIHJvbGwgPSAwLjAsXG4pOiBSYXdNYXRyaXg0IHtcbiAgY29uc3QgZGlyID0gdmVjTm9ybWFsaXplKCB2ZWNTdWIoIHBvc2l0aW9uLCB0YXJnZXQgKSApO1xuXG4gIGxldCBzaWQgPSB2ZWNOb3JtYWxpemUoIHZlYzNDcm9zcyggdXAsIGRpciApICk7XG5cbiAgaWYgKCByb2xsICE9PSAwLjAgKSB7XG4gICAgc2lkID0gdmVjQWRkKFxuICAgICAgdmVjU2NhbGUoIHNpZCwgTWF0aC5jb3MoIHJvbGwgKSApLFxuICAgICAgdmVjU2NhbGUoIHZlYzNDcm9zcyggZGlyLCBzaWQgKSwgTWF0aC5zaW4oIHJvbGwgKSApLFxuICAgICk7XG4gIH1cblxuICBjb25zdCB0b3AgPSB2ZWMzQ3Jvc3MoIGRpciwgc2lkICk7XG5cbiAgcmV0dXJuIFtcbiAgICBzaWRbIDAgXSwgdG9wWyAwIF0sIGRpclsgMCBdLCAwLjAsXG4gICAgc2lkWyAxIF0sIHRvcFsgMSBdLCBkaXJbIDEgXSwgMC4wLFxuICAgIHNpZFsgMiBdLCB0b3BbIDIgXSwgZGlyWyAyIF0sIDAuMCxcbiAgICAtdmVjRG90KCBzaWQsIHBvc2l0aW9uICksXG4gICAgLXZlY0RvdCggdG9wLCBwb3NpdGlvbiApLFxuICAgIC12ZWNEb3QoIGRpciwgcG9zaXRpb24gKSxcbiAgICAxLjAsXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqIFJldHVybiBhIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiBtYXRyaWNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRNdWx0aXBseSggLi4ubWF0czogUmF3TWF0cml4NFtdICk6IFJhd01hdHJpeDQge1xuICBpZiAoIG1hdHMubGVuZ3RoIDwgMiApIHtcbiAgICByZXR1cm4gbWF0c1sgMCBdO1xuICB9XG5cbiAgY29uc3QgYSA9IG1hdHMuc2hpZnQoKSE7XG4gIGNvbnN0IGIgPSBtYXQ0TXVsdGlwbHkoIC4uLm1hdHMgKTtcbiAgY29uc3RcbiAgICBhMDAgPSBhWyAgMCBdLCBhMDEgPSBhWyAgMSBdLCBhMDIgPSBhWyAgMiBdLCBhMDMgPSBhWyAgMyBdLFxuICAgIGExMCA9IGFbICA0IF0sIGExMSA9IGFbICA1IF0sIGExMiA9IGFbICA2IF0sIGExMyA9IGFbICA3IF0sXG4gICAgYTIwID0gYVsgIDggXSwgYTIxID0gYVsgIDkgXSwgYTIyID0gYVsgMTAgXSwgYTIzID0gYVsgMTEgXSxcbiAgICBhMzAgPSBhWyAxMiBdLCBhMzEgPSBhWyAxMyBdLCBhMzIgPSBhWyAxNCBdLCBhMzMgPSBhWyAxNSBdLFxuICAgIGIwMCA9IGJbICAwIF0sIGIwMSA9IGJbICAxIF0sIGIwMiA9IGJbICAyIF0sIGIwMyA9IGJbICAzIF0sXG4gICAgYjEwID0gYlsgIDQgXSwgYjExID0gYlsgIDUgXSwgYjEyID0gYlsgIDYgXSwgYjEzID0gYlsgIDcgXSxcbiAgICBiMjAgPSBiWyAgOCBdLCBiMjEgPSBiWyAgOSBdLCBiMjIgPSBiWyAxMCBdLCBiMjMgPSBiWyAxMSBdLFxuICAgIGIzMCA9IGJbIDEyIF0sIGIzMSA9IGJbIDEzIF0sIGIzMiA9IGJbIDE0IF0sIGIzMyA9IGJbIDE1IF07XG5cbiAgcmV0dXJuIFtcbiAgICBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDIgKyBhMzAgKiBiMDMsXG4gICAgYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyICsgYTMxICogYjAzLFxuICAgIGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMiArIGEzMiAqIGIwMyxcbiAgICBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDIgKyBhMzMgKiBiMDMsXG5cbiAgICBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTIgKyBhMzAgKiBiMTMsXG4gICAgYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyICsgYTMxICogYjEzLFxuICAgIGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMiArIGEzMiAqIGIxMyxcbiAgICBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTIgKyBhMzMgKiBiMTMsXG5cbiAgICBhMDAgKiBiMjAgKyBhMTAgKiBiMjEgKyBhMjAgKiBiMjIgKyBhMzAgKiBiMjMsXG4gICAgYTAxICogYjIwICsgYTExICogYjIxICsgYTIxICogYjIyICsgYTMxICogYjIzLFxuICAgIGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMiArIGEzMiAqIGIyMyxcbiAgICBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjIgKyBhMzMgKiBiMjMsXG5cbiAgICBhMDAgKiBiMzAgKyBhMTAgKiBiMzEgKyBhMjAgKiBiMzIgKyBhMzAgKiBiMzMsXG4gICAgYTAxICogYjMwICsgYTExICogYjMxICsgYTIxICogYjMyICsgYTMxICogYjMzLFxuICAgIGEwMiAqIGIzMCArIGExMiAqIGIzMSArIGEyMiAqIGIzMiArIGEzMiAqIGIzMyxcbiAgICBhMDMgKiBiMzAgKyBhMTMgKiBiMzEgKyBhMjMgKiBiMzIgKyBhMzMgKiBiMzMsXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgXCJQZXJzcGVjdGl2ZVwiIHByb2plY3Rpb24gbWF0cml4LlxuICpcbiAqIEBwYXJhbSBmb3YgRmllbGQgb2YgVmlldyBZLCAqKklOIERFR1JFRVMqKlxuICogQHBhcmFtIG5lYXIgTmVhciBjbGlwIHBsYW5lXG4gKiBAcGFyYW0gZmFyIEZhciBjbGlwIHBsYW5lXG4gKiBAcGFyYW0gYXNwZWN0IEFzcGVjdCByYXRpby4gKipgMS4wYCBCWSBERUZBVUxUKipcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRQZXJzcGVjdGl2ZShcbiAgZm92ID0gNDUuMCxcbiAgbmVhciA9IDAuMDEsXG4gIGZhciA9IDEwMC4wLFxuICBhc3BlY3QgPSAxLjAsXG4pOiBSYXdNYXRyaXg0IHtcbiAgY29uc3QgcCA9IDEuMCAvIE1hdGgudGFuKCBmb3YgKiBNYXRoLlBJIC8gMzYwLjAgKTtcbiAgY29uc3QgZCA9ICggZmFyIC0gbmVhciApO1xuICByZXR1cm4gW1xuICAgIHAgLyBhc3BlY3QsIDAuMCwgMC4wLCAwLjAsXG4gICAgMC4wLCBwLCAwLjAsIDAuMCxcbiAgICAwLjAsIDAuMCwgLSggZmFyICsgbmVhciApIC8gZCwgLTEuMCxcbiAgICAwLjAsIDAuMCwgLTIgKiBmYXIgKiBuZWFyIC8gZCwgMC4wXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgM2Qgcm90YXRpb24gbWF0cml4LCByb3RhdGVzIGFyb3VuZCB4IGF4aXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXQ0Um90YXRpb25YKCB0aGV0YTogbnVtYmVyICk6IFJhd01hdHJpeDQge1xuICBjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICk7XG4gIGNvbnN0IHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuICByZXR1cm4gW1xuICAgIDEsIDAsIDAsIDAsXG4gICAgMCwgYywgLXMsIDAsXG4gICAgMCwgcywgYywgMCxcbiAgICAwLCAwLCAwLCAxLFxuICBdO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi9SYXdNYXRyaXg0JztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIDNkIHJvdGF0aW9uIG1hdHJpeCwgcm90YXRlcyBhcm91bmQgeSBheGlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NFJvdGF0aW9uWSggdGhldGE6IG51bWJlciApOiBSYXdNYXRyaXg0IHtcbiAgY29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApO1xuICBjb25zdCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cbiAgcmV0dXJuIFtcbiAgICBjLCAwLCBzLCAwLFxuICAgIDAsIDEsIDAsIDAsXG4gICAgLXMsIDAsIGMsIDAsXG4gICAgMCwgMCwgMCwgMSxcbiAgXTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4vUmF3TWF0cml4NCc7XG5cbi8qKlxuICogR2VuZXJhdGUgYSAzZCByb3RhdGlvbiBtYXRyaXgsIHJvdGF0ZXMgYXJvdW5kIHogYXhpcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRSb3RhdGlvblooIHRoZXRhOiBudW1iZXIgKTogUmF3TWF0cml4NCB7XG4gIGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKTtcbiAgY29uc3QgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG4gIHJldHVybiBbXG4gICAgYywgLXMsIDAsIDAsXG4gICAgcywgYywgMCwgMCxcbiAgICAwLCAwLCAxLCAwLFxuICAgIDAsIDAsIDAsIDEsXG4gIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIDNkIHNjYWxpbmcgbWF0cml4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NFNjYWxlKCB2ZWM6IFJhd1ZlY3RvcjMgKTogUmF3TWF0cml4NCB7XG4gIHJldHVybiBbXG4gICAgdmVjWyAwIF0sIDAsIDAsIDAsXG4gICAgMCwgdmVjWyAxIF0sIDAsIDAsXG4gICAgMCwgMCwgdmVjWyAyIF0sIDAsXG4gICAgMCwgMCwgMCwgMSxcbiAgXTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4vUmF3TWF0cml4NCc7XG5cbi8qKlxuICogR2VuZXJhdGUgYSAzZCBzY2FsaW5nIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRTY2FsZVNjYWxhciggc2NhbGFyOiBudW1iZXIgKTogUmF3TWF0cml4NCB7XG4gIHJldHVybiBbXG4gICAgc2NhbGFyLCAwLCAwLCAwLFxuICAgIDAsIHNjYWxhciwgMCwgMCxcbiAgICAwLCAwLCBzY2FsYXIsIDAsXG4gICAgMCwgMCwgMCwgMSxcbiAgXTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4vUmF3TWF0cml4NCc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgdHJhbnNsYXRpb24gbWF0cml4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0NFRyYW5zbGF0ZSggdmVjOiBSYXdWZWN0b3IzICk6IFJhd01hdHJpeDQge1xuICByZXR1cm4gW1xuICAgIDEsIDAsIDAsIDAsXG4gICAgMCwgMSwgMCwgMCxcbiAgICAwLCAwLCAxLCAwLFxuICAgIHZlY1sgMCBdLCB2ZWNbIDEgXSwgdmVjWyAyIF0sIDFcbiAgXTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4NCB9IGZyb20gJy4vUmF3TWF0cml4NCc7XG5cbi8qKlxuICogVHJhbnNwb3NlIGEgbWF0NC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDRUcmFuc3Bvc2UoIG06IFJhd01hdHJpeDQgKTogUmF3TWF0cml4NCB7XG4gIHJldHVybiBbXG4gICAgbVsgMCBdLCBtWyA0IF0sIG1bIDggXSwgbVsgMTIgXSxcbiAgICBtWyAxIF0sIG1bIDUgXSwgbVsgOSBdLCBtWyAxMyBdLFxuICAgIG1bIDIgXSwgbVsgNiBdLCBtWyAxMCBdLCBtWyAxNCBdLFxuICAgIG1bIDMgXSwgbVsgNyBdLCBtWyAxMSBdLCBtWyAxNSBdLFxuICBdO1xufVxuIiwiaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uL21hdDMvTWF0cml4Myc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vcXVhdC9RdWF0ZXJuaW9uJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1ZlY3RvcjMnO1xuaW1wb3J0IHsgbWF0NENvbXBvc2UgfSBmcm9tICcuL21hdDRDb21wb3NlJztcbmltcG9ydCB7IG1hdDREZWNvbXBvc2UgfSBmcm9tICcuL21hdDREZWNvbXBvc2UnO1xuaW1wb3J0IHsgbWF0NERldGVybWluYW50IH0gZnJvbSAnLi9tYXQ0RGV0ZXJtaW5hbnQnO1xuaW1wb3J0IHsgbWF0NEZyb21NYXQzIH0gZnJvbSAnLi9tYXQ0RnJvbU1hdDMnO1xuaW1wb3J0IHsgbWF0NEZyb21RdWF0ZXJuaW9uIH0gZnJvbSAnLi9tYXQ0RnJvbVF1YXRlcm5pb24nO1xuaW1wb3J0IHsgbWF0NEludmVyc2UgfSBmcm9tICcuL21hdDRJbnZlcnNlJztcbmltcG9ydCB7IG1hdDRMb29rQXQgfSBmcm9tICcuL21hdDRMb29rQXQnO1xuaW1wb3J0IHsgbWF0NExvb2tBdEludmVyc2UgfSBmcm9tICcuL21hdDRMb29rQXRJbnZlcnNlJztcbmltcG9ydCB7IG1hdDRNdWx0aXBseSB9IGZyb20gJy4vbWF0NE11bHRpcGx5JztcbmltcG9ydCB7IG1hdDRQZXJzcGVjdGl2ZSB9IGZyb20gJy4vbWF0NFBlcnNwZWN0aXZlJztcbmltcG9ydCB7IG1hdDRSb3RhdGlvblggfSBmcm9tICcuL21hdDRSb3RhdGlvblgnO1xuaW1wb3J0IHsgbWF0NFJvdGF0aW9uWSB9IGZyb20gJy4vbWF0NFJvdGF0aW9uWSc7XG5pbXBvcnQgeyBtYXQ0Um90YXRpb25aIH0gZnJvbSAnLi9tYXQ0Um90YXRpb25aJztcbmltcG9ydCB7IG1hdDRTY2FsZSB9IGZyb20gJy4vbWF0NFNjYWxlJztcbmltcG9ydCB7IG1hdDRTY2FsZVNjYWxhciB9IGZyb20gJy4vbWF0NFNjYWxlU2NhbGFyJztcbmltcG9ydCB7IG1hdDRUcmFuc2xhdGUgfSBmcm9tICcuL21hdDRUcmFuc2xhdGUnO1xuaW1wb3J0IHsgbWF0NFRyYW5zcG9zZSB9IGZyb20gJy4vbWF0NFRyYW5zcG9zZSc7XG5pbXBvcnQgeyB2ZWNTY2FsZSB9IGZyb20gJy4uL3ZlYy92ZWNTY2FsZSc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuL1Jhd01hdHJpeDQnO1xuXG5jb25zdCByYXdJZGVudGl0eU1hdHJpeDQ6IFJhd01hdHJpeDQgPSBbXG4gIDEuMCwgMC4wLCAwLjAsIDAuMCxcbiAgMC4wLCAxLjAsIDAuMCwgMC4wLFxuICAwLjAsIDAuMCwgMS4wLCAwLjAsXG4gIDAuMCwgMC4wLCAwLjAsIDEuMFxuXTtcblxuLyoqXG4gKiBBIE1hdHJpeDQuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRyaXg0IHtcbiAgcHVibGljIGVsZW1lbnRzOiBSYXdNYXRyaXg0O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdjogUmF3TWF0cml4NCA9IHJhd0lkZW50aXR5TWF0cml4NCApIHtcbiAgICB0aGlzLmVsZW1lbnRzID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IHRyYW5zcG9zZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHRyYW5zcG9zZSgpOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRUcmFuc3Bvc2UoIHRoaXMuZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0cyBkZXRlcm1pbmFudC5cbiAgICovXG4gIHB1YmxpYyBnZXQgZGV0ZXJtaW5hbnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbWF0NERldGVybWluYW50KCB0aGlzLmVsZW1lbnRzICk7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCBpbnZlcnRlZC5cbiAgICovXG4gIHB1YmxpYyBnZXQgaW52ZXJzZSgpOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRJbnZlcnNlKCB0aGlzLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IG1hdHJpeDMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IG1hdHJpeDMoKTogTWF0cml4MyB7XG4gICAgcmV0dXJuIE1hdHJpeDMuZnJvbU1hdHJpeDQoIHRoaXMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IG5vcm1hbCBtYXRyaXguXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5vcm1hbE1hdHJpeCgpOiBNYXRyaXgzIHtcbiAgICByZXR1cm4gTWF0cml4My5jcmVhdGVOb3JtYWxNYXRyaXgoIHRoaXMgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IG0gPSB0aGlzLmVsZW1lbnRzLm1hcCggKCB2ICkgPT4gdi50b0ZpeGVkKCAzICkgKTtcbiAgICByZXR1cm4gYE1hdHJpeDQoICR7IG1bIDAgXSB9LCAkeyBtWyA0IF0gfSwgJHsgbVsgOCBdIH0sICR7IG1bIDEyIF0gfTsgJHsgbVsgMSBdIH0sICR7IG1bIDUgXSB9LCAkeyBtWyA5IF0gfSwgJHsgbVsgMTMgXSB9OyAkeyBtWyAyIF0gfSwgJHsgbVsgNiBdIH0sICR7IG1bIDEwIF0gfSwgJHsgbVsgMTQgXSB9OyAkeyBtWyAzIF0gfSwgJHsgbVsgNyBdIH0sICR7IG1bIDExIF0gfSwgJHsgbVsgMTUgXSB9IClgO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KCB0aGlzLmVsZW1lbnRzLmNvbmNhdCgpIGFzIFJhd01hdHJpeDQgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGlzIE1hdHJpeDQgYnkgb25lIG9yIG1vcmUgTWF0cml4NHMuXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHkoIC4uLm1hdHJpY2VzOiBNYXRyaXg0W10gKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIE1hdHJpeDQubXVsdGlwbHkoIHRoaXMsIC4uLm1hdHJpY2VzICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgdGhpcyBNYXRyaXg0IGJ5IGEgc2NhbGFyLlxuICAgKi9cbiAgcHVibGljIHNjYWxlU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIHZlY1NjYWxlKCB0aGlzLmVsZW1lbnRzLCBzY2FsYXIgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29tcG9zZSB0aGlzIG1hdHJpeCBpbnRvIGEgcG9zaXRpb24sIGEgc2NhbGUsIGFuZCBhIHJvdGF0aW9uLlxuICAgKi9cbiAgcHVibGljIGRlY29tcG9zZSgpOiB7IHBvc2l0aW9uOiBWZWN0b3IzOyBzY2FsZTogVmVjdG9yMzsgcm90YXRpb246IFF1YXRlcm5pb24gfSB7XG4gICAgY29uc3QgeyBwb3NpdGlvbiwgc2NhbGUsIHJvdGF0aW9uIH0gPSBtYXQ0RGVjb21wb3NlKCB0aGlzLmVsZW1lbnRzICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKCBwb3NpdGlvbiApLFxuICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKCBzY2FsZSApLFxuICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKCByb3RhdGlvbiApLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQW4gaWRlbnRpdHkgTWF0cml4NC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IGlkZW50aXR5KCk6IE1hdHJpeDQge1xuICAgIHJldHVybiBuZXcgTWF0cml4NCggcmF3SWRlbnRpdHlNYXRyaXg0ICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgdHdvIG9yIG1vcmUgbWF0cmljZXMuXG4gICAqIEBwYXJhbSBtYXRyaWNlcyBNYXRyaWNlc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBtdWx0aXBseSggLi4ubWF0cmljZXM6IE1hdHJpeDRbXSApOiBNYXRyaXg0IHtcbiAgICBpZiAoIG1hdHJpY2VzLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgIHJldHVybiBNYXRyaXg0LmlkZW50aXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRNdWx0aXBseSggLi4ubWF0cmljZXMubWFwKCAoIG0gKSA9PiBtLmVsZW1lbnRzICkgKSApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtYXRyaXggb3V0IG9mIGEge0BsaW5rIFF1YXRlcm5pb259LlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiBBIHF1YXRlcm5pb25cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb246IFF1YXRlcm5pb24gKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KCBtYXQ0RnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb24uZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENhc3QgYSB7QGxpbmsgTWF0cml4M30gaW50byBhIE1hdHJpeDQuXG4gICAqIEBwYXJhbSBtYXRyaXgzIEEgbWF0cml4M1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tTWF0cml4MyggbWF0cml4MzogTWF0cml4MyApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRGcm9tTWF0MyggbWF0cml4My5lbGVtZW50cyApICk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0cmFuc2xhdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSB2ZWN0b3IgVHJhbnNsYXRpb25cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdHJhbnNsYXRlKCB2ZWN0b3I6IFZlY3RvcjMgKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KCBtYXQ0VHJhbnNsYXRlKCB2ZWN0b3IuZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgM2Qgc2NhbGluZyBtYXRyaXguXG4gICAqIEBwYXJhbSB2ZWN0b3IgU2NhbGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc2NhbGUoIHZlY3RvcjogVmVjdG9yMyApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRTY2FsZSggdmVjdG9yLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIDNkIHNjYWxpbmcgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICAgKiBAcGFyYW0gdmVjdG9yIFNjYWxlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHNjYWxlU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRTY2FsZVNjYWxhciggc2NhbGFyICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIDNkIHJvdGF0aW9uIG1hdHJpeCwgcm90YXRlcyBhcm91bmQgeCBheGlzLlxuICAgKiBAcGFyYW0gdmVjdG9yIFNjYWxlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJvdGF0aW9uWCggdGhldGE6IG51bWJlciApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRSb3RhdGlvblgoIHRoZXRhICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIDNkIHJvdGF0aW9uIG1hdHJpeCwgcm90YXRlcyBhcm91bmQgeSBheGlzLlxuICAgKiBAcGFyYW0gdmVjdG9yIFNjYWxlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJvdGF0aW9uWSggdGhldGE6IG51bWJlciApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRSb3RhdGlvblkoIHRoZXRhICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIDNkIHJvdGF0aW9uIG1hdHJpeCwgcm90YXRlcyBhcm91bmQgeiBheGlzLlxuICAgKiBAcGFyYW0gdmVjdG9yIFNjYWxlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJvdGF0aW9uWiggdGhldGE6IG51bWJlciApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRSb3RhdGlvblooIHRoZXRhICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIFwiTG9va0F0XCIgbWF0cml4LlxuICAgKlxuICAgKiBTZWUgYWxzbzoge0BsaW5rIGxvb2tBdEludmVyc2V9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxvb2tBdChcbiAgICBwb3NpdGlvbjogVmVjdG9yMyxcbiAgICB0YXJnZXQgPSBuZXcgVmVjdG9yMyggWyAwLjAsIDAuMCwgMC4wIF0gKSxcbiAgICB1cCA9IG5ldyBWZWN0b3IzKCBbIDAuMCwgMS4wLCAwLjAgXSApLFxuICAgIHJvbGwgPSAwLjBcbiAgKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KCBtYXQ0TG9va0F0KFxuICAgICAgcG9zaXRpb24uZWxlbWVudHMsXG4gICAgICB0YXJnZXQuZWxlbWVudHMsXG4gICAgICB1cC5lbGVtZW50cyxcbiAgICAgIHJvbGwsXG4gICAgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuIGludmVyc2Ugb2YgXCJMb29rQXRcIiBtYXRyaXguIEdvb2QgZm9yIGNyZWF0aW5nIGEgdmlldyBtYXRyaXguXG4gICAqXG4gICAqIFNlZSBhbHNvOiB7QGxpbmsgbG9va0F0fVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBsb29rQXRJbnZlcnNlKFxuICAgIHBvc2l0aW9uOiBWZWN0b3IzLFxuICAgIHRhcmdldCA9IG5ldyBWZWN0b3IzKCBbIDAuMCwgMC4wLCAwLjAgXSApLFxuICAgIHVwID0gbmV3IFZlY3RvcjMoIFsgMC4wLCAxLjAsIDAuMCBdICksXG4gICAgcm9sbCA9IDAuMFxuICApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRMb29rQXRJbnZlcnNlKFxuICAgICAgcG9zaXRpb24uZWxlbWVudHMsXG4gICAgICB0YXJnZXQuZWxlbWVudHMsXG4gICAgICB1cC5lbGVtZW50cyxcbiAgICAgIHJvbGwsXG4gICAgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgXCJQZXJzcGVjdGl2ZVwiIHByb2plY3Rpb24gbWF0cml4LlxuICAgKiBJdCB3b24ndCBpbmNsdWRlIGFzcGVjdCFcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcGVyc3BlY3RpdmUoIGZvdiA9IDQ1LjAsIG5lYXIgPSAwLjAxLCBmYXIgPSAxMDAuMCApOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRQZXJzcGVjdGl2ZSggZm92LCBuZWFyLCBmYXIgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgYSBtYXRyaXggb3V0IG9mIHBvc2l0aW9uLCBzY2FsZSwgYW5kIHJvdGF0aW9uLlxuICAgKiBZb2lua2VkIGZyb20gVGhyZWUuanMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNvbXBvc2UoIHBvc2l0aW9uOiBWZWN0b3IzLCByb3RhdGlvbjogUXVhdGVybmlvbiwgc2NhbGU6IFZlY3RvcjMgKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXg0KCBtYXQ0Q29tcG9zZSggcG9zaXRpb24uZWxlbWVudHMsIHJvdGF0aW9uLmVsZW1lbnRzLCBzY2FsZS5lbGVtZW50cyApICk7XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4vUmF3UXVhdGVybmlvbic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgUXVhdGVybmlvbiBvdXQgb2YgYXhpcyBhbmQgYW5nbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWF0RnJvbUF4aXNBbmdsZSggYXhpczogUmF3VmVjdG9yMywgYW5nbGU6IG51bWJlciApOiBSYXdRdWF0ZXJuaW9uIHtcbiAgY29uc3QgaGFsZkFuZ2xlID0gYW5nbGUgLyAyLjA7XG4gIGNvbnN0IHNpbkhhbGZBbmdsZSA9IE1hdGguc2luKCBoYWxmQW5nbGUgKTtcbiAgcmV0dXJuIFtcbiAgICBheGlzWyAwIF0gKiBzaW5IYWxmQW5nbGUsXG4gICAgYXhpc1sgMSBdICogc2luSGFsZkFuZ2xlLFxuICAgIGF4aXNbIDIgXSAqIHNpbkhhbGZBbmdsZSxcbiAgICBNYXRoLmNvcyggaGFsZkFuZ2xlIClcbiAgXTtcbn1cbiIsImltcG9ydCB7IHZlYzNPcnRob05vcm1hbGl6ZSB9IGZyb20gJy4uL3ZlYzMvdmVjM09ydGhvTm9ybWFsaXplJztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4vUmF3UXVhdGVybmlvbic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIFJldHVybiBhIHF1YXRlcm5pb24gd2hpY2ggbG9va3MgYXQgdGhlIGRpcmVjdGlvbiBvZiBgbG9va2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWF0TG9va1JvdGF0aW9uKCBsb29rOiBSYXdWZWN0b3IzLCB1cD86IFJhd1ZlY3RvcjMgKTogUmF3UXVhdGVybmlvbiB7XG4gIGNvbnN0IHsgbm9ybWFsLCB0YW5nZW50LCBiaW5vcm1hbCB9ID0gdmVjM09ydGhvTm9ybWFsaXplKCBsb29rLCB1cCA/PyBbIDAuMCwgMS4wLCAwLjAgXSApO1xuXG4gIGNvbnN0IHcgPSBNYXRoLnNxcnQoIDEuMCArIGJpbm9ybWFsWyAwIF0gKyB0YW5nZW50WyAxIF0gKyBub3JtYWxbIDIgXSApICogMC41O1xuICBjb25zdCBpbnZXNCA9IDAuMjUgLyB3O1xuXG4gIHJldHVybiBbXG4gICAgKCB0YW5nZW50WyAyIF0gLSBub3JtYWxbIDEgXSApICogaW52VzQsXG4gICAgKCBub3JtYWxbIDAgXSAtIGJpbm9ybWFsWyAyIF0gKSAqIGludlc0LFxuICAgICggYmlub3JtYWxbIDEgXSAtIHRhbmdlbnRbIDAgXSApICogaW52VzQsXG4gICAgdyxcbiAgXTtcbn1cbiIsImltcG9ydCB7IHZlY0xlbmd0aCB9IGZyb20gJy4uL3ZlYy92ZWNMZW5ndGgnO1xuaW1wb3J0IHsgdmVjU2NhbGUgfSBmcm9tICcuLi92ZWMvdmVjU2NhbGUnO1xuaW1wb3J0IHR5cGUgeyBSYXdRdWF0ZXJuaW9uIH0gZnJvbSAnLi9SYXdRdWF0ZXJuaW9uJztcblxuLyoqXG4gKiBOb3JtYWxpemUgZ2l2ZW4gcXVhdGVybmlvbi5cbiAqXG4gKiBJdCdzIGFsbW9zdCBpZGVudGljYWwgYXMge0BsaW5rIHZlY05vcm1hbGl6ZX0sXG4gKiBidXQgaXQgd2lsbCByZXR1cm4gYW4gaWRlbnRpdHkgcXVhdGVybmlvbiBpbnN0ZWFkXG4gKiB3aGVuIGl0IHJlY2lldmVzIGEgcXVhdGVybmlvbiB3aGljaCBsZW5ndGggaXMgemVyby5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXROb3JtYWxpemUoIHZlYzogUmF3UXVhdGVybmlvbiApOiBSYXdRdWF0ZXJuaW9uIHtcbiAgY29uc3QgbGVuID0gdmVjTGVuZ3RoKCB2ZWMgKTtcbiAgaWYgKCBsZW4gPT09IDAuMCApIHtcbiAgICByZXR1cm4gWyAwLjAsIDAuMCwgMC4wLCAxLjAgXTtcbiAgfVxuICByZXR1cm4gdmVjU2NhbGUoIHZlYywgMS4wIC8gbGVuICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd1F1YXRlcm5pb24gfSBmcm9tICcuL1Jhd1F1YXRlcm5pb24nO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgcXVhdGVybmlvbiByb3RhdGVzIGFyb3VuZCB4IGF4aXMuXG4gKiBAcGFyYW0gdGhldGEgQW4gYW5nbGUgYXJvdW5kIHggYXhpcywgaW4gZGVncmVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWF0Um90YXRpb25YKCB0aGV0YTogbnVtYmVyICk6IFJhd1F1YXRlcm5pb24ge1xuICByZXR1cm4gWyBNYXRoLnNpbiggdGhldGEgLyAyLjAgKSwgMC4wLCAwLjAsIE1hdGguY29zKCB0aGV0YSAvIDIuMCApIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd1F1YXRlcm5pb24gfSBmcm9tICcuL1Jhd1F1YXRlcm5pb24nO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgcXVhdGVybmlvbiByb3RhdGVzIGFyb3VuZCB5IGF4aXMuXG4gKiBAcGFyYW0gdGhldGEgQW4gYW5nbGUgYXJvdW5kIHkgYXhpcywgaW4gZGVncmVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWF0Um90YXRpb25ZKCB0aGV0YTogbnVtYmVyICk6IFJhd1F1YXRlcm5pb24ge1xuICByZXR1cm4gWyAwLjAsIE1hdGguc2luKCB0aGV0YSAvIDIuMCApLCAwLjAsIE1hdGguY29zKCB0aGV0YSAvIDIuMCApIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd1F1YXRlcm5pb24gfSBmcm9tICcuL1Jhd1F1YXRlcm5pb24nO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgcXVhdGVybmlvbiByb3RhdGVzIGFyb3VuZCB6IGF4aXMuXG4gKiBAcGFyYW0gdGhldGEgQW4gYW5nbGUgYXJvdW5kIHogYXhpcywgaW4gZGVncmVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWF0Um90YXRpb25aKCB0aGV0YTogbnVtYmVyICk6IFJhd1F1YXRlcm5pb24ge1xuICByZXR1cm4gWyAwLjAsIDAuMCwgTWF0aC5zaW4oIHRoZXRhIC8gMi4wICksIE1hdGguY29zKCB0aGV0YSAvIDIuMCApIF07XG59XG4iLCJpbXBvcnQgeyB2ZWNEb3QsIHZlY05lZywgdmVjTm9ybWFsaXplIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHR5cGUgeyBSYXdRdWF0ZXJuaW9uIH0gZnJvbSAnLi9SYXdRdWF0ZXJuaW9uJztcblxuLyoqXG4gKiBJbnRlcnBvbGF0ZSBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9ucy5cbiAqIEBwYXJhbSBhIFwiZnJvbVwiIHF1YXRlcm5pb25cbiAqIEBwYXJhbSBiIFwidG9cIiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0gdCBIb3cgbXVjaCBkbyB3ZSB3YW50IHRvIHJvdGF0ZSB0aGUgYSB0byBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWF0U2xlcnAoIGE6IFJhd1F1YXRlcm5pb24sIGI6IFJhd1F1YXRlcm5pb24sIHQ6IG51bWJlciApOiBSYXdRdWF0ZXJuaW9uIHtcbiAgaWYgKCB0ID09PSAwLjAgKSB7IHJldHVybiBhLmNvbmNhdCgpIGFzIFJhd1F1YXRlcm5pb247IH1cbiAgaWYgKCB0ID09PSAxLjAgKSB7IHJldHVybiBiLmNvbmNhdCgpIGFzIFJhd1F1YXRlcm5pb247IH1cblxuICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9tYXN0ZXIvc3JjL21hdGgvUXVhdGVybmlvbi5qc1xuICAvLyBSZWY6IGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cbiAgbGV0IGNvc0hhbGZUaGV0YSA9IHZlY0RvdCggYSwgYiApO1xuXG4gIGlmICggY29zSGFsZlRoZXRhIDwgMC4wICkge1xuICAgIGIgPSB2ZWNOZWcoIGIgKTtcbiAgICBjb3NIYWxmVGhldGEgPSAtY29zSGFsZlRoZXRhO1xuICB9XG5cbiAgLy8gSSB0aGluayB5b3UgdHdvIGFyZSBzYW1lXG4gIGlmICggY29zSGFsZlRoZXRhID49IDEuMCApIHtcbiAgICByZXR1cm4gYS5jb25jYXQoKSBhcyBSYXdRdWF0ZXJuaW9uO1xuICB9XG5cbiAgY29uc3Qgc3FyU2luSGFsZlRoZXRhID0gMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhO1xuXG4gIC8vIGZhbGxiYWNrIHRvIHNpbXBsZSBsZXJwXG4gIGlmICggc3FyU2luSGFsZlRoZXRhIDw9IE51bWJlci5FUFNJTE9OICkge1xuICAgIGNvbnN0IHMgPSAxLjAgLSB0O1xuXG4gICAgcmV0dXJuIHZlY05vcm1hbGl6ZSggW1xuICAgICAgcyAqIGFbIDAgXSArIHQgKiBiWyAwIF0sXG4gICAgICBzICogYVsgMSBdICsgdCAqIGJbIDEgXSxcbiAgICAgIHMgKiBhWyAyIF0gKyB0ICogYlsgMiBdLFxuICAgICAgcyAqIGFbIDMgXSArIHQgKiBiWyAzIF0sXG4gICAgXSApO1xuICB9XG5cbiAgLy8gd2VsY29tZVxuICBjb25zdCBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuICBjb25zdCBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xuICBjb25zdCByYXRpb0EgPSBNYXRoLnNpbiggKCAxLjAgLSB0ICkgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcbiAgY29uc3QgcmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuICByZXR1cm4gW1xuICAgIGFbIDAgXSAqIHJhdGlvQSArIGJbIDAgXSAqIHJhdGlvQixcbiAgICBhWyAxIF0gKiByYXRpb0EgKyBiWyAxIF0gKiByYXRpb0IsXG4gICAgYVsgMiBdICogcmF0aW9BICsgYlsgMiBdICogcmF0aW9CLFxuICAgIGFbIDMgXSAqIHJhdGlvQSArIGJbIDMgXSAqIHJhdGlvQixcbiAgXTtcbn1cbiIsImltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXQ0L01hdHJpeDQnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL3ZlYzMvVmVjdG9yMyc7XG5pbXBvcnQgeyBtYXQ0RnJvbVF1YXRlcm5pb24gfSBmcm9tICcuLi9tYXQ0L21hdDRGcm9tUXVhdGVybmlvbic7XG5pbXBvcnQgeyBxdWF0RnJvbUF4aXNBbmdsZSB9IGZyb20gJy4vcXVhdEZyb21BeGlzQW5nbGUnO1xuaW1wb3J0IHsgcXVhdEZyb21NYXRyaXg0IH0gZnJvbSAnLi9xdWF0RnJvbU1hdHJpeDQnO1xuaW1wb3J0IHsgcXVhdEludmVyc2UgfSBmcm9tICcuL3F1YXRJbnZlcnNlJztcbmltcG9ydCB7IHF1YXRMb29rUm90YXRpb24gfSBmcm9tICcuL3F1YXRMb29rUm90YXRpb24nO1xuaW1wb3J0IHsgcXVhdE11bHRpcGx5IH0gZnJvbSAnLi9xdWF0TXVsdGlwbHknO1xuaW1wb3J0IHsgcXVhdE5vcm1hbGl6ZSB9IGZyb20gJy4vcXVhdE5vcm1hbGl6ZSc7XG5pbXBvcnQgeyBxdWF0Um90YXRpb25YIH0gZnJvbSAnLi9xdWF0Um90YXRpb25YJztcbmltcG9ydCB7IHF1YXRSb3RhdGlvblkgfSBmcm9tICcuL3F1YXRSb3RhdGlvblknO1xuaW1wb3J0IHsgcXVhdFJvdGF0aW9uWiB9IGZyb20gJy4vcXVhdFJvdGF0aW9uWic7XG5pbXBvcnQgeyBxdWF0U2xlcnAgfSBmcm9tICcuL3F1YXRTbGVycCc7XG5pbXBvcnQgeyB2ZWNMZW5ndGggfSBmcm9tICcuLi92ZWMvdmVjTGVuZ3RoJztcbmltcG9ydCB7IHZlY0xlbmd0aFNxIH0gZnJvbSAnLi4vdmVjL3ZlY0xlbmd0aFNxJztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4vUmF3UXVhdGVybmlvbic7XG5cbmNvbnN0IHJhd0lkZW50aXR5UXVhdGVybmlvbjogUmF3UXVhdGVybmlvbiA9IFsgMC4wLCAwLjAsIDAuMCwgMS4wIF07XG5cbi8qKlxuICogQSBRdWF0ZXJuaW9uLlxuICovXG5leHBvcnQgY2xhc3MgUXVhdGVybmlvbiB7XG4gIHB1YmxpYyBlbGVtZW50czogUmF3UXVhdGVybmlvbjsgLy8gWyB4LCB5LCB6OyB3IF1cblxuICBwdWJsaWMgY29uc3RydWN0b3IoIGVsZW1lbnRzOiBSYXdRdWF0ZXJuaW9uID0gcmF3SWRlbnRpdHlRdWF0ZXJuaW9uICkge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiB4IGNvbXBvbmVudCBvZiB0aGlzLlxuICAgKi9cbiAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbIDAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiB5IGNvbXBvbmVudCBvZiB0aGlzLlxuICAgKi9cbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbIDEgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiB6IGNvbXBvbmVudCBvZiB0aGlzLlxuICAgKi9cbiAgcHVibGljIGdldCB6KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbIDIgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiB3IGNvbXBvbmVudCBvZiB0aGlzLlxuICAgKi9cbiAgcHVibGljIGdldCB3KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbIDMgXTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgUXVhdGVybmlvbiggJHsgdGhpcy54LnRvRml4ZWQoIDMgKSB9LCAkeyB0aGlzLnkudG9GaXhlZCggMyApIH0sICR7IHRoaXMuei50b0ZpeGVkKCAzICkgfSwgJHsgdGhpcy53LnRvRml4ZWQoIDMgKSB9IClgO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogUXVhdGVybmlvbiB7XG4gICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKCB0aGlzLmVsZW1lbnRzLmNvbmNhdCgpIGFzIFJhd1F1YXRlcm5pb24gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IGNvbnZlcnRlZCBpbnRvIGEgTWF0cml4NC5cbiAgICovXG4gIHB1YmxpYyBnZXQgbWF0cml4NCgpOiBNYXRyaXg0IHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDQoIG1hdDRGcm9tUXVhdGVybmlvbiggdGhpcy5lbGVtZW50cyApICk7XG4gIH1cblxuICAvKipcbiAgICogQW4gaW52ZXJzZSBvZiB0aGlzLlxuICAgKi9cbiAgcHVibGljIGdldCBpbnZlcnNlZCgpOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oIHF1YXRJbnZlcnNlKCB0aGlzLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB2ZWNMZW5ndGgoIHRoaXMuZWxlbWVudHMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc3F1YXJlZCBsZW5ndGggb2YgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgbGVuZ3RoU3EoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdmVjTGVuZ3RoU3EoIHRoaXMuZWxlbWVudHMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIG5vcm1hbGl6ZWQgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgbm9ybWFsaXplZCgpOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oIHF1YXROb3JtYWxpemUoIHRoaXMuZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IG9uZSBvciBtb3JlIFF1YXRlcm5pb25zIHdpdGggdGhpcy5cbiAgICogQHBhcmFtIHF1YXRlcm5pb25zIE90aGVyIFF1YXRlcm5pb25zXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHkoIC4uLnF1YXRlcm5pb25zOiBRdWF0ZXJuaW9uW10gKTogUXVhdGVybmlvbiB7XG4gICAgcmV0dXJuIFF1YXRlcm5pb24ubXVsdGlwbHkoIHRoaXMsIC4uLnF1YXRlcm5pb25zICk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJwb2xhdGUgYmV0d2VlbiB0aGlzIGFuZCBnaXZlbiBxdWF0ZXJuaW9uLlxuICAgKiBAcGFyYW0gYiBBbm90aGVyIFF1YXRlcm5pb25cbiAgICogQHBhcmFtIHQgSG93IG11Y2ggZG8gd2Ugd2FudCB0byByb3RhdGUgdGhpcyB0byBiXG4gICAqL1xuICBwdWJsaWMgc2xlcnAoIGI6IFF1YXRlcm5pb24sIHQ6IG51bWJlciApOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gUXVhdGVybmlvbi5zbGVycCggdGhpcywgYiwgdCApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGlkZW50aXR5IFF1YXRlcm5pb24uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldCBpZGVudGl0eSgpOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oIHJhd0lkZW50aXR5UXVhdGVybmlvbiApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IHR3byBvciBtb3JlIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiBRdWF0ZXJuaW9uc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBtdWx0aXBseSggLi4ucXVhdGVybmlvbnM6IFF1YXRlcm5pb25bXSApOiBRdWF0ZXJuaW9uIHtcbiAgICBpZiAoIHF1YXRlcm5pb25zLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmlkZW50aXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oIHF1YXRNdWx0aXBseSggLi4ucXVhdGVybmlvbnMubWFwKCAoIHEgKSA9PiBxLmVsZW1lbnRzICkgKSApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcnBvbGF0ZSBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9ucy5cbiAgICogQHBhcmFtIGEgXCJmcm9tXCIgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gYiBcInRvXCIgcXVhdGVybmlvblxuICAgKiBAcGFyYW0gdCBIb3cgbXVjaCBkbyB3ZSB3YW50IHRvIHJvdGF0ZSB0aGUgYSB0byBiXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHNsZXJwKCBhOiBRdWF0ZXJuaW9uLCBiOiBRdWF0ZXJuaW9uLCB0OiBudW1iZXIgKTogUXVhdGVybmlvbiB7XG4gICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKCBxdWF0U2xlcnAoIGEuZWxlbWVudHMsIGIuZWxlbWVudHMsIHQgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHF1YXRlcm5pb24gd2hpY2ggcm90YXRlcyBhcm91bmQgeCBheGlzLlxuICAgKiBAcGFyYW0gdGhldGEgQW4gYW5nbGUgYXJvdW5kIHggYXhpcywgaW4gZGVncmVlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJvdGF0aW9uWCggdGhldGE6IG51bWJlciApOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oIHF1YXRSb3RhdGlvblgoIHRoZXRhICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBxdWF0ZXJuaW9uIHdoaWNoIHJvdGF0ZXMgYXJvdW5kIHkgYXhpcy5cbiAgICogQHBhcmFtIHRoZXRhIEFuIGFuZ2xlIGFyb3VuZCB5IGF4aXMsIGluIGRlZ3JlZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByb3RhdGlvblkoIHRoZXRhOiBudW1iZXIgKTogUXVhdGVybmlvbiB7XG4gICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKCBxdWF0Um90YXRpb25ZKCB0aGV0YSApICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgcXVhdGVybmlvbiB3aGljaCByb3RhdGVzIGFyb3VuZCB6IGF4aXMuXG4gICAqIEBwYXJhbSB0aGV0YSBBbiBhbmdsZSBhcm91bmQgeiBheGlzLCBpbiBkZWdyZWVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcm90YXRpb25aKCB0aGV0YTogbnVtYmVyICk6IFF1YXRlcm5pb24ge1xuICAgIHJldHVybiBuZXcgUXVhdGVybmlvbiggcXVhdFJvdGF0aW9uWiggdGhldGEgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHF1YXRlcm5pb24gd2hpY2ggbG9va3MgYXQgdGhlIGRpcmVjdGlvbiBvZiBgbG9va2AuXG4gICAqIEBwYXJhbSBsb29rIFBvc2l0aW9uIHdoZXJlIHRoZSBxdWF0ZXJuaW9uIHdpbGwgbG9vayBhdFxuICAgKiBAcGFyYW0gdXAgVGhlIFwidXAgdmVjdG9yXCJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbG9va1JvdGF0aW9uKCBsb29rOiBWZWN0b3IzLCB1cDogVmVjdG9yMyApOiBRdWF0ZXJuaW9uIHtcbiAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oIHF1YXRMb29rUm90YXRpb24oIGxvb2suZWxlbWVudHMsIHVwLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIFF1YXRlcm5pb24gb3V0IG9mIGFuZ2xlIGFuZCBheGlzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQXhpc0FuZ2xlKCBheGlzOiBWZWN0b3IzLCBhbmdsZTogbnVtYmVyICk6IFF1YXRlcm5pb24ge1xuICAgIHJldHVybiBuZXcgUXVhdGVybmlvbiggcXVhdEZyb21BeGlzQW5nbGUoIGF4aXMuZWxlbWVudHMsIGFuZ2xlICkgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIFF1YXRlcm5pb24gb3V0IG9mIGEgcm90YXRpb24gbWF0cml4LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tTWF0cml4NCggbWF0cml4OiBNYXRyaXg0ICk6IFF1YXRlcm5pb24ge1xuICAgIHJldHVybiBuZXcgUXVhdGVybmlvbiggcXVhdEZyb21NYXRyaXg0KCBtYXRyaXguZWxlbWVudHMgKSApO1xuICB9XG59XG4iLCIvKipcbiAqIEdMU0wgU3R5bGUgYG1vZGAgZnVuY3Rpb24uXG4gKiBcImNvbXB1dGUgdmFsdWUgb2Ygb25lIHBhcmFtZXRlciBtb2R1bG8gYW5vdGhlclwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb2QoIHZhbHVlOiBudW1iZXIsIGRpdmlzb3I6IG51bWJlciApOiBudW1iZXIge1xuICByZXR1cm4gdmFsdWUgLSBNYXRoLmZsb29yKCB2YWx1ZSAvIGRpdmlzb3IgKSAqIGRpdmlzb3I7XG59XG4iLCJpbXBvcnQgeyBtb2QgfSBmcm9tICcuL21vZCc7XG5cbi8qKlxuICogRW5jbG9zZSBhcmJpdHJhcnkgYW5nbGUgKGluIHJhZGlhbikgaW50byBbLc+ALCDPgClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplQW5nbGUoIGFuZ2xlOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgcmV0dXJuIG1vZCggYW5nbGUgKyBNYXRoLlBJLCAyLjAgKiBNYXRoLlBJICkgLSBNYXRoLlBJO1xufVxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzYW5pdGl6ZUFuZ2xlIH0gZnJvbSAnLi4vc2FuaXRpemVBbmdsZSc7XG5pbXBvcnQgeyB2ZWNNYW5oYXR0YW5MZW5ndGggfSBmcm9tICcuLi92ZWMvdmVjTWFuaGF0dGFuTGVuZ3RoJztcbmltcG9ydCB0eXBlIHsgRXVsZXJPcmRlciB9IGZyb20gJy4vRXVsZXJPcmRlcic7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuLi9tYXQzL1Jhd01hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBSZXR1cm4gYSBldWxlciBhbmdsZXMgb3V0IG9mIGEgbWF0cml4My5cbiAqIE1ha2Ugc3VyZSB0aGUgaW5wdXQgbWF0cml4IGlzIG5vcm1hbGl6ZWQuXG4gKlxuICogQHBhcmFtIG0gQW4gaW5wdXQgcm90YXRpb24gbWF0cml4XG4gKiBAcGFyYW0gb3JkZXIgQW4gb3JkZXIgb2Ygb3V0cHV0IGV1bGVyIGFuZ2xlcy4gQXNzdW1lIGFzIGBYWVpgIGlmIG5vdCBzcGVjaWZpZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV1bGVyRnJvbU1hdDMoIG06IFJhd01hdHJpeDMsIG9yZGVyPzogRXVsZXJPcmRlciApOiBSYXdWZWN0b3IzIHtcbiAgY29uc3QgWyBpLCBqLCBrLCBzaWduIF0gPVxuICAgICFvcmRlciB8fCBvcmRlciA9PT0gJ1hZWicgPyBbIDAsIDEsIDIsIDEgXSA6XG4gICAgb3JkZXIgPT09ICdYWlknID8gWyAwLCAyLCAxLCAtMSBdIDpcbiAgICBvcmRlciA9PT0gJ1lYWicgPyBbIDEsIDAsIDIsIC0xIF0gOlxuICAgIG9yZGVyID09PSAnWVpYJyA/IFsgMSwgMiwgMCwgMSBdIDpcbiAgICBvcmRlciA9PT0gJ1pYWScgPyBbIDIsIDAsIDEsIDEgXSA6XG4gICAgWyAyLCAxLCAwLCAtMSBdO1xuXG4gIGNvbnN0IHJlc3VsdDogUmF3VmVjdG9yMyA9IFsgMC4wLCAwLjAsIDAuMCBdO1xuXG4gIGNvbnN0IGMgPSBtWyBrICsgaSAqIDMgXTtcbiAgcmVzdWx0WyBqIF0gPSAtc2lnbiAqIE1hdGguYXNpbiggY2xhbXAoIGMsIC0xLjAsIDEuMCApICk7XG5cbiAgaWYgKCBNYXRoLmFicyggYyApIDwgMC45OTk5OTkgKSB7XG4gICAgcmVzdWx0WyBpIF0gPSBzaWduICogTWF0aC5hdGFuMiggbVsgayArIGogKiAzIF0sIG1bIGsgKiA0IF0gKTtcbiAgICByZXN1bHRbIGsgXSA9IHNpZ24gKiBNYXRoLmF0YW4yKCBtWyBqICsgaSAqIDMgXSwgbVsgaSAqIDQgXSApO1xuICB9IGVsc2Uge1xuICAgIC8vIFwieSBpcyA5MGRlZ1wiIGNhc2VzXG4gICAgcmVzdWx0WyBpIF0gPSBzaWduICogTWF0aC5hdGFuMiggLW1bIGogKyBrICogMyBdLCBtWyBqICogNCBdICk7XG4gIH1cblxuICBpZiAoIHZlY01hbmhhdHRhbkxlbmd0aCggcmVzdWx0ICkgPiAxLjUgKiBNYXRoLlBJICkge1xuICAgIC8vIFwidHdvIGJpZyByZXZvbHV0aW9uc1wiIGNhc2VzXG4gICAgcmVzdWx0WyBpIF0gPSBzYW5pdGl6ZUFuZ2xlKCByZXN1bHRbIGkgXSArIE1hdGguUEkgKTtcbiAgICByZXN1bHRbIGogXSA9IHNhbml0aXplQW5nbGUoIE1hdGguUEkgLSByZXN1bHRbIGogXSApO1xuICAgIHJlc3VsdFsgayBdID0gc2FuaXRpemVBbmdsZSggcmVzdWx0WyBrIF0gKyBNYXRoLlBJICk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgZXVsZXJGcm9tTWF0MyB9IGZyb20gJy4vZXVsZXJGcm9tTWF0Myc7XG5pbXBvcnQgeyBtYXQzRnJvbU1hdDQgfSBmcm9tICcuLi9tYXQzL21hdDNGcm9tTWF0NCc7XG5pbXBvcnQgdHlwZSB7IEV1bGVyT3JkZXIgfSBmcm9tICcuL0V1bGVyT3JkZXInO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9SYXdNYXRyaXg0JztcbmltcG9ydCB0eXBlIHsgUmF3VmVjdG9yMyB9IGZyb20gJy4uL3ZlYzMvUmF3VmVjdG9yMyc7XG5cbi8qKlxuICogUmV0dXJuIGEgZXVsZXIgYW5nbGVzIG91dCBvZiBhIG1hdHJpeDQuXG4gKiBNYWtlIHN1cmUgdGhlIGlucHV0IG1hdHJpeCBpcyBub3JtYWxpemVkLlxuICpcbiAqIEBwYXJhbSBtIEFuIGlucHV0IHJvdGF0aW9uIG1hdHJpeFxuICogQHBhcmFtIG9yZGVyIEFuIG9yZGVyIG9mIG91dHB1dCBldWxlciBhbmdsZXMuIEFzc3VtZSBhcyBgWFlaYCBpZiBub3Qgc3BlY2lmaWVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldWxlckZyb21NYXQ0KCBtOiBSYXdNYXRyaXg0LCBvcmRlcj86IEV1bGVyT3JkZXIgKTogUmF3VmVjdG9yMyB7XG4gIHJldHVybiBldWxlckZyb21NYXQzKCBtYXQzRnJvbU1hdDQoIG0gKSwgb3JkZXIgKTtcbn1cbiIsImltcG9ydCB7IGV1bGVyRnJvbU1hdDMgfSBmcm9tICcuL2V1bGVyRnJvbU1hdDMnO1xuaW1wb3J0IHsgbWF0M0Zyb21RdWF0ZXJuaW9uIH0gZnJvbSAnLi4vbWF0My9tYXQzRnJvbVF1YXRlcm5pb24nO1xuaW1wb3J0IHR5cGUgeyBFdWxlck9yZGVyIH0gZnJvbSAnLi9FdWxlck9yZGVyJztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4uL3F1YXQvUmF3UXVhdGVybmlvbic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIFJldHVybiBhIGV1bGVyIGFuZ2xlcyBvdXQgb2YgYSBxdWF0ZXJuaW9uLlxuICpcbiAqIEBwYXJhbSBtIEFuIGlucHV0IHF1YXRlcm5pb25cbiAqIEBwYXJhbSBvcmRlciBBbiBvcmRlciBvZiBvdXRwdXQgZXVsZXIgYW5nbGVzLiBBc3N1bWUgYXMgYFhZWmAgaWYgbm90IHNwZWNpZmllZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXVsZXJGcm9tUXVhdGVybmlvbiggbTogUmF3UXVhdGVybmlvbiwgb3JkZXI/OiBFdWxlck9yZGVyICk6IFJhd1ZlY3RvcjMge1xuICByZXR1cm4gZXVsZXJGcm9tTWF0MyggbWF0M0Zyb21RdWF0ZXJuaW9uKCBtICksIG9yZGVyICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IEV1bGVyT3JkZXIgfSBmcm9tICcuLi9ldWxlci9FdWxlck9yZGVyJztcbmltcG9ydCB0eXBlIHsgUmF3UXVhdGVybmlvbiB9IGZyb20gJy4vUmF3UXVhdGVybmlvbic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgUXVhdGVybmlvbiBvdXQgb2YgZXVsZXIgYW5nbGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhdEZyb21FdWxlciggZXVsZXI6IFJhd1ZlY3RvcjMsIG9yZGVyPzogRXVsZXJPcmRlciApOiBSYXdRdWF0ZXJuaW9uIHtcbiAgY29uc3QgWyBpLCBqLCBrLCBzaWduIF0gPVxuICAgICFvcmRlciB8fCBvcmRlciA9PT0gJ1hZWicgPyBbIDAsIDEsIDIsIDEgXSA6XG4gICAgb3JkZXIgPT09ICdYWlknID8gWyAwLCAyLCAxLCAtMSBdIDpcbiAgICBvcmRlciA9PT0gJ1lYWicgPyBbIDEsIDAsIDIsIC0xIF0gOlxuICAgIG9yZGVyID09PSAnWVpYJyA/IFsgMSwgMiwgMCwgMSBdIDpcbiAgICBvcmRlciA9PT0gJ1pYWScgPyBbIDIsIDAsIDEsIDEgXSA6XG4gICAgWyAyLCAxLCAwLCAtMSBdO1xuXG4gIGNvbnN0IHRpID0gMC41ICogZXVsZXJbIGkgXTtcbiAgY29uc3QgdGogPSAwLjUgKiBzaWduICogZXVsZXJbIGogXTtcbiAgY29uc3QgdGsgPSAwLjUgKiBldWxlclsgayBdO1xuXG4gIGNvbnN0IGNpID0gTWF0aC5jb3MoIHRpICk7XG4gIGNvbnN0IGNqID0gTWF0aC5jb3MoIHRqICk7XG4gIGNvbnN0IGNrID0gTWF0aC5jb3MoIHRrICk7XG4gIGNvbnN0IHNpID0gTWF0aC5zaW4oIHRpICk7XG4gIGNvbnN0IHNqID0gTWF0aC5zaW4oIHRqICk7XG4gIGNvbnN0IHNrID0gTWF0aC5zaW4oIHRrICk7XG5cbiAgY29uc3QgcmVzdWx0OiBSYXdRdWF0ZXJuaW9uID0gW1xuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMC4wLFxuICAgIGNrICogY2ogKiBjaSArIHNrICogc2ogKiBzaSxcbiAgXTtcbiAgcmVzdWx0WyBpIF0gPSBjayAqIGNqICogc2kgLSBzayAqIHNqICogY2k7XG4gIHJlc3VsdFsgaiBdID0gc2lnbiAqICggY2sgKiBzaiAqIGNpICsgc2sgKiBjaiAqIHNpICk7XG4gIHJlc3VsdFsgayBdID0gc2sgKiBjaiAqIGNpIC0gY2sgKiBzaiAqIHNpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vbWF0My9NYXRyaXgzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXQ0L01hdHJpeDQnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4uL3F1YXQvUXVhdGVybmlvbic7XG5pbXBvcnQgeyBldWxlckZyb21NYXQzIH0gZnJvbSAnLi9ldWxlckZyb21NYXQzJztcbmltcG9ydCB7IGV1bGVyRnJvbU1hdDQgfSBmcm9tICcuL2V1bGVyRnJvbU1hdDQnO1xuaW1wb3J0IHsgZXVsZXJGcm9tUXVhdGVybmlvbiB9IGZyb20gJy4vZXVsZXJGcm9tUXVhdGVybmlvbic7XG5pbXBvcnQgeyBxdWF0RnJvbUV1bGVyIH0gZnJvbSAnLi4vcXVhdC9xdWF0RnJvbUV1bGVyJztcbmltcG9ydCB0eXBlIHsgRXVsZXJPcmRlciB9IGZyb20gJy4vRXVsZXJPcmRlcic7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEFuIEV1bGVyIHJvdGF0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIEV1bGVyIHtcbiAgcHVibGljIGVsZW1lbnRzOiBSYXdWZWN0b3IzOyAvLyBbIHgsIHksIHogXVxuXG4gIC8qKlxuICAgKiBBbiBvcmRlciBvZiB0aGlzIGV1bGVyLlxuICAgKiAnWFlaJyBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBpcyAqKmV4dHJpbnNpYyoqIHJvdGF0aW9ucyAod2hpY2ggaXMgc2FtZSBhcyBCbGVuZGVyLCBNYXlhLCBhbmQgVW5pdHkpLlxuICAgKiBUaHJlZS5qcyB1c2VzIGludHJpbnNpYyByb3RhdGlvbnMgc28geW91IGhhdmUgdG8gcmV2ZXJzZSB0aGUgb3JkZXIgaWYgeW91IHdhbnQgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIHdpdGggVGhyZWUuanMuXG4gICAqL1xuICBwdWJsaWMgb3JkZXI6IEV1bGVyT3JkZXI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBlbGVtZW50czogUmF3VmVjdG9yMyA9IFsgMC4wLCAwLjAsIDAuMCBdLCBvcmRlcjogRXVsZXJPcmRlciA9ICdYWVonICkge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gIH1cblxuICAvKipcbiAgICogQW4geCBjb21wb25lbnQgb2YgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgeCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWyAwIF07XG4gIH1cblxuICAvKipcbiAgICogQW4geSBjb21wb25lbnQgb2YgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWyAxIF07XG4gIH1cblxuICAvKipcbiAgICogQW4geiBjb21wb25lbnQgb2YgdGhpcy5cbiAgICovXG4gIHB1YmxpYyBnZXQgeigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWyAyIF07XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYEV1bGVyKCAkeyB0aGlzLngudG9GaXhlZCggMyApIH0sICR7IHRoaXMueS50b0ZpeGVkKCAzICkgfSwgJHsgdGhpcy56LnRvRml4ZWQoIDMgKSB9ICgkeyB0aGlzLm9yZGVyIH0pIClgO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogRXVsZXIge1xuICAgIHJldHVybiBuZXcgRXVsZXIoIHRoaXMuZWxlbWVudHMuY29uY2F0KCkgYXMgUmF3VmVjdG9yMywgdGhpcy5vcmRlciApO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0c2VsZiBidXQgY29udmVydGVkIGludG8gYSBRdWF0ZXJuaW9uLlxuICAgKi9cbiAgcHVibGljIGdldCBxdWF0ZXJuaW9uKCk6IFF1YXRlcm5pb24ge1xuICAgIHJldHVybiBuZXcgUXVhdGVybmlvbiggcXVhdEZyb21FdWxlciggdGhpcy5lbGVtZW50cywgdGhpcy5vcmRlciApICk7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCBjb252ZXJ0ZWQgaW50byBhIE1hdHJpeDQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IG1hdHJpeDQoKTogTWF0cml4NCB7XG4gICAgcmV0dXJuIHRoaXMucXVhdGVybmlvbi5tYXRyaXg0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuIEV1bGVyIG91dCBvZiBhIG1hdHJpeDMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21NYXRyaXgzKCBtYXRyaXg6IE1hdHJpeDMsIG9yZGVyOiBFdWxlck9yZGVyICk6IEV1bGVyIHtcbiAgICByZXR1cm4gbmV3IEV1bGVyKCBldWxlckZyb21NYXQzKCBtYXRyaXguZWxlbWVudHMsIG9yZGVyICksIG9yZGVyICk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYW4gRXVsZXIgb3V0IG9mIGEgbWF0cml4NC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbU1hdHJpeDQoIG1hdHJpeDogTWF0cml4NCwgb3JkZXI6IEV1bGVyT3JkZXIgKTogRXVsZXIge1xuICAgIHJldHVybiBuZXcgRXVsZXIoIGV1bGVyRnJvbU1hdDQoIG1hdHJpeC5lbGVtZW50cywgb3JkZXIgKSwgb3JkZXIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhbiBFdWxlciBvdXQgb2YgYSBxdWF0ZXJuaW9uLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tUXVhdGVybmlvbiggcXVhdGVybmlvbjogUXVhdGVybmlvbiwgb3JkZXI6IEV1bGVyT3JkZXIgKTogRXVsZXIge1xuICAgIHJldHVybiBuZXcgRXVsZXIoIGV1bGVyRnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb24uZWxlbWVudHMsIG9yZGVyICksIG9yZGVyICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IHZlY0RvdCB9IGZyb20gJy4uL3ZlYy92ZWNEb3QnO1xuaW1wb3J0IHsgdmVjU3ViIH0gZnJvbSAnLi4vdmVjL3ZlY1N1Yic7XG5pbXBvcnQgdHlwZSB7IFJhd1JheTMgfSBmcm9tICcuL1Jhd1JheTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdTcGhlcmUzIH0gZnJvbSAnLi4vc3BoZXJlMy9SYXdTcGhlcmUzJztcblxuLyoqXG4gKiBSZXR1cm4gZGlzdGFuY2VzIGZyb20gZ2l2ZW4gcmF5IHRvIHNwaGVyZS5cbiAqXG4gKiBUaGUgcmV0dXJuaW5nIGRpc3RhbmNlIGNhbiBiZSBuZWdhdGl2ZS5cbiAqXG4gKiBUaGUgZmlyc3QgcmV0dXJuaW5nIHZhbHVlIHdpbGwgYmUgdGhlIGRpc3RhbmNlIG9mIHRoZSBpbmNpZGVudCBwb2ludC5cbiAqIElmIHRoZSByYXkgZG9lcyBub3QgaW50ZXJzZWN0IHdpdGggc3BoZXJlLCBpdCB3aWxsIHJldHVybiBgbnVsbGAuXG4gKlxuICogQHBhcmFtIHJheSBBIHJheVxuICogQHBhcmFtIHNwaGVyZSBBIHRhcmdldCBzcGhlcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJheTNEaXN0YW5jZVRvU3BoZXJlKFxuICBbIHJvLCByZCBdOiBSYXdSYXkzLFxuICBzcGhlcmU6IFJhd1NwaGVyZTMsXG4pOiBbIG51bWJlciwgbnVtYmVyIF0gfCBudWxsIHtcbiAgY29uc3QgdiA9IHZlY1N1Yiggcm8sIHNwaGVyZVsgMCBdICk7XG4gIGNvbnN0IGIgPSB2ZWNEb3QoIHYsIHJkICk7XG4gIGNvbnN0IGMgPSB2ZWNEb3QoIHYsIHYgKSAtIHNwaGVyZVsgMSBdO1xuICBjb25zdCBkID0gYiAqIGIgLSBjO1xuXG4gIGlmICggZCA8IDAuMCApIHsgcmV0dXJuIG51bGw7IH1cblxuICBjb25zdCBzcXJ0RCA9IE1hdGguc3FydCggZCApO1xuXG4gIHJldHVybiBbIC1iIC0gc3FydEQsIC1iICsgc3FydEQgXTtcbn1cbiIsImltcG9ydCB7IHZlY1N1YiB9IGZyb20gJy4uL3ZlYy92ZWNTdWInO1xuaW1wb3J0IHR5cGUgeyBSYXdMaW5lMyB9IGZyb20gJy4vUmF3TGluZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBSZXR1cm4gYSB2ZWN0b3IgdGhhdCByZXByZXNlbnRzIGRlbHRhIG9mIGdpdmVuIGxpbmUuXG4gKlxuICogQHBhcmFtIGxpbmUgQSBsaW5lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5lM0RlbHRhKCBsaW5lOiBSYXdMaW5lMyApOiBSYXdWZWN0b3IzIHtcbiAgcmV0dXJuIHZlY1N1YiggbGluZVsgMSBdLCBsaW5lWyAwIF0gKTtcbn1cbiIsImltcG9ydCB7IGxpbmUzRGVsdGEgfSBmcm9tICcuLi9saW5lMy9saW5lM0RlbHRhJztcbmltcG9ydCB7IHZlY05vcm1hbGl6ZSB9IGZyb20gJy4uL3ZlYy92ZWNOb3JtYWxpemUnO1xuaW1wb3J0IHR5cGUgeyBSYXdMaW5lMyB9IGZyb20gJy4uL2xpbmUzL1Jhd0xpbmUzJztcbmltcG9ydCB0eXBlIHsgUmF3UmF5MyB9IGZyb20gJy4vUmF3UmF5Myc7XG5cbi8qKlxuICogQ29udmVydCB0aGUgZ2l2ZW4gbGluZSB0byBhIHJheS5cbiAqXG4gKiBAcGFyYW0gbGluZSBBIGxpbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJheTNGcm9tTGluZTMoIGxpbmU6IFJhd0xpbmUzICk6IFJhd1JheTMge1xuICByZXR1cm4gW1xuICAgIGxpbmVbIDAgXSxcbiAgICB2ZWNOb3JtYWxpemUoIGxpbmUzRGVsdGEoIGxpbmUgKSApLFxuICBdO1xufVxuIiwiaW1wb3J0IHsgTGluZTMgfSBmcm9tICcuLi9saW5lMy9MaW5lMyc7XG5pbXBvcnQgeyBTcGhlcmUzIH0gZnJvbSAnLi4vc3BoZXJlMy9TcGhlcmUzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1ZlY3RvcjMnO1xuaW1wb3J0IHsgcmF5M0Rpc3RhbmNlVG9TcGhlcmUgfSBmcm9tICcuL3JheTNEaXN0YW5jZVRvU3BoZXJlJztcbmltcG9ydCB7IHJheTNGcm9tTGluZTMgfSBmcm9tICcuL3JheTNGcm9tTGluZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdSYXkzIH0gZnJvbSAnLi9SYXdSYXkzJztcblxuLyoqXG4gKiBBIDNEIHJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJheTMge1xuICAvKipcbiAgICogVGhlIG9yaWdpbiBvZiB0aGUgcmF5LlxuICAgKi9cbiAgcHVibGljIG9yaWdpbjogVmVjdG9yMztcblxuICAvKipcbiAgICogVGhlIGRpcmVjdGlvbiBvZiB0aGUgcmF5LlxuICAgKiBNYWtlIHN1cmUgdGhlIGRpcmVjdGlvbiBpcyBub3JtYWxpemVkLlxuICAgKi9cbiAgcHVibGljIGRpcmVjdGlvbjogVmVjdG9yMztcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN0YXJ0OiBWZWN0b3IzID0gVmVjdG9yMy56ZXJvLCBlbmQ6IFZlY3RvcjMgPSBWZWN0b3IzLnB6ICkge1xuICAgIHRoaXMub3JpZ2luID0gc3RhcnQ7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBlbmQ7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCB7QGxpbmsgUmF3UmF5M30gZm9ybS5cbiAgICovXG4gIHB1YmxpYyBnZXQgcmF3KCk6IFJhd1JheTMge1xuICAgIHJldHVybiBbIHRoaXMub3JpZ2luLmVsZW1lbnRzLCB0aGlzLmRpcmVjdGlvbi5lbGVtZW50cyBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBkaXN0YW5jZXMgZnJvbSBnaXZlbiByYXkgdG8gc3BoZXJlLlxuICAgKlxuICAgKiBUaGUgcmV0dXJuaW5nIGRpc3RhbmNlIGNhbiBiZSBuZWdhdGl2ZS5cbiAgICpcbiAgICogVGhlIGZpcnN0IHJldHVybmluZyB2YWx1ZSB3aWxsIGJlIHRoZSBkaXN0YW5jZSBvZiB0aGUgaW5jaWRlbnQgcG9pbnQuXG4gICAqIElmIHRoZSByYXkgZG9lcyBub3QgaW50ZXJzZWN0IHdpdGggc3BoZXJlLCBpdCB3aWxsIHJldHVybiBgbnVsbGAuXG4gICAqXG4gICAqIEBwYXJhbSBzcGhlcmUgQSB0YXJnZXQgc3BoZXJlXG4gICAqL1xuICBwdWJsaWMgZGlzdGFuY2VUb1NwaGVyZSggc3BoZXJlOiBTcGhlcmUzICk6IFsgbnVtYmVyLCBudW1iZXIgXSB8IG51bGwge1xuICAgIHJldHVybiByYXkzRGlzdGFuY2VUb1NwaGVyZSggdGhpcy5yYXcsIHNwaGVyZS5yYXcgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHtAbGluayBSYXdSYXkzfSB0byBjbGFzcyBmb3JtLlxuICAgKiBAcGFyYW0gcmF5IEEge0BsaW5rIFJhd1JheTN9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21SYXcoIHJheTogUmF3UmF5MyApOiBSYXkzIHtcbiAgICByZXR1cm4gbmV3IFJheTMoIG5ldyBWZWN0b3IzKCByYXlbIDAgXSApLCBuZXcgVmVjdG9yMyggcmF5WyAxIF0gKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJheSBvdXQgb2YgYSBsaW5lLlxuICAgKlxuICAgKiBAcGFyYW0gbGluZSBBIHtAbGluayBMaW5lM31cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUxpbmUzKCBsaW5lOiBMaW5lMyApOiBSYXkzIHtcbiAgICByZXR1cm4gUmF5My5mcm9tUmF3KCByYXkzRnJvbUxpbmUzKCBsaW5lLnJhdyApICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IHZlYzNBcHBseU1hdHJpeDQgfSBmcm9tICcuLi92ZWMzL3ZlYzNBcHBseU1hdHJpeDQnO1xuaW1wb3J0IHR5cGUgeyBSYXdMaW5lMyB9IGZyb20gJy4vUmF3TGluZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9SYXdNYXRyaXg0JztcblxuLyoqXG4gKiBBcHBseSBnaXZlbiBtYXRyaXg0IHRvIGdpdmVuIGxpbmUuXG4gKlxuICogQHBhcmFtIGxpbmUgQSBsaW5lXG4gKiBAcGFyYW0gbWF0cml4IEEgbWF0cml4NCB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGxpbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmUzQXBwbHlNYXRyaXg0KFxuICBbIHN0YXJ0LCBlbmQgXTogUmF3TGluZTMsXG4gIG1hdHJpeDogUmF3TWF0cml4NCxcbik6IFJhd0xpbmUzIHtcbiAgcmV0dXJuIFtcbiAgICB2ZWMzQXBwbHlNYXRyaXg0KCBzdGFydCwgbWF0cml4ICksXG4gICAgdmVjM0FwcGx5TWF0cml4NCggZW5kLCBtYXRyaXggKSxcbiAgXTtcbn1cbiIsImltcG9ydCB7IHZlY0FkZCB9IGZyb20gJy4uL3ZlYy92ZWNBZGQnO1xuaW1wb3J0IHsgdmVjU2NhbGUgfSBmcm9tICcuLi92ZWMvdmVjU2NhbGUnO1xuaW1wb3J0IHR5cGUgeyBSYXdMaW5lMyB9IGZyb20gJy4vUmF3TGluZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBSZXR1cm4gYSB2ZWN0b3IgdGhhdCByZXByZXNlbnRzIGEgY2VydGFpbiBwb2ludCBvZiBnaXZlbiBsaW5lLlxuICogU2FtZSBhcyBzdGFydCBhdCB0ID0gMCwgc2FtZSBhcyBlbmQgYXQgdCA9IDEuXG4gKlxuICogQHBhcmFtIGxpbmUgQSBsaW5lXG4gKiBAcGFyYW0gdCBBIHBhcmFtZXRlciB0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5lM0F0KCBsaW5lOiBSYXdMaW5lMywgdDogbnVtYmVyICk6IFJhd1ZlY3RvcjMge1xuICByZXR1cm4gdmVjQWRkKFxuICAgIHZlY1NjYWxlKCBsaW5lWyAwIF0sIDEuMCAtIHQgKSxcbiAgICB2ZWNTY2FsZSggbGluZVsgMSBdLCB0ICksXG4gICk7XG59XG4iLCJpbXBvcnQgeyBsaW5lM0F0IH0gZnJvbSAnLi9saW5lM0F0JztcbmltcG9ydCB7IHNhdHVyYXRlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgdmVjRG90IH0gZnJvbSAnLi4vdmVjL3ZlY0RvdCc7XG5pbXBvcnQgeyB2ZWNTdWIgfSBmcm9tICcuLi92ZWMvdmVjU3ViJztcbmltcG9ydCB0eXBlIHsgUmF3TGluZTMgfSBmcm9tICcuL1Jhd0xpbmUzJztcbmltcG9ydCB0eXBlIHsgUmF3VmVjdG9yMyB9IGZyb20gJy4uL3ZlYzMvUmF3VmVjdG9yMyc7XG5cbi8qKlxuICogUmV0dXJuIGEgcG9pbnQgdGhhdCBpcyBvbiB0aGUgZ2l2ZW4gbGluZSB3aGljaCBpcyBjbG9zZXN0IHRvIHRoZSBnaXZlbiBwb2ludC5cbiAqXG4gKiBJZiBgc2VnbWVudGAgaXMgdHJ1ZSwgaXQgd2lsbCB0cmVhdCB0aGUgbGluZSBhcyBhIHNlZ21lbnQgd2hpY2ggaGFzIHN0YXJ0IGFuZCBlbmQuXG4gKiBPdGhlcndpc2UgaXQgd2lsbCB0cmVhdCB0aGUgbGluZSBpcyBpbmZpbml0ZS5cbiAqXG4gKiBAcGFyYW0gbGluZSBBIGxpbmVcbiAqIEBwYXJhbSBwb2ludCBBIHBvaW50XG4gKiBAcGFyYW0gc2VnbWVudCBJcyB0aGUgbGluZSBhIHNlZ21lbnQ/XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5lM0Nsb3Nlc3RQb2ludFRvUG9pbnQoXG4gIGxpbmU6IFJhd0xpbmUzLFxuICBwb2ludDogUmF3VmVjdG9yMyxcbiAgc2VnbWVudD86IGJvb2xlYW4sXG4pOiBSYXdWZWN0b3IzIHtcbiAgY29uc3QgYXAgPSB2ZWNTdWIoIHBvaW50LCBsaW5lWyAwIF0gKTtcbiAgY29uc3QgYWIgPSB2ZWNTdWIoIGxpbmVbIDEgXSwgbGluZVsgMCBdICk7XG5cbiAgbGV0IHQgPSB2ZWNEb3QoIGFwLCBhYiApIC8gdmVjRG90KCBhYiwgYWIgKTtcbiAgc2VnbWVudCAmJiAoIHQgPSBzYXR1cmF0ZSggdCApICk7XG5cbiAgcmV0dXJuIGxpbmUzQXQoIGxpbmUsIHQgKTtcbn1cbiIsImltcG9ydCB7IGxpbmUzQ2xvc2VzdFBvaW50VG9Qb2ludCB9IGZyb20gJy4vbGluZTNDbG9zZXN0UG9pbnRUb1BvaW50JztcbmltcG9ydCB7IHZlY0xlbmd0aCB9IGZyb20gJy4uL3ZlYy92ZWNMZW5ndGgnO1xuaW1wb3J0IHsgdmVjU3ViIH0gZnJvbSAnLi4vdmVjL3ZlY1N1Yic7XG5pbXBvcnQgdHlwZSB7IFJhd0xpbmUzIH0gZnJvbSAnLi9SYXdMaW5lMyc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIFJldHVybiBhIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIGxpbmUgdG8gdGhlIGdpdmVuIHBvaW50LlxuICpcbiAqIElmIGBzZWdtZW50YCBpcyB0cnVlLCBpdCB3aWxsIHRyZWF0IHRoZSBsaW5lIGFzIGEgc2VnbWVudCB3aGljaCBoYXMgc3RhcnQgYW5kIGVuZC5cbiAqIE90aGVyd2lzZSBpdCB3aWxsIHRyZWF0IHRoZSBsaW5lIGlzIGluZmluaXRlLlxuICpcbiAqIEBwYXJhbSBsaW5lIEEgbGluZVxuICogQHBhcmFtIHBvaW50IEEgcG9pbnRcbiAqIEBwYXJhbSBzZWdtZW50IElzIHRoZSBsaW5lIGEgc2VnbWVudD9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmUzRGlzdGFuY2VUb1BvaW50KFxuICBsaW5lOiBSYXdMaW5lMyxcbiAgcG9pbnQ6IFJhd1ZlY3RvcjMsXG4gIHNlZ21lbnQ/OiBib29sZWFuLFxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIHZlY0xlbmd0aCggdmVjU3ViKFxuICAgIGxpbmUzQ2xvc2VzdFBvaW50VG9Qb2ludCggbGluZSwgcG9pbnQsIHNlZ21lbnQgKSxcbiAgICBwb2ludCxcbiAgKSApO1xufVxuIiwiaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uL21hdDQvTWF0cml4NCc7XG5pbXBvcnQgeyBSYXkzIH0gZnJvbSAnLi4vcmF5My9SYXkzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1ZlY3RvcjMnO1xuaW1wb3J0IHsgbGluZTNBcHBseU1hdHJpeDQgfSBmcm9tICcuL2xpbmUzQXBwbHlNYXRyaXg0JztcbmltcG9ydCB7IGxpbmUzQXQgfSBmcm9tICcuL2xpbmUzQXQnO1xuaW1wb3J0IHsgbGluZTNDbG9zZXN0UG9pbnRUb1BvaW50IH0gZnJvbSAnLi9saW5lM0Nsb3Nlc3RQb2ludFRvUG9pbnQnO1xuaW1wb3J0IHsgbGluZTNEZWx0YSB9IGZyb20gJy4vbGluZTNEZWx0YSc7XG5pbXBvcnQgeyBsaW5lM0Rpc3RhbmNlVG9Qb2ludCB9IGZyb20gJy4vbGluZTNEaXN0YW5jZVRvUG9pbnQnO1xuaW1wb3J0IHR5cGUgeyBSYXdMaW5lMyB9IGZyb20gJy4vUmF3TGluZTMnO1xuXG4vKipcbiAqIEEgM0QgbGluZS5cbiAqL1xuZXhwb3J0IGNsYXNzIExpbmUzIHtcbiAgcHVibGljIHN0YXJ0OiBWZWN0b3IzO1xuICBwdWJsaWMgZW5kOiBWZWN0b3IzO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3RhcnQ6IFZlY3RvcjMgPSBWZWN0b3IzLnplcm8sIGVuZDogVmVjdG9yMyA9IFZlY3RvcjMuemVybyApIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5lbmQgPSBlbmQ7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCB7QGxpbmsgUmF3TGluZTN9IGZvcm0uXG4gICAqL1xuICBwdWJsaWMgZ2V0IHJhdygpOiBSYXdMaW5lMyB7XG4gICAgcmV0dXJuIFsgdGhpcy5zdGFydC5lbGVtZW50cywgdGhpcy5lbmQuZWxlbWVudHMgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IGEgcmF5LlxuICAgKi9cbiAgcHVibGljIGdldCByYXkoKTogUmF5MyB7XG4gICAgcmV0dXJuIFJheTMuZnJvbUxpbmUzKCB0aGlzICk7XG4gIH1cblxuICAvKipcbiAgICogQSB2ZWN0b3IgdGhhdCByZXByZXNlbnRzIGRlbHRhIG9mIHRoZSBsaW5lLlxuICAgKi9cbiAgcHVibGljIGRlbHRhKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyggbGluZTNEZWx0YSggdGhpcy5yYXcgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0cyBsZW5ndGguXG4gICAqL1xuICBwdWJsaWMgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZGVsdGEubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHZlY3RvciB0aGF0IHJlcHJlc2VudHMgYSBjZXJ0YWluIHBvaW50IG9mIHRoZSBsaW5lLlxuICAgKiBTYW1lIGFzIHN0YXJ0IGF0IHQgPSAwLCBzYW1lIGFzIGVuZCBhdCB0ID0gMS5cbiAgICpcbiAgICogQHBhcmFtIHQgQSBwYXJhbWV0ZXIgdFxuICAgKi9cbiAgcHVibGljIGF0KCB0OiBudW1iZXIgKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKCBsaW5lM0F0KCB0aGlzLnJhdywgdCApICk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgZ2l2ZW4gbWF0cml4NCB0byB0aGUgbGluZS5cbiAgICpcbiAgICogQHBhcmFtIG1hdHJpeCBBIG1hdHJpeDQgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBsaW5lXG4gICAqL1xuICBwdWJsaWMgYXBwbHlNYXRyaXg0KCBtYXRyaXg6IE1hdHJpeDQgKTogTGluZTMge1xuICAgIHJldHVybiBMaW5lMy5mcm9tUmF3KFxuICAgICAgbGluZTNBcHBseU1hdHJpeDQoXG4gICAgICAgIHRoaXMucmF3LFxuICAgICAgICBtYXRyaXguZWxlbWVudHMsXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBwb2ludCB0aGF0IGlzIG9uIHRoZSBsaW5lIHdoaWNoIGlzIGNsb3Nlc3QgdG8gdGhlIGdpdmVuIHBvaW50LlxuICAgKlxuICAgKiBJZiBgc2VnbWVudGAgaXMgdHJ1ZSwgaXQgd2lsbCB0cmVhdCB0aGUgbGluZSBhcyBhIHNlZ21lbnQgd2hpY2ggaGFzIHN0YXJ0IGFuZCBlbmQuXG4gICAqIE90aGVyd2lzZSBpdCB3aWxsIHRyZWF0IHRoZSBsaW5lIGlzIGluZmluaXRlLlxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnQgQSBwb2ludFxuICAgKiBAcGFyYW0gc2VnbWVudCBJcyB0aGUgbGluZSBhIHNlZ21lbnQ/XG4gICAqL1xuICBwdWJsaWMgY2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQ6IFZlY3RvcjMsIHNlZ21lbnQ6IGJvb2xlYW4gKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKCBsaW5lM0Nsb3Nlc3RQb2ludFRvUG9pbnQoIHRoaXMucmF3LCBwb2ludC5lbGVtZW50cywgc2VnbWVudCApICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgZGlzdGFuY2UgZnJvbSB0aGUgbGluZSB0byB0aGUgZ2l2ZW4gcG9pbnQuXG4gICAqXG4gICAqIElmIGBzZWdtZW50YCBpcyB0cnVlLCBpdCB3aWxsIHRyZWF0IHRoZSBsaW5lIGFzIGEgc2VnbWVudCB3aGljaCBoYXMgc3RhcnQgYW5kIGVuZC5cbiAgICogT3RoZXJ3aXNlIGl0IHdpbGwgdHJlYXQgdGhlIGxpbmUgaXMgaW5maW5pdGUuXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludCBBIHBvaW50XG4gICAqIEBwYXJhbSBzZWdtZW50IElzIHRoZSBsaW5lIGEgc2VnbWVudD9cbiAgICovXG4gIHB1YmxpYyBkaXN0YW5jZVRvUG9pbnQoIHBvaW50OiBWZWN0b3IzLCBzZWdtZW50OiBib29sZWFuICk6IG51bWJlciB7XG4gICAgcmV0dXJuIGxpbmUzRGlzdGFuY2VUb1BvaW50KCB0aGlzLnJhdywgcG9pbnQuZWxlbWVudHMsIHNlZ21lbnQgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHtAbGluayBSYXdMaW5lM30gdG8gY2xhc3MgZm9ybS5cbiAgICogQHBhcmFtIGxpbmUgQSB7QGxpbmsgUmF3TGluZTN9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21SYXcoIGxpbmU6IFJhd0xpbmUzICk6IExpbmUzIHtcbiAgICByZXR1cm4gbmV3IExpbmUzKCBuZXcgVmVjdG9yMyggbGluZVsgMCBdICksIG5ldyBWZWN0b3IzKCBsaW5lWyAxIF0gKSApO1xuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDIgfSBmcm9tICcuL1Jhd01hdHJpeDInO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0MkRldGVybWluYW50KCBtOiBSYXdNYXRyaXgyICk6IG51bWJlciB7XG4gIHJldHVybiBtWyAwIF0gKiBtWyAzIF0gLSBtWyAyIF0gKiBtWyAxIF07XG59XG4iLCJpbXBvcnQgeyB2ZWNTY2FsZSB9IGZyb20gJy4uL3ZlYy92ZWNTY2FsZSc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDIgfSBmcm9tICcuL1Jhd01hdHJpeDInO1xuXG4vKipcbiAqIFJldHVybiBhbiBpbnZlcnNlIG9mIGdpdmVuIG1hdHJpeC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDJJbnZlcnNlKCBtOiBSYXdNYXRyaXgyICk6IFJhd01hdHJpeDIge1xuICBjb25zdFxuICAgIG4xMSA9IG1bIDAgXSwgbjIxID0gbVsgMSBdLFxuICAgIG4xMiA9IG1bIDIgXSwgbjIyID0gbVsgMyBdLFxuICAgIGRldCA9IG4xMSAqIG4yMiAtIG4xMiAqIG4yMTtcblxuICBpZiAoIGRldCA9PT0gMC4wICkgeyByZXR1cm4gdmVjU2NhbGUoIG0sIDAuMCApOyB9XG5cbiAgcmV0dXJuIHZlY1NjYWxlKCBbXG4gICAgbjIyLCAtbjIxLFxuICAgIC1uMTIsIG4xMSxcbiAgXSwgMS4wIC8gZGV0ICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd01hdHJpeDIgfSBmcm9tICcuL1Jhd01hdHJpeDInO1xuXG4vKipcbiAqIFJldHVybiBhIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiBtYXRyaWNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdDJNdWx0aXBseSggLi4ubWF0czogUmF3TWF0cml4MltdICk6IFJhd01hdHJpeDIge1xuICBpZiAoIG1hdHMubGVuZ3RoIDwgMiApIHtcbiAgICByZXR1cm4gbWF0c1sgMCBdO1xuICB9XG5cbiAgY29uc3QgYSA9IG1hdHMuc2hpZnQoKSE7XG4gIGNvbnN0IGIgPSBtYXQyTXVsdGlwbHkoIC4uLm1hdHMgKTtcbiAgY29uc3RcbiAgICBhMDAgPSBhWyAwIF0sIGEwMSA9IGFbIDEgXSxcbiAgICBhMTAgPSBhWyAyIF0sIGExMSA9IGFbIDMgXSxcbiAgICBiMDAgPSBiWyAwIF0sIGIwMSA9IGJbIDEgXSxcbiAgICBiMTAgPSBiWyAyIF0sIGIxMSA9IGJbIDMgXTtcblxuICByZXR1cm4gW1xuICAgIGEwMCAqIGIwMCArIGExMCAqIGIwMSxcbiAgICBhMDEgKiBiMDAgKyBhMTEgKiBiMDEsXG5cbiAgICBhMDAgKiBiMTAgKyBhMTAgKiBiMTEsXG4gICAgYTAxICogYjEwICsgYTExICogYjExLFxuICBdO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXgyIH0gZnJvbSAnLi9SYXdNYXRyaXgyJztcblxuLyoqXG4gKiBUcmFuc3Bvc2UgYSBtYXQyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0MlRyYW5zcG9zZShcbiAgc291cmNlOiBSYXdNYXRyaXgyLFxuKTogUmF3TWF0cml4MiB7XG4gIHJldHVybiBbXG4gICAgc291cmNlWyAwIF0sIHNvdXJjZVsgMiBdLFxuICAgIHNvdXJjZVsgMSBdLCBzb3VyY2VbIDMgXSxcbiAgXTtcbn1cbiIsImltcG9ydCB7IG1hdDJEZXRlcm1pbmFudCB9IGZyb20gJy4vbWF0MkRldGVybWluYW50JztcbmltcG9ydCB7IG1hdDJJbnZlcnNlIH0gZnJvbSAnLi9tYXQySW52ZXJzZSc7XG5pbXBvcnQgeyBtYXQyTXVsdGlwbHkgfSBmcm9tICcuL21hdDJNdWx0aXBseSc7XG5pbXBvcnQgeyBtYXQyVHJhbnNwb3NlIH0gZnJvbSAnLi9tYXQyVHJhbnNwb3NlJztcbmltcG9ydCB7IHZlY1NjYWxlIH0gZnJvbSAnLi4vdmVjL3ZlY1NjYWxlJztcbmltcG9ydCB0eXBlIHsgUmF3TWF0cml4MiB9IGZyb20gJy4vUmF3TWF0cml4Mic7XG5cbmNvbnN0IHJhd0lkZW50aXR5TWF0cml4MjogUmF3TWF0cml4MiA9IFtcbiAgMS4wLCAwLjAsXG4gIDAuMCwgMS4wLFxuXTtcblxuLyoqXG4gKiBBIE1hdHJpeDIuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRyaXgyIHtcbiAgcHVibGljIGVsZW1lbnRzOiBSYXdNYXRyaXgyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdjogUmF3TWF0cml4MiA9IHJhd0lkZW50aXR5TWF0cml4MiApIHtcbiAgICB0aGlzLmVsZW1lbnRzID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdHNlbGYgYnV0IHRyYW5zcG9zZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHRyYW5zcG9zZSgpOiBNYXRyaXgyIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDIoIG1hdDJUcmFuc3Bvc2UoIHRoaXMuZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0cyBkZXRlcm1pbmFudC5cbiAgICovXG4gIHB1YmxpYyBnZXQgZGV0ZXJtaW5hbnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbWF0MkRldGVybWluYW50KCB0aGlzLmVsZW1lbnRzICk7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCBpbnZlcnRlZC5cbiAgICovXG4gIHB1YmxpYyBnZXQgaW52ZXJzZSgpOiBNYXRyaXgyIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDIoIG1hdDJJbnZlcnNlKCB0aGlzLmVsZW1lbnRzICkgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IG0gPSB0aGlzLmVsZW1lbnRzLm1hcCggKCB2ICkgPT4gdi50b0ZpeGVkKCAzICkgKTtcbiAgICByZXR1cm4gYE1hdHJpeDIoICR7IG1bIDAgXSB9LCAkeyBtWyAyIF0gfTsgJHsgbVsgMSBdIH0sICR7IG1bIDMgXSB9IClgO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogTWF0cml4MiB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgyKCB0aGlzLmVsZW1lbnRzLmNvbmNhdCgpIGFzIFJhd01hdHJpeDIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBseSB0aGlzIE1hdHJpeDIgYnkgb25lIG9yIG1vcmUgTWF0cml4MnMuXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHkoIC4uLm1hdHJpY2VzOiBNYXRyaXgyW10gKTogTWF0cml4MiB7XG4gICAgcmV0dXJuIE1hdHJpeDIubXVsdGlwbHkoIHRoaXMsIC4uLm1hdHJpY2VzICk7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgdGhpcyBNYXRyaXgzIGJ5IGEgc2NhbGFyLlxuICAgKi9cbiAgcHVibGljIHNjYWxlU2NhbGFyKCBzY2FsYXI6IG51bWJlciApOiBNYXRyaXgyIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDIoIHZlY1NjYWxlKCB0aGlzLmVsZW1lbnRzLCBzY2FsYXIgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGlkZW50aXR5IE1hdHJpeDQuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldCBpZGVudGl0eSgpOiBNYXRyaXgyIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeDIoIHJhd0lkZW50aXR5TWF0cml4MiApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IHR3byBvciBtb3JlIG1hdHJpY2VzLlxuICAgKiBAcGFyYW0gbWF0cmljZXMgTWF0cmljZXNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbXVsdGlwbHkoIC4uLm1hdHJpY2VzOiBNYXRyaXgyW10gKTogTWF0cml4MiB7XG4gICAgaWYgKCBtYXRyaWNlcy5sZW5ndGggPT09IDAgKSB7XG4gICAgICByZXR1cm4gTWF0cml4Mi5pZGVudGl0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNYXRyaXgyKCBtYXQyTXVsdGlwbHkoIC4uLm1hdHJpY2VzLm1hcCggKCBtICkgPT4gbS5lbGVtZW50cyApICkgKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUmF3TWF0cml4MyB9IGZyb20gJy4uL21hdDMvUmF3TWF0cml4Myc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIEFwcGx5IGEgdmVjMyBhIG1hdDMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWMzQXBwbHlNYXRyaXgzKCB2OiBSYXdWZWN0b3IzLCBtOiBSYXdNYXRyaXgzICk6IFJhd1ZlY3RvcjMge1xuICByZXR1cm4gW1xuICAgIG1bIDAgXSAqIHZbIDAgXSArIG1bIDMgXSAqIHZbIDEgXSArIG1bIDYgXSAqIHZbIDIgXSxcbiAgICBtWyAxIF0gKiB2WyAwIF0gKyBtWyA0IF0gKiB2WyAxIF0gKyBtWyA3IF0gKiB2WyAyIF0sXG4gICAgbVsgMiBdICogdlsgMCBdICsgbVsgNSBdICogdlsgMSBdICsgbVsgOCBdICogdlsgMiBdLFxuICBdO1xufVxuIiwiaW1wb3J0IHsgdmVjM0FwcGx5TWF0cml4MyB9IGZyb20gJy4uL3ZlYzMvdmVjM0FwcGx5TWF0cml4Myc7XG5pbXBvcnQgeyB2ZWMzQXBwbHlNYXRyaXg0IH0gZnJvbSAnLi4vdmVjMy92ZWMzQXBwbHlNYXRyaXg0JztcbmltcG9ydCB7IHZlY0RvdCB9IGZyb20gJy4uL3ZlYy92ZWNEb3QnO1xuaW1wb3J0IHsgdmVjTm9ybWFsaXplIH0gZnJvbSAnLi4vdmVjL3ZlY05vcm1hbGl6ZSc7XG5pbXBvcnQgeyB2ZWNTY2FsZSB9IGZyb20gJy4uL3ZlYy92ZWNTY2FsZSc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuLi9tYXQzL1Jhd01hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9SYXdNYXRyaXg0JztcbmltcG9ydCB0eXBlIHsgUmF3UGxhbmUzIH0gZnJvbSAnLi9SYXdQbGFuZTMnO1xuXG4vKipcbiAqIEFwcGx5IGdpdmVuIG1hdHJpeDQgdG8gZ2l2ZW4gcGxhbmUuXG4gKlxuICogQHBhcmFtIHBsYW5lIEEgcGxhbmVcbiAqIEBwYXJhbSBtYXRyaXggQSBtYXRyaXg0IHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcGxhbmVcbiAqIEBwYXJhbSBub3JtYWxNYXRyaXggQSBub3JtYWxNYXRyaXggbWFkZSBvdXQgb2Yge0BsaW5rIG1hdHJpeH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBsYW5lM0FwcGx5TWF0cml4NChcbiAgWyBub3JtYWwsIGRpc3RhbmNlIF06IFJhd1BsYW5lMyxcbiAgbWF0cml4OiBSYXdNYXRyaXg0LFxuICBub3JtYWxNYXRyaXg6IFJhd01hdHJpeDMsXG4pOiBSYXdQbGFuZTMge1xuICAvLyBub3JtYWzjgarjgpPjgaDjgYvjgolub3JtYWxNYXRyaXjlvZPjgabjgozjgbDjg6jjgrfvvIFcbiAgY29uc3QgbmV3Tm9ybWFsID0gdmVjTm9ybWFsaXplKCB2ZWMzQXBwbHlNYXRyaXgzKCBub3JtYWwsIG5vcm1hbE1hdHJpeCApICk7XG5cbiAgLy8g44Go44KK44GC44GI44Ga5LiA54K56Kaz5ris44GX44Gm44GC44Go44GnZG905Y+W44KK55u044GX44Gh44KD44GK44GG44Gc77yBXG4gIGNvbnN0IGNvcGxhbmFyID0gdmVjU2NhbGUoIG5vcm1hbCwgLWRpc3RhbmNlICk7XG4gIGNvbnN0IHJlZlBvaW50ID0gdmVjM0FwcGx5TWF0cml4NCggY29wbGFuYXIsIG1hdHJpeCApO1xuICBjb25zdCBuZXdEaXN0YW5jZSA9IC12ZWNEb3QoIHJlZlBvaW50LCBub3JtYWwgKTtcblxuICByZXR1cm4gWyBuZXdOb3JtYWwsIG5ld0Rpc3RhbmNlIF07XG59XG4iLCJpbXBvcnQgeyB2ZWNEb3QgfSBmcm9tICcuLi92ZWMvdmVjRG90JztcbmltcG9ydCB0eXBlIHsgUmF3UGxhbmUzIH0gZnJvbSAnLi9SYXdQbGFuZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBSZXR1cm4gYSBzaWduZWQgZGlzdGFuY2UgZnJvbSBnaXZlbiBwbGFuZSB0byB0aGUgZ2l2ZW4gcG9pbnQuXG4gKiBNYWtlIHN1cmUgdGhlIGBub3JtYWxgIGlzIG5vcm1hbGl6ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbGFuZTNEaXN0YW5jZVRvUG9pbnQoXG4gIFsgbm9ybWFsLCBkaXN0YW5jZSBdOiBSYXdQbGFuZTMsXG4gIHBvaW50OiBSYXdWZWN0b3IzLFxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIHZlY0RvdCggbm9ybWFsLCBwb2ludCApICsgZGlzdGFuY2U7XG59XG4iLCJpbXBvcnQgeyB2ZWNMZW5ndGggfSBmcm9tICcuLi92ZWMvdmVjTGVuZ3RoJztcbmltcG9ydCB7IHZlY1NjYWxlIH0gZnJvbSAnLi4vdmVjL3ZlY1NjYWxlJztcbmltcG9ydCB0eXBlIHsgUmF3UGxhbmUzIH0gZnJvbSAnLi9SYXdQbGFuZTMnO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIGdpdmVuIHBsYW5lP1xuICogVGhpcyBub3JtYWxpemVzIHRoZSBub3JtYWwgYW5kIGFsc28gZGl2aWRlIGRpc3RhbmNlIGJ5IGl0cyBvcmlnaW5hbCBub3JtYWwgbGVuZ3RoLlxuICpcbiAqIEkgZG9uJ3QgY29tZSB1cCB3aXRoIGFueSB1c2UgY2FzZXMgb3RoZXIgdGhhbiB7QGxpbmsgcGxhbmVzRnJvbVByb2plY3Rpb25NYXRyaXh9LlxuICpcbiAqIEBwYXJhbSBwbGFuZSBUaGUgcGxhbmUgeW91IHdhbnQgdG8gbm9ybWFsaXplXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbGFuZTNOb3JtYWxpemUoIFsgbm9ybWFsLCBkaXN0YW5jZSBdOiBSYXdQbGFuZTMgKTogUmF3UGxhbmUzIHtcbiAgY29uc3QgaW52TCA9IDEuMCAvIHZlY0xlbmd0aCggbm9ybWFsICk7XG4gIHJldHVybiBbIHZlY1NjYWxlKCBub3JtYWwsIGludkwgKSwgZGlzdGFuY2UgKiBpbnZMIF07XG59XG4iLCJpbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vbWF0My9NYXRyaXgzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi9tYXQ0L01hdHJpeDQnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL3ZlYzMvVmVjdG9yMyc7XG5pbXBvcnQgeyBwbGFuZTNBcHBseU1hdHJpeDQgfSBmcm9tICcuL3BsYW5lM0FwcGx5TWF0cml4NCc7XG5pbXBvcnQgeyBwbGFuZTNEaXN0YW5jZVRvUG9pbnQgfSBmcm9tICcuL3BsYW5lM0Rpc3RhbmNlVG9Qb2ludCc7XG5pbXBvcnQgeyBwbGFuZTNOb3JtYWxpemUgfSBmcm9tICcuL3BsYW5lM05vcm1hbGl6ZSc7XG5pbXBvcnQgdHlwZSB7IFJhd1BsYW5lMyB9IGZyb20gJy4vUmF3UGxhbmUzJztcblxuLyoqXG4gKiBBIDNEIHBsYW5lLlxuICovXG5leHBvcnQgY2xhc3MgUGxhbmUzIHtcbiAgcHVibGljIG5vcm1hbDogVmVjdG9yMztcbiAgcHVibGljIGRpc3RhbmNlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEl0c2VsZiBidXQge0BsaW5rIFJhd1BsYW5lM30gZm9ybS5cbiAgICovXG4gIHB1YmxpYyBnZXQgcmF3KCk6IFJhd1BsYW5lMyB7XG4gICAgcmV0dXJuIFsgdGhpcy5ub3JtYWwuZWxlbWVudHMsIHRoaXMuZGlzdGFuY2UgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVkIHBsYW5lP1xuICAgKiBUaGlzIG5vcm1hbGl6ZXMgdGhlIG5vcm1hbCBhbmQgYWxzbyBkaXZpZGUgZGlzdGFuY2UgYnkgaXRzIG9yaWdpbmFsIG5vcm1hbCBsZW5ndGguXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5vcm1hbGl6ZWQoKTogUGxhbmUzIHtcbiAgICByZXR1cm4gUGxhbmUzLmZyb21SYXcoIHBsYW5lM05vcm1hbGl6ZSggdGhpcy5yYXcgKSApO1xuICB9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBub3JtYWw6IFZlY3RvcjMgPSBWZWN0b3IzLnB6LCBkaXN0YW5jZSA9IDAuMCApIHtcbiAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbDtcbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgZ2l2ZW4gbWF0cml4NCB0byB0aGUgcGxhbmUuXG4gICAqXG4gICAqIEBwYXJhbSBtYXRyaXggQSBtYXRyaXg0IHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcGxhbmVcbiAgICogQHBhcmFtIG5vcm1hbE1hdHJpeCBBIG5vcm1hbE1hdHJpeCBtYWRlIG91dCBvZiB7QGxpbmsgbWF0cml4fS4gT3B0aW9uYWxcbiAgICovXG4gIHB1YmxpYyBhcHBseU1hdHJpeDQoIG1hdHJpeDogTWF0cml4NCwgbm9ybWFsTWF0cml4PzogTWF0cml4MyApOiBQbGFuZTMge1xuICAgIHJldHVybiBQbGFuZTMuZnJvbVJhdyhcbiAgICAgIHBsYW5lM0FwcGx5TWF0cml4NChcbiAgICAgICAgdGhpcy5yYXcsXG4gICAgICAgIG1hdHJpeC5lbGVtZW50cyxcbiAgICAgICAgbm9ybWFsTWF0cml4Py5lbGVtZW50cyA/PyBtYXRyaXgubm9ybWFsTWF0cml4LmVsZW1lbnRzLFxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgc2lnbmVkIGRpc3RhbmNlIGZyb20gZ2l2ZW4gcGxhbmUgdG8gdGhlIGdpdmVuIHBvaW50LlxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnQgQSBwb2ludFxuICAgKi9cbiAgcHVibGljIGRpc3RhbmNlVG9Qb2ludCggcG9pbnQ6IFZlY3RvcjMgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGxhbmUzRGlzdGFuY2VUb1BvaW50KCB0aGlzLnJhdywgcG9pbnQuZWxlbWVudHMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHtAbGluayBSYXdQbGFuZTN9IHRvIGNsYXNzIGZvcm0uXG4gICAqIEBwYXJhbSBwbGFuZSBBIHtAbGluayBSYXdQbGFuZTN9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21SYXcoIHBsYW5lOiBSYXdQbGFuZTMgKTogUGxhbmUzIHtcbiAgICByZXR1cm4gbmV3IFBsYW5lMyggbmV3IFZlY3RvcjMoIHBsYW5lWyAwIF0gKSwgcGxhbmVbIDEgXSApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBwbGFuZTNEaXN0YW5jZVRvUG9pbnQgfSBmcm9tICcuL3BsYW5lM0Rpc3RhbmNlVG9Qb2ludCc7XG5pbXBvcnQgdHlwZSB7IFJhd1BsYW5lMyB9IGZyb20gJy4vUmF3UGxhbmUzJztcbmltcG9ydCB0eXBlIHsgUmF3VmVjdG9yMyB9IGZyb20gJy4uL3ZlYzMvUmF3VmVjdG9yMyc7XG5cbi8qKlxuICogVGVzdCBpZiBnaXZlbiBwb2ludCBpcyBjb250YWluZWQgaW4gZ2l2ZW4gcGxhbmVzIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gcGxhbmVzIEEgbGlzdCBvZiBwbGFuZXNcbiAqIEBwYXJhbSBwb2ludCBBIHBvaW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbGFuZXMzQ29udGFpblBvaW50KCBwbGFuZXM6IFJhd1BsYW5lM1tdLCBwb2ludDogUmF3VmVjdG9yMyApOiBib29sZWFuIHtcbiAgcmV0dXJuIHBsYW5lcy5ldmVyeSggKCBwbGFuZSApID0+IHBsYW5lM0Rpc3RhbmNlVG9Qb2ludCggcGxhbmUsIHBvaW50ICkgPj0gMC4wICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJhd0JveDMgfSBmcm9tICcuLi9ib3gzL1Jhd0JveDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdQbGFuZTMgfSBmcm9tICcuL1Jhd1BsYW5lMyc7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzZXQgb2YgcGxhbmUzIG91dCBvZiBhIHtAbGluayBSYXdCb3gzfS5cbiAqXG4gKiBAcGFyYW0gYm94IEEgYm94XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbGFuZXMzRnJvbUJveDMoIGJveDogUmF3Qm94MyApOiBSYXdQbGFuZTNbXSB7XG4gIHJldHVybiBbXG4gICAgWyBbIDEuMCwgMC4wLCAwLjAgXSwgLWJveFsgMCBdWyAwIF0gXSwgLy8geG5cbiAgICBbIFsgLTEuMCwgMC4wLCAwLjAgXSwgYm94WyAxIF1bIDAgXSBdLCAvLyB4cFxuICAgIFsgWyAwLjAsIDEuMCwgMC4wIF0sIC1ib3hbIDAgXVsgMSBdIF0sIC8vIHluXG4gICAgWyBbIDAuMCwgLTEuMCwgMC4wIF0sIGJveFsgMSBdWyAxIF0gXSwgLy8geXBcbiAgICBbIFsgMC4wLCAwLjAsIDEuMCBdLCAtYm94WyAwIF1bIDIgXSBdLCAvLyB5blxuICAgIFsgWyAwLjAsIDAuMCwgLTEuMCBdLCBib3hbIDEgXVsgMiBdIF0sIC8vIHlwXG4gIF07XG59XG4iLCJpbXBvcnQgeyBwbGFuZTNOb3JtYWxpemUgfSBmcm9tICcuL3BsYW5lM05vcm1hbGl6ZSc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDQgfSBmcm9tICcuLi9tYXQ0L1Jhd01hdHJpeDQnO1xuaW1wb3J0IHR5cGUgeyBSYXdQbGFuZTMgfSBmcm9tICcuL1Jhd1BsYW5lMyc7XG5cbi8qKlxuICogQ3JlYXRlIGZydXN0dW0gcGxhbmVzIG91dCBvZiBnaXZlbiBwcm9qZWN0aW9uIG1hdHJpeC5cbiAqXG4gKiBAcGFyYW0gbSBBIHByb2plY3Rpb24gbWF0cml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbGFuZXMzRnJvbVByb2plY3Rpb25NYXRyaXgoIG06IFJhd01hdHJpeDQgKTogUmF3UGxhbmUzW10ge1xuICBjb25zdFxuICAgIG0xMSA9IG1bIDAgXSwgbTEyID0gbVsgNCBdLCBtMTMgPSBtWyA4IF0sIG0xNCA9IG1bIDEyIF0sXG4gICAgbTIxID0gbVsgMSBdLCBtMjIgPSBtWyA1IF0sIG0yMyA9IG1bIDkgXSwgbTI0ID0gbVsgMTMgXSxcbiAgICBtMzEgPSBtWyAyIF0sIG0zMiA9IG1bIDYgXSwgbTMzID0gbVsgMTAgXSwgbTM0ID0gbVsgMTQgXSxcbiAgICBtNDEgPSBtWyAzIF0sIG00MiA9IG1bIDcgXSwgbTQzID0gbVsgMTEgXSwgbTQ0ID0gbVsgMTUgXTtcblxuICByZXR1cm4gW1xuICAgIHBsYW5lM05vcm1hbGl6ZSggWyBbIG00MSAtIG0xMSwgbTQyIC0gbTEyLCBtNDMgLSBtMTMgXSwgbTQ0IC0gbTE0IF0gKSwgLy8geHBcbiAgICBwbGFuZTNOb3JtYWxpemUoIFsgWyBtNDEgKyBtMTEsIG00MiArIG0xMiwgbTQzICsgbTEzIF0sIG00NCArIG0xNCBdICksIC8vIHhuXG4gICAgcGxhbmUzTm9ybWFsaXplKCBbIFsgbTQxIC0gbTIxLCBtNDIgLSBtMjIsIG00MyAtIG0yMyBdLCBtNDQgLSBtMjQgXSApLCAvLyB5cFxuICAgIHBsYW5lM05vcm1hbGl6ZSggWyBbIG00MSArIG0yMSwgbTQyICsgbTIyLCBtNDMgKyBtMjMgXSwgbTQ0ICsgbTI0IF0gKSwgLy8geW5cbiAgICBwbGFuZTNOb3JtYWxpemUoIFsgWyBtNDEgLSBtMzEsIG00MiAtIG0zMiwgbTQzIC0gbTMzIF0sIG00NCAtIG0zNCBdICksIC8vIHpuXG4gICAgcGxhbmUzTm9ybWFsaXplKCBbIFsgbTQxICsgbTMxLCBtNDIgKyBtMzIsIG00MyArIG0zMyBdLCBtNDQgKyBtMzQgXSApLCAvLyB6cFxuICBdO1xufVxuIiwiaW1wb3J0IHsgcGxhbmUzRGlzdGFuY2VUb1BvaW50IH0gZnJvbSAnLi9wbGFuZTNEaXN0YW5jZVRvUG9pbnQnO1xuaW1wb3J0IHR5cGUgeyBSYXdCb3gzIH0gZnJvbSAnLi4vYm94My9SYXdCb3gzJztcbmltcG9ydCB0eXBlIHsgUmF3UGxhbmUzIH0gZnJvbSAnLi9SYXdQbGFuZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcblxuLyoqXG4gKiBUZXN0IGlmIGdpdmVuIGJveCBpbnRlcnNlY3RzIHdpdGggcGxhbmVzIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gcGxhbmVzIEEgbGlzdCBvZiBwbGFuZXNcbiAqIEBwYXJhbSBib3ggQSBib3gzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbGFuZXMzSW50ZXJzZWN0Qm94MyggcGxhbmVzOiBSYXdQbGFuZTNbXSwgYm94OiBSYXdCb3gzICk6IGJvb2xlYW4ge1xuICByZXR1cm4gcGxhbmVzLmV2ZXJ5KCAoIHBsYW5lICkgPT4ge1xuICAgIGNvbnN0IHYgPSBwbGFuZVsgMCBdLm1hcCggKCBuYywgaSApID0+IGJveFsgbmMgPiAwLjAgPyAxIDogMCBdWyBpIF0gKSBhcyBSYXdWZWN0b3IzO1xuICAgIHJldHVybiBwbGFuZTNEaXN0YW5jZVRvUG9pbnQoIHBsYW5lLCB2ICkgPj0gMC4wO1xuICB9ICk7XG59XG4iLCJpbXBvcnQgeyBSYXdTcGhlcmUzIH0gZnJvbSAnLi4vc3BoZXJlMy9SYXdTcGhlcmUzJztcbmltcG9ydCB7IHBsYW5lM0Rpc3RhbmNlVG9Qb2ludCB9IGZyb20gJy4vcGxhbmUzRGlzdGFuY2VUb1BvaW50JztcbmltcG9ydCB0eXBlIHsgUmF3UGxhbmUzIH0gZnJvbSAnLi9SYXdQbGFuZTMnO1xuXG4vKipcbiAqIFRlc3QgaWYgZ2l2ZW4gc3BoZXJlIGludGVyc2VjdHMgd2l0aCBwbGFuZXMgb3Igbm90LlxuICpcbiAqIEl0IGRvZXMgbm90IGRvIHN0cmljdCBpbnRlcnNlY3Rpb24gdGVzdCBidXQgc3RpbGwgc2hvdWxkIHdvcmsgd2VsbCB3aXRoIGZydXN0dW0gY3VsbCB1c2UgY2FzZXMuXG4gKiBTZWUgdGhlIHRlc3QgY2FzZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBwYXJhbSBwbGFuZXMgQSBsaXN0IG9mIHBsYW5lc1xuICogQHBhcmFtIHNwaGVyZSBBIHNwaGVyZTNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBsYW5lczNJbnRlcnNlY3RTcGhlcmUzKCBwbGFuZXM6IFJhd1BsYW5lM1tdLCBzcGhlcmU6IFJhd1NwaGVyZTMgKTogYm9vbGVhbiB7XG4gIHJldHVybiBwbGFuZXMuZXZlcnkoICggcGxhbmUgKSA9PiAoXG4gICAgcGxhbmUzRGlzdGFuY2VUb1BvaW50KCBwbGFuZSwgc3BoZXJlWyAwIF0gKSA+PSAtc3BoZXJlWyAxIF1cbiAgKSApO1xufVxuIiwiaW1wb3J0IHsgQm94MyB9IGZyb20gJy4uL2JveDMvQm94Myc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9NYXRyaXg0JztcbmltcG9ydCB7IFBsYW5lMyB9IGZyb20gJy4vUGxhbmUzJztcbmltcG9ydCB7IFNwaGVyZTMgfSBmcm9tICcuLi9zcGhlcmUzL1NwaGVyZTMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL3ZlYzMvVmVjdG9yMyc7XG5pbXBvcnQgeyBwbGFuZXMzQ29udGFpblBvaW50IH0gZnJvbSAnLi9wbGFuZXMzQ29udGFpblBvaW50JztcbmltcG9ydCB7IHBsYW5lczNGcm9tQm94MyB9IGZyb20gJy4vcGxhbmVzM0Zyb21Cb3gzJztcbmltcG9ydCB7IHBsYW5lczNGcm9tUHJvamVjdGlvbk1hdHJpeCB9IGZyb20gJy4vcGxhbmVzM0Zyb21Qcm9qZWN0aW9uTWF0cml4JztcbmltcG9ydCB7IHBsYW5lczNJbnRlcnNlY3RCb3gzIH0gZnJvbSAnLi9wbGFuZXMzSW50ZXJzZWN0Qm94Myc7XG5pbXBvcnQgeyBwbGFuZXMzSW50ZXJzZWN0U3BoZXJlMyB9IGZyb20gJy4vcGxhbmVzM0ludGVyc2VjdFNwaGVyZTMnO1xuaW1wb3J0IHR5cGUgeyBSYXdQbGFuZTMgfSBmcm9tICcuL1Jhd1BsYW5lMyc7XG5cbi8qKlxuICogQSBzZXQgb2Yge0BsaW5rIFBsYW5lM30uXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGFuZXMzIHtcbiAgcHVibGljIHBsYW5lczogUGxhbmUzW107XG5cbiAgLyoqXG4gICAqIEl0c2VsZiBidXQge0BsaW5rIFJhd1BsYW5lM31bXSBmb3JtLlxuICAgKi9cbiAgcHVibGljIGdldCByYXcoKTogUmF3UGxhbmUzW10ge1xuICAgIHJldHVybiB0aGlzLnBsYW5lcy5tYXAoICggcGxhbmUgKSA9PiBwbGFuZS5yYXcgKTtcbiAgfVxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcGxhbmVzOiBQbGFuZTNbXSApIHtcbiAgICB0aGlzLnBsYW5lcyA9IHBsYW5lcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IGlmIGdpdmVuIHBvaW50IGlzIGNvbnRhaW5lZCBpbiB0aGUgcGxhbmVzIG9yIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHBvaW50IEEgcG9pbnRcbiAgICovXG4gIHB1YmxpYyBjb250YWluUG9pbnQoIHBvaW50OiBWZWN0b3IzICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwbGFuZXMzQ29udGFpblBvaW50KCB0aGlzLnJhdywgcG9pbnQuZWxlbWVudHMgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IGlmIGdpdmVuIGJveCBpbnRlcnNlY3RzIHdpdGggdGhlIHBsYW5lcyBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSBib3ggQSBib3gzXG4gICAqL1xuICBwdWJsaWMgaW50ZXJzZWN0Qm94MyggYm94OiBCb3gzICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwbGFuZXMzSW50ZXJzZWN0Qm94MyggdGhpcy5yYXcsIGJveC5yYXcgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IGlmIGdpdmVuIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIHBsYW5lcyBvciBub3QuXG4gICAqXG4gICAqIEl0IGRvZXMgbm90IGRvIHN0cmljdCBpbnRlcnNlY3Rpb24gdGVzdCBidXQgc3RpbGwgc2hvdWxkIHdvcmsgd2VsbCB3aXRoIGZydXN0dW0gY3VsbCB1c2UgY2FzZXMuXG4gICAqIFNlZSB0aGUgdGVzdCBjYXNlIGZvciBtb3JlIGRldGFpbHMuXG4gICAqXG4gICAqIEBwYXJhbSBzcGhlcmUgQSBzcGhlcmUzXG4gICAqL1xuICBwdWJsaWMgaW50ZXJzZWN0U3BoZXJlMyggc3BoZXJlOiBTcGhlcmUzICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwbGFuZXMzSW50ZXJzZWN0U3BoZXJlMyggdGhpcy5yYXcsIHNwaGVyZS5yYXcgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHtAbGluayBSYXdQbGFuZTN9W10gdG8gY2xhc3MgZm9ybS5cbiAgICpcbiAgICogQHBhcmFtIHBsYW5lcyBBIHtAbGluayBSYXdQbGFuZTN9W11cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVJhdyggcGxhbmVzOiBSYXdQbGFuZTNbXSApOiBQbGFuZXMzIHtcbiAgICByZXR1cm4gbmV3IFBsYW5lczMoIHBsYW5lcy5tYXAoICggcGxhbmUgKSA9PiBQbGFuZTMuZnJvbVJhdyggcGxhbmUgKSApICk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBzZXQgb2YgcGxhbmUzIG91dCBvZiBhIHtAbGluayBSYXdCb3gzfS5cbiAgICpcbiAgICogQHBhcmFtIGJveCBBIGJveFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQm94MyggYm94OiBCb3gzICk6IFBsYW5lczMge1xuICAgIHJldHVybiBQbGFuZXMzLmZyb21SYXcoIHBsYW5lczNGcm9tQm94MyggYm94LnJhdyApICk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGZydXN0dW0gcGxhbmVzIG91dCBvZiBnaXZlbiBwcm9qZWN0aW9uIG1hdHJpeC5cbiAgICpcbiAgICogQHBhcmFtIG1hdHJpeCBBIHByb2plY3Rpb24gbWF0cml4XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21Qcm9qZWN0aW9uTWF0cml4KCBtYXRyaXg6IE1hdHJpeDQgKTogUGxhbmVzMyB7XG4gICAgcmV0dXJuIFBsYW5lczMuZnJvbVJhdyggcGxhbmVzM0Zyb21Qcm9qZWN0aW9uTWF0cml4KCBtYXRyaXguZWxlbWVudHMgKSApO1xuICB9XG59XG4iLCJpbXBvcnQgeyB2ZWNMZW5ndGhTcSB9IGZyb20gJy4uL3ZlYy92ZWNMZW5ndGhTcSc7XG5pbXBvcnQgeyB2ZWNTdWIgfSBmcm9tICcuLi92ZWMvdmVjU3ViJztcbmltcG9ydCB0eXBlIHsgUmF3U3BoZXJlMyB9IGZyb20gJy4vUmF3U3BoZXJlMyc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjMgfSBmcm9tICcuLi92ZWMzL1Jhd1ZlY3RvcjMnO1xuXG4vKipcbiAqIFRlc3QgaWYgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIGluIGdpdmVuIHNwaGVyZSBvciBub3QuXG4gKiBAcGFyYW0gc3BoZXJlIEEgc3BoZXJlXG4gKiBAcGFyYW0gcG9pbnQgQSBwb2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BoZXJlM0NvbnRhaW5zUG9pbnQoIHNwaGVyZTogUmF3U3BoZXJlMywgcG9pbnQ6IFJhd1ZlY3RvcjMgKTogYm9vbGVhbiB7XG4gIHJldHVybiB2ZWNMZW5ndGhTcSggdmVjU3ViKCBzcGhlcmVbIDAgXSwgcG9pbnQgKSApIDw9IHNwaGVyZVsgMSBdICogc3BoZXJlWyAxIF07XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9WZWN0b3IzJztcbmltcG9ydCB7IHNwaGVyZTNDb250YWluc1BvaW50IH0gZnJvbSAnLi9zcGhlcmUzQ29udGFpbnNQb2ludCc7XG5pbXBvcnQgdHlwZSB7IFJhd1NwaGVyZTMgfSBmcm9tICcuL1Jhd1NwaGVyZTMnO1xuXG4vKipcbiAqIEEgM0Qgc3BoZXJlLlxuICovXG5leHBvcnQgY2xhc3MgU3BoZXJlMyB7XG4gIHB1YmxpYyBvcmlnaW46IFZlY3RvcjM7XG4gIHB1YmxpYyByYWRpdXM6IG51bWJlcjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9yaWdpbjogVmVjdG9yMyA9IFZlY3RvcjMuemVybywgcmFkaXVzOiBudW1iZXIgPSAwLjAgKSB7XG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47XG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gIH1cblxuICAvKipcbiAgICogSXRzZWxmIGJ1dCB7QGxpbmsgUmF3U3BoZXJlM30gZm9ybS5cbiAgICovXG4gIHB1YmxpYyBnZXQgcmF3KCk6IFJhd1NwaGVyZTMge1xuICAgIHJldHVybiBbIHRoaXMub3JpZ2luLmVsZW1lbnRzLCB0aGlzLnJhZGl1cyBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlc3QgaWYgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIGluIHRoZSBzcGhlcmUgb3Igbm90LlxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnQgQSBwb2ludFxuICAgKi9cbiAgcHVibGljIGNvbnRhaW5zUG9pbnQoIHBvaW50OiBWZWN0b3IzICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzcGhlcmUzQ29udGFpbnNQb2ludCggdGhpcy5yYXcsIHBvaW50LmVsZW1lbnRzICk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB7QGxpbmsgUmF3U3BoZXJlM30gdG8gY2xhc3MgZm9ybS5cbiAgICogQHBhcmFtIHNwaGVyZSBBIHtAbGluayBSYXdTcGhlcmUzfVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tUmF3KCBzcGhlcmU6IFJhd1NwaGVyZTMgKTogU3BoZXJlMyB7XG4gICAgcmV0dXJuIG5ldyBTcGhlcmUzKCBuZXcgVmVjdG9yMyggc3BoZXJlWyAwIF0gKSwgc3BoZXJlWyAxIF0gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgdmVjM0FwcGx5TWF0cml4MyB9IGZyb20gJy4uL3ZlYzMvdmVjM0FwcGx5TWF0cml4Myc7XG5pbXBvcnQgdHlwZSB7IFJhd01hdHJpeDMgfSBmcm9tICcuLi9tYXQzL1Jhd01hdHJpeDMnO1xuaW1wb3J0IHR5cGUgeyBSYXdWZWN0b3IzIH0gZnJvbSAnLi4vdmVjMy9SYXdWZWN0b3IzJztcbmltcG9ydCB0eXBlIHsgUmF3VmVjdG9yNCB9IGZyb20gJy4vUmF3VmVjdG9yNCc7XG5cbi8qKlxuICogQXBwbHkgYSB2ZWM0IGEgbWF0MyAod2l0aCBhbiBpbXBsaWNpdCAxIG9uIG00NCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZWM0QXBwbHlNYXRyaXgzKCB2OiBSYXdWZWN0b3I0LCBtOiBSYXdNYXRyaXgzICk6IFJhd1ZlY3RvcjQge1xuICBjb25zdCB2MzogUmF3VmVjdG9yMyA9IFsgdlsgMCBdLCB2WyAxIF0sIHZbIDIgXSBdO1xuICBjb25zdCB4eXogPSB2ZWMzQXBwbHlNYXRyaXgzKCB2MywgbSApO1xuICBjb25zdCB3ID0gdlsgMyBdO1xuICByZXR1cm4gWyB4eXpbIDAgXSwgeHl6WyAxIF0sIHh5elsgMiBdLCB3IF07XG59XG4iLCJpbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vbWF0NC9NYXRyaXg0JztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlYy9WZWN0b3InO1xuaW1wb3J0IHsgdmVjNEFwcGx5TWF0cml4MyB9IGZyb20gJy4vdmVjNEFwcGx5TWF0cml4Myc7XG5pbXBvcnQgeyB2ZWM0QXBwbHlNYXRyaXg0IH0gZnJvbSAnLi92ZWM0QXBwbHlNYXRyaXg0JztcbmltcG9ydCB0eXBlIHsgTWF0cml4MyB9IGZyb20gJy4uL21hdDMvTWF0cml4Myc7XG5pbXBvcnQgdHlwZSB7IFJhd1ZlY3RvcjQgfSBmcm9tICcuL1Jhd1ZlY3RvcjQnO1xuXG4vKipcbiAqIEEgVmVjdG9yMy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZlY3RvcjQgZXh0ZW5kcyBWZWN0b3I8VmVjdG9yND4ge1xuICBwdWJsaWMgZWxlbWVudHM6IFJhd1ZlY3RvcjQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2OiBSYXdWZWN0b3I0ID0gWyAwLjAsIDAuMCwgMC4wLCAwLjAgXSApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZWxlbWVudHMgPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIHggY29tcG9uZW50IG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1sgMCBdO1xuICB9XG5cbiAgcHVibGljIHNldCB4KCB4OiBudW1iZXIgKSB7XG4gICAgdGhpcy5lbGVtZW50c1sgMCBdID0geDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHkgY29tcG9uZW50IG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1sgMSBdO1xuICB9XG5cbiAgcHVibGljIHNldCB5KCB5OiBudW1iZXIgKSB7XG4gICAgdGhpcy5lbGVtZW50c1sgMSBdID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHogY29tcG9uZW50IG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHooKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1sgMiBdO1xuICB9XG5cbiAgcHVibGljIHNldCB6KCB6OiBudW1iZXIgKSB7XG4gICAgdGhpcy5lbGVtZW50c1sgMiBdID0gejtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHcgY29tcG9uZW50IG9mIHRoaXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHcoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50c1sgMyBdO1xuICB9XG5cbiAgcHVibGljIHNldCB3KCB6OiBudW1iZXIgKSB7XG4gICAgdGhpcy5lbGVtZW50c1sgMyBdID0gejtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVmVjdG9yNCggJHsgdGhpcy54LnRvRml4ZWQoIDMgKSB9LCAkeyB0aGlzLnkudG9GaXhlZCggMyApIH0sICR7IHRoaXMuei50b0ZpeGVkKCAzICkgfSwgJHsgdGhpcy53LnRvRml4ZWQoIDMgKSB9IClgO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IHRoaXMgdmVjdG9yIGEgbWF0MyAod2l0aCBhbiBpbXBsaWNpdCAxIG9uIG00NCkuXG4gICAqL1xuICBwdWJsaWMgYXBwbHlNYXRyaXgzKCBtYXRyaXg6IE1hdHJpeDMgKTogVmVjdG9yNCB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3I0KCB2ZWM0QXBwbHlNYXRyaXgzKCB0aGlzLmVsZW1lbnRzLCBtYXRyaXguZWxlbWVudHMgKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IHRoaXMgdmVjdG9yIGJ5IGEgbWF0NC5cbiAgICovXG4gIHB1YmxpYyBhcHBseU1hdHJpeDQoIG1hdHJpeDogTWF0cml4NCApOiBWZWN0b3I0IHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjQoIHZlYzRBcHBseU1hdHJpeDQoIHRoaXMuZWxlbWVudHMsIG1hdHJpeC5lbGVtZW50cyApICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX19uZXcoIHY6IFJhd1ZlY3RvcjQgKTogVmVjdG9yNCB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3I0KCB2ICk7XG4gIH1cblxuICAvKipcbiAgICogVmVjdG9yNCggMC4wLCAwLjAsIDAuMCwgMC4wIClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IHplcm8oKTogVmVjdG9yNCB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3I0KCBbIDAuMCwgMC4wLCAwLjAsIDAuMCBdICk7XG4gIH1cblxuICAvKipcbiAgICogVmVjdG9yNCggMS4wLCAxLjAsIDEuMCwgMS4wIClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IG9uZSgpOiBWZWN0b3I0IHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjQoIFsgMS4wLCAxLjAsIDEuMCwgMS4wIF0gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWlkaVBhcnNlUmVzdWx0LCBNaWRpUGFyc2VSZXN1bHRIZWFkZXIsIE1pZGlQYXJzZVJlc3VsdFRyYWNrIH0gZnJvbSAnLi9NaWRpUGFyc2VSZXN1bHQnO1xuaW1wb3J0IHsgYXJyYXlTZXJpYWwgfSBmcm9tICcuLi9hcnJheS9hcnJheVNlcmlhbCc7XG5cbmZ1bmN0aW9uIHJlYWRVOCggYXJyYXk6IFVpbnQ4QXJyYXksIGhlYWRCb3g6IFsgbnVtYmVyIF0gKTogbnVtYmVyIHtcbiAgcmV0dXJuIGFycmF5WyBoZWFkQm94WyAwIF0gKysgXTtcbn1cblxuLyoqXG4gKiBCaWcgZW5kaWFuXG4gKi9cbmZ1bmN0aW9uIHJlYWRVMTYoIGFycmF5OiBVaW50OEFycmF5LCBoZWFkQm94OiBbIG51bWJlciBdICk6IG51bWJlciB7XG4gIHJldHVybiByZWFkVTgoIGFycmF5LCBoZWFkQm94ICkgKiAyNTYgKyByZWFkVTgoIGFycmF5LCBoZWFkQm94ICk7XG59XG5cbi8qKlxuICogQmlnIGVuZGlhblxuICovXG5mdW5jdGlvbiByZWFkVTMyKCBhcnJheTogVWludDhBcnJheSwgaGVhZEJveDogWyBudW1iZXIgXSApOiBudW1iZXIge1xuICByZXR1cm4gcmVhZFUxNiggYXJyYXksIGhlYWRCb3ggKSAqIDY1NTM2ICsgcmVhZFUxNiggYXJyYXksIGhlYWRCb3ggKTtcbn1cblxuZnVuY3Rpb24gcmVhZFVWYXIoIGFycmF5OiBVaW50OEFycmF5LCBoZWFkQm94OiBbIG51bWJlciBdICk6IG51bWJlciB7XG4gIGxldCB2ID0gMDtcbiAgZm9yICggOzsgKSB7XG4gICAgY29uc3QgdnYgPSByZWFkVTgoIGFycmF5LCBoZWFkQm94ICk7XG4gICAgdiA9IHYgKiAxMjggKyAoIHZ2ICYgMTI3ICk7XG5cbiAgICBpZiAoIHZ2IDwgMTI4ICkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVyKCBhcnJheTogVWludDhBcnJheSwgaGVhZEJveDogWyBudW1iZXIgXSApOiBNaWRpUGFyc2VSZXN1bHRIZWFkZXIge1xuICAvLyBza2lwIHR5cGUgYW5kIGxlbmd0aCAoNCs0KVxuICAvLyBsZW5ndGggaGFzIHRvIGJlIDYsIHRoZXJlJ3Mgbm8gbmVlZCB0byBwYXJzZVxuICBoZWFkQm94WyAwIF0gKz0gODtcblxuICByZXR1cm4gW1xuICAgIHJlYWRVMTYoIGFycmF5LCBoZWFkQm94ICksXG4gICAgcmVhZFUxNiggYXJyYXksIGhlYWRCb3ggKSxcbiAgICByZWFkVTE2KCBhcnJheSwgaGVhZEJveCApLFxuICBdO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRyYWNrKCBhcnJheTogVWludDhBcnJheSwgaGVhZEJveDogWyBudW1iZXIgXSApOiBNaWRpUGFyc2VSZXN1bHRUcmFjayB7XG4gIC8vIHNraXAgdHlwZSAoNClcbiAgaGVhZEJveFsgMCBdICs9IDQ7XG5cbiAgY29uc3QgZW5kT2ZUcmFjayA9IGhlYWRCb3hbIDAgXSArIHJlYWRVMzIoIGFycmF5LCBoZWFkQm94ICkgKyA0O1xuXG4gIGNvbnN0IHRyYWNrOiBNaWRpUGFyc2VSZXN1bHRUcmFjayA9IFtdO1xuICBsZXQgdHlwZSA9IDA7XG5cbiAgd2hpbGUgKCBoZWFkQm94WyAwIF0gPCBlbmRPZlRyYWNrICkge1xuICAgIGNvbnN0IGRlbHRhID0gcmVhZFVWYXIoIGFycmF5LCBoZWFkQm94ICk7XG4gICAgY29uc3Qgc3RhdHVzID0gcmVhZFU4KCBhcnJheSwgaGVhZEJveCApO1xuICAgIHR5cGUgPSBzdGF0dXMgPCAxMjggPyB0eXBlIDogc3RhdHVzO1xuICAgIGNvbnN0IGRhdGEwID0gc3RhdHVzIDwgMTI4ID8gc3RhdHVzIDogcmVhZFU4KCBhcnJheSwgaGVhZEJveCApO1xuXG4gICAgaWYgKCB0eXBlIDwgMHhjMCApIHtcbiAgICAgIC8vIG5vdGUgb24gKDl4KSwgbm90ZSBvZmYgKDh4KSwgcG9seXBob25pYyBrZXkgcHJlc3N1cmUgKEF4KSwgY29udHJvbCBjaGFuZ2UgKEJ4KVxuXG4gICAgICB0cmFjay5wdXNoKCBbXG4gICAgICAgIGRlbHRhLFxuICAgICAgICB0eXBlLFxuICAgICAgICBkYXRhMCwgLy8gbm90ZSBvciBjYyBudW1iZXJcbiAgICAgICAgcmVhZFU4KCBhcnJheSwgaGVhZEJveCApLCAvLyB2ZWxvY2l0eSwgcHJlc3N1cmUsIG9yIGRhdGFcbiAgICAgIF0gKTtcbiAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAweGZmICkge1xuICAgICAgLy8gbWV0YSBldmVudHNcblxuICAgICAgY29uc3QgZXZlbnRMZW5ndGggPSByZWFkVTgoIGFycmF5LCBoZWFkQm94ICk7XG5cbiAgICAgIHRyYWNrLnB1c2goIFtcbiAgICAgICAgZGVsdGEsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGRhdGEwLFxuICAgICAgICBhcnJheVNlcmlhbCggZXZlbnRMZW5ndGggKS5tYXAoICgpID0+IHJlYWRVOCggYXJyYXksIGhlYWRCb3ggKSApLFxuICAgICAgXSApO1xuXG4gICAgICBpZiAoIGRhdGEwID09PSAweDJmICkgeyAvLyBlbmQgb2YgdHJhY2tcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvciggYCR7IHR5cGUgfWAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaWRpUGFyc2UoIGJ1ZmZlcjogQXJyYXlCdWZmZXIgKTogTWlkaVBhcnNlUmVzdWx0IHtcbiAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheSggYnVmZmVyICk7XG4gIGNvbnN0IGhlYWRCb3g6IFsgbnVtYmVyIF0gPSBbIDAgXTtcblxuICBjb25zdCBoZWFkZXIgPSBwYXJzZUhlYWRlciggYXJyYXksIGhlYWRCb3ggKTtcbiAgY29uc3QgdHJhY2tzOiBNaWRpUGFyc2VSZXN1bHRUcmFja1tdID0gW107XG5cbiAgd2hpbGUgKCBoZWFkQm94WyAwIF0gPCBhcnJheS5sZW5ndGggKSB7XG4gICAgdHJhY2tzLnB1c2goIHBhcnNlVHJhY2soIGFycmF5LCBoZWFkQm94ICkgKTtcbiAgfVxuXG4gIHJldHVybiBbIGhlYWRlciwgdHJhY2tzIF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IFBva2VyUmFuayB9IGZyb20gJy4vUG9rZXJSYW5rJztcblxuZXhwb3J0IGNvbnN0IHBva2VyUmFua3NCeVN0cmVuZ3RoOiBQb2tlclJhbmtbXSA9IFtcbiAgJzInLFxuICAnMycsXG4gICc0JyxcbiAgJzUnLFxuICAnNicsXG4gICc3JyxcbiAgJzgnLFxuICAnOScsXG4gICdUJyxcbiAgJ0onLFxuICAnUScsXG4gICdLJyxcbiAgJ0EnLFxuXTtcbiIsImltcG9ydCB0eXBlIHsgUG9rZXJTdWl0IH0gZnJvbSAnLi9Qb2tlclN1aXQnO1xuXG5leHBvcnQgY29uc3QgcG9rZXJTdWl0c0J5SW5kZXg6IFBva2VyU3VpdFtdID0gW1xuICAnYycsXG4gICdkJyxcbiAgJ2gnLFxuICAncycsXG5dO1xuIiwiaW1wb3J0IHsgcG9rZXJSYW5rc0J5U3RyZW5ndGggfSBmcm9tICcuL3Bva2VyUmFua3NCeVN0cmVuZ3RoJztcbmltcG9ydCB7IHBva2VyU3VpdHNCeUluZGV4IH0gZnJvbSAnLi9wb2tlclN1aXRzQnlJbmRleCc7XG5pbXBvcnQgdHlwZSB7IFBva2VyQ2FyZCB9IGZyb20gJy4vUG9rZXJDYXJkJztcblxuLyoqXG4gKiBDcmVhdGUgYSA1Mi1jYXJkIGRlY2suXG4gKiBZb3UgbWlnaHQgd2FudCB0byB1c2Uge0BsaW5rIHNodWZmbGVBcnJheX0gdG8gc2h1ZmZsZSB0aGUgZGVjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBva2VyRGVjaygpOiBQb2tlckNhcmRbXSB7XG4gIGNvbnN0IGFycmF5OiBQb2tlckNhcmRbXSA9IFtdO1xuXG4gIHBva2VyU3VpdHNCeUluZGV4Lm1hcCggKCBzdWl0ICkgPT4gKFxuICAgIHBva2VyUmFua3NCeVN0cmVuZ3RoLm1hcCggKCByYW5rICkgPT4gKFxuICAgICAgYXJyYXkucHVzaCggcmFuayArIHN1aXQgYXMgUG9rZXJDYXJkIClcbiAgICApIClcbiAgKSApO1xuXG4gIHJldHVybiBhcnJheTtcbn1cbiIsImltcG9ydCB7IFBva2VySGFuZCB9IGZyb20gJy4vUG9rZXJIYW5kJztcblxuZXhwb3J0IGNvbnN0IHBva2VySGFuZFN0cmVuZ3RoTWFwOiB7IFsgaGFuZCBpbiBQb2tlckhhbmQgXTogbnVtYmVyIH0gPSB7XG4gICdIaWdoQ2FyZCc6IDAsXG4gICdPbmVQYWlyJzogMSxcbiAgJ1R3b1BhaXInOiAyLFxuICAnVGhyZWVPZkFLaW5kJzogMyxcbiAgJ1N0cmFpZ2h0JzogNCxcbiAgJ0ZsdXNoJzogNSxcbiAgJ0Z1bGxIb3VzZSc6IDYsXG4gICdGb3VyT2ZBS2luZCc6IDcsXG4gICdTdHJhaWdodEZsdXNoJzogOCxcbn07XG4iLCJpbXBvcnQgdHlwZSB7IFBva2VyUmFuayB9IGZyb20gJy4vUG9rZXJSYW5rJztcblxuZXhwb3J0IGNvbnN0IHBva2VyUmFua1N0cmVuZ3RoTWFwOiB7IFsgcmFuayBpbiBQb2tlclJhbmsgXTogbnVtYmVyIH0gPSB7XG4gICcyJzogMCxcbiAgJzMnOiAxLFxuICAnNCc6IDIsXG4gICc1JzogMyxcbiAgJzYnOiA0LFxuICAnNyc6IDUsXG4gICc4JzogNixcbiAgJzknOiA3LFxuICAnVCc6IDgsXG4gICdKJzogOSxcbiAgJ1EnOiAxMCxcbiAgJ0snOiAxMSxcbiAgJ0EnOiAxMlxufTtcbiIsImltcG9ydCB0eXBlIHsgUG9rZXJTdWl0IH0gZnJvbSAnLi9Qb2tlclN1aXQnO1xuXG5leHBvcnQgY29uc3QgcG9rZXJTdWl0SW5kZXhNYXA6IHsgWyBzdWl0IGluIFBva2VyU3VpdCBdOiBudW1iZXIgfSA9IHtcbiAgJ2MnOiAwLFxuICAnZCc6IDEsXG4gICdoJzogMixcbiAgJ3MnOiAzLFxufTtcbiIsImltcG9ydCB7IHBva2VyUmFua1N0cmVuZ3RoTWFwIH0gZnJvbSAnLi9wb2tlclJhbmtTdHJlbmd0aE1hcCc7XG5pbXBvcnQgeyBwb2tlclN1aXRJbmRleE1hcCB9IGZyb20gJy4vcG9rZXJTdWl0SW5kZXhNYXAnO1xuaW1wb3J0IHR5cGUgeyBQb2tlckNhcmQgfSBmcm9tICcuL1Bva2VyQ2FyZCc7XG5pbXBvcnQgdHlwZSB7IFBva2VyUmFuayB9IGZyb20gJy4vUG9rZXJSYW5rJztcbmltcG9ydCB0eXBlIHsgUG9rZXJTdWl0IH0gZnJvbSAnLi9Qb2tlclN1aXQnO1xuXG4vKipcbiAqIFNvcnQgZ2l2ZW4gYXJyYXkgb2YgY2FyZHMgaW4gcGxhY2UgYnkgcmFuayAoYW5kIHN1aXQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydFBva2VyQ2FyZHNCeVJhbmsoIGNhcmRzOiBQb2tlckNhcmRbXSApOiBQb2tlckNhcmRbXSB7XG4gIHJldHVybiBjYXJkc1xuICAgIC5zb3J0KCAoIGEsIGIgKSA9PiAoXG4gICAgICBwb2tlclN1aXRJbmRleE1hcFsgYVsgMSBdIGFzIFBva2VyU3VpdCBdIC0gcG9rZXJTdWl0SW5kZXhNYXBbIGJbIDEgXSBhcyBQb2tlclN1aXQgXVxuICAgICkgKVxuICAgIC5zb3J0KCAoIGEsIGIgKSA9PiAoXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgYVsgMCBdIGFzIFBva2VyUmFuayBdIC0gcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGJbIDAgXSBhcyBQb2tlclJhbmsgXVxuICAgICkgKTtcbn1cbiIsImltcG9ydCB7IE1hcE9mU2V0IH0gZnJvbSAnLi4vTWFwT2ZTZXQvTWFwT2ZTZXQnO1xuaW1wb3J0IHsgcG9rZXJIYW5kU3RyZW5ndGhNYXAgfSBmcm9tICcuL3Bva2VySGFuZFN0cmVuZ3RoTWFwJztcbmltcG9ydCB7IHBva2VyUmFua1N0cmVuZ3RoTWFwIH0gZnJvbSAnLi9wb2tlclJhbmtTdHJlbmd0aE1hcCc7XG5pbXBvcnQgeyBwb2tlclJhbmtzQnlTdHJlbmd0aCB9IGZyb20gJy4vcG9rZXJSYW5rc0J5U3RyZW5ndGgnO1xuaW1wb3J0IHsgc29ydFBva2VyQ2FyZHNCeVJhbmsgfSBmcm9tICcuL3NvcnRQb2tlckNhcmRzQnlSYW5rJztcbmltcG9ydCB0eXBlIHsgUG9rZXJDYXJkIH0gZnJvbSAnLi9Qb2tlckNhcmQnO1xuaW1wb3J0IHR5cGUgeyBQb2tlckhhbmQgfSBmcm9tICcuL1Bva2VySGFuZCc7XG5pbXBvcnQgdHlwZSB7IFBva2VyUmFuayB9IGZyb20gJy4vUG9rZXJSYW5rJztcbmltcG9ydCB0eXBlIHsgUG9rZXJTdWl0IH0gZnJvbSAnLi9Qb2tlclN1aXQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2YWx1YXRlUG9rZXJIYW5kUmVzdWx0IHtcbiAgaGFuZDogUG9rZXJIYW5kO1xuICBzdHJlbmd0aDogbnVtYmVyW107XG4gIGNhcmRzOiBbIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZVBva2VySGFuZCggY2FyZHM6IFBva2VyQ2FyZFtdICk6IEV2YWx1YXRlUG9rZXJIYW5kUmVzdWx0IHtcbiAgLy8gY2FyZHMgbXV0YWJsZSBlZGl0aW9uXG4gIGNvbnN0IGNhcmRzXyA9IGNhcmRzLmNvbmNhdCgpO1xuXG4gIGNvbnN0IGNhcmRzQnlSYW5rID0gbmV3IE1hcE9mU2V0PFBva2VyUmFuaywgUG9rZXJDYXJkPigpO1xuICBjb25zdCBjYXJkc0J5U3VpdCA9IG5ldyBNYXBPZlNldDxQb2tlclN1aXQsIFBva2VyQ2FyZD4oKTtcblxuICBjYXJkc18ubWFwKCAoIGNhcmQgKSA9PiB7XG4gICAgY29uc3QgcmFuayA9IGNhcmRbIDAgXSBhcyBQb2tlclJhbms7XG4gICAgY29uc3Qgc3VpdCA9IGNhcmRbIDEgXSBhcyBQb2tlclN1aXQ7XG4gICAgY2FyZHNCeVJhbmsuYWRkKCByYW5rLCBjYXJkICk7XG4gICAgY2FyZHNCeVN1aXQuYWRkKCBzdWl0LCBjYXJkICk7XG4gIH0gKTtcblxuICAvLyBwYWlyc1xuICBjb25zdCBmb3VyczogUG9rZXJSYW5rW10gPSBbXTtcbiAgY29uc3QgdGhyZWVzOiBQb2tlclJhbmtbXSA9IFtdO1xuICBjb25zdCB0d29zOiBQb2tlclJhbmtbXSA9IFtdO1xuXG4gIHBva2VyUmFua3NCeVN0cmVuZ3RoLm1hcCggKCByYW5rICkgPT4ge1xuICAgIGNvbnN0IGNhcmRzID0gY2FyZHNCeVJhbmsuZ2V0KCByYW5rICk7XG4gICAgaWYgKCBjYXJkcy5zaXplID4gMyApIHtcbiAgICAgIGZvdXJzLnB1c2goIHJhbmsgKTtcbiAgICB9IGVsc2UgaWYgKCBjYXJkcy5zaXplID4gMiApIHtcbiAgICAgIHRocmVlcy5wdXNoKCByYW5rICk7XG4gICAgfSBlbHNlIGlmICggY2FyZHMuc2l6ZSA+IDEgKSB7XG4gICAgICB0d29zLnB1c2goIHJhbmsgKTtcbiAgICB9XG4gIH0gKTtcblxuICAvLyBzdHJhaWdodFxuICBsZXQgc3RyYWlnaHRDYXJkczogUG9rZXJDYXJkW10gfCB1bmRlZmluZWQ7XG4gIHtcbiAgICBsZXQgY3VycmVudDogUG9rZXJDYXJkW10gPSBbXTtcblxuICAgIC8vIGhhbmRsZSBzdGVlbCB3aGVlbFxuICAgIGNvbnN0IGEgPSBBcnJheS5mcm9tKCBjYXJkc0J5UmFuay5nZXQoICdBJyApIClbIDAgXTtcbiAgICBpZiAoIGEgKSB7XG4gICAgICBjdXJyZW50LnB1c2goIGEgKTtcbiAgICB9XG5cbiAgICBwb2tlclJhbmtzQnlTdHJlbmd0aC5tYXAoICggcmFuayApID0+IHtcbiAgICAgIGNvbnN0IGNhcmQgPSBBcnJheS5mcm9tKCBjYXJkc0J5UmFuay5nZXQoIHJhbmsgKSApWyAwIF07XG4gICAgICBpZiAoIGNhcmQgKSB7XG4gICAgICAgIGN1cnJlbnQucHVzaCggY2FyZCApO1xuXG4gICAgICAgIGlmICggY3VycmVudC5sZW5ndGggPiA0ICkge1xuICAgICAgICAgIHN0cmFpZ2h0Q2FyZHMgPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50ID0gW107XG4gICAgICB9XG4gICAgfSApO1xuICB9XG5cbiAgLy8gc3RyYWlnaHQgZmx1c2hcbiAgaWYgKCBzdHJhaWdodENhcmRzICkge1xuICAgIGZvciAoIGNvbnN0IFsgc3VpdCwgY2FyZHNTZXQgXSBvZiBjYXJkc0J5U3VpdC5tYXAgKSB7XG4gICAgICBpZiAoIGNhcmRzU2V0LnNpemUgPiAwICkge1xuICAgICAgICBsZXQgc3RyYWlnaHRGbHVzaENhcmRzOiBQb2tlckNhcmRbXSB8IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGN1cnJlbnQ6IFBva2VyQ2FyZFtdID0gW107XG5cbiAgICAgICAgLy8gaGFuZGxlIHN0ZWVsIHdoZWVsXG4gICAgICAgIGNvbnN0IHRhcmdldCA9ICdBJyArIHN1aXQgYXMgUG9rZXJDYXJkO1xuICAgICAgICBjb25zdCBhID0gY2FyZHNTZXQuaGFzKCB0YXJnZXQgKTtcbiAgICAgICAgaWYgKCBhICkge1xuICAgICAgICAgIGN1cnJlbnQucHVzaCggdGFyZ2V0ICk7XG4gICAgICAgIH1cblxuICAgICAgICBwb2tlclJhbmtzQnlTdHJlbmd0aC5tYXAoICggcmFuayApID0+IHtcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSByYW5rICsgc3VpdCBhcyBQb2tlckNhcmQ7XG4gICAgICAgICAgaWYgKCBjYXJkc1NldC5oYXMoIHRhcmdldCApICkge1xuICAgICAgICAgICAgY3VycmVudC5wdXNoKCB0YXJnZXQgKTtcblxuICAgICAgICAgICAgaWYgKCBjdXJyZW50Lmxlbmd0aCA+IDQgKSB7XG4gICAgICAgICAgICAgIHN0cmFpZ2h0Rmx1c2hDYXJkcyA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICBpZiAoIHN0cmFpZ2h0Rmx1c2hDYXJkcyApIHtcbiAgICAgICAgICBzdHJhaWdodEZsdXNoQ2FyZHMuc3BsaWNlKCAwLCBzdHJhaWdodEZsdXNoQ2FyZHMubGVuZ3RoIC0gNSApO1xuXG4gICAgICAgICAgY29uc3QgaGFuZCA9ICdTdHJhaWdodEZsdXNoJztcbiAgICAgICAgICBjb25zdCBzdHJlbmd0aCA9IFtcbiAgICAgICAgICAgIHBva2VySGFuZFN0cmVuZ3RoTWFwWyBoYW5kIF0sXG4gICAgICAgICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgc3RyYWlnaHRGbHVzaENhcmRzWyA0IF1bIDAgXSBhcyBQb2tlclJhbmsgXSxcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhhbmQsXG4gICAgICAgICAgICBjYXJkczogc3RyYWlnaHRGbHVzaENhcmRzIGFzIFsgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQgXSxcbiAgICAgICAgICAgIHN0cmVuZ3RoLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBmb3VyIG9mIGEga2luZFxuICBpZiAoIGZvdXJzLmxlbmd0aCA+IDAgKSB7XG4gICAgZm91cnMuc29ydCggKCBhLCBiICkgPT4gcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGEgXSAtIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBiIF0gKTtcbiAgICBmb3Vycy5zcGxpY2UoIDAsIGZvdXJzLmxlbmd0aCAtIDEgKTtcblxuICAgIC8vIDVzLCA1YywgS2QsIDZkLCA5YywgNWQsIDVoXG5cbiAgICBjb25zdCBzYW1lQ2FyZHMgPSBBcnJheS5mcm9tKCBjYXJkc0J5UmFuay5nZXQoIGZvdXJzWyAwIF0gKSApO1xuICAgIHNhbWVDYXJkcy5tYXAoICggY2FyZCApID0+IChcbiAgICAgIGNhcmRzXy5zcGxpY2UoIGNhcmRzXy5pbmRleE9mKCBjYXJkICksIDEgKVxuICAgICkgKTtcbiAgICAvLyBLZCwgNmQsIDljXG5cbiAgICBzb3J0UG9rZXJDYXJkc0J5UmFuayggY2FyZHNfICkuc3BsaWNlKCAwLCBjYXJkc18ubGVuZ3RoIC0gMSApO1xuICAgIC8vIEtkXG5cbiAgICBjb25zdCBoYW5kID0gJ0ZvdXJPZkFLaW5kJztcbiAgICBjb25zdCBzdHJlbmd0aCA9IFtcbiAgICAgIHBva2VySGFuZFN0cmVuZ3RoTWFwWyBoYW5kIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgZm91cnNbIDAgXSBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGNhcmRzX1sgMCBdWyAwIF0gYXMgUG9rZXJSYW5rIF0sXG4gICAgXTtcblxuICAgIGNhcmRzXy5wdXNoKCAuLi5zYW1lQ2FyZHMgKTtcbiAgICBzb3J0UG9rZXJDYXJkc0J5UmFuayggY2FyZHNfICk7XG4gICAgLy8gNWMsIDVkLCA1aCwgNXMsIEtkXG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFuZCxcbiAgICAgIGNhcmRzOiBjYXJkc18gYXMgWyBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCBdLFxuICAgICAgc3RyZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8vIGZ1bGwgaG91c2VcbiAgaWYgKCB0aHJlZXMubGVuZ3RoID4gMCAmJiB0aHJlZXMubGVuZ3RoICsgdHdvcy5sZW5ndGggPiAxICkge1xuICAgIHRocmVlcy5zb3J0KCAoIGEsIGIgKSA9PiBwb2tlclJhbmtTdHJlbmd0aE1hcFsgYSBdIC0gcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGIgXSApO1xuXG4gICAgLy8gdHJpY2t5IHBhcnQ6IGl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgdHdvIG9yIG1vcmUgdGhyZWVzIGF0IG9uY2VcbiAgICAvLyBqdXN0IHRyYW5zZmVyIHRocmVlcyB3aGljaCBpcyBub3QgaGlnaGVzdFxuICAgIC8vIGFuZCB3aXNoIHdlJ2xsIGRvIHRoaXMgcmlnaHQgaW4gdGhlIHJlc3Qgb2YgdGhlIGNvZGVcbiAgICB0d29zLnB1c2goIC4uLnRocmVlcy5zcGxpY2UoIDAsIHRocmVlcy5sZW5ndGggLSAxICkgKTtcblxuICAgIHR3b3Muc29ydCggKCBhLCBiICkgPT4gcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGEgXSAtIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBiIF0gKTtcbiAgICB0d29zLnNwbGljZSggMCwgdHdvcy5sZW5ndGggLSAxICk7XG5cbiAgICAvLyA3ZCwgN3MsIFRjLCBUZCwgN2gsIDlkLCBUaFxuXG4gICAgY29uc3Qgc2FtZUNhcmRzID0gQXJyYXkuZnJvbSggY2FyZHNCeVJhbmsuZ2V0KCB0aHJlZXNbIDAgXSApICk7XG4gICAgc2FtZUNhcmRzLnB1c2goIC4uLkFycmF5LmZyb20oIGNhcmRzQnlSYW5rLmdldCggdHdvc1sgMCBdICkgKSApO1xuICAgIC8vIHNhbWVDYXJkczogVGMsIFRkLCBUaCwgN2QsIDdzLCA3aFxuXG4gICAgc29ydFBva2VyQ2FyZHNCeVJhbmsoIHNhbWVDYXJkcyApLnNwbGljZSggMCwgc2FtZUNhcmRzLmxlbmd0aCAtIDUgKTtcbiAgICAvLyBzYW1lQ2FyZHM6IDdoLCA3cywgVGMsIFRkLCBUaFxuXG4gICAgY29uc3QgaGFuZCA9ICdGdWxsSG91c2UnO1xuICAgIGNvbnN0IHN0cmVuZ3RoID0gW1xuICAgICAgcG9rZXJIYW5kU3RyZW5ndGhNYXBbIGhhbmQgXSxcbiAgICAgIHBva2VyUmFua1N0cmVuZ3RoTWFwWyB0aHJlZXNbIDAgXSBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIHR3b3NbIDAgXSBdLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFuZCxcbiAgICAgIGNhcmRzOiBzYW1lQ2FyZHMgYXMgWyBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCBdLFxuICAgICAgc3RyZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8vIGZsdXNoXG4gIGZvciAoIGNvbnN0IFsgX3N1aXQsIGNhcmRzU2V0IF0gb2YgY2FyZHNCeVN1aXQubWFwICkge1xuICAgIGlmICggY2FyZHNTZXQuc2l6ZSA+IDQgKSB7XG4gICAgICBjb25zdCBjYXJkcyA9IHNvcnRQb2tlckNhcmRzQnlSYW5rKCBBcnJheS5mcm9tKCBjYXJkc1NldCApICk7XG4gICAgICBjYXJkcy5zcGxpY2UoIDAsIGNhcmRzLmxlbmd0aCAtIDUgKTtcblxuICAgICAgY29uc3QgaGFuZCA9ICdGbHVzaCc7XG4gICAgICBjb25zdCBzdHJlbmd0aCA9IFtcbiAgICAgICAgcG9rZXJIYW5kU3RyZW5ndGhNYXBbIGhhbmQgXSxcbiAgICAgICAgLi4uY2FyZHNcbiAgICAgICAgICAuY29uY2F0KClcbiAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgLm1hcCggKCBjYXJkICkgPT4gKFxuICAgICAgICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGNhcmRbIDAgXSBhcyBQb2tlclJhbmsgXVxuICAgICAgICAgICkgKSxcbiAgICAgIF07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhhbmQsXG4gICAgICAgIGNhcmRzOiBjYXJkcyBhcyBbIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkIF0sXG4gICAgICAgIHN0cmVuZ3RoLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBzdHJhaWdodFxuICBpZiAoIHN0cmFpZ2h0Q2FyZHMgKSB7XG4gICAgc3RyYWlnaHRDYXJkcy5zcGxpY2UoIDAsIHN0cmFpZ2h0Q2FyZHMubGVuZ3RoIC0gNSApO1xuXG4gICAgY29uc3QgaGFuZCA9ICdTdHJhaWdodCc7XG4gICAgY29uc3Qgc3RyZW5ndGggPSBbXG4gICAgICBwb2tlckhhbmRTdHJlbmd0aE1hcFsgaGFuZCBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIHN0cmFpZ2h0Q2FyZHNbIDQgXVsgMCBdIGFzIFBva2VyUmFuayBdLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFuZCxcbiAgICAgIGNhcmRzOiBzdHJhaWdodENhcmRzIGFzIFsgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQgXSxcbiAgICAgIHN0cmVuZ3RoLFxuICAgIH07XG4gIH1cblxuICAvLyB0aHJlZSBvZiBhIGtpbmRcbiAgaWYgKCB0aHJlZXMubGVuZ3RoID4gMCApIHtcbiAgICB0aHJlZXMuc29ydCggKCBhLCBiICkgPT4gcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGEgXSAtIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBiIF0gKTtcbiAgICB0aHJlZXMuc3BsaWNlKCAwLCB0aHJlZXMubGVuZ3RoIC0gMSApO1xuXG4gICAgLy8gQWgsIEFkLCBLYywgN3MsIDRzLCBRYywgQXNcblxuICAgIGNvbnN0IHNhbWVDYXJkcyA9IEFycmF5LmZyb20oIGNhcmRzQnlSYW5rLmdldCggdGhyZWVzWyAwIF0gKSApO1xuICAgIHNhbWVDYXJkcy5tYXAoICggY2FyZCApID0+IChcbiAgICAgIGNhcmRzXy5zcGxpY2UoIGNhcmRzXy5pbmRleE9mKCBjYXJkICksIDEgKVxuICAgICkgKTtcbiAgICAvLyBLYywgN3MsIDRzLCBRY1xuXG4gICAgc29ydFBva2VyQ2FyZHNCeVJhbmsoIGNhcmRzXyApLnNwbGljZSggMCwgY2FyZHNfLmxlbmd0aCAtIDIgKTtcbiAgICAvLyBRYywgS2NcblxuICAgIGNvbnN0IGhhbmQgPSAnVGhyZWVPZkFLaW5kJztcbiAgICBjb25zdCBzdHJlbmd0aCA9IFtcbiAgICAgIHBva2VySGFuZFN0cmVuZ3RoTWFwWyBoYW5kIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgdGhyZWVzWyAwIF0gXSxcbiAgICAgIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBjYXJkc19bIDEgXVsgMCBdIGFzIFBva2VyUmFuayBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGNhcmRzX1sgMCBdWyAwIF0gYXMgUG9rZXJSYW5rIF0sXG4gICAgXTtcblxuICAgIGNhcmRzXy5wdXNoKCAuLi5zYW1lQ2FyZHMgKTtcbiAgICBzb3J0UG9rZXJDYXJkc0J5UmFuayggY2FyZHNfICk7XG4gICAgLy8gUWMsIEtjLCBBZCwgQWgsIEFzXG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFuZCxcbiAgICAgIGNhcmRzOiBjYXJkc18gYXMgWyBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCBdLFxuICAgICAgc3RyZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8vIHR3byBwYWlyXG4gIGlmICggdHdvcy5sZW5ndGggPiAxICkge1xuICAgIHR3b3Muc29ydCggKCBhLCBiICkgPT4gcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGEgXSAtIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBiIF0gKTtcbiAgICB0d29zLnNwbGljZSggMCwgdHdvcy5sZW5ndGggLSAyICk7XG5cbiAgICAvLyA0YywgOGQsIDdoLCA0aCwgOGgsIEpjLCAyc1xuXG4gICAgY29uc3QgcGFpcnMgPSBBcnJheS5mcm9tKCBjYXJkc0J5UmFuay5nZXQoIHR3b3NbIDAgXSApICk7XG4gICAgcGFpcnMucHVzaCggLi4uQXJyYXkuZnJvbSggY2FyZHNCeVJhbmsuZ2V0KCB0d29zWyAxIF0gKSApICk7XG4gICAgcGFpcnMubWFwKCAoIGNhcmQgKSA9PiAoXG4gICAgICBjYXJkc18uc3BsaWNlKCBjYXJkc18uaW5kZXhPZiggY2FyZCApLCAxIClcbiAgICApICk7XG4gICAgLy8gN2gsIEpjLCAyc1xuXG4gICAgc29ydFBva2VyQ2FyZHNCeVJhbmsoIGNhcmRzXyApLnNwbGljZSggMCwgY2FyZHNfLmxlbmd0aCAtIDEgKTtcbiAgICAvLyBKY1xuXG4gICAgY29uc3QgaGFuZCA9ICdUd29QYWlyJztcbiAgICBjb25zdCBzdHJlbmd0aCA9IFtcbiAgICAgIHBva2VySGFuZFN0cmVuZ3RoTWFwWyBoYW5kIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgdHdvc1sgMSBdIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgdHdvc1sgMCBdIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgY2FyZHNfWyAwIF1bIDAgXSBhcyBQb2tlclJhbmsgXSxcbiAgICBdO1xuXG4gICAgY2FyZHNfLnB1c2goIC4uLnBhaXJzICk7XG4gICAgc29ydFBva2VyQ2FyZHNCeVJhbmsoIGNhcmRzXyApO1xuICAgIC8vIDRjLCA0aCwgOGQsIDhoLCBKY1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmQsXG4gICAgICBjYXJkczogY2FyZHNfIGFzIFsgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQgXSxcbiAgICAgIHN0cmVuZ3RoLFxuICAgIH07XG4gIH1cblxuICAvLyBvbmUgcGFpclxuICBpZiAoIHR3b3MubGVuZ3RoID4gMCApIHtcbiAgICAvLyAzYywgNWQsIDhjLCA4cywgQWMsIFFkLCA3aFxuXG4gICAgY29uc3QgcGFpciA9IEFycmF5LmZyb20oIGNhcmRzQnlSYW5rLmdldCggdHdvc1sgMCBdICkgKTtcbiAgICBwYWlyLm1hcCggKCBjYXJkICkgPT4gKFxuICAgICAgY2FyZHNfLnNwbGljZSggY2FyZHNfLmluZGV4T2YoIGNhcmQgKSwgMSApXG4gICAgKSApO1xuICAgIC8vIDNjLCA1ZCwgQWMsIFFkLCA3aFxuXG4gICAgc29ydFBva2VyQ2FyZHNCeVJhbmsoIGNhcmRzXyApLnNwbGljZSggMCwgY2FyZHNfLmxlbmd0aCAtIDMgKTtcbiAgICAvLyA3aCwgUWQsIEFjXG5cbiAgICBjb25zdCBoYW5kID0gJ09uZVBhaXInO1xuICAgIGNvbnN0IHN0cmVuZ3RoID0gW1xuICAgICAgcG9rZXJIYW5kU3RyZW5ndGhNYXBbIGhhbmQgXSxcbiAgICAgIHBva2VyUmFua1N0cmVuZ3RoTWFwWyB0d29zWyAwIF0gXSxcbiAgICAgIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBjYXJkc19bIDIgXVsgMCBdIGFzIFBva2VyUmFuayBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGNhcmRzX1sgMSBdWyAwIF0gYXMgUG9rZXJSYW5rIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgY2FyZHNfWyAwIF1bIDAgXSBhcyBQb2tlclJhbmsgXSxcbiAgICBdO1xuXG4gICAgY2FyZHNfLnB1c2goIC4uLnBhaXIgKTtcbiAgICBzb3J0UG9rZXJDYXJkc0J5UmFuayggY2FyZHNfICk7XG4gICAgLy8gN2gsIDhjLCA4cywgUWQsIEFjXG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFuZCxcbiAgICAgIGNhcmRzOiBjYXJkc18gYXMgWyBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCBdLFxuICAgICAgc3RyZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8vIGhpZ2ggY2FyZFxuICB7XG4gICAgY29uc3QgaGFuZCA9ICdIaWdoQ2FyZCc7XG5cbiAgICAvLyAyaCwgNWMsIDZjLCA3cywgVGQsIEFkLCBLZFxuXG4gICAgc29ydFBva2VyQ2FyZHNCeVJhbmsoIGNhcmRzXyApO1xuICAgIC8vIDJoLCA1YywgNmMsIDdzLCBUZCwgS2QsIEFkXG5cbiAgICBjYXJkc18uc3BsaWNlKCAwLCBjYXJkc18ubGVuZ3RoIC0gNSApO1xuICAgIC8vIDZjLCA3cywgVGQsIEtkLCBBZFxuXG4gICAgY29uc3Qgc3RyZW5ndGggPSBbXG4gICAgICBwb2tlckhhbmRTdHJlbmd0aE1hcFsgaGFuZCBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGNhcmRzX1sgNCBdWyAwIF0gYXMgUG9rZXJSYW5rIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgY2FyZHNfWyAzIF1bIDAgXSBhcyBQb2tlclJhbmsgXSxcbiAgICAgIHBva2VyUmFua1N0cmVuZ3RoTWFwWyBjYXJkc19bIDIgXVsgMCBdIGFzIFBva2VyUmFuayBdLFxuICAgICAgcG9rZXJSYW5rU3RyZW5ndGhNYXBbIGNhcmRzX1sgMSBdWyAwIF0gYXMgUG9rZXJSYW5rIF0sXG4gICAgICBwb2tlclJhbmtTdHJlbmd0aE1hcFsgY2FyZHNfWyAwIF1bIDAgXSBhcyBQb2tlclJhbmsgXSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmQsXG4gICAgICBjYXJkczogY2FyZHNfIGFzIFsgUG9rZXJDYXJkLCBQb2tlckNhcmQsIFBva2VyQ2FyZCwgUG9rZXJDYXJkLCBQb2tlckNhcmQgXSxcbiAgICAgIHN0cmVuZ3RoLFxuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUG9rZXJIYW5kIH0gZnJvbSAnLi9Qb2tlckhhbmQnO1xuXG5leHBvcnQgY29uc3QgcG9rZXJIYW5kc0J5U3RyZW5ndGg6IFBva2VySGFuZFtdID0gW1xuICAnSGlnaENhcmQnLFxuICAnT25lUGFpcicsXG4gICdUd29QYWlyJyxcbiAgJ1RocmVlT2ZBS2luZCcsXG4gICdTdHJhaWdodCcsXG4gICdGbHVzaCcsXG4gICdGdWxsSG91c2UnLFxuICAnRm91ck9mQUtpbmQnLFxuICAnU3RyYWlnaHRGbHVzaCcsXG5dO1xuIiwiLyoqXG4gKiBSZXRyeSBnaXZlbiBmdW5jdGlvbiBmb3IgbiB0aW1lcy5cbiAqXG4gKiBTZWUgYWxzbzoge0BsaW5rIHJldHJ5fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXN5bmNSZXRyeTxUPiggZnVuYzogKCkgPT4gUHJvbWlzZTxUPiwgbjogbnVtYmVyICk6IFByb21pc2U8VD4ge1xuICByZXR1cm4gYXdhaXQgZnVuYygpLmNhdGNoKCAoIGVycm9yICkgPT4ge1xuICAgIGlmICggbiA8PSAxICkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzeW5jUmV0cnkoIGZ1bmMsIG4gLSAxICk7XG4gIH0gKTtcbn1cbiIsIi8qKlxuICogUmV0cnkgZ2l2ZW4gZnVuY3Rpb24gZm9yIG4gdGltZXMuXG4gKlxuICogU2VlIGFsc286IHtAbGluayBhc3luY1JldHJ5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmV0cnk8VD4oIGZ1bmM6ICgpID0+IFQsIG46IG51bWJlciApOiBUIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnVuYygpO1xuICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgaWYgKCBuIDw9IDEgKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0cnkoIGZ1bmMsIG4gLSAxICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFNUTklDQ0NGcmFtZSB9IGZyb20gJy4vU1ROSUNDQ0ZyYW1lJztcblxuLyoqXG4gKiBSZWY6IGh0dHA6Ly9hcnNhbnRpY2Etb25saW5lLmNvbS9zdC1uaWNjYy1jb21wZXRpdGlvbi9cbiAqXG4gKiBAcGFyYW0gYnVmZmVyIFRoZSBpbnB1dCBTVC1OSUNDQyBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNUTklDQ0MoIGJ1ZmZlcjogQXJyYXlCdWZmZXIgKTogU1ROSUNDQ0ZyYW1lW10ge1xuICBjb25zdCBmcmFtZXM6IFNUTklDQ0NGcmFtZVtdID0gW107XG5cbiAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheSggYnVmZmVyICk7XG5cbiAgY29uc3QgcGFsZXR0ZSA9IG5ldyBVaW50MTZBcnJheSggMTYgKTtcblxuICBsZXQgaGVhZCA9IDA7XG5cbiAgLy8gd2hlbiBwb2x5LWRlc2NyaXB0b3Igc2F5cyAweGZlXG4gIGxldCBzaG91bGRTa2lwID0gZmFsc2U7XG5cbiAgLy8gd2hlbiBwb2x5LWRlc2NyaXB0b3Igc2F5cyAweGZkXG4gIGxldCBzaG91bGRFbmQgPSBmYWxzZTtcblxuICAvLyA+IEV2ZXJ5IGZyYW1lIHN0b3JlcyB0aGUgZm9sbG93aW5nIGRhdGE6XG4gIGZvciAoIDs7ICkge1xuICAgIC8vID4gMSBieXRlIEZsYWdzIEJpdCAwOiBGcmFtZSBuZWVkcyB0byBjbGVhciB0aGUgc2NyZWVuLlxuICAgIC8vID4gQml0IDE6IEZyYW1lIGNvbnRhaW5zIHBhbGV0dGUgZGF0YS5cbiAgICAvLyA+IEJpdCAyOiBGcmFtZSBpcyBzdG9yZWQgaW4gaW5kZXhlZCBtb2RlLlxuICAgIGNvbnN0IGZsYWdzID0gYXJyYXlbIGhlYWQgKysgXTtcbiAgICBjb25zdCBuZWVkc0NsZWFyID0gKCBmbGFncyAmIDEgKSA9PT0gMTtcbiAgICBjb25zdCBoYXNQYWxldHRlID0gKCBmbGFncyA+PiAxICYgMSApID09PSAxO1xuICAgIGNvbnN0IGluZGV4ZWRNb2RlID0gKCBmbGFncyA+PiAyICYgMSApID09PSAxO1xuXG4gICAgLy8gPiBJZiBmcmFtZSBjb250YWlucyBwYWxldHRlIGRhdGFcbiAgICBpZiAoIGhhc1BhbGV0dGUgKSB7XG4gICAgICAvLyA+IDEgd29yZCBCaXRtYXNrXG4gICAgICBjb25zdCBiaXRtYXNrID0gYXJyYXlbIGhlYWQgKysgXSA8PCA4IHwgYXJyYXlbIGhlYWQgKysgXTtcblxuICAgICAgLy8gPiBGb3IgZXZlcnkgc2V0IGJpdCBpbiB0aGUgQml0bWFzayAoMC0xNSlcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuICAgICAgICBpZiAoIGJpdG1hc2sgPj4gKCAxNSAtIGkgKSAmIDEgKSB7XG4gICAgICAgICAgLy8gPiAxIHdvcmQgQ29sb3IgVGhlIGNvbG9yIGhhcyB0byBiZSBjb3BpZWQgaW50byB0aGUgcGFsZXR0ZSBhdCB0aGUgcmV2ZXJzZSBpbmRleCBvZiB0aGUgYWN0dWFsIGJpdCxcbiAgICAgICAgICAvLyA+IGJlY2F1c2UgdGhlIGJpdG1hc2sgaXMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgICAgLy8gPiBJbiBvdGhlciB3b3JkczogSWYgYml0IDE1IG9mIG1hc2sgaXMgc2V0IC0+IHVwZGF0ZSBjb2xvciAwIG9mIHBhbGV0dGUsXG4gICAgICAgICAgLy8gPiDigKZcbiAgICAgICAgICAvLyA+IGlmIGJpdCAwIG9mIG1hc2sgaXMgc2V0IC0+IHVwZGF0ZSBjb2xvciAxNSBvZiBwYWxldHRlLlxuXG4gICAgICAgICAgcGFsZXR0ZVsgaSBdID0gYXJyYXlbIGhlYWQgKysgXSA8PCA4IHwgYXJyYXlbIGhlYWQgKysgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vID4gSWYgZnJhbWUgaXMgc3RvcmVkIGluIGluZGV4ZWQgbW9kZVxuICAgIGlmICggaW5kZXhlZE1vZGUgKSB7XG4gICAgICAvLyA+IDEgYnl0ZSBOdW1iZXIgb2YgdmVydGljZXMgKDAtMjU1KVxuICAgICAgY29uc3QgblZlcnRpY2VzID0gYXJyYXlbIGhlYWQgKysgXTtcblxuICAgICAgLy8gPiBGb3IgZXZlcnkgVmVydGV4XG4gICAgICAvLyA+IHtcbiAgICAgIC8vID4gMSBieXRlIFgtcG9zaXRpb25cbiAgICAgIC8vID4gMSBieXRlIFktcG9zaXRpb25cbiAgICAgIC8vID4gfVxuICAgICAgY29uc3QgdmVydGljZXMgPSBhcnJheS5zdWJhcnJheSggaGVhZCwgaGVhZCArIDIgKiBuVmVydGljZXMgKTtcbiAgICAgIGhlYWQgKz0gMiAqIG5WZXJ0aWNlcztcblxuICAgICAgY29uc3QgcG9seWdvbnM6IHsgY29sb3JJbmRleDogbnVtYmVyOyBpbmRpY2VzOiBudW1iZXJbXSB9W10gPSBbXTtcblxuICAgICAgLy8gPiBXaGlsZSAo4oCmKVxuICAgICAgZm9yICggOzsgKSB7XG4gICAgICAgIC8vID4gMSBieXRlIFBvbHktZGVzY3JpcHRvciBDb250YWluczogaGktbmliYmxlIC0gNCBiaXRzIGNvbG9yLWluZGV4XG4gICAgICAgIC8vID4gbG8tbmliYmxlIC0gNCBiaXRzIG51bWJlciBvZiBwb2x5Z29uIHZlcnRpY2VzXG4gICAgICAgIC8vID5cbiAgICAgICAgLy8gPiBTb21lIHNwZWNpYWwgY2FzZXMgYXJlIGVuY29kZWQgaW4gdGhlIGRlc2NyaXB0b3IgYnl0ZTpcbiAgICAgICAgLy8gPiAkZmYgPSBFbmQgb2YgZnJhbWVcbiAgICAgICAgLy8gPiAkZmUgPSBFbmQgb2YgZnJhbWUgYW5kIHRoZSBzdHJlYW0gc2tpcHMgdG8gdGhlIG5leHQgNjRLQiBibG9ja1xuICAgICAgICAvLyA+ICRmZCA9IEVuZCBvZiBzdHJlYW0gKHdlIGFyZSBkb25lIFxcby8pXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBhcnJheVsgaGVhZCArKyBdO1xuXG4gICAgICAgIGlmICggZGVzY3JpcHRvciA9PT0gMHhmZiApIHsgLy8gZW5kIG9mIGZyYW1lXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfSBlbHNlIGlmICggZGVzY3JpcHRvciA9PT0gMHhmZSApIHsgLy8gZW5kIG9mIGZyYW1lICsgc2tpcCB0byB0aGUgbmV4dCA2NEtCXG4gICAgICAgICAgc2hvdWxkU2tpcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfSBlbHNlIGlmICggZGVzY3JpcHRvciA9PT0gMHhmZCApIHsgLy8gZW5kIG9mIHN0cmVhbVxuICAgICAgICAgIHNob3VsZEVuZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbG9ySW5kZXggPSBkZXNjcmlwdG9yID4+IDQgJiAxNTtcbiAgICAgICAgY29uc3QgbkluZGljZXMgPSBkZXNjcmlwdG9yICYgMTU7XG5cbiAgICAgICAgLy8gPiBGb3IgZXZlcnkgdmVydGV4IG9mIHRoZSBwb2x5Z29uXG4gICAgICAgIC8vID4ge1xuICAgICAgICAvLyA+IDEgYnl0ZSBWZXJ0ZXgtaWQgKDAtMjU1KVxuICAgICAgICAvLyA+IH1cbiAgICAgICAgY29uc3QgaW5kaWNlcyA9IGFycmF5LnN1YmFycmF5KCBoZWFkLCBoZWFkICsgbkluZGljZXMgKTtcbiAgICAgICAgaGVhZCArPSBuSW5kaWNlcztcblxuICAgICAgICBwb2x5Z29ucy5wdXNoKCB7XG4gICAgICAgICAgY29sb3JJbmRleCxcbiAgICAgICAgICBpbmRpY2VzOiBBcnJheS5mcm9tKCBpbmRpY2VzICksXG4gICAgICAgIH0gKTtcbiAgICAgIH1cblxuICAgICAgZnJhbWVzLnB1c2goIHtcbiAgICAgICAgbmVlZHNDbGVhcixcbiAgICAgICAgaW5kZXhlZE1vZGUsXG4gICAgICAgIHBhbGV0dGU6IEFycmF5LmZyb20oIHBhbGV0dGUgKSxcbiAgICAgICAgdmVydGljZXM6IEFycmF5LmZyb20oIHZlcnRpY2VzICksXG4gICAgICAgIHBvbHlnb25zLFxuICAgICAgfSApO1xuXG4gICAgLy8gPiBFbHNlIGlmIGZyYW1lIGlzIHN0b3JlZCBpbiBub24taW5kZXhlZCBtb2RlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBvbHlnb25zOiB7IGNvbG9ySW5kZXg6IG51bWJlcjsgdmVydGljZXM6IG51bWJlcltdIH1bXSA9IFtdO1xuXG4gICAgICAvLyA+IFdoaWxlICjigKYpXG4gICAgICBmb3IgKCA7OyApIHtcbiAgICAgICAgLy8gPiAxIGJ5dGUgUG9seS1kZXNjcmlwdG9yIChTZWUgaW5kZXhlZCBtb2RlKVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gYXJyYXlbIGhlYWQgKysgXTtcblxuICAgICAgICBpZiAoIGRlc2NyaXB0b3IgPT09IDB4ZmYgKSB7IC8vIGVuZCBvZiBmcmFtZVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIGRlc2NyaXB0b3IgPT09IDB4ZmUgKSB7IC8vIGVuZCBvZiBmcmFtZSArIHNraXAgdG8gdGhlIG5leHQgNjRLQlxuICAgICAgICAgIHNob3VsZFNraXAgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIGRlc2NyaXB0b3IgPT09IDB4ZmQgKSB7IC8vIGVuZCBvZiBzdHJlYW1cbiAgICAgICAgICBzaG91bGRFbmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2xvckluZGV4ID0gZGVzY3JpcHRvciA+PiA0ICYgMTU7XG4gICAgICAgIGNvbnN0IG5WZXJ0aWNlcyA9IGRlc2NyaXB0b3IgJiAxNTtcblxuICAgICAgICAvLyA+IEZvciBldmVyeSB2ZXJ0ZXggb2YgdGhlIHBvbHlnb25cbiAgICAgICAgLy8gPiB7XG4gICAgICAgIC8vID4gMSBieXRlIFZlcnRleC1pZCAoMC0yNTUpXG4gICAgICAgIC8vID4gfVxuICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGFycmF5LnN1YmFycmF5KCBoZWFkLCBoZWFkICsgMiAqIG5WZXJ0aWNlcyApO1xuICAgICAgICBoZWFkICs9IDIgKiBuVmVydGljZXM7XG5cbiAgICAgICAgcG9seWdvbnMucHVzaCgge1xuICAgICAgICAgIGNvbG9ySW5kZXgsXG4gICAgICAgICAgdmVydGljZXM6IEFycmF5LmZyb20oIHZlcnRpY2VzICksXG4gICAgICAgIH0gKTtcbiAgICAgIH1cblxuICAgICAgZnJhbWVzLnB1c2goIHtcbiAgICAgICAgbmVlZHNDbGVhcixcbiAgICAgICAgaW5kZXhlZE1vZGUsXG4gICAgICAgIHBhbGV0dGU6IEFycmF5LmZyb20oIHBhbGV0dGUgKSxcbiAgICAgICAgcG9seWdvbnMsXG4gICAgICB9ICk7XG4gICAgfVxuXG4gICAgaWYgKCBzaG91bGRTa2lwICkge1xuICAgICAgaGVhZCA9ICggTWF0aC5mbG9vciggaGVhZCAvIDB4MTAwMDAgKSArIDEgKSAqIDB4MTAwMDA7XG4gICAgICBzaG91bGRTa2lwID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCBzaG91bGRFbmQgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnJhbWVzO1xufVxuIiwiaW1wb3J0IHsgU1ROSUNDQ0ZyYW1lIH0gZnJvbSAnLi9TVE5JQ0NDRnJhbWUnO1xuaW1wb3J0IHsgY29sb3JGcm9tQXRhcmlTVCB9IGZyb20gJy4uL2NvbG9yL2NvbG9yRnJvbUF0YXJpU1QnO1xuaW1wb3J0IHsgY29sb3JUb0hleCB9IGZyb20gJy4uL2NvbG9yL2NvbG9yVG9IZXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RuaWNjY1RvU1ZHKCBmcmFtZXM6IFNUTklDQ0NGcmFtZVtdLCBvcHRpb25zOiB7XG4gIGZwcz86IG51bWJlcjtcbn0gPSB7fSApOiBzdHJpbmcge1xuICBjb25zdCBkZWx0YSA9IDEuMCAvICggb3B0aW9ucz8uZnBzID8/IDMwLjAgKTtcblxuICBsZXQgc3ZnID0gJzxzdmcgd2lkdGg9XCIyNTZcIiBoZWlnaHQ9XCIyMDBcIiB2aWV3Qm94PVwiMCAwIDI1NiAyMDBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+JztcblxuICBsZXQgc3R5bGUgPSBgZ3t2aXNpYmlsaXR5OmhpZGRlbjthbmltYXRpb24tZHVyYXRpb246JHsgKCBkZWx0YSAqIGZyYW1lcy5sZW5ndGggKS50b0ZpeGVkKCAzICkgfXM7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZTthbmltYXRpb24tbmFtZTpmcmFtZX1Aa2V5ZnJhbWVzIGZyYW1lezAle3Zpc2liaWxpdHk6dmlzaWJsZX0keyAyMDAuMCAvIGZyYW1lcy5sZW5ndGggfSV7dmlzaWJpbGl0eTpoaWRkZW59fWA7XG5cbiAgZnJhbWVzLm1hcCggKCBmcmFtZSwgaUZyYW1lICkgPT4ge1xuICAgIGNvbnN0IHsgaW5kZXhlZE1vZGUsIHBhbGV0dGUsIHBvbHlnb25zIH0gPSBmcmFtZTtcblxuICAgIHN0eWxlICs9IGAjZiR7IGlGcmFtZSB9e2FuaW1hdGlvbi1kZWxheTokeyAoIGRlbHRhICogaUZyYW1lICkudG9GaXhlZCggMyApIH1zfWA7XG5cbiAgICBjb25zdCBwYWxldHRlSW5IZXggPSBwYWxldHRlLm1hcCggKCBzdENvbG9yICkgPT4ge1xuICAgICAgY29uc3QgY29sb3IgPSBjb2xvckZyb21BdGFyaVNUKCBzdENvbG9yICk7XG4gICAgICByZXR1cm4gY29sb3JUb0hleCggY29sb3IgKTtcbiAgICB9ICk7XG5cbiAgICBsZXQgY2hpbGRyZW5TdHIgPSAnPHJlY3Qgd2lkdGg9XCIyNTZcIiBoZWlnaHQ9XCIyMDBcIiBmaWxsPVwiIzAwMFwiIC8+JztcblxuICAgIGxldCBjdXJyZW50Q29sb3JJbmRleCA9IC0xO1xuICAgIGxldCBkID0gJyc7XG5cbiAgICBpZiAoIGluZGV4ZWRNb2RlICkge1xuICAgICAgY29uc3QgeyB2ZXJ0aWNlcyB9ID0gZnJhbWU7XG5cbiAgICAgIHBvbHlnb25zLm1hcCggKCB7IGNvbG9ySW5kZXgsIGluZGljZXMgfSApID0+IHtcbiAgICAgICAgaWYgKCBjdXJyZW50Q29sb3JJbmRleCAhPT0gY29sb3JJbmRleCApIHtcbiAgICAgICAgICBpZiAoIGN1cnJlbnRDb2xvckluZGV4ICE9PSAtMSApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9ySGV4ID0gcGFsZXR0ZUluSGV4WyBjdXJyZW50Q29sb3JJbmRleCBdO1xuICAgICAgICAgICAgY2hpbGRyZW5TdHIgKz0gYDxwYXRoIGQ9XCIkeyBkIH1cIiBmaWxsPVwiJHsgY29sb3JIZXggfVwiIC8+YDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50Q29sb3JJbmRleCA9IGNvbG9ySW5kZXg7XG4gICAgICAgICAgZCA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBpbmRpY2VzWyBpIF07XG4gICAgICAgICAgY29uc3QgeCA9IHZlcnRpY2VzWyAyICogaW5kZXggXTtcbiAgICAgICAgICBjb25zdCB5ID0gdmVydGljZXNbIDIgKiBpbmRleCArIDEgXTtcblxuICAgICAgICAgIGQgKz0gaSA9PT0gMFxuICAgICAgICAgICAgPyBgTSR7IHggfSwkeyB5IH1gXG4gICAgICAgICAgICA6IGBMJHsgeCB9LCR7IHkgfWA7XG4gICAgICAgIH1cbiAgICAgIH0gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9seWdvbnMubWFwKCAoIHsgY29sb3JJbmRleCwgdmVydGljZXMgfSApID0+IHtcbiAgICAgICAgaWYgKCBjdXJyZW50Q29sb3JJbmRleCAhPT0gY29sb3JJbmRleCApIHtcbiAgICAgICAgICBpZiAoIGN1cnJlbnRDb2xvckluZGV4ICE9PSAtMSApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9ySGV4ID0gcGFsZXR0ZUluSGV4WyBjdXJyZW50Q29sb3JJbmRleCBdO1xuICAgICAgICAgICAgY2hpbGRyZW5TdHIgKz0gYDxwYXRoIGQ9XCIkeyBkIH1cIiBmaWxsPVwiJHsgY29sb3JIZXggfVwiIC8+YDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50Q29sb3JJbmRleCA9IGNvbG9ySW5kZXg7XG4gICAgICAgICAgZCA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpICs9IDIgKSB7XG4gICAgICAgICAgY29uc3QgeCA9IHZlcnRpY2VzWyBpIF07XG4gICAgICAgICAgY29uc3QgeSA9IHZlcnRpY2VzWyBpICsgMSBdO1xuXG4gICAgICAgICAgZCArPSBpID09PSAwXG4gICAgICAgICAgICA/IGBNJHsgeCB9LCR7IHkgfWBcbiAgICAgICAgICAgIDogYEwkeyB4IH0sJHsgeSB9YDtcbiAgICAgICAgfVxuICAgICAgfSApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9ySGV4ID0gcGFsZXR0ZUluSGV4WyBjdXJyZW50Q29sb3JJbmRleCBdO1xuICAgIGNoaWxkcmVuU3RyICs9IGA8cGF0aCBkPVwiJHsgZCB9XCIgZmlsbD1cIiR7IGNvbG9ySGV4IH1cIiAvPmA7XG5cbiAgICBzdmcgKz0gYDxnIGlkPVwiZiR7IGlGcmFtZSB9XCI+JHsgY2hpbGRyZW5TdHIgfTwvZz5gO1xuICB9ICk7XG5cbiAgc3ZnICs9IGA8c3R5bGU+JHtzdHlsZX08L3N0eWxlPjwvc3ZnPmA7XG5cbiAgcmV0dXJuIHN2Zztcbn1cbiIsIi8qKlxuICogVGhlIG5haXZlIGltcGxlbWVudGF0aW9uIG9mIHNvLWNhbGxlZCBTbW9vdGhEYW1wLlxuICogUHJldHR5IG11Y2ggdGhlIHNhbWUgYXMge0BsaW5rIENEU30sIGJ1dCBpdCBoYXMgYSB3YXkgZWFzaWVyIHBhcmFtZXRlciB0byB0d2Vhaywge0BsaW5rIHNtb290aFRpbWV9LlxuICpcbiAqIFJlZjogR2FtZSBQcm9ncmFtbWluZyBHZW1zIDQsIENoYXB0ZXIgMS4xMFxuICpcbiAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL1VuaXR5LVRlY2hub2xvZ2llcy9Vbml0eUNzUmVmZXJlbmNlL2Jsb2IvYTJiZGZlOWIzYzRjZDQ0NzZmNDRiZjUyZjg0ODA2M2JmYWY3YjZiOS9SdW50aW1lL0V4cG9ydC9NYXRoL01hdGhmLmNzI0wzMDhcbiAqL1xuZXhwb3J0IGNsYXNzIFNtb290aERhbXAge1xuICBwdWJsaWMgc21vb3RoVGltZSA9IDEuMDtcbiAgcHVibGljIHZlbG9jaXR5ID0gMC4wO1xuICBwdWJsaWMgdmFsdWUgPSAwLjA7XG4gIHB1YmxpYyB0YXJnZXQgPSAwLjA7XG5cbiAgcHVibGljIHVwZGF0ZSggZGVsdGFUaW1lOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgICBjb25zdCBvbWVnYSA9IDIuMCAvIHRoaXMuc21vb3RoVGltZTtcbiAgICBjb25zdCB4ID0gb21lZ2EgKiBkZWx0YVRpbWU7XG4gICAgY29uc3QgZXhwID0gMS4wIC8gKCAxLjAgKyB4ICsgMC40OCAqIHggKiB4ICsgMC4yMzUgKiB4ICogeCAqIHggKTtcbiAgICBjb25zdCBkZWx0YSA9IHRoaXMudmFsdWUgLSB0aGlzLnRhcmdldDtcbiAgICBjb25zdCB0ZW1wID0gKCB0aGlzLnZlbG9jaXR5ICsgb21lZ2EgKiBkZWx0YSApICogZGVsdGFUaW1lO1xuICAgIHRoaXMudmVsb2NpdHkgPSAoIHRoaXMudmVsb2NpdHkgLSBvbWVnYSAqIHRlbXAgKSAqIGV4cDtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy50YXJnZXQgKyAoIGRlbHRhICsgdGVtcCApICogZXhwO1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG4iLCIvKipcbiAqIFVzZWZ1bCBmb3Igc3dhcCBidWZmZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFN3YXA8VD4ge1xuICBwdWJsaWMgaTogVDtcbiAgcHVibGljIG86IFQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBhOiBULCBiOiBUICkge1xuICAgIHRoaXMuaSA9IGE7XG4gICAgdGhpcy5vID0gYjtcbiAgfVxuXG4gIHB1YmxpYyBzd2FwKCk6IHZvaWQge1xuICAgIGNvbnN0IGkgPSB0aGlzLmk7XG4gICAgdGhpcy5pID0gdGhpcy5vO1xuICAgIHRoaXMubyA9IGk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEhpc3RvcnlNZWFuQ2FsY3VsYXRvciB9IGZyb20gJy4uL0hpc3RvcnlNZWFuQ2FsY3VsYXRvci9IaXN0b3J5TWVhbkNhbGN1bGF0b3InO1xuXG5leHBvcnQgY2xhc3MgVGFwVGVtcG8ge1xuICBwcml2YXRlIF9fYnBtID0gMC4wO1xuICBwcml2YXRlIF9fbGFzdFRhcCA9IDAuMDtcbiAgcHJpdmF0ZSBfX2xhc3RCZWF0ID0gMC4wO1xuICBwcml2YXRlIF9fbGFzdFRpbWUgPSAwLjA7XG4gIHByaXZhdGUgX19jYWxjOiBIaXN0b3J5TWVhbkNhbGN1bGF0b3IgPSBuZXcgSGlzdG9yeU1lYW5DYWxjdWxhdG9yKCAxNiApO1xuXG4gIHB1YmxpYyBnZXQgYmVhdER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDYwLjAgLyB0aGlzLl9fYnBtO1xuICB9XG5cbiAgcHVibGljIGdldCBicG0oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fX2JwbTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgYnBtKCBicG06IG51bWJlciApIHtcbiAgICB0aGlzLl9fbGFzdEJlYXQgPSB0aGlzLmJlYXQ7XG4gICAgdGhpcy5fX2xhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgdGhpcy5fX2JwbSA9IGJwbTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYmVhdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9fbGFzdEJlYXQgKyAoIHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5fX2xhc3RUaW1lICkgKiAwLjAwMSAvIHRoaXMuYmVhdER1cmF0aW9uO1xuICB9XG5cbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuX19jYWxjLnJlc2V0KCk7XG4gIH1cblxuICBwdWJsaWMgbnVkZ2UoIGFtb3VudDogbnVtYmVyICk6IHZvaWQge1xuICAgIHRoaXMuX19sYXN0QmVhdCA9IHRoaXMuYmVhdCArIGFtb3VudDtcbiAgICB0aGlzLl9fbGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfVxuXG4gIHB1YmxpYyB0YXAoKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgZGVsdGEgPSAoIG5vdyAtIHRoaXMuX19sYXN0VGFwICkgKiAwLjAwMTtcblxuICAgIGlmICggMi4wIDwgZGVsdGEgKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19jYWxjLnB1c2goIGRlbHRhICk7XG4gICAgICB0aGlzLl9fYnBtID0gNjAuMCAvICggdGhpcy5fX2NhbGMubWVhbiApO1xuICAgIH1cblxuICAgIHRoaXMuX19sYXN0VGFwID0gbm93O1xuICAgIHRoaXMuX19sYXN0VGltZSA9IG5vdztcbiAgICB0aGlzLl9fbGFzdEJlYXQgPSAwLjA7XG4gIH1cbn1cbiIsImltcG9ydCB7IGFycmF5U2VyaWFsIH0gZnJvbSAnLi4vYXJyYXknO1xuXG4vKipcbiAqIFBhcnNlIGEgcG9seXBob25pYyB0aW55c2VxIGJ1ZmZlci5cbiAqXG4gKiBSZXR1cm5zIFsgdGltZSwgb2ZmVGltZSwgbm90ZSwgcmVzZXJ2ZWQsIHRpbWUsIG9mZlRpbWUsIG5vdGUsIHJlc2VydmVkLCAuLi4gXVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGlueXNlcVBvbHlSZWFkZXIoXG4gIGJ1ZmZlcjogVWludDhBcnJheSxcbiAgb3B0aW9uczoge1xuICAgIHBvbHk/OiBudW1iZXIsXG4gICAgYmxvY2tTaXplPzogbnVtYmVyLFxuICAgIHNhbXBsZVJhdGU/OiBudW1iZXIsXG4gICAgc3RlcHNQZXJTZWNvbmQ/OiBudW1iZXIsXG4gIH0gPSB7fSxcbik6ICgpID0+IEZsb2F0MzJBcnJheVtdIHtcbiAgY29uc3QgcG9seSA9IG9wdGlvbnMucG9seSA/PyA4O1xuICBjb25zdCBibG9ja1NpemUgPSBvcHRpb25zLmJsb2NrU2l6ZSA/PyAxMjg7XG4gIGNvbnN0IHNhbXBsZVJhdGUgPSBvcHRpb25zLnNhbXBsZVJhdGUgPz8gNDgwMDA7XG4gIGNvbnN0IHN0ZXBzUGVyU2Vjb25kID0gb3B0aW9ucy5zdGVwc1BlclNlY29uZCA/PyAxLjA7XG5cbiAgbGV0IHNhbXBsZXMgPSAwO1xuICBsZXQgcG9zID0gMDtcbiAgbGV0IG5vdGU6IG51bWJlcjtcbiAgY29uc3Qgbm90ZXMgPSBhcnJheVNlcmlhbCggcG9seSApLmZpbGwoIC0xICk7XG4gIGNvbnN0IG5vdGVzVGltZSA9IGFycmF5U2VyaWFsKCBwb2x5ICkuZmlsbCggLUluZmluaXR5ICk7XG4gIGNvbnN0IG5vdGVzT2ZmVGltZSA9IGFycmF5U2VyaWFsKCBwb2x5ICkuZmlsbCggLUluZmluaXR5ICk7XG4gIGxldCBuZXh0U3RlcCA9IDA7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCByZXQgPSBhcnJheVNlcmlhbCggcG9seSApLm1hcCggKCkgPT4gbmV3IEZsb2F0MzJBcnJheSggNCAqIGJsb2NrU2l6ZSApICk7XG5cbiAgICBhcnJheVNlcmlhbCggYmxvY2tTaXplICkubWFwKCAoIGlTYW1wbGUgKSA9PiB7XG4gICAgICBjb25zdCB0ID0gc2FtcGxlcyAvIHNhbXBsZVJhdGU7XG4gICAgICBjb25zdCBzID0gdCAqIHN0ZXBzUGVyU2Vjb25kO1xuXG4gICAgICBpZiAoIHMgPj0gbmV4dFN0ZXAgKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50Tm90ZSA9IGJ1ZmZlclsgcG9zIF07XG4gICAgICAgIGNvbnN0IGV2ZW50RGVsdGFTdGVwID0gYnVmZmVyWyBwb3MgKyAxIF07XG5cbiAgICAgICAgbm90ZSA9ICggKCBwb3MgPT09IDAgPyA2MCA6IG5vdGUgKSArIGV2ZW50Tm90ZSApICYgMTI3O1xuXG4gICAgICAgIC8vIGZpbmQgc2FtZSBub3RlXG4gICAgICAgIGxldCBpUG9seSA9IG5vdGVzLmluZGV4T2YoIG5vdGUgKTtcblxuICAgICAgICAvLyBmaW5kIGVhcmxpZXN0IG5vdGUgb2ZmXG4gICAgICAgIGxldCB0RWFybGllc3QgPSBJbmZpbml0eTtcblxuICAgICAgICBpZiAoIGlQb2x5ID09PSAtMSApIHtcbiAgICAgICAgICBub3Rlc1RpbWUubWFwKCAoIHRPbiwgalBvbHkgKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0T2ZmID0gbm90ZXNPZmZUaW1lWyBqUG9seSBdO1xuICAgICAgICAgICAgaWYgKCB0T24gPD0gdE9mZiApIHtcbiAgICAgICAgICAgICAgaWYgKCB0T2ZmIDwgdEVhcmxpZXN0ICkge1xuICAgICAgICAgICAgICAgIGlQb2x5ID0galBvbHk7XG4gICAgICAgICAgICAgICAgdEVhcmxpZXN0ID0gdE9mZjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbmQgZWFybGllc3Qgbm90ZSBvblxuICAgICAgICBpZiAoIGlQb2x5ID09PSAtMSApIHtcbiAgICAgICAgICBub3Rlc1RpbWUubWFwKCAoIHRPbiwgalBvbHkgKSA9PiB7XG4gICAgICAgICAgICBpZiAoIHRPbiA8IHRFYXJsaWVzdCApIHtcbiAgICAgICAgICAgICAgaVBvbHkgPSBqUG9seTtcbiAgICAgICAgICAgICAgdEVhcmxpZXN0ID0gdE9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdGVzWyBpUG9seSBdID0gbm90ZTtcblxuICAgICAgICBpZiAoIGV2ZW50Tm90ZSAmIDEyOCApIHtcbiAgICAgICAgICBpZiAoIG5vdGVzT2ZmVGltZVsgaVBvbHkgXSA8IG5vdGVzVGltZVsgaVBvbHkgXSApIHtcbiAgICAgICAgICAgIG5vdGVzT2ZmVGltZVsgaVBvbHkgXSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICggbm90ZXNPZmZUaW1lWyBpUG9seSBdID49IG5vdGVzVGltZVsgaVBvbHkgXSApIHtcbiAgICAgICAgICAgIG5vdGVzVGltZVsgaVBvbHkgXSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbmV4dFN0ZXAgKz0gZXZlbnREZWx0YVN0ZXA7XG5cbiAgICAgICAgcG9zID0gKCBwb3MgKyAyICkgJSBidWZmZXIubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBzYW1wbGVzICsrO1xuXG4gICAgICBhcnJheVNlcmlhbCggcG9seSApLm1hcCggKCBpUG9seSApID0+IHtcbiAgICAgICAgY29uc3Qgbm90ZVRpbWUgPSBub3Rlc1RpbWVbIGlQb2x5IF07XG4gICAgICAgIGNvbnN0IG5vdGVPZmZUaW1lID0gbm90ZXNPZmZUaW1lWyBpUG9seSBdO1xuXG4gICAgICAgIHJldFsgaVBvbHkgXVsgNCAqIGlTYW1wbGUgKyAwIF0gPSB0IC0gbm90ZVRpbWU7IC8vIHRpbWVcbiAgICAgICAgcmV0WyBpUG9seSBdWyA0ICogaVNhbXBsZSArIDEgXSA9IG5vdGVPZmZUaW1lIDwgbm90ZVRpbWUgPyAwLjAgOiB0IC0gbm90ZU9mZlRpbWU7IC8vIG9mZlRpbWVcbiAgICAgICAgcmV0WyBpUG9seSBdWyA0ICogaVNhbXBsZSArIDIgXSA9IG5vdGVzWyBpUG9seSBdOyAvLyBub3RlXG4gICAgICAgIHJldFsgaVBvbHkgXVsgNCAqIGlTYW1wbGUgKyAzIF0gPSAwLjA7IC8vIHJlc2VydmVkXG4gICAgICB9ICk7XG4gICAgfSApO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGFycmF5U2VyaWFsIH0gZnJvbSAnLi4vYXJyYXknO1xuXG4vKipcbiAqIFBhcnNlIGEgdGlueXNlcSBidWZmZXIuXG4gKlxuICogUmV0dXJucyBbIHRpbWUsIG9mZlRpbWUsIG5vdGUsIHJlc2VydmVkLCB0aW1lLCBvZmZUaW1lLCBub3RlLCByZXNlcnZlZCwgLi4uIF1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRpbnlzZXFSZWFkZXIoXG4gIGJ1ZmZlcjogVWludDhBcnJheSxcbiAgb3B0aW9uczoge1xuICAgIGJsb2NrU2l6ZT86IG51bWJlcixcbiAgICBzYW1wbGVSYXRlPzogbnVtYmVyLFxuICAgIHN0ZXBzUGVyU2Vjb25kPzogbnVtYmVyLFxuICB9ID0ge30sXG4pOiAoKSA9PiBGbG9hdDMyQXJyYXkge1xuICBjb25zdCBibG9ja1NpemUgPSBvcHRpb25zLmJsb2NrU2l6ZSA/PyAxMjg7XG4gIGNvbnN0IHNhbXBsZVJhdGUgPSBvcHRpb25zLnNhbXBsZVJhdGUgPz8gNDgwMDA7XG4gIGNvbnN0IHN0ZXBzUGVyU2Vjb25kID0gb3B0aW9ucy5zdGVwc1BlclNlY29uZCA/PyA5NjAuMDtcblxuICBsZXQgc2FtcGxlcyA9IDA7XG4gIGxldCBwb3MgPSAwO1xuICBsZXQgbm90ZTogbnVtYmVyO1xuICBsZXQgbm90ZVRpbWUgPSAtSW5maW5pdHk7XG4gIGxldCBub3RlT2ZmVGltZSA9IC1JbmZpbml0eTtcbiAgbGV0IG5leHRTdGVwID0gMDtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KCBhcnJheVNlcmlhbCggYmxvY2tTaXplICkubWFwKCAoKSA9PiB7XG4gICAgICBjb25zdCB0ID0gc2FtcGxlcyAvIHNhbXBsZVJhdGU7XG4gICAgICBjb25zdCBzID0gdCAqIHN0ZXBzUGVyU2Vjb25kO1xuXG4gICAgICBpZiAoIHMgPj0gbmV4dFN0ZXAgKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50Tm90ZSA9IGJ1ZmZlclsgcG9zIF07XG4gICAgICAgIGNvbnN0IGV2ZW50RGVsdGFTdGVwID0gYnVmZmVyWyBwb3MgKyAxIF07XG5cbiAgICAgICAgbm90ZSA9ICggKCBwb3MgPT09IDAgPyA2MCA6IG5vdGUgKSArIGV2ZW50Tm90ZSApICYgMTI3O1xuICAgICAgICBpZiAoIGV2ZW50Tm90ZSAmIDEyOCApIHtcbiAgICAgICAgICBpZiAoIG5vdGVPZmZUaW1lIDwgbm90ZVRpbWUgKSB7XG4gICAgICAgICAgICBub3RlT2ZmVGltZSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICggbm90ZU9mZlRpbWUgPj0gbm90ZVRpbWUgKSB7XG4gICAgICAgICAgICBub3RlVGltZSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbmV4dFN0ZXAgKz0gZXZlbnREZWx0YVN0ZXA7XG5cbiAgICAgICAgcG9zID0gKCBwb3MgKyAyICkgJSBidWZmZXIubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBzYW1wbGVzICsrO1xuXG4gICAgICByZXR1cm4gW1xuICAgICAgICB0IC0gbm90ZVRpbWUsIC8vIHRpbWVcbiAgICAgICAgbm90ZU9mZlRpbWUgPCBub3RlVGltZSA/IDAuMCA6IHQgLSBub3RlT2ZmVGltZSwgLy8gb2ZmVGltZVxuICAgICAgICBub3RlLCAvLyBub3RlXG4gICAgICAgIDAuMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIF07XG4gICAgfSApLmZsYXQoKSApO1xuICB9O1xufVxuIiwiaW1wb3J0IHsgTWlkaVBhcnNlUmVzdWx0IH0gZnJvbSAnLi4vbWlkaSc7XG5pbXBvcnQgeyBhcnJheVNlcmlhbCB9IGZyb20gJy4uL2FycmF5JztcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBwYXJzZWQgbWlkaSByZXN1bHQgdG8gYSB0aW55c2VxIGJpbmFyeS5cbiAqXG4gKiBTZWU6IHtAbGluayBtaWRpUGFyc2V9XG4gKlxuICogQHBhcmFtIG1pZGkgVGhlIHBhcnNlZCBtaWRpIHJlc3VsdFxuICogQHBhcmFtIHRyYWNrIFRoZSBpbmRleCBvZiB0aGUgbWlkaSB0cmFjayB5b3Ugd2FudCB0byBjb252ZXJ0XG4gKiBAcGFyYW0gdGlja011bHRpcGxpZXIgTXVsdGlwbHkgdGhpcyB2YWx1ZSB0byB0aWNrXG4gKiBAcmV0dXJucyBBIHRpbnlzZXEgYmluYXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW55c2VxRnJvbU1pZGlQYXJzZVJlc3VsdChcbiAgbWlkaTogTWlkaVBhcnNlUmVzdWx0LFxuICB7IHRyYWNrLCB0aWNrTXVsdGlwbGllciB9OiB7XG4gICAgdHJhY2s/OiBudW1iZXIsXG4gICAgdGlja011bHRpcGxpZXI/OiBudW1iZXIsXG4gIH0gPSB7fSxcbik6IFVpbnQ4QXJyYXkge1xuICBjb25zdCBkYXRhOiBudW1iZXJbXSA9IFtdO1xuICBsZXQgbGFzdE5vdGUgPSA2MDtcbiAgbGV0IGRlbHRhID0gMDtcblxuICBjb25zdCB0cmFja0V2ZW50cyA9IG1pZGlbIDEgXVsgdHJhY2sgPz8gMC4wIF07XG5cbiAgLy8gWyBkZWx0YSwgbWlkaSBldmVudCwgbm90ZSwgdmVsIF1bXSAtPiBbIG9ub2ZmICgwIG9yIDEyOCkgKyBkZWx0YU5vdGUsIGRlbHRhLCAuLi4gXVxuICAvLyBbIFsgNCwgMTQ0LCA2MCwgMTAwIF0sIFsgNCwgMTI4LCA2MCwgMTAwIF0gXSAtPiBbIDEyOCwgNCwgMCwgNCwgMTI4LCAwIF1cblxuICBhcnJheVNlcmlhbCggdHJhY2tFdmVudHMubGVuZ3RoICsgMSApLm1hcCggKCBpICkgPT4ge1xuICAgIGRlbHRhICs9ICggdHJhY2tFdmVudHNbIGkgXT8uWyAwIF0gPz8gMCApICogKCB0aWNrTXVsdGlwbGllciA/PyAxLjAgKTtcblxuICAgIGlmICggZGVsdGEgPT09IDAgJiYgaSA9PT0gMCApIHsgcmV0dXJuOyB9IC8vIGlnbm9yZSBpZiBpdCdzIHRoZSBmaXJzdCBldmVudCBhbmQgZGVsdGEgaXMgMFxuXG4gICAgY29uc3QgZXZNc2cgPSB0cmFja0V2ZW50c1sgaSAtIDEgXT8uWyAxIF0gPz8gMTI4O1xuICAgIGNvbnN0IGV2Tm90ZSA9IHRyYWNrRXZlbnRzWyBpIC0gMSBdPy5bIDIgXSA/PyA2MDtcblxuICAgIGlmICggZXZNc2cgPj0gMTYwICkgeyByZXR1cm47IH0gLy8gaWdub3JlIGlmIHRoZSBtc2cgaXMgbm90IGEgbm90ZSBldmVudFxuXG4gICAgY29uc3Qgbm90ZURlbHRhID0gKCBldk5vdGUgLSBsYXN0Tm90ZSArIDEyOCApICYgMTI3O1xuICAgIGxhc3ROb3RlID0gZXZOb3RlO1xuICAgIGNvbnN0IG9ub2ZmID0gZXZNc2cgPCAxNDQgPyAxMjggOiAwOyAvLyAwIGlmIG9uICgxNDQgLSAxNTkpLCAxMjggaWYgb2ZmICgxMjggLSAxNDMpXG5cbiAgICAvLyBwcm9iYWJseSAyNDAgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiAyNTYgc2luY2UgdGhlIGRpdmlzaW9uIGluIG1vc3Qgb2YgbWlkaSBmaWxlcyBhcmUgNDgwIG9yIDk2MFxuICAgIGxldCBkZWx0YUNvbnN1bWUgPSBNYXRoLmZsb29yKCBNYXRoLm1pbiggZGVsdGEsIDI0MCApICk7XG4gICAgZGF0YS5wdXNoKCBub3RlRGVsdGEgKyBvbm9mZiwgZGVsdGFDb25zdW1lICk7XG4gICAgZGVsdGEgLT0gZGVsdGFDb25zdW1lO1xuXG4gICAgd2hpbGUgKCBkZWx0YSA+PSAxICkge1xuICAgICAgZGVsdGFDb25zdW1lID0gTWF0aC5mbG9vciggTWF0aC5taW4oIGRlbHRhLCAyNDAgKSApO1xuICAgICAgZGF0YS5wdXNoKCBvbm9mZiwgZGVsdGFDb25zdW1lICk7XG4gICAgICBkZWx0YSAtPSBkZWx0YUNvbnN1bWU7XG4gICAgfVxuICB9ICk7XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KCBkYXRhICk7XG59XG4iLCJleHBvcnQgY2xhc3MgWG9yc2hpZnQge1xuICBwdWJsaWMgc2VlZDogbnVtYmVyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc2VlZD86IG51bWJlciApIHtcbiAgICB0aGlzLnNlZWQgPSBzZWVkIHx8IDE7XG4gIH1cblxuICBwdWJsaWMgZ2VuKCBzZWVkPzogbnVtYmVyICk6IG51bWJlciB7XG4gICAgaWYgKCBzZWVkICkge1xuICAgICAgdGhpcy5zZWVkID0gc2VlZDtcbiAgICB9XG5cbiAgICB0aGlzLnNlZWQgPSB0aGlzLnNlZWQgXiAoIHRoaXMuc2VlZCA8PCAxMyApO1xuICAgIHRoaXMuc2VlZCA9IHRoaXMuc2VlZCBeICggdGhpcy5zZWVkID4+PiAxNyApO1xuICAgIHRoaXMuc2VlZCA9IHRoaXMuc2VlZCBeICggdGhpcy5zZWVkIDw8IDUgKTtcbiAgICByZXR1cm4gdGhpcy5zZWVkIC8gTWF0aC5wb3coIDIsIDMyICkgKyAwLjU7XG4gIH1cblxuICBwdWJsaWMgc2V0KCBzZWVkPzogbnVtYmVyICk6IHZvaWQge1xuICAgIHRoaXMuc2VlZCA9IHNlZWQgfHwgdGhpcy5zZWVkIHx8IDE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWG9yc2hpZnQ7XG4iLCJpbXBvcnQgeyBsaW5lYXJzdGVwIH0gZnJvbSAnLi4vbWF0aC91dGlscyc7XG5cbi8qKlxuICogaHR0cHM6Ly90d2l0dGVyLmNvbS95dWdvcFxuICpcbiAqIEBwYXJhbSB0ZXh0IFRoZSBpbnB1dCB0ZXh0XG4gKiBAcGFyYW0gcGhhc2UgVGhlIHZhbHVlIGJldHdlZW4gMC4wIGFuZCAxLjBcbiAqIEBwYXJhbSByYW5kb21SYXRpbyBUaGUgbmVyZCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0WXVnb3BUZXh0KCB0ZXh0OiBzdHJpbmcsIHBoYXNlOiBudW1iZXIsIHJhbmRvbVJhdGlvID0gMC41ICk6IHN0cmluZyB7XG4gIGlmICggcGhhc2UgPj0gMS4wICkgeyByZXR1cm4gdGV4dDsgfVxuICBpZiAoIHBoYXNlIDwgMC4wICkgeyByZXR1cm4gJyc7IH1cblxuICAvKlxuICAgKiAtLS0tLS09PT09PVxuICAgKiAuLS0tLS0tPT09PVxuICAgKiAuLi0tLS0tLT09PVxuICAgKiAuLi4tLS0tLS09PVxuICAgKiAuLi4uLS0tLS0tPVxuICAgKiBeICAgICBeICAgXlxuICAgKiB8ICAgICB8ICAgfFxuICAgKiB8ICAgICB8ICAgcGhhc2UgaXMgMS4wXG4gICAqIHwgICAgIHBoYXNlIGlzIHJhbmRvbVJhdGlvXG4gICAqIHBoYXNlIGlzIDAuMFxuICAgKi9cblxuICBjb25zdCBkaXNwbGF5VHdlZW4gPSBsaW5lYXJzdGVwKCAwLjAsIDEuMCAtIHJhbmRvbVJhdGlvLCBwaGFzZSApO1xuICBjb25zdCBmaXhUd2VlbiA9IGxpbmVhcnN0ZXAoIHJhbmRvbVJhdGlvLCAxLjAsIHBoYXNlICk7XG5cbiAgY29uc3QgZGlzcGxheUxlbmd0aCA9IDEuMCArIE1hdGguZmxvb3IoIGRpc3BsYXlUd2VlbiAqICggdGV4dC5sZW5ndGggLSAxICkgKTtcbiAgY29uc3QgZml4TGVuZ3RoID0gcGhhc2UgPCByYW5kb21SYXRpbyA/IDAgOiAxLjAgKyBNYXRoLmZsb29yKCBmaXhUd2VlbiAqICggdGV4dC5sZW5ndGggLSAxICkgKTtcbiAgY29uc3QgcmFuZG9tTGVuZ3RoID0gZGlzcGxheUxlbmd0aCAtIGZpeExlbmd0aDtcblxuICBjb25zdCByYW5kb21TdHIgPSBbIC4uLkFycmF5KCByYW5kb21MZW5ndGggKSBdXG4gICAgLm1hcCggKCkgPT4gU3RyaW5nLmZyb21DaGFyQ29kZSggMzMgKyBNYXRoLmZsb29yKCA5MyAqIE1hdGgucmFuZG9tKCkgKSApIClcbiAgICAuam9pbiggJycgKTtcblxuICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoIDAsIGZpeExlbmd0aCApICsgcmFuZG9tU3RyO1xufVxuIiwiZXhwb3J0IGNsYXNzIEJpbmFyeUhlYXA8VD4ge1xuICBwdWJsaWMgcmVhZG9ubHkgYXJyYXk6IFRbXTtcbiAgcHVibGljIHJlYWRvbmx5IGVsZW1lbnRJbmRleE1hcDogTWFwPFQsIG51bWJlcj47XG4gIHB1YmxpYyBjb21wYXJhdG9yOiAoIGE6IFQsIGI6IFQgKSA9PiBudW1iZXI7XG5cbiAgcHVibGljIHN0YXRpYyBkZWZhdWx0Q29tcGFyYXRvciggYTogYW55LCBiOiBhbnkgKTogbnVtYmVyIHtcbiAgICBjb25zdCBhU3RyID0gYCR7IGEgfWA7XG4gICAgY29uc3QgYlN0ciA9IGAkeyBiIH1gO1xuXG4gICAgaWYgKCBhU3RyID4gYlN0ciApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoIGFTdHIgPCBiU3RyICkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGggPT09IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJvb3QoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlbIDAgXTtcbiAgfVxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaW5pdD86IFRbXSwgY29tcGFyYXRvcj86ICggYTogVCwgYjogVCApID0+IG51bWJlciApIHtcbiAgICB0aGlzLmFycmF5ID0gW107XG4gICAgdGhpcy5lbGVtZW50SW5kZXhNYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5jb21wYXJhdG9yID0gY29tcGFyYXRvciA/PyBCaW5hcnlIZWFwLmRlZmF1bHRDb21wYXJhdG9yO1xuXG4gICAgaWYgKCBpbml0ICE9IG51bGwgKSB7XG4gICAgICBmb3IgKCBjb25zdCBlbCBvZiBpbml0ICkge1xuICAgICAgICB0aGlzLnB1c2goIGVsICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHB1c2goIC4uLmVsZW1lbnRzOiBUW10gKTogdm9pZCB7XG4gICAgZWxlbWVudHMubWFwKCAoIGVsICkgPT4ge1xuICAgICAgY29uc3QgaSA9IHRoaXMubGVuZ3RoO1xuICAgICAgdGhpcy5hcnJheS5wdXNoKCBlbCApO1xuICAgICAgdGhpcy5lbGVtZW50SW5kZXhNYXAuc2V0KCBlbCwgaSApO1xuICAgICAgdGhpcy5fX3VwKCBpLCBlbCApO1xuICAgIH0gKTtcbiAgfVxuXG4gIHB1YmxpYyBwb3AoKTogVCB8IG51bGwge1xuICAgIGlmICggdGhpcy5pc0VtcHR5ICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZWwgPSB0aGlzLmFycmF5WyAwIF07XG4gICAgdGhpcy5lbGVtZW50SW5kZXhNYXAuZGVsZXRlKCBlbCApO1xuXG4gICAgaWYgKCB0aGlzLmxlbmd0aCA9PT0gMSApIHtcbiAgICAgIHRoaXMuYXJyYXkuc3BsaWNlKCAwICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlcCA9IHRoaXMuYXJyYXkucG9wKCk7XG4gICAgICB0aGlzLl9fZG93biggMCwgcmVwISApO1xuICAgIH1cblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGUoIGk6IG51bWJlciApOiBib29sZWFuIHtcbiAgICB0aGlzLmVsZW1lbnRJbmRleE1hcC5kZWxldGUoIHRoaXMuYXJyYXlbIGkgXSApO1xuXG4gICAgY29uc3QgcmVwID0gdGhpcy5hcnJheS5wb3AoKTtcbiAgICBpZiAoIHJlcCAhPSBudWxsICkge1xuICAgICAgaSA9IHRoaXMuX191cCggaSwgcmVwICk7XG4gICAgICBpID0gdGhpcy5fX2Rvd24oIGksIHJlcCApO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHVibGljIHJlcGxhY2UoIGk6IG51bWJlciwgcmVwOiBUICk6IG51bWJlciB8IG51bGwge1xuICAgIGlmICggaSAhPSBudWxsICkge1xuICAgICAgdGhpcy5lbGVtZW50SW5kZXhNYXAuZGVsZXRlKCB0aGlzLmFycmF5WyBpIF0gKTtcblxuICAgICAgaSA9IHRoaXMuX191cCggaSwgcmVwICk7XG4gICAgICBpID0gdGhpcy5fX2Rvd24oIGksIHJlcCApO1xuICAgIH1cblxuICAgIHJldHVybiBpID8/IG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9fdXAoIGk6IG51bWJlciwgZWw6IFQgKTogbnVtYmVyIHtcbiAgICBsZXQgaWMgPSBpO1xuXG4gICAgd2hpbGUgKCBpYyAhPT0gMCApIHtcbiAgICAgIGNvbnN0IGlwID0gKCBpYyAtIDEgKSA+PiAxO1xuXG4gICAgICBjb25zdCBwID0gdGhpcy5hcnJheVsgaXAgXTtcbiAgICAgIGlmICggdGhpcy5jb21wYXJhdG9yKCBlbCwgcCApIDwgMCApIHtcbiAgICAgICAgdGhpcy5hcnJheVsgaWMgXSA9IHA7XG4gICAgICAgIHRoaXMuZWxlbWVudEluZGV4TWFwLnNldCggcCwgaWMgKTtcbiAgICAgICAgaWMgPSBpcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlbIGljIF0gPSBlbDtcbiAgICB0aGlzLmVsZW1lbnRJbmRleE1hcC5zZXQoIGVsLCBpYyApO1xuICAgIHJldHVybiBpYztcbiAgfVxuXG4gIHByaXZhdGUgX19kb3duKCBpOiBudW1iZXIsIGVsOiBUICk6IG51bWJlciB7XG4gICAgbGV0IGlwID0gaTtcblxuICAgIHdoaWxlICggKCBpcCA8PCAxICkgKyAxIDwgdGhpcy5sZW5ndGggKSB7XG4gICAgICBjb25zdCBpYzEgPSAoIGlwIDw8IDEgKSArIDE7XG4gICAgICBjb25zdCBpYzIgPSAoIGlwIDw8IDEgKSArIDI7XG5cbiAgICAgIGlmICggaWMyIDwgdGhpcy5sZW5ndGggKSB7XG4gICAgICAgIGNvbnN0IGMxID0gdGhpcy5hcnJheVsgaWMxIF07XG4gICAgICAgIGNvbnN0IGMyID0gdGhpcy5hcnJheVsgaWMyIF07XG5cbiAgICAgICAgY29uc3QgcGlja0xlZnQgPSB0aGlzLmNvbXBhcmF0b3IoIGMxLCBjMiApIDwgMDtcbiAgICAgICAgY29uc3QgYyA9IHBpY2tMZWZ0ID8gYzEgOiBjMjtcbiAgICAgICAgY29uc3QgaWMgPSBwaWNrTGVmdCA/IGljMSA6IGljMjtcblxuICAgICAgICBpZiAoIHRoaXMuY29tcGFyYXRvciggYywgZWwgKSA8IDAgKSB7XG4gICAgICAgICAgdGhpcy5hcnJheVsgaXAgXSA9IGM7XG4gICAgICAgICAgdGhpcy5lbGVtZW50SW5kZXhNYXAuc2V0KCBjLCBpcCApO1xuICAgICAgICAgIGlwID0gaWM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIHRoaXMuY29tcGFyYXRvciggdGhpcy5hcnJheVsgaWMxIF0sIGVsICkgPCAwICkge1xuICAgICAgICB0aGlzLmFycmF5WyBpcCBdID0gdGhpcy5hcnJheVsgaWMxIF07XG4gICAgICAgIHRoaXMuZWxlbWVudEluZGV4TWFwLnNldCggdGhpcy5hcnJheVsgaXAgXSwgaXAgKTtcbiAgICAgICAgaXAgPSBpYzE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5WyBpcCBdID0gZWw7XG4gICAgdGhpcy5lbGVtZW50SW5kZXhNYXAuc2V0KCBlbCwgaXAgKTtcbiAgICByZXR1cm4gaXA7XG4gIH1cbn1cbiIsIi8qKlxuICogQSBiYXJlIGZ1bmN0aW9uIHRvIG5vdGlmeSBvYnNlcnZlcnMuXG4gKiBUaGUgaW5jcmVkaWJseSBjaGVhcCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgb2JzZXJ2ZXIgcGF0dGVybi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IG9ic2VydmVycyA9IG5ldyBTZXQ8KCB0ZXh0OiBzdHJpbmcgKSA9PiB2b2lkPigpO1xuICpcbiAqIG9ic2VydmVycy5hZGQoICggdGV4dCApID0+IGNvbnNvbGUubG9nKCB0ZXh0ICkgKTtcbiAqIG9ic2VydmVycy5hZGQoICggdGV4dCApID0+IGFsZXJ0KCB0ZXh0ICkgKTtcbiAqXG4gKiBub3RpZnlPYnNlcnZlcnMoIG9ic2VydmVycywgJ3dlbmlzJyApO1xuICogYGBgXG4gKlxuICogQHBhcmFtIG9ic2VydmVycyBUaGUgaXRlcmF0b3Igb2Ygb2JzZXJ2ZXJzXG4gKiBAcGFyYW0gcGFyYW0gVGhlIHBhcmFtIHlvdSB3YW50IHRvIGdpdmUgdG8gb2JzZXJ2ZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RpZnlPYnNlcnZlcnMoIG9ic2VydmVyczogSXRlcmFibGU8KCkgPT4gdm9pZD4gKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBub3RpZnlPYnNlcnZlcnM8VD4oIG9ic2VydmVyczogSXRlcmFibGU8KCBhcmc6IFQgKSA9PiB2b2lkPiwgcGFyYW06IFQgKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBub3RpZnlPYnNlcnZlcnMoIG9ic2VydmVyczogSXRlcmFibGU8KCBhcmc6IGFueSApID0+IHZvaWQ+LCBwYXJhbT86IGFueSApOiB2b2lkIHtcbiAgZm9yICggY29uc3Qgb2JzZXJ2ZXIgb2Ygb2JzZXJ2ZXJzICkge1xuICAgIG9ic2VydmVyKCBwYXJhbSApO1xuICB9XG59XG4iLCIvLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQge21vZH0gZnJvbSAnQDBiNXZyL2V4cGVyaW1lbnRhbCdcbi8vIGltcG9ydCB7bm9pfSBmcm9tIFwiQDBiNXZyL2V4cGVyaW1lbnRhbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBmcmFjdChhOiBudW1iZXIpIHtcblx0cmV0dXJuIG1vZChhLCAxKVxufVxuXG5leHBvcnQgY29uc3QgdGF1OiBudW1iZXIgPSBNYXRoLlBJICogMi4wXG5leHBvcnQgY29uc3QgcGk6IG51bWJlciA9IE1hdGguUElcbmV4cG9ydCBjb25zdCBoYWxmUGk6IG51bWJlciA9IE1hdGguUEkgLyAyXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIge1xuXHRyZXR1cm4gTWF0aC5tYXgoYSwgYilcbn1cbmV4cG9ydCBmdW5jdGlvbiBtaW4oYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIge1xuXHRyZXR1cm4gTWF0aC5taW4oYSwgYilcbn1cbmV4cG9ydCBmdW5jdGlvbiBtaXgoYTogbnVtYmVyLCBiOiBudW1iZXIsIGY6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBhICogKDEuMCAtIGYpICsgYiAqIGZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZyhhOiBudW1iZXIpOiBudW1iZXIge1xuXHRyZXR1cm4gTWF0aC5sb2coYSlcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2cyKGE6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBNYXRoLmxvZzIoYSlcbn1cblxuZXhwb3J0IGNsYXNzIEhhc2gge1xuXHRzZWVkID0gMFxuXHRjb25zdHJ1Y3RvcihzZWVkID0gMTI1MTI1NCkge1xuXHRcdEhhc2guc2VlZCA9IHNlZWRcblx0fVxuXHRzdGF0aWMgaDExKHA6IG51bWJlcik6IG51bWJlciB7XG5cdFx0cCA9IGZyYWN0KHAgKiAwLjEwMzEpXG5cdFx0cCAqPSBwICsgMzMuMzNcblx0XHRwICo9IHAgKyBwXG5cdFx0cmV0dXJuIGZyYWN0KHApXG5cdH1cblx0aDExKHA6IG51bWJlcikge1xuXHRcdHJldHVybiB0aGlzLnNlZWRlZCgxMjUxMjQgKyBwICogMTI1MClcblx0fVxuXHRzZWVkZWQoYSkge1xuXHRcdHZhciB0ID0gKGEgKz0gMHg2ZDJiNzlmNSlcblx0XHR0ID0gTWF0aC5pbXVsKHQgXiAodCA+Pj4gMTUpLCB0IHwgMSlcblx0XHR0IF49IHQgKyBNYXRoLmltdWwodCBeICh0ID4+PiA3KSwgdCB8IDYxKVxuXHRcdHJldHVybiAoKHQgXiAodCA+Pj4gMTQpKSA+Pj4gMCkgLyA0Mjk0OTY3Mjk2XG5cdH1cblxuXHR2YWx1ZU5vaXNlKGE6IG51bWJlcik6IG51bWJlciB7XG5cdFx0Y29uc3QgZmxhID0gZmxvb3IoYSlcblx0XHRjb25zdCBjZWlsYSA9IGZsYSArIDFcblx0XHRjb25zdCByY3VyciA9IEhhc2guaDExKGZsYSlcblx0XHRjb25zdCBybmV4dCA9IEhhc2guaDExKGNlaWxhKVxuXHRcdGxldCBmciA9IGZyYWN0KGEpXG5cdFx0ZnIgPSBzbW9vdGhzdGVwKDAsIDEsIGZyKVxuXHRcdHJldHVybiBsZXJwKHJjdXJyLCBybmV4dCwgZnIpXG5cdH1cblxuXHR2YWx1ZU5vaXNlU21vb3RoKGE6IG51bWJlciwgc21vb3RobmVzczogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRjb25zdCBmbGEgPSBmbG9vcihhKVxuXHRcdGNvbnN0IGNlaWxhID0gZmxhICsgMVxuXHRcdGNvbnN0IHJjdXJyID0gdGhpcy5oMTEoZmxhKVxuXHRcdGNvbnN0IHJuZXh0ID0gdGhpcy5oMTEoY2VpbGEpXG5cdFx0bGV0IGZyID0gZnJhY3QoYSlcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNtb290aG5lc3M7IGkrKykge1xuXHRcdFx0aWYgKGZsb29yKGkpID09PSBmbG9vcihzbW9vdGhuZXNzKSkge1xuXHRcdFx0XHRmciA9IGxlcnAoZnIsIHNtb290aHN0ZXAoMCwgMSwgZnIpLCBzbW9vdGhuZXNzIC0gaSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZyID0gc21vb3Roc3RlcCgwLCAxLCBmcilcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGxlcnAocmN1cnIsIHJuZXh0LCBmcilcblx0fVxufVxuXG4vLyBleHBvcnQgY29uc3QgbmtpbmdTaW4gPSAoeDogbnVtYmVyKSA9PiB7XG4vLyAgIGNvbnN0IHNxID0gKHg6IG51bWJlcikgPT4geCAqIHg7XG4vLyAgIGNvbnN0IHN0ZXAgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IHtcbi8vICAgICBpZiAoYSA8IGIpIHJldHVybiAwO1xuLy8gICAgIGVsc2UgcmV0dXJuIDE7XG4vLyAgIH07XG4vLyAgICB2YWwgLSBNYXRoLmZsb29yKHZhbClcbi8vICAgcmV0dXJuIChzcSgoKHggJSBwaSkgKiAyKSAvIHBpIC0gMSkgLSAxKSAqICgxIC0gMiAqIHN0ZXAoeCAlICgyICogcGkpLCBwaSkpO1xuLy8gfTtcblxuY29uc3QgcjJwaSA9IDAuNjM2NjE5NzcyMzZcblxuZXhwb3J0IGNvbnN0IG5raW5nU2luID0gKHg6IG51bWJlcikgPT4ge1xuXHRjb25zdCB4dGF1ID0geCAqIHRhdVxuXHRpZiAoeHRhdSAtIE1hdGguZmxvb3IoeHRhdSkgPiBwaSkge1xuXHRcdGNvbnN0IG1vZCA9ICh4IC0gcGkpICogcjJwaSAtIDFcblx0XHRyZXR1cm4gbW9kICogbW9kIC0gMVxuXHR9IGVsc2Uge1xuXHRcdGNvbnN0IG1vZCA9IHggKiByMnBpIC0gMVxuXHRcdHJldHVybiAxIC0gbW9kICogbW9kXG5cdH1cbn1cblxuY29uc3Qgc21vb3Roc2luID0gKHg6IG51bWJlcikgPT4ge1xuXHRjb25zdCBiID0geCAqIHggKiAoMy4wIC0gMi4wICogeClcblx0Y29uc3QgYSA9IHggKiAoMyAtIDEuMCAqIHgpXG5cdHJldHVybiBhICsgKGIgLSBhKSAqIGJcbn1cbmNvbnN0IG9uZU92ZXJIYWxmUGkgPSAxIC8gKHBpIC8gMilcbmV4cG9ydCBjb25zdCBmYXN0U2luID0gKHg6IG51bWJlcikgPT4ge1xuXHR4ICo9IG9uZU92ZXJIYWxmUGlcblxuXHRjb25zdCBpZCA9IE1hdGguZmxvb3IoeClcblx0eCA9IHggJSAxXG5cblx0bGV0IHNpZGUgPSAxXG5cdGlmICgoaWQgLSAyKSAlIDQgPCAyKSB7XG5cdFx0c2lkZSA9IC0xXG5cdH1cblx0aWYgKGlkICUgMiA9PT0gMSkge1xuXHRcdHggPSAxIC0geFxuXHR9XG5cdGxldCBhcHByb3ggPSBzbW9vdGhzaW4oeClcblx0YXBwcm94ICo9IHNpZGVcblx0cmV0dXJuIGFwcHJveFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVhbnRpemUoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIge1xuXHRyZXR1cm4gTWF0aC5mbG9vcihhIC8gYikgKiBiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkbW9kKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXI/ID0gMikge1xuXHRyZXR1cm4gbWF4KG1vZChhLCBiKSAtIGIgKyAyLCAwKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWJzKGE6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBNYXRoLmFicyhhKVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNpZ24oYTogbnVtYmVyKTogbnVtYmVyIHtcblx0cmV0dXJuIGEgPCAwID8gLTEgOiAxXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmkoYTogbnVtYmVyKTogbnVtYmVyIHtcblx0Y29uc3QgZnIgPSBhIC0gTWF0aC5mbG9vcihhKVxuXHRyZXR1cm4gYWJzKGZyIC0gMC41KSAqIDIgLSAxXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW4oYTogbnVtYmVyKTogbnVtYmVyIHtcblx0Ly8gcmV0dXJuIGZhc3RTaW4oYSlcblx0Ly8gIHJldHVybiBua2luZ1NpbihhKVxuXHRyZXR1cm4gTWF0aC5zaW4oYSlcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb3MoYTogbnVtYmVyKTogbnVtYmVyIHtcblx0Ly8gcmV0dXJuIG5raW5nU2luKGEgKyBoYWxmUGkpXG5cdHJldHVybiBNYXRoLmNvcyhhKVxufVxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKGE6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBNYXRoLmZsb29yKGEpXG59XG5leHBvcnQgZnVuY3Rpb24gcG93KGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG5cdHJldHVybiBNYXRoLnBvdyhhLCBiKVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNxcnQoYTogbnVtYmVyKSB7XG5cdHJldHVybiBNYXRoLnNxcnQoYSlcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwKGE6IG51bWJlciwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG5cdGNvbnN0IHJhbmdlID0gdG8gLSBmcm9tXG5cdGEgLT0gZnJvbVxuXHRhID0gbW9kKGEsIHJhbmdlKVxuXHRyZXR1cm4gZnJvbSArIGFcbn1cblxuZXhwb3J0IGNvbnN0IGxlcnAgPSAoYSwgYiwgeCkgPT4gYSArIChiIC0gYSkgKiB4XG5leHBvcnQgY29uc3QgY2xhbXAgPSAoeCwgbCwgaCkgPT4gTWF0aC5taW4oTWF0aC5tYXgoeCwgbCksIGgpXG5leHBvcnQgY29uc3Qgc2F0dXJhdGUgPSAoeCkgPT4gTWF0aC5taW4oTWF0aC5tYXgoeCwgMC4wKSwgMS4wKVxuZXhwb3J0IGNvbnN0IGxpbmVhcnN0ZXAgPSAoYSwgYiwgeCkgPT4gc2F0dXJhdGUoKHggLSBhKSAvIChiIC0gYSkpXG5leHBvcnQgY29uc3Qgc21vb3Roc3RlcCA9IChhLCBiLCB4KSA9PiB7XG5cdGNvbnN0IHQgPSBsaW5lYXJzdGVwKGEsIGIsIHgpXG5cdHJldHVybiB0ICogdCAqICgzLjAgLSAyLjAgKiB0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZCgpIHtcblx0cmV0dXJuIE1hdGgucmFuZG9tKClcbn1cblxuLy8gU29tZSBlYXNpbmcgZnVuY3Rpb25zXG5jbGFzcyBFYXNlIHtcblx0Ly8gbm8gZWFzaW5nLCBubyBhY2NlbGVyYXRpb25cblx0c3RhdGljIGxpbmVhcih0OiBudW1iZXIpOiBudW1iZXIge1xuXHRcdDsodCkgPT4gdFxuXHR9XG5cdC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcblx0c3RhdGljIGVhc2VJblF1YWQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdCAqIHRcblx0fVxuXHQvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuXHRzdGF0aWMgZWFzZU91dFF1YWQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdCAqICgyIC0gdClcblx0fVxuXHQvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cblx0c3RhdGljIGVhc2VJbk91dFF1YWQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdCA8IDAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0XG5cdH1cblx0Ly8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuXHRzdGF0aWMgZWFzZUluQ3ViaWModDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0XG5cdH1cblx0Ly8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcblx0c3RhdGljIGVhc2VPdXRDdWJpYyh0OiBudW1iZXIpOiBudW1iZXIge1xuXHRcdHJldHVybiAtLXQgKiB0ICogdCArIDFcblx0fVxuXHQvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cblx0c3RhdGljIGVhc2VJbk91dEN1YmljKHQ6IG51bWJlcik6IG51bWJlciB7XG5cdFx0cmV0dXJuIHQgPCAwLjUgPyA0ICogdCAqIHQgKiB0IDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxXG5cdH1cblx0Ly8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuXHRzdGF0aWMgZWFzZUluUXVhcnQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0ICogdFxuXHR9XG5cdC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG5cdHN0YXRpYyBlYXNlT3V0UXVhcnQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gMSAtIC0tdCAqIHQgKiB0ICogdFxuXHR9XG5cdC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuXHRzdGF0aWMgZWFzZUluT3V0UXVhcnQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdCA8IDAuNSA/IDggKiB0ICogdCAqIHQgKiB0IDogMSAtIDggKiAtLXQgKiB0ICogdCAqIHRcblx0fVxuXHQvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG5cdHN0YXRpYyBlYXNlSW5RdWludCh0OiBudW1iZXIpOiBudW1iZXIge1xuXHRcdHJldHVybiB0ICogdCAqIHQgKiB0ICogdFxuXHR9XG5cdC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG5cdHN0YXRpYyBlYXNlT3V0UXVpbnQodDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gMSArIC0tdCAqIHQgKiB0ICogdCAqIHRcblx0fVxuXHQvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cblx0c3RhdGljIGVhc2VJbk91dFF1aW50KHQ6IG51bWJlcik6IG51bWJlciB7XG5cdFx0cmV0dXJuIHQgPCAwLjUgPyAxNiAqIHQgKiB0ICogdCAqIHQgKiB0IDogMSArIDE2ICogLS10ICogdCAqIHQgKiB0ICogdFxuXHR9XG5cdHN0YXRpYyBlYXNlSW5FbGFzdGljKHQ6IG51bWJlcik6IG51bWJlciB7XG5cdFx0Y29uc3QgYzQgPSAoMiAqIE1hdGguUEkpIC8gM1xuXG5cdFx0cmV0dXJuIHQgPT09IDAgPyAwIDogdCA9PT0gMSA/IDEgOiAtTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApICogTWF0aC5zaW4oKHQgKiAxMCAtIDEwLjc1KSAqIGM0KVxuXHR9XG5cdHN0YXRpYyBlYXNlT3V0RWxhc3RpYyh0OiBudW1iZXIpOiBudW1iZXIge1xuXHRcdGNvbnN0IGM0ID0gKDIgKiBNYXRoLlBJKSAvIDNcblx0XHRyZXR1cm4gdCA9PT0gMCA/IDAgOiB0ID09PSAxID8gMSA6IE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgKiAxMCAtIDAuNzUpICogYzQpICsgMVxuXHR9XG5cdC8vIGVhc2VJbk91dEVsYXN0aWM6IHQgPT4ge1xuXHQvLyAgIHZhciBzID0gMiAqIHQgLSAxIC8vIHJlbWFwOiBbMCwwLjVdIC0+IFstMSwwXVxuXHQvLyAgIHZhciBrID0gKCg4MCAqIHMgLSA5KSAqIE1hdGguUEkpIC8gMTggLy8gYW5kICAgIFswLjUsMV0gLT4gWzAsKzFdXG5cdC8vICAgaWYgKHMgPCAwKSByZXR1cm4gLTAuNSAqIE1hdGgucG93KDIsIDEwICogcykgKiBNYXRoLnNpbihrKVxuXHQvLyAgIGVsc2UgcmV0dXJuIDEgKyAwLjUgKiBNYXRoLnBvdygyLCAtMTAgKiBzKSAqIE1hdGguc2luKGspXG5cdC8vIH0sXG59XG5cbmV4cG9ydCBjbGFzcyBXTWF0aCB7XG5cdHN0YXRpYyBtYWNvcyh4OiBudW1iZXIpIHtcblx0XHRyZXR1cm4gTWF0aC5hY29zKHgpXG5cdH1cblx0c3RhdGljIG1hc2luKHg6IG51bWJlcikge1xuXHRcdHJldHVybiBNYXRoLmFzaW4oeClcblx0fVxuXHRzdGF0aWMgbWF0YW4oeSwgeCkge1xuXHRcdHJldHVybiBNYXRoLmF0YW4yKHksIHgpXG5cdH1cblx0c3RhdGljIG1jb3MoeCkge1xuXHRcdHJldHVybiBNYXRoLmNvcyh4KVxuXHR9XG5cdHN0YXRpYyBtc2luKHgpIHtcblx0XHRyZXR1cm4gTWF0aC5zaW4oeClcblx0fVxuXHRzdGF0aWMgY29zMih4KSB7XG5cdFx0cmV0dXJuIFtNYXRoLmNvcyh4WzBdKSwgTWF0aC5jb3MoeFsxXSldXG5cdH1cblx0c3RhdGljIGNvczMoeCkge1xuXHRcdHJldHVybiBbTWF0aC5jb3MoeFswXSksIE1hdGguY29zKHhbMV0pLCBNYXRoLmNvcyh4WzJdKV1cblx0fVxuXHRzdGF0aWMgc2luMih4KSB7XG5cdFx0cmV0dXJuIFtNYXRoLnNpbih4WzBdKSwgTWF0aC5zaW4oeFsxXSldXG5cdH1cblx0c3RhdGljIHNpbjMoeCkge1xuXHRcdHJldHVybiBbTWF0aC5zaW4oeFswXSksIE1hdGguc2luKHhbMV0pLCBNYXRoLnNpbih4WzJdKV1cblx0fVxuXHRzdGF0aWMgc2luNCh4KSB7XG5cdFx0cmV0dXJuIFtNYXRoLnNpbih4WzBdKSwgTWF0aC5zaW4oeFsxXSksIE1hdGguc2luKHhbMl0pLCBNYXRoLnNpbih4WzNdKV1cblx0fVxuXHRzdGF0aWMgU0MoeCkge1xuXHRcdHJldHVybiBbTWF0aC5zaW4oeCksIE1hdGguY29zKHgpXVxuXHR9XG5cdHN0YXRpYyBhZGQyKGEsIGIpIHtcblx0XHRyZXR1cm4gW2FbMF0gKyBiWzBdLCBhWzFdICsgYlsxXV1cblx0fVxuXHRzdGF0aWMgYWRkMyhhLCBiKSB7XG5cdFx0cmV0dXJuIFthWzBdICsgYlswXSwgYVsxXSArIGJbMV0sIGFbMl0gKyBiWzJdXVxuXHR9XG5cdHN0YXRpYyBhZGQzMShhLCBiKSB7XG5cdFx0cmV0dXJuIFthWzBdICsgYiwgYVsxXSArIGIsIGFbMl0gKyBiXVxuXHR9XG5cdHN0YXRpYyBhZGQ0KGEsIGIpIHtcblx0XHRyZXR1cm4gW2FbMF0gKyBiWzBdLCBhWzFdICsgYlsxXSwgYVsyXSArIGJbMl0sIGFbM10gKyBiWzNdXVxuXHR9XG5cdHN0YXRpYyBzdWIzKGEsIGIpIHtcblx0XHRyZXR1cm4gW2FbMF0gLSBiWzBdLCBhWzFdIC0gYlsxXSwgYVsyXSAtIGJbMl1dXG5cdH1cblx0c3RhdGljIHN1YjIoYSwgYikge1xuXHRcdHJldHVybiBbYVswXSAtIGJbMF0sIGFbMV0gLSBiWzFdXVxuXHR9XG5cdHN0YXRpYyBkb3QzKGEsIGIpIHtcblx0XHRyZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdXG5cdH1cblx0c3RhdGljIGFiczMoYSkge1xuXHRcdHJldHVybiBbYVswXSA+IDAgPyBhWzBdIDogLWFbMF0sIGFbMV0gPiAwID8gYVsxXSA6IC1hWzFdLCBhWzJdID4gMCA/IGFbMl0gOiAtYVsyXV1cblx0fVxuXHRzdGF0aWMgc2NhbGUyKGEsIGIpIHtcblx0XHRyZXR1cm4gW2FbMF0gKiBiLCBhWzFdICogYl1cblx0fVxuXHRzdGF0aWMgc2NhbGUzKGEsIGIpIHtcblx0XHRyZXR1cm4gW2FbMF0gKiBiLCBhWzFdICogYiwgYVsyXSAqIGJdXG5cdH1cblx0c3RhdGljIHNjYWxlNChhLCBiKSB7XG5cdFx0cmV0dXJuIFthWzBdICogYiwgYVsxXSAqIGIsIGFbMl0gKiBiLCBhWzNdICogYl1cblx0fVxuXHRzdGF0aWMgbXVsMyhhLCBiKSB7XG5cdFx0cmV0dXJuIFthWzBdICogYlswXSwgYVsxXSAqIGJbMV0sIGFbMl0gKiBiWzJdXVxuXHR9XG5cdHN0YXRpYyBtdWw0KGEsIGIpIHtcblx0XHRyZXR1cm4gW2FbMF0gKiBiWzBdLCBhWzFdICogYlsxXSwgYVsyXSAqIGJbMl0sIGFbM10gKiBiWzNdXVxuXHR9XG5cdHN0YXRpYyBteW1peChhLCBiLCBmKSB7XG5cdFx0cmV0dXJuIGEgKiAoMS4wIC0gZikgKyBiICogZlxuXHR9XG5cdHN0YXRpYyBteW1peDIyKGEsIGIsIGYpIHtcblx0XHRyZXR1cm4gW2FbMF0gKiAoMS4wIC0gZlswXSkgKyBiWzBdICogZlswXSwgYVsxXSAqICgxLjAgLSBmWzFdKSArIGJbMV0gKiBmWzFdXVxuXHR9XG5cdHN0YXRpYyBtaXgxKGEsIGIsIGYpIHtcblx0XHRyZXR1cm4gYSAqICgxLjAgLSBmKSArIGIgKiBmXG5cdH1cblx0c3RhdGljIG1peDMoYSwgYiwgZikge1xuXHRcdHJldHVybiBhZGQzKHNjYWxlMyhhLCAxLjAgLSBmKSwgc2NhbGUzKGIsIGYpKVxuXHR9XG5cdHN0YXRpYyBsZW5ndGgyKGEpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KGFbMF0gKiBhWzBdICsgYVsxXSAqIGFbMV0pXG5cdH1cblx0c3RhdGljIGxlbmd0aDMoYSkge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoYVswXSAqIGFbMF0gKyBhWzFdICogYVsxXSArIGFbMl0gKiBhWzJdKVxuXHR9XG5cdHN0YXRpYyBsZW5ndGg0KGEpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KGFbMF0gKiBhWzBdICsgYVsxXSAqIGFbMV0gKyBhWzJdICogYVsyXSArIGFbM10gKiBhWzNdKVxuXHR9XG5cdHN0YXRpYyBub3JtYWxpemUzKGEpIHtcblx0XHRyZXR1cm4gc2NhbGUzKGEsIDEuMCAvIGxlbmd0aDMoYSkpXG5cdH1cblx0c3RhdGljIG5vcm1hbGl6ZTQoYSkge1xuXHRcdHJldHVybiBzY2FsZTQoYSwgMS4wIC8gbGVuZ3RoNChhKSlcblx0fVxuXHRzdGF0aWMgY3Jvc3MoYSwgYikge1xuXHRcdHJldHVybiBbYVsxXSAqIGJbMl0gLSBiWzFdICogYVsyXSwgYVsyXSAqIGJbMF0gLSBiWzJdICogYVswXSwgYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXV1cblx0fVxuXHRHID0gMC41ICsgTWF0aC5zcXJ0KDUgLyA0KVxuXHRzdGF0aWMgZnJhY3QxKGEpIHtcblx0XHRyZXR1cm4gYSAtIE1hdGguZmxvb3IoYSlcblx0fVxuXHRzdGF0aWMgZmxvb3IyKGEpIHtcblx0XHRyZXR1cm4gW01hdGguZmxvb3IoYVswXSksIE1hdGguZmxvb3IoYVsxXSldXG5cdH1cblx0c3RhdGljIGZyYWN0MihhKSB7XG5cdFx0cmV0dXJuIFtmcmFjdDEoYVswXSksIGZyYWN0MShhWzFdKV1cblx0fVxuXHRzdGF0aWMgZnJhY3QzKGEpIHtcblx0XHRyZXR1cm4gW2ZyYWN0MShhWzBdKSwgZnJhY3QxKGFbMV0pLCBmcmFjdDEoYVsyXSldXG5cdH1cblx0c3RhdGljIGZyYWN0NChhKSB7XG5cdFx0cmV0dXJuIFtmcmFjdDEoYVswXSksIGZyYWN0MShhWzFdKSwgZnJhY3QxKGFbMl0pLCBmcmFjdDEoYVszXSldXG5cdH1cblx0c3RhdGljIGNsYW1wMShhLCBhMSwgYTIpIHtcblx0XHRyZXR1cm4gYSA8IGExID8gYTEgOiBhID4gYTIgPyBhMiA6IGFcblx0fVxuXHRzdGF0aWMgY2xhbXAzMShhLCBhMSwgYTIpIHtcblx0XHRyZXR1cm4gW2NsYW1wMShhWzBdLCBhMSwgYTIpLCBjbGFtcDEoYVsxXSwgYTEsIGEyKSwgY2xhbXAxKGFbMl0sIGExLCBhMildXG5cdH1cblx0c3RhdGljIHJvdFgocGgsIHYpIHtcblx0XHRyZXR1cm4gW3ZbMF0sIHZbMV0gKiBtY29zKHBoKSArIHZbMl0gKiBtc2luKHBoKSwgdlsyXSAqIG1jb3MocGgpIC0gdlsxXSAqIG1zaW4ocGgpXVxuXHR9XG5cdHN0YXRpYyByb3RZKHBoLCB2KSB7XG5cdFx0cmV0dXJuIFt2WzBdICogbWNvcyhwaCkgKyB2WzJdICogbXNpbihwaCksIHZbMV0sIHZbMl0gKiBtY29zKHBoKSAtIHZbMF0gKiBtc2luKHBoKV1cblx0fVxuXHRzdGF0aWMgcm90WihwaCwgdikge1xuXHRcdHJldHVybiBbdlswXSAqIG1jb3MocGgpICsgdlsxXSAqIG1zaW4ocGgpLCB2WzFdICogbWNvcyhwaCkgLSB2WzBdICogbXNpbihwaCksIHZbMl1dXG5cdH1cblx0c3RhdGljIGhzdjJyZ2IoYykge1xuXHRcdHZhciBLID0gWzEuMCwgMi4wIC8gMy4wLCAxLjAgLyAzLjAsIDMuMF1cblx0XHR2YXIgcCA9IGFiczMoc3ViMyhzY2FsZTMoZnJhY3QzKGFkZDMoW2NbMF0sIGNbMF0sIGNbMF1dLCBLKSksIDYuMCksIFszLCAzLCAzXSkpXG5cdFx0cmV0dXJuIHNjYWxlMyhtaXgzKFsxLCAxLCAxXSwgY2xhbXAzMShzdWIzKHAsIFsxLCAxLCAxXSksIDAuMCwgMS4wKSwgY1sxXSksIGNbMl0pXG5cdH1cbn1cbiIsImltcG9ydCB7cGF1c2Vfb25fZ2xfZXJyb3J9IGZyb20gJ2dsX3V0aWxzJ1xuaW1wb3J0IHtsb2cyLCBtaW4sIHBvd30gZnJvbSAnd21hdGgnXG5pbXBvcnQge0ZyYW1lYnVmZmVyfSBmcm9tICcuL0ZyYW1lYnVmZmVyJ1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZSB7XG5cdC8vIEB0cy1pZ25vcmVcblx0dGV4OiBXZWJHTFRleHR1cmVcblx0aW50ZXJuYWxfZm9ybWF0OiBudW1iZXJcblx0Zm9ybWF0OiBudW1iZXJcblx0dHlwZTogbnVtYmVyXG5cdHJlczogQXJyYXk8bnVtYmVyPlxuXG5cdHByaXZhdGUgaXNfZmxvYXQ6IGJvb2xlYW5cblx0bWlwbWFwcGVkOiBib29sZWFuXG5cdHByaXZhdGUgbWlwX2xldmVsczogbnVtYmVyXG5cblx0Y29uc3RydWN0b3IocmVzOiBudW1iZXJbXSwgaW50ZXJuYWxfZm9ybWF0OiBudW1iZXIgPSBnbC5SR0JBLCBtaXBtYXBwZWQgPSBmYWxzZSwgbWlwX2xldmVsczogbnVtYmVyID0gMCkge1xuXHRcdGNvbnN0IGVxX2FueSA9IChhOiBhbnksIGI6IGFueVtdKTogYm9vbGVhbiA9PiB7XG5cdFx0XHRsZXQgZXEgPSBmYWxzZVxuXHRcdFx0Yi5mb3JFYWNoKChiKSA9PiB7XG5cdFx0XHRcdGlmIChiID09PSBhKSB7XG5cdFx0XHRcdFx0ZXEgPSB0cnVlXG5cdFx0XHRcdFx0Ly8gcmV0dXJuIGVxXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gZXFcblx0XHR9XG5cdFx0dGhpcy5yZXMgPSBbLi4ucmVzXVxuXHRcdHRoaXMuaW50ZXJuYWxfZm9ybWF0ID0gaW50ZXJuYWxfZm9ybWF0XG5cblx0XHR0aGlzLm1pcG1hcHBlZCA9IG1pcG1hcHBlZFxuXHRcdHRoaXMubWlwX2xldmVscyA9IG1pcF9sZXZlbHNcblxuXHRcdHRoaXMuaXNfZmxvYXQgPSBlcV9hbnkoaW50ZXJuYWxfZm9ybWF0LCBbZ2wuUkdCQTMyRiwgZ2wuUkdCQTE2RiwgZ2wuUkdCMTZGLCBnbC5SR0IzMkZdKVxuXG5cdFx0bGV0IGNvbXBfY250ID0gNFxuXHRcdGlmIChlcV9hbnkoaW50ZXJuYWxfZm9ybWF0LCBbZ2wuUkdCQTMyRiwgZ2wuUkdCQTE2RiwgZ2wuUkdCQSwgZ2wuUkdCQTE2SSwgZ2wuUkdCQTE2VUksIGdsLlJHQkEzMkksIGdsLlJHQkE4SSwgZ2wuUkdCQThVSV0pKSB7XG5cdFx0XHRjb21wX2NudCA9IDRcblx0XHR9XG5cdFx0aWYgKGVxX2FueShpbnRlcm5hbF9mb3JtYXQsIFtnbC5SR0IzMkYsIGdsLlJHQjE2RiwgZ2wuUkdCLCBnbC5SR0IxNkksIGdsLlJHQjE2VUksIGdsLlJHQjMySSwgZ2wuUkdCOEksIGdsLlJHQjhVSV0pKSB7XG5cdFx0XHRjb21wX2NudCA9IDNcblx0XHR9XG5cblx0XHR0aGlzLmZvcm1hdCA9IGNvbXBfY250ID09PSA0ID8gZ2wuUkdCQSA6IGdsLlJHQlxuXHRcdHRoaXMudHlwZSA9IHRoaXMuaXNfZmxvYXQgPyBnbC5GTE9BVCA6IGdsLlVOU0lHTkVEX0JZVEVcblxuXHRcdGlmIChlcV9hbnkoaW50ZXJuYWxfZm9ybWF0LCBbZ2wuUkdCQThVSSwgZ2wuUkdCQTE2VUksIGdsLlJHQkEzMlVJLCBnbC5SR0I4VUksIGdsLlJHQjE2VUksIGdsLlJHQjMyVUldKSkge1xuXHRcdFx0dGhpcy50eXBlID0gZ2wuVU5TSUdORURfSU5UXG5cdFx0fVxuXHRcdGlmIChlcV9hbnkoaW50ZXJuYWxfZm9ybWF0LCBbZ2wuUkdCQThJLCBnbC5SR0JBMTZJLCBnbC5SR0JBMzJJLCBnbC5SR0I4SSwgZ2wuUkdCMTZJLCBnbC5SR0IzMkldKSkge1xuXHRcdFx0dGhpcy50eXBlID0gZ2wuSU5UXG5cdFx0fVxuXHRcdHRoaXMucmVjcmVhdGUoKVxuXHR9XG5cdHJlY3JlYXRlKCkge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHR0aGlzLnRleCA9IGdsLmNyZWF0ZVRleHR1cmUoKVxuXG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXgpXG5cblx0XHRpZiAodGhpcy5pc19mbG9hdCkge1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVClcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUilcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpXG5cdFx0fVxuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpXG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSlcblxuXHRcdGlmICh0aGlzLm1pcG1hcHBlZCkge1xuXHRcdFx0aWYgKHRoaXMubWlwX2xldmVscyA9PT0gMCkge1xuXHRcdFx0XHRpZiAodGhpcy5yZXNbMF0gPiA0ICYmIHRoaXMucmVzWzFdID4gNCkge1xuXHRcdFx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVJfTUlQTUFQX0xJTkVBUilcblx0XHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKVxuXHRcdFx0XHRcdGdsLnRleFN0b3JhZ2UyRChnbC5URVhUVVJFXzJELCBsb2cyKG1pbih0aGlzLnJlc1swXSwgdGhpcy5yZXNbMV0pKSwgdGhpcy5pbnRlcm5hbF9mb3JtYXQsIHRoaXMucmVzWzBdLCB0aGlzLnJlc1sxXSlcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuaW50ZXJuYWxfZm9ybWF0LCB0aGlzLnJlc1swXSwgdGhpcy5yZXNbMV0sIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHBhdXNlX29uX2dsX2Vycm9yKClcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCB0aGlzLmludGVybmFsX2Zvcm1hdCwgdGhpcy5yZXNbMF0sIHRoaXMucmVzWzFdLCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCBudWxsKVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyhnbC5pc1RleHR1cmUodGhpcy50ZXgpKVxuXG5cdFx0aWYgKCFnbC5pc1RleHR1cmUodGhpcy50ZXgpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdURVhUVVJFIElOQ09NUExFVEUnKVxuXHRcdH1cblx0fVxuXG5cdHJlc2l6ZShuZXdfcmVzOiBudW1iZXJbXSkge1xuXHRcdHRoaXMucmVzID0gWy4uLm5ld19yZXNdXG5cdFx0aWYgKHRoaXMubWlwbWFwcGVkKSB7XG5cdFx0XHRnbC5kZWxldGVUZXh0dXJlKHRoaXMudGV4KVxuXHRcdFx0dGhpcy5yZWNyZWF0ZSgpXG5cdFx0fSBlbHNlIHtcblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTE1KVxuXHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXgpXG5cdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuaW50ZXJuYWxfZm9ybWF0LCB0aGlzLnJlc1swXSwgdGhpcy5yZXNbMV0sIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpXG5cdFx0fVxuXHR9XG5cdHN0YXRpYyBhc3luYyBmcm9tX2ltYWdlX3BhdGgoaW1nX3BhdGg6IHN0cmluZyk6IFByb21pc2U8VGV4dHVyZT4ge1xuXHRcdGZ1bmN0aW9uIGxvYWRJbWFnZSh1cmw6IHN0cmluZyk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGltYWdlID0gbmV3IEltYWdlKClcblx0XHRcdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcblx0XHRcdFx0XHRyZXNvbHZlKGltYWdlKVxuXHRcdFx0XHR9KVxuXHRcdFx0XHRpbWFnZS5zcmMgPSB1cmxcblx0XHRcdH0pXG5cdFx0fVxuXG5cdFx0Y29uc3QgaW1nID0gYXdhaXQgbG9hZEltYWdlKGltZ19wYXRoKVxuXHRcdGNvbnN0IHRleCA9IG5ldyBUZXh0dXJlKFtpbWcubmF0dXJhbFdpZHRoLCBpbWcubmF0dXJhbEhlaWdodF0sIGdsLlJHQkE4LCB0cnVlLCAwKVxuXHRcdC8vIHRleC51cGxvYWRfZnJvbV9jcHUoaW1nKVxuXHRcdC8vIGdsLmdldFRleFBhcmFtZXRlcihnbC5URVhUVVJFXzJELCBnbC5UWVBFKVxuXHRcdGdsLnRleFN1YkltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgMCwgMCwgdGV4LnJlc1swXSwgdGV4LnJlc1sxXSwgdGV4LmZvcm1hdCwgdGV4LnR5cGUsIGltZylcblx0XHRnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKVxuXHRcdHBhdXNlX29uX2dsX2Vycm9yKClcblx0XHQvLyBOb3QgbmVlZGVkP1xuXHRcdGdsLmZpbmlzaCgpXG5cdFx0aW1nLnJlbW92ZSgpXG5cdFx0cmV0dXJuIHRleFxuXHR9XG5cblx0dXBsb2FkX2Zyb21fY3B1KGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50IHwgbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkpIHtcblx0XHRpZiAoaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XG5cdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuaW50ZXJuYWxfZm9ybWF0LCB0aGlzLnJlc1swXSwgdGhpcy5yZXNbMV0sIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIGltYWdlKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWJ1Z2dlclxuXHRcdH1cblx0fVxuXG5cdGNsb25lKCk6IFRleHR1cmUge1xuXHRcdHJldHVybiBuZXcgVGV4dHVyZSh0aGlzLnJlcywgdGhpcy5pbnRlcm5hbF9mb3JtYXQsIHRoaXMubWlwbWFwcGVkLCB0aGlzLm1pcF9sZXZlbHMpXG5cdH1cblx0YmluZF90b191bml0KHVuaXQ6IG51bWJlcikge1xuXHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB1bml0KVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4KVxuXHR9XG5cblx0cmVhZF9iYWNrX2FycmF5KG9mZnM6IG51bWJlcltdID0gWzAsIDBdLCByZWFkX2JhY2tfcmVzOiBudW1iZXJbXSA9IFsuLi50aGlzLnJlc10pOiBVaW50OEFycmF5IHwgRmxvYXQzMkFycmF5IHtcblx0XHRsZXQgdGVtcF9mYiA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCkgYXMgV2ViR0xGcmFtZWJ1ZmZlclxuXHRcdGxldCBwcmV2X2JvdW5kX2ZiID0gRnJhbWVidWZmZXIuY3VycmVudGx5X2JvdW5kXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0ZW1wX2ZiKVxuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXgsIDApXG5cblx0XHQvLyBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5yZXNbMF0gKiB0aGlzLnJlc1sxXSAqIDQpXG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5pc19mbG9hdFxuXHRcdFx0PyBuZXcgRmxvYXQzMkFycmF5KHJlYWRfYmFja19yZXNbMF0gKiByZWFkX2JhY2tfcmVzWzFdICogNClcblx0XHRcdDogbmV3IFVpbnQ4QXJyYXkocmVhZF9iYWNrX3Jlc1swXSAqIHJlYWRfYmFja19yZXNbMV0gKiA0KVxuXHRcdGdsLnJlYWRQaXhlbHMob2Zmc1swXSwgb2Zmc1sxXSwgcmVhZF9iYWNrX3Jlc1swXSwgcmVhZF9iYWNrX3Jlc1sxXSwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgZGF0YSlcblx0XHQvLyBjb25zb2xlLmxvZyhkYXRhKVxuXHRcdGdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRlbXBfZmIpXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBwcmV2X2JvdW5kX2ZiLmZiKVxuXHRcdHJldHVybiBkYXRhXG5cdH1cblx0cmVhZF9iYWNrX3BpeGVsKG9mZnM6IG51bWJlcltdKTogQXJyYXk8bnVtYmVyPiB7XG5cdFx0bGV0IGRhdGEgPSB0aGlzLnJlYWRfYmFja19hcnJheShvZmZzLCBbMSwgMV0pXG5cdFx0aWYgKHRoaXMuaXNfZmxvYXQpIHtcblx0XHRcdGRhdGEuZm9yRWFjaCgoZSwgaSwgYSkgPT4ge1xuXHRcdFx0XHRhW2ldICo9IDI1NVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0ZGF0YVszXSA9IDI1NVxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRyZXR1cm4gQXJyYXkuZnJvbShkYXRhKVxuXHR9XG5cdGFzeW5jIHJlYWRfYmFja19pbWFnZShcblx0XHRnYW1tYV9jb3JyZWN0OiBib29sZWFuID0gZmFsc2UsXG5cdFx0b2ZmczogbnVtYmVyW10gPSBbMCwgMF0sXG5cdFx0cmVhZF9iYWNrX3JlczogbnVtYmVyW10gPSBbLi4udGhpcy5yZXNdLFxuXHQpOiBQcm9taXNlPFtIVE1MSW1hZ2VFbGVtZW50LCBCbG9iXT4ge1xuXHRcdGxldCBkYXRhID0gdGhpcy5yZWFkX2JhY2tfYXJyYXkob2ZmcywgcmVhZF9iYWNrX3JlcylcblxuXHRcdGxldCBpID0gMFxuXHRcdGxldCBpZHggPSAwXG5cdFx0Zm9yIChsZXQgcGl4ZWwgb2YgZGF0YSkge1xuXHRcdFx0aWYgKGkgPT09IDMpIHtcblx0XHRcdFx0aWYgKHRoaXMuaXNfZmxvYXQpIHtcblx0XHRcdFx0XHRkYXRhW2lkeF0gPSAyNTVcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhW2lkeF0gPSAyNTVcblx0XHRcdFx0fVxuXHRcdFx0XHRpID0gLTFcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChnYW1tYV9jb3JyZWN0KSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuaXNfZmxvYXQpIHtcblx0XHRcdFx0XHRcdGRhdGFbaWR4XSA9IDI1NSAqIHBvdyhkYXRhW2lkeF0sIDAuNDU0NTQ1NDU0NSlcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGF0YVtpZHhdID0gMjU1ICogcG93KGRhdGFbaWR4XSAvIDI1NSwgMC40NTQ1NDU0NTQ1KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBkYXRhW2lkeF0gKj0gMjQwXG5cdFx0XHR9XG5cdFx0XHRpZHgrK1xuXHRcdFx0aSsrXG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGEgMkQgY2FudmFzIHRvIHN0b3JlIHRoZSByZXN1bHRcblx0XHRjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuXHRcdGNhbnZhcy53aWR0aCA9IHRoaXMucmVzWzBdXG5cdFx0Y2FudmFzLmhlaWdodCA9IHRoaXMucmVzWzFdXG5cdFx0Y29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxuXG5cdFx0bGV0IGJsb2I6IEJsb2JcblxuXHRcdGNvbnN0IGdldENhbnZhc0Jsb2IgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCk6IFByb21pc2U8QmxvYj4gPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0Y2FudmFzLnRvQmxvYihmdW5jdGlvbiAoYmxvYikge1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRyZXNvbHZlKGJsb2IpXG5cdFx0XHRcdH0sICdpbWFnZS9wbmcnKVxuXHRcdFx0fSlcblx0XHR9XG5cblx0XHRibG9iID0gYXdhaXQgZ2V0Q2FudmFzQmxvYihjYW52YXMpXG5cdFx0Y29uc29sZS5sb2coJ0JMT1JHVUJTJylcblx0XHRjb25zb2xlLmxvZyhibG9iKVxuXG5cdFx0Ly8gY2FudmFzLnRvQmxvYigoYikgPT4ge1xuXHRcdC8vIFx0YmxvYiA9IGIgYXMgQmxvYlxuXHRcdC8vIFx0Y29uc29sZS5sb2coJ0JMT0IgQScpXG5cdFx0Ly8gXHRjb25zb2xlLmxvZyhibG9iKVxuXHRcdC8vIH0sICdpbWFnZS9wbmcnKVxuXG5cdFx0Ly8gY29uc29sZS5sb2coJ0JMT0IgQicpXG5cdFx0Ly8gY29uc29sZS5sb2coYmxvYilcblxuXHRcdGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcblx0XHRpbWFnZURhdGEuZGF0YS5zZXQoZGF0YSlcblx0XHRjb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApXG5cdFx0Y29uc3QgaW1nID0gbmV3IEltYWdlKClcblx0XHRpbWcuc3JjID0gY2FudmFzLnRvRGF0YVVSTCgpXG5cblx0XHRjYW52YXMucmVtb3ZlKClcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIFtpbWcsIGJsb2JdXG5cdH1cbn1cbiIsImltcG9ydCB7VGV4dHVyZX0gZnJvbSAnLi9UZXh0dXJlJ1xuXG5leHBvcnQgY2xhc3MgRnJhbWVidWZmZXIge1xuXHRzdGF0aWMgY3VycmVudGx5X2JvdW5kOiBGcmFtZWJ1ZmZlclxuXHRzdGF0aWMgZnJhbWVidWZmZXJzOiBGcmFtZWJ1ZmZlcltdID0gW11cblx0X3RleHR1cmVzOiBBcnJheTxUZXh0dXJlPlxuXHRfYmFja190ZXh0dXJlczogQXJyYXk8VGV4dHVyZT5cblx0cHJpdmF0ZSBfZmI6IFdlYkdMRnJhbWVidWZmZXJcblx0Ly8gQHRzLWlnbm9yZVxuXHRwcml2YXRlIF9mYl9iYWNrOiBXZWJHTEZyYW1lYnVmZmVyID0gdW5kZWZpbmVkXG5cdGRlZmF1bHQ6IGJvb2xlYW4gPSBmYWxzZVxuXHRwb25nYWJsZTogYm9vbGVhbiA9IGZhbHNlXG5cdG5lZWRzX3Bvbmc6IGJvb2xlYW4gPSBmYWxzZVxuXHRwb25nX2lkeDogbnVtYmVyID0gMFxuXG5cdHB1YmxpYyBnZXQgdGV4dHVyZXMoKTogQXJyYXk8VGV4dHVyZT4ge1xuXHRcdGlmICh0aGlzLnBvbmdfaWR4ID09PSAwKSByZXR1cm4gdGhpcy5fdGV4dHVyZXNcblx0XHRlbHNlIHJldHVybiB0aGlzLl9iYWNrX3RleHR1cmVzXG5cdH1cblx0cHVibGljIGdldCBiYWNrX3RleHR1cmVzKCk6IEFycmF5PFRleHR1cmU+IHtcblx0XHRpZiAodGhpcy5wb25nX2lkeCA9PT0gMCkgcmV0dXJuIHRoaXMuX2JhY2tfdGV4dHVyZXNcblx0XHRlbHNlIHJldHVybiB0aGlzLl90ZXh0dXJlc1xuXHR9XG5cblx0cHVibGljIGdldCBmYigpOiBXZWJHTEZyYW1lYnVmZmVyIHtcblx0XHRpZiAodGhpcy5wb25nX2lkeCA9PT0gMCkgcmV0dXJuIHRoaXMuX2ZiXG5cdFx0ZWxzZSByZXR1cm4gdGhpcy5fZmJfYmFja1xuXHR9XG5cdHB1YmxpYyBnZXQgZmJfYmFjaygpOiBXZWJHTEZyYW1lYnVmZmVyIHtcblx0XHRpZiAodGhpcy5wb25nX2lkeCA9PT0gMCkgcmV0dXJuIHRoaXMuX2ZiX2JhY2tcblx0XHRlbHNlIHJldHVybiB0aGlzLl9mYlxuXHR9XG5cblx0cHVibGljIHBvbmcoKSB7XG5cdFx0dGhpcy5wb25nX2lkeCA9IDEgLSB0aGlzLnBvbmdfaWR4XG5cdFx0dGhpcy5uZWVkc19wb25nID0gZmFsc2Vcblx0fVxuXG5cdHB1YmxpYyByZWNyZWF0ZSgpIHtcblx0XHRpZiAodGhpcy5wb25nYWJsZSkge1xuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLl9mYl9iYWNrKVxuXG5cdFx0XHRsZXQgaSA9IDBcblx0XHRcdGZvciAobGV0IHRleCBvZiB0aGlzLl9iYWNrX3RleHR1cmVzKSB7XG5cdFx0XHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuXHRcdFx0XHRcdGdsLkZSQU1FQlVGRkVSLFxuXHRcdFx0XHRcdGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSxcblx0XHRcdFx0XHRnbC5URVhUVVJFXzJELFxuXHRcdFx0XHRcdHRleC50ZXgsXG5cdFx0XHRcdFx0MCwgLy8gbGV2ZWwsIHRoaXMgaXMgdGhlIG1pcG1hcCBsZXZlbFxuXHRcdFx0XHQpXG5cdFx0XHR9XG5cblx0XHRcdGlmIChnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKSAhPT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcignRlJBTUVCVUZGRVIgSU5DT01QTEVURScpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLl9mYilcblxuXHRcdGxldCBpID0gMFxuXHRcdGZvciAobGV0IHRleCBvZiB0aGlzLl90ZXh0dXJlcykge1xuXHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG5cdFx0XHRcdGdsLkZSQU1FQlVGRkVSLFxuXHRcdFx0XHRnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXG5cdFx0XHRcdGdsLlRFWFRVUkVfMkQsXG5cdFx0XHRcdHRleC50ZXgsXG5cdFx0XHRcdDAsIC8vIGxldmVsLCB0aGlzIGlzIHRoZSBtaXBtYXAgbGV2ZWxcblx0XHRcdClcblx0XHRcdGkrK1xuXHRcdH1cblxuXHRcdGlmIChnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKSAhPT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ZSQU1FQlVGRkVSIElOQ09NUExFVEUnKVxuXHRcdH1cblx0fVxuXHRjb25zdHJ1Y3Rvcih0ZXh0dXJlczogQXJyYXk8VGV4dHVyZT4sIHBvbmdhYmxlOiBib29sZWFuID0gZmFsc2UpIHtcblx0XHR0aGlzLl9mYiA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCkgYXMgV2ViR0xGcmFtZWJ1ZmZlclxuXHRcdHRoaXMuX3RleHR1cmVzID0gWy4uLnRleHR1cmVzXVxuXHRcdHRoaXMucG9uZ2FibGUgPSBwb25nYWJsZVxuXHRcdHRoaXMuX2JhY2tfdGV4dHVyZXMgPSBbXVxuXG5cdFx0aWYgKHRoaXMucG9uZ2FibGUpIHtcblx0XHRcdHRoaXMuX2ZiX2JhY2sgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpIGFzIFdlYkdMRnJhbWVidWZmZXJcblx0XHRcdGZvciAobGV0IHRleCBvZiB0aGlzLnRleHR1cmVzKSB7XG5cdFx0XHRcdHRoaXMuX2JhY2tfdGV4dHVyZXMucHVzaCh0ZXguY2xvbmUoKSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnJlY3JlYXRlKClcblxuXHRcdC8vIGlmICh0aGlzICE9PSBGcmFtZWJ1ZmZlci5jdXJyZW50bHlfYm91bmQpIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgRnJhbWVidWZmZXIuY3VycmVudGx5X2JvdW5kLl9mYilcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIEZyYW1lYnVmZmVyLmN1cnJlbnRseV9ib3VuZC5fZmIpXG5cdFx0RnJhbWVidWZmZXIuZnJhbWVidWZmZXJzLnB1c2godGhpcylcblx0fVxuXHRiaW5kKCkge1xuXHRcdGlmICh0aGlzLnBvbmdhYmxlKSB0aGlzLm5lZWRzX3BvbmcgPSB0cnVlXG5cdFx0bGV0IGRyYXdfYnVmZnM6IG51bWJlcltdID0gW11cblxuXHRcdGlmICh0aGlzLmRlZmF1bHQpIHtcblx0XHRcdGRyYXdfYnVmZnMgPSBbZ2wuQkFDS11cblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IGkgPSAwXG5cdFx0XHRmb3IgKGxldCB0ZXggb2YgdGhpcy50ZXh0dXJlcykge1xuXHRcdFx0XHRkcmF3X2J1ZmZzLnB1c2goZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpKVxuXHRcdFx0XHRpKytcblx0XHRcdH1cblx0XHR9XG5cblx0XHRnbC52aWV3cG9ydCgwLCAwLCB0aGlzLnRleHR1cmVzWzBdLnJlc1swXSwgdGhpcy50ZXh0dXJlc1swXS5yZXNbMV0pXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZiKVxuXHRcdEZyYW1lYnVmZmVyLmN1cnJlbnRseV9ib3VuZCA9IHRoaXNcblx0XHQvLyBnbC5kcmF3QnVmZmVycyhkcmF3X2J1ZmZzKVxuXHR9XG5cdGNsZWFyKGNvbG91cjogbnVtYmVyW10gPSBbMCwgMCwgMCwgMF0pIHtcblx0XHQvLyBpZiAodGhpcy5mYiAhPT0gRnJhbWVidWZmZXIuY3VycmVudGx5X2JvdW5kLmZiKSBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZmIpXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZiKVxuXHRcdGdsLmNsZWFyQ29sb3IoY29sb3VyWzBdLCBjb2xvdXJbMV0sIGNvbG91clsyXSwgY29sb3VyWzNdKVxuXHRcdGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpXG5cdFx0Ly8gaWYgKHRoaXMuZmIgIT09IEZyYW1lYnVmZmVyLmN1cnJlbnRseV9ib3VuZC5mYikgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBGcmFtZWJ1ZmZlci5jdXJyZW50bHlfYm91bmQuZmIpXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBGcmFtZWJ1ZmZlci5jdXJyZW50bHlfYm91bmQuZmIpXG5cdH1cbn1cbiIsImltcG9ydCB7RnJhbWVidWZmZXJ9IGZyb20gJ2dsL0ZyYW1lYnVmZmVyJ1xuaW1wb3J0IHtUZXh0dXJlfSBmcm9tICdnbC9UZXh0dXJlJ1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9nbF9lcnJvcl9oYW5kbGluZygpIHtcblx0aWYgKCFnbC5kZWJ1Z0VuYWJsZWQpIHJldHVyblxuXHRnbC5nbEVudW1zID0ge31cblx0Z2wuZW51bVN0cmluZ1RvVmFsdWUgPSB7fVxuXHRmb3IgKGxldCBwcm9wZXJ0eU5hbWUgaW4gZ2wpIHtcblx0XHRpZiAodHlwZW9mIGdsW3Byb3BlcnR5TmFtZV0gPT09ICdudW1iZXInKSB7XG5cdFx0XHRnbC5nbEVudW1zW2dsW3Byb3BlcnR5TmFtZV1dID0gcHJvcGVydHlOYW1lXG5cdFx0XHRnbC5lbnVtU3RyaW5nVG9WYWx1ZVtwcm9wZXJ0eU5hbWVdID0gZ2xbcHJvcGVydHlOYW1lXVxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2xfZW51bV90b19zdHJpbmcodmFsdWUpOiBzdHJpbmcge1xuXHQvLyBjaGVja0luaXQoKTtcblx0Y29uc3QgbmFtZSA9IHdpbmRvdy5nbC5nbEVudW1zW3ZhbHVlXVxuXHRyZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gJ2dsLicgKyBuYW1lIDogJy8qVU5LTk9XTiBXZWJHTCBFTlVNKi8gMHgnICsgdmFsdWUudG9TdHJpbmcoMTYpICsgJydcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmludF9vbl9nbF9lcnJvcigpIHtcblx0aWYgKCFnbC5kZWJ1Z0VuYWJsZWQpIHJldHVyblxuXHRsZXQgZXJyID0gd2luZG93LmdsLmdldEVycm9yKClcblx0aWYgKGVyciAhPT0gMCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyKVxuXHRcdGNvbnNvbGUuZXJyb3IoZ2xfZW51bV90b19zdHJpbmcoZXJyKSlcblx0fVxufVxuZXhwb3J0IGZ1bmN0aW9uIHBhdXNlX29uX2dsX2Vycm9yKCkge1xuXHRpZiAoIWdsLmRlYnVnRW5hYmxlZCkgcmV0dXJuXG5cdGxldCBlcnIgPSB3aW5kb3cuZ2wuZ2V0RXJyb3IoKVxuXHRpZiAoZXJyICE9PSAwKSB7XG5cdFx0Y29uc29sZS5lcnJvcihlcnIpXG5cdFx0Y29uc29sZS5lcnJvcihnbF9lbnVtX3RvX3N0cmluZyhlcnIpKVxuXHRcdGRlYnVnZ2VyXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlfZmJfdG9fdGV4dHVyZShpbl9mcmFtZWJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciwgb3V0X3RleHR1cmU6IFRleHR1cmUpIHtcblx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBpbl9mcmFtZWJ1ZmZlcilcblx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgb3V0X3RleHR1cmUudGV4KVxuXHRnbC5jb3B5VGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBvdXRfdGV4dHVyZS5pbnRlcm5hbF9mb3JtYXQsIDAsIDAsIG91dF90ZXh0dXJlLnJlc1swXSwgb3V0X3RleHR1cmUucmVzWzFdLCAwKVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlfZmJfdG9fZmIoaW5fZnJhbWVidWZmZXI6IFdlYkdMRnJhbWVidWZmZXIsIG91dF9mcmFtZWJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciwgcmVzOiBudW1iZXJbXSkge1xuXHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuUkVBRF9GUkFNRUJVRkZFUiwgaW5fZnJhbWVidWZmZXIpXG5cdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5EUkFXX0ZSQU1FQlVGRkVSLCBvdXRfZnJhbWVidWZmZXIpXG5cdGdsLmJsaXRGcmFtZWJ1ZmZlcigwLCAwLCByZXNbMF0sIHJlc1sxXSwgMCwgMCwgcmVzWzBdLCByZXNbMV0sIGdsLkNPTE9SX0JVRkZFUl9CSVQsIGdsLk5FQVJFU1QpXG5cdC8vIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgaW5fZnJhbWVidWZmZXIpXG5cdC8vIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG91dF90ZXh0dXJlLnRleClcblx0Ly8gZ2wuY29weVRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgb3V0X3RleHR1cmUuaW50ZXJuYWxfZm9ybWF0LCAwLCAwLCBvdXRfdGV4dHVyZS5yZXNbMF0sIG91dF90ZXh0dXJlLnJlc1sxXSwgMClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZUlmTmVlZGVkKFxuXHRjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuXHRkZWZhdWx0X2ZyYW1lYnVmZmVyOiBGcmFtZWJ1ZmZlcixcblx0Y2xpZW50X3JlczogbnVtYmVyW10sXG5cdHNldF9yZWRyYXdfbmVlZGVkOiAodjogYm9vbGVhbikgPT4gdm9pZCxcblx0c2V0X3NoYXJlZF91bmlmb3JtczogRnVuY3Rpb24sXG4pIHtcblx0Y29uc3QgZGlzcGxheVdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoXG5cdGNvbnN0IGRpc3BsYXlIZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0XG5cblx0Y29uc3QgbmVlZFJlc2l6ZSA9IGNhbnZhcy53aWR0aCAhPT0gZGlzcGxheVdpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT09IGRpc3BsYXlIZWlnaHRcblxuXHRpZiAobmVlZFJlc2l6ZSkge1xuXHRcdGNsaWVudF9yZXNbMF0gPSBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGhcblx0XHRjbGllbnRfcmVzWzFdID0gY2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHRcblx0XHQvLyBjb25zb2xlLmxvZygnUkVTSVpFRCcpXG5cdFx0Ly8gY29uc29sZS5sb2coY2xpZW50X3Jlcylcblx0XHQvLyBjb25zb2xlLmxvZyhjYW52YXMpXG5cdFx0c2V0X3JlZHJhd19uZWVkZWQodHJ1ZSlcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5fdGV4dHVyZXNbMF0ucmVzID0gWy4uLmNsaWVudF9yZXNdXG5cdFx0c2V0X3NoYXJlZF91bmlmb3JtcygpXG5cdH1cblxuXHRyZXR1cm4gbmVlZFJlc2l6ZVxufVxuIiwiPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycyAvPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHRpbXBvcnQgS25vYiBmcm9tIFwiLi9Lbm9iLnN2ZWx0ZVwiXG5cblx0Ly8gZXhwb3J0IGxldCBjaGlsZFxuICBleHBvcnQgbGV0IGhpZGRlbjogYm9vbGVhbiA9IHRydWVcbiAgZXhwb3J0IGxldCBrbm9iOiBLbm9iXG48L3NjcmlwdD5cblxuXG48ZGl2IGlkPSdiYXInIHN0eWxlPSd7aGlkZGVuID8gXCJkaXNwbGF5OiBub25lO1wiIDogXCJcIn0nPlxuICA8c2xvdD48L3Nsb3Q+XG48L2Rpdj5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4gICNiYXIge1xuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xuICAgIC8vIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcGFkZGluZzogMHJlbSAxcmVtO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgPiAqOmxhc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICAgIG1hcmdpbi1yaWdodDogMHB4O1xuICAgIH1cbiAgfVxuPC9zdHlsZT4iLCI8c3ZlbHRlOm9wdGlvbnMgYWNjZXNzb3JzIC8+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCBTZW1pTW9kYWwgZnJvbSAnLi9TZW1pTW9kYWwuc3ZlbHRlJ1xuXHRpbXBvcnQge29uTW91bnR9IGZyb20gJ3N2ZWx0ZSdcblxuXHRleHBvcnQgbGV0IHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxO1xuXHRleHBvcnQgbGV0IHJvdFJhbmdlID0gMiAqIE1hdGguUEkgKiAwLjgzO1xuXHRleHBvcnQgbGV0IHBpeGVsUmFuZ2UgPSAyMDA7XG5cdGV4cG9ydCBsZXQgc3RhcnRSb3RhdGlvbiA9IC1NYXRoLlBJICogMC44MztcbiAgXG4gIGV4cG9ydCBsZXQgdHJpZ2dlck1vZGFsOiB1bmRlZmluZWQgfCAoKG1vZGFsOiBTZW1pTW9kYWwpPT52b2lkKSA9IHVuZGVmaW5lZFxuICBleHBvcnQgbGV0IG1vZGFsOiBTZW1pTW9kYWwgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcblxuICBsZXQga25vYkVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIC8vICQ6IG1vZGFsSGlkZGVuID0gbW9kYWwgPyBtb2RhbC5oaWRkZW4gOiBmYWxzZVxuICBcbiAgZXhwb3J0IGxldCBtb2RhbEhpZGRlbiA9IHRydWVcblxuICBleHBvcnQgbGV0IHRpdGxlID0gXCJcIlxuXHRcblx0bGV0IHN0YXJ0WSA9IDAsIHN0YXJ0VmFsdWUgPSAwLCBzdGFydFggPSAwO1xuXHQkOiB2YWx1ZVJhbmdlID0gbWF4IC0gbWluO1xuXHQkOiByb3RhdGlvbiA9IHN0YXJ0Um90YXRpb24gKyAodmFsdWUgLSBtaW4pIC8gdmFsdWVSYW5nZSAqIHJvdFJhbmdlO1xuXHRcblx0ZnVuY3Rpb24gY2xhbXAobnVtLCBtaW4sIG1heCkge1xuXHRcdHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG51bSwgbWF4KSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKHsgY2xpZW50WCwgY2xpZW50WSB9KSB7XG5cdFx0bGV0IHZhbHVlRGlmZiA9IHZhbHVlUmFuZ2UgKiAoc3RhcnRZIC0gY2xpZW50WSkgLyBwaXhlbFJhbmdlO1xuXHRcdHZhbHVlRGlmZiAtPSB2YWx1ZVJhbmdlICogKHN0YXJ0WCAtIGNsaWVudFgpIC8gcGl4ZWxSYW5nZTtcblx0XHR2YWx1ZSA9IGNsYW1wKHN0YXJ0VmFsdWUgKyB2YWx1ZURpZmYsIG1pbiwgbWF4KVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwb2ludGVyRG93bihlOiBQb2ludGVyRXZlbnQpIHtcbiAgICBsZXQgeyBjbGllbnRYLCBjbGllbnRZIH0gPSBlXG5cdFx0c3RhcnRZID0gY2xpZW50WTtcblx0XHRzdGFydFggPSBjbGllbnRYO1xuXHRcdHN0YXJ0VmFsdWUgPSB2YWx1ZTtcblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHBvaW50ZXJNb3ZlKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgcG9pbnRlclVwKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpIFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBwb2ludGVyVXAoKSB7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgcG9pbnRlck1vdmUpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBwb2ludGVyVXApO1xuXHR9XG4gIFxuICBsZXQgdGl0bGVFbGVtZW50XG5cbiAgb25Nb3VudCgoKT0+e1xuICAgIGxldCBwb2ludGVyRG93blxuICAgIGxldCBwb2ludGVyVXAgPSAoKT0+e1xuICAgICAgaWYobW9kYWwpe1xuICAgICAgICB0cmlnZ2VyTW9kYWw/Lihtb2RhbClcbiAgICAgICAgbW9kYWxIaWRkZW4gPSBtb2RhbC5oaWRkZW4gYXMgYm9vbGVhblxuICAgICAgfVxuXG4gICAgICB0aXRsZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJwb2ludGVyZG93blwiLCBwb2ludGVyRG93bilcbiAgICB9XG4gICAgcG9pbnRlckRvd24gPSAoKT0+e1xuICAgICAgdGl0bGVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgcG9pbnRlclVwKVxuICAgICAgdGl0bGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgcG9pbnRlclVwKVxuICAgIH1cbiAgICB0aXRsZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHBvaW50ZXJEb3duKVxuICB9KVxuXG48L3NjcmlwdD5cblxuXG48ZGl2IGNsYXNzPSdrbm9iLWNvbnRhaW5lci1jb250YWluZXInPlxuICA8ZGl2IGNsYXNzPSdrbm9iLWNvbnRhaW5lcic+XG4gICAgPGRpdiBjbGFzcz1cImtub2JcIiBzdHlsZT1cInRyYW5zZm9ybTpyb3RhdGUoY2FsYyh7cm90YXRpb259ICogMXJhZCkpXCIgb246cG9pbnRlcmRvd249e3BvaW50ZXJEb3dufSA+XG4gICAgICA8c3ZnIHdpZHRoPScxMDAlJyBoZWlnaHQ9JzEwMCUnIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPlxuICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiPlxuICAgICAgICAgIDxwYXRoIHN0cm9rZS13aWR0aD1cIjEwXCIgZD1cIk01MCA0MCBsMCAtNTBcIiAvPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgXG4gICAgY2xhc3M9XCJ0aXRsZSB7dHJpZ2dlck1vZGFsID8gXCJtZW51LXRvZ2dsZVwiIDogXCJcIn1cIiBcbiAgICBiaW5kOnRoaXM9e3RpdGxlRWxlbWVudH1cbiAgICBzdHlsZT0neyFtb2RhbEhpZGRlbiAmJiBcIm91dGxpbmU6IDFweCBzb2xpZCB3aGl0ZTsgb3V0bGluZS1vZmZzZXQ6IDAuMXJlbTtcIn0ge21vZGFsICYmIFwiY3Vyc29yOiBwb2ludGVyO1wifSdcbiAgICA+e3RpdGxlfTwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgKntcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmtub2ItY29udGFpbmVyLWNvbnRhaW5lcntcbiAgICBhc3BlY3QtcmF0aW86IDEvMTtcbiAgICBtYXgtaGVpZ2h0OiA1MCU7XG4gICAgbWFyZ2luLXRvcDogMC41cmVtO1xuICAgIG1hcmdpbi1yaWdodDogMC41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIH1cbiAgLmtub2ItY29udGFpbmVye1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICY6aG92ZXJ7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxuICAgIGFzcGVjdC1yYXRpbzogMS8xO1xuICAgIC8qIHdpZHRoOiA0MHB4O1xuICAgIGhlaWdodDogNDBweDsgKi9cbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogY29uaWMtZ3JhZGllbnQoZnJvbSA0NWRlZyxcbiAgICAgIHZhcigtLXNlY29uZGFyeS1jb2xvcikgMGRlZyAxNWRlZyxcbiAgICAgIHZhcigtLXRlcnRpYXJ5LWNvbG9yKSA2MGRlZyA2MGRlZyxcbiAgICAgIHZhcigtLWRhcmtlbi1jb2xvcikgMTIwZGVnIDI0MGRlZyxcbiAgICAgIHZhcigtLXRlcnRpYXJ5LWNvbG9yKSAzMDBkZWcgMzAwZGVnLFxuICAgICAgdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKSAzNDVkZWcgMzYwZGVnXG4gICAgKTtcbiAgICBib3gtc2hhZG93OiAtLjE1ZW0gLjE1ZW0gLjA1ZW0gLjAyZW0gcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBib3JkZXI6IDAuMnJlbSBzb2xpZCB3aGl0ZTtcbiAgfVxuICAua25vYi1jb250YWluZXItY29udGFpbmVyPi50aXRsZS5tZW51LXRvZ2dsZXtcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICBjb2xvcjogYmxhY2s7XG4gIH1cbiAgLmtub2ItY29udGFpbmVyLWNvbnRhaW5lcj4udGl0bGUge1xuICAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAvKiBwb3NpdGlvbjogYWJzb2x1dGU7ICovXG4gICAgZm9udC1zaXplOiAwLjhyZW0gIWltcG9ydGFudDtcbiAgICAvKiBwb3NpdGlvbjogYWJzb2x1dGU7ICovXG4gICAgbWFyZ2luLXRvcDogMC41cmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgICB0b3A6IDUuNXJlbTtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgfVxuXG4gIC5rbm9iIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBhc3BlY3QtcmF0aW86IDEvMTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgLyogaGVpZ2h0OiA4MCU7ICovXG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRlcnRpYXJ5LWNvbG9yKTtcbiAgICBib3gtc2hhZG93OiAwIDAgLjNlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMykgaW5zZXQ7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTtcbiAgfVxuXG4gIC5rbm9iIHN2Z3tcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbjwvc3R5bGU+IiwiPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycyAvPlxuXG48ZGl2IGNsYXNzPVwia25vYi1jb250YWluZXJcIj5cblx0PGRpdiBjbGFzcz1cImJydXNoLXByZXZpZXdcIiAvPlxuXHQ8ZGl2IGNsYXNzPVwia25vYlwiIGNsYXNzOmtub2Itc2VsZWN0ZWQ9e2RyYWdnaW5nfSBvbjpwb2ludGVyZG93bj17cG9pbnRlckRvd259PlxuXHRcdDwhLS0geyBpZiAocGF1c2VkKSBAaHRtbCBwYXVzZX0gLS0+XG5cdFx0PCEtLSB7I2lmIHBhdXNlZH1cbiAgICB7QGh0bWwgcGxheWluZ0ljb259XG4gICAgey9pZn0gLS0+XG5cblx0XHR7QGh0bWwgYnJ1c2hTaXplSWNvbn1cblxuXHRcdDwhLS0gPHN2ZyB3aWR0aD0nMTAwJScgaGVpZ2h0PScxMDAlJyB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIj5cbiAgICAgIDxnIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCI+XG4gICAgICAgIDxwYXRoIHN0cm9rZS13aWR0aD1cIjEwXCIgZD1cIk01MCA0MCBsMCAtNTBcIiAvPlxuICAgICAgPC9nPlxuICAgIDwvc3ZnPiAtLT5cblx0PC9kaXY+XG48L2Rpdj5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0Ly8gQHRzLWlnbm9yZVxuXHRpbXBvcnQgYnJ1c2hTaXplSWNvbiBmcm9tICcvLi4vcHVibGljL2NvcHkuc3ZnJ1xuXHQvLyBAdHMtaWdub3JlXG5cdGltcG9ydCBwbGF5aW5nSWNvbiBmcm9tICcvLi4vcHVibGljL3BsYXkuc3ZnJ1xuXG5cdGV4cG9ydCBsZXQgYnJ1c2hfc3o6IG51bWJlcltdID0gWzAuMiwgMC4yXVxuXHQvLyBleHBvcnQgbGV0IGNhbnZhc19yZXM6IG51bWJlcltdXG5cblx0ZXhwb3J0IGxldCBwaXhlbFJhbmdlID0gMjAwXG5cdGxldCB2YWx1ZSA9IFswLCAwXVxuXHRsZXQgbWluID0gMFxuXHRsZXQgbWF4ID0gNFxuXG5cdGV4cG9ydCBsZXQgZHJhZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXHRleHBvcnQgbGV0IHN0b3BwZWRfZHJhZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXG5cdGxldCBzdGFydFkgPSAwLFxuXHRcdHN0YXJ0VmFsdWUgPSBbMCwgMF0sXG5cdFx0c3RhcnRYID0gMFxuXG5cdCQ6IHZhbHVlUmFuZ2UgPSBtYXggLSBtaW5cblx0Ly8gJDogcm90YXRpb24gPSBzdGFydFJvdGF0aW9uICsgKHZhbHVlIC0gbWluKSAvIHZhbHVlUmFuZ2UgKiByb3RSYW5nZTtcblxuXHRmdW5jdGlvbiBjbGFtcChudW0sIG1pbiwgbWF4KSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obnVtLCBtYXgpKVxuXHR9XG5cblx0ZnVuY3Rpb24gcG9pbnRlck1vdmUoe2NsaWVudFgsIGNsaWVudFl9KSB7XG5cdFx0bGV0IHZhbHVlRGlmZlkgPSAodmFsdWVSYW5nZSAqIChzdGFydFkgLSBjbGllbnRZKSkgLyBwaXhlbFJhbmdlXG5cdFx0bGV0IHZhbHVlRGlmZlggPSAodmFsdWVSYW5nZSAqIChzdGFydFggLSBjbGllbnRYKSkgLyBwaXhlbFJhbmdlXG5cdFx0YnJ1c2hfc3pbMF0gPSBjbGFtcChzdGFydFZhbHVlWzBdIC0gdmFsdWVEaWZmWCwgbWluLCBtYXgpXG5cdFx0YnJ1c2hfc3pbMV0gPSBjbGFtcChzdGFydFZhbHVlWzFdICsgdmFsdWVEaWZmWSwgbWluLCBtYXgpXG5cdH1cblxuXHRmdW5jdGlvbiBwb2ludGVyRG93bihlOiBQb2ludGVyRXZlbnQpIHtcblx0XHRkcmFnZ2luZyA9IHRydWVcblx0XHRsZXQge2NsaWVudFgsIGNsaWVudFl9ID0gZVxuXHRcdC8vIGNvbnNvbGUubG9nKHsgY2xpZW50WSB9KTtcblx0XHRjb25zb2xlLmxvZygnZG93bicpXG5cdFx0c3RhcnRZID0gY2xpZW50WVxuXHRcdHN0YXJ0WCA9IGNsaWVudFhcblx0XHRzdGFydFZhbHVlID0gWy4uLmJydXNoX3N6XVxuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgcG9pbnRlck1vdmUpXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHBvaW50ZXJVcClcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpXG5cdH1cblxuXHRmdW5jdGlvbiBwb2ludGVyVXAoKSB7XG5cdFx0ZHJhZ2dpbmcgPSBmYWxzZVxuXHRcdHN0b3BwZWRfZHJhZ2dpbmcgPSB0cnVlXG5cdFx0Y29uc29sZS5sb2coJ3VwJylcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBwb2ludGVyTW92ZSlcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgcG9pbnRlclVwKVxuXHR9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXHQqIHtcblx0XHR1c2VyLXNlbGVjdDogbm9uZTtcblx0XHQtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuXHR9XG5cdC5icnVzaC1wcmV2aWV3IHtcblx0XHRwb3NpdGlvbjogZml4ZWQ7XG5cdFx0dG9wOiA1MCU7XG5cdFx0bGVmdDogNTAlO1xuXHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuXHR9XG4gIC5rbm9iLXNlbGVjdGVke1xuICAgICYgOmdsb2JhbChzdmcpe1xuICAgICAgZmlsdGVyOiBpbnZlcnQoMSk7XG4gICAgICBiYWNrZ3JvdW5kOiBibGFjaztcbiAgICB9XG4gIH1cblx0Lmtub2ItY29udGFpbmVyIHtcblx0XHQmOmhvdmVyIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHQtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Lyogd2lkdGg6IDQwcHg7XG4gICAgaGVpZ2h0OiA0MHB4OyAqL1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdG1heC1oZWlnaHQ6IDUwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGJhY2tncm91bmQtaW1hZ2U6IGNvbmljLWdyYWRpZW50KFxuXHRcdFx0ZnJvbSA0NWRlZyxcblx0XHRcdHZhcigtLXNlY29uZGFyeS1jb2xvcikgMGRlZyAxNWRlZyxcblx0XHRcdHZhcigtLXRlcnRpYXJ5LWNvbG9yKSA2MGRlZyA2MGRlZyxcblx0XHRcdHZhcigtLWRhcmtlbi1jb2xvcikgMTIwZGVnIDI0MGRlZyxcblx0XHRcdHZhcigtLXRlcnRpYXJ5LWNvbG9yKSAzMDBkZWcgMzAwZGVnLFxuXHRcdFx0dmFyKC0tc2Vjb25kYXJ5LWNvbG9yKSAzNDVkZWcgMzYwZGVnXG5cdFx0KTtcblx0XHRib3gtc2hhZG93OiAtMC4xNWVtIDAuMTVlbSAwLjA1ZW0gMC4wMmVtIHJnYmEoMCwgMCwgMCwgMC4zKTtcblx0XHRib3JkZXItcmFkaXVzOiA1MCU7XG5cdFx0bWFyZ2luLWJvdHRvbTogMS4yNXJlbTtcblx0XHRtYXJnaW4tcmlnaHQ6IDFyZW07XG5cdFx0cG9pbnRlci1ldmVudHM6IGFsbDtcblx0XHR1c2VyLXNlbGVjdDogbm9uZTtcblx0fVxuXG5cdC5rbm9iIHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRhc3BlY3QtcmF0aW86IDEvMTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0LyogaGVpZ2h0OiA4MCU7ICovXG5cdFx0cGFkZGluZzogMDtcblx0XHRjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGVydGlhcnktY29sb3IpO1xuXHRcdGZpbGw6IHdoaXRlO1xuXHRcdHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG5cdH1cblxuXHQua25vYiA6Z2xvYmFsKHN2Zykge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRmaWxsOiB3aGl0ZTtcblx0fVxuPC9zdHlsZT5cbiIsImltcG9ydCB7QnJ1c2hTdHJva2V9IGZyb20gJ2JydXNoX3N0cm9rZSdcbmltcG9ydCB7VGV4dHVyZX0gZnJvbSAnZ2wvVGV4dHVyZSdcbmltcG9ydCB7cG93fSBmcm9tICd3bWF0aCdcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydCh2OiBib29sZWFuKSB7XG5cdGlmICghdikgZGVidWdnZXJcbn1cblxuZXhwb3J0IGNsYXNzIEJydXNoVGV4dHVyZSB7XG5cdC8vIEB0cy1pZ25vcmVcblx0Z3B1X3RleDogVGV4dHVyZSA9IHVuZGVmaW5lZFxuXHQvLyBAdHMtaWdub3JlXG5cdHBhdGg6IHN0cmluZyA9IHVuZGVmaW5lZFxuXHQvLyBAdHMtaWdub3JlXG5cdGlkeDogbnVtYmVyXG5cblx0c3RhdGljIGFzeW5jIGNyZWF0ZShwYXRoLCBpZHg6IG51bWJlcik6IFByb21pc2U8QnJ1c2hUZXh0dXJlPiB7XG5cdFx0bGV0IGdwdV90ZXggPSBhd2FpdCBUZXh0dXJlLmZyb21faW1hZ2VfcGF0aChwYXRoKVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdwdV90ZXgsXG5cdFx0XHRwYXRoLFxuXHRcdFx0aWR4LFxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XG5cdGlkOiBudW1iZXIgPSBEYXRlLm5vdygpXG5cdHNhdmVkOiBib29sZWFuID0gZmFsc2Vcblx0YnJ1c2hfc3Ryb2tlczogQnJ1c2hTdHJva2VbXSA9IFtdXG5cdGNhbnZhc1JlczogbnVtYmVyW10gPSBbMTAyNCwgMjA0OF1cblx0Ly8gY2FudmFzUmVzOiBudW1iZXJbXSA9IFsyMDQ4LCAxMDI0XVxuXHRjb25zdHJ1Y3RvcigpIHt9XG5cdHB1c2hfc3Ryb2tlKHN0cm9rZTogQnJ1c2hTdHJva2UpIHtcblx0XHR0aGlzLmJydXNoX3N0cm9rZXMucHVzaChzdHJva2UpXG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcblx0c3RhdGljIGlzT25Nb2JpbGUgPSAoKTogYm9vbGVhbiA9PiB7XG5cdFx0bGV0IGNoZWNrID0gZmFsc2Vcblx0XHQ7KGZ1bmN0aW9uIChhKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KFxuXHRcdFx0XHRcdGEsXG5cdFx0XHRcdCkgfHxcblx0XHRcdFx0LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdChcblx0XHRcdFx0XHRhLnN1YnN0cigwLCA0KSxcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdFx0XHRjaGVjayA9IHRydWVcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHR9KShuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKVxuXHRcdHJldHVybiBjaGVja1xuXHR9XG5cdHN0YXRpYyBnYW1tYV9jb3JyZWN0KHU6IG51bWJlcltdLCBpbnZlcnNlOiBib29sZWFuID0gZmFsc2UsIG1vZGlmeTogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0Y29uc3QgZXhwb25lbnQgPSBpbnZlcnNlID8gMSAvIDAuNDU0NTQ1NDU0NTQ1NDUgOiAwLjQ1NDU0NTQ1NDU0NTQ1XG5cdFx0aWYgKCFtb2RpZnkpIHUgPSBbLi4udV1cblx0XHR1LmZvckVhY2goKHYsIGksIGEpID0+IHtcblx0XHRcdGFbaV0gPSBwb3codiwgZXhwb25lbnQpXG5cdFx0fSlcblx0XHRyZXR1cm4gdVxuXHR9XG5cdHN0YXRpYyBjc3NfY29udGFpbih1OiBudW1iZXJbXSwgaW5wdXRfcmVzOiBudW1iZXJbXSwgdGV4X3JlczogbnVtYmVyW10pOiBudW1iZXJbXSB7XG5cdFx0bGV0IHVzZXJfcmVzID0gaW5wdXRfcmVzXG5cdFx0bGV0IGNhbnZhc19yZXMgPSB0ZXhfcmVzXG5cblx0XHRsZXQgaW5wdXRfcmF0aW8gPSB1c2VyX3Jlc1swXSAvIHVzZXJfcmVzWzFdXG5cdFx0bGV0IHRleF9yYXRpbyA9IGNhbnZhc19yZXNbMF0gLyBjYW52YXNfcmVzWzFdXG5cdFx0bGV0IHJhdGlvID0gaW5wdXRfcmF0aW8gLyB0ZXhfcmF0aW9cblxuXHRcdGlmIChyYXRpbyA+IDEpIHtcblx0XHRcdHJldHVybiBbdVswXSAqIHJhdGlvLCB1WzFdXVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gW3VbMF0sIHVbMV0gLyByYXRpb11cblx0XHR9XG5cdH1cblx0c3RhdGljIHNjcmVlbl9ORENfdG9fY2FudmFzX05EQyh1OiBudW1iZXJbXSwgdXNlcl90ZXg6IFRleHR1cmUsIGNhbnZhc190ZXg6IFRleHR1cmUsIHpvb206IG51bWJlciwgcGFuOiBudW1iZXJbXSk6IG51bWJlcltdIHtcblx0XHRsZXQgdXNlcl9yZXMgPSB1c2VyX3RleC5yZXNcblx0XHRsZXQgY2FudmFzX3JlcyA9IGNhbnZhc190ZXgucmVzXG5cblx0XHR1ID0gWy4uLnVdXG5cblx0XHRsZXQgaW5wdXRfcmF0aW8gPSB1c2VyX3Jlc1swXSAvIHVzZXJfcmVzWzFdXG5cdFx0bGV0IHRleF9yYXRpbyA9IGNhbnZhc19yZXNbMF0gLyBjYW52YXNfcmVzWzFdXG5cdFx0bGV0IHJhdGlvID0gaW5wdXRfcmF0aW8gLyB0ZXhfcmF0aW9cblxuXHRcdGlmIChyYXRpbyA+IDEpIHtcblx0XHRcdHVbMF0gKj0gcmF0aW8gLyB6b29tXG5cdFx0XHR1WzFdIC89IHpvb21cblxuXHRcdFx0bGV0IGNvbnQgPSBVdGlscy5jc3NfY29udGFpbihbMSwgMV0sIHVzZXJfcmVzLCBjYW52YXNfcmVzKVxuXG5cdFx0XHR1WzBdIC09IHBhblswXSAqIGNvbnRbMF1cblx0XHRcdHVbMV0gLT0gcGFuWzFdICogY29udFsxXVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyB1WzFdIC09ICgxIC0gcmF0aW8pICogMC41XG5cdFx0XHR1WzBdIC89IHpvb21cblx0XHRcdHVbMV0gLz0gcmF0aW8gKiB6b29tXG5cblx0XHRcdGxldCBjb250ID0gVXRpbHMuY3NzX2NvbnRhaW4oWzEsIDFdLCB1c2VyX3JlcywgY2FudmFzX3JlcylcblxuXHRcdFx0dVswXSAtPSBwYW5bMF0gKiBjb250WzBdXG5cdFx0XHR1WzFdIC09IHBhblsxXSAqIGNvbnRbMV1cblx0XHR9XG5cdFx0cmV0dXJuIHVcblx0fVxuXHRzdGF0aWMgdGV4dHVyZV9ORENfdG9fdGV4dHVyZV9waXhlbF9jb29yZHModTogbnVtYmVyW10sIHRleDogVGV4dHVyZSk6IG51bWJlcltdIHtcblx0XHRyZXR1cm4gWyh1WzBdICogMC41ICsgMC41KSAqIHRleC5yZXNbMF0sICh1WzFdICogMC41ICsgMC41KSAqIHRleC5yZXNbMV1dXG5cdH1cbn1cbiIsImltcG9ydCB7QnJ1c2hUZXh0dXJlfSBmcm9tICdzdHVmZidcblxuZXhwb3J0IGVudW0gQmxlbmRpbmdDb2xvdXJTcGFjZSB7XG5cdFJHQixcblx0T2tMQ0gsXG5cdFBpZ21lbnRzLFxufVxuXG5leHBvcnQgY2xhc3MgRHJhd1BhcmFtcyB7XG5cdHRleF9keW5hbWljczogbnVtYmVyID0gMC4zXG5cdHRleF9sY2hfZHluYW1pY3M6IG51bWJlcltdID0gWzAsIDAsIDAuMl1cblx0dGV4X3N0cmV0Y2g6IG51bWJlcltdID0gWzEsIDAuMl1cblx0YmxlbmRpbmdfY29sb3VyX3NwYWNlID0gQmxlbmRpbmdDb2xvdXJTcGFjZS5QaWdtZW50c1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR0ZXhfZHluYW1pY3M6IG51bWJlcixcblx0XHR0ZXhfbGNoX2R5bmFtaWNzOiBudW1iZXJbXSxcblx0XHR0ZXhfc3RyZXRjaDogbnVtYmVyW10sXG5cdFx0YmxlbmRpbmdfY29sb3VyX3NwYWNlOiBCbGVuZGluZ0NvbG91clNwYWNlLFxuXHQpIHtcblx0XHR0aGlzLnRleF9keW5hbWljcyA9IHRleF9keW5hbWljc1xuXHRcdHRoaXMudGV4X2xjaF9keW5hbWljcyA9IFsuLi50ZXhfbGNoX2R5bmFtaWNzXVxuXHRcdHRoaXMudGV4X3N0cmV0Y2ggPSBbLi4udGV4X3N0cmV0Y2hdXG5cdFx0dGhpcy5ibGVuZGluZ19jb2xvdXJfc3BhY2UgPSBibGVuZGluZ19jb2xvdXJfc3BhY2Vcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQnJ1c2hQcmVzZXQge1xuXHRzZWxlY3RlZF9icnVzaF90eXBlOiBCcnVzaFR5cGUgPSBCcnVzaFR5cGUuQmxvYnNcblxuXHRjaGFvc19sY2g6IEFycmF5PG51bWJlcj4gPSBbMCwgMCwgMV1cblx0Y2hhb3Nfc3BlZWQ6IG51bWJlciA9IDAuM1xuXHRjaGFvczogbnVtYmVyID0gMC43XG5cblx0ZHluYW1pY3M6IG51bWJlciA9IDAuM1xuXHRzdHJva2Vfb3BhY2l0eV9keW5hbWljczogbnVtYmVyW10gPSBbMCwgMV1cblx0c3Ryb2tlX3NpemVfZHluYW1pY3M6IG51bWJlcltdID0gWzAuNywgMV1cblx0cm90X2ppdHRlcjogbnVtYmVyID0gMFxuXHRwb3Nfaml0dGVyOiBudW1iZXIgPSAwXG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRzZWxlY3RlZF9icnVzaF90ZXh0dXJlOiBCcnVzaFRleHR1cmUgPSB1bmRlZmluZWRcblxuXHR0ZXhfZHluYW1pY3M6IG51bWJlciA9IDAuM1xuXHR0ZXhfbGNoX2R5bmFtaWNzOiBudW1iZXJbXSA9IFswLCAwLCAwLjAyXVxuXHR0ZXhfc3RyZXRjaDogbnVtYmVyW10gPSBbMSwgMC4yXVxuXG5cdGNvbnN0cnVjdG9yKCkge31cbn1cblxuZXhwb3J0IGVudW0gQnJ1c2hUeXBlIHtcblx0QmxvYnMsXG5cdExvbmcsXG5cdFRyaSxcbn1cbmV4cG9ydCBjbGFzcyBCcnVzaFN0cm9rZSB7XG5cdGJydXNoX3R5cGU6IEJydXNoVHlwZVxuXHRicnVzaF90ZXh0dXJlOiBCcnVzaFRleHR1cmVcblx0ZHJhd19wYXJhbXM6IERyYXdQYXJhbXNcblx0cG9zaXRpb25zOiBudW1iZXJbXSA9IFtdXG5cdHJvdGF0aW9uczogbnVtYmVyW10gPSBbXVxuXHRzaXplczogbnVtYmVyW10gPSBbXVxuXHRvcGFjaXRpZXM6IG51bWJlcltdID0gW11cblx0Y29sb3VyczogbnVtYmVyW10gPSBbXVxuXG5cdGlkeDogbnVtYmVyID0gMFxuXHRjb25zdHJ1Y3RvcihicnVzaF90eXBlOiBCcnVzaFR5cGUsIGRyYXdfcGFyYW1zOiBEcmF3UGFyYW1zLCBicnVzaF90ZXh0dXJlOiBCcnVzaFRleHR1cmUpIHtcblx0XHR0aGlzLmRyYXdfcGFyYW1zID0gZHJhd19wYXJhbXNcblx0XHR0aGlzLmJydXNoX3R5cGUgPSBicnVzaF90eXBlXG5cdFx0dGhpcy5icnVzaF90ZXh0dXJlID0gYnJ1c2hfdGV4dHVyZVxuXHR9XG5cdHB1c2hfc3Ryb2tlKHBvc2l0aW9uOiBudW1iZXJbXSwgcm90YXRpb246IG51bWJlcltdLCBzaXplOiBudW1iZXJbXSwgb3BhY2l0eTogbnVtYmVyLCBjb2xvdXI6IG51bWJlcltdKSB7XG5cdFx0Ly8gYXNzZXJ0KHBvc2l0aW9uLmxlbmd0aCA9PT0gMilcblx0XHQvLyBhc3NlcnQocm90YXRpb24ubGVuZ3RoID09PSAyKVxuXHRcdC8vIGFzc2VydChjb2xvdXIubGVuZ3RoID09PSAzKVxuXHRcdGNvbnN0IGN1cnJfaWR4ID0gdGhpcy5pZHhcblx0XHR0aGlzLnBvc2l0aW9ucy5sZW5ndGggKz0gMlxuXHRcdHRoaXMucm90YXRpb25zLmxlbmd0aCArPSAyXG5cdFx0dGhpcy5zaXplcy5sZW5ndGggKz0gMlxuXHRcdHRoaXMub3BhY2l0aWVzLmxlbmd0aCArPSAxXG5cdFx0dGhpcy5jb2xvdXJzLmxlbmd0aCArPSAzXG5cdFx0dGhpcy5wb3NpdGlvbnNbY3Vycl9pZHggKiAyXSA9IHBvc2l0aW9uWzBdXG5cdFx0dGhpcy5wb3NpdGlvbnNbY3Vycl9pZHggKiAyICsgMV0gPSBwb3NpdGlvblsxXVxuXHRcdHRoaXMuc2l6ZXNbY3Vycl9pZHggKiAyXSA9IHNpemVbMF1cblx0XHR0aGlzLnNpemVzW2N1cnJfaWR4ICogMiArIDFdID0gc2l6ZVsxXVxuXHRcdHRoaXMucm90YXRpb25zW2N1cnJfaWR4ICogMl0gPSByb3RhdGlvblswXVxuXHRcdHRoaXMucm90YXRpb25zW2N1cnJfaWR4ICogMiArIDFdID0gcm90YXRpb25bMV1cblx0XHR0aGlzLm9wYWNpdGllc1tjdXJyX2lkeF0gPSBvcGFjaXR5XG5cdFx0dGhpcy5jb2xvdXJzW2N1cnJfaWR4ICogM10gPSBjb2xvdXJbMF1cblx0XHR0aGlzLmNvbG91cnNbY3Vycl9pZHggKiAzICsgMV0gPSBjb2xvdXJbMV1cblx0XHR0aGlzLmNvbG91cnNbY3Vycl9pZHggKiAzICsgMl0gPSBjb2xvdXJbMl1cblx0XHR0aGlzLmlkeCsrXG5cdH1cbn1cbiIsIjxzdmVsdGU6b3B0aW9ucyBhY2Nlc3NvcnMgLz5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHsgQnJ1c2hQcmVzZXQsIEJydXNoVHlwZSB9IGZyb20gJ2JydXNoX3N0cm9rZSdcblx0aW1wb3J0IHtvbk1vdW50fSBmcm9tICdzdmVsdGUnXG5cbiAgZXhwb3J0IGxldCBjdXJyX2JydXNoOiBCcnVzaFByZXNldDtcbiAgbGV0IHNlbGVjdGVkX2JydXNoX3R5cGU6IEJydXNoVHlwZTtcblxuXG4gIGxldCBlbGVtZW50czogSFRNTERpdkVsZW1lbnRbXSA9IFtdXG4gIGxldCBicnVzaF90eXBlczogc3RyaW5nW10gPSBbIF1cbiAgZm9yKGxldCB0eXBlIG9mIE9iamVjdC5rZXlzKEJydXNoVHlwZSkuZmlsdGVyKCh2KSA9PiBpc05hTihOdW1iZXIodikpKSl7XG4gICAgYnJ1c2hfdHlwZXMucHVzaCh0eXBlKVxuICAgIGVsZW1lbnRzLmxlbmd0aCsrXG4gIH1cblxuICBjb25zdCB1cGRhdGVfc3R5bGVzID0gKCk9PntcbiAgICBsZXQgayA9IDAgXG4gICAgdHJ5e1xuICAgICAgZm9yKGxldCBlbGVtZW50IG9mIGVsZW1lbnRzKXtcbiAgICAgICAgbGV0IGJydXNoX3R5cGUgPSBicnVzaF90eXBlc1trXVxuICAgICAgICBsZXQgYnJ1c2hfdHlwZV9pbnQgPSBCcnVzaFR5cGVbYnJ1c2hfdHlwZXNba11dXG4gICAgICAgIGlmKGJydXNoX3R5cGVfaW50ID09PSBzZWxlY3RlZF9icnVzaF90eXBlKXtcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLm91dGxpbmUgPSAnMXB4IHNvbGlkIHdoaXRlJ1xuICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3V0bGluZU9mZnNldCA9ICcwLjFyZW0nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5vdXRsaW5lID0gJzBweCBzb2xpZCB3aGl0ZSdcbiAgICAgICAgfVxuICAgICAgICBrKytcbiAgICAgIH1cbiAgICB9IGNhdGNoKF8pe1xuXG4gICAgfVxuICB9XG4gIFxuICAkOiB7XG4gICAgc2VsZWN0ZWRfYnJ1c2hfdHlwZSA9IGN1cnJfYnJ1c2guc2VsZWN0ZWRfYnJ1c2hfdHlwZVxuICAgIHVwZGF0ZV9zdHlsZXMoKVxuICB9XG4gIFxuXG4gIG9uTW91bnQoKCk9PntcbiAgICB1cGRhdGVfc3R5bGVzKClcbiAgfSlcbjwvc2NyaXB0PlxuXG5cbjxkaXYgY2xhc3M9J2tub2ItY29udGFpbmVyLWNvbnRhaW5lcic+XG4gIHsjZWFjaCBicnVzaF90eXBlcyBhcyBicnVzaF90eXBlLCBpfVxuICAgIDxkaXYgXG4gICAgICBjbGFzcz1cInRpdGxlIG1lbnUtdG9nZ2xlXCIgXG4gICAgICBiaW5kOnRoaXM9e2VsZW1lbnRzW2ldfVxuICAgICAgcm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiMFwiIFxuICAgICAgb246Y2xpY2s9eygpPT57XG4gICAgICAgIGN1cnJfYnJ1c2guc2VsZWN0ZWRfYnJ1c2hfdHlwZSA9IEJydXNoVHlwZVticnVzaF90eXBlXVxuICAgICAgICBsZXQgayA9IDBcbiAgICAgICAgZm9yKGxldCBlbGVtZW50IG9mIGVsZW1lbnRzKXtcbiAgICAgICAgICBpZihrID09PSBpKXtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3V0bGluZSA9ICcxcHggc29saWQgd2hpdGUnXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLm91dGxpbmVPZmZzZXQgPSAnMC4xcmVtJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLm91dGxpbmUgPSAnMHB4IHNvbGlkIHdoaXRlJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBrKytcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIHN0eWxlPSdjdXJzb3I6IHBvaW50ZXI7J1xuICAgICAgPnticnVzaF90eXBlfTwvZGl2PlxuICB7L2VhY2h9XG48L2Rpdj5cbiAgXG48c3R5bGU+XG4gICp7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50O1xuICB9XG4gIC5rbm9iLWNvbnRhaW5lci1jb250YWluZXJ7XG4gICAgYXNwZWN0LXJhdGlvOiAxLzE7XG4gICAgbWF4LWhlaWdodDogNTAlO1xuICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIG1pbi13aWR0aDogN3JlbTtcbiAgfVxuICAua25vYi1jb250YWluZXItY29udGFpbmVyPi50aXRsZS5tZW51LXRvZ2dsZXtcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICBjb2xvcjogYmxhY2s7XG4gIH1cbiAgLmtub2ItY29udGFpbmVyLWNvbnRhaW5lcj4udGl0bGUge1xuICAgIFxuICAgIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsgKi9cbiAgICBmb250LXNpemU6IDAuOHJlbSAhaW1wb3J0YW50O1xuICAgIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsgKi9cbiAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICAgIHRvcDogNS41cmVtO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICB9XG48L3N0eWxlPiIsIjxzdmVsdGU6b3B0aW9ucyBhY2Nlc3NvcnMgLz5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0aW1wb3J0IHsgQnJ1c2hQcmVzZXQsIEJydXNoVHlwZSB9IGZyb20gJ2JydXNoX3N0cm9rZSdcblx0aW1wb3J0IHtvbk1vdW50fSBmcm9tICdzdmVsdGUnXG5cbiAgLy8gZXhwb3J0IGxldCBzZWxlY3RlZF9icnVzaF90eXBlOiBCcnVzaFR5cGU7XG4gIGV4cG9ydCBsZXQgYnJ1c2hfcHJlc2V0czogQnJ1c2hQcmVzZXRbXVxuICBleHBvcnQgbGV0IHNlbGVjdGVkX2JydXNoX3ByZXNldDogQnJ1c2hQcmVzZXRcblxuICBsZXQgZWxlbWVudHM6IEhUTUxEaXZFbGVtZW50W10gPSBbXVxuICBmb3IobGV0IHByZXNldCBvZiBicnVzaF9wcmVzZXRzKXtcbiAgICBlbGVtZW50cy5sZW5ndGgrK1xuICB9XG5cbiAgb25Nb3VudCgoKT0+e1xuICAgIGxldCBrID0gMCBcbiAgICBmb3IobGV0IGVsZW1lbnQgb2YgZWxlbWVudHMpe1xuICAgICAgaWYoc2VsZWN0ZWRfYnJ1c2hfcHJlc2V0ID09PSBicnVzaF9wcmVzZXRzW2tdKXtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5vdXRsaW5lID0gJzFweCBzb2xpZCB3aGl0ZSdcbiAgICAgICAgZWxlbWVudC5zdHlsZS5vdXRsaW5lT2Zmc2V0ID0gJzAuMXJlbSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUub3V0bGluZSA9ICcwcHggc29saWQgd2hpdGUnXG4gICAgICB9XG4gICAgICBrKytcbiAgICB9XG4gIH0pXG48L3NjcmlwdD5cblxuXG48ZGl2IGNsYXNzPSdrbm9iLWNvbnRhaW5lci1jb250YWluZXInPlxuICB7I2VhY2ggYnJ1c2hfcHJlc2V0cyBhcyBwcmVzZXQsIGl9XG4gICAgPGRpdiBcbiAgICAgIGNsYXNzPVwidGl0bGUgbWVudS10b2dnbGVcIiBcbiAgICAgIGJpbmQ6dGhpcz17ZWxlbWVudHNbaV19XG4gICAgICByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgXG4gICAgICBvbjpjbGljaz17KCk9PntcbiAgICAgICAgc2VsZWN0ZWRfYnJ1c2hfcHJlc2V0ID0gcHJlc2V0XG4gICAgICAgIGxldCBrID0gMFxuICAgICAgICBmb3IobGV0IGVsZW1lbnQgb2YgZWxlbWVudHMpe1xuICAgICAgICAgIGlmKGsgPT09IGkpe1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5vdXRsaW5lID0gJzFweCBzb2xpZCB3aGl0ZSdcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3V0bGluZU9mZnNldCA9ICcwLjFyZW0nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3V0bGluZSA9ICcwcHggc29saWQgd2hpdGUnXG4gICAgICAgICAgfVxuICAgICAgICAgIGsrK1xuICAgICAgICB9XG4gICAgICB9fVxuICAgICAgc3R5bGU9J2N1cnNvcjogcG9pbnRlcjsnXG4gICAgICA+e2kudG9TdHJpbmcoKX08L2Rpdj5cbiAgey9lYWNofVxuPC9kaXY+XG4gIFxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4gICp7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50O1xuICB9XG4gIC5rbm9iLWNvbnRhaW5lci1jb250YWluZXJ7XG4gICAgYXNwZWN0LXJhdGlvOiAxLzE7XG4gICAgbWF4LWhlaWdodDogNTAlO1xuICAgIG1hcmdpbi10b3A6IDAuN3JlbTtcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogMy4yNXJlbTtcblxuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgLy8gaGVpZ2h0OiAxMDAlO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogZml0LWNvbnRlbnQoOGNoKSBmaXQtY29udGVudCg4Y2gpIDFmcjtcbiAgICAvLyBncmlkLWF1dG8tcm93czogbWlubWF4KDY3cHgsIGF1dG8pO1xuXG4gICAgLyoganVzdGlmeS1jb250ZW50OiBjZW50ZXI7ICovXG4gICAgLyogYWxpZ24taXRlbXM6IGNlbnRlcjsgKi9cbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgLyogbWluLXdpZHRoOiA3cmVtOyAqL1xuICB9XG4gIC5rbm9iLWNvbnRhaW5lci1jb250YWluZXI+LnRpdGxlLm1lbnUtdG9nZ2xle1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGNvbG9yOiBibGFjaztcbiAgfVxuICAua25vYi1jb250YWluZXItY29udGFpbmVyPi50aXRsZSB7XG4gICAgXG4gICAgcGFkZGluZzogMC4ycmVtO1xuICAgIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsgKi9cbiAgICBmb250LXNpemU6IDAuOHJlbSAhaW1wb3J0YW50O1xuICAgIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsgKi9cbiAgICBtYXJnaW46IDAuM3JlbTtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgLy8gd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gICAgLy8gdG9wOiA1LjVyZW07XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIH1cbjwvc3R5bGU+IiwiPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycyAvPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAvLyBAdHMtaWdub3JlXG4gIGltcG9ydCB1bmRvSWNvbiBmcm9tIFwiLy4uL3B1YmxpYy91bmRvLnN2Z1wiXG4gIC8vIEB0cy1pZ25vcmVcbiAgaW1wb3J0IHJlZG9JY29uIGZyb20gXCIvLi4vcHVibGljL3JlZG8uc3ZnXCIgXG4gIFxuICBcbiAgZXhwb3J0IGxldCByZWRvOiAoKT0+dm9pZFxuICBleHBvcnQgbGV0IHVuZG86ICgpPT52b2lkXG4gIFxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9J2tub2ItY29udGFpbmVyJz5cbiAgPGRpdiBjbGFzcz1cImtub2JcIiBvbjpjbGljaz17KCk9PnVuZG8oKX0+XG4gICAge0BodG1sIHVuZG9JY29ufVxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImtub2JcIiBvbjpjbGljaz17KCk9PnJlZG8oKX0+XG4gICAge0BodG1sIHJlZG9JY29ufVxuICA8L2Rpdj5cbjwvZGl2PlxuXG5cbjxzdHlsZT5cbiAgKntcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmtub2ItY29udGFpbmVye1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAmOmhvdmVye1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAvKiB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDQwcHg7ICovXG4gICAgYXNwZWN0LXJhdGlvOiAxLzE7XG4gICAgbWF4LWhlaWdodDogNTAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIG1hcmdpbi1yaWdodDogMXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IGF1dG87XG4gICAgcG9pbnRlci1ldmVudHM6IGFsbDtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgfSAgXG5cbiAgLmtub2Ige1xuICAgICY6YWN0aXZle1xuICAgICAgZmlsdGVyOiBpbnZlcnQoMSk7XG4gICAgICBiYWNrZ3JvdW5kOiBibGFjaztcbiAgICB9XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgYXNwZWN0LXJhdGlvOiAxLzE7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIC8qIGhlaWdodDogODAlOyAqL1xuICAgIHBhZGRpbmc6IDA7XG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xuICAgIGZpbGw6IHdoaXRlO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7XG4gIH1cblxuICAua25vYiA6Z2xvYmFsKHN2Zyl7XG4gICAgZmlsbDogd2hpdGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG48L3N0eWxlPiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGaXJlYmFzZSBjb25zdGFudHMuICBTb21lIG9mIHRoZXNlIChAZGVmaW5lcykgY2FuIGJlIG92ZXJyaWRkZW4gYXQgY29tcGlsZS10aW1lLlxuICovXG5cbmV4cG9ydCBjb25zdCBDT05TVEFOVFMgPSB7XG4gIC8qKlxuICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIGNsaWVudCBOb2RlLmpzIFNESy5cbiAgICovXG4gIE5PREVfQ0xJRU5UOiBmYWxzZSxcbiAgLyoqXG4gICAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyB0aGUgQWRtaW4gTm9kZS5qcyBTREsuXG4gICAqL1xuICBOT0RFX0FETUlOOiBmYWxzZSxcblxuICAvKipcbiAgICogRmlyZWJhc2UgU0RLIFZlcnNpb25cbiAgICovXG4gIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ09OU1RBTlRTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcHJvdmlkZWQgYXNzZXJ0aW9uIGlzIGZhbHN5XG4gKi9cbmV4cG9ydCBjb25zdCBhc3NlcnQgPSBmdW5jdGlvbiAoYXNzZXJ0aW9uOiB1bmtub3duLCBtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFhc3NlcnRpb24pIHtcbiAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIEVycm9yIG9iamVjdCBzdWl0YWJsZSBmb3IgdGhyb3dpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NlcnRpb25FcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlOiBzdHJpbmcpOiBFcnJvciB7XG4gIHJldHVybiBuZXcgRXJyb3IoXG4gICAgJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcbiAgICAgIENPTlNUQU5UUy5TREtfVkVSU0lPTiArXG4gICAgICAnKSBJTlRFUk5BTCBBU1NFUlQgRkFJTEVEOiAnICtcbiAgICAgIG1lc3NhZ2VcbiAgKTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcbiAgY29uc3Qgb3V0OiBudW1iZXJbXSA9IFtdO1xuICBsZXQgcCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgb3V0W3ArK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJlxuICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXG4gICAgICAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmYzAwKSA9PT0gMHhkYzAwXG4gICAgKSB7XG4gICAgICAvLyBTdXJyb2dhdGUgUGFpclxuICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xuICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBpbnRvIHRoZSBzdHJpbmcgZ2l2ZW4gYnkgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmcgY2hhcmFjdGVycy5cbiAqIEByZXR1cm4gU3RyaW5naWZpY2F0aW9uIG9mIHRoZSBhcnJheS5cbiAqL1xuY29uc3QgYnl0ZUFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiAoYnl0ZXM6IG51bWJlcltdKTogc3RyaW5nIHtcbiAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcbiAgY29uc3Qgb3V0OiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgcG9zID0gMCxcbiAgICBjID0gMDtcbiAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xuICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xuICAgIGlmIChjMSA8IDEyOCkge1xuICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxKTtcbiAgICB9IGVsc2UgaWYgKGMxID4gMTkxICYmIGMxIDwgMjI0KSB7XG4gICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMzEpIDw8IDYpIHwgKGMyICYgNjMpKTtcbiAgICB9IGVsc2UgaWYgKGMxID4gMjM5ICYmIGMxIDwgMzY1KSB7XG4gICAgICAvLyBTdXJyb2dhdGUgUGFpclxuICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XG4gICAgICBjb25zdCBjMyA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xuICAgICAgY29uc3QgdSA9XG4gICAgICAgICgoKGMxICYgNykgPDwgMTgpIHwgKChjMiAmIDYzKSA8PCAxMikgfCAoKGMzICYgNjMpIDw8IDYpIHwgKGM0ICYgNjMpKSAtXG4gICAgICAgIDB4MTAwMDA7XG4gICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkODAwICsgKHUgPj4gMTApKTtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGRjMDAgKyAodSAmIDEwMjMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XG4gICAgICBjb25zdCBjMyA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgICAgKChjMSAmIDE1KSA8PCAxMikgfCAoKGMyICYgNjMpIDw8IDYpIHwgKGMzICYgNjMpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0LmpvaW4oJycpO1xufTtcblxuaW50ZXJmYWNlIEJhc2U2NCB7XG4gIGJ5dGVUb0NoYXJNYXBfOiB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB9IHwgbnVsbDtcbiAgY2hhclRvQnl0ZU1hcF86IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gfCBudWxsO1xuICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IHsgW2tleTogbnVtYmVyXTogc3RyaW5nIH0gfCBudWxsO1xuICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gfCBudWxsO1xuICBFTkNPREVEX1ZBTFNfQkFTRTogc3RyaW5nO1xuICByZWFkb25seSBFTkNPREVEX1ZBTFM6IHN0cmluZztcbiAgcmVhZG9ubHkgRU5DT0RFRF9WQUxTX1dFQlNBRkU6IHN0cmluZztcbiAgSEFTX05BVElWRV9TVVBQT1JUOiBib29sZWFuO1xuICBlbmNvZGVCeXRlQXJyYXkoaW5wdXQ6IG51bWJlcltdIHwgVWludDhBcnJheSwgd2ViU2FmZT86IGJvb2xlYW4pOiBzdHJpbmc7XG4gIGVuY29kZVN0cmluZyhpbnB1dDogc3RyaW5nLCB3ZWJTYWZlPzogYm9vbGVhbik6IHN0cmluZztcbiAgZGVjb2RlU3RyaW5nKGlucHV0OiBzdHJpbmcsIHdlYlNhZmU6IGJvb2xlYW4pOiBzdHJpbmc7XG4gIGRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0OiBzdHJpbmcsIHdlYlNhZmU6IGJvb2xlYW4pOiBudW1iZXJbXTtcbiAgaW5pdF8oKTogdm9pZDtcbn1cblxuLy8gV2UgZGVmaW5lIGl0IGFzIGFuIG9iamVjdCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjbGFzcyBiZWNhdXNlIGEgY2xhc3MgY29tcGlsZWQgZG93biB0byBlczUgY2FuJ3Rcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXG4vLyBTdGF0aWMgbG9va3VwIG1hcHMsIGxhemlseSBwb3B1bGF0ZWQgYnkgaW5pdF8oKVxuZXhwb3J0IGNvbnN0IGJhc2U2NDogQmFzZTY0ID0ge1xuICAvKipcbiAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgYnl0ZVRvQ2hhck1hcF86IG51bGwsXG5cbiAgLyoqXG4gICAqIE1hcHMgY2hhcmFjdGVycyB0byBieXRlcy5cbiAgICovXG4gIGNoYXJUb0J5dGVNYXBfOiBudWxsLFxuXG4gIC8qKlxuICAgKiBNYXBzIGJ5dGVzIHRvIHdlYnNhZmUgY2hhcmFjdGVycy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJ5dGVUb0NoYXJNYXBXZWJTYWZlXzogbnVsbCxcblxuICAvKipcbiAgICogTWFwcyB3ZWJzYWZlIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IG51bGwsXG5cbiAgLyoqXG4gICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LCBzaGFyZWQgYmV0d2VlblxuICAgKiBFTkNPREVEX1ZBTFMgYW5kIEVOQ09ERURfVkFMU19XRUJTQUZFXG4gICAqL1xuICBFTkNPREVEX1ZBTFNfQkFTRTpcbiAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonICsgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyArICcwMTIzNDU2Nzg5JyxcblxuICAvKipcbiAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQuIFZhbHVlIDY0ICg9KSBpcyBzcGVjaWFsOyBpdCBtZWFucyBcIm5vdGhpbmcuXCJcbiAgICovXG4gIGdldCBFTkNPREVEX1ZBTFMoKSB7XG4gICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnKy89JztcbiAgfSxcblxuICAvKipcbiAgICogT3VyIHdlYnNhZmUgYWxwaGFiZXQuXG4gICAqL1xuICBnZXQgRU5DT0RFRF9WQUxTX1dFQlNBRkUoKSB7XG4gICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnLV8uJztcbiAgfSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgdGhlIGF0b2IgYW5kIGJ0b2EgZnVuY3Rpb25zLiBUaGlzIGV4dGVuc2lvblxuICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXG4gICAqIEFTU1VNRV8qIHZhcmlhYmxlcyB0byBhdm9pZCBwdWxsaW5nIGluIHRoZSBmdWxsIHVzZXJhZ2VudCBkZXRlY3Rpb24gbGlicmFyeVxuICAgKiBidXQgc3RpbGwgYWxsb3dpbmcgdGhlIHN0YW5kYXJkIHBlci1icm93c2VyIGNvbXBpbGF0aW9ucy5cbiAgICpcbiAgICovXG4gIEhBU19OQVRJVkVfU1VQUE9SVDogdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicsXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1lbmNvZGUgYW4gYXJyYXkgb2YgYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBBbiBhcnJheSBvZiBieXRlcyAobnVtYmVycyB3aXRoXG4gICAqICAgICB2YWx1ZSBpbiBbMCwgMjU1XSkgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcbiAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxuICAgKiBAcmV0dXJuIFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXG4gICAqL1xuICBlbmNvZGVCeXRlQXJyYXkoaW5wdXQ6IG51bWJlcltdIHwgVWludDhBcnJheSwgd2ViU2FmZT86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHRocm93IEVycm9yKCdlbmNvZGVCeXRlQXJyYXkgdGFrZXMgYW4gYXJyYXkgYXMgYSBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRfKCk7XG5cbiAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxuICAgICAgPyB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlXyFcbiAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXyE7XG5cbiAgICBjb25zdCBvdXRwdXQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XG4gICAgICBjb25zdCBoYXZlQnl0ZTIgPSBpICsgMSA8IGlucHV0Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gaW5wdXRbaSArIDFdIDogMDtcbiAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xuICAgICAgY29uc3QgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBpbnB1dFtpICsgMl0gOiAwO1xuXG4gICAgICBjb25zdCBvdXRCeXRlMSA9IGJ5dGUxID4+IDI7XG4gICAgICBjb25zdCBvdXRCeXRlMiA9ICgoYnl0ZTEgJiAweDAzKSA8PCA0KSB8IChieXRlMiA+PiA0KTtcbiAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcbiAgICAgIGxldCBvdXRCeXRlNCA9IGJ5dGUzICYgMHgzZjtcblxuICAgICAgaWYgKCFoYXZlQnl0ZTMpIHtcbiAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcblxuICAgICAgICBpZiAoIWhhdmVCeXRlMikge1xuICAgICAgICAgIG91dEJ5dGUzID0gNjQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb3V0cHV0LnB1c2goXG4gICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTFdLFxuICAgICAgICBieXRlVG9DaGFyTWFwW291dEJ5dGUyXSxcbiAgICAgICAgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlM10sXG4gICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTRdXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1lbmNvZGUgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXG4gICAqIEBwYXJhbSB3ZWJTYWZlIElmIHRydWUsIHdlIHNob3VsZCB1c2UgdGhlXG4gICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cbiAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICAgKi9cbiAgZW5jb2RlU3RyaW5nKGlucHV0OiBzdHJpbmcsIHdlYlNhZmU/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxuICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcbiAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcbiAgICAgIHJldHVybiBidG9hKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlQnl0ZUFycmF5KHN0cmluZ1RvQnl0ZUFycmF5KGlucHV0KSwgd2ViU2FmZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCB0byBkZWNvZGUuXG4gICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGVcbiAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxuICAgKiBAcmV0dXJuIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXG4gICAqL1xuICBkZWNvZGVTdHJpbmcoaW5wdXQ6IHN0cmluZywgd2ViU2FmZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcbiAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXG4gICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XG4gICAgICByZXR1cm4gYXRvYihpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiBieXRlQXJyYXlUb1N0cmluZyh0aGlzLmRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXG4gICAqXG4gICAqIEluIGJhc2UtNjQgZGVjb2RpbmcsIGdyb3VwcyBvZiBmb3VyIGNoYXJhY3RlcnMgYXJlIGNvbnZlcnRlZCBpbnRvIHRocmVlXG4gICAqIGJ5dGVzLiAgSWYgdGhlIGVuY29kZXIgZGlkIG5vdCBhcHBseSBwYWRkaW5nLCB0aGUgaW5wdXQgbGVuZ3RoIG1heSBub3RcbiAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IGdyb3VwIHdpbGwgaGF2ZSBmZXdlciB0aGFuIDQgY2hhcmFjdGVycywgYW5kXG4gICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXG4gICAqIHRvIG9uZSBieXRlLiAgSWYgdGhlIGdyb3VwIGhhcyB0aHJlZSBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzIHRvIHR3byBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cbiAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZSB3ZWItc2FmZSBhbHBoYWJldC5cbiAgICogQHJldHVybiBieXRlcyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXG4gICAqL1xuICBkZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dDogc3RyaW5nLCB3ZWJTYWZlOiBib29sZWFuKTogbnVtYmVyW10ge1xuICAgIHRoaXMuaW5pdF8oKTtcblxuICAgIGNvbnN0IGNoYXJUb0J5dGVNYXAgPSB3ZWJTYWZlXG4gICAgICA/IHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfIVxuICAgICAgOiB0aGlzLmNoYXJUb0J5dGVNYXBfITtcblxuICAgIGNvbnN0IG91dHB1dDogbnVtYmVyW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyApIHtcbiAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XG5cbiAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XG4gICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDA7XG4gICAgICArK2k7XG5cbiAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgPCBpbnB1dC5sZW5ndGg7XG4gICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xuICAgICAgKytpO1xuXG4gICAgICBjb25zdCBoYXZlQnl0ZTQgPSBpIDwgaW5wdXQubGVuZ3RoO1xuICAgICAgY29uc3QgYnl0ZTQgPSBoYXZlQnl0ZTQgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcbiAgICAgICsraTtcblxuICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IERlY29kZUJhc2U2NFN0cmluZ0Vycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xuICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTEpO1xuXG4gICAgICBpZiAoYnl0ZTMgIT09IDY0KSB7XG4gICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xuICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMik7XG5cbiAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xuICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XG4gICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSxcblxuICAvKipcbiAgICogTGF6eSBzdGF0aWMgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uIENhbGxlZCBiZWZvcmVcbiAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpbml0XygpIHtcbiAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcbiAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF8gPSB7fTtcbiAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF8gPSB7fTtcbiAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XG4gICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlXyA9IHt9O1xuXG4gICAgICAvLyBXZSB3YW50IHF1aWNrIG1hcHBpbmdzIGJhY2sgYW5kIGZvcnRoLCBzbyB3ZSBwcmVjb21wdXRlIHR3byBtYXBzLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLkVOQ09ERURfVkFMUy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFMuY2hhckF0KGkpO1xuICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcbiAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9baV0gPSB0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKTtcbiAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9bdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9baV1dID0gaTtcblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcgd2hlbiBkZWNvZGluZyBhbmQgY29ycmVjdGx5IGRlY29kZSBib3RoIGVuY29kaW5ncy5cbiAgICAgICAgaWYgKGkgPj0gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuRU5DT0RFRF9WQUxTX1dFQlNBRkUuY2hhckF0KGkpXSA9IGk7XG4gICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV9bdGhpcy5FTkNPREVEX1ZBTFMuY2hhckF0KGkpXSA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQW4gZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgZGVjb2RpbmcgYmFzZTY0IHN0cmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIERlY29kZUJhc2U2NFN0cmluZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICByZWFkb25seSBuYW1lID0gJ0RlY29kZUJhc2U2NFN0cmluZ0Vycm9yJztcbn1cblxuLyoqXG4gKiBVUkwtc2FmZSBiYXNlNjQgZW5jb2RpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHV0ZjhCeXRlcyA9IHN0cmluZ1RvQnl0ZUFycmF5KHN0cik7XG4gIHJldHVybiBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KHV0ZjhCeXRlcywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFVSTC1zYWZlIGJhc2U2NCBlbmNvZGluZyAod2l0aG91dCBcIi5cIiBwYWRkaW5nIGluIHRoZSBlbmQpLlxuICogZS5nLiBVc2VkIGluIEpTT04gV2ViIFRva2VuIChKV1QpIHBhcnRzLlxuICovXG5leHBvcnQgY29uc3QgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBVc2UgYmFzZTY0dXJsIGVuY29kaW5nIGFuZCByZW1vdmUgcGFkZGluZyBpbiB0aGUgZW5kIChkb3QgY2hhcmFjdGVycykuXG4gIHJldHVybiBiYXNlNjRFbmNvZGUoc3RyKS5yZXBsYWNlKC9cXC4vZywgJycpO1xufTtcblxuLyoqXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcbiAqXG4gKiBOT1RFOiBETyBOT1QgdXNlIHRoZSBnbG9iYWwgYXRvYigpIGZ1bmN0aW9uIC0gaXQgZG9lcyBOT1Qgc3VwcG9ydCB0aGVcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxuICpcbiAqIEBwYXJhbSBzdHIgVG8gYmUgZGVjb2RlZFxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcbiAqL1xuZXhwb3J0IGNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICB0cnkge1xuICAgIHJldHVybiBiYXNlNjQuZGVjb2RlU3RyaW5nKHN0ciwgdHJ1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdiYXNlNjREZWNvZGUgZmFpbGVkOiAnLCBlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ29weTxUPih2YWx1ZTogVCk6IFQge1xuICByZXR1cm4gZGVlcEV4dGVuZCh1bmRlZmluZWQsIHZhbHVlKSBhcyBUO1xufVxuXG4vKipcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cbiAqIG9mIE9iamVjdHMgYW5kIEFycmF5cykuICBTY2FsYXIgdmFsdWVzIGluIHRoZSB0YXJnZXQgYXJlIG92ZXItd3JpdHRlbi5cbiAqIElmIHRhcmdldCBpcyB1bmRlZmluZWQsIGFuIG9iamVjdCBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZSB3aWxsIGJlIGNyZWF0ZWRcbiAqIChhbmQgcmV0dXJuZWQpLlxuICpcbiAqIFdlIHJlY3Vyc2l2ZWx5IGNvcHkgYWxsIGNoaWxkIHByb3BlcnRpZXMgb2YgcGxhaW4gT2JqZWN0cyBpbiB0aGUgc291cmNlLSBzb1xuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXG4gKlxuICogTm90ZSB0aGF0IHRoZSB0YXJnZXQgY2FuIGJlIGEgZnVuY3Rpb24sIGluIHdoaWNoIGNhc2UgdGhlIHByb3BlcnRpZXMgaW5cbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXG4gKlxuICogTm90ZTogd2UgZG9uJ3QgbWVyZ2UgX19wcm90b19fIHRvIHByZXZlbnQgcHJvdG90eXBlIHBvbGx1dGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQ6IHVua25vd24sIHNvdXJjZTogdW5rbm93bik6IHVua25vd24ge1xuICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHN3aXRjaCAoc291cmNlLmNvbnN0cnVjdG9yKSB7XG4gICAgY2FzZSBEYXRlOlxuICAgICAgLy8gVHJlYXQgRGF0ZXMgbGlrZSBzY2FsYXJzOyBpZiB0aGUgdGFyZ2V0IGRhdGUgb2JqZWN0IGhhZCBhbnkgY2hpbGRcbiAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcbiAgICAgIGNvbnN0IGRhdGVWYWx1ZSA9IHNvdXJjZSBhcyBEYXRlO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVWYWx1ZS5nZXRUaW1lKCkpO1xuXG4gICAgY2FzZSBPYmplY3Q6XG4gICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0ID0ge307XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFycmF5OlxuICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXG4gICAgICB0YXJnZXQgPSBbXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIE5vdCBhIHBsYWluIE9iamVjdCAtIHRyZWF0IGl0IGFzIGEgc2NhbGFyLlxuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZvciAoY29uc3QgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAvLyB1c2UgaXNWYWxpZEtleSB0byBndWFyZCBhZ2FpbnN0IHByb3RvdHlwZSBwb2xsdXRpb24uIFNlZSBodHRwczovL3NueWsuaW8vdnVsbi9TTllLLUpTLUxPREFTSC00NTAyMDJcbiAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCAhaXNWYWxpZEtleShwcm9wKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgICh0YXJnZXQgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW3Byb3BdID0gZGVlcEV4dGVuZChcbiAgICAgICh0YXJnZXQgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW3Byb3BdLFxuICAgICAgKHNvdXJjZSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilbcHJvcF1cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4ga2V5ICE9PSAnX19wcm90b19fJztcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXG4gKiBAcmV0dXJucyB0aGUgYGdsb2JhbFRoaXNgIG9iamVjdCBmb3IgdGhlIGdpdmVuIGVudmlyb25tZW50LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsKCk6IHR5cGVvZiBnbG9iYWxUaGlzIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdC4nKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGJhc2U2NERlY29kZSB9IGZyb20gJy4vY3J5cHQnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG4vKipcbiAqIEtleXMgZm9yIGV4cGVyaW1lbnRhbCBwcm9wZXJ0aWVzIG9uIHRoZSBgRmlyZWJhc2VEZWZhdWx0c2Agb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBFeHBlcmltZW50YWxLZXkgPSAnYXV0aFRva2VuU3luY1VSTCcgfCAnYXV0aElkVG9rZW5NYXhBZ2UnO1xuXG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNhbiBiZSBpbmplY3RlZCBpbnRvIHRoZSBlbnZpcm9ubWVudCBhcyBfX0ZJUkVCQVNFX0RFRkFVTFRTX18sXG4gKiBlaXRoZXIgYXMgYSBwcm9wZXJ0eSBvZiBnbG9iYWxUaGlzLCBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlLCBvciBhXG4gKiBjb29raWUuXG4gKlxuICogVGhpcyBvYmplY3QgY2FuIGJlIHVzZWQgdG8gYXV0b21hdGljYWxseSBjb25maWd1cmUgYW5kIGluaXRpYWxpemVcbiAqIGEgRmlyZWJhc2UgYXBwIGFzIHdlbGwgYXMgYW55IGVtdWxhdG9ycy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlyZWJhc2VEZWZhdWx0cyB7XG4gIGNvbmZpZz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIGVtdWxhdG9ySG9zdHM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBfYXV0aFRva2VuU3luY1VSTD86IHN0cmluZztcbiAgX2F1dGhJZFRva2VuTWF4QWdlPzogbnVtYmVyO1xuICAvKipcbiAgICogT3ZlcnJpZGUgRmlyZWJhc2UncyBydW50aW1lIGVudmlyb25tZW50IGRldGVjdGlvbiBhbmRcbiAgICogZm9yY2UgdGhlIFNESyB0byBhY3QgYXMgaWYgaXQgd2VyZSBpbiB0aGUgc3BlY2lmaWVkIGVudmlyb25tZW50LlxuICAgKi9cbiAgZm9yY2VFbnZpcm9ubWVudD86ICdicm93c2VyJyB8ICdub2RlJztcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyBOZWVkIGB2YXJgIGZvciB0aGlzIHRvIHdvcmsuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIF9fRklSRUJBU0VfREVGQVVMVFNfXzogRmlyZWJhc2VEZWZhdWx0cyB8IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsID0gKCk6IEZpcmViYXNlRGVmYXVsdHMgfCB1bmRlZmluZWQgPT5cbiAgZ2V0R2xvYmFsKCkuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xuXG4vKipcbiAqIEF0dGVtcHQgdG8gcmVhZCBkZWZhdWx0cyBmcm9tIGEgSlNPTiBzdHJpbmcgcHJvdmlkZWQgdG9cbiAqIHByb2Nlc3MoLillbnYoLilfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb3IgYSBKU09OIGZpbGUgd2hvc2UgcGF0aCBpcyBpblxuICogcHJvY2VzcyguKWVudiguKV9fRklSRUJBU0VfREVGQVVMVFNfUEFUSF9fXG4gKiBUaGUgZG90cyBhcmUgaW4gcGFyZW5zIGJlY2F1c2UgY2VydGFpbiBjb21waWxlcnMgKFZpdGU/KSBjYW5ub3RcbiAqIGhhbmRsZSBzZWVpbmcgdGhhdCB2YXJpYWJsZSBpbiBjb21tZW50cy5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82ODM4XG4gKi9cbmNvbnN0IGdldERlZmF1bHRzRnJvbUVudlZhcmlhYmxlID0gKCk6IEZpcmViYXNlRGVmYXVsdHMgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBwcm9jZXNzLmVudiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZGVmYXVsdHNKc29uU3RyaW5nID0gcHJvY2Vzcy5lbnYuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xuICBpZiAoZGVmYXVsdHNKc29uU3RyaW5nKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGVmYXVsdHNKc29uU3RyaW5nKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tQ29va2llID0gKCk6IEZpcmViYXNlRGVmYXVsdHMgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbWF0Y2g7XG4gIHRyeSB7XG4gICAgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goL19fRklSRUJBU0VfREVGQVVMVFNfXz0oW147XSspLyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBTb21lIGVudmlyb25tZW50cyBzdWNoIGFzIEFuZ3VsYXIgVW5pdmVyc2FsIFNTUiBoYXZlIGFcbiAgICAvLyBgZG9jdW1lbnRgIG9iamVjdCBidXQgZXJyb3Igb24gYWNjZXNzaW5nIGBkb2N1bWVudC5jb29raWVgLlxuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBkZWNvZGVkID0gbWF0Y2ggJiYgYmFzZTY0RGVjb2RlKG1hdGNoWzFdKTtcbiAgcmV0dXJuIGRlY29kZWQgJiYgSlNPTi5wYXJzZShkZWNvZGVkKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LiBJdCBjaGVja3MgaW4gb3JkZXI6XG4gKiAoMSkgaWYgc3VjaCBhbiBvYmplY3QgZXhpc3RzIGFzIGEgcHJvcGVydHkgb2YgYGdsb2JhbFRoaXNgXG4gKiAoMikgaWYgc3VjaCBhbiBvYmplY3Qgd2FzIHByb3ZpZGVkIG9uIGEgc2hlbGwgZW52aXJvbm1lbnQgdmFyaWFibGVcbiAqICgzKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgaW4gYSBjb29raWVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRzID0gKCk6IEZpcmViYXNlRGVmYXVsdHMgfCB1bmRlZmluZWQgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiAoXG4gICAgICBnZXREZWZhdWx0c0Zyb21HbG9iYWwoKSB8fFxuICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxuICAgICAgZ2V0RGVmYXVsdHNGcm9tQ29va2llKClcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyoqXG4gICAgICogQ2F0Y2gtYWxsIGZvciBiZWluZyB1bmFibGUgdG8gZ2V0IF9fRklSRUJBU0VfREVGQVVMVFNfXyBkdWVcbiAgICAgKiB0byBhbnkgZW52aXJvbm1lbnQgY2FzZSB3ZSBoYXZlIG5vdCBhY2NvdW50ZWQgZm9yLiBMb2cgdG9cbiAgICAgKiBpbmZvIGluc3RlYWQgb2Ygc3dhbGxvd2luZyBzbyB3ZSBjYW4gZmluZCB0aGVzZSB1bmtub3duIGNhc2VzXG4gICAgICogYW5kIGFkZCBwYXRocyBmb3IgdGhlbSBpZiBuZWVkZWQuXG4gICAgICovXG4gICAgY29uc29sZS5pbmZvKGBVbmFibGUgdG8gZ2V0IF9fRklSRUJBU0VfREVGQVVMVFNfXyBkdWUgdG86ICR7ZX1gKTtcbiAgICByZXR1cm47XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxuICogQHJldHVybnMgYSBVUkwgaG9zdCBmb3JtYXR0ZWQgbGlrZSBgMTI3LjAuMC4xOjk5OTlgIG9yIGBbOjoxXTo0MDAwYCBpZiBhdmFpbGFibGVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAoXG4gIHByb2R1Y3ROYW1lOiBzdHJpbmdcbik6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiBnZXREZWZhdWx0cygpPy5lbXVsYXRvckhvc3RzPy5bcHJvZHVjdE5hbWVdO1xuXG4vKipcbiAqIFJldHVybnMgZW11bGF0b3IgaG9zdG5hbWUgYW5kIHBvcnQgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0XG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCA9IChcbiAgcHJvZHVjdE5hbWU6IHN0cmluZ1xuKTogW2hvc3RuYW1lOiBzdHJpbmcsIHBvcnQ6IG51bWJlcl0gfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XG4gIGlmICghaG9zdCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cbiAgaWYgKHNlcGFyYXRvckluZGV4IDw9IDAgfHwgc2VwYXJhdG9ySW5kZXggKyAxID09PSBob3N0Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBob3N0ICR7aG9zdH0gd2l0aCBubyBzZXBhcmF0ZSBob3N0bmFtZSBhbmQgcG9ydCFgKTtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gIGNvbnN0IHBvcnQgPSBwYXJzZUludChob3N0LnN1YnN0cmluZyhzZXBhcmF0b3JJbmRleCArIDEpLCAxMCk7XG4gIGlmIChob3N0WzBdID09PSAnWycpIHtcbiAgICAvLyBCcmFja2V0LXF1b3RlZCBgW2lwdjZhZGRyXTpwb3J0YCA9PiByZXR1cm4gXCJpcHY2YWRkclwiICh3aXRob3V0IGJyYWNrZXRzKS5cbiAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDEsIHNlcGFyYXRvckluZGV4IC0gMSksIHBvcnRdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMCwgc2VwYXJhdG9ySW5kZXgpLCBwb3J0XTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdEFwcENvbmZpZyA9ICgpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgdW5kZWZpbmVkID0+XG4gIGdldERlZmF1bHRzKCk/LmNvbmZpZztcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGV4cGVyaW1lbnRhbCBzZXR0aW5nIG9uIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0IChwcm9wZXJ0aWVzXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEV4cGVyaW1lbnRhbFNldHRpbmcgPSA8VCBleHRlbmRzIEV4cGVyaW1lbnRhbEtleT4oXG4gIG5hbWU6IFRcbik6IEZpcmViYXNlRGVmYXVsdHNbYF8ke1R9YF0gPT5cbiAgZ2V0RGVmYXVsdHMoKT8uW2BfJHtuYW1lfWBdIGFzIEZpcmViYXNlRGVmYXVsdHNbYF8ke1R9YF07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgY2xhc3MgRGVmZXJyZWQ8Uj4ge1xuICBwcm9taXNlOiBQcm9taXNlPFI+O1xuICByZWplY3Q6ICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgcmVzb2x2ZTogKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZCA9ICgpID0+IHt9O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlIGFzICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQ7XG4gICAgICB0aGlzLnJlamVjdCA9IHJlamVjdCBhcyAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXG4gICAqIGludm9raW5nIHByb21pc2VzIGlubGluZSwgd2hpY2ggUHJvbWlzZXMgYXJlIGZvcmJpZGRlbiB0byBkby4gVGhpcyBtZXRob2QgYWNjZXB0cyBhbiBvcHRpb25hbCBub2RlLXN0eWxlIGNhbGxiYWNrXG4gICAqIGFuZCByZXR1cm5zIGEgbm9kZS1zdHlsZSBjYWxsYmFjayB3aGljaCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBEZWZlcnJlZCdzIHByb21pc2UuXG4gICAqL1xuICB3cmFwQ2FsbGJhY2soXG4gICAgY2FsbGJhY2s/OiAoZXJyb3I/OiB1bmtub3duLCB2YWx1ZT86IHVua25vd24pID0+IHZvaWRcbiAgKTogKGVycm9yOiB1bmtub3duLCB2YWx1ZT86IHVua25vd24pID0+IHZvaWQge1xuICAgIHJldHVybiAoZXJyb3IsIHZhbHVlPykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRoaXMucmVqZWN0KGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXG4gICAgICAgIC8vIHByb21pc2VzXG4gICAgICAgIHRoaXMucHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG5cbiAgICAgICAgLy8gU29tZSBvZiBvdXIgY2FsbGJhY2tzIGRvbid0IGV4cGVjdCBhIHZhbHVlIGFuZCBvdXIgb3duIHRlc3RzXG4gICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcbiAgICAgICAgaWYgKGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcgfSBmcm9tICcuL2NyeXB0JztcblxuLy8gRmlyZWJhc2UgQXV0aCB0b2tlbnMgY29udGFpbiBzbmFrZV9jYXNlIGNsYWltcyBmb2xsb3dpbmcgdGhlIEpXVCBzdGFuZGFyZCAvIGNvbnZlbnRpb24uXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cblxuZXhwb3J0IHR5cGUgRmlyZWJhc2VTaWduSW5Qcm92aWRlciA9XG4gIHwgJ2N1c3RvbSdcbiAgfCAnZW1haWwnXG4gIHwgJ3Bhc3N3b3JkJ1xuICB8ICdwaG9uZSdcbiAgfCAnYW5vbnltb3VzJ1xuICB8ICdnb29nbGUuY29tJ1xuICB8ICdmYWNlYm9vay5jb20nXG4gIHwgJ2dpdGh1Yi5jb20nXG4gIHwgJ3R3aXR0ZXIuY29tJ1xuICB8ICdtaWNyb3NvZnQuY29tJ1xuICB8ICdhcHBsZS5jb20nO1xuXG5pbnRlcmZhY2UgRmlyZWJhc2VJZFRva2VuIHtcbiAgLy8gQWx3YXlzIHNldCB0byBodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vUFJPSkVDVF9JRFxuICBpc3M6IHN0cmluZztcblxuICAvLyBBbHdheXMgc2V0IHRvIFBST0pFQ1RfSURcbiAgYXVkOiBzdHJpbmc7XG5cbiAgLy8gVGhlIHVzZXIncyB1bmlxdWUgSURcbiAgc3ViOiBzdHJpbmc7XG5cbiAgLy8gVGhlIHRva2VuIGlzc3VlIHRpbWUsIGluIHNlY29uZHMgc2luY2UgZXBvY2hcbiAgaWF0OiBudW1iZXI7XG5cbiAgLy8gVGhlIHRva2VuIGV4cGlyeSB0aW1lLCBub3JtYWxseSAnaWF0JyArIDM2MDBcbiAgZXhwOiBudW1iZXI7XG5cbiAgLy8gVGhlIHVzZXIncyB1bmlxdWUgSUQuIE11c3QgYmUgZXF1YWwgdG8gJ3N1YidcbiAgdXNlcl9pZDogc3RyaW5nO1xuXG4gIC8vIFRoZSB0aW1lIHRoZSB1c2VyIGF1dGhlbnRpY2F0ZWQsIG5vcm1hbGx5ICdpYXQnXG4gIGF1dGhfdGltZTogbnVtYmVyO1xuXG4gIC8vIFRoZSBzaWduIGluIHByb3ZpZGVyLCBvbmx5IHNldCB3aGVuIHRoZSBwcm92aWRlciBpcyAnYW5vbnltb3VzJ1xuICBwcm92aWRlcl9pZD86ICdhbm9ueW1vdXMnO1xuXG4gIC8vIFRoZSB1c2VyJ3MgcHJpbWFyeSBlbWFpbFxuICBlbWFpbD86IHN0cmluZztcblxuICAvLyBUaGUgdXNlcidzIGVtYWlsIHZlcmlmaWNhdGlvbiBzdGF0dXNcbiAgZW1haWxfdmVyaWZpZWQ/OiBib29sZWFuO1xuXG4gIC8vIFRoZSB1c2VyJ3MgcHJpbWFyeSBwaG9uZSBudW1iZXJcbiAgcGhvbmVfbnVtYmVyPzogc3RyaW5nO1xuXG4gIC8vIFRoZSB1c2VyJ3MgZGlzcGxheSBuYW1lXG4gIG5hbWU/OiBzdHJpbmc7XG5cbiAgLy8gVGhlIHVzZXIncyBwcm9maWxlIHBob3RvIFVSTFxuICBwaWN0dXJlPzogc3RyaW5nO1xuXG4gIC8vIEluZm9ybWF0aW9uIG9uIGFsbCBpZGVudGl0aWVzIGxpbmtlZCB0byB0aGlzIHVzZXJcbiAgZmlyZWJhc2U6IHtcbiAgICAvLyBUaGUgcHJpbWFyeSBzaWduLWluIHByb3ZpZGVyXG4gICAgc2lnbl9pbl9wcm92aWRlcjogRmlyZWJhc2VTaWduSW5Qcm92aWRlcjtcblxuICAgIC8vIEEgbWFwIG9mIHByb3ZpZGVycyB0byB0aGUgdXNlcidzIGxpc3Qgb2YgdW5pcXVlIGlkZW50aWZpZXJzIGZyb21cbiAgICAvLyBlYWNoIHByb3ZpZGVyXG4gICAgaWRlbnRpdGllcz86IHsgW3Byb3ZpZGVyIGluIEZpcmViYXNlU2lnbkluUHJvdmlkZXJdPzogc3RyaW5nW10gfTtcbiAgfTtcblxuICAvLyBDdXN0b20gY2xhaW1zIHNldCBieSB0aGUgZGV2ZWxvcGVyXG4gIFtjbGFpbTogc3RyaW5nXTogdW5rbm93bjtcblxuICB1aWQ/OiBuZXZlcjsgLy8gVHJ5IHRvIGNhdGNoIGEgY29tbW9uIG1pc3Rha2Ugb2YgXCJ1aWRcIiAoc2hvdWxkIGJlIFwic3ViXCIgaW5zdGVhZCkuXG59XG5cbmV4cG9ydCB0eXBlIEVtdWxhdG9yTW9ja1Rva2VuT3B0aW9ucyA9ICh7IHVzZXJfaWQ6IHN0cmluZyB9IHwgeyBzdWI6IHN0cmluZyB9KSAmXG4gIFBhcnRpYWw8RmlyZWJhc2VJZFRva2VuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tVc2VyVG9rZW4oXG4gIHRva2VuOiBFbXVsYXRvck1vY2tUb2tlbk9wdGlvbnMsXG4gIHByb2plY3RJZD86IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgaWYgKHRva2VuLnVpZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdUaGUgXCJ1aWRcIiBmaWVsZCBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGJ5IG1vY2tVc2VyVG9rZW4uIFBsZWFzZSB1c2UgXCJzdWJcIiBpbnN0ZWFkIGZvciBGaXJlYmFzZSBBdXRoIFVzZXIgSUQuJ1xuICAgICk7XG4gIH1cbiAgLy8gVW5zZWN1cmVkIEpXVHMgdXNlIFwibm9uZVwiIGFzIHRoZSBhbGdvcml0aG0uXG4gIGNvbnN0IGhlYWRlciA9IHtcbiAgICBhbGc6ICdub25lJyxcbiAgICB0eXBlOiAnSldUJ1xuICB9O1xuXG4gIGNvbnN0IHByb2plY3QgPSBwcm9qZWN0SWQgfHwgJ2RlbW8tcHJvamVjdCc7XG4gIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xuICBjb25zdCBzdWIgPSB0b2tlbi5zdWIgfHwgdG9rZW4udXNlcl9pZDtcbiAgaWYgKCFzdWIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2NrVXNlclRva2VuIG11c3QgY29udGFpbiAnc3ViJyBvciAndXNlcl9pZCcgZmllbGQhXCIpO1xuICB9XG5cbiAgY29uc3QgcGF5bG9hZDogRmlyZWJhc2VJZFRva2VuID0ge1xuICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xuICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCxcbiAgICBhdWQ6IHByb2plY3QsXG4gICAgaWF0LFxuICAgIGV4cDogaWF0ICsgMzYwMCxcbiAgICBhdXRoX3RpbWU6IGlhdCxcbiAgICBzdWIsXG4gICAgdXNlcl9pZDogc3ViLFxuICAgIGZpcmViYXNlOiB7XG4gICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcbiAgICAgIGlkZW50aXRpZXM6IHt9XG4gICAgfSxcblxuICAgIC8vIE92ZXJyaWRlIHdpdGggdXNlciBvcHRpb25zXG4gICAgLi4udG9rZW5cbiAgfTtcblxuICAvLyBVbnNlY3VyZWQgSldUcyB1c2UgdGhlIGVtcHR5IHN0cmluZyBhcyBhIHNpZ25hdHVyZS5cbiAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XG4gIHJldHVybiBbXG4gICAgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoSlNPTi5zdHJpbmdpZnkoaGVhZGVyKSksXG4gICAgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpLFxuICAgIHNpZ25hdHVyZVxuICBdLmpvaW4oJy4nKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldERlZmF1bHRzIH0gZnJvbSAnLi9kZWZhdWx0cyc7XG5cbi8qKlxuICogUmV0dXJucyBuYXZpZ2F0b3IudXNlckFnZW50IHN0cmluZyBvciAnJyBpZiBpdCdzIG5vdCBkZWZpbmVkLlxuICogQHJldHVybiB1c2VyIGFnZW50IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VUEoKTogc3RyaW5nIHtcbiAgaWYgKFxuICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnXG4gICkge1xuICAgIHJldHVybiBuYXZpZ2F0b3JbJ3VzZXJBZ2VudCddO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vKipcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cbiAqXG4gKiBEZWxpYmVyYXRlbHkgZG9lcyBub3QgcmVseSBvbiBjaGVja2luZyBgZmlsZTovL2AgVVJMcyAoYXMgdGhpcyBmYWlscyBQaG9uZUdhcFxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxuICogd2FpdCBmb3IgYSBjYWxsYmFjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTW9iaWxlQ29yZG92YSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcbiAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cbiAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxuICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZWN0IE5vZGUuanMuXG4gKlxuICogQHJldHVybiB0cnVlIGlmIE5vZGUuanMgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQgb3Igc3BlY2lmaWVkLlxuICovXG4vLyBOb2RlIGRldGVjdGlvbiBsb2dpYyBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vaWxpYWthbi9kZXRlY3Qtbm9kZS9cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUoKTogYm9vbGVhbiB7XG4gIGNvbnN0IGZvcmNlRW52aXJvbm1lbnQgPSBnZXREZWZhdWx0cygpPy5mb3JjZUVudmlyb25tZW50O1xuICBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ25vZGUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ2Jyb3dzZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gKFxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERldGVjdCBCcm93c2VyIEVudmlyb25tZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXIoKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmO1xufVxuXG4vKipcbiAqIERldGVjdCBicm93c2VyIGV4dGVuc2lvbnMgKENocm9tZSBhbmQgRmlyZWZveCBhdCBsZWFzdCkuXG4gKi9cbmludGVyZmFjZSBCcm93c2VyUnVudGltZSB7XG4gIGlkPzogdW5rbm93bjtcbn1cbmRlY2xhcmUgY29uc3QgY2hyb21lOiB7IHJ1bnRpbWU/OiBCcm93c2VyUnVudGltZSB9O1xuZGVjbGFyZSBjb25zdCBicm93c2VyOiB7IHJ1bnRpbWU/OiBCcm93c2VyUnVudGltZSB9O1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlckV4dGVuc2lvbigpOiBib29sZWFuIHtcbiAgY29uc3QgcnVudGltZSA9XG4gICAgdHlwZW9mIGNocm9tZSA9PT0gJ29iamVjdCdcbiAgICAgID8gY2hyb21lLnJ1bnRpbWVcbiAgICAgIDogdHlwZW9mIGJyb3dzZXIgPT09ICdvYmplY3QnXG4gICAgICA/IGJyb3dzZXIucnVudGltZVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIHJldHVybiB0eXBlb2YgcnVudGltZSA9PT0gJ29iamVjdCcgJiYgcnVudGltZS5pZCAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXG4gKlxuICogQHJldHVybiB0cnVlIGlmIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3JbJ3Byb2R1Y3QnXSA9PT0gJ1JlYWN0TmF0aXZlJ1xuICApO1xufVxuXG4vKiogRGV0ZWN0cyBFbGVjdHJvbiBhcHBzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlY3Ryb24oKTogYm9vbGVhbiB7XG4gIHJldHVybiBnZXRVQSgpLmluZGV4T2YoJ0VsZWN0cm9uLycpID49IDA7XG59XG5cbi8qKiBEZXRlY3RzIEludGVybmV0IEV4cGxvcmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSUUoKTogYm9vbGVhbiB7XG4gIGNvbnN0IHVhID0gZ2V0VUEoKTtcbiAgcmV0dXJuIHVhLmluZGV4T2YoJ01TSUUgJykgPj0gMCB8fCB1YS5pbmRleE9mKCdUcmlkZW50LycpID49IDA7XG59XG5cbi8qKiBEZXRlY3RzIFVuaXZlcnNhbCBXaW5kb3dzIFBsYXRmb3JtIGFwcHMuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVV1AoKTogYm9vbGVhbiB7XG4gIHJldHVybiBnZXRVQSgpLmluZGV4T2YoJ01TQXBwSG9zdC8nKSA+PSAwO1xufVxuXG4vKipcbiAqIERldGVjdCB3aGV0aGVyIHRoZSBjdXJyZW50IFNESyBidWlsZCBpcyB0aGUgTm9kZSB2ZXJzaW9uLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpdCdzIHRoZSBOb2RlIFNESyBidWlsZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVNkaygpOiBib29sZWFuIHtcbiAgcmV0dXJuIENPTlNUQU5UUy5OT0RFX0NMSUVOVCA9PT0gdHJ1ZSB8fCBDT05TVEFOVFMuTk9ERV9BRE1JTiA9PT0gdHJ1ZTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgcnVubmluZyBpbiBTYWZhcmkuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTYWZhcmkoKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgIWlzTm9kZSgpICYmXG4gICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnU2FmYXJpJykgJiZcbiAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJylcbiAgKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxuICogQHJldHVybiB0cnVlIGlmIGluZGV4ZWREQiBpcyBzdXBwb3J0ZWQgYnkgY3VycmVudCBicm93c2VyL3NlcnZpY2Ugd29ya2VyIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5kZXhlZERCQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgaW5kZXhlZERCID09PSAnb2JqZWN0JztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHZhbGlkYXRlcyBicm93c2VyL3N3IGNvbnRleHQgZm9yIGluZGV4ZWREQiBieSBvcGVuaW5nIGEgZHVtbXkgaW5kZXhlZERCIGRhdGFiYXNlIGFuZCByZWplY3RcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxuICpcbiAqIEB0aHJvd3MgZXhjZXB0aW9uIGlmIGN1cnJlbnQgYnJvd3Nlci9zdyBjb250ZXh0IGNhbid0IHJ1biBpZGIub3BlbiAoZXg6IFNhZmFyaSBpZnJhbWUsIEZpcmVmb3hcbiAqIHByaXZhdGUgYnJvd3NpbmcpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgcHJlRXhpc3Q6IGJvb2xlYW4gPSB0cnVlO1xuICAgICAgY29uc3QgREJfQ0hFQ0tfTkFNRSA9XG4gICAgICAgICd2YWxpZGF0ZS1icm93c2VyLWNvbnRleHQtZm9yLWluZGV4ZWRkYi1hbmFseXRpY3MtbW9kdWxlJztcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBzZWxmLmluZGV4ZWREQi5vcGVuKERCX0NIRUNLX05BTUUpO1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlcXVlc3QucmVzdWx0LmNsb3NlKCk7XG4gICAgICAgIC8vIGRlbGV0ZSBkYXRhYmFzZSBvbmx5IHdoZW4gaXQgZG9lc24ndCBwcmUtZXhpc3RcbiAgICAgICAgaWYgKCFwcmVFeGlzdCkge1xuICAgICAgICAgIHNlbGYuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUUpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9O1xuICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XG4gICAgICAgIHByZUV4aXN0ID0gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yPy5tZXNzYWdlIHx8ICcnKTtcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKlxuICogVGhpcyBtZXRob2QgY2hlY2tzIHdoZXRoZXIgY29va2llIGlzIGVuYWJsZWQgd2l0aGluIGN1cnJlbnQgYnJvd3NlclxuICogQHJldHVybiB0cnVlIGlmIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFyZUNvb2tpZXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcgfHwgIW5hdmlnYXRvci5jb29raWVFbmFibGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGZpbGVvdmVydmlldyBTdGFuZGFyZGl6ZWQgRmlyZWJhc2UgRXJyb3IuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogICAvLyBUeXBlc2NyaXB0IHN0cmluZyBsaXRlcmFscyBmb3IgdHlwZS1zYWZlIGNvZGVzXG4gKiAgIHR5cGUgRXJyID1cbiAqICAgICAndW5rbm93bicgfFxuICogICAgICdvYmplY3Qtbm90LWZvdW5kJ1xuICogICAgIDtcbiAqXG4gKiAgIC8vIENsb3N1cmUgZW51bSBmb3IgdHlwZS1zYWZlIGVycm9yIGNvZGVzXG4gKiAgIC8vIGF0LWVudW0ge3N0cmluZ31cbiAqICAgdmFyIEVyciA9IHtcbiAqICAgICBVTktOT1dOOiAndW5rbm93bicsXG4gKiAgICAgT0JKRUNUX05PVF9GT1VORDogJ29iamVjdC1ub3QtZm91bmQnLFxuICogICB9XG4gKlxuICogICBsZXQgZXJyb3JzOiBNYXA8RXJyLCBzdHJpbmc+ID0ge1xuICogICAgICdnZW5lcmljLWVycm9yJzogXCJVbmtub3duIGVycm9yXCIsXG4gKiAgICAgJ2ZpbGUtbm90LWZvdW5kJzogXCJDb3VsZCBub3QgZmluZCBmaWxlOiB7JGZpbGV9XCIsXG4gKiAgIH07XG4gKlxuICogICAvLyBUeXBlLXNhZmUgZnVuY3Rpb24gLSBtdXN0IHBhc3MgYSB2YWxpZCBlcnJvciBjb2RlIGFzIHBhcmFtLlxuICogICBsZXQgZXJyb3IgPSBuZXcgRXJyb3JGYWN0b3J5PEVycj4oJ3NlcnZpY2UnLCAnU2VydmljZScsIGVycm9ycyk7XG4gKlxuICogICAuLi5cbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5HRU5FUklDKTtcbiAqICAgLi4uXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuRklMRV9OT1RfRk9VTkQsIHsnZmlsZSc6IGZpbGVOYW1lfSk7XG4gKiAgIC4uLlxuICogICAvLyBTZXJ2aWNlOiBDb3VsZCBub3QgZmlsZSBmaWxlOiBmb28udHh0IChzZXJ2aWNlL2ZpbGUtbm90LWZvdW5kKS5cbiAqXG4gKiAgIGNhdGNoIChlKSB7XG4gKiAgICAgYXNzZXJ0KGUubWVzc2FnZSA9PT0gXCJDb3VsZCBub3QgZmluZCBmaWxlOiBmb28udHh0LlwiKTtcbiAqICAgICBpZiAoKGUgYXMgRmlyZWJhc2VFcnJvcik/LmNvZGUgPT09ICdzZXJ2aWNlL2ZpbGUtbm90LWZvdW5kJykge1xuICogICAgICAgY29uc29sZS5sb2coXCJDb3VsZCBub3QgcmVhZCBmaWxlOiBcIiArIGVbJ2ZpbGUnXSk7XG4gKiAgICAgfVxuICogICB9XG4gKi9cblxuZXhwb3J0IHR5cGUgRXJyb3JNYXA8RXJyb3JDb2RlIGV4dGVuZHMgc3RyaW5nPiA9IHtcbiAgcmVhZG9ubHkgW0sgaW4gRXJyb3JDb2RlXTogc3RyaW5nO1xufTtcblxuY29uc3QgRVJST1JfTkFNRSA9ICdGaXJlYmFzZUVycm9yJztcblxuZXhwb3J0IGludGVyZmFjZSBTdHJpbmdMaWtlIHtcbiAgdG9TdHJpbmcoKTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yRGF0YSB7XG4gIFtrZXk6IHN0cmluZ106IHVua25vd247XG59XG5cbi8vIEJhc2VkIG9uIGNvZGUgZnJvbTpcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0N1c3RvbV9FcnJvcl9UeXBlc1xuZXhwb3J0IGNsYXNzIEZpcmViYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKiBUaGUgY3VzdG9tIG5hbWUgZm9yIGFsbCBGaXJlYmFzZUVycm9ycy4gKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gRVJST1JfTkFNRTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIGVycm9yIGNvZGUgZm9yIHRoaXMgZXJyb3IuICovXG4gICAgcmVhZG9ubHkgY29kZTogc3RyaW5nLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAvKiogQ3VzdG9tIGRhdGEgZm9yIHRoaXMgZXJyb3IuICovXG4gICAgcHVibGljIGN1c3RvbURhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIC8vIEZpeCBGb3IgRVM1XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xuXG4gICAgLy8gTWFpbnRhaW5zIHByb3BlciBzdGFjayB0cmFjZSBmb3Igd2hlcmUgb3VyIGVycm9yIHdhcyB0aHJvd24uXG4gICAgLy8gT25seSBhdmFpbGFibGUgb24gVjguXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckZhY3Rvcnk8XG4gIEVycm9yQ29kZSBleHRlbmRzIHN0cmluZyxcbiAgRXJyb3JQYXJhbXMgZXh0ZW5kcyB7IHJlYWRvbmx5IFtLIGluIEVycm9yQ29kZV0/OiBFcnJvckRhdGEgfSA9IHt9XG4+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlTmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXJyb3JzOiBFcnJvck1hcDxFcnJvckNvZGU+XG4gICkge31cblxuICBjcmVhdGU8SyBleHRlbmRzIEVycm9yQ29kZT4oXG4gICAgY29kZTogSyxcbiAgICAuLi5kYXRhOiBLIGV4dGVuZHMga2V5b2YgRXJyb3JQYXJhbXMgPyBbRXJyb3JQYXJhbXNbS11dIDogW11cbiAgKTogRmlyZWJhc2VFcnJvciB7XG4gICAgY29uc3QgY3VzdG9tRGF0YSA9IChkYXRhWzBdIGFzIEVycm9yRGF0YSkgfHwge307XG4gICAgY29uc3QgZnVsbENvZGUgPSBgJHt0aGlzLnNlcnZpY2V9LyR7Y29kZX1gO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5lcnJvcnNbY29kZV07XG5cbiAgICBjb25zdCBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcbiAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXG4gICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBgJHt0aGlzLnNlcnZpY2VOYW1lfTogJHttZXNzYWdlfSAoJHtmdWxsQ29kZX0pLmA7XG5cbiAgICBjb25zdCBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSwgY3VzdG9tRGF0YSk7XG5cbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRlbXBsYXRlKHRlbXBsYXRlOiBzdHJpbmcsIGRhdGE6IEVycm9yRGF0YSk6IHN0cmluZyB7XG4gIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIChfLCBrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBgPCR7a2V5fT8+YDtcbiAgfSk7XG59XG5cbmNvbnN0IFBBVFRFUk4gPSAvXFx7XFwkKFtefV0rKX0vZztcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQSBzdHJpbmcgY29udGFpbmluZyBKU09OLlxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqc29uRXZhbChzdHI6IHN0cmluZyk6IHVua25vd24ge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gZGF0YSBKYXZhc2NyaXB0IG9iamVjdCB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEpTT04gY29udGVudHMgb2YgdGhlIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeShkYXRhOiB1bmtub3duKTogc3RyaW5nIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgYmFzZTY0RGVjb2RlIH0gZnJvbSAnLi9jcnlwdCc7XG5pbXBvcnQgeyBqc29uRXZhbCB9IGZyb20gJy4vanNvbic7XG5cbmludGVyZmFjZSBDbGFpbXMge1xuICBba2V5OiBzdHJpbmddOiB7fTtcbn1cblxuaW50ZXJmYWNlIERlY29kZWRUb2tlbiB7XG4gIGhlYWRlcjogb2JqZWN0O1xuICBjbGFpbXM6IENsYWltcztcbiAgZGF0YTogb2JqZWN0O1xuICBzaWduYXR1cmU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cbiAqXG4gKiBOb3RlczpcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW46IHN0cmluZyk6IERlY29kZWRUb2tlbiB7XG4gIGxldCBoZWFkZXIgPSB7fSxcbiAgICBjbGFpbXM6IENsYWltcyA9IHt9LFxuICAgIGRhdGEgPSB7fSxcbiAgICBzaWduYXR1cmUgPSAnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgICBoZWFkZXIgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMF0pIHx8ICcnKSBhcyBvYmplY3Q7XG4gICAgY2xhaW1zID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzFdKSB8fCAnJykgYXMgQ2xhaW1zO1xuICAgIHNpZ25hdHVyZSA9IHBhcnRzWzJdO1xuICAgIGRhdGEgPSBjbGFpbXNbJ2QnXSB8fCB7fTtcbiAgICBkZWxldGUgY2xhaW1zWydkJ107XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXIsXG4gICAgY2xhaW1zLFxuICAgIGRhdGEsXG4gICAgc2lnbmF0dXJlXG4gIH07XG59O1xuXG5pbnRlcmZhY2UgRGVjb2RlZFRva2VuIHtcbiAgaGVhZGVyOiBvYmplY3Q7XG4gIGNsYWltczogQ2xhaW1zO1xuICBkYXRhOiBvYmplY3Q7XG4gIHNpZ25hdHVyZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgdGltZS1iYXNlZCBjbGFpbXMuIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlXG4gKiB0b2tlbiBpcyB3aXRoaW4gdGhlIHRpbWUgd2luZG93IGF1dGhvcml6ZWQgYnkgdGhlICduYmYnIChub3QtYmVmb3JlKSBhbmQgJ2lhdCcgKGlzc3VlZC1hdCkgY2xhaW1zLlxuICpcbiAqIE5vdGVzOlxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxuICovXG5leHBvcnQgY29uc3QgaXNWYWxpZFRpbWVzdGFtcCA9IGZ1bmN0aW9uICh0b2tlbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGNsYWltczogQ2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XG4gIGNvbnN0IG5vdzogbnVtYmVyID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xuICBsZXQgdmFsaWRTaW5jZTogbnVtYmVyID0gMCxcbiAgICB2YWxpZFVudGlsOiBudW1iZXIgPSAwO1xuXG4gIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ25iZicpKSB7XG4gICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWyduYmYnXSBhcyBudW1iZXI7XG4gICAgfSBlbHNlIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XG4gICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWydpYXQnXSBhcyBudW1iZXI7XG4gICAgfVxuXG4gICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHtcbiAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddIGFzIG51bWJlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcbiAgICAgIHZhbGlkVW50aWwgPSB2YWxpZFNpbmNlICsgODY0MDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAhIW5vdyAmJlxuICAgICEhdmFsaWRTaW5jZSAmJlxuICAgICEhdmFsaWRVbnRpbCAmJlxuICAgIG5vdyA+PSB2YWxpZFNpbmNlICYmXG4gICAgbm93IDw9IHZhbGlkVW50aWxcbiAgKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCByZXR1cm5zIGl0cyBpc3N1ZWQgYXQgdGltZSBpZiB2YWxpZCwgbnVsbCBvdGhlcndpc2UuXG4gKlxuICogTm90ZXM6XG4gKiAtIE1heSByZXR1cm4gbnVsbCBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW46IHN0cmluZyk6IG51bWJlciB8IG51bGwge1xuICBjb25zdCBjbGFpbXM6IENsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xuICBpZiAodHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKSkge1xuICAgIHJldHVybiBjbGFpbXNbJ2lhdCddIGFzIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyBmb3JtYXQuIEV4cGVjdHMgYSB2YWxpZCBpc3N1ZWQtYXQgdGltZS5cbiAqXG4gKiBOb3RlczpcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW46IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBkZWNvZGVkID0gZGVjb2RlKHRva2VuKSxcbiAgICBjbGFpbXMgPSBkZWNvZGVkLmNsYWltcztcblxuICByZXR1cm4gISFjbGFpbXMgJiYgdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKTtcbn07XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gcGVlciBpbnRvIGFuIGF1dGggdG9rZW4gYW5kIGRldGVybWluZSBpZiBpdCdzIGFuIGFkbWluIGF1dGggdG9rZW4gYnkgbG9va2luZyBhdCB0aGUgY2xhaW1zIHBvcnRpb24uXG4gKlxuICogTm90ZXM6XG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0FkbWluID0gZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgY2xhaW1zOiBDbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcbiAgcmV0dXJuIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltc1snYWRtaW4nXSA9PT0gdHJ1ZTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnM8VCBleHRlbmRzIG9iamVjdD4ob2JqOiBULCBrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVHZXQ8VCBleHRlbmRzIG9iamVjdCwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICBvYmo6IFQsXG4gIGtleTogS1xuKTogVFtLXSB8IHVuZGVmaW5lZCB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkob2JqOiBvYmplY3QpOiBvYmogaXMge30ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcDxLIGV4dGVuZHMgc3RyaW5nLCBWLCBVPihcbiAgb2JqOiB7IFtrZXkgaW4gS106IFYgfSxcbiAgZm46ICh2YWx1ZTogViwga2V5OiBLLCBvYmo6IHsgW2tleSBpbiBLXTogViB9KSA9PiBVLFxuICBjb250ZXh0T2JqPzogdW5rbm93blxuKTogeyBba2V5IGluIEtdOiBVIH0ge1xuICBjb25zdCByZXM6IFBhcnRpYWw8eyBba2V5IGluIEtdOiBVIH0+ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGZuLmNhbGwoY29udGV4dE9iaiwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcyBhcyB7IFtrZXkgaW4gS106IFUgfTtcbn1cblxuLyoqXG4gKiBEZWVwIGVxdWFsIHR3byBvYmplY3RzLiBTdXBwb3J0IEFycmF5cyBhbmQgT2JqZWN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChhOiBvYmplY3QsIGI6IG9iamVjdCk6IGJvb2xlYW4ge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgZm9yIChjb25zdCBrIG9mIGFLZXlzKSB7XG4gICAgaWYgKCFiS2V5cy5pbmNsdWRlcyhrKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGFQcm9wID0gKGEgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tdO1xuICAgIGNvbnN0IGJQcm9wID0gKGIgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tdO1xuICAgIGlmIChpc09iamVjdChhUHJvcCkgJiYgaXNPYmplY3QoYlByb3ApKSB7XG4gICAgICBpZiAoIWRlZXBFcXVhbChhUHJvcCwgYlByb3ApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFQcm9wICE9PSBiUHJvcCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgayBvZiBiS2V5cykge1xuICAgIGlmICghYUtleXMuaW5jbHVkZXMoaykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nOiB1bmtub3duKTogdGhpbmcgaXMgb2JqZWN0IHtcbiAgcmV0dXJuIHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJy4vZGVmZXJyZWQnO1xuXG4vKipcbiAqIFJlamVjdHMgaWYgdGhlIGdpdmVuIHByb21pc2UgZG9lc24ndCByZXNvbHZlIGluIHRpbWVJbk1TIG1pbGxpc2Vjb25kcy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzZVdpdGhUaW1lb3V0PFQ+KFxuICBwcm9taXNlOiBQcm9taXNlPFQ+LFxuICB0aW1lSW5NUyA9IDIwMDBcbik6IFByb21pc2U8VD4ge1xuICBjb25zdCBkZWZlcnJlZFByb21pc2UgPSBuZXcgRGVmZXJyZWQ8VD4oKTtcbiAgc2V0VGltZW91dCgoKSA9PiBkZWZlcnJlZFByb21pc2UucmVqZWN0KCd0aW1lb3V0IScpLCB0aW1lSW5NUyk7XG4gIHByb21pc2UudGhlbihkZWZlcnJlZFByb21pc2UucmVzb2x2ZSwgZGVmZXJyZWRQcm9taXNlLnJlamVjdCk7XG4gIHJldHVybiBkZWZlcnJlZFByb21pc2UucHJvbWlzZTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIHF1ZXJ5c3RyaW5nLWZvcm1hdHRlZCBzdHJpbmcgKGUuZy4gJmFyZz12YWwmYXJnMj12YWwyKSBmcm9tIGFcbiAqIHBhcmFtcyBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zOiB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlcjtcbn0pOiBzdHJpbmcge1xuICBjb25zdCBwYXJhbXMgPSBbXTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocXVlcnlzdHJpbmdQYXJhbXMpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKGFycmF5VmFsID0+IHtcbiAgICAgICAgcGFyYW1zLnB1c2goXG4gICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJyYXlWYWwpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcmFtcy5sZW5ndGggPyAnJicgKyBwYXJhbXMuam9pbignJicpIDogJyc7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3RcbiAqIChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlzdHJpbmdEZWNvZGUocXVlcnlzdHJpbmc6IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICBjb25zdCBvYmo6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgY29uc3QgdG9rZW5zID0gcXVlcnlzdHJpbmcucmVwbGFjZSgvXlxcPy8sICcnKS5zcGxpdCgnJicpO1xuXG4gIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHRva2VuLnNwbGl0KCc9Jyk7XG4gICAgICBvYmpbZGVjb2RlVVJJQ29tcG9uZW50KGtleSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEV4dHJhY3QgdGhlIHF1ZXJ5IHN0cmluZyBwYXJ0IG9mIGEgVVJMLCBpbmNsdWRpbmcgdGhlIGxlYWRpbmcgcXVlc3Rpb24gbWFyayAoaWYgcHJlc2VudCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UXVlcnlzdHJpbmcodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBxdWVyeVN0YXJ0ID0gdXJsLmluZGV4T2YoJz8nKTtcbiAgaWYgKCFxdWVyeVN0YXJ0KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGZyYWdtZW50U3RhcnQgPSB1cmwuaW5kZXhPZignIycsIHF1ZXJ5U3RhcnQpO1xuICByZXR1cm4gdXJsLnN1YnN0cmluZyhcbiAgICBxdWVyeVN0YXJ0LFxuICAgIGZyYWdtZW50U3RhcnQgPiAwID8gZnJhZ21lbnRTdGFydCA6IHVuZGVmaW5lZFxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cbiAqIFZhcmlhYmxlIG5hbWVzIGZvbGxvdyB0aGUgbm90YXRpb24gaW4gRklQUyBQVUIgMTgwLTM6XG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cbiAqXG4gKiBVc2FnZTpcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xuICogICBzaGExLnVwZGF0ZShieXRlcyk7XG4gKiAgIHZhciBoYXNoID0gc2hhMS5kaWdlc3QoKTtcbiAqXG4gKiBQZXJmb3JtYW5jZTpcbiAqICAgQ2hyb21lIDIzOiAgIH40MDAgTWJpdC9zXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xuICpcbiAqL1xuXG4vKipcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBUaGUgcHJvcGVydGllcyBkZWNsYXJlZCBoZXJlIGFyZSBkaXNjdXNzZWQgaW4gdGhlIGFib3ZlIGFsZ29yaXRobSBkb2N1bWVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTaGExIHtcbiAgLyoqXG4gICAqIEhvbGRzIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgYWNjdW11bGF0ZWQgdmFyaWFibGVzIGEtZSBpbiB0aGUgY29tcHJlc3NfXG4gICAqIGZ1bmN0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjaGFpbl86IG51bWJlcltdID0gW107XG5cbiAgLyoqXG4gICAqIEEgYnVmZmVyIGhvbGRpbmcgdGhlIHBhcnRpYWxseSBjb21wdXRlZCBoYXNoIHJlc3VsdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgYnVmXzogbnVtYmVyW10gPSBbXTtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXG4gICAqIGFzIHRoZSBtZXNzYWdlIHNjaGVkdWxlIGluIHRoZSBkb2NzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBXXzogbnVtYmVyW10gPSBbXTtcblxuICAvKipcbiAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgcGFkXzogbnVtYmVyW10gPSBbXTtcblxuICAvKipcbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHByaXZhdGUgaW5idWZfOiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgcHJpdmF0ZSB0b3RhbF86IG51bWJlciA9IDA7XG5cbiAgYmxvY2tTaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ibG9ja1NpemUgPSA1MTIgLyA4O1xuXG4gICAgdGhpcy5wYWRfWzBdID0gMTI4O1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5ibG9ja1NpemU7ICsraSkge1xuICAgICAgdGhpcy5wYWRfW2ldID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoYWluX1swXSA9IDB4Njc0NTIzMDE7XG4gICAgdGhpcy5jaGFpbl9bMV0gPSAweGVmY2RhYjg5O1xuICAgIHRoaXMuY2hhaW5fWzJdID0gMHg5OGJhZGNmZTtcbiAgICB0aGlzLmNoYWluX1szXSA9IDB4MTAzMjU0NzY7XG4gICAgdGhpcy5jaGFpbl9bNF0gPSAweGMzZDJlMWYwO1xuXG4gICAgdGhpcy5pbmJ1Zl8gPSAwO1xuICAgIHRoaXMudG90YWxfID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBjb21wcmVzcyBoZWxwZXIgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBidWYgQmxvY2sgdG8gY29tcHJlc3MuXG4gICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29tcHJlc3NfKGJ1ZjogbnVtYmVyW10gfCBVaW50OEFycmF5IHwgc3RyaW5nLCBvZmZzZXQ/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBjb25zdCBXID0gdGhpcy5XXztcblxuICAgIC8vIGdldCAxNiBiaWcgZW5kaWFuIHdvcmRzXG4gICAgaWYgKHR5cGVvZiBidWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogW2J1ZyA4MTQwMTIyXSBSZWNlbnQgdmVyc2lvbnMgb2YgU2FmYXJpIGZvciBNYWMgT1MgYW5kIGlPU1xuICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxuICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxuICAgICAgICAvLyBjb3JyZWN0bmVzcyBhbmQgd2hpY2ggaXMgYWZmZWN0ZWQgYnkgdGhpcyBidWcsIHNvIEkndmUgcmVtb3ZlZCBhbGwgdXNlc1xuICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XG4gICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcbiAgICAgICAgLy8gKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDkwMzYpIGhhcyBiZWVuIGZpeGVkIGFuZFxuICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXG4gICAgICAgIFdbaV0gPVxuICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XG4gICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDEpIDw8IDE2KSB8XG4gICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDgpIHxcbiAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBXW2ldID1cbiAgICAgICAgICAoYnVmW29mZnNldF0gPDwgMjQpIHxcbiAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgICAgICAgKGJ1ZltvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICAgICAgYnVmW29mZnNldCArIDNdO1xuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcbiAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcbiAgICAgIFdbaV0gPSAoKHQgPDwgMSkgfCAodCA+Pj4gMzEpKSAmIDB4ZmZmZmZmZmY7XG4gICAgfVxuXG4gICAgbGV0IGEgPSB0aGlzLmNoYWluX1swXTtcbiAgICBsZXQgYiA9IHRoaXMuY2hhaW5fWzFdO1xuICAgIGxldCBjID0gdGhpcy5jaGFpbl9bMl07XG4gICAgbGV0IGQgPSB0aGlzLmNoYWluX1szXTtcbiAgICBsZXQgZSA9IHRoaXMuY2hhaW5fWzRdO1xuICAgIGxldCBmLCBrO1xuXG4gICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODA7IGkrKykge1xuICAgICAgaWYgKGkgPCA0MCkge1xuICAgICAgICBpZiAoaSA8IDIwKSB7XG4gICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xuICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XG4gICAgICAgICAgayA9IDB4NmVkOWViYTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpIDwgNjApIHtcbiAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XG4gICAgICAgICAgayA9IDB4OGYxYmJjZGM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZiA9IGIgXiBjIF4gZDtcbiAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSB0O1xuICAgIH1cblxuICAgIHRoaXMuY2hhaW5fWzBdID0gKHRoaXMuY2hhaW5fWzBdICsgYSkgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgYikgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzJdID0gKHRoaXMuY2hhaW5fWzJdICsgYykgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzNdID0gKHRoaXMuY2hhaW5fWzNdICsgZCkgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzRdID0gKHRoaXMuY2hhaW5fWzRdICsgZSkgJiAweGZmZmZmZmZmO1xuICB9XG5cbiAgdXBkYXRlKGJ5dGVzPzogbnVtYmVyW10gfCBVaW50OEFycmF5IHwgc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBUT0RPKGpvaG5sZW56KTogdGlnaHRlbiB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGFuZCByZW1vdmUgdGhpcyBjaGVja1xuICAgIGlmIChieXRlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgbGVuZ3RoTWludXNCbG9jayA9IGxlbmd0aCAtIHRoaXMuYmxvY2tTaXplO1xuICAgIGxldCBuID0gMDtcbiAgICAvLyBVc2luZyBsb2NhbCBpbnN0ZWFkIG9mIG1lbWJlciB2YXJpYWJsZXMgZ2l2ZXMgfjUlIHNwZWVkdXAgb24gRmlyZWZveCAxNi5cbiAgICBjb25zdCBidWYgPSB0aGlzLmJ1Zl87XG4gICAgbGV0IGluYnVmID0gdGhpcy5pbmJ1Zl87XG5cbiAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxuICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBXaGVuIHdlIGhhdmUgbm8gZGF0YSBpbiB0aGUgYmxvY2sgdG8gdG9wIHVwLCB3ZSBjYW4gZGlyZWN0bHkgcHJvY2VzcyB0aGVcbiAgICAgIC8vIGlucHV0IGJ1ZmZlciAoYXNzdW1pbmcgaXQgY29udGFpbnMgc3VmZmljaWVudCBkYXRhKS4gVGhpcyBnaXZlcyB+MjUlXG4gICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XG4gICAgICAvLyB0aGUgZGF0YSBpcyBwcm92aWRlZCBpbiBsYXJnZSBjaHVua3MgKG9yIGluIG11bHRpcGxlcyBvZiA2NCBieXRlcykuXG4gICAgICBpZiAoaW5idWYgPT09IDApIHtcbiAgICAgICAgd2hpbGUgKG4gPD0gbGVuZ3RoTWludXNCbG9jaykge1xuICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ5dGVzLCBuKTtcbiAgICAgICAgICBuICs9IHRoaXMuYmxvY2tTaXplO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XG4gICAgICAgICAgKytpbmJ1ZjtcbiAgICAgICAgICArK247XG4gICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcbiAgICAgICAgICAgIGluYnVmID0gMDtcbiAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcbiAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XG4gICAgICAgICAgKytpbmJ1ZjtcbiAgICAgICAgICArK247XG4gICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcbiAgICAgICAgICAgIGluYnVmID0gMDtcbiAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaW5idWZfID0gaW5idWY7XG4gICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBkaWdlc3QoKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGRpZ2VzdDogbnVtYmVyW10gPSBbXTtcbiAgICBsZXQgdG90YWxCaXRzID0gdGhpcy50b3RhbF8gKiA4O1xuXG4gICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxuICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XG4gICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIDU2IC0gdGhpcy5pbmJ1Zl8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgIyBiaXRzLlxuICAgIGZvciAobGV0IGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xuICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xuICAgICAgdG90YWxCaXRzIC89IDI1NjsgLy8gRG9uJ3QgdXNlIGJpdC1zaGlmdGluZyBoZXJlIVxuICAgIH1cblxuICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XG5cbiAgICBsZXQgbiA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xuICAgICAgICArK247XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWdlc3Q7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgdHlwZSBOZXh0Rm48VD4gPSAodmFsdWU6IFQpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBFcnJvckZuID0gKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIENvbXBsZXRlRm4gPSAoKSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9ic2VydmVyPFQ+IHtcbiAgLy8gQ2FsbGVkIG9uY2UgZm9yIGVhY2ggdmFsdWUgaW4gYSBzdHJlYW0gb2YgdmFsdWVzLlxuICBuZXh0OiBOZXh0Rm48VD47XG5cbiAgLy8gQSBzdHJlYW0gdGVybWluYXRlcyBieSBhIHNpbmdsZSBjYWxsIHRvIEVJVEhFUiBlcnJvcigpIG9yIGNvbXBsZXRlKCkuXG4gIGVycm9yOiBFcnJvckZuO1xuXG4gIC8vIE5vIGV2ZW50cyB3aWxsIGJlIHNlbnQgdG8gbmV4dCgpIG9uY2UgY29tcGxldGUoKSBpcyBjYWxsZWQuXG4gIGNvbXBsZXRlOiBDb21wbGV0ZUZuO1xufVxuXG5leHBvcnQgdHlwZSBQYXJ0aWFsT2JzZXJ2ZXI8VD4gPSBQYXJ0aWFsPE9ic2VydmVyPFQ+PjtcblxuLy8gVE9ETzogU3VwcG9ydCBhbHNvIFVuc3Vic2NyaWJlLnVuc3Vic2NyaWJlP1xuZXhwb3J0IHR5cGUgVW5zdWJzY3JpYmUgPSAoKSA9PiB2b2lkO1xuXG4vKipcbiAqIFRoZSBTdWJzY3JpYmUgaW50ZXJmYWNlIGhhcyB0d28gZm9ybXMgLSBwYXNzaW5nIHRoZSBpbmxpbmUgZnVuY3Rpb25cbiAqIGNhbGxiYWNrcywgb3IgYSBvYmplY3QgaW50ZXJmYWNlIHdpdGggY2FsbGJhY2sgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpYmU8VD4ge1xuICAobmV4dD86IE5leHRGbjxUPiwgZXJyb3I/OiBFcnJvckZuLCBjb21wbGV0ZT86IENvbXBsZXRlRm4pOiBVbnN1YnNjcmliZTtcbiAgKG9ic2VydmVyOiBQYXJ0aWFsT2JzZXJ2ZXI8VD4pOiBVbnN1YnNjcmliZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcbiAgLy8gU3Vic2NyaWJlIG1ldGhvZFxuICBzdWJzY3JpYmU6IFN1YnNjcmliZTxUPjtcbn1cblxuZXhwb3J0IHR5cGUgRXhlY3V0b3I8VD4gPSAob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB2b2lkO1xuXG4vKipcbiAqIEhlbHBlciB0byBtYWtlIGEgU3Vic2NyaWJlIGZ1bmN0aW9uIChqdXN0IGxpa2UgUHJvbWlzZSBoZWxwcyBtYWtlIGFcbiAqIFRoZW5hYmxlKS5cbiAqXG4gKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcbiAqICAgICBhcyBhIHByb3h5LlxuICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaWJlPFQ+KFxuICBleGVjdXRvcjogRXhlY3V0b3I8VD4sXG4gIG9uTm9PYnNlcnZlcnM/OiBFeGVjdXRvcjxUPlxuKTogU3Vic2NyaWJlPFQ+IHtcbiAgY29uc3QgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eTxUPihleGVjdXRvciwgb25Ob09ic2VydmVycyk7XG4gIHJldHVybiBwcm94eS5zdWJzY3JpYmUuYmluZChwcm94eSk7XG59XG5cbi8qKlxuICogSW1wbGVtZW50IGZhbi1vdXQgZm9yIGFueSBudW1iZXIgb2YgT2JzZXJ2ZXJzIGF0dGFjaGVkIHZpYSBhIHN1YnNjcmliZVxuICogZnVuY3Rpb24uXG4gKi9cbmNsYXNzIE9ic2VydmVyUHJveHk8VD4gaW1wbGVtZW50cyBPYnNlcnZlcjxUPiB7XG4gIHByaXZhdGUgb2JzZXJ2ZXJzOiBBcnJheTxPYnNlcnZlcjxUPj4gfCB1bmRlZmluZWQgPSBbXTtcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZXM6IFVuc3Vic2NyaWJlW10gPSBbXTtcbiAgcHJpdmF0ZSBvbk5vT2JzZXJ2ZXJzOiBFeGVjdXRvcjxUPiB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBvYnNlcnZlckNvdW50ID0gMDtcbiAgLy8gTWljcm8tdGFzayBzY2hlZHVsaW5nIGJ5IGNhbGxpbmcgdGFzay50aGVuKCkuXG4gIHByaXZhdGUgdGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xuICBwcml2YXRlIGZpbmFsaXplZCA9IGZhbHNlO1xuICBwcml2YXRlIGZpbmFsRXJyb3I/OiBFcnJvcjtcblxuICAvKipcbiAgICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXG4gICAqICAgICBhcyBhIHByb3h5LlxuICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcjogRXhlY3V0b3I8VD4sIG9uTm9PYnNlcnZlcnM/OiBFeGVjdXRvcjxUPikge1xuICAgIHRoaXMub25Ob09ic2VydmVycyA9IG9uTm9PYnNlcnZlcnM7XG4gICAgLy8gQ2FsbCB0aGUgZXhlY3V0b3IgYXN5bmNocm9ub3VzbHkgc28gc3Vic2NyaWJlcnMgdGhhdCBhcmUgY2FsbGVkXG4gICAgLy8gc3luY2hyb25vdXNseSBhZnRlciB0aGUgY3JlYXRpb24gb2YgdGhlIHN1YnNjcmliZSBmdW5jdGlvblxuICAgIC8vIGNhbiBzdGlsbCByZWNlaXZlIHRoZSB2ZXJ5IGZpcnN0IHZhbHVlIGdlbmVyYXRlZCBpbiB0aGUgZXhlY3V0b3IuXG4gICAgdGhpcy50YXNrXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGV4ZWN1dG9yKHRoaXMpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmV4dCh2YWx1ZTogVCk6IHZvaWQge1xuICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcbiAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZXJyb3IoZXJyb3I6IEVycm9yKTogdm9pZCB7XG4gICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xuICAgIH0pO1xuICAgIHRoaXMuY2xvc2UoZXJyb3IpO1xuICB9XG5cbiAgY29tcGxldGUoKTogdm9pZCB7XG4gICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4ge1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWRkIGFuIE9ic2VydmVyIHRvIHRoZSBmYW4tb3V0IGxpc3QuXG4gICAqXG4gICAqIC0gV2UgcmVxdWlyZSB0aGF0IG5vIGV2ZW50IGlzIHNlbnQgdG8gYSBzdWJzY3JpYmVyIHN5Y2hyb25vdXNseSB0byB0aGVpclxuICAgKiAgIGNhbGwgdG8gc3Vic2NyaWJlKCkuXG4gICAqL1xuICBzdWJzY3JpYmUoXG4gICAgbmV4dE9yT2JzZXJ2ZXI/OiBOZXh0Rm48VD4gfCBQYXJ0aWFsT2JzZXJ2ZXI8VD4sXG4gICAgZXJyb3I/OiBFcnJvckZuLFxuICAgIGNvbXBsZXRlPzogQ29tcGxldGVGblxuICApOiBVbnN1YnNjcmliZSB7XG4gICAgbGV0IG9ic2VydmVyOiBPYnNlcnZlcjxUPjtcblxuICAgIGlmIChcbiAgICAgIG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcbiAgICAgIGVycm9yID09PSB1bmRlZmluZWQgJiZcbiAgICAgIGNvbXBsZXRlID09PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcbiAgICB9XG5cbiAgICAvLyBBc3NlbWJsZSBhbiBPYnNlcnZlciBvYmplY3Qgd2hlbiBwYXNzZWQgYXMgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICAgIGlmIChcbiAgICAgIGltcGxlbWVudHNBbnlNZXRob2RzKG5leHRPck9ic2VydmVyIGFzIHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9LCBbXG4gICAgICAgICduZXh0JyxcbiAgICAgICAgJ2Vycm9yJyxcbiAgICAgICAgJ2NvbXBsZXRlJ1xuICAgICAgXSlcbiAgICApIHtcbiAgICAgIG9ic2VydmVyID0gbmV4dE9yT2JzZXJ2ZXIgYXMgT2JzZXJ2ZXI8VD47XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmVyID0ge1xuICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlciBhcyBOZXh0Rm48VD4sXG4gICAgICAgIGVycm9yLFxuICAgICAgICBjb21wbGV0ZVxuICAgICAgfSBhcyBPYnNlcnZlcjxUPjtcbiAgICB9XG5cbiAgICBpZiAob2JzZXJ2ZXIubmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYnNlcnZlci5uZXh0ID0gbm9vcCBhcyBOZXh0Rm48VD47XG4gICAgfVxuICAgIGlmIChvYnNlcnZlci5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYnNlcnZlci5lcnJvciA9IG5vb3AgYXMgRXJyb3JGbjtcbiAgICB9XG4gICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlID0gbm9vcCBhcyBDb21wbGV0ZUZuO1xuICAgIH1cblxuICAgIGNvbnN0IHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzIS5sZW5ndGgpO1xuXG4gICAgLy8gQXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gYSB0ZXJtaW5hdGVkIE9ic2VydmFibGUgLSB3ZVxuICAgIC8vIGp1c3QgcmVzcG9uZCB0byB0aGUgT2JzZXJ2ZXIgd2l0aCB0aGUgZmluYWwgZXJyb3Igb3IgY29tcGxldGVcbiAgICAvLyBldmVudC5cbiAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodGhpcy5maW5hbEVycm9yKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcih0aGlzLmZpbmFsRXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIG5vdGhpbmdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLm9ic2VydmVycyEucHVzaChvYnNlcnZlciBhcyBPYnNlcnZlcjxUPik7XG5cbiAgICByZXR1cm4gdW5zdWI7XG4gIH1cblxuICAvLyBVbnN1YnNjcmliZSBpcyBzeW5jaHJvbm91cyAtIHdlIGd1YXJhbnRlZSB0aGF0IG5vIGV2ZW50cyBhcmUgc2VudCB0b1xuICAvLyBhbnkgdW5zdWJzY3JpYmVkIE9ic2VydmVyLlxuICBwcml2YXRlIHVuc3Vic2NyaWJlT25lKGk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLm9ic2VydmVycyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub2JzZXJ2ZXJzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5vYnNlcnZlcnNbaV07XG5cbiAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcbiAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9uTm9PYnNlcnZlcnModGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmb3JFYWNoT2JzZXJ2ZXIoZm46IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHZvaWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgY2xvc2VkIGJ5IHByZXZpb3VzIGV2ZW50Li4uLmp1c3QgZWF0IHRoZSBhZGRpdGlvbmFsIHZhbHVlcy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaW5jZSBzZW5kT25lIGNhbGxzIGFzeW5jaHJvbm91c2x5IC0gdGhlcmUgaXMgbm8gY2hhbmNlIHRoYXRcbiAgICAvLyB0aGlzLm9ic2VydmVycyB3aWxsIGJlY29tZSB1bmRlZmluZWQuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9ic2VydmVycyEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FsbCB0aGUgT2JzZXJ2ZXIgdmlhIG9uZSBvZiBpdCdzIGNhbGxiYWNrIGZ1bmN0aW9uLiBXZSBhcmUgY2FyZWZ1bCB0b1xuICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xuICAvLyBmdW5jdGlvbiBoYWQgYmVlbiBxdWV1ZWQuXG4gIHByaXZhdGUgc2VuZE9uZShpOiBudW1iZXIsIGZuOiAob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgLy8gRXhlY3V0ZSB0aGUgY2FsbGJhY2sgYXN5bmNocm9ub3VzbHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vYnNlcnZlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZuKHRoaXMub2JzZXJ2ZXJzW2ldKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIElnbm9yZSBleGNlcHRpb25zIHJhaXNlZCBpbiBPYnNlcnZlcnMgb3IgbWlzc2luZyBtZXRob2RzIG9mIGFuXG4gICAgICAgICAgLy8gT2JzZXJ2ZXIuXG4gICAgICAgICAgLy8gTG9nIGVycm9yIHRvIGNvbnNvbGUuIGIvMzE0MDQ4MDZcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNsb3NlKGVycj86IEVycm9yKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcbiAgICBpZiAoZXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcbiAgICB9XG4gICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKiBUdXJuIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gb25lIGNhbGxlZCBhc3luY2hyb25vdXNseS4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gYXN5bmMoZm46IEZ1bmN0aW9uLCBvbkVycm9yPzogRXJyb3JGbik6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuICguLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgZm4oLi4uYXJncyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXG4gKi9cbmZ1bmN0aW9uIGltcGxlbWVudHNBbnlNZXRob2RzKFxuICBvYmo6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9LFxuICBtZXRob2RzOiBzdHJpbmdbXVxuKTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XG4gICAgaWYgKG1ldGhvZCBpbiBvYmogJiYgdHlwZW9mIG9ialttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKTogdm9pZCB7XG4gIC8vIGRvIG5vdGhpbmdcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQ2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBhcHByb3ByaWF0ZSBudW1iZXIgb2YgYXJndW1lbnRzIGFyZSBwcm92aWRlZCBmb3IgYSBwdWJsaWMgZnVuY3Rpb24uXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgaXQgZmFpbHMuXG4gKlxuICogQHBhcmFtIGZuTmFtZSBUaGUgZnVuY3Rpb24gbmFtZVxuICogQHBhcmFtIG1pbkNvdW50IFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXG4gKiBAcGFyYW0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxuICogQHBhcmFtIGFyZ0NvdW50IFRoZSBhY3R1YWwgbnVtYmVyIG9mIGFyZ3VtZW50cyBwcm92aWRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlQXJnQ291bnQgPSBmdW5jdGlvbiAoXG4gIGZuTmFtZTogc3RyaW5nLFxuICBtaW5Db3VudDogbnVtYmVyLFxuICBtYXhDb3VudDogbnVtYmVyLFxuICBhcmdDb3VudDogbnVtYmVyXG4pOiB2b2lkIHtcbiAgbGV0IGFyZ0Vycm9yO1xuICBpZiAoYXJnQ291bnQgPCBtaW5Db3VudCkge1xuICAgIGFyZ0Vycm9yID0gJ2F0IGxlYXN0ICcgKyBtaW5Db3VudDtcbiAgfSBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XG4gICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xuICB9XG4gIGlmIChhcmdFcnJvcikge1xuICAgIGNvbnN0IGVycm9yID1cbiAgICAgIGZuTmFtZSArXG4gICAgICAnIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoICcgK1xuICAgICAgYXJnQ291bnQgK1xuICAgICAgKGFyZ0NvdW50ID09PSAxID8gJyBhcmd1bWVudC4nIDogJyBhcmd1bWVudHMuJykgK1xuICAgICAgJyBFeHBlY3RzICcgK1xuICAgICAgYXJnRXJyb3IgK1xuICAgICAgJy4nO1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gIH1cbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgc3RyaW5nIHRvIHByZWZpeCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IGZhaWxlZCBhcmd1bWVudCB2YWxpZGF0aW9uXG4gKlxuICogQHBhcmFtIGZuTmFtZSBUaGUgZnVuY3Rpb24gbmFtZVxuICogQHBhcmFtIGFyZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGFyZ3VtZW50XG4gKiBAcmV0dXJuIFRoZSBwcmVmaXggdG8gYWRkIHRvIHRoZSBlcnJvciB0aHJvd24gZm9yIHZhbGlkYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJvclByZWZpeChmbk5hbWU6IHN0cmluZywgYXJnTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2ZuTmFtZX0gZmFpbGVkOiAke2FyZ05hbWV9IGFyZ3VtZW50IGA7XG59XG5cbi8qKlxuICogQHBhcmFtIGZuTmFtZVxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyXG4gKiBAcGFyYW0gbmFtZXNwYWNlXG4gKiBAcGFyYW0gb3B0aW9uYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTmFtZXNwYWNlKFxuICBmbk5hbWU6IHN0cmluZyxcbiAgbmFtZXNwYWNlOiBzdHJpbmcsXG4gIG9wdGlvbmFsOiBib29sZWFuXG4pOiB2b2lkIHtcbiAgaWYgKG9wdGlvbmFsICYmICFuYW1lc3BhY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgLy9UT0RPOiBJIHNob3VsZCBkbyBtb3JlIHZhbGlkYXRpb24gaGVyZS4gV2Ugb25seSBhbGxvdyBjZXJ0YWluIGNoYXJzIGluIG5hbWVzcGFjZXMuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3JQcmVmaXgoZm5OYW1lLCAnbmFtZXNwYWNlJykgKyAnbXVzdCBiZSBhIHZhbGlkIGZpcmViYXNlIG5hbWVzcGFjZS4nXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDYWxsYmFjayhcbiAgZm5OYW1lOiBzdHJpbmcsXG4gIGFyZ3VtZW50TmFtZTogc3RyaW5nLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICBjYWxsYmFjazogRnVuY3Rpb24sXG4gIG9wdGlvbmFsOiBib29sZWFuXG4pOiB2b2lkIHtcbiAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi4nXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KFxuICBmbk5hbWU6IHN0cmluZyxcbiAgYXJndW1lbnROYW1lOiBzdHJpbmcsXG4gIGNvbnRleHQ6IHVua25vd24sXG4gIG9wdGlvbmFsOiBib29sZWFuXG4pOiB2b2lkIHtcbiAgaWYgKG9wdGlvbmFsICYmICFjb250ZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcgfHwgY29udGV4dCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgY29udGV4dCBvYmplY3QuJ1xuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vYXNzZXJ0JztcblxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XG4vLyBhdXRvbWF0aWNhbGx5IHJlcGxhY2VkICdcXHJcXG4nIHdpdGggJ1xcbicsIGFuZCB0aGV5IGRpZG4ndCBoYW5kbGUgc3Vycm9nYXRlIHBhaXJzLFxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxuXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xuLy8gdXNlIDIgY2hhcmFjdGVycyBpbiBKYXZhc2NyaXB0LiAgQWxsIDQtYnl0ZSBVVEYtOCBjaGFyYWN0ZXJzIGJlZ2luIHdpdGggYSBmaXJzdFxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXG4vLyBwYWlyKS5cbi8vIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuMS4zXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgY29uc3Qgb3V0OiBudW1iZXJbXSA9IFtdO1xuICBsZXQgcCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XG4gICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XG4gICAgICBjb25zdCBoaWdoID0gYyAtIDB4ZDgwMDsgLy8gdGhlIGhpZ2ggMTAgYml0cy5cbiAgICAgIGkrKztcbiAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xuICAgICAgY29uc3QgbG93ID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAweGRjMDA7IC8vIHRoZSBsb3cgMTAgYml0cy5cbiAgICAgIGMgPSAweDEwMDAwICsgKGhpZ2ggPDwgMTApICsgbG93O1xuICAgIH1cblxuICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICBvdXRbcCsrXSA9IGM7XG4gICAgfSBlbHNlIGlmIChjIDwgMjA0OCkge1xuICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcbiAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgfSBlbHNlIGlmIChjIDwgNjU1MzYpIHtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xuICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIGxlbmd0aCB3aXRob3V0IGFjdHVhbGx5IGNvbnZlcnRpbmc7IHVzZWZ1bCBmb3IgZG9pbmcgY2hlYXBlciB2YWxpZGF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcbiAgbGV0IHAgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgcCsrO1xuICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgIHAgKz0gMjtcbiAgICB9IGVsc2UgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XG4gICAgICAvLyBMZWFkIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLiAgVGhlIHBhaXIgdG9nZXRoZXIgd2lsbCB0YWtlIDQgYnl0ZXMgdG8gcmVwcmVzZW50LlxuICAgICAgcCArPSA0O1xuICAgICAgaSsrOyAvLyBza2lwIHRyYWlsIHN1cnJvZ2F0ZS5cbiAgICB9IGVsc2Uge1xuICAgICAgcCArPSAzO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcDtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIENvcGllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTE3NTIzXG4gKiBHZW5lcmF0ZXMgYSBuZXcgdXVpZC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHV1aWR2NCA9IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBjID0+IHtcbiAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxuICAgICAgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGV4cG9uZW50aWFsbHkgaW5jcmVhc2UuXG4gKi9cbmNvbnN0IERFRkFVTFRfSU5URVJWQUxfTUlMTElTID0gMTAwMDtcblxuLyoqXG4gKiBUaGUgZmFjdG9yIHRvIGJhY2tvZmYgYnkuXG4gKiBTaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDEuXG4gKi9cbmNvbnN0IERFRkFVTFRfQkFDS09GRl9GQUNUT1IgPSAyO1xuXG4vKipcbiAqIFRoZSBtYXhpbXVtIG1pbGxpc2Vjb25kcyB0byBpbmNyZWFzZSB0by5cbiAqXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVkFMVUVfTUlMTElTID0gNCAqIDYwICogNjAgKiAxMDAwOyAvLyBGb3VyIGhvdXJzLCBsaWtlIGlPUyBhbmQgQW5kcm9pZC5cblxuLyoqXG4gKiBUaGUgcGVyY2VudGFnZSBvZiBiYWNrb2ZmIHRpbWUgdG8gcmFuZG9taXplIGJ5LlxuICogU2VlXG4gKiBodHRwOi8vZ28vc2FmZS1jbGllbnQtYmVoYXZpb3Ijc3RlcC0xLWRldGVybWluZS10aGUtYXBwcm9wcmlhdGUtcmV0cnktaW50ZXJ2YWwtdG8taGFuZGxlLXNwaWtlLXRyYWZmaWNcbiAqIGZvciBjb250ZXh0LlxuICpcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IFJBTkRPTV9GQUNUT1IgPSAwLjU7XG5cbi8qKlxuICogQmFzZWQgb24gdGhlIGJhY2tvZmYgbWV0aG9kIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL2Nsb3N1cmUvZ29vZy9tYXRoL2V4cG9uZW50aWFsYmFja29mZi5qcy5cbiAqIEV4dHJhY3RlZCBoZXJlIHNvIHdlIGRvbid0IG5lZWQgdG8gcGFzcyBtZXRhZGF0YSBhbmQgYSBzdGF0ZWZ1bCBFeHBvbmVudGlhbEJhY2tvZmYgb2JqZWN0IGFyb3VuZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMoXG4gIGJhY2tvZmZDb3VudDogbnVtYmVyLFxuICBpbnRlcnZhbE1pbGxpczogbnVtYmVyID0gREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMsXG4gIGJhY2tvZmZGYWN0b3I6IG51bWJlciA9IERFRkFVTFRfQkFDS09GRl9GQUNUT1Jcbik6IG51bWJlciB7XG4gIC8vIENhbGN1bGF0ZXMgYW4gZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIHZhbHVlLlxuICAvLyBEZXZpYXRpb246IGNhbGN1bGF0ZXMgdmFsdWUgZnJvbSBjb3VudCBhbmQgYSBjb25zdGFudCBpbnRlcnZhbCwgc28gd2Ugb25seSBuZWVkIHRvIHNhdmUgdmFsdWVcbiAgLy8gYW5kIGNvdW50IHRvIHJlc3RvcmUgc3RhdGUuXG4gIGNvbnN0IGN1cnJCYXNlVmFsdWUgPSBpbnRlcnZhbE1pbGxpcyAqIE1hdGgucG93KGJhY2tvZmZGYWN0b3IsIGJhY2tvZmZDb3VudCk7XG5cbiAgLy8gQSByYW5kb20gXCJmdXp6XCIgdG8gYXZvaWQgd2F2ZXMgb2YgcmV0cmllcy5cbiAgLy8gRGV2aWF0aW9uOiByYW5kb21GYWN0b3IgaXMgcmVxdWlyZWQuXG4gIGNvbnN0IHJhbmRvbVdhaXQgPSBNYXRoLnJvdW5kKFxuICAgIC8vIEEgZnJhY3Rpb24gb2YgdGhlIGJhY2tvZmYgdmFsdWUgdG8gYWRkL3N1YnRyYWN0LlxuICAgIC8vIERldmlhdGlvbjogY2hhbmdlcyBtdWx0aXBsaWNhdGlvbiBvcmRlciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxuICAgIFJBTkRPTV9GQUNUT1IgKlxuICAgICAgY3VyckJhc2VWYWx1ZSAqXG4gICAgICAvLyBBIHJhbmRvbSBmbG9hdCAocm91bmRlZCB0byBpbnQgYnkgTWF0aC5yb3VuZCBhYm92ZSkgaW4gdGhlIHJhbmdlIFstMSwgMV0uIERldGVybWluZXNcbiAgICAgIC8vIGlmIHdlIGFkZCBvciBzdWJ0cmFjdC5cbiAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqXG4gICAgICAyXG4gICk7XG5cbiAgLy8gTGltaXRzIGJhY2tvZmYgdG8gbWF4IHRvIGF2b2lkIGVmZmVjdGl2ZWx5IHBlcm1hbmVudCBiYWNrb2ZmLlxuICByZXR1cm4gTWF0aC5taW4oTUFYX1ZBTFVFX01JTExJUywgY3VyckJhc2VWYWx1ZSArIHJhbmRvbVdhaXQpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBQcm92aWRlIEVuZ2xpc2ggb3JkaW5hbCBsZXR0ZXJzIGFmdGVyIGEgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcmRpbmFsKGk6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKGkpKSB7XG4gICAgcmV0dXJuIGAke2l9YDtcbiAgfVxuICByZXR1cm4gaSArIGluZGljYXRvcihpKTtcbn1cblxuZnVuY3Rpb24gaW5kaWNhdG9yKGk6IG51bWJlcik6IHN0cmluZyB7XG4gIGkgPSBNYXRoLmFicyhpKTtcbiAgY29uc3QgY2VudCA9IGkgJSAxMDA7XG4gIGlmIChjZW50ID49IDEwICYmIGNlbnQgPD0gMjApIHtcbiAgICByZXR1cm4gJ3RoJztcbiAgfVxuICBjb25zdCBkZWMgPSBpICUgMTA7XG4gIGlmIChkZWMgPT09IDEpIHtcbiAgICByZXR1cm4gJ3N0JztcbiAgfVxuICBpZiAoZGVjID09PSAyKSB7XG4gICAgcmV0dXJuICduZCc7XG4gIH1cbiAgaWYgKGRlYyA9PT0gMykge1xuICAgIHJldHVybiAncmQnO1xuICB9XG4gIHJldHVybiAndGgnO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBDb21wYXQ8VD4ge1xuICBfZGVsZWdhdGU6IFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2R1bGFySW5zdGFuY2U8RXhwU2VydmljZT4oXG4gIHNlcnZpY2U6IENvbXBhdDxFeHBTZXJ2aWNlPiB8IEV4cFNlcnZpY2Vcbik6IEV4cFNlcnZpY2Uge1xuICBpZiAoc2VydmljZSAmJiAoc2VydmljZSBhcyBDb21wYXQ8RXhwU2VydmljZT4pLl9kZWxlZ2F0ZSkge1xuICAgIHJldHVybiAoc2VydmljZSBhcyBDb21wYXQ8RXhwU2VydmljZT4pLl9kZWxlZ2F0ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2VydmljZSBhcyBFeHBTZXJ2aWNlO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtcbiAgSW5zdGFudGlhdGlvbk1vZGUsXG4gIEluc3RhbmNlRmFjdG9yeSxcbiAgQ29tcG9uZW50VHlwZSxcbiAgRGljdGlvbmFyeSxcbiAgTmFtZSxcbiAgb25JbnN0YW5jZUNyZWF0ZWRDYWxsYmFja1xufSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBDb21wb25lbnQgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnQ8VCBleHRlbmRzIE5hbWUgPSBOYW1lPiB7XG4gIG11bHRpcGxlSW5zdGFuY2VzID0gZmFsc2U7XG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzZXJ2aWNlIG5hbWVzcGFjZVxuICAgKi9cbiAgc2VydmljZVByb3BzOiBEaWN0aW9uYXJ5ID0ge307XG5cbiAgaW5zdGFudGlhdGlvbk1vZGUgPSBJbnN0YW50aWF0aW9uTW9kZS5MQVpZO1xuXG4gIG9uSW5zdGFuY2VDcmVhdGVkOiBvbkluc3RhbmNlQ3JlYXRlZENhbGxiYWNrPFQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBwdWJsaWMgc2VydmljZSBuYW1lLCBlLmcuIGFwcCwgYXV0aCwgZmlyZXN0b3JlLCBkYXRhYmFzZVxuICAgKiBAcGFyYW0gaW5zdGFuY2VGYWN0b3J5IFNlcnZpY2UgZmFjdG9yeSByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhlIHB1YmxpYyBpbnRlcmZhY2VcbiAgICogQHBhcmFtIHR5cGUgd2hldGhlciB0aGUgc2VydmljZSBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50IGlzIHB1YmxpYyBvciBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBuYW1lOiBULFxuICAgIHJlYWRvbmx5IGluc3RhbmNlRmFjdG9yeTogSW5zdGFuY2VGYWN0b3J5PFQ+LFxuICAgIHJlYWRvbmx5IHR5cGU6IENvbXBvbmVudFR5cGVcbiAgKSB7fVxuXG4gIHNldEluc3RhbnRpYXRpb25Nb2RlKG1vZGU6IEluc3RhbnRpYXRpb25Nb2RlKTogdGhpcyB7XG4gICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IG1vZGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRNdWx0aXBsZUluc3RhbmNlcyhtdWx0aXBsZUluc3RhbmNlczogYm9vbGVhbik6IHRoaXMge1xuICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBtdWx0aXBsZUluc3RhbmNlcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNldFNlcnZpY2VQcm9wcyhwcm9wczogRGljdGlvbmFyeSk6IHRoaXMge1xuICAgIHRoaXMuc2VydmljZVByb3BzID0gcHJvcHM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayhjYWxsYmFjazogb25JbnN0YW5jZUNyZWF0ZWRDYWxsYmFjazxUPik6IHRoaXMge1xuICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBjYWxsYmFjaztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRU5UUllfTkFNRSA9ICdbREVGQVVMVF0nO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudF9jb250YWluZXInO1xuaW1wb3J0IHsgREVGQVVMVF9FTlRSWV9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgSW5pdGlhbGl6ZU9wdGlvbnMsXG4gIEluc3RhbnRpYXRpb25Nb2RlLFxuICBOYW1lLFxuICBOYW1lU2VydmljZU1hcHBpbmcsXG4gIE9uSW5pdENhbGxCYWNrXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBpbnN0YW5jZSBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gJ2F1dGgnLCAnYXV0aC1pbnRlcm5hbCdcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm92aWRlcjxUIGV4dGVuZHMgTmFtZT4ge1xuICBwcml2YXRlIGNvbXBvbmVudDogQ29tcG9uZW50PFQ+IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW5zdGFuY2VzOiBNYXA8c3RyaW5nLCBOYW1lU2VydmljZU1hcHBpbmdbVF0+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IGluc3RhbmNlc0RlZmVycmVkOiBNYXA8XG4gICAgc3RyaW5nLFxuICAgIERlZmVycmVkPE5hbWVTZXJ2aWNlTWFwcGluZ1tUXT5cbiAgPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnN0YW5jZXNPcHRpb25zOiBNYXA8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4gPVxuICAgIG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBvbkluaXRDYWxsYmFja3M6IE1hcDxzdHJpbmcsIFNldDxPbkluaXRDYWxsQmFjazxUPj4+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogVCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyXG4gICkge31cblxuICAvKipcbiAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXG4gICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXG4gICAqL1xuICBnZXQoaWRlbnRpZmllcj86IHN0cmluZyk6IFByb21pc2U8TmFtZVNlcnZpY2VNYXBwaW5nW1RdPiB7XG4gICAgLy8gaWYgbXVsdGlwbGVJbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBkZWZhdWx0IG5hbWVcbiAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuXG4gICAgaWYgKCF0aGlzLmluc3RhbmNlc0RlZmVycmVkLmhhcyhub3JtYWxpemVkSWRlbnRpZmllcikpIHtcbiAgICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkPE5hbWVTZXJ2aWNlTWFwcGluZ1tUXT4oKTtcbiAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBkZWZlcnJlZCk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxuICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKClcbiAgICAgICkge1xuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzZXJ2aWNlIGlmIGl0IGNhbiBiZSBhdXRvLWluaXRpYWxpemVkXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xuICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyBnZXQoKSwgaXQgc2hvdWxkIG5vdCBjYXVzZVxuICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgcmV0dXJuIHRoZSB1bnJlc29sdmVkIHByb21pc2UgaW4gdGhpcyBjYXNlLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSEucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5pZGVudGlmaWVyIEEgcHJvdmlkZXIgY2FuIHByb3ZpZGUgbXVsaXRwbGUgaW5zdGFuY2VzIG9mIGEgc2VydmljZVxuICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5vcHRpb25hbCBJZiBvcHRpb25hbCBpcyBmYWxzZSBvciBub3QgcHJvdmlkZWQsIHRoZSBtZXRob2QgdGhyb3dzIGFuIGVycm9yIHdoZW5cbiAgICogdGhlIHNlcnZpY2UgaXMgbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZS5cbiAgICogSWYgb3B0aW9uYWwgaXMgdHJ1ZSwgdGhlIG1ldGhvZCByZXR1cm5zIG51bGwgaWYgdGhlIHNlcnZpY2UgaXMgbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZS5cbiAgICovXG4gIGdldEltbWVkaWF0ZShvcHRpb25zOiB7XG4gICAgaWRlbnRpZmllcj86IHN0cmluZztcbiAgICBvcHRpb25hbDogdHJ1ZTtcbiAgfSk6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSB8IG51bGw7XG4gIGdldEltbWVkaWF0ZShvcHRpb25zPzoge1xuICAgIGlkZW50aWZpZXI/OiBzdHJpbmc7XG4gICAgb3B0aW9uYWw/OiBmYWxzZTtcbiAgfSk6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXTtcbiAgZ2V0SW1tZWRpYXRlKG9wdGlvbnM/OiB7XG4gICAgaWRlbnRpZmllcj86IHN0cmluZztcbiAgICBvcHRpb25hbD86IGJvb2xlYW47XG4gIH0pOiBOYW1lU2VydmljZU1hcHBpbmdbVF0gfCBudWxsIHtcbiAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoXG4gICAgICBvcHRpb25zPy5pZGVudGlmaWVyXG4gICAgKTtcbiAgICBjb25zdCBvcHRpb25hbCA9IG9wdGlvbnM/Lm9wdGlvbmFsID8/IGZhbHNlO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxuICAgICAgdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpXG4gICAgKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcbiAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcbiAgICAgIGlmIChvcHRpb25hbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKGBTZXJ2aWNlICR7dGhpcy5uYW1lfSBpcyBub3QgYXZhaWxhYmxlYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tcG9uZW50KCk6IENvbXBvbmVudDxUPiB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcbiAgfVxuXG4gIHNldENvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudDxUPik6IHZvaWQge1xuICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYE1pc21hdGNoaW5nIENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmb3IgUHJvdmlkZXIgJHt0aGlzLm5hbWV9LmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBFcnJvcihgQ29tcG9uZW50IGZvciAke3RoaXMubmFtZX0gaGFzIGFscmVhZHkgYmVlbiBwcm92aWRlZGApO1xuICAgIH1cblxuICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuXG4gICAgLy8gcmV0dXJuIGVhcmx5IHdpdGhvdXQgYXR0ZW1wdGluZyB0byBpbml0aWFsaXplIHRoZSBjb21wb25lbnQgaWYgdGhlIGNvbXBvbmVudCByZXF1aXJlcyBleHBsaWNpdCBpbml0aWFsaXphdGlvbiAoY2FsbGluZyBgUHJvdmlkZXIuaW5pdGlhbGl6ZSgpYClcbiAgICBpZiAoIXRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSBzZXJ2aWNlIGlzIGVhZ2VyLCBpbml0aWFsaXplIHRoZSBkZWZhdWx0IGluc3RhbmNlXG4gICAgaWYgKGlzQ29tcG9uZW50RWFnZXIoY29tcG9uZW50KSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHsgaW5zdGFuY2VJZGVudGlmaWVyOiBERUZBVUxUX0VOVFJZX05BTUUgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgZm9yIGFuIGVhZ2VyIENvbXBvbmVudCB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyB0aGUgZWFnZXJcbiAgICAgICAgLy8gaW5pdGlhbGl6YXRpb24sIGl0IHNob3VsZCBub3QgY2F1c2UgYSBmYXRhbCBlcnJvci5cbiAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxuICAgICAgICAvLyBhIGZhdGFsIGVycm9yIGluIHRoaXMgY2FzZT9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgc2VydmljZSBpbnN0YW5jZXMgZm9yIHRoZSBwZW5kaW5nIHByb21pc2VzIGFuZCByZXNvbHZlIHRoZW1cbiAgICAvLyBOT1RFOiBpZiB0aGlzLm11bHRpcGxlSW5zdGFuY2VzIGlzIGZhbHNlLCBvbmx5IHRoZSBkZWZhdWx0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZFxuICAgIC8vIGFuZCBhbGwgcHJvbWlzZXMgd2l0aCByZXNvbHZlIHdpdGggaXQgcmVnYXJkbGVzcyBvZiB0aGUgaWRlbnRpZmllci5cbiAgICBmb3IgKGNvbnN0IFtcbiAgICAgIGluc3RhbmNlSWRlbnRpZmllcixcbiAgICAgIGluc3RhbmNlRGVmZXJyZWRcbiAgICBdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9XG4gICAgICAgIHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGBnZXRPckluaXRpYWxpemVTZXJ2aWNlKClgIHNob3VsZCBhbHdheXMgcmV0dXJuIGEgdmFsaWQgaW5zdGFuY2Ugc2luY2UgYSBjb21wb25lbnQgaXMgZ3VhcmFudGVlZC4gdXNlICEgdG8gbWFrZSB0eXBlc2NyaXB0IGhhcHB5LlxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XG4gICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxuICAgICAgICB9KSE7XG4gICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxuICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IGxlYXZlIHRoZSBwcm9taXNlIHVucmVzb2x2ZWQuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xlYXJJbnN0YW5jZShpZGVudGlmaWVyOiBzdHJpbmcgPSBERUZBVUxUX0VOVFJZX05BTUUpOiB2b2lkIHtcbiAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmRlbGV0ZShpZGVudGlmaWVyKTtcbiAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuZGVsZXRlKGlkZW50aWZpZXIpO1xuICAgIHRoaXMuaW5zdGFuY2VzLmRlbGV0ZShpZGVudGlmaWVyKTtcbiAgfVxuXG4gIC8vIGFwcC5kZWxldGUoKSB3aWxsIGNhbGwgdGhpcyBtZXRob2Qgb24gZXZlcnkgcHJvdmlkZXIgdG8gZGVsZXRlIHRoZSBzZXJ2aWNlc1xuICAvLyBUT0RPOiBzaG91bGQgd2UgbWFyayB0aGUgcHJvdmlkZXIgYXMgZGVsZXRlZD9cbiAgYXN5bmMgZGVsZXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAuLi5zZXJ2aWNlc1xuICAgICAgICAuZmlsdGVyKHNlcnZpY2UgPT4gJ0lOVEVSTkFMJyBpbiBzZXJ2aWNlKSAvLyBsZWdhY3kgc2VydmljZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgLm1hcChzZXJ2aWNlID0+IChzZXJ2aWNlIGFzIGFueSkuSU5URVJOQUwhLmRlbGV0ZSgpKSxcbiAgICAgIC4uLnNlcnZpY2VzXG4gICAgICAgIC5maWx0ZXIoc2VydmljZSA9PiAnX2RlbGV0ZScgaW4gc2VydmljZSkgLy8gbW9kdWxhcml6ZWQgc2VydmljZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgLm1hcChzZXJ2aWNlID0+IChzZXJ2aWNlIGFzIGFueSkuX2RlbGV0ZSgpKVxuICAgIF0pO1xuICB9XG5cbiAgaXNDb21wb25lbnRTZXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XG4gIH1cblxuICBpc0luaXRpYWxpemVkKGlkZW50aWZpZXI6IHN0cmluZyA9IERFRkFVTFRfRU5UUllfTkFNRSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlcy5oYXMoaWRlbnRpZmllcik7XG4gIH1cblxuICBnZXRPcHRpb25zKGlkZW50aWZpZXI6IHN0cmluZyA9IERFRkFVTFRfRU5UUllfTkFNRSk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNPcHRpb25zLmdldChpZGVudGlmaWVyKSB8fCB7fTtcbiAgfVxuXG4gIGluaXRpYWxpemUob3B0czogSW5pdGlhbGl6ZU9wdGlvbnMgPSB7fSk6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSB7XG4gICAgY29uc3QgeyBvcHRpb25zID0ge30gfSA9IG9wdHM7XG4gICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihcbiAgICAgIG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyXG4gICAgKTtcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGAke3RoaXMubmFtZX0oJHtub3JtYWxpemVkSWRlbnRpZmllcn0pIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWRgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0NvbXBvbmVudFNldCgpKSB7XG4gICAgICB0aHJvdyBFcnJvcihgQ29tcG9uZW50ICR7dGhpcy5uYW1lfSBoYXMgbm90IGJlZW4gcmVnaXN0ZXJlZCB5ZXRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XG4gICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyLFxuICAgICAgb3B0aW9uc1xuICAgIH0pITtcblxuICAgIC8vIHJlc29sdmUgYW55IHBlbmRpbmcgcHJvbWlzZSB3YWl0aW5nIGZvciB0aGUgc2VydmljZSBpbnN0YW5jZVxuICAgIGZvciAoY29uc3QgW1xuICAgICAgaW5zdGFuY2VJZGVudGlmaWVyLFxuICAgICAgaW5zdGFuY2VEZWZlcnJlZFxuICAgIF0gb2YgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5lbnRyaWVzKCkpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIgPVxuICAgICAgICB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRJZGVudGlmaWVyID09PSBub3JtYWxpemVkRGVmZXJyZWRJZGVudGlmaWVyKSB7XG4gICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgIGFmdGVyIHRoZSBwcm92aWRlciBoYXMgYmVlbiBpbml0aWFsaXplZCBieSBjYWxsaW5nIHByb3ZpZGVyLmluaXRpYWxpemUoKS5cbiAgICogVGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgU1lOQ0hST05PVVNMWSwgc28gaXQgc2hvdWxkIG5vdCBleGVjdXRlIGFueSBsb25ncnVubmluZyB0YXNrcyBpbiBvcmRlciB0byBub3QgYmxvY2sgdGhlIHByb2dyYW0uXG4gICAqXG4gICAqIEBwYXJhbSBpZGVudGlmaWVyIEFuIG9wdGlvbmFsIGluc3RhbmNlIGlkZW50aWZpZXJcbiAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25Jbml0KGNhbGxiYWNrOiBPbkluaXRDYWxsQmFjazxUPiwgaWRlbnRpZmllcj86IHN0cmluZyk6ICgpID0+IHZvaWQge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgY29uc3QgZXhpc3RpbmdDYWxsYmFja3MgPVxuICAgICAgdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSA/P1xuICAgICAgbmV3IFNldDxPbkluaXRDYWxsQmFjazxUPj4oKTtcbiAgICBleGlzdGluZ0NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZXhpc3RpbmdDYWxsYmFja3MpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChub3JtYWxpemVkSWRlbnRpZmllcik7XG4gICAgaWYgKGV4aXN0aW5nSW5zdGFuY2UpIHtcbiAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZSBvbkluaXQgY2FsbGJhY2tzIHN5bmNocm9ub3VzbHlcbiAgICogQHBhcmFtIGluc3RhbmNlIHRoZSBzZXJ2aWNlIGluc3RhbmNlYFxuICAgKi9cbiAgcHJpdmF0ZSBpbnZva2VPbkluaXRDYWxsYmFja3MoXG4gICAgaW5zdGFuY2U6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSxcbiAgICBpZGVudGlmaWVyOiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KGlkZW50aWZpZXIpO1xuICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFjayhpbnN0YW5jZSwgaWRlbnRpZmllcik7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gaWdub3JlIGVycm9ycyBpbiB0aGUgb25Jbml0IGNhbGxiYWNrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcbiAgICBpbnN0YW5jZUlkZW50aWZpZXIsXG4gICAgb3B0aW9ucyA9IHt9XG4gIH06IHtcbiAgICBpbnN0YW5jZUlkZW50aWZpZXI6IHN0cmluZztcbiAgICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH0pOiBOYW1lU2VydmljZU1hcHBpbmdbVF0gfCBudWxsIHtcbiAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQoaW5zdGFuY2VJZGVudGlmaWVyKTtcbiAgICBpZiAoIWluc3RhbmNlICYmIHRoaXMuY29tcG9uZW50KSB7XG4gICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwge1xuICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5KGluc3RhbmNlSWRlbnRpZmllciksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xuICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLnNldChpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEludm9rZSBvbkluaXQgbGlzdGVuZXJzLlxuICAgICAgICogTm90ZSB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCBpcyBkaWZmZXJlbnQsIHdoaWNoIGlzIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBjcmVhdG9yLFxuICAgICAgICogd2hpbGUgb25Jbml0IGxpc3RlbmVycyBhcmUgcmVnaXN0ZXJlZCBieSBjb25zdW1lcnMgb2YgdGhlIHByb3ZpZGVyLlxuICAgICAgICovXG4gICAgICB0aGlzLmludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaW5zdGFuY2VJZGVudGlmaWVyKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcmRlciBpcyBpbXBvcnRhbnRcbiAgICAgICAqIG9uSW5zdGFuY2VDcmVhdGVkKCkgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciB0aGlzLmluc3RhbmNlcy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7IHdoaWNoXG4gICAgICAgKiBtYWtlcyBgaXNJbml0aWFsaXplZCgpYCByZXR1cm4gdHJ1ZS5cbiAgICAgICAqL1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnQub25JbnN0YW5jZUNyZWF0ZWQoXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcixcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgLy8gaWdub3JlIGVycm9ycyBpbiB0aGUgb25JbnN0YW5jZUNyZWF0ZWRDYWxsYmFja1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XG4gIH1cblxuICBwcml2YXRlIG5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihcbiAgICBpZGVudGlmaWVyOiBzdHJpbmcgPSBERUZBVUxUX0VOVFJZX05BTUVcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyA/IGlkZW50aWZpZXIgOiBERUZBVUxUX0VOVFJZX05BTUU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpZGVudGlmaWVyOyAvLyBhc3N1bWUgbXVsdGlwbGUgaW5zdGFuY2VzIGFyZSBzdXBwb3J0ZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgcHJvdmlkZWQuXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRBdXRvSW5pdGlhbGl6ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgISF0aGlzLmNvbXBvbmVudCAmJlxuICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgIT09IEluc3RhbnRpYXRpb25Nb2RlLkVYUExJQ0lUXG4gICAgKTtcbiAgfVxufVxuXG4vLyB1bmRlZmluZWQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgc2VydmljZSBmYWN0b3J5IGZvciB0aGUgZGVmYXVsdCBpbnN0YW5jZVxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XG59XG5cbmZ1bmN0aW9uIGlzQ29tcG9uZW50RWFnZXI8VCBleHRlbmRzIE5hbWU+KGNvbXBvbmVudDogQ29tcG9uZW50PFQ+KTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IEluc3RhbnRpYXRpb25Nb2RlLkVBR0VSO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVyJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7IE5hbWUgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBDb21wb25lbnRDb250YWluZXIgdGhhdCBwcm92aWRlcyBQcm92aWRlcnMgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRDb250YWluZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHByb3ZpZGVycyA9IG5ldyBNYXA8c3RyaW5nLCBQcm92aWRlcjxOYW1lPj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG5hbWU6IHN0cmluZykge31cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcbiAgICogQHBhcmFtIG92ZXJ3cml0ZSBXaGVuIGEgY29tcG9uZW50IHdpdGggdGhlIHNhbWUgbmFtZSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsXG4gICAqIGlmIG92ZXJ3cml0ZSBpcyB0cnVlOiBvdmVyd3JpdGUgdGhlIGV4aXN0aW5nIGNvbXBvbmVudCB3aXRoIHRoZSBuZXcgY29tcG9uZW50IGFuZCBjcmVhdGUgYSBuZXdcbiAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXG4gICAqIGZvciBkaWZmZXJlbnQgdGVzdHMuXG4gICAqIGlmIG92ZXJ3cml0ZSBpcyBmYWxzZTogdGhyb3cgYW4gZXhjZXB0aW9uXG4gICAqL1xuICBhZGRDb21wb25lbnQ8VCBleHRlbmRzIE5hbWU+KGNvbXBvbmVudDogQ29tcG9uZW50PFQ+KTogdm9pZCB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcbiAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ29tcG9uZW50ICR7Y29tcG9uZW50Lm5hbWV9IGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCB3aXRoICR7dGhpcy5uYW1lfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdmlkZXIuc2V0Q29tcG9uZW50KGNvbXBvbmVudCk7XG4gIH1cblxuICBhZGRPck92ZXJ3cml0ZUNvbXBvbmVudDxUIGV4dGVuZHMgTmFtZT4oY29tcG9uZW50OiBDb21wb25lbnQ8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoY29tcG9uZW50Lm5hbWUpO1xuICAgIGlmIChwcm92aWRlci5pc0NvbXBvbmVudFNldCgpKSB7XG4gICAgICAvLyBkZWxldGUgdGhlIGV4aXN0aW5nIHByb3ZpZGVyIGZyb20gdGhlIGNvbnRhaW5lciwgc28gd2UgY2FuIHJlZ2lzdGVyIHRoZSBuZXcgY29tcG9uZW50XG4gICAgICB0aGlzLnByb3ZpZGVycy5kZWxldGUoY29tcG9uZW50Lm5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0UHJvdmlkZXIgcHJvdmlkZXMgYSB0eXBlIHNhZmUgaW50ZXJmYWNlIHdoZXJlIGl0IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgZmllbGQgbmFtZVxuICAgKiBwcmVzZW50IGluIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEZpcmViYXNlIFNES3MgcHJvdmlkaW5nIHNlcnZpY2VzIHNob3VsZCBleHRlbmQgTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZSB0byByZWdpc3RlclxuICAgKiB0aGVtc2VsdmVzLlxuICAgKi9cbiAgZ2V0UHJvdmlkZXI8VCBleHRlbmRzIE5hbWU+KG5hbWU6IFQpOiBQcm92aWRlcjxUPiB7XG4gICAgaWYgKHRoaXMucHJvdmlkZXJzLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmdldChuYW1lKSBhcyB1bmtub3duIGFzIFByb3ZpZGVyPFQ+O1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBhIFByb3ZpZGVyIGZvciBhIHNlcnZpY2UgdGhhdCBoYXNuJ3QgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlXG4gICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXI8VD4obmFtZSwgdGhpcyk7XG4gICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyIGFzIHVua25vd24gYXMgUHJvdmlkZXI8TmFtZT4pO1xuXG4gICAgcmV0dXJuIHByb3ZpZGVyIGFzIFByb3ZpZGVyPFQ+O1xuICB9XG5cbiAgZ2V0UHJvdmlkZXJzKCk6IEFycmF5PFByb3ZpZGVyPE5hbWU+PiB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgdHlwZSBMb2dMZXZlbFN0cmluZyA9XG4gIHwgJ2RlYnVnJ1xuICB8ICd2ZXJib3NlJ1xuICB8ICdpbmZvJ1xuICB8ICd3YXJuJ1xuICB8ICdlcnJvcidcbiAgfCAnc2lsZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBMb2dPcHRpb25zIHtcbiAgbGV2ZWw6IExvZ0xldmVsU3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBMb2dDYWxsYmFjayA9IChjYWxsYmFja1BhcmFtczogTG9nQ2FsbGJhY2tQYXJhbXMpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9nQ2FsbGJhY2tQYXJhbXMge1xuICBsZXZlbDogTG9nTGV2ZWxTdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgYXJnczogdW5rbm93bltdO1xuICB0eXBlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xuICovXG5leHBvcnQgY29uc3QgaW5zdGFuY2VzOiBMb2dnZXJbXSA9IFtdO1xuXG4vKipcbiAqIFRoZSBKUyBTREsgc3VwcG9ydHMgNSBsb2cgbGV2ZWxzIGFuZCBhbHNvIGFsbG93cyBhIHVzZXIgdGhlIGFiaWxpdHkgdG9cbiAqIHNpbGVuY2UgdGhlIGxvZ3MgYWx0b2dldGhlci5cbiAqXG4gKiBUaGUgb3JkZXIgaXMgYSBmb2xsb3dzOlxuICogREVCVUcgPCBWRVJCT1NFIDwgSU5GTyA8IFdBUk4gPCBFUlJPUlxuICpcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCB3aWxsIGJlIGNhcHR1cmVkIChpLmUuIGlmXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYElORk9gLCBlcnJvcnMgd2lsbCBzdGlsbCBiZSBsb2dnZWQsIGJ1dCBgREVCVUdgIGFuZFxuICogYFZFUkJPU0VgIGxvZ3Mgd2lsbCBub3QpXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgREVCVUcsXG4gIFZFUkJPU0UsXG4gIElORk8sXG4gIFdBUk4sXG4gIEVSUk9SLFxuICBTSUxFTlRcbn1cblxuY29uc3QgbGV2ZWxTdHJpbmdUb0VudW06IHsgW2tleSBpbiBMb2dMZXZlbFN0cmluZ106IExvZ0xldmVsIH0gPSB7XG4gICdkZWJ1Zyc6IExvZ0xldmVsLkRFQlVHLFxuICAndmVyYm9zZSc6IExvZ0xldmVsLlZFUkJPU0UsXG4gICdpbmZvJzogTG9nTGV2ZWwuSU5GTyxcbiAgJ3dhcm4nOiBMb2dMZXZlbC5XQVJOLFxuICAnZXJyb3InOiBMb2dMZXZlbC5FUlJPUixcbiAgJ3NpbGVudCc6IExvZ0xldmVsLlNJTEVOVFxufTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBsb2cgbGV2ZWxcbiAqL1xuY29uc3QgZGVmYXVsdExvZ0xldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XG5cbi8qKlxuICogV2UgYWxsb3cgdXNlcnMgdGhlIGFiaWxpdHkgdG8gcGFzcyB0aGVpciBvd24gbG9nIGhhbmRsZXIuIFdlIHdpbGwgcGFzcyB0aGVcbiAqIHR5cGUgb2YgbG9nLCB0aGUgY3VycmVudCBsb2cgbGV2ZWwsIGFuZCBhbnkgb3RoZXIgYXJndW1lbnRzIHBhc3NlZCAoaS5lLiB0aGVcbiAqIG1lc3NhZ2VzIHRoYXQgdGhlIHVzZXIgd2FudHMgdG8gbG9nKSB0byB0aGlzIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgdHlwZSBMb2dIYW5kbGVyID0gKFxuICBsb2dnZXJJbnN0YW5jZTogTG9nZ2VyLFxuICBsb2dUeXBlOiBMb2dMZXZlbCxcbiAgLi4uYXJnczogdW5rbm93bltdXG4pID0+IHZvaWQ7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBkaXNwbGF5ZWQgaW4gdGhlIGRldmVsb3BlciBjb25zb2xlIChpblxuICogY2hyb21lKS4gVG8gYXZvaWQgZm9yY2luZyB1c2VycyB0byBoYXZlIHRvIG9wdC1pbiB0byB0aGVzZSBsb2dzIHR3aWNlXG4gKiAoaS5lLiBvbmNlIGZvciBmaXJlYmFzZSwgYW5kIG9uY2UgaW4gdGhlIGNvbnNvbGUpLCB3ZSBhcmUgc2VuZGluZyBgREVCVUdgXG4gKiBsb2dzIHRvIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uLlxuICovXG5jb25zdCBDb25zb2xlTWV0aG9kID0ge1xuICBbTG9nTGV2ZWwuREVCVUddOiAnbG9nJyxcbiAgW0xvZ0xldmVsLlZFUkJPU0VdOiAnbG9nJyxcbiAgW0xvZ0xldmVsLklORk9dOiAnaW5mbycsXG4gIFtMb2dMZXZlbC5XQVJOXTogJ3dhcm4nLFxuICBbTG9nTGV2ZWwuRVJST1JdOiAnZXJyb3InXG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGxvZyBoYW5kbGVyIHdpbGwgZm9yd2FyZCBERUJVRywgVkVSQk9TRSwgSU5GTywgV0FSTiwgYW5kIEVSUk9SXG4gKiBtZXNzYWdlcyBvbiB0byB0aGVpciBjb3JyZXNwb25kaW5nIGNvbnNvbGUgY291bnRlcnBhcnRzIChpZiB0aGUgbG9nIG1ldGhvZFxuICogaXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGxvZyBsZXZlbClcbiAqL1xuY29uc3QgZGVmYXVsdExvZ0hhbmRsZXI6IExvZ0hhbmRsZXIgPSAoaW5zdGFuY2UsIGxvZ1R5cGUsIC4uLmFyZ3MpOiB2b2lkID0+IHtcbiAgaWYgKGxvZ1R5cGUgPCBpbnN0YW5jZS5sb2dMZXZlbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gIGNvbnN0IG1ldGhvZCA9IENvbnNvbGVNZXRob2RbbG9nVHlwZSBhcyBrZXlvZiB0eXBlb2YgQ29uc29sZU1ldGhvZF07XG4gIGlmIChtZXRob2QpIHtcbiAgICBjb25zb2xlW21ldGhvZCBhcyAnbG9nJyB8ICdpbmZvJyB8ICd3YXJuJyB8ICdlcnJvciddKFxuICAgICAgYFske25vd31dICAke2luc3RhbmNlLm5hbWV9OmAsXG4gICAgICAuLi5hcmdzXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQXR0ZW1wdGVkIHRvIGxvZyBhIG1lc3NhZ2Ugd2l0aCBhbiBpbnZhbGlkIGxvZ1R5cGUgKHZhbHVlOiAke2xvZ1R5cGV9KWBcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgLyoqXG4gICAqIEdpdmVzIHlvdSBhbiBpbnN0YW5jZSBvZiBhIExvZ2dlciB0byBjYXB0dXJlIG1lc3NhZ2VzIGFjY29yZGluZyB0b1xuICAgKiBGaXJlYmFzZSdzIGxvZ2dpbmcgc2NoZW1lLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0aGF0IHRoZSBsb2dzIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nKSB7XG4gICAgLyoqXG4gICAgICogQ2FwdHVyZSB0aGUgY3VycmVudCBpbnN0YW5jZSBmb3IgbGF0ZXIgdXNlXG4gICAgICovXG4gICAgaW5zdGFuY2VzLnB1c2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGxvZyBsZXZlbCBvZiB0aGUgZ2l2ZW4gTG9nZ2VyIGluc3RhbmNlLlxuICAgKi9cbiAgcHJpdmF0ZSBfbG9nTGV2ZWwgPSBkZWZhdWx0TG9nTGV2ZWw7XG5cbiAgZ2V0IGxvZ0xldmVsKCk6IExvZ0xldmVsIHtcbiAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XG4gIH1cblxuICBzZXQgbG9nTGV2ZWwodmFsOiBMb2dMZXZlbCkge1xuICAgIGlmICghKHZhbCBpbiBMb2dMZXZlbCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgdmFsdWUgXCIke3ZhbH1cIiBhc3NpZ25lZCB0byBcXGBsb2dMZXZlbFxcYGApO1xuICAgIH1cbiAgICB0aGlzLl9sb2dMZXZlbCA9IHZhbDtcbiAgfVxuXG4gIC8vIFdvcmthcm91bmQgZm9yIHNldHRlci9nZXR0ZXIgaGF2aW5nIHRvIGJlIHRoZSBzYW1lIHR5cGUuXG4gIHNldExvZ0xldmVsKHZhbDogTG9nTGV2ZWwgfCBMb2dMZXZlbFN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX2xvZ0xldmVsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBsZXZlbFN0cmluZ1RvRW51bVt2YWxdIDogdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIChpbnRlcm5hbCkgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXG4gICAqIENhbiBiZSBzZXQgdG8gYSBuZXcgZnVuY3Rpb24gaW4gaW50ZXJuYWwgcGFja2FnZSBjb2RlIGJ1dCBub3QgYnkgdXNlci5cbiAgICovXG4gIHByaXZhdGUgX2xvZ0hhbmRsZXI6IExvZ0hhbmRsZXIgPSBkZWZhdWx0TG9nSGFuZGxlcjtcbiAgZ2V0IGxvZ0hhbmRsZXIoKTogTG9nSGFuZGxlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xvZ0hhbmRsZXI7XG4gIH1cbiAgc2V0IGxvZ0hhbmRsZXIodmFsOiBMb2dIYW5kbGVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIGFzc2lnbmVkIHRvIGBsb2dIYW5kbGVyYCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdGhpcy5fbG9nSGFuZGxlciA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uYWwsIGFkZGl0aW9uYWwsIHVzZXItZGVmaW5lZCBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cbiAgICovXG4gIHByaXZhdGUgX3VzZXJMb2dIYW5kbGVyOiBMb2dIYW5kbGVyIHwgbnVsbCA9IG51bGw7XG4gIGdldCB1c2VyTG9nSGFuZGxlcigpOiBMb2dIYW5kbGVyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJMb2dIYW5kbGVyO1xuICB9XG4gIHNldCB1c2VyTG9nSGFuZGxlcih2YWw6IExvZ0hhbmRsZXIgfCBudWxsKSB7XG4gICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9ucyBiZWxvdyBhcmUgYWxsIGJhc2VkIG9uIHRoZSBgY29uc29sZWAgaW50ZXJmYWNlXG4gICAqL1xuXG4gIGRlYnVnKC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcbiAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcbiAgfVxuICBsb2coLi4uYXJnczogdW5rbm93bltdKTogdm9pZCB7XG4gICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiZcbiAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLlZFUkJPU0UsIC4uLmFyZ3MpO1xuICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuVkVSQk9TRSwgLi4uYXJncyk7XG4gIH1cbiAgaW5mbyguLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5JTkZPLCAuLi5hcmdzKTtcbiAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xuICB9XG4gIHdhcm4oLi4uYXJnczogdW5rbm93bltdKTogdm9pZCB7XG4gICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XG4gICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5XQVJOLCAuLi5hcmdzKTtcbiAgfVxuICBlcnJvciguLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5FUlJPUiwgLi4uYXJncyk7XG4gICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5FUlJPUiwgLi4uYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsOiBMb2dMZXZlbFN0cmluZyB8IExvZ0xldmVsKTogdm9pZCB7XG4gIGluc3RhbmNlcy5mb3JFYWNoKGluc3QgPT4ge1xuICAgIGluc3Quc2V0TG9nTGV2ZWwobGV2ZWwpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFVzZXJMb2dIYW5kbGVyKFxuICBsb2dDYWxsYmFjazogTG9nQ2FsbGJhY2sgfCBudWxsLFxuICBvcHRpb25zPzogTG9nT3B0aW9uc1xuKTogdm9pZCB7XG4gIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XG4gICAgbGV0IGN1c3RvbUxvZ0xldmVsOiBMb2dMZXZlbCB8IG51bGwgPSBudWxsO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGV2ZWwpIHtcbiAgICAgIGN1c3RvbUxvZ0xldmVsID0gbGV2ZWxTdHJpbmdUb0VudW1bb3B0aW9ucy5sZXZlbF07XG4gICAgfVxuICAgIGlmIChsb2dDYWxsYmFjayA9PT0gbnVsbCkge1xuICAgICAgaW5zdGFuY2UudXNlckxvZ0hhbmRsZXIgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IChcbiAgICAgICAgaW5zdGFuY2U6IExvZ2dlcixcbiAgICAgICAgbGV2ZWw6IExvZ0xldmVsLFxuICAgICAgICAuLi5hcmdzOiB1bmtub3duW11cbiAgICAgICkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYXJnc1xuICAgICAgICAgIC5tYXAoYXJnID0+IHtcbiAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmlsdGVyKGFyZyA9PiBhcmcpXG4gICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgICAgaWYgKGxldmVsID49IChjdXN0b21Mb2dMZXZlbCA/PyBpbnN0YW5jZS5sb2dMZXZlbCkpIHtcbiAgICAgICAgICBsb2dDYWxsYmFjayh7XG4gICAgICAgICAgICBsZXZlbDogTG9nTGV2ZWxbbGV2ZWxdLnRvTG93ZXJDYXNlKCkgYXMgTG9nTGV2ZWxTdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgIHR5cGU6IGluc3RhbmNlLm5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwiaW1wb3J0IHsgdyBhcyB3cmFwLCByIGFzIHJlcGxhY2VUcmFwcyB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuZXhwb3J0IHsgdSBhcyB1bndyYXAsIHcgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbiksIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZykge1xuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsIChldmVudCkgPT4gYmxvY2tpbmcoZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudENvbnRhaW5lcixcbiAgQ29tcG9uZW50VHlwZSxcbiAgUHJvdmlkZXIsXG4gIE5hbWVcbn0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2UsIFZlcnNpb25TZXJ2aWNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsIGltcGxlbWVudHMgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcikge31cbiAgLy8gSW4gaW5pdGlhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3aWxsIGJlIGNhbGxlZCBieSBpbnN0YWxsYXRpb25zIG9uXG4gIC8vIGF1dGggdG9rZW4gcmVmcmVzaCwgYW5kIGluc3RhbGxhdGlvbnMgd2lsbCBzZW5kIHRoaXMgc3RyaW5nLlxuICBnZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBwcm92aWRlcnMgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcnMoKTtcbiAgICAvLyBMb29wIHRocm91Z2ggcHJvdmlkZXJzIGFuZCBnZXQgbGlicmFyeS92ZXJzaW9uIHBhaXJzIGZyb20gYW55IHRoYXQgYXJlXG4gICAgLy8gdmVyc2lvbiBjb21wb25lbnRzLlxuICAgIHJldHVybiBwcm92aWRlcnNcbiAgICAgIC5tYXAocHJvdmlkZXIgPT4ge1xuICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKSBhcyBWZXJzaW9uU2VydmljZTtcbiAgICAgICAgICByZXR1cm4gYCR7c2VydmljZS5saWJyYXJ5fS8ke3NlcnZpY2UudmVyc2lvbn1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihsb2dTdHJpbmcgPT4gbG9nU3RyaW5nKVxuICAgICAgLmpvaW4oJyAnKTtcbiAgfVxufVxuLyoqXG4gKlxuICogQHBhcmFtIHByb3ZpZGVyIGNoZWNrIGlmIHRoaXMgcHJvdmlkZXIgcHJvdmlkZXMgYSBWZXJzaW9uU2VydmljZVxuICpcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxuICogcHJvdmlkZXMgVmVyc2lvblNlcnZpY2UuIFRoZSBwcm92aWRlciBpcyBub3QgbmVjZXNzYXJpbHkgYSAnYXBwLXZlcnNpb24nXG4gKiBwcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyOiBQcm92aWRlcjxOYW1lPik6IGJvb2xlYW4ge1xuICBjb25zdCBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcbiAgcmV0dXJuIGNvbXBvbmVudD8udHlwZSA9PT0gQ29tcG9uZW50VHlwZS5WRVJTSU9OO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5cbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXBwJyk7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBuYW1lIGFzIGFwcE5hbWUgfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBhcHBDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vYXBwLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBhbmFseXRpY3NDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvYW5hbHl0aWNzLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBhbmFseXRpY3NOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvYW5hbHl0aWNzL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGFwcENoZWNrQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2FwcC1jaGVjay1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgYXBwQ2hlY2tOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvYXBwLWNoZWNrL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGF1dGhOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvYXV0aC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBhdXRoQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2F1dGgtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGRhdGFiYXNlTmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2RhdGFiYXNlL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGRhdGFiYXNlQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2RhdGFiYXNlLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBmdW5jdGlvbnNOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvZnVuY3Rpb25zL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGZ1bmN0aW9uc0NvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9mdW5jdGlvbnMtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGluc3RhbGxhdGlvbnNOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvaW5zdGFsbGF0aW9ucy9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBpbnN0YWxsYXRpb25zQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2luc3RhbGxhdGlvbnMtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIG1lc3NhZ2luZ05hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9tZXNzYWdpbmcvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgbWVzc2FnaW5nQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL21lc3NhZ2luZy1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgcGVyZm9ybWFuY2VOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvcGVyZm9ybWFuY2UvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgcGVyZm9ybWFuY2VDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvcGVyZm9ybWFuY2UtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIHJlbW90ZUNvbmZpZ05hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9yZW1vdGUtY29uZmlnL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIHJlbW90ZUNvbmZpZ0NvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9yZW1vdGUtY29uZmlnLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBzdG9yYWdlTmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JhZ2UvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgc3RvcmFnZUNvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9zdG9yYWdlLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBmaXJlc3RvcmVOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvZmlyZXN0b3JlL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGZpcmVzdG9yZUNvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9maXJlc3RvcmUtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIHBhY2thZ2VOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvZmlyZWJhc2UvcGFja2FnZS5qc29uJztcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBhcHAgbmFtZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbmV4cG9ydCBjb25zdCBQTEFURk9STV9MT0dfU1RSSU5HID0ge1xuICBbYXBwTmFtZV06ICdmaXJlLWNvcmUnLFxuICBbYXBwQ29tcGF0TmFtZV06ICdmaXJlLWNvcmUtY29tcGF0JyxcbiAgW2FuYWx5dGljc05hbWVdOiAnZmlyZS1hbmFseXRpY3MnLFxuICBbYW5hbHl0aWNzQ29tcGF0TmFtZV06ICdmaXJlLWFuYWx5dGljcy1jb21wYXQnLFxuICBbYXBwQ2hlY2tOYW1lXTogJ2ZpcmUtYXBwLWNoZWNrJyxcbiAgW2FwcENoZWNrQ29tcGF0TmFtZV06ICdmaXJlLWFwcC1jaGVjay1jb21wYXQnLFxuICBbYXV0aE5hbWVdOiAnZmlyZS1hdXRoJyxcbiAgW2F1dGhDb21wYXROYW1lXTogJ2ZpcmUtYXV0aC1jb21wYXQnLFxuICBbZGF0YWJhc2VOYW1lXTogJ2ZpcmUtcnRkYicsXG4gIFtkYXRhYmFzZUNvbXBhdE5hbWVdOiAnZmlyZS1ydGRiLWNvbXBhdCcsXG4gIFtmdW5jdGlvbnNOYW1lXTogJ2ZpcmUtZm4nLFxuICBbZnVuY3Rpb25zQ29tcGF0TmFtZV06ICdmaXJlLWZuLWNvbXBhdCcsXG4gIFtpbnN0YWxsYXRpb25zTmFtZV06ICdmaXJlLWlpZCcsXG4gIFtpbnN0YWxsYXRpb25zQ29tcGF0TmFtZV06ICdmaXJlLWlpZC1jb21wYXQnLFxuICBbbWVzc2FnaW5nTmFtZV06ICdmaXJlLWZjbScsXG4gIFttZXNzYWdpbmdDb21wYXROYW1lXTogJ2ZpcmUtZmNtLWNvbXBhdCcsXG4gIFtwZXJmb3JtYW5jZU5hbWVdOiAnZmlyZS1wZXJmJyxcbiAgW3BlcmZvcm1hbmNlQ29tcGF0TmFtZV06ICdmaXJlLXBlcmYtY29tcGF0JyxcbiAgW3JlbW90ZUNvbmZpZ05hbWVdOiAnZmlyZS1yYycsXG4gIFtyZW1vdGVDb25maWdDb21wYXROYW1lXTogJ2ZpcmUtcmMtY29tcGF0JyxcbiAgW3N0b3JhZ2VOYW1lXTogJ2ZpcmUtZ2NzJyxcbiAgW3N0b3JhZ2VDb21wYXROYW1lXTogJ2ZpcmUtZ2NzLWNvbXBhdCcsXG4gIFtmaXJlc3RvcmVOYW1lXTogJ2ZpcmUtZnN0JyxcbiAgW2ZpcmVzdG9yZUNvbXBhdE5hbWVdOiAnZmlyZS1mc3QtY29tcGF0JyxcbiAgJ2ZpcmUtanMnOiAnZmlyZS1qcycsIC8vIFBsYXRmb3JtIGlkZW50aWZpZXIgZm9yIEpTIFNESy5cbiAgW3BhY2thZ2VOYW1lXTogJ2ZpcmUtanMtYWxsJ1xufSBhcyBjb25zdDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZpcmViYXNlQXBwIH0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm92aWRlciwgTmFtZSB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgREVGQVVMVF9FTlRSWV9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBJbXBsIH0gZnJvbSAnLi9maXJlYmFzZUFwcCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBfYXBwcyA9IG5ldyBNYXA8c3RyaW5nLCBGaXJlYmFzZUFwcD4oKTtcblxuLyoqXG4gKiBSZWdpc3RlcmVkIGNvbXBvbmVudHMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgY29uc3QgX2NvbXBvbmVudHMgPSBuZXcgTWFwPHN0cmluZywgQ29tcG9uZW50PGFueT4+KCk7XG5cbi8qKlxuICogQHBhcmFtIGNvbXBvbmVudCAtIHRoZSBjb21wb25lbnQgYmVpbmcgYWRkZWQgdG8gdGhpcyBhcHAncyBjb250YWluZXJcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9hZGRDb21wb25lbnQ8VCBleHRlbmRzIE5hbWU+KFxuICBhcHA6IEZpcmViYXNlQXBwLFxuICBjb21wb25lbnQ6IENvbXBvbmVudDxUPlxuKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgJHthcHAubmFtZX1gLFxuICAgICAgZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoXG4gIGFwcDogRmlyZWJhc2VBcHAsXG4gIGNvbXBvbmVudDogQ29tcG9uZW50XG4pOiB2b2lkIHtcbiAgKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCB0byByZWdpc3RlclxuICogQHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX3JlZ2lzdGVyQ29tcG9uZW50PFQgZXh0ZW5kcyBOYW1lPihcbiAgY29tcG9uZW50OiBDb21wb25lbnQ8VD5cbik6IGJvb2xlYW4ge1xuICBjb25zdCBjb21wb25lbnROYW1lID0gY29tcG9uZW50Lm5hbWU7XG4gIGlmIChfY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcbiAgICBsb2dnZXIuZGVidWcoXG4gICAgICBgVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgJHtjb21wb25lbnROYW1lfS5gXG4gICAgKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9jb21wb25lbnRzLnNldChjb21wb25lbnROYW1lLCBjb21wb25lbnQpO1xuXG4gIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcbiAgZm9yIChjb25zdCBhcHAgb2YgX2FwcHMudmFsdWVzKCkpIHtcbiAgICBfYWRkQ29tcG9uZW50KGFwcCBhcyBGaXJlYmFzZUFwcEltcGwsIGNvbXBvbmVudCk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxuICpcbiAqIEByZXR1cm5zIHRoZSBwcm92aWRlciBmb3IgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2dldFByb3ZpZGVyPFQgZXh0ZW5kcyBOYW1lPihcbiAgYXBwOiBGaXJlYmFzZUFwcCxcbiAgbmFtZTogVFxuKTogUHJvdmlkZXI8VD4ge1xuICBjb25zdCBoZWFydGJlYXRDb250cm9sbGVyID0gKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lclxuICAgIC5nZXRQcm92aWRlcignaGVhcnRiZWF0JylcbiAgICAuZ2V0SW1tZWRpYXRlKHsgb3B0aW9uYWw6IHRydWUgfSk7XG4gIGlmIChoZWFydGJlYXRDb250cm9sbGVyKSB7XG4gICAgdm9pZCBoZWFydGJlYXRDb250cm9sbGVyLnRyaWdnZXJIZWFydGJlYXQoKTtcbiAgfVxuICByZXR1cm4gKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxuICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciAtIHNlcnZpY2UgaW5zdGFuY2UgaWRlbnRpZmllciBpbiBjYXNlIHRoZSBzZXJ2aWNlIHN1cHBvcnRzIG11bHRpcGxlIGluc3RhbmNlc1xuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX3JlbW92ZVNlcnZpY2VJbnN0YW5jZTxUIGV4dGVuZHMgTmFtZT4oXG4gIGFwcDogRmlyZWJhc2VBcHAsXG4gIG5hbWU6IFQsXG4gIGluc3RhbmNlSWRlbnRpZmllcjogc3RyaW5nID0gREVGQVVMVF9FTlRSWV9OQU1FXG4pOiB2b2lkIHtcbiAgX2dldFByb3ZpZGVyKGFwcCwgbmFtZSkuY2xlYXJJbnN0YW5jZShpbnN0YW5jZUlkZW50aWZpZXIpO1xufVxuXG4vKipcbiAqIFRlc3Qgb25seVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NsZWFyQ29tcG9uZW50cygpOiB2b2lkIHtcbiAgX2NvbXBvbmVudHMuY2xlYXIoKTtcbn1cblxuLyoqXG4gKiBFeHBvcnRlZCBpbiBvcmRlciB0byBiZSB1c2VkIGluIGFwcC1jb21wYXQgcGFja2FnZVxuICovXG5leHBvcnQgeyBERUZBVUxUX0VOVFJZX05BTUUgYXMgX0RFRkFVTFRfRU5UUllfTkFNRSB9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRXJyb3JGYWN0b3J5LCBFcnJvck1hcCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuZXhwb3J0IGNvbnN0IGVudW0gQXBwRXJyb3Ige1xuICBOT19BUFAgPSAnbm8tYXBwJyxcbiAgQkFEX0FQUF9OQU1FID0gJ2JhZC1hcHAtbmFtZScsXG4gIERVUExJQ0FURV9BUFAgPSAnZHVwbGljYXRlLWFwcCcsXG4gIEFQUF9ERUxFVEVEID0gJ2FwcC1kZWxldGVkJyxcbiAgTk9fT1BUSU9OUyA9ICduby1vcHRpb25zJyxcbiAgSU5WQUxJRF9BUFBfQVJHVU1FTlQgPSAnaW52YWxpZC1hcHAtYXJndW1lbnQnLFxuICBJTlZBTElEX0xPR19BUkdVTUVOVCA9ICdpbnZhbGlkLWxvZy1hcmd1bWVudCcsXG4gIElEQl9PUEVOID0gJ2lkYi1vcGVuJyxcbiAgSURCX0dFVCA9ICdpZGItZ2V0JyxcbiAgSURCX1dSSVRFID0gJ2lkYi1zZXQnLFxuICBJREJfREVMRVRFID0gJ2lkYi1kZWxldGUnXG59XG5cbmNvbnN0IEVSUk9SUzogRXJyb3JNYXA8QXBwRXJyb3I+ID0ge1xuICBbQXBwRXJyb3IuTk9fQVBQXTpcbiAgICBcIk5vIEZpcmViYXNlIEFwcCAneyRhcHBOYW1lfScgaGFzIGJlZW4gY3JlYXRlZCAtIFwiICtcbiAgICAnY2FsbCBpbml0aWFsaXplQXBwKCkgZmlyc3QnLFxuICBbQXBwRXJyb3IuQkFEX0FQUF9OQU1FXTogXCJJbGxlZ2FsIEFwcCBuYW1lOiAneyRhcHBOYW1lfVwiLFxuICBbQXBwRXJyb3IuRFVQTElDQVRFX0FQUF06XG4gICAgXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZXhpc3RzIHdpdGggZGlmZmVyZW50IG9wdGlvbnMgb3IgY29uZmlnXCIsXG4gIFtBcHBFcnJvci5BUFBfREVMRVRFRF06IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGRlbGV0ZWRcIixcbiAgW0FwcEVycm9yLk5PX09QVElPTlNdOlxuICAgICdOZWVkIHRvIHByb3ZpZGUgb3B0aW9ucywgd2hlbiBub3QgYmVpbmcgZGVwbG95ZWQgdG8gaG9zdGluZyB2aWEgc291cmNlLicsXG4gIFtBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVF06XG4gICAgJ2ZpcmViYXNlLnskYXBwTmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcbiAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLicsXG4gIFtBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVF06XG4gICAgJ0ZpcnN0IGFyZ3VtZW50IHRvIGBvbkxvZ2AgbXVzdCBiZSBudWxsIG9yIGEgZnVuY3Rpb24uJyxcbiAgW0FwcEVycm9yLklEQl9PUEVOXTpcbiAgICAnRXJyb3IgdGhyb3duIHdoZW4gb3BlbmluZyBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxuICBbQXBwRXJyb3IuSURCX0dFVF06XG4gICAgJ0Vycm9yIHRocm93biB3aGVuIHJlYWRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxuICBbQXBwRXJyb3IuSURCX1dSSVRFXTpcbiAgICAnRXJyb3IgdGhyb3duIHdoZW4gd3JpdGluZyB0byBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxuICBbQXBwRXJyb3IuSURCX0RFTEVURV06XG4gICAgJ0Vycm9yIHRocm93biB3aGVuIGRlbGV0aW5nIGZyb20gSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJ1xufTtcblxuaW50ZXJmYWNlIEVycm9yUGFyYW1zIHtcbiAgW0FwcEVycm9yLk5PX0FQUF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5CQURfQVBQX05BTUVdOiB7IGFwcE5hbWU6IHN0cmluZyB9O1xuICBbQXBwRXJyb3IuRFVQTElDQVRFX0FQUF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5BUFBfREVMRVRFRF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5JREJfT1BFTl06IHsgb3JpZ2luYWxFcnJvck1lc3NhZ2U/OiBzdHJpbmcgfTtcbiAgW0FwcEVycm9yLklEQl9HRVRdOiB7IG9yaWdpbmFsRXJyb3JNZXNzYWdlPzogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5JREJfV1JJVEVdOiB7IG9yaWdpbmFsRXJyb3JNZXNzYWdlPzogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5JREJfREVMRVRFXTogeyBvcmlnaW5hbEVycm9yTWVzc2FnZT86IHN0cmluZyB9O1xufVxuXG5leHBvcnQgY29uc3QgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3Rvcnk8QXBwRXJyb3IsIEVycm9yUGFyYW1zPihcbiAgJ2FwcCcsXG4gICdGaXJlYmFzZScsXG4gIEVSUk9SU1xuKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEZpcmViYXNlQXBwLFxuICBGaXJlYmFzZU9wdGlvbnMsXG4gIEZpcmViYXNlQXBwU2V0dGluZ3Ncbn0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50Q29udGFpbmVyLFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudFR5cGVcbn0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBFUlJPUl9GQUNUT1JZLCBBcHBFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIEZpcmViYXNlQXBwSW1wbCBpbXBsZW1lbnRzIEZpcmViYXNlQXBwIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uczogRmlyZWJhc2VPcHRpb25zO1xuICBwcml2YXRlIHJlYWRvbmx5IF9uYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcmlnaW5hbCBjb25maWcgdmFsdWVzIHBhc3NlZCBpbiBhcyBhIGNvbnN0cnVjdG9yIHBhcmFtZXRlci5cbiAgICogSXQgaXMgb25seSB1c2VkIHRvIGNvbXBhcmUgd2l0aCBhbm90aGVyIGNvbmZpZyBvYmplY3QgdG8gc3VwcG9ydCBpZGVtcG90ZW50IGluaXRpYWxpemVBcHAoKS5cbiAgICpcbiAgICogVXBkYXRpbmcgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIG9uIHRoZSBBcHAgaW5zdGFuY2Ugd2lsbCBub3QgY2hhbmdlIGl0cyB2YWx1ZSBpbiBfY29uZmlnLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBSZXF1aXJlZDxGaXJlYmFzZUFwcFNldHRpbmdzPjtcbiAgcHJpdmF0ZSBfYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkOiBib29sZWFuO1xuICBwcml2YXRlIF9pc0RlbGV0ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSByZWFkb25seSBfY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICAgIGNvbmZpZzogUmVxdWlyZWQ8RmlyZWJhc2VBcHBTZXR0aW5ncz4sXG4gICAgY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXJcbiAgKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuX2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gICAgdGhpcy5fbmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9XG4gICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgQ29tcG9uZW50KCdhcHAnLCAoKSA9PiB0aGlzLCBDb21wb25lbnRUeXBlLlBVQkxJQylcbiAgICApO1xuICB9XG5cbiAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcbiAgfVxuXG4gIHNldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xuICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHZhbDtcbiAgfVxuXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICB9XG5cbiAgZ2V0IG9wdGlvbnMoKTogRmlyZWJhc2VPcHRpb25zIHtcbiAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBnZXQgY29uZmlnKCk6IFJlcXVpcmVkPEZpcmViYXNlQXBwU2V0dGluZ3M+IHtcbiAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcbiAgfVxuXG4gIGdldCBjb250YWluZXIoKTogQ29tcG9uZW50Q29udGFpbmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICB9XG5cbiAgZ2V0IGlzRGVsZXRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNEZWxldGVkO1xuICB9XG5cbiAgc2V0IGlzRGVsZXRlZCh2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc0RlbGV0ZWQgPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cbiAgICogdXNlIGJlZm9yZSBwZXJmb3JtaW5nIEFQSSBhY3Rpb25zIG9uIHRoZSBBcHAuXG4gICAqL1xuICBwcml2YXRlIGNoZWNrRGVzdHJveWVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRGVsZXRlZCkge1xuICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoQXBwRXJyb3IuQVBQX0RFTEVURUQsIHsgYXBwTmFtZTogdGhpcy5fbmFtZSB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEZpcmViYXNlQXBwLFxuICBGaXJlYmFzZU9wdGlvbnMsXG4gIEZpcmViYXNlQXBwU2V0dGluZ3Ncbn0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHsgREVGQVVMVF9FTlRSWV9OQU1FLCBQTEFURk9STV9MT0dfU1RSSU5HIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRVJST1JfRkFDVE9SWSwgQXBwRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQge1xuICBDb21wb25lbnRDb250YWluZXIsXG4gIENvbXBvbmVudCxcbiAgTmFtZSxcbiAgQ29tcG9uZW50VHlwZVxufSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi8uLi9maXJlYmFzZS9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBJbXBsIH0gZnJvbSAnLi9maXJlYmFzZUFwcCc7XG5pbXBvcnQgeyBfYXBwcywgX2NvbXBvbmVudHMsIF9yZWdpc3RlckNvbXBvbmVudCB9IGZyb20gJy4vaW50ZXJuYWwnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHtcbiAgTG9nTGV2ZWxTdHJpbmcsXG4gIHNldExvZ0xldmVsIGFzIHNldExvZ0xldmVsSW1wbCxcbiAgTG9nQ2FsbGJhY2ssXG4gIExvZ09wdGlvbnMsXG4gIHNldFVzZXJMb2dIYW5kbGVyXG59IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuaW1wb3J0IHsgZGVlcEVxdWFsLCBnZXREZWZhdWx0QXBwQ29uZmlnIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5leHBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50IFNESyB2ZXJzaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OID0gdmVyc2lvbjtcblxuLyoqXG4gKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cbiAqXG4gKiBTZWVcbiAqIHtAbGlua1xuICogICBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy93ZWIvc2V0dXAjYWRkX2ZpcmViYXNlX3RvX3lvdXJfYXBwXG4gKiAgIHwgQWRkIEZpcmViYXNlIHRvIHlvdXIgYXBwfSBhbmRcbiAqIHtAbGlua1xuICogICBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy93ZWIvc2V0dXAjbXVsdGlwbGUtcHJvamVjdHNcbiAqICAgfCBJbml0aWFsaXplIG11bHRpcGxlIHByb2plY3RzfSBmb3IgZGV0YWlsZWQgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICpcbiAqIC8vIEluaXRpYWxpemUgZGVmYXVsdCBhcHBcbiAqIC8vIFJldHJpZXZlIHlvdXIgb3duIG9wdGlvbnMgdmFsdWVzIGJ5IGFkZGluZyBhIHdlYiBhcHAgb25cbiAqIC8vIGh0dHBzOi8vY29uc29sZS5maXJlYmFzZS5nb29nbGUuY29tXG4gKiBpbml0aWFsaXplQXBwKHtcbiAqICAgYXBpS2V5OiBcIkFJemEuLi4uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdXRoIC8gR2VuZXJhbCBVc2VcbiAqICAgYXV0aERvbWFpbjogXCJZT1VSX0FQUC5maXJlYmFzZWFwcC5jb21cIiwgICAgICAgICAvLyBBdXRoIHdpdGggcG9wdXAvcmVkaXJlY3RcbiAqICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9ZT1VSX0FQUC5maXJlYmFzZWlvLmNvbVwiLCAvLyBSZWFsdGltZSBEYXRhYmFzZVxuICogICBzdG9yYWdlQnVja2V0OiBcIllPVVJfQVBQLmFwcHNwb3QuY29tXCIsICAgICAgICAgIC8vIFN0b3JhZ2VcbiAqICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMTIzNDU2Nzg5XCIgICAgICAgICAgICAgICAgICAvLyBDbG91ZCBNZXNzYWdpbmdcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqXG4gKiAvLyBJbml0aWFsaXplIGFub3RoZXIgYXBwXG4gKiBjb25zdCBvdGhlckFwcCA9IGluaXRpYWxpemVBcHAoe1xuICogICBkYXRhYmFzZVVSTDogXCJodHRwczovLzxPVEhFUl9EQVRBQkFTRV9OQU1FPi5maXJlYmFzZWlvLmNvbVwiLFxuICogICBzdG9yYWdlQnVja2V0OiBcIjxPVEhFUl9TVE9SQUdFX0JVQ0tFVD4uYXBwc3BvdC5jb21cIlxuICogfSwgXCJvdGhlckFwcFwiKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgdGhlIGFwcCdzIHNlcnZpY2VzLlxuICogQHBhcmFtIG5hbWUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBhcHAgdG8gaW5pdGlhbGl6ZS4gSWYgbm8gbmFtZVxuICogICBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQgaXMgYFwiW0RFRkFVTFRdXCJgLlxuICpcbiAqIEByZXR1cm5zIFRoZSBpbml0aWFsaXplZCBhcHAuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChcbiAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICBuYW1lPzogc3RyaW5nXG4pOiBGaXJlYmFzZUFwcDtcbi8qKlxuICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBGaXJlYmFzZUFwcCBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSBhcHAncyBzZXJ2aWNlcy5cbiAqIEBwYXJhbSBjb25maWcgLSBGaXJlYmFzZUFwcCBDb25maWd1cmF0aW9uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChcbiAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICBjb25maWc/OiBGaXJlYmFzZUFwcFNldHRpbmdzXG4pOiBGaXJlYmFzZUFwcDtcbi8qKlxuICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBGaXJlYmFzZUFwcCBpbnN0YW5jZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplQXBwKCk6IEZpcmViYXNlQXBwO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVBcHAoXG4gIF9vcHRpb25zPzogRmlyZWJhc2VPcHRpb25zLFxuICByYXdDb25maWcgPSB7fVxuKTogRmlyZWJhc2VBcHAge1xuICBsZXQgb3B0aW9ucyA9IF9vcHRpb25zO1xuXG4gIGlmICh0eXBlb2YgcmF3Q29uZmlnICE9PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IG5hbWUgPSByYXdDb25maWc7XG4gICAgcmF3Q29uZmlnID0geyBuYW1lIH07XG4gIH1cblxuICBjb25zdCBjb25maWc6IFJlcXVpcmVkPEZpcmViYXNlQXBwU2V0dGluZ3M+ID0ge1xuICAgIG5hbWU6IERFRkFVTFRfRU5UUllfTkFNRSxcbiAgICBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IGZhbHNlLFxuICAgIC4uLnJhd0NvbmZpZ1xuICB9O1xuICBjb25zdCBuYW1lID0gY29uZmlnLm5hbWU7XG5cbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCAhbmFtZSkge1xuICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLkJBRF9BUFBfTkFNRSwge1xuICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXG4gICAgfSk7XG4gIH1cblxuICBvcHRpb25zIHx8PSBnZXREZWZhdWx0QXBwQ29uZmlnKCk7XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoQXBwRXJyb3IuTk9fT1BUSU9OUyk7XG4gIH1cblxuICBjb25zdCBleGlzdGluZ0FwcCA9IF9hcHBzLmdldChuYW1lKSBhcyBGaXJlYmFzZUFwcEltcGw7XG4gIGlmIChleGlzdGluZ0FwcCkge1xuICAgIC8vIHJldHVybiB0aGUgZXhpc3RpbmcgYXBwIGlmIG9wdGlvbnMgYW5kIGNvbmZpZyBkZWVwIGVxdWFsIHRoZSBvbmVzIGluIHRoZSBleGlzdGluZyBhcHAuXG4gICAgaWYgKFxuICAgICAgZGVlcEVxdWFsKG9wdGlvbnMsIGV4aXN0aW5nQXBwLm9wdGlvbnMpICYmXG4gICAgICBkZWVwRXF1YWwoY29uZmlnLCBleGlzdGluZ0FwcC5jb25maWcpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZXhpc3RpbmdBcHA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLkRVUExJQ0FURV9BUFAsIHsgYXBwTmFtZTogbmFtZSB9KTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb250YWluZXIgPSBuZXcgQ29tcG9uZW50Q29udGFpbmVyKG5hbWUpO1xuICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBfY29tcG9uZW50cy52YWx1ZXMoKSkge1xuICAgIGNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfVxuXG4gIGNvbnN0IG5ld0FwcCA9IG5ldyBGaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBjb250YWluZXIpO1xuXG4gIF9hcHBzLnNldChuYW1lLCBuZXdBcHApO1xuXG4gIHJldHVybiBuZXdBcHA7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIGEge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IGluc3RhbmNlLlxuICpcbiAqIFdoZW4gY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCB0aGUgZGVmYXVsdCBhcHAgaXMgcmV0dXJuZWQuIFdoZW4gYW4gYXBwIG5hbWVcbiAqIGlzIHByb3ZpZGVkLCB0aGUgYXBwIGNvcnJlc3BvbmRpbmcgdG8gdGhhdCBuYW1lIGlzIHJldHVybmVkLlxuICpcbiAqIEFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgdGhlIGFwcCBiZWluZyByZXRyaWV2ZWQgaGFzIG5vdCB5ZXQgYmVlblxuICogaW5pdGlhbGl6ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFJldHVybiB0aGUgZGVmYXVsdCBhcHBcbiAqIGNvbnN0IGFwcCA9IGdldEFwcCgpO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFJldHVybiBhIG5hbWVkIGFwcFxuICogY29uc3Qgb3RoZXJBcHAgPSBnZXRBcHAoXCJvdGhlckFwcFwiKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBuYW1lIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgYXBwIHRvIHJldHVybi4gSWYgbm8gbmFtZSBpc1xuICogICBwcm92aWRlZCwgdGhlIGRlZmF1bHQgaXMgYFwiW0RFRkFVTFRdXCJgLlxuICpcbiAqIEByZXR1cm5zIFRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgYXBwIG5hbWUuXG4gKiAgIElmIG5vIGFwcCBuYW1lIGlzIHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBhcHAgaXMgcmV0dXJuZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwKG5hbWU6IHN0cmluZyA9IERFRkFVTFRfRU5UUllfTkFNRSk6IEZpcmViYXNlQXBwIHtcbiAgY29uc3QgYXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xuICBpZiAoIWFwcCAmJiBuYW1lID09PSBERUZBVUxUX0VOVFJZX05BTUUgJiYgZ2V0RGVmYXVsdEFwcENvbmZpZygpKSB7XG4gICAgcmV0dXJuIGluaXRpYWxpemVBcHAoKTtcbiAgfVxuICBpZiAoIWFwcCkge1xuICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLk5PX0FQUCwgeyBhcHBOYW1lOiBuYW1lIH0pO1xuICB9XG5cbiAgcmV0dXJuIGFwcDtcbn1cblxuLyoqXG4gKiBBIChyZWFkLW9ubHkpIGFycmF5IG9mIGFsbCBpbml0aWFsaXplZCBhcHBzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwcygpOiBGaXJlYmFzZUFwcFtdIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oX2FwcHMudmFsdWVzKCkpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhpcyBhcHAgdW51c2FibGUgYW5kIGZyZWVzIHRoZSByZXNvdXJjZXMgb2YgYWxsIGFzc29jaWF0ZWRcbiAqIHNlcnZpY2VzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBkZWxldGVBcHAoYXBwKVxuICogICAudGhlbihmdW5jdGlvbigpIHtcbiAqICAgICBjb25zb2xlLmxvZyhcIkFwcCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAqICAgfSlcbiAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gKiAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWxldGluZyBhcHA6XCIsIGVycm9yKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVBcHAoYXBwOiBGaXJlYmFzZUFwcCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBuYW1lID0gYXBwLm5hbWU7XG4gIGlmIChfYXBwcy5oYXMobmFtZSkpIHtcbiAgICBfYXBwcy5kZWxldGUobmFtZSk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAoYXBwIGFzIEZpcmViYXNlQXBwSW1wbCkuY29udGFpbmVyXG4gICAgICAgIC5nZXRQcm92aWRlcnMoKVxuICAgICAgICAubWFwKHByb3ZpZGVyID0+IHByb3ZpZGVyLmRlbGV0ZSgpKVxuICAgICk7XG4gICAgKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmlzRGVsZXRlZCA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBsaWJyYXJ5J3MgbmFtZSBhbmQgdmVyc2lvbiBmb3IgcGxhdGZvcm0gbG9nZ2luZyBwdXJwb3Nlcy5cbiAqIEBwYXJhbSBsaWJyYXJ5IC0gTmFtZSBvZiAxcCBvciAzcCBsaWJyYXJ5IChlLmcuIGZpcmVzdG9yZSwgYW5ndWxhcmZpcmUpXG4gKiBAcGFyYW0gdmVyc2lvbiAtIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGF0IGxpYnJhcnkuXG4gKiBAcGFyYW0gdmFyaWFudCAtIEJ1bmRsZSB2YXJpYW50LCBlLmcuLCBub2RlLCBybiwgZXRjLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVmVyc2lvbihcbiAgbGlicmFyeUtleU9yTmFtZTogc3RyaW5nLFxuICB2ZXJzaW9uOiBzdHJpbmcsXG4gIHZhcmlhbnQ/OiBzdHJpbmdcbik6IHZvaWQge1xuICAvLyBUT0RPOiBXZSBjYW4gdXNlIHRoaXMgY2hlY2sgdG8gd2hpdGVsaXN0IHN0cmluZ3Mgd2hlbi9pZiB3ZSBzZXQgdXBcbiAgLy8gYSBnb29kIHdoaXRlbGlzdCBzeXN0ZW0uXG4gIGxldCBsaWJyYXJ5ID0gUExBVEZPUk1fTE9HX1NUUklOR1tsaWJyYXJ5S2V5T3JOYW1lXSA/PyBsaWJyYXJ5S2V5T3JOYW1lO1xuICBpZiAodmFyaWFudCkge1xuICAgIGxpYnJhcnkgKz0gYC0ke3ZhcmlhbnR9YDtcbiAgfVxuICBjb25zdCBsaWJyYXJ5TWlzbWF0Y2ggPSBsaWJyYXJ5Lm1hdGNoKC9cXHN8XFwvLyk7XG4gIGNvbnN0IHZlcnNpb25NaXNtYXRjaCA9IHZlcnNpb24ubWF0Y2goL1xcc3xcXC8vKTtcbiAgaWYgKGxpYnJhcnlNaXNtYXRjaCB8fCB2ZXJzaW9uTWlzbWF0Y2gpIHtcbiAgICBjb25zdCB3YXJuaW5nID0gW1xuICAgICAgYFVuYWJsZSB0byByZWdpc3RlciBsaWJyYXJ5IFwiJHtsaWJyYXJ5fVwiIHdpdGggdmVyc2lvbiBcIiR7dmVyc2lvbn1cIjpgXG4gICAgXTtcbiAgICBpZiAobGlicmFyeU1pc21hdGNoKSB7XG4gICAgICB3YXJuaW5nLnB1c2goXG4gICAgICAgIGBsaWJyYXJ5IG5hbWUgXCIke2xpYnJhcnl9XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFwiL1wiKWBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggJiYgdmVyc2lvbk1pc21hdGNoKSB7XG4gICAgICB3YXJuaW5nLnB1c2goJ2FuZCcpO1xuICAgIH1cbiAgICBpZiAodmVyc2lvbk1pc21hdGNoKSB7XG4gICAgICB3YXJuaW5nLnB1c2goXG4gICAgICAgIGB2ZXJzaW9uIG5hbWUgXCIke3ZlcnNpb259XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFwiL1wiKWBcbiAgICAgICk7XG4gICAgfVxuICAgIGxvZ2dlci53YXJuKHdhcm5pbmcuam9pbignICcpKTtcbiAgICByZXR1cm47XG4gIH1cbiAgX3JlZ2lzdGVyQ29tcG9uZW50KFxuICAgIG5ldyBDb21wb25lbnQoXG4gICAgICBgJHtsaWJyYXJ5fS12ZXJzaW9uYCBhcyBOYW1lLFxuICAgICAgKCkgPT4gKHsgbGlicmFyeSwgdmVyc2lvbiB9KSxcbiAgICAgIENvbXBvbmVudFR5cGUuVkVSU0lPTlxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBTZXRzIGxvZyBoYW5kbGVyIGZvciBhbGwgRmlyZWJhc2UgU0RLcy5cbiAqIEBwYXJhbSBsb2dDYWxsYmFjayAtIEFuIG9wdGlvbmFsIGN1c3RvbSBsb2cgaGFuZGxlciB0aGF0IGV4ZWN1dGVzIHVzZXIgY29kZSB3aGVuZXZlclxuICogdGhlIEZpcmViYXNlIFNESyBtYWtlcyBhIGxvZ2dpbmcgY2FsbC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkxvZyhcbiAgbG9nQ2FsbGJhY2s6IExvZ0NhbGxiYWNrIHwgbnVsbCxcbiAgb3B0aW9ucz86IExvZ09wdGlvbnNcbik6IHZvaWQge1xuICBpZiAobG9nQ2FsbGJhY2sgIT09IG51bGwgJiYgdHlwZW9mIGxvZ0NhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoQXBwRXJyb3IuSU5WQUxJRF9MT0dfQVJHVU1FTlQpO1xuICB9XG4gIHNldFVzZXJMb2dIYW5kbGVyKGxvZ0NhbGxiYWNrLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBTZXRzIGxvZyBsZXZlbCBmb3IgYWxsIEZpcmViYXNlIFNES3MuXG4gKlxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIGFyZSBjYXB0dXJlZCAoaS5lLiBpZlxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBpbmZvYCwgZXJyb3JzIGFyZSBsb2dnZWQsIGJ1dCBgZGVidWdgIGFuZFxuICogYHZlcmJvc2VgIGxvZ3MgYXJlIG5vdCkuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9nTGV2ZWwobG9nTGV2ZWw6IExvZ0xldmVsU3RyaW5nKTogdm9pZCB7XG4gIHNldExvZ0xldmVsSW1wbChsb2dMZXZlbCk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgREJTY2hlbWEsIG9wZW5EQiwgSURCUERhdGFiYXNlIH0gZnJvbSAnaWRiJztcbmltcG9ydCB7IEFwcEVycm9yLCBFUlJPUl9GQUNUT1JZIH0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHAgfSBmcm9tICcuL3B1YmxpYy10eXBlcyc7XG5pbXBvcnQgeyBIZWFydGJlYXRzSW5JbmRleGVkREIgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgREJfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtZGF0YWJhc2UnO1xuY29uc3QgREJfVkVSU0lPTiA9IDE7XG5jb25zdCBTVE9SRV9OQU1FID0gJ2ZpcmViYXNlLWhlYXJ0YmVhdC1zdG9yZSc7XG5cbmludGVyZmFjZSBBcHBEQiBleHRlbmRzIERCU2NoZW1hIHtcbiAgJ2ZpcmViYXNlLWhlYXJ0YmVhdC1zdG9yZSc6IHtcbiAgICBrZXk6IHN0cmluZztcbiAgICB2YWx1ZTogSGVhcnRiZWF0c0luSW5kZXhlZERCO1xuICB9O1xufVxuXG5sZXQgZGJQcm9taXNlOiBQcm9taXNlPElEQlBEYXRhYmFzZTxBcHBEQj4+IHwgbnVsbCA9IG51bGw7XG5mdW5jdGlvbiBnZXREYlByb21pc2UoKTogUHJvbWlzZTxJREJQRGF0YWJhc2U8QXBwREI+PiB7XG4gIGlmICghZGJQcm9taXNlKSB7XG4gICAgZGJQcm9taXNlID0gb3BlbkRCPEFwcERCPihEQl9OQU1FLCBEQl9WRVJTSU9OLCB7XG4gICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgdXNlICdicmVhaycgaW4gdGhpcyBzd2l0Y2ggc3RhdGVtZW50LCB0aGUgZmFsbC10aHJvdWdoXG4gICAgICAgIC8vIGJlaGF2aW9yIGlzIHdoYXQgd2Ugd2FudCwgYmVjYXVzZSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgYmV0d2VlblxuICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXG4gICAgICAgIC8vIHRoYXQgY29ycmVzcG9uZCB0byB0aG9zZSB2ZXJzaW9ucyB0byBydW4sIG5vdCBvbmx5IHRoZSBsYXN0IG9uZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxuICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShTVE9SRV9OQU1FKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoQXBwRXJyb3IuSURCX09QRU4sIHtcbiAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGRiUHJvbWlzZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQihcbiAgYXBwOiBGaXJlYmFzZUFwcFxuKTogUHJvbWlzZTxIZWFydGJlYXRzSW5JbmRleGVkREIgfCB1bmRlZmluZWQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSlcbiAgICAgIC5vYmplY3RTdG9yZShTVE9SRV9OQU1FKVxuICAgICAgLmdldChjb21wdXRlS2V5KGFwcCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcbiAgICAgIGxvZ2dlci53YXJuKGUubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoQXBwRXJyb3IuSURCX0dFVCwge1xuICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogKGUgYXMgRXJyb3IpPy5tZXNzYWdlXG4gICAgICB9KTtcbiAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIoXG4gIGFwcDogRmlyZWJhc2VBcHAsXG4gIGhlYXJ0YmVhdE9iamVjdDogSGVhcnRiZWF0c0luSW5kZXhlZERCXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xuICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xuICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSk7XG4gICAgYXdhaXQgb2JqZWN0U3RvcmUucHV0KGhlYXJ0YmVhdE9iamVjdCwgY29tcHV0ZUtleShhcHApKTtcbiAgICBhd2FpdCB0eC5kb25lO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yKSB7XG4gICAgICBsb2dnZXIud2FybihlLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpZGJHZXRFcnJvciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLklEQl9XUklURSwge1xuICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogKGUgYXMgRXJyb3IpPy5tZXNzYWdlXG4gICAgICB9KTtcbiAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wdXRlS2V5KGFwcDogRmlyZWJhc2VBcHApOiBzdHJpbmcge1xuICByZXR1cm4gYCR7YXBwLm5hbWV9ISR7YXBwLm9wdGlvbnMuYXBwSWR9YDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsXG4gIGlzSW5kZXhlZERCQXZhaWxhYmxlLFxuICB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlXG59IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7XG4gIHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQixcbiAgd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREJcbn0gZnJvbSAnLi9pbmRleGVkZGInO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHAgfSBmcm9tICcuL3B1YmxpYy10eXBlcyc7XG5pbXBvcnQge1xuICBIZWFydGJlYXRzQnlVc2VyQWdlbnQsXG4gIEhlYXJ0YmVhdFNlcnZpY2UsXG4gIEhlYXJ0YmVhdHNJbkluZGV4ZWREQixcbiAgSGVhcnRiZWF0U3RvcmFnZSxcbiAgU2luZ2xlRGF0ZUhlYXJ0YmVhdFxufSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgTUFYX0hFQURFUl9CWVRFUyA9IDEwMjQ7XG4vLyAzMCBkYXlzXG5jb25zdCBTVE9SRURfSEVBUlRCRUFUX1JFVEVOVElPTl9NQVhfTUlMTElTID0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG5leHBvcnQgY2xhc3MgSGVhcnRiZWF0U2VydmljZUltcGwgaW1wbGVtZW50cyBIZWFydGJlYXRTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFRoZSBwZXJzaXN0ZW5jZSBsYXllciBmb3IgaGVhcnRiZWF0c1xuICAgKiBMZWF2ZSBwdWJsaWMgZm9yIGVhc2llciB0ZXN0aW5nLlxuICAgKi9cbiAgX3N0b3JhZ2U6IEhlYXJ0YmVhdFN0b3JhZ2VJbXBsO1xuXG4gIC8qKlxuICAgKiBJbi1tZW1vcnkgY2FjaGUgZm9yIGhlYXJ0YmVhdHMsIHVzZWQgYnkgZ2V0SGVhcnRiZWF0c0hlYWRlcigpIHRvIGdlbmVyYXRlXG4gICAqIHRoZSBoZWFkZXIgc3RyaW5nLlxuICAgKiBTdG9yZXMgb25lIHJlY29yZCBwZXIgZGF0ZS4gVGhpcyB3aWxsIGJlIGNvbnNvbGlkYXRlZCBpbnRvIHRoZSBzdGFuZGFyZFxuICAgKiBmb3JtYXQgb2Ygb25lIHJlY29yZCBwZXIgdXNlciBhZ2VudCBzdHJpbmcgYmVmb3JlIGJlaW5nIHNlbnQgYXMgYSBoZWFkZXIuXG4gICAqIFBvcHVsYXRlZCBmcm9tIGluZGV4ZWREQiB3aGVuIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkXG4gICAqIGJlIGtlcHQgaW4gc3luYyB3aXRoIGluZGV4ZWREQi5cbiAgICogTGVhdmUgcHVibGljIGZvciBlYXNpZXIgdGVzdGluZy5cbiAgICovXG4gIF9oZWFydGJlYXRzQ2FjaGU6IEhlYXJ0YmVhdHNJbkluZGV4ZWREQiB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiB0aGUgaW5pdGlhbGl6YXRpb24gcHJvbWlzZSBmb3IgcG9wdWxhdGluZyBoZWFydGJlYXRDYWNoZS5cbiAgICogSWYgZ2V0SGVhcnRiZWF0c0hlYWRlcigpIGlzIGNhbGxlZCBiZWZvcmUgdGhlIHByb21pc2UgcmVzb2x2ZXNcbiAgICogKGhlYXJiZWF0c0NhY2hlID09IG51bGwpLCBpdCBzaG91bGQgd2FpdCBmb3IgdGhpcyBwcm9taXNlXG4gICAqIExlYXZlIHB1YmxpYyBmb3IgZWFzaWVyIHRlc3RpbmcuXG4gICAqL1xuICBfaGVhcnRiZWF0c0NhY2hlUHJvbWlzZTogUHJvbWlzZTxIZWFydGJlYXRzSW5JbmRleGVkREI+O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXIoJ2FwcCcpLmdldEltbWVkaWF0ZSgpO1xuICAgIHRoaXMuX3N0b3JhZ2UgPSBuZXcgSGVhcnRiZWF0U3RvcmFnZUltcGwoYXBwKTtcbiAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlID0gdGhpcy5fc3RvcmFnZS5yZWFkKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gcmVzdWx0O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdG8gcmVwb3J0IGEgaGVhcnRiZWF0LiBUaGUgZnVuY3Rpb24gd2lsbCBnZW5lcmF0ZVxuICAgKiBhIEhlYXJ0YmVhdHNCeVVzZXJBZ2VudCBvYmplY3QsIHVwZGF0ZSBoZWFydGJlYXRzQ2FjaGUsIGFuZCBwZXJzaXN0IGl0XG4gICAqIHRvIEluZGV4ZWREQi5cbiAgICogTm90ZSB0aGF0IHdlIG9ubHkgc3RvcmUgb25lIGhlYXJ0YmVhdCBwZXIgZGF5LiBTbyBpZiBhIGhlYXJ0YmVhdCBmb3IgdG9kYXkgaXNcbiAgICogYWxyZWFkeSBsb2dnZWQsIHN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBpbiB0aGUgc2FtZSBkYXkgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgYXN5bmMgdHJpZ2dlckhlYXJ0YmVhdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwbGF0Zm9ybUxvZ2dlciA9IHRoaXMuY29udGFpbmVyXG4gICAgICAuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpXG4gICAgICAuZ2V0SW1tZWRpYXRlKCk7XG5cbiAgICAvLyBUaGlzIGlzIHRoZSBcIkZpcmViYXNlIHVzZXIgYWdlbnRcIiBzdHJpbmcgZnJvbSB0aGUgcGxhdGZvcm0gbG9nZ2VyXG4gICAgLy8gc2VydmljZSwgbm90IHRoZSBicm93c2VyIHVzZXIgYWdlbnQuXG4gICAgY29uc3QgYWdlbnQgPSBwbGF0Zm9ybUxvZ2dlci5nZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTtcbiAgICBjb25zdCBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xuICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IGF3YWl0IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2U7XG4gICAgfVxuICAgIC8vIERvIG5vdCBzdG9yZSBhIGhlYXJ0YmVhdCBpZiBvbmUgaXMgYWxyZWFkeSBzdG9yZWQgZm9yIHRoaXMgZGF5XG4gICAgLy8gb3IgaWYgYSBoZWFkZXIgaGFzIGFscmVhZHkgYmVlbiBzZW50IHRvZGF5LlxuICAgIGlmIChcbiAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPT09IGRhdGUgfHxcbiAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLnNvbWUoXG4gICAgICAgIHNpbmdsZURhdGVIZWFydGJlYXQgPT4gc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlID09PSBkYXRlXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIGRhdGUuIENyZWF0ZSBvbmUuXG4gICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5wdXNoKHsgZGF0ZSwgYWdlbnQgfSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBlbnRyaWVzIG9sZGVyIHRoYW4gMzAgZGF5cy5cbiAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLmZpbHRlcihcbiAgICAgIHNpbmdsZURhdGVIZWFydGJlYXQgPT4ge1xuICAgICAgICBjb25zdCBoYlRpbWVzdGFtcCA9IG5ldyBEYXRlKHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSkudmFsdWVPZigpO1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gbm93IC0gaGJUaW1lc3RhbXAgPD0gU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUztcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgd2hpY2ggY2FuIGJlIGF0dGFjaGVkIHRvIHRoZSBoZWFydGJlYXQtc3BlY2lmaWMgaGVhZGVyIGRpcmVjdGx5LlxuICAgKiBJdCBhbHNvIGNsZWFycyBhbGwgaGVhcnRiZWF0cyBmcm9tIG1lbW9yeSBhcyB3ZWxsIGFzIGluIEluZGV4ZWREQi5cbiAgICpcbiAgICogTk9URTogQ29uc3VtaW5nIHByb2R1Y3QgU0RLcyBzaG91bGQgbm90IHNlbmQgdGhlIGhlYWRlciBpZiB0aGlzIG1ldGhvZFxuICAgKiByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICovXG4gIGFzeW5jIGdldEhlYXJ0YmVhdHNIZWFkZXIoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsKSB7XG4gICAgICBhd2FpdCB0aGlzLl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlO1xuICAgIH1cbiAgICAvLyBJZiBpdCdzIHN0aWxsIG51bGwgb3IgdGhlIGFycmF5IGlzIGVtcHR5LCB0aGVyZSBpcyBubyBkYXRhIHRvIHNlbmQuXG4gICAgaWYgKFxuICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsIHx8XG4gICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5sZW5ndGggPT09IDBcbiAgICApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcbiAgICAvLyBFeHRyYWN0IGFzIG1hbnkgaGVhcnRiZWF0cyBmcm9tIHRoZSBjYWNoZSBhcyB3aWxsIGZpdCB1bmRlciB0aGUgc2l6ZSBsaW1pdC5cbiAgICBjb25zdCB7IGhlYXJ0YmVhdHNUb1NlbmQsIHVuc2VudEVudHJpZXMgfSA9IGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKFxuICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHNcbiAgICApO1xuICAgIGNvbnN0IGhlYWRlclN0cmluZyA9IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKFxuICAgICAgSlNPTi5zdHJpbmdpZnkoeyB2ZXJzaW9uOiAyLCBoZWFydGJlYXRzOiBoZWFydGJlYXRzVG9TZW5kIH0pXG4gICAgKTtcbiAgICAvLyBTdG9yZSBsYXN0IHNlbnQgZGF0ZSB0byBwcmV2ZW50IGFub3RoZXIgYmVpbmcgbG9nZ2VkL3NlbnQgZm9yIHRoZSBzYW1lIGRheS5cbiAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID0gZGF0ZTtcbiAgICBpZiAodW5zZW50RW50cmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBTdG9yZSBhbnkgdW5zZW50IGVudHJpZXMgaWYgdGhleSBleGlzdC5cbiAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdW5zZW50RW50cmllcztcbiAgICAgIC8vIFRoaXMgc2VlbXMgbW9yZSBsaWtlbHkgdGhhbiBlbXB0eWluZyB0aGUgYXJyYXkgKGJlbG93KSB0byBsZWFkIHRvIHNvbWUgb2RkIHN0YXRlXG4gICAgICAvLyBzaW5jZSB0aGUgY2FjaGUgaXNuJ3QgZW1wdHkgYW5kIHRoaXMgd2lsbCBiZSBjYWxsZWQgYWdhaW4gb24gdGhlIG5leHQgcmVxdWVzdCxcbiAgICAgIC8vIGFuZCBpcyBwcm9iYWJseSBzYWZlc3QgaWYgd2UgYXdhaXQgaXQuXG4gICAgICBhd2FpdCB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IFtdO1xuICAgICAgLy8gRG8gbm90IHdhaXQgZm9yIHRoaXMsIHRvIHJlZHVjZSBsYXRlbmN5LlxuICAgICAgdm9pZCB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVyU3RyaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFVUQ0RhdGVTdHJpbmcoKTogc3RyaW5nIHtcbiAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAvLyBSZXR1cm5zIGRhdGUgZm9ybWF0ICdZWVlZLU1NLUREJ1xuICByZXR1cm4gdG9kYXkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIoXG4gIGhlYXJ0YmVhdHNDYWNoZTogU2luZ2xlRGF0ZUhlYXJ0YmVhdFtdLFxuICBtYXhTaXplID0gTUFYX0hFQURFUl9CWVRFU1xuKToge1xuICBoZWFydGJlYXRzVG9TZW5kOiBIZWFydGJlYXRzQnlVc2VyQWdlbnRbXTtcbiAgdW5zZW50RW50cmllczogU2luZ2xlRGF0ZUhlYXJ0YmVhdFtdO1xufSB7XG4gIC8vIEhlYXJ0YmVhdHMgZ3JvdXBlZCBieSB1c2VyIGFnZW50IGluIHRoZSBzdGFuZGFyZCBmb3JtYXQgdG8gYmUgc2VudCBpblxuICAvLyB0aGUgaGVhZGVyLlxuICBjb25zdCBoZWFydGJlYXRzVG9TZW5kOiBIZWFydGJlYXRzQnlVc2VyQWdlbnRbXSA9IFtdO1xuICAvLyBTaW5nbGUgZGF0ZSBmb3JtYXQgaGVhcnRiZWF0cyB0aGF0IGFyZSBub3Qgc2VudC5cbiAgbGV0IHVuc2VudEVudHJpZXMgPSBoZWFydGJlYXRzQ2FjaGUuc2xpY2UoKTtcbiAgZm9yIChjb25zdCBzaW5nbGVEYXRlSGVhcnRiZWF0IG9mIGhlYXJ0YmVhdHNDYWNoZSkge1xuICAgIC8vIExvb2sgZm9yIGFuIGV4aXN0aW5nIGVudHJ5IHdpdGggdGhlIHNhbWUgdXNlciBhZ2VudC5cbiAgICBjb25zdCBoZWFydGJlYXRFbnRyeSA9IGhlYXJ0YmVhdHNUb1NlbmQuZmluZChcbiAgICAgIGhiID0+IGhiLmFnZW50ID09PSBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50XG4gICAgKTtcbiAgICBpZiAoIWhlYXJ0YmVhdEVudHJ5KSB7XG4gICAgICAvLyBJZiBubyBlbnRyeSBmb3IgdGhpcyB1c2VyIGFnZW50IGV4aXN0cywgY3JlYXRlIG9uZS5cbiAgICAgIGhlYXJ0YmVhdHNUb1NlbmQucHVzaCh7XG4gICAgICAgIGFnZW50OiBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50LFxuICAgICAgICBkYXRlczogW3NpbmdsZURhdGVIZWFydGJlYXQuZGF0ZV1cbiAgICAgIH0pO1xuICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XG4gICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGhlYXJ0YmVhdFxuICAgICAgICAvLyBlbnRyeSBhbmQgc3RvcCBhZGRpbmcgdG8gdGhlIGhlYWRlci5cbiAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYXJ0YmVhdEVudHJ5LmRhdGVzLnB1c2goc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKTtcbiAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGRhdGVcbiAgICAgIC8vIGFuZCBzdG9wIGFkZGluZyB0byB0aGUgaGVhZGVyLlxuICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XG4gICAgICAgIGhlYXJ0YmVhdEVudHJ5LmRhdGVzLnBvcCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUG9wIHVuc2VudCBlbnRyeSBmcm9tIHF1ZXVlLiAoU2tpcHBlZCBpZiBhZGRpbmcgdGhlIGVudHJ5IGV4Y2VlZGVkXG4gICAgLy8gcXVvdGEgYW5kIHRoZSBsb29wIGJyZWFrcyBlYXJseS4pXG4gICAgdW5zZW50RW50cmllcyA9IHVuc2VudEVudHJpZXMuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBoZWFydGJlYXRzVG9TZW5kLFxuICAgIHVuc2VudEVudHJpZXNcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsIGltcGxlbWVudHMgSGVhcnRiZWF0U3RvcmFnZSB7XG4gIHByaXZhdGUgX2NhblVzZUluZGV4ZWREQlByb21pc2U6IFByb21pc2U8Ym9vbGVhbj47XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhcHA6IEZpcmViYXNlQXBwKSB7XG4gICAgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZSA9IHRoaXMucnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpO1xuICB9XG4gIGFzeW5jIHJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2soKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKCFpc0luZGV4ZWREQkF2YWlsYWJsZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKClcbiAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcbiAgICAgICAgLmNhdGNoKCgpID0+IGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWQgYWxsIGhlYXJ0YmVhdHMuXG4gICAqL1xuICBhc3luYyByZWFkKCk6IFByb21pc2U8SGVhcnRiZWF0c0luSW5kZXhlZERCPiB7XG4gICAgY29uc3QgY2FuVXNlSW5kZXhlZERCID0gYXdhaXQgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZTtcbiAgICBpZiAoIWNhblVzZUluZGV4ZWREQikge1xuICAgICAgcmV0dXJuIHsgaGVhcnRiZWF0czogW10gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaWRiSGVhcnRiZWF0T2JqZWN0ID0gYXdhaXQgcmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCKHRoaXMuYXBwKTtcbiAgICAgIHJldHVybiBpZGJIZWFydGJlYXRPYmplY3QgfHwgeyBoZWFydGJlYXRzOiBbXSB9O1xuICAgIH1cbiAgfVxuICAvLyBvdmVyd3JpdGUgdGhlIHN0b3JhZ2Ugd2l0aCB0aGUgcHJvdmlkZWQgaGVhcnRiZWF0c1xuICBhc3luYyBvdmVyd3JpdGUoaGVhcnRiZWF0c09iamVjdDogSGVhcnRiZWF0c0luSW5kZXhlZERCKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2FuVXNlSW5kZXhlZERCID0gYXdhaXQgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZTtcbiAgICBpZiAoIWNhblVzZUluZGV4ZWREQikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QgPSBhd2FpdCB0aGlzLnJlYWQoKTtcbiAgICAgIHJldHVybiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQih0aGlzLmFwcCwge1xuICAgICAgICBsYXN0U2VudEhlYXJ0YmVhdERhdGU6XG4gICAgICAgICAgaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPz9cbiAgICAgICAgICBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QubGFzdFNlbnRIZWFydGJlYXREYXRlLFxuICAgICAgICBoZWFydGJlYXRzOiBoZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvLyBhZGQgaGVhcnRiZWF0c1xuICBhc3luYyBhZGQoaGVhcnRiZWF0c09iamVjdDogSGVhcnRiZWF0c0luSW5kZXhlZERCKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2FuVXNlSW5kZXhlZERCID0gYXdhaXQgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZTtcbiAgICBpZiAoIWNhblVzZUluZGV4ZWREQikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QgPSBhd2FpdCB0aGlzLnJlYWQoKTtcbiAgICAgIHJldHVybiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQih0aGlzLmFwcCwge1xuICAgICAgICBsYXN0U2VudEhlYXJ0YmVhdERhdGU6XG4gICAgICAgICAgaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPz9cbiAgICAgICAgICBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QubGFzdFNlbnRIZWFydGJlYXREYXRlLFxuICAgICAgICBoZWFydGJlYXRzOiBbXG4gICAgICAgICAgLi4uZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHMsXG4gICAgICAgICAgLi4uaGVhcnRiZWF0c09iamVjdC5oZWFydGJlYXRzXG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBieXRlcyBvZiBhIEhlYXJ0YmVhdHNCeVVzZXJBZ2VudCBhcnJheSBhZnRlciBiZWluZyB3cmFwcGVkXG4gKiBpbiBhIHBsYXRmb3JtIGxvZ2dpbmcgaGVhZGVyIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCwgYW5kIGNvbnZlcnRlZFxuICogdG8gYmFzZSA2NC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50Qnl0ZXMoaGVhcnRiZWF0c0NhY2hlOiBIZWFydGJlYXRzQnlVc2VyQWdlbnRbXSk6IG51bWJlciB7XG4gIC8vIGJhc2U2NCBoYXMgYSByZXN0cmljdGVkIHNldCBvZiBjaGFyYWN0ZXJzLCBhbGwgb2Ygd2hpY2ggc2hvdWxkIGJlIDEgYnl0ZS5cbiAgcmV0dXJuIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKFxuICAgIC8vIGhlYXJ0YmVhdHNDYWNoZSB3cmFwcGVyIHByb3BlcnRpZXNcbiAgICBKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNDYWNoZSB9KVxuICApLmxlbmd0aDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbCB9IGZyb20gJy4vcGxhdGZvcm1Mb2dnZXJTZXJ2aWNlJztcbmltcG9ydCB7IG5hbWUsIHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgX3JlZ2lzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICcuL2FwaSc7XG5pbXBvcnQgeyBIZWFydGJlYXRTZXJ2aWNlSW1wbCB9IGZyb20gJy4vaGVhcnRiZWF0U2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvcmVDb21wb25lbnRzKHZhcmlhbnQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgX3JlZ2lzdGVyQ29tcG9uZW50KFxuICAgIG5ldyBDb21wb25lbnQoXG4gICAgICAncGxhdGZvcm0tbG9nZ2VyJyxcbiAgICAgIGNvbnRhaW5lciA9PiBuZXcgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbChjb250YWluZXIpLFxuICAgICAgQ29tcG9uZW50VHlwZS5QUklWQVRFXG4gICAgKVxuICApO1xuICBfcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgbmV3IENvbXBvbmVudChcbiAgICAgICdoZWFydGJlYXQnLFxuICAgICAgY29udGFpbmVyID0+IG5ldyBIZWFydGJlYXRTZXJ2aWNlSW1wbChjb250YWluZXIpLFxuICAgICAgQ29tcG9uZW50VHlwZS5QUklWQVRFXG4gICAgKVxuICApO1xuXG4gIC8vIFJlZ2lzdGVyIGBhcHBgIHBhY2thZ2UuXG4gIHJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCB2YXJpYW50KTtcbiAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cbiAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdfX0JVSUxEX1RBUkdFVF9fJyk7XG4gIC8vIFJlZ2lzdGVyIHBsYXRmb3JtIFNESyBpZGVudGlmaWVyIChubyB2ZXJzaW9uKS5cbiAgcmVnaXN0ZXJWZXJzaW9uKCdmaXJlLWpzJywgJycpO1xufVxuIiwiLyoqXG4gKiBGaXJlYmFzZSBBcHBcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIHBhY2thZ2UgY29vcmRpbmF0ZXMgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgZGlmZmVyZW50IEZpcmViYXNlIGNvbXBvbmVudHNcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHJlZ2lzdGVyQ29yZUNvbXBvbmVudHMgfSBmcm9tICcuL3JlZ2lzdGVyQ29yZUNvbXBvbmVudHMnO1xuXG5leHBvcnQgKiBmcm9tICcuL2FwaSc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVybmFsJztcbmV4cG9ydCAqIGZyb20gJy4vcHVibGljLXR5cGVzJztcblxucmVnaXN0ZXJDb3JlQ29tcG9uZW50cygnX19SVU5USU1FX0VOVl9fJyk7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQW4gZW51bSBvZiBmYWN0b3JzIHRoYXQgbWF5IGJlIHVzZWQgZm9yIG11bHRpZmFjdG9yIGF1dGhlbnRpY2F0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEZhY3RvcklkID0ge1xuICAvKiogUGhvbmUgYXMgc2Vjb25kIGZhY3RvciAqL1xuICBQSE9ORTogJ3Bob25lJyxcbiAgVE9UUDogJ3RvdHAnXG59IGFzIGNvbnN0O1xuXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIHN1cHBvcnRlZCBwcm92aWRlcnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgUHJvdmlkZXJJZCA9IHtcbiAgLyoqIEZhY2Vib29rIHByb3ZpZGVyIElEICovXG4gIEZBQ0VCT09LOiAnZmFjZWJvb2suY29tJyxcbiAgLyoqIEdpdEh1YiBwcm92aWRlciBJRCAqL1xuICBHSVRIVUI6ICdnaXRodWIuY29tJyxcbiAgLyoqIEdvb2dsZSBwcm92aWRlciBJRCAqL1xuICBHT09HTEU6ICdnb29nbGUuY29tJyxcbiAgLyoqIFBhc3N3b3JkIHByb3ZpZGVyICovXG4gIFBBU1NXT1JEOiAncGFzc3dvcmQnLFxuICAvKiogUGhvbmUgcHJvdmlkZXIgKi9cbiAgUEhPTkU6ICdwaG9uZScsXG4gIC8qKiBUd2l0dGVyIHByb3ZpZGVyIElEICovXG4gIFRXSVRURVI6ICd0d2l0dGVyLmNvbSdcbn0gYXMgY29uc3Q7XG5cbi8qKlxuICogRW51bWVyYXRpb24gb2Ygc3VwcG9ydGVkIHNpZ24taW4gbWV0aG9kcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBTaWduSW5NZXRob2QgPSB7XG4gIC8qKiBFbWFpbCBsaW5rIHNpZ24gaW4gbWV0aG9kICovXG4gIEVNQUlMX0xJTks6ICdlbWFpbExpbmsnLFxuICAvKiogRW1haWwvcGFzc3dvcmQgc2lnbiBpbiBtZXRob2QgKi9cbiAgRU1BSUxfUEFTU1dPUkQ6ICdwYXNzd29yZCcsXG4gIC8qKiBGYWNlYm9vayBzaWduIGluIG1ldGhvZCAqL1xuICBGQUNFQk9PSzogJ2ZhY2Vib29rLmNvbScsXG4gIC8qKiBHaXRIdWIgc2lnbiBpbiBtZXRob2QgKi9cbiAgR0lUSFVCOiAnZ2l0aHViLmNvbScsXG4gIC8qKiBHb29nbGUgc2lnbiBpbiBtZXRob2QgKi9cbiAgR09PR0xFOiAnZ29vZ2xlLmNvbScsXG4gIC8qKiBQaG9uZSBzaWduIGluIG1ldGhvZCAqL1xuICBQSE9ORTogJ3Bob25lJyxcbiAgLyoqIFR3aXR0ZXIgc2lnbiBpbiBtZXRob2QgKi9cbiAgVFdJVFRFUjogJ3R3aXR0ZXIuY29tJ1xufSBhcyBjb25zdDtcblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBzdXBwb3J0ZWQgb3BlcmF0aW9uIHR5cGVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IE9wZXJhdGlvblR5cGUgPSB7XG4gIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIGxpbmtpbmcgYW4gYWRkaXRpb25hbCBwcm92aWRlciB0byBhbiBhbHJlYWR5IHNpZ25lZC1pbiB1c2VyLiAqL1xuICBMSU5LOiAnbGluaycsXG4gIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIHVzaW5nIGEgcHJvdmlkZXIgdG8gcmVhdXRoZW50aWNhdGUgYW4gYWxyZWFkeSBzaWduZWQtaW4gdXNlci4gKi9cbiAgUkVBVVRIRU5USUNBVEU6ICdyZWF1dGhlbnRpY2F0ZScsXG4gIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIHNpZ25pbmcgaW4gYSB1c2VyLiAqL1xuICBTSUdOX0lOOiAnc2lnbkluJ1xufSBhcyBjb25zdDtcblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB0aGUgcG9zc2libGUgZW1haWwgYWN0aW9uIHR5cGVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEFjdGlvbkNvZGVPcGVyYXRpb24gPSB7XG4gIC8qKiBUaGUgZW1haWwgbGluayBzaWduLWluIGFjdGlvbi4gKi9cbiAgRU1BSUxfU0lHTklOOiAnRU1BSUxfU0lHTklOJyxcbiAgLyoqIFRoZSBwYXNzd29yZCByZXNldCBhY3Rpb24uICovXG4gIFBBU1NXT1JEX1JFU0VUOiAnUEFTU1dPUkRfUkVTRVQnLFxuICAvKiogVGhlIGVtYWlsIHJldm9jYXRpb24gYWN0aW9uLiAqL1xuICBSRUNPVkVSX0VNQUlMOiAnUkVDT1ZFUl9FTUFJTCcsXG4gIC8qKiBUaGUgcmV2ZXJ0IHNlY29uZCBmYWN0b3IgYWRkaXRpb24gZW1haWwgYWN0aW9uLiAqL1xuICBSRVZFUlRfU0VDT05EX0ZBQ1RPUl9BRERJVElPTjogJ1JFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OJyxcbiAgLyoqIFRoZSByZXZlcnQgc2Vjb25kIGZhY3RvciBhZGRpdGlvbiBlbWFpbCBhY3Rpb24uICovXG4gIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMOiAnVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwnLFxuICAvKiogVGhlIGVtYWlsIHZlcmlmaWNhdGlvbiBhY3Rpb24uICovXG4gIFZFUklGWV9FTUFJTDogJ1ZFUklGWV9FTUFJTCdcbn0gYXMgY29uc3Q7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JNYXAsIFVzZXIgfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRXJyb3JGYWN0b3J5LCBFcnJvck1hcCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgSWRUb2tlbk1mYVJlc3BvbnNlIH0gZnJvbSAnLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQgeyBBcHBOYW1lIH0gZnJvbSAnLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbHMnO1xuXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIEZpcmViYXNlIEF1dGggZXJyb3IgY29kZXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIEF1dGhFcnJvckNvZGUge1xuICBBRE1JTl9PTkxZX09QRVJBVElPTiA9ICdhZG1pbi1yZXN0cmljdGVkLW9wZXJhdGlvbicsXG4gIEFSR1VNRU5UX0VSUk9SID0gJ2FyZ3VtZW50LWVycm9yJyxcbiAgQVBQX05PVF9BVVRIT1JJWkVEID0gJ2FwcC1ub3QtYXV0aG9yaXplZCcsXG4gIEFQUF9OT1RfSU5TVEFMTEVEID0gJ2FwcC1ub3QtaW5zdGFsbGVkJyxcbiAgQ0FQVENIQV9DSEVDS19GQUlMRUQgPSAnY2FwdGNoYS1jaGVjay1mYWlsZWQnLFxuICBDT0RFX0VYUElSRUQgPSAnY29kZS1leHBpcmVkJyxcbiAgQ09SRE9WQV9OT1RfUkVBRFkgPSAnY29yZG92YS1ub3QtcmVhZHknLFxuICBDT1JTX1VOU1VQUE9SVEVEID0gJ2NvcnMtdW5zdXBwb3J0ZWQnLFxuICBDUkVERU5USUFMX0FMUkVBRFlfSU5fVVNFID0gJ2NyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2UnLFxuICBDUkVERU5USUFMX01JU01BVENIID0gJ2N1c3RvbS10b2tlbi1taXNtYXRjaCcsXG4gIENSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTiA9ICdyZXF1aXJlcy1yZWNlbnQtbG9naW4nLFxuICBERVBFTkRFTlRfU0RLX0lOSVRfQkVGT1JFX0FVVEggPSAnZGVwZW5kZW50LXNkay1pbml0aWFsaXplZC1iZWZvcmUtYXV0aCcsXG4gIERZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEID0gJ2R5bmFtaWMtbGluay1ub3QtYWN0aXZhdGVkJyxcbiAgRU1BSUxfQ0hBTkdFX05FRURTX1ZFUklGSUNBVElPTiA9ICdlbWFpbC1jaGFuZ2UtbmVlZHMtdmVyaWZpY2F0aW9uJyxcbiAgRU1BSUxfRVhJU1RTID0gJ2VtYWlsLWFscmVhZHktaW4tdXNlJyxcbiAgRU1VTEFUT1JfQ09ORklHX0ZBSUxFRCA9ICdlbXVsYXRvci1jb25maWctZmFpbGVkJyxcbiAgRVhQSVJFRF9PT0JfQ09ERSA9ICdleHBpcmVkLWFjdGlvbi1jb2RlJyxcbiAgRVhQSVJFRF9QT1BVUF9SRVFVRVNUID0gJ2NhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0JyxcbiAgSU5URVJOQUxfRVJST1IgPSAnaW50ZXJuYWwtZXJyb3InLFxuICBJTlZBTElEX0FQSV9LRVkgPSAnaW52YWxpZC1hcGkta2V5JyxcbiAgSU5WQUxJRF9BUFBfQ1JFREVOVElBTCA9ICdpbnZhbGlkLWFwcC1jcmVkZW50aWFsJyxcbiAgSU5WQUxJRF9BUFBfSUQgPSAnaW52YWxpZC1hcHAtaWQnLFxuICBJTlZBTElEX0FVVEggPSAnaW52YWxpZC11c2VyLXRva2VuJyxcbiAgSU5WQUxJRF9BVVRIX0VWRU5UID0gJ2ludmFsaWQtYXV0aC1ldmVudCcsXG4gIElOVkFMSURfQ0VSVF9IQVNIID0gJ2ludmFsaWQtY2VydC1oYXNoJyxcbiAgSU5WQUxJRF9DT0RFID0gJ2ludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGUnLFxuICBJTlZBTElEX0NPTlRJTlVFX1VSSSA9ICdpbnZhbGlkLWNvbnRpbnVlLXVyaScsXG4gIElOVkFMSURfQ09SRE9WQV9DT05GSUdVUkFUSU9OID0gJ2ludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uJyxcbiAgSU5WQUxJRF9DVVNUT01fVE9LRU4gPSAnaW52YWxpZC1jdXN0b20tdG9rZW4nLFxuICBJTlZBTElEX0RZTkFNSUNfTElOS19ET01BSU4gPSAnaW52YWxpZC1keW5hbWljLWxpbmstZG9tYWluJyxcbiAgSU5WQUxJRF9FTUFJTCA9ICdpbnZhbGlkLWVtYWlsJyxcbiAgSU5WQUxJRF9FTVVMQVRPUl9TQ0hFTUUgPSAnaW52YWxpZC1lbXVsYXRvci1zY2hlbWUnLFxuICBJTlZBTElEX0lEUF9SRVNQT05TRSA9ICdpbnZhbGlkLWNyZWRlbnRpYWwnLFxuICBJTlZBTElEX01FU1NBR0VfUEFZTE9BRCA9ICdpbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZCcsXG4gIElOVkFMSURfTUZBX1NFU1NJT04gPSAnaW52YWxpZC1tdWx0aS1mYWN0b3Itc2Vzc2lvbicsXG4gIElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEID0gJ2ludmFsaWQtb2F1dGgtY2xpZW50LWlkJyxcbiAgSU5WQUxJRF9PQVVUSF9QUk9WSURFUiA9ICdpbnZhbGlkLW9hdXRoLXByb3ZpZGVyJyxcbiAgSU5WQUxJRF9PT0JfQ09ERSA9ICdpbnZhbGlkLWFjdGlvbi1jb2RlJyxcbiAgSU5WQUxJRF9PUklHSU4gPSAndW5hdXRob3JpemVkLWRvbWFpbicsXG4gIElOVkFMSURfUEFTU1dPUkQgPSAnd3JvbmctcGFzc3dvcmQnLFxuICBJTlZBTElEX1BFUlNJU1RFTkNFID0gJ2ludmFsaWQtcGVyc2lzdGVuY2UtdHlwZScsXG4gIElOVkFMSURfUEhPTkVfTlVNQkVSID0gJ2ludmFsaWQtcGhvbmUtbnVtYmVyJyxcbiAgSU5WQUxJRF9QUk9WSURFUl9JRCA9ICdpbnZhbGlkLXByb3ZpZGVyLWlkJyxcbiAgSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwgPSAnaW52YWxpZC1yZWNpcGllbnQtZW1haWwnLFxuICBJTlZBTElEX1NFTkRFUiA9ICdpbnZhbGlkLXNlbmRlcicsXG4gIElOVkFMSURfU0VTU0lPTl9JTkZPID0gJ2ludmFsaWQtdmVyaWZpY2F0aW9uLWlkJyxcbiAgSU5WQUxJRF9URU5BTlRfSUQgPSAnaW52YWxpZC10ZW5hbnQtaWQnLFxuICBMT0dJTl9CTE9DS0VEID0gJ2xvZ2luLWJsb2NrZWQnLFxuICBNRkFfSU5GT19OT1RfRk9VTkQgPSAnbXVsdGktZmFjdG9yLWluZm8tbm90LWZvdW5kJyxcbiAgTUZBX1JFUVVJUkVEID0gJ211bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkJyxcbiAgTUlTU0lOR19BTkRST0lEX1BBQ0tBR0VfTkFNRSA9ICdtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWUnLFxuICBNSVNTSU5HX0FQUF9DUkVERU5USUFMID0gJ21pc3NpbmctYXBwLWNyZWRlbnRpYWwnLFxuICBNSVNTSU5HX0FVVEhfRE9NQUlOID0gJ2F1dGgtZG9tYWluLWNvbmZpZy1yZXF1aXJlZCcsXG4gIE1JU1NJTkdfQ09ERSA9ICdtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlJyxcbiAgTUlTU0lOR19DT05USU5VRV9VUkkgPSAnbWlzc2luZy1jb250aW51ZS11cmknLFxuICBNSVNTSU5HX0lGUkFNRV9TVEFSVCA9ICdtaXNzaW5nLWlmcmFtZS1zdGFydCcsXG4gIE1JU1NJTkdfSU9TX0JVTkRMRV9JRCA9ICdtaXNzaW5nLWlvcy1idW5kbGUtaWQnLFxuICBNSVNTSU5HX09SX0lOVkFMSURfTk9OQ0UgPSAnbWlzc2luZy1vci1pbnZhbGlkLW5vbmNlJyxcbiAgTUlTU0lOR19NRkFfSU5GTyA9ICdtaXNzaW5nLW11bHRpLWZhY3Rvci1pbmZvJyxcbiAgTUlTU0lOR19NRkFfU0VTU0lPTiA9ICdtaXNzaW5nLW11bHRpLWZhY3Rvci1zZXNzaW9uJyxcbiAgTUlTU0lOR19QSE9ORV9OVU1CRVIgPSAnbWlzc2luZy1waG9uZS1udW1iZXInLFxuICBNSVNTSU5HX1BBU1NXT1JEID0gJ21pc3NpbmctcGFzc3dvcmQnLFxuICBNSVNTSU5HX1NFU1NJT05fSU5GTyA9ICdtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZCcsXG4gIE1PRFVMRV9ERVNUUk9ZRUQgPSAnYXBwLWRlbGV0ZWQnLFxuICBORUVEX0NPTkZJUk1BVElPTiA9ICdhY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsJyxcbiAgTkVUV09SS19SRVFVRVNUX0ZBSUxFRCA9ICduZXR3b3JrLXJlcXVlc3QtZmFpbGVkJyxcbiAgTlVMTF9VU0VSID0gJ251bGwtdXNlcicsXG4gIE5PX0FVVEhfRVZFTlQgPSAnbm8tYXV0aC1ldmVudCcsXG4gIE5PX1NVQ0hfUFJPVklERVIgPSAnbm8tc3VjaC1wcm92aWRlcicsXG4gIE9QRVJBVElPTl9OT1RfQUxMT1dFRCA9ICdvcGVyYXRpb24tbm90LWFsbG93ZWQnLFxuICBPUEVSQVRJT05fTk9UX1NVUFBPUlRFRCA9ICdvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50JyxcbiAgUE9QVVBfQkxPQ0tFRCA9ICdwb3B1cC1ibG9ja2VkJyxcbiAgUE9QVVBfQ0xPU0VEX0JZX1VTRVIgPSAncG9wdXAtY2xvc2VkLWJ5LXVzZXInLFxuICBQUk9WSURFUl9BTFJFQURZX0xJTktFRCA9ICdwcm92aWRlci1hbHJlYWR5LWxpbmtlZCcsXG4gIFFVT1RBX0VYQ0VFREVEID0gJ3F1b3RhLWV4Y2VlZGVkJyxcbiAgUkVESVJFQ1RfQ0FOQ0VMTEVEX0JZX1VTRVIgPSAncmVkaXJlY3QtY2FuY2VsbGVkLWJ5LXVzZXInLFxuICBSRURJUkVDVF9PUEVSQVRJT05fUEVORElORyA9ICdyZWRpcmVjdC1vcGVyYXRpb24tcGVuZGluZycsXG4gIFJFSkVDVEVEX0NSRURFTlRJQUwgPSAncmVqZWN0ZWQtY3JlZGVudGlhbCcsXG4gIFNFQ09ORF9GQUNUT1JfQUxSRUFEWV9FTlJPTExFRCA9ICdzZWNvbmQtZmFjdG9yLWFscmVhZHktaW4tdXNlJyxcbiAgU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRCA9ICdtYXhpbXVtLXNlY29uZC1mYWN0b3ItY291bnQtZXhjZWVkZWQnLFxuICBURU5BTlRfSURfTUlTTUFUQ0ggPSAndGVuYW50LWlkLW1pc21hdGNoJyxcbiAgVElNRU9VVCA9ICd0aW1lb3V0JyxcbiAgVE9LRU5fRVhQSVJFRCA9ICd1c2VyLXRva2VuLWV4cGlyZWQnLFxuICBUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVIgPSAndG9vLW1hbnktcmVxdWVzdHMnLFxuICBVTkFVVEhPUklaRURfRE9NQUlOID0gJ3VuYXV0aG9yaXplZC1jb250aW51ZS11cmknLFxuICBVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1IgPSAndW5zdXBwb3J0ZWQtZmlyc3QtZmFjdG9yJyxcbiAgVU5TVVBQT1JURURfUEVSU0lTVEVOQ0UgPSAndW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZScsXG4gIFVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT04gPSAndW5zdXBwb3J0ZWQtdGVuYW50LW9wZXJhdGlvbicsXG4gIFVOVkVSSUZJRURfRU1BSUwgPSAndW52ZXJpZmllZC1lbWFpbCcsXG4gIFVTRVJfQ0FOQ0VMTEVEID0gJ3VzZXItY2FuY2VsbGVkJyxcbiAgVVNFUl9ERUxFVEVEID0gJ3VzZXItbm90LWZvdW5kJyxcbiAgVVNFUl9ESVNBQkxFRCA9ICd1c2VyLWRpc2FibGVkJyxcbiAgVVNFUl9NSVNNQVRDSCA9ICd1c2VyLW1pc21hdGNoJyxcbiAgVVNFUl9TSUdORURfT1VUID0gJ3VzZXItc2lnbmVkLW91dCcsXG4gIFdFQUtfUEFTU1dPUkQgPSAnd2Vhay1wYXNzd29yZCcsXG4gIFdFQl9TVE9SQUdFX1VOU1VQUE9SVEVEID0gJ3dlYi1zdG9yYWdlLXVuc3VwcG9ydGVkJyxcbiAgQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdhbHJlYWR5LWluaXRpYWxpemVkJyxcbiAgUkVDQVBUQ0hBX05PVF9FTkFCTEVEID0gJ3JlY2FwdGNoYS1ub3QtZW5hYmxlZCcsXG4gIE1JU1NJTkdfUkVDQVBUQ0hBX1RPS0VOID0gJ21pc3NpbmctcmVjYXB0Y2hhLXRva2VuJyxcbiAgSU5WQUxJRF9SRUNBUFRDSEFfVE9LRU4gPSAnaW52YWxpZC1yZWNhcHRjaGEtdG9rZW4nLFxuICBJTlZBTElEX1JFQ0FQVENIQV9BQ1RJT04gPSAnaW52YWxpZC1yZWNhcHRjaGEtYWN0aW9uJyxcbiAgTUlTU0lOR19DTElFTlRfVFlQRSA9ICdtaXNzaW5nLWNsaWVudC10eXBlJyxcbiAgTUlTU0lOR19SRUNBUFRDSEFfVkVSU0lPTiA9ICdtaXNzaW5nLXJlY2FwdGNoYS12ZXJzaW9uJyxcbiAgSU5WQUxJRF9SRUNBUFRDSEFfVkVSU0lPTiA9ICdpbnZhbGlkLXJlY2FwdGNoYS12ZXJzaW9uJyxcbiAgSU5WQUxJRF9SRVFfVFlQRSA9ICdpbnZhbGlkLXJlcS10eXBlJ1xufVxuXG5mdW5jdGlvbiBfZGVidWdFcnJvck1hcCgpOiBFcnJvck1hcDxBdXRoRXJyb3JDb2RlPiB7XG4gIHJldHVybiB7XG4gICAgW0F1dGhFcnJvckNvZGUuQURNSU5fT05MWV9PUEVSQVRJT05dOlxuICAgICAgJ1RoaXMgb3BlcmF0aW9uIGlzIHJlc3RyaWN0ZWQgdG8gYWRtaW5pc3RyYXRvcnMgb25seS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SXTogJycsXG4gICAgW0F1dGhFcnJvckNvZGUuQVBQX05PVF9BVVRIT1JJWkVEXTpcbiAgICAgIFwiVGhpcyBhcHAsIGlkZW50aWZpZWQgYnkgdGhlIGRvbWFpbiB3aGVyZSBpdCdzIGhvc3RlZCwgaXMgbm90IFwiICtcbiAgICAgICdhdXRob3JpemVkIHRvIHVzZSBGaXJlYmFzZSBBdXRoZW50aWNhdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBBUEkga2V5LiAnICtcbiAgICAgICdSZXZpZXcgeW91ciBrZXkgY29uZmlndXJhdGlvbiBpbiB0aGUgR29vZ2xlIEFQSSBjb25zb2xlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuQVBQX05PVF9JTlNUQUxMRURdOlxuICAgICAgJ1RoZSByZXF1ZXN0ZWQgbW9iaWxlIGFwcGxpY2F0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlkZW50aWZpZXIgKCcgK1xuICAgICAgJ0FuZHJvaWQgcGFja2FnZSBuYW1lIG9yIGlPUyBidW5kbGUgSUQpIHByb3ZpZGVkIGlzIG5vdCBpbnN0YWxsZWQgb24gJyArXG4gICAgICAndGhpcyBkZXZpY2UuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5DQVBUQ0hBX0NIRUNLX0ZBSUxFRF06XG4gICAgICAnVGhlIHJlQ0FQVENIQSByZXNwb25zZSB0b2tlbiBwcm92aWRlZCBpcyBlaXRoZXIgaW52YWxpZCwgZXhwaXJlZCwgJyArXG4gICAgICAnYWxyZWFkeSB1c2VkIG9yIHRoZSBkb21haW4gYXNzb2NpYXRlZCB3aXRoIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBsaXN0ICcgK1xuICAgICAgJ29mIHdoaXRlbGlzdGVkIGRvbWFpbnMuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5DT0RFX0VYUElSRURdOlxuICAgICAgJ1RoZSBTTVMgY29kZSBoYXMgZXhwaXJlZC4gUGxlYXNlIHJlLXNlbmQgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHRvIHRyeSAnICtcbiAgICAgICdhZ2Fpbi4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkNPUkRPVkFfTk9UX1JFQURZXTogJ0NvcmRvdmEgZnJhbWV3b3JrIGlzIG5vdCByZWFkeS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkNPUlNfVU5TVVBQT1JURURdOiAnVGhpcyBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5DUkVERU5USUFMX0FMUkVBRFlfSU5fVVNFXTpcbiAgICAgICdUaGlzIGNyZWRlbnRpYWwgaXMgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggYSBkaWZmZXJlbnQgdXNlciBhY2NvdW50LicsXG4gICAgW0F1dGhFcnJvckNvZGUuQ1JFREVOVElBTF9NSVNNQVRDSF06XG4gICAgICAnVGhlIGN1c3RvbSB0b2tlbiBjb3JyZXNwb25kcyB0byBhIGRpZmZlcmVudCBhdWRpZW5jZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTl06XG4gICAgICAnVGhpcyBvcGVyYXRpb24gaXMgc2Vuc2l0aXZlIGFuZCByZXF1aXJlcyByZWNlbnQgYXV0aGVudGljYXRpb24uIExvZyBpbiAnICtcbiAgICAgICdhZ2FpbiBiZWZvcmUgcmV0cnlpbmcgdGhpcyByZXF1ZXN0LicsXG4gICAgW0F1dGhFcnJvckNvZGUuREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIXTpcbiAgICAgICdBbm90aGVyIEZpcmViYXNlIFNESyB3YXMgaW5pdGlhbGl6ZWQgYW5kIGlzIHRyeWluZyB0byB1c2UgQXV0aCBiZWZvcmUgQXV0aCBpcyAnICtcbiAgICAgICdpbml0aWFsaXplZC4gUGxlYXNlIGJlIHN1cmUgdG8gY2FsbCBgaW5pdGlhbGl6ZUF1dGhgIG9yIGBnZXRBdXRoYCBiZWZvcmUgJyArXG4gICAgICAnc3RhcnRpbmcgYW55IG90aGVyIEZpcmViYXNlIFNESy4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkRZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEXTpcbiAgICAgICdQbGVhc2UgYWN0aXZhdGUgRHluYW1pYyBMaW5rcyBpbiB0aGUgRmlyZWJhc2UgQ29uc29sZSBhbmQgYWdyZWUgdG8gdGhlIHRlcm1zIGFuZCAnICtcbiAgICAgICdjb25kaXRpb25zLicsXG4gICAgW0F1dGhFcnJvckNvZGUuRU1BSUxfQ0hBTkdFX05FRURTX1ZFUklGSUNBVElPTl06XG4gICAgICAnTXVsdGktZmFjdG9yIHVzZXJzIG11c3QgYWx3YXlzIGhhdmUgYSB2ZXJpZmllZCBlbWFpbC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkVNQUlMX0VYSVNUU106XG4gICAgICAnVGhlIGVtYWlsIGFkZHJlc3MgaXMgYWxyZWFkeSBpbiB1c2UgYnkgYW5vdGhlciBhY2NvdW50LicsXG4gICAgW0F1dGhFcnJvckNvZGUuRU1VTEFUT1JfQ09ORklHX0ZBSUxFRF06XG4gICAgICAnQXV0aCBpbnN0YW5jZSBoYXMgYWxyZWFkeSBiZWVuIHVzZWQgdG8gbWFrZSBhIG5ldHdvcmsgY2FsbC4gQXV0aCBjYW4gJyArXG4gICAgICAnbm8gbG9uZ2VyIGJlIGNvbmZpZ3VyZWQgdG8gdXNlIHRoZSBlbXVsYXRvci4gVHJ5IGNhbGxpbmcgJyArXG4gICAgICAnXCJjb25uZWN0QXV0aEVtdWxhdG9yKClcIiBzb29uZXIuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5FWFBJUkVEX09PQl9DT0RFXTogJ1RoZSBhY3Rpb24gY29kZSBoYXMgZXhwaXJlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkVYUElSRURfUE9QVVBfUkVRVUVTVF06XG4gICAgICAnVGhpcyBvcGVyYXRpb24gaGFzIGJlZW4gY2FuY2VsbGVkIGR1ZSB0byBhbm90aGVyIGNvbmZsaWN0aW5nIHBvcHVwIGJlaW5nIG9wZW5lZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SXTogJ0FuIGludGVybmFsIEF1dGhFcnJvciBoYXMgb2NjdXJyZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0FQUF9DUkVERU5USUFMXTpcbiAgICAgICdUaGUgcGhvbmUgdmVyaWZpY2F0aW9uIHJlcXVlc3QgY29udGFpbnMgYW4gaW52YWxpZCBhcHBsaWNhdGlvbiB2ZXJpZmllci4nICtcbiAgICAgICcgVGhlIHJlQ0FQVENIQSB0b2tlbiByZXNwb25zZSBpcyBlaXRoZXIgaW52YWxpZCBvciBleHBpcmVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9BUFBfSURdOlxuICAgICAgJ1RoZSBtb2JpbGUgYXBwIGlkZW50aWZpZXIgaXMgbm90IHJlZ2lzdGVkIGZvciB0aGUgY3VycmVudCBwcm9qZWN0LicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9BVVRIXTpcbiAgICAgIFwiVGhpcyB1c2VyJ3MgY3JlZGVudGlhbCBpc24ndCB2YWxpZCBmb3IgdGhpcyBwcm9qZWN0LiBUaGlzIGNhbiBoYXBwZW4gXCIgK1xuICAgICAgXCJpZiB0aGUgdXNlcidzIHRva2VuIGhhcyBiZWVuIHRhbXBlcmVkIHdpdGgsIG9yIGlmIHRoZSB1c2VyIGlzbid0IGZvciBcIiArXG4gICAgICAndGhlIHByb2plY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQVBJIGtleS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfQVVUSF9FVkVOVF06ICdBbiBpbnRlcm5hbCBBdXRoRXJyb3IgaGFzIG9jY3VycmVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9DT0RFXTpcbiAgICAgICdUaGUgU01TIHZlcmlmaWNhdGlvbiBjb2RlIHVzZWQgdG8gY3JlYXRlIHRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgaXMgJyArXG4gICAgICAnaW52YWxpZC4gUGxlYXNlIHJlc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgc21zIGFuZCBiZSBzdXJlIHRvIHVzZSB0aGUgJyArXG4gICAgICAndmVyaWZpY2F0aW9uIGNvZGUgcHJvdmlkZWQgYnkgdGhlIHVzZXIuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0NPTlRJTlVFX1VSSV06XG4gICAgICAnVGhlIGNvbnRpbnVlIFVSTCBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9DT1JET1ZBX0NPTkZJR1VSQVRJT05dOlxuICAgICAgJ1RoZSBmb2xsb3dpbmcgQ29yZG92YSBwbHVnaW5zIG11c3QgYmUgaW5zdGFsbGVkIHRvIGVuYWJsZSBPQXV0aCBzaWduLWluOiAnICtcbiAgICAgICdjb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm8sIGNvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpbiwgJyArXG4gICAgICAnY29yZG92YS1wbHVnaW4tYnJvd3NlcnRhYiwgY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyIGFuZCAnICtcbiAgICAgICdjb3Jkb3ZhLXBsdWdpbi1jdXN0b211cmxzY2hlbWUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0NVU1RPTV9UT0tFTl06XG4gICAgICAnVGhlIGN1c3RvbSB0b2tlbiBmb3JtYXQgaXMgaW5jb3JyZWN0LiBQbGVhc2UgY2hlY2sgdGhlIGRvY3VtZW50YXRpb24uJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0RZTkFNSUNfTElOS19ET01BSU5dOlxuICAgICAgJ1RoZSBwcm92aWRlZCBkeW5hbWljIGxpbmsgZG9tYWluIGlzIG5vdCBjb25maWd1cmVkIG9yIGF1dGhvcml6ZWQgZm9yIHRoZSBjdXJyZW50IHByb2plY3QuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0VNQUlMXTogJ1RoZSBlbWFpbCBhZGRyZXNzIGlzIGJhZGx5IGZvcm1hdHRlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfRU1VTEFUT1JfU0NIRU1FXTpcbiAgICAgICdFbXVsYXRvciBVUkwgbXVzdCBzdGFydCB3aXRoIGEgdmFsaWQgc2NoZW1lIChodHRwOi8vIG9yIGh0dHBzOi8vKS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfQVBJX0tFWV06XG4gICAgICAnWW91ciBBUEkga2V5IGlzIGludmFsaWQsIHBsZWFzZSBjaGVjayB5b3UgaGF2ZSBjb3BpZWQgaXQgY29ycmVjdGx5LicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9DRVJUX0hBU0hdOlxuICAgICAgJ1RoZSBTSEEtMSBjZXJ0aWZpY2F0ZSBoYXNoIHByb3ZpZGVkIGlzIGludmFsaWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0lEUF9SRVNQT05TRV06XG4gICAgICAnVGhlIHN1cHBsaWVkIGF1dGggY3JlZGVudGlhbCBpcyBtYWxmb3JtZWQgb3IgaGFzIGV4cGlyZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX01FU1NBR0VfUEFZTE9BRF06XG4gICAgICAnVGhlIGVtYWlsIHRlbXBsYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIGluIGl0cyBtZXNzYWdlLiAnICtcbiAgICAgICdQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9NRkFfU0VTU0lPTl06XG4gICAgICAnVGhlIHJlcXVlc3QgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIHByb29mIG9mIGZpcnN0IGZhY3RvciBzdWNjZXNzZnVsIHNpZ24taW4uJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX09BVVRIX1BST1ZJREVSXTpcbiAgICAgICdFbWFpbEF1dGhQcm92aWRlciBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIG9wZXJhdGlvbi4gVGhpcyBvcGVyYXRpb24gJyArXG4gICAgICAnb25seSBzdXBwb3J0cyBPQXV0aCBwcm92aWRlcnMuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX09BVVRIX0NMSUVOVF9JRF06XG4gICAgICAnVGhlIE9BdXRoIGNsaWVudCBJRCBwcm92aWRlZCBpcyBlaXRoZXIgaW52YWxpZCBvciBkb2VzIG5vdCBtYXRjaCB0aGUgJyArXG4gICAgICAnc3BlY2lmaWVkIEFQSSBrZXkuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX09SSUdJTl06XG4gICAgICAnVGhpcyBkb21haW4gaXMgbm90IGF1dGhvcml6ZWQgZm9yIE9BdXRoIG9wZXJhdGlvbnMgZm9yIHlvdXIgRmlyZWJhc2UgJyArXG4gICAgICAncHJvamVjdC4gRWRpdCB0aGUgbGlzdCBvZiBhdXRob3JpemVkIGRvbWFpbnMgZnJvbSB0aGUgRmlyZWJhc2UgY29uc29sZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfT09CX0NPREVdOlxuICAgICAgJ1RoZSBhY3Rpb24gY29kZSBpcyBpbnZhbGlkLiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIGNvZGUgaXMgbWFsZm9ybWVkLCAnICtcbiAgICAgICdleHBpcmVkLCBvciBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX1BBU1NXT1JEXTpcbiAgICAgICdUaGUgcGFzc3dvcmQgaXMgaW52YWxpZCBvciB0aGUgdXNlciBkb2VzIG5vdCBoYXZlIGEgcGFzc3dvcmQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX1BFUlNJU1RFTkNFXTpcbiAgICAgICdUaGUgc3BlY2lmaWVkIHBlcnNpc3RlbmNlIHR5cGUgaXMgaW52YWxpZC4gSXQgY2FuIG9ubHkgYmUgbG9jYWwsIHNlc3Npb24gb3Igbm9uZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfUEhPTkVfTlVNQkVSXTpcbiAgICAgICdUaGUgZm9ybWF0IG9mIHRoZSBwaG9uZSBudW1iZXIgcHJvdmlkZWQgaXMgaW5jb3JyZWN0LiBQbGVhc2UgZW50ZXIgdGhlICcgK1xuICAgICAgJ3Bob25lIG51bWJlciBpbiBhIGZvcm1hdCB0aGF0IGNhbiBiZSBwYXJzZWQgaW50byBFLjE2NCBmb3JtYXQuIEUuMTY0ICcgK1xuICAgICAgJ3Bob25lIG51bWJlcnMgYXJlIHdyaXR0ZW4gaW4gdGhlIGZvcm1hdCBbK11bY291bnRyeSBjb2RlXVtzdWJzY3JpYmVyICcgK1xuICAgICAgJ251bWJlciBpbmNsdWRpbmcgYXJlYSBjb2RlXS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfUFJPVklERVJfSURdOlxuICAgICAgJ1RoZSBzcGVjaWZpZWQgcHJvdmlkZXIgSUQgaXMgaW52YWxpZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfUkVDSVBJRU5UX0VNQUlMXTpcbiAgICAgICdUaGUgZW1haWwgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBmYWlsZWQgdG8gc2VuZCBhcyB0aGUgcHJvdmlkZWQgJyArXG4gICAgICAncmVjaXBpZW50IGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfU0VOREVSXTpcbiAgICAgICdUaGUgZW1haWwgdGVtcGxhdGUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBjb250YWlucyBhbiBpbnZhbGlkIHNlbmRlciBlbWFpbCBvciBuYW1lLiAnICtcbiAgICAgICdQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9TRVNTSU9OX0lORk9dOlxuICAgICAgJ1RoZSB2ZXJpZmljYXRpb24gSUQgdXNlZCB0byBjcmVhdGUgdGhlIHBob25lIGF1dGggY3JlZGVudGlhbCBpcyBpbnZhbGlkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9URU5BTlRfSURdOlxuICAgICAgXCJUaGUgQXV0aCBpbnN0YW5jZSdzIHRlbmFudCBJRCBpcyBpbnZhbGlkLlwiLFxuICAgIFtBdXRoRXJyb3JDb2RlLkxPR0lOX0JMT0NLRURdOlxuICAgICAgJ0xvZ2luIGJsb2NrZWQgYnkgdXNlci1wcm92aWRlZCBtZXRob2Q6IHskb3JpZ2luYWxNZXNzYWdlfScsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19BTkRST0lEX1BBQ0tBR0VfTkFNRV06XG4gICAgICAnQW4gQW5kcm9pZCBQYWNrYWdlIE5hbWUgbXVzdCBiZSBwcm92aWRlZCBpZiB0aGUgQW5kcm9pZCBBcHAgaXMgcmVxdWlyZWQgdG8gYmUgaW5zdGFsbGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19BVVRIX0RPTUFJTl06XG4gICAgICAnQmUgc3VyZSB0byBpbmNsdWRlIGF1dGhEb21haW4gd2hlbiBjYWxsaW5nIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKSwgJyArXG4gICAgICAnYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX0FQUF9DUkVERU5USUFMXTpcbiAgICAgICdUaGUgcGhvbmUgdmVyaWZpY2F0aW9uIHJlcXVlc3QgaXMgbWlzc2luZyBhbiBhcHBsaWNhdGlvbiB2ZXJpZmllciAnICtcbiAgICAgICdhc3NlcnRpb24uIEEgcmVDQVBUQ0hBIHJlc3BvbnNlIHRva2VuIG5lZWRzIHRvIGJlIHByb3ZpZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19DT0RFXTpcbiAgICAgICdUaGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIHdhcyBjcmVhdGVkIHdpdGggYW4gZW1wdHkgU01TIHZlcmlmaWNhdGlvbiBjb2RlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19DT05USU5VRV9VUkldOlxuICAgICAgJ0EgY29udGludWUgVVJMIG11c3QgYmUgcHJvdmlkZWQgaW4gdGhlIHJlcXVlc3QuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX0lGUkFNRV9TVEFSVF06ICdBbiBpbnRlcm5hbCBBdXRoRXJyb3IgaGFzIG9jY3VycmVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19JT1NfQlVORExFX0lEXTpcbiAgICAgICdBbiBpT1MgQnVuZGxlIElEIG11c3QgYmUgcHJvdmlkZWQgaWYgYW4gQXBwIFN0b3JlIElEIGlzIHByb3ZpZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19PUl9JTlZBTElEX05PTkNFXTpcbiAgICAgICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgbm9uY2UuIFRoaXMgY2FuIG9jY3VyIGlmIHRoZSAnICtcbiAgICAgICdTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkIHJhdyBub25jZSBkb2VzIG5vdCBtYXRjaCB0aGUgaGFzaGVkIG5vbmNlICcgK1xuICAgICAgJ2luIHRoZSBJRCB0b2tlbiBwYXlsb2FkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19QQVNTV09SRF06ICdBIG5vbi1lbXB0eSBwYXNzd29yZCBtdXN0IGJlIHByb3ZpZGVkJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX01GQV9JTkZPXTpcbiAgICAgICdObyBzZWNvbmQgZmFjdG9yIGlkZW50aWZpZXIgaXMgcHJvdmlkZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX01GQV9TRVNTSU9OXTpcbiAgICAgICdUaGUgcmVxdWVzdCBpcyBtaXNzaW5nIHByb29mIG9mIGZpcnN0IGZhY3RvciBzdWNjZXNzZnVsIHNpZ24taW4uJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX1BIT05FX05VTUJFUl06XG4gICAgICAnVG8gc2VuZCB2ZXJpZmljYXRpb24gY29kZXMsIHByb3ZpZGUgYSBwaG9uZSBudW1iZXIgZm9yIHRoZSByZWNpcGllbnQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX1NFU1NJT05fSU5GT106XG4gICAgICAnVGhlIHBob25lIGF1dGggY3JlZGVudGlhbCB3YXMgY3JlYXRlZCB3aXRoIGFuIGVtcHR5IHZlcmlmaWNhdGlvbiBJRC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk1PRFVMRV9ERVNUUk9ZRURdOlxuICAgICAgJ1RoaXMgaW5zdGFuY2Ugb2YgRmlyZWJhc2VBcHAgaGFzIGJlZW4gZGVsZXRlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk1GQV9JTkZPX05PVF9GT1VORF06XG4gICAgICAnVGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhIHNlY29uZCBmYWN0b3IgbWF0Y2hpbmcgdGhlIGlkZW50aWZpZXIgcHJvdmlkZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NRkFfUkVRVUlSRURdOlxuICAgICAgJ1Byb29mIG9mIG93bmVyc2hpcCBvZiBhIHNlY29uZCBmYWN0b3IgaXMgcmVxdWlyZWQgdG8gY29tcGxldGUgc2lnbi1pbi4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk5FRURfQ09ORklSTUFUSU9OXTpcbiAgICAgICdBbiBhY2NvdW50IGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHNhbWUgZW1haWwgYWRkcmVzcyBidXQgZGlmZmVyZW50ICcgK1xuICAgICAgJ3NpZ24taW4gY3JlZGVudGlhbHMuIFNpZ24gaW4gdXNpbmcgYSBwcm92aWRlciBhc3NvY2lhdGVkIHdpdGggdGhpcyAnICtcbiAgICAgICdlbWFpbCBhZGRyZXNzLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRF06XG4gICAgICAnQSBuZXR3b3JrIEF1dGhFcnJvciAoc3VjaCBhcyB0aW1lb3V0LCBpbnRlcnJ1cHRlZCBjb25uZWN0aW9uIG9yIHVucmVhY2hhYmxlIGhvc3QpIGhhcyBvY2N1cnJlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk5PX0FVVEhfRVZFTlRdOiAnQW4gaW50ZXJuYWwgQXV0aEVycm9yIGhhcyBvY2N1cnJlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk5PX1NVQ0hfUFJPVklERVJdOlxuICAgICAgJ1VzZXIgd2FzIG5vdCBsaW5rZWQgdG8gYW4gYWNjb3VudCB3aXRoIHRoZSBnaXZlbiBwcm92aWRlci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk5VTExfVVNFUl06XG4gICAgICAnQSBudWxsIHVzZXIgb2JqZWN0IHdhcyBwcm92aWRlZCBhcyB0aGUgYXJndW1lbnQgZm9yIGFuIG9wZXJhdGlvbiB3aGljaCAnICtcbiAgICAgICdyZXF1aXJlcyBhIG5vbi1udWxsIHVzZXIgb2JqZWN0LicsXG4gICAgW0F1dGhFcnJvckNvZGUuT1BFUkFUSU9OX05PVF9BTExPV0VEXTpcbiAgICAgICdUaGUgZ2l2ZW4gc2lnbi1pbiBwcm92aWRlciBpcyBkaXNhYmxlZCBmb3IgdGhpcyBGaXJlYmFzZSBwcm9qZWN0LiAnICtcbiAgICAgICdFbmFibGUgaXQgaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUsIHVuZGVyIHRoZSBzaWduLWluIG1ldGhvZCB0YWIgb2YgdGhlICcgK1xuICAgICAgJ0F1dGggc2VjdGlvbi4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXTpcbiAgICAgICdUaGlzIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBlbnZpcm9ubWVudCB0aGlzIGFwcGxpY2F0aW9uIGlzICcgK1xuICAgICAgJ3J1bm5pbmcgb24uIFwibG9jYXRpb24ucHJvdG9jb2xcIiBtdXN0IGJlIGh0dHAsIGh0dHBzIG9yIGNocm9tZS1leHRlbnNpb24nICtcbiAgICAgICcgYW5kIHdlYiBzdG9yYWdlIG11c3QgYmUgZW5hYmxlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlBPUFVQX0JMT0NLRURdOlxuICAgICAgJ1VuYWJsZSB0byBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIHdpdGggdGhlIHBvcHVwLiBJdCBtYXkgaGF2ZSBiZWVuIGJsb2NrZWQgYnkgdGhlIGJyb3dzZXIuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5QT1BVUF9DTE9TRURfQllfVVNFUl06XG4gICAgICAnVGhlIHBvcHVwIGhhcyBiZWVuIGNsb3NlZCBieSB0aGUgdXNlciBiZWZvcmUgZmluYWxpemluZyB0aGUgb3BlcmF0aW9uLicsXG4gICAgW0F1dGhFcnJvckNvZGUuUFJPVklERVJfQUxSRUFEWV9MSU5LRURdOlxuICAgICAgJ1VzZXIgY2FuIG9ubHkgYmUgbGlua2VkIHRvIG9uZSBpZGVudGl0eSBmb3IgdGhlIGdpdmVuIHByb3ZpZGVyLicsXG4gICAgW0F1dGhFcnJvckNvZGUuUVVPVEFfRVhDRUVERURdOlxuICAgICAgXCJUaGUgcHJvamVjdCdzIHF1b3RhIGZvciB0aGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBleGNlZWRlZC5cIixcbiAgICBbQXV0aEVycm9yQ29kZS5SRURJUkVDVF9DQU5DRUxMRURfQllfVVNFUl06XG4gICAgICAnVGhlIHJlZGlyZWN0IG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgYnkgdGhlIHVzZXIgYmVmb3JlIGZpbmFsaXppbmcuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5SRURJUkVDVF9PUEVSQVRJT05fUEVORElOR106XG4gICAgICAnQSByZWRpcmVjdCBzaWduLWluIG9wZXJhdGlvbiBpcyBhbHJlYWR5IHBlbmRpbmcuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5SRUpFQ1RFRF9DUkVERU5USUFMXTpcbiAgICAgICdUaGUgcmVxdWVzdCBjb250YWlucyBtYWxmb3JtZWQgb3IgbWlzbWF0Y2hpbmcgY3JlZGVudGlhbHMuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5TRUNPTkRfRkFDVE9SX0FMUkVBRFlfRU5ST0xMRURdOlxuICAgICAgJ1RoZSBzZWNvbmQgZmFjdG9yIGlzIGFscmVhZHkgZW5yb2xsZWQgb24gdGhpcyBhY2NvdW50LicsXG4gICAgW0F1dGhFcnJvckNvZGUuU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRF06XG4gICAgICAnVGhlIG1heGltdW0gYWxsb3dlZCBudW1iZXIgb2Ygc2Vjb25kIGZhY3RvcnMgb24gYSB1c2VyIGhhcyBiZWVuIGV4Y2VlZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVEVOQU5UX0lEX01JU01BVENIXTpcbiAgICAgIFwiVGhlIHByb3ZpZGVkIHRlbmFudCBJRCBkb2VzIG5vdCBtYXRjaCB0aGUgQXV0aCBpbnN0YW5jZSdzIHRlbmFudCBJRFwiLFxuICAgIFtBdXRoRXJyb3JDb2RlLlRJTUVPVVRdOiAnVGhlIG9wZXJhdGlvbiBoYXMgdGltZWQgb3V0LicsXG4gICAgW0F1dGhFcnJvckNvZGUuVE9LRU5fRVhQSVJFRF06XG4gICAgICBcIlRoZSB1c2VyJ3MgY3JlZGVudGlhbCBpcyBubyBsb25nZXIgdmFsaWQuIFRoZSB1c2VyIG11c3Qgc2lnbiBpbiBhZ2Fpbi5cIixcbiAgICBbQXV0aEVycm9yQ29kZS5UT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVJdOlxuICAgICAgJ1dlIGhhdmUgYmxvY2tlZCBhbGwgcmVxdWVzdHMgZnJvbSB0aGlzIGRldmljZSBkdWUgdG8gdW51c3VhbCBhY3Rpdml0eS4gJyArXG4gICAgICAnVHJ5IGFnYWluIGxhdGVyLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVU5BVVRIT1JJWkVEX0RPTUFJTl06XG4gICAgICAnVGhlIGRvbWFpbiBvZiB0aGUgY29udGludWUgVVJMIGlzIG5vdCB3aGl0ZWxpc3RlZC4gIFBsZWFzZSB3aGl0ZWxpc3QgJyArXG4gICAgICAndGhlIGRvbWFpbiBpbiB0aGUgRmlyZWJhc2UgY29uc29sZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVOU1VQUE9SVEVEX0ZJUlNUX0ZBQ1RPUl06XG4gICAgICAnRW5yb2xsaW5nIGEgc2Vjb25kIGZhY3RvciBvciBzaWduaW5nIGluIHdpdGggYSBtdWx0aS1mYWN0b3IgYWNjb3VudCByZXF1aXJlcyBzaWduLWluIHdpdGggYSBzdXBwb3J0ZWQgZmlyc3QgZmFjdG9yLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVU5TVVBQT1JURURfUEVSU0lTVEVOQ0VdOlxuICAgICAgJ1RoZSBjdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgdGhlIHNwZWNpZmllZCBwZXJzaXN0ZW5jZSB0eXBlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVU5TVVBQT1JURURfVEVOQU5UX09QRVJBVElPTl06XG4gICAgICAnVGhpcyBvcGVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiBhIG11bHRpLXRlbmFudCBjb250ZXh0LicsXG4gICAgW0F1dGhFcnJvckNvZGUuVU5WRVJJRklFRF9FTUFJTF06XG4gICAgICAnVGhlIG9wZXJhdGlvbiByZXF1aXJlcyBhIHZlcmlmaWVkIGVtYWlsLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVVNFUl9DQU5DRUxMRURdOlxuICAgICAgJ1RoZSB1c2VyIGRpZCBub3QgZ3JhbnQgeW91ciBhcHBsaWNhdGlvbiB0aGUgcGVybWlzc2lvbnMgaXQgcmVxdWVzdGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVVNFUl9ERUxFVEVEXTpcbiAgICAgICdUaGVyZSBpcyBubyB1c2VyIHJlY29yZCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgaWRlbnRpZmllci4gVGhlIHVzZXIgbWF5ICcgK1xuICAgICAgJ2hhdmUgYmVlbiBkZWxldGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVVNFUl9ESVNBQkxFRF06XG4gICAgICAnVGhlIHVzZXIgYWNjb3VudCBoYXMgYmVlbiBkaXNhYmxlZCBieSBhbiBhZG1pbmlzdHJhdG9yLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVVNFUl9NSVNNQVRDSF06XG4gICAgICAnVGhlIHN1cHBsaWVkIGNyZWRlbnRpYWxzIGRvIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBwcmV2aW91c2x5IHNpZ25lZCBpbiB1c2VyLicsXG4gICAgW0F1dGhFcnJvckNvZGUuVVNFUl9TSUdORURfT1VUXTogJycsXG4gICAgW0F1dGhFcnJvckNvZGUuV0VBS19QQVNTV09SRF06XG4gICAgICAnVGhlIHBhc3N3b3JkIG11c3QgYmUgNiBjaGFyYWN0ZXJzIGxvbmcgb3IgbW9yZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLldFQl9TVE9SQUdFX1VOU1VQUE9SVEVEXTpcbiAgICAgICdUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZCBvciAzcmQgcGFydHkgY29va2llcyBhbmQgZGF0YSBtYXkgYmUgZGlzYWJsZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5BTFJFQURZX0lOSVRJQUxJWkVEXTpcbiAgICAgICdpbml0aWFsaXplQXV0aCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIHdpdGggJyArXG4gICAgICAnZGlmZmVyZW50IG9wdGlvbnMuIFRvIGF2b2lkIHRoaXMgZXJyb3IsIGNhbGwgaW5pdGlhbGl6ZUF1dGgoKSB3aXRoIHRoZSAnICtcbiAgICAgICdzYW1lIG9wdGlvbnMgYXMgd2hlbiBpdCB3YXMgb3JpZ2luYWxseSBjYWxsZWQsIG9yIGNhbGwgZ2V0QXV0aCgpIHRvIHJldHVybiB0aGUnICtcbiAgICAgICcgYWxyZWFkeSBpbml0aWFsaXplZCBpbnN0YW5jZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUkVDQVBUQ0hBX1RPS0VOXTpcbiAgICAgICdUaGUgcmVDQVBUQ0hBIHRva2VuIGlzIG1pc3Npbmcgd2hlbiBzZW5kaW5nIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX1JFQ0FQVENIQV9UT0tFTl06XG4gICAgICAnVGhlIHJlQ0FQVENIQSB0b2tlbiBpcyBpbnZhbGlkIHdoZW4gc2VuZGluZyByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9SRUNBUFRDSEFfQUNUSU9OXTpcbiAgICAgICdUaGUgcmVDQVBUQ0hBIGFjdGlvbiBpcyBpbnZhbGlkIHdoZW4gc2VuZGluZyByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kLicsXG4gICAgW0F1dGhFcnJvckNvZGUuUkVDQVBUQ0hBX05PVF9FTkFCTEVEXTpcbiAgICAgICdyZUNBUFRDSEEgRW50ZXJwcmlzZSBpbnRlZ3JhdGlvbiBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBwcm9qZWN0LicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19DTElFTlRfVFlQRV06XG4gICAgICAnVGhlIHJlQ0FQVENIQSBjbGllbnQgdHlwZSBpcyBtaXNzaW5nIHdoZW4gc2VuZGluZyByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19SRUNBUFRDSEFfVkVSU0lPTl06XG4gICAgICAnVGhlIHJlQ0FQVENIQSB2ZXJzaW9uIGlzIG1pc3Npbmcgd2hlbiBzZW5kaW5nIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX1JFUV9UWVBFXTogJ0ludmFsaWQgcmVxdWVzdCBwYXJhbWV0ZXJzLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9SRUNBUFRDSEFfVkVSU0lPTl06XG4gICAgICAnVGhlIHJlQ0FQVENIQSB2ZXJzaW9uIGlzIGludmFsaWQgd2hlbiBzZW5kaW5nIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmQuJ1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWFwUmV0cmlldmVyIGV4dGVuZHMgQXV0aEVycm9yTWFwIHtcbiAgKCk6IEVycm9yTWFwPEF1dGhFcnJvckNvZGU+O1xufVxuXG5mdW5jdGlvbiBfcHJvZEVycm9yTWFwKCk6IEVycm9yTWFwPEF1dGhFcnJvckNvZGU+IHtcbiAgLy8gV2Ugd2lsbCBpbmNsdWRlIHRoaXMgb25lIG1lc3NhZ2UgaW4gdGhlIHByb2QgZXJyb3IgbWFwIHNpbmNlIGJ5IHRoZSB2ZXJ5XG4gIC8vIG5hdHVyZSBvZiB0aGlzIGVycm9yLCBkZXZlbG9wZXJzIHdpbGwgbmV2ZXIgYmUgYWJsZSB0byBzZWUgdGhlIG1lc3NhZ2VcbiAgLy8gdXNpbmcgdGhlIGRlYnVnRXJyb3JNYXAgKHdoaWNoIGlzIGluc3RhbGxlZCBkdXJpbmcgYXV0aCBpbml0aWFsaXphdGlvbikuXG4gIHJldHVybiB7XG4gICAgW0F1dGhFcnJvckNvZGUuREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIXTpcbiAgICAgICdBbm90aGVyIEZpcmViYXNlIFNESyB3YXMgaW5pdGlhbGl6ZWQgYW5kIGlzIHRyeWluZyB0byB1c2UgQXV0aCBiZWZvcmUgQXV0aCBpcyAnICtcbiAgICAgICdpbml0aWFsaXplZC4gUGxlYXNlIGJlIHN1cmUgdG8gY2FsbCBgaW5pdGlhbGl6ZUF1dGhgIG9yIGBnZXRBdXRoYCBiZWZvcmUgJyArXG4gICAgICAnc3RhcnRpbmcgYW55IG90aGVyIEZpcmViYXNlIFNESy4nXG4gIH0gYXMgRXJyb3JNYXA8QXV0aEVycm9yQ29kZT47XG59XG5cbi8qKlxuICogQSB2ZXJib3NlIGVycm9yIG1hcCB3aXRoIGRldGFpbGVkIGRlc2NyaXB0aW9ucyBmb3IgbW9zdCBlcnJvciBjb2Rlcy5cbiAqXG4gKiBTZWUgZGlzY3Vzc2lvbiBhdCB7QGxpbmsgQXV0aEVycm9yTWFwfVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGRlYnVnRXJyb3JNYXA6IEF1dGhFcnJvck1hcCA9IF9kZWJ1Z0Vycm9yTWFwO1xuXG4vKipcbiAqIEEgbWluaW1hbCBlcnJvciBtYXAgd2l0aCBhbGwgdmVyYm9zZSBlcnJvciBtZXNzYWdlcyBzdHJpcHBlZC5cbiAqXG4gKiBTZWUgZGlzY3Vzc2lvbiBhdCB7QGxpbmsgQXV0aEVycm9yTWFwfVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2RFcnJvck1hcDogQXV0aEVycm9yTWFwID0gX3Byb2RFcnJvck1hcDtcblxuZXhwb3J0IGludGVyZmFjZSBOYW1lZEVycm9yUGFyYW1zIHtcbiAgYXBwTmFtZTogQXBwTmFtZTtcbiAgY3JlZGVudGlhbD86IEF1dGhDcmVkZW50aWFsO1xuICBlbWFpbD86IHN0cmluZztcbiAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xuICB1c2VyPzogVXNlcjtcbiAgX3NlcnZlclJlc3BvbnNlPzogb2JqZWN0O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG50eXBlIEdlbmVyaWNBdXRoRXJyb3JQYXJhbXMgPSB7XG4gIFtrZXkgaW4gRXhjbHVkZTxcbiAgICBBdXRoRXJyb3JDb2RlLFxuICAgIHwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICAgIHwgQXV0aEVycm9yQ29kZS5ERVBFTkRFTlRfU0RLX0lOSVRfQkVGT1JFX0FVVEhcbiAgICB8IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICB8IEF1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEXG4gICAgfCBBdXRoRXJyb3JDb2RlLk5PX0FVVEhfRVZFTlRcbiAgICB8IEF1dGhFcnJvckNvZGUuT1BFUkFUSU9OX05PVF9TVVBQT1JURURcbiAgPl06IHtcbiAgICBhcHBOYW1lPzogQXBwTmFtZTtcbiAgICBlbWFpbD86IHN0cmluZztcbiAgICBwaG9uZU51bWJlcj86IHN0cmluZztcbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuICB9O1xufTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdXRoRXJyb3JQYXJhbXMgZXh0ZW5kcyBHZW5lcmljQXV0aEVycm9yUGFyYW1zIHtcbiAgW0F1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JdOiB7IGFwcE5hbWU/OiBBcHBOYW1lIH07XG4gIFtBdXRoRXJyb3JDb2RlLkRFUEVOREVOVF9TREtfSU5JVF9CRUZPUkVfQVVUSF06IHsgYXBwTmFtZT86IEFwcE5hbWUgfTtcbiAgW0F1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JdOiB7IGFwcE5hbWU/OiBBcHBOYW1lIH07XG4gIFtBdXRoRXJyb3JDb2RlLkxPR0lOX0JMT0NLRURdOiB7XG4gICAgYXBwTmFtZT86IEFwcE5hbWU7XG4gICAgb3JpZ2luYWxNZXNzYWdlPzogc3RyaW5nO1xuICB9O1xuICBbQXV0aEVycm9yQ29kZS5PUEVSQVRJT05fTk9UX1NVUFBPUlRFRF06IHsgYXBwTmFtZT86IEFwcE5hbWUgfTtcbiAgW0F1dGhFcnJvckNvZGUuTk9fQVVUSF9FVkVOVF06IHsgYXBwTmFtZT86IEFwcE5hbWUgfTtcbiAgW0F1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEXToge1xuICAgIGFwcE5hbWU6IEFwcE5hbWU7XG4gICAgX3NlcnZlclJlc3BvbnNlOiBJZFRva2VuTWZhUmVzcG9uc2U7XG4gIH07XG4gIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfQ09SRE9WQV9DT05GSUdVUkFUSU9OXToge1xuICAgIGFwcE5hbWU6IEFwcE5hbWU7XG4gICAgbWlzc2luZ1BsdWdpbj86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3Rvcnk8XG4gIEF1dGhFcnJvckNvZGUsXG4gIEF1dGhFcnJvclBhcmFtc1xuPignYXV0aCcsICdGaXJlYmFzZScsIF9wcm9kRXJyb3JNYXAoKSk7XG5cbi8qKlxuICogQSBtYXAgb2YgcG90ZW50aWFsIGBBdXRoYCBlcnJvciBjb2RlcywgZm9yIGVhc2llciBjb21wYXJpc29uIHdpdGggZXJyb3JzXG4gKiB0aHJvd24gYnkgdGhlIFNESy5cbiAqXG4gKiBAcmVtYXJrc1xuICogTm90ZSB0aGF0IHlvdSBjYW4ndCB0cmVlLXNoYWtlIGluZGl2aWR1YWwga2V5c1xuICogaW4gdGhlIG1hcCwgc28gYnkgdXNpbmcgdGhlIG1hcCB5b3UgbWlnaHQgc3Vic3RhbnRpYWxseSBpbmNyZWFzZSB5b3VyXG4gKiBidW5kbGUgc2l6ZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBBVVRIX0VSUk9SX0NPREVTX01BUF9ET19OT1RfVVNFX0lOVEVSTkFMTFkgPSB7XG4gIEFETUlOX09OTFlfT1BFUkFUSU9OOiAnYXV0aC9hZG1pbi1yZXN0cmljdGVkLW9wZXJhdGlvbicsXG4gIEFSR1VNRU5UX0VSUk9SOiAnYXV0aC9hcmd1bWVudC1lcnJvcicsXG4gIEFQUF9OT1RfQVVUSE9SSVpFRDogJ2F1dGgvYXBwLW5vdC1hdXRob3JpemVkJyxcbiAgQVBQX05PVF9JTlNUQUxMRUQ6ICdhdXRoL2FwcC1ub3QtaW5zdGFsbGVkJyxcbiAgQ0FQVENIQV9DSEVDS19GQUlMRUQ6ICdhdXRoL2NhcHRjaGEtY2hlY2stZmFpbGVkJyxcbiAgQ09ERV9FWFBJUkVEOiAnYXV0aC9jb2RlLWV4cGlyZWQnLFxuICBDT1JET1ZBX05PVF9SRUFEWTogJ2F1dGgvY29yZG92YS1ub3QtcmVhZHknLFxuICBDT1JTX1VOU1VQUE9SVEVEOiAnYXV0aC9jb3JzLXVuc3VwcG9ydGVkJyxcbiAgQ1JFREVOVElBTF9BTFJFQURZX0lOX1VTRTogJ2F1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZScsXG4gIENSRURFTlRJQUxfTUlTTUFUQ0g6ICdhdXRoL2N1c3RvbS10b2tlbi1taXNtYXRjaCcsXG4gIENSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTjogJ2F1dGgvcmVxdWlyZXMtcmVjZW50LWxvZ2luJyxcbiAgREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIOiAnYXV0aC9kZXBlbmRlbnQtc2RrLWluaXRpYWxpemVkLWJlZm9yZS1hdXRoJyxcbiAgRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQ6ICdhdXRoL2R5bmFtaWMtbGluay1ub3QtYWN0aXZhdGVkJyxcbiAgRU1BSUxfQ0hBTkdFX05FRURTX1ZFUklGSUNBVElPTjogJ2F1dGgvZW1haWwtY2hhbmdlLW5lZWRzLXZlcmlmaWNhdGlvbicsXG4gIEVNQUlMX0VYSVNUUzogJ2F1dGgvZW1haWwtYWxyZWFkeS1pbi11c2UnLFxuICBFTVVMQVRPUl9DT05GSUdfRkFJTEVEOiAnYXV0aC9lbXVsYXRvci1jb25maWctZmFpbGVkJyxcbiAgRVhQSVJFRF9PT0JfQ09ERTogJ2F1dGgvZXhwaXJlZC1hY3Rpb24tY29kZScsXG4gIEVYUElSRURfUE9QVVBfUkVRVUVTVDogJ2F1dGgvY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3QnLFxuICBJTlRFUk5BTF9FUlJPUjogJ2F1dGgvaW50ZXJuYWwtZXJyb3InLFxuICBJTlZBTElEX0FQSV9LRVk6ICdhdXRoL2ludmFsaWQtYXBpLWtleScsXG4gIElOVkFMSURfQVBQX0NSRURFTlRJQUw6ICdhdXRoL2ludmFsaWQtYXBwLWNyZWRlbnRpYWwnLFxuICBJTlZBTElEX0FQUF9JRDogJ2F1dGgvaW52YWxpZC1hcHAtaWQnLFxuICBJTlZBTElEX0FVVEg6ICdhdXRoL2ludmFsaWQtdXNlci10b2tlbicsXG4gIElOVkFMSURfQVVUSF9FVkVOVDogJ2F1dGgvaW52YWxpZC1hdXRoLWV2ZW50JyxcbiAgSU5WQUxJRF9DRVJUX0hBU0g6ICdhdXRoL2ludmFsaWQtY2VydC1oYXNoJyxcbiAgSU5WQUxJRF9DT0RFOiAnYXV0aC9pbnZhbGlkLXZlcmlmaWNhdGlvbi1jb2RlJyxcbiAgSU5WQUxJRF9DT05USU5VRV9VUkk6ICdhdXRoL2ludmFsaWQtY29udGludWUtdXJpJyxcbiAgSU5WQUxJRF9DT1JET1ZBX0NPTkZJR1VSQVRJT046ICdhdXRoL2ludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uJyxcbiAgSU5WQUxJRF9DVVNUT01fVE9LRU46ICdhdXRoL2ludmFsaWQtY3VzdG9tLXRva2VuJyxcbiAgSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOOiAnYXV0aC9pbnZhbGlkLWR5bmFtaWMtbGluay1kb21haW4nLFxuICBJTlZBTElEX0VNQUlMOiAnYXV0aC9pbnZhbGlkLWVtYWlsJyxcbiAgSU5WQUxJRF9FTVVMQVRPUl9TQ0hFTUU6ICdhdXRoL2ludmFsaWQtZW11bGF0b3Itc2NoZW1lJyxcbiAgSU5WQUxJRF9JRFBfUkVTUE9OU0U6ICdhdXRoL2ludmFsaWQtY3JlZGVudGlhbCcsXG4gIElOVkFMSURfTUVTU0FHRV9QQVlMT0FEOiAnYXV0aC9pbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZCcsXG4gIElOVkFMSURfTUZBX1NFU1NJT046ICdhdXRoL2ludmFsaWQtbXVsdGktZmFjdG9yLXNlc3Npb24nLFxuICBJTlZBTElEX09BVVRIX0NMSUVOVF9JRDogJ2F1dGgvaW52YWxpZC1vYXV0aC1jbGllbnQtaWQnLFxuICBJTlZBTElEX09BVVRIX1BST1ZJREVSOiAnYXV0aC9pbnZhbGlkLW9hdXRoLXByb3ZpZGVyJyxcbiAgSU5WQUxJRF9PT0JfQ09ERTogJ2F1dGgvaW52YWxpZC1hY3Rpb24tY29kZScsXG4gIElOVkFMSURfT1JJR0lOOiAnYXV0aC91bmF1dGhvcml6ZWQtZG9tYWluJyxcbiAgSU5WQUxJRF9QQVNTV09SRDogJ2F1dGgvd3JvbmctcGFzc3dvcmQnLFxuICBJTlZBTElEX1BFUlNJU1RFTkNFOiAnYXV0aC9pbnZhbGlkLXBlcnNpc3RlbmNlLXR5cGUnLFxuICBJTlZBTElEX1BIT05FX05VTUJFUjogJ2F1dGgvaW52YWxpZC1waG9uZS1udW1iZXInLFxuICBJTlZBTElEX1BST1ZJREVSX0lEOiAnYXV0aC9pbnZhbGlkLXByb3ZpZGVyLWlkJyxcbiAgSU5WQUxJRF9SRUNJUElFTlRfRU1BSUw6ICdhdXRoL2ludmFsaWQtcmVjaXBpZW50LWVtYWlsJyxcbiAgSU5WQUxJRF9TRU5ERVI6ICdhdXRoL2ludmFsaWQtc2VuZGVyJyxcbiAgSU5WQUxJRF9TRVNTSU9OX0lORk86ICdhdXRoL2ludmFsaWQtdmVyaWZpY2F0aW9uLWlkJyxcbiAgSU5WQUxJRF9URU5BTlRfSUQ6ICdhdXRoL2ludmFsaWQtdGVuYW50LWlkJyxcbiAgTUZBX0lORk9fTk9UX0ZPVU5EOiAnYXV0aC9tdWx0aS1mYWN0b3ItaW5mby1ub3QtZm91bmQnLFxuICBNRkFfUkVRVUlSRUQ6ICdhdXRoL211bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkJyxcbiAgTUlTU0lOR19BTkRST0lEX1BBQ0tBR0VfTkFNRTogJ2F1dGgvbWlzc2luZy1hbmRyb2lkLXBrZy1uYW1lJyxcbiAgTUlTU0lOR19BUFBfQ1JFREVOVElBTDogJ2F1dGgvbWlzc2luZy1hcHAtY3JlZGVudGlhbCcsXG4gIE1JU1NJTkdfQVVUSF9ET01BSU46ICdhdXRoL2F1dGgtZG9tYWluLWNvbmZpZy1yZXF1aXJlZCcsXG4gIE1JU1NJTkdfQ09ERTogJ2F1dGgvbWlzc2luZy12ZXJpZmljYXRpb24tY29kZScsXG4gIE1JU1NJTkdfQ09OVElOVUVfVVJJOiAnYXV0aC9taXNzaW5nLWNvbnRpbnVlLXVyaScsXG4gIE1JU1NJTkdfSUZSQU1FX1NUQVJUOiAnYXV0aC9taXNzaW5nLWlmcmFtZS1zdGFydCcsXG4gIE1JU1NJTkdfSU9TX0JVTkRMRV9JRDogJ2F1dGgvbWlzc2luZy1pb3MtYnVuZGxlLWlkJyxcbiAgTUlTU0lOR19PUl9JTlZBTElEX05PTkNFOiAnYXV0aC9taXNzaW5nLW9yLWludmFsaWQtbm9uY2UnLFxuICBNSVNTSU5HX01GQV9JTkZPOiAnYXV0aC9taXNzaW5nLW11bHRpLWZhY3Rvci1pbmZvJyxcbiAgTUlTU0lOR19NRkFfU0VTU0lPTjogJ2F1dGgvbWlzc2luZy1tdWx0aS1mYWN0b3Itc2Vzc2lvbicsXG4gIE1JU1NJTkdfUEhPTkVfTlVNQkVSOiAnYXV0aC9taXNzaW5nLXBob25lLW51bWJlcicsXG4gIE1JU1NJTkdfU0VTU0lPTl9JTkZPOiAnYXV0aC9taXNzaW5nLXZlcmlmaWNhdGlvbi1pZCcsXG4gIE1PRFVMRV9ERVNUUk9ZRUQ6ICdhdXRoL2FwcC1kZWxldGVkJyxcbiAgTkVFRF9DT05GSVJNQVRJT046ICdhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnLFxuICBORVRXT1JLX1JFUVVFU1RfRkFJTEVEOiAnYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkJyxcbiAgTlVMTF9VU0VSOiAnYXV0aC9udWxsLXVzZXInLFxuICBOT19BVVRIX0VWRU5UOiAnYXV0aC9uby1hdXRoLWV2ZW50JyxcbiAgTk9fU1VDSF9QUk9WSURFUjogJ2F1dGgvbm8tc3VjaC1wcm92aWRlcicsXG4gIE9QRVJBVElPTl9OT1RfQUxMT1dFRDogJ2F1dGgvb3BlcmF0aW9uLW5vdC1hbGxvd2VkJyxcbiAgT1BFUkFUSU9OX05PVF9TVVBQT1JURUQ6ICdhdXRoL29wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnQnLFxuICBQT1BVUF9CTE9DS0VEOiAnYXV0aC9wb3B1cC1ibG9ja2VkJyxcbiAgUE9QVVBfQ0xPU0VEX0JZX1VTRVI6ICdhdXRoL3BvcHVwLWNsb3NlZC1ieS11c2VyJyxcbiAgUFJPVklERVJfQUxSRUFEWV9MSU5LRUQ6ICdhdXRoL3Byb3ZpZGVyLWFscmVhZHktbGlua2VkJyxcbiAgUVVPVEFfRVhDRUVERUQ6ICdhdXRoL3F1b3RhLWV4Y2VlZGVkJyxcbiAgUkVESVJFQ1RfQ0FOQ0VMTEVEX0JZX1VTRVI6ICdhdXRoL3JlZGlyZWN0LWNhbmNlbGxlZC1ieS11c2VyJyxcbiAgUkVESVJFQ1RfT1BFUkFUSU9OX1BFTkRJTkc6ICdhdXRoL3JlZGlyZWN0LW9wZXJhdGlvbi1wZW5kaW5nJyxcbiAgUkVKRUNURURfQ1JFREVOVElBTDogJ2F1dGgvcmVqZWN0ZWQtY3JlZGVudGlhbCcsXG4gIFNFQ09ORF9GQUNUT1JfQUxSRUFEWV9FTlJPTExFRDogJ2F1dGgvc2Vjb25kLWZhY3Rvci1hbHJlYWR5LWluLXVzZScsXG4gIFNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQ6ICdhdXRoL21heGltdW0tc2Vjb25kLWZhY3Rvci1jb3VudC1leGNlZWRlZCcsXG4gIFRFTkFOVF9JRF9NSVNNQVRDSDogJ2F1dGgvdGVuYW50LWlkLW1pc21hdGNoJyxcbiAgVElNRU9VVDogJ2F1dGgvdGltZW91dCcsXG4gIFRPS0VOX0VYUElSRUQ6ICdhdXRoL3VzZXItdG9rZW4tZXhwaXJlZCcsXG4gIFRPT19NQU5ZX0FUVEVNUFRTX1RSWV9MQVRFUjogJ2F1dGgvdG9vLW1hbnktcmVxdWVzdHMnLFxuICBVTkFVVEhPUklaRURfRE9NQUlOOiAnYXV0aC91bmF1dGhvcml6ZWQtY29udGludWUtdXJpJyxcbiAgVU5TVVBQT1JURURfRklSU1RfRkFDVE9SOiAnYXV0aC91bnN1cHBvcnRlZC1maXJzdC1mYWN0b3InLFxuICBVTlNVUFBPUlRFRF9QRVJTSVNURU5DRTogJ2F1dGgvdW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZScsXG4gIFVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT046ICdhdXRoL3Vuc3VwcG9ydGVkLXRlbmFudC1vcGVyYXRpb24nLFxuICBVTlZFUklGSUVEX0VNQUlMOiAnYXV0aC91bnZlcmlmaWVkLWVtYWlsJyxcbiAgVVNFUl9DQU5DRUxMRUQ6ICdhdXRoL3VzZXItY2FuY2VsbGVkJyxcbiAgVVNFUl9ERUxFVEVEOiAnYXV0aC91c2VyLW5vdC1mb3VuZCcsXG4gIFVTRVJfRElTQUJMRUQ6ICdhdXRoL3VzZXItZGlzYWJsZWQnLFxuICBVU0VSX01JU01BVENIOiAnYXV0aC91c2VyLW1pc21hdGNoJyxcbiAgVVNFUl9TSUdORURfT1VUOiAnYXV0aC91c2VyLXNpZ25lZC1vdXQnLFxuICBXRUFLX1BBU1NXT1JEOiAnYXV0aC93ZWFrLXBhc3N3b3JkJyxcbiAgV0VCX1NUT1JBR0VfVU5TVVBQT1JURUQ6ICdhdXRoL3dlYi1zdG9yYWdlLXVuc3VwcG9ydGVkJyxcbiAgQUxSRUFEWV9JTklUSUFMSVpFRDogJ2F1dGgvYWxyZWFkeS1pbml0aWFsaXplZCcsXG4gIFJFQ0FQVENIQV9OT1RfRU5BQkxFRDogJ2F1dGgvcmVjYXB0Y2hhLW5vdC1lbmFibGVkJyxcbiAgTUlTU0lOR19SRUNBUFRDSEFfVE9LRU46ICdhdXRoL21pc3NpbmctcmVjYXB0Y2hhLXRva2VuJyxcbiAgSU5WQUxJRF9SRUNBUFRDSEFfVE9LRU46ICdhdXRoL2ludmFsaWQtcmVjYXB0Y2hhLXRva2VuJyxcbiAgSU5WQUxJRF9SRUNBUFRDSEFfQUNUSU9OOiAnYXV0aC9pbnZhbGlkLXJlY2FwdGNoYS1hY3Rpb24nLFxuICBNSVNTSU5HX0NMSUVOVF9UWVBFOiAnYXV0aC9taXNzaW5nLWNsaWVudC10eXBlJyxcbiAgTUlTU0lOR19SRUNBUFRDSEFfVkVSU0lPTjogJ2F1dGgvbWlzc2luZy1yZWNhcHRjaGEtdmVyc2lvbicsXG4gIElOVkFMSURfUkVDQVBUQ0hBX1ZFUlNJT046ICdhdXRoL2ludmFsaWQtcmVjYXB0Y2hhLXZlcnNpb24nLFxuICBJTlZBTElEX1JFUV9UWVBFOiAnYXV0aC9pbnZhbGlkLXJlcS10eXBlJ1xufSBhcyBjb25zdDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IExvZ2dlciwgTG9nTGV2ZWwgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbmV4cG9ydCB7IExvZ0xldmVsIH07XG5cbmNvbnN0IGxvZ0NsaWVudCA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hdXRoJyk7XG5cbi8vIEhlbHBlciBtZXRob2RzIGFyZSBuZWVkZWQgYmVjYXVzZSB2YXJpYWJsZXMgY2FuJ3QgYmUgZXhwb3J0ZWQgYXMgcmVhZC93cml0ZVxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRMb2dMZXZlbCgpOiBMb2dMZXZlbCB7XG4gIHJldHVybiBsb2dDbGllbnQubG9nTGV2ZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfc2V0TG9nTGV2ZWwobmV3TGV2ZWw6IExvZ0xldmVsKTogdm9pZCB7XG4gIGxvZ0NsaWVudC5sb2dMZXZlbCA9IG5ld0xldmVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2xvZ0RlYnVnKG1zZzogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IHZvaWQge1xuICBpZiAobG9nQ2xpZW50LmxvZ0xldmVsIDw9IExvZ0xldmVsLkRFQlVHKSB7XG4gICAgbG9nQ2xpZW50LmRlYnVnKGBBdXRoICgke1NES19WRVJTSU9OfSk6ICR7bXNnfWAsIC4uLmFyZ3MpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfbG9nV2Fybihtc2c6IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkIHtcbiAgaWYgKGxvZ0NsaWVudC5sb2dMZXZlbCA8PSBMb2dMZXZlbC5XQVJOKSB7XG4gICAgbG9nQ2xpZW50Lndhcm4oYEF1dGggKCR7U0RLX1ZFUlNJT059KTogJHttc2d9YCwgLi4uYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9sb2dFcnJvcihtc2c6IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkIHtcbiAgaWYgKGxvZ0NsaWVudC5sb2dMZXZlbCA8PSBMb2dMZXZlbC5FUlJPUikge1xuICAgIGxvZ0NsaWVudC5lcnJvcihgQXV0aCAoJHtTREtfVkVSU0lPTn0pOiAke21zZ31gLCAuLi5hcmdzKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7XG4gIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWSxcbiAgQXV0aEVycm9yQ29kZSxcbiAgQXV0aEVycm9yUGFyYW1zLFxuICBwcm9kRXJyb3JNYXAsXG4gIEVycm9yTWFwUmV0cmlldmVyXG59IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfbG9nRXJyb3IgfSBmcm9tICcuL2xvZyc7XG5cbnR5cGUgQXV0aEVycm9yTGlzdFBhcmFtczxLPiA9IEsgZXh0ZW5kcyBrZXlvZiBBdXRoRXJyb3JQYXJhbXNcbiAgPyBbQXV0aEVycm9yUGFyYW1zW0tdXVxuICA6IFtdO1xudHlwZSBMZXNzQXBwTmFtZTxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4gPSBPbWl0PEF1dGhFcnJvclBhcmFtc1tLXSwgJ2FwcE5hbWUnPjtcblxuLyoqXG4gKiBVbmNvbmRpdGlvbmFsbHkgZmFpbHMsIHRocm93aW5nIGEgZGV2ZWxvcGVyIGZhY2luZyBJTlRFUk5BTF9FUlJPUlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEKTsgIC8vIEVycm9yOiB0aGUgTUZBX1JFUVVJUkVEIGVycm9yIG5lZWRzIG1vcmUgcGFyYW1zIHRoYW4gYXBwTmFtZVxuICogZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk1GQV9SRVFVSVJFRCwge3NlcnZlclJlc3BvbnNlfSk7ICAvLyBDb21waWxlc1xuICogZmFpbChBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTsgIC8vIENvbXBpbGVzOyBpbnRlcm5hbCBlcnJvciBkb2VzIG5vdCBuZWVkIGFwcE5hbWVcbiAqIGZhaWwoQXV0aEVycm9yQ29kZS5VU0VSX0RFTEVURUQpOyAgLy8gRXJyb3I6IFVTRVJfREVMRVRFRCByZXF1aXJlcyBhcHAgbmFtZVxuICogZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLlVTRVJfREVMRVRFRCk7ICAvLyBDb21waWxlczsgVVNFUl9ERUxFVEVEIF9vbmx5XyBuZWVkcyBhcHAgbmFtZVxuICogYGBgXG4gKlxuICogQHBhcmFtIGFwcE5hbWUgQXBwIG5hbWUgZm9yIHRhZ2dpbmcgdGhlIGVycm9yXG4gKiBAdGhyb3dzIEZpcmViYXNlRXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9mYWlsPEsgZXh0ZW5kcyBBdXRoRXJyb3JDb2RlPihcbiAgY29kZTogSyxcbiAgLi4uZGF0YToge30gZXh0ZW5kcyBBdXRoRXJyb3JQYXJhbXNbS11cbiAgICA/IFtBdXRoRXJyb3JQYXJhbXNbS10/XVxuICAgIDogW0F1dGhFcnJvclBhcmFtc1tLXV1cbik6IG5ldmVyO1xuZXhwb3J0IGZ1bmN0aW9uIF9mYWlsPEsgZXh0ZW5kcyBBdXRoRXJyb3JDb2RlPihcbiAgYXV0aDogQXV0aCxcbiAgY29kZTogSyxcbiAgLi4uZGF0YToge30gZXh0ZW5kcyBMZXNzQXBwTmFtZTxLPiA/IFtMZXNzQXBwTmFtZTxLPj9dIDogW0xlc3NBcHBOYW1lPEs+XVxuKTogbmV2ZXI7XG5leHBvcnQgZnVuY3Rpb24gX2ZhaWw8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhdXRoT3JDb2RlOiBBdXRoIHwgSyxcbiAgLi4ucmVzdDogdW5rbm93bltdXG4pOiBuZXZlciB7XG4gIHRocm93IGNyZWF0ZUVycm9ySW50ZXJuYWwoYXV0aE9yQ29kZSwgLi4ucmVzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY3JlYXRlRXJyb3I8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBjb2RlOiBLLFxuICAuLi5kYXRhOiB7fSBleHRlbmRzIEF1dGhFcnJvclBhcmFtc1tLXVxuICAgID8gW0F1dGhFcnJvclBhcmFtc1tLXT9dXG4gICAgOiBbQXV0aEVycm9yUGFyYW1zW0tdXVxuKTogRmlyZWJhc2VFcnJvcjtcbmV4cG9ydCBmdW5jdGlvbiBfY3JlYXRlRXJyb3I8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhdXRoOiBBdXRoLFxuICBjb2RlOiBLLFxuICAuLi5kYXRhOiB7fSBleHRlbmRzIExlc3NBcHBOYW1lPEs+ID8gW0xlc3NBcHBOYW1lPEs+P10gOiBbTGVzc0FwcE5hbWU8Sz5dXG4pOiBGaXJlYmFzZUVycm9yO1xuZXhwb3J0IGZ1bmN0aW9uIF9jcmVhdGVFcnJvcjxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4oXG4gIGF1dGhPckNvZGU6IEF1dGggfCBLLFxuICAuLi5yZXN0OiB1bmtub3duW11cbik6IEZpcmViYXNlRXJyb3Ige1xuICByZXR1cm4gY3JlYXRlRXJyb3JJbnRlcm5hbChhdXRoT3JDb2RlLCAuLi5yZXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9lcnJvcldpdGhDdXN0b21NZXNzYWdlKFxuICBhdXRoOiBBdXRoLFxuICBjb2RlOiBBdXRoRXJyb3JDb2RlLFxuICBtZXNzYWdlOiBzdHJpbmdcbik6IEZpcmViYXNlRXJyb3Ige1xuICBjb25zdCBlcnJvck1hcCA9IHtcbiAgICAuLi4ocHJvZEVycm9yTWFwIGFzIEVycm9yTWFwUmV0cmlldmVyKSgpLFxuICAgIFtjb2RlXTogbWVzc2FnZVxuICB9O1xuICBjb25zdCBmYWN0b3J5ID0gbmV3IEVycm9yRmFjdG9yeTxBdXRoRXJyb3JDb2RlLCBBdXRoRXJyb3JQYXJhbXM+KFxuICAgICdhdXRoJyxcbiAgICAnRmlyZWJhc2UnLFxuICAgIGVycm9yTWFwXG4gICk7XG4gIHJldHVybiBmYWN0b3J5LmNyZWF0ZShjb2RlLCB7XG4gICAgYXBwTmFtZTogYXV0aC5uYW1lXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Fzc2VydEluc3RhbmNlT2YoXG4gIGF1dGg6IEF1dGgsXG4gIG9iamVjdDogb2JqZWN0LFxuICBpbnN0YW5jZTogdW5rbm93blxuKTogdm9pZCB7XG4gIGNvbnN0IGNvbnN0cnVjdG9ySW5zdGFuY2UgPSBpbnN0YW5jZSBhcyB7IG5ldyAoLi4uYXJnczogdW5rbm93bltdKTogdW5rbm93biB9O1xuICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvckluc3RhbmNlKSkge1xuICAgIGlmIChjb25zdHJ1Y3Rvckluc3RhbmNlLm5hbWUgIT09IG9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICB9XG5cbiAgICB0aHJvdyBfZXJyb3JXaXRoQ3VzdG9tTWVzc2FnZShcbiAgICAgIGF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SLFxuICAgICAgYFR5cGUgb2YgJHtvYmplY3QuY29uc3RydWN0b3IubmFtZX0gZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQgaW5zdGFuY2UuYCArXG4gICAgICAgIGBEaWQgeW91IHBhc3MgYSByZWZlcmVuY2UgZnJvbSBhIGRpZmZlcmVudCBBdXRoIFNESz9gXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJvckludGVybmFsPEsgZXh0ZW5kcyBBdXRoRXJyb3JDb2RlPihcbiAgYXV0aE9yQ29kZTogQXV0aCB8IEssXG4gIC4uLnJlc3Q6IHVua25vd25bXVxuKTogRmlyZWJhc2VFcnJvciB7XG4gIGlmICh0eXBlb2YgYXV0aE9yQ29kZSAhPT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBjb2RlID0gcmVzdFswXSBhcyBLO1xuICAgIGNvbnN0IGZ1bGxQYXJhbXMgPSBbLi4ucmVzdC5zbGljZSgxKV0gYXMgQXV0aEVycm9yTGlzdFBhcmFtczxLPjtcbiAgICBpZiAoZnVsbFBhcmFtc1swXSkge1xuICAgICAgZnVsbFBhcmFtc1swXS5hcHBOYW1lID0gYXV0aE9yQ29kZS5uYW1lO1xuICAgIH1cblxuICAgIHJldHVybiAoYXV0aE9yQ29kZSBhcyBBdXRoSW50ZXJuYWwpLl9lcnJvckZhY3RvcnkuY3JlYXRlKFxuICAgICAgY29kZSxcbiAgICAgIC4uLmZ1bGxQYXJhbXNcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWS5jcmVhdGUoXG4gICAgYXV0aE9yQ29kZSxcbiAgICAuLi4ocmVzdCBhcyBBdXRoRXJyb3JMaXN0UGFyYW1zPEs+KVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Fzc2VydDxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4oXG4gIGFzc2VydGlvbjogdW5rbm93bixcbiAgY29kZTogSyxcbiAgLi4uZGF0YToge30gZXh0ZW5kcyBBdXRoRXJyb3JQYXJhbXNbS11cbiAgICA/IFtBdXRoRXJyb3JQYXJhbXNbS10/XVxuICAgIDogW0F1dGhFcnJvclBhcmFtc1tLXV1cbik6IGFzc2VydHMgYXNzZXJ0aW9uO1xuZXhwb3J0IGZ1bmN0aW9uIF9hc3NlcnQ8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhc3NlcnRpb246IHVua25vd24sXG4gIGF1dGg6IEF1dGgsXG4gIGNvZGU6IEssXG4gIC4uLmRhdGE6IHt9IGV4dGVuZHMgTGVzc0FwcE5hbWU8Sz4gPyBbTGVzc0FwcE5hbWU8Sz4/XSA6IFtMZXNzQXBwTmFtZTxLPl1cbik6IGFzc2VydHMgYXNzZXJ0aW9uO1xuZXhwb3J0IGZ1bmN0aW9uIF9hc3NlcnQ8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhc3NlcnRpb246IHVua25vd24sXG4gIGF1dGhPckNvZGU6IEF1dGggfCBLLFxuICAuLi5yZXN0OiB1bmtub3duW11cbik6IGFzc2VydHMgYXNzZXJ0aW9uIHtcbiAgaWYgKCFhc3NlcnRpb24pIHtcbiAgICB0aHJvdyBjcmVhdGVFcnJvckludGVybmFsKGF1dGhPckNvZGUsIC4uLnJlc3QpO1xuICB9XG59XG5cbi8vIFdlIHJlYWxseSBkbyB3YW50IHRvIGFjY2VwdCBsaXRlcmFsbHkgYW55IGZ1bmN0aW9uIHR5cGUgaGVyZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbnR5cGUgVHlwZUV4cGVjdGF0aW9uID0gRnVuY3Rpb24gfCBzdHJpbmcgfCBNYXBUeXBlO1xuXG5pbnRlcmZhY2UgTWFwVHlwZSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIFR5cGVFeHBlY3RhdGlvbiB8IE9wdGlvbmFsPiB7fVxuXG5jbGFzcyBPcHRpb25hbCB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHR5cGU6IFR5cGVFeHBlY3RhdGlvbikge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9wdCh0eXBlOiBUeXBlRXhwZWN0YXRpb24pOiBPcHRpb25hbCB7XG4gIHJldHVybiBuZXcgT3B0aW9uYWwodHlwZSk7XG59XG5cbi8qKlxuICogQXNzZXJ0cyB0aGUgcnVudGltZSB0eXBlcyBvZiBhcmd1bWVudHMuIFRoZSAnZXhwZWN0ZWQnIGZpZWxkIGNhbiBiZSBvbmUgb2ZcbiAqIGEgY2xhc3MsIGEgc3RyaW5nIChyZXByZXNlbnRpbmcgYSBcInR5cGVvZlwiIGNhbGwpLCBvciBhIHJlY29yZCBtYXAgb2YgbmFtZVxuICogdG8gdHlwZS4gRnVydGhlcm1vcmUsIHRoZSBvcHQoKSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBtYXJrIGEgZmllbGQgYXNcbiAqIG9wdGlvbmFsLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBmdW5jdGlvbiBmb28oYXV0aDogQXV0aCwgcHJvZmlsZToge2Rpc3BsYXlOYW1lPzogc3RyaW5nfSwgdXBkYXRlID0gZmFsc2UpIHtcbiAqICAgYXNzZXJ0VHlwZXMoYXJndW1lbnRzLCBbQXV0aEltcGwsIHtkaXNwbGF5TmFtZTogb3B0KCdzdHJpbmcnKX0sIG9wdCgnYm9vbGVhbicpXSk7XG4gKiB9XG4gKlxuICogb3B0KCkgY2FuIGJlIHVzZWQgZm9yIGFueSB0eXBlOlxuICogZnVuY3Rpb24gZm9vKGF1dGg/OiBBdXRoKSB7XG4gKiAgIGFzc2VydFR5cGVzKGFyZ3VtZW50cywgW29wdChBdXRoSW1wbCldKTtcbiAqIH1cbiAqXG4gKiBUaGUgc3RyaW5nIHR5cGVzIGNhbiBiZSBvcidkIHRvZ2V0aGVyLCBhbmQgeW91IGNhbiB1c2UgXCJudWxsXCIgYXMgd2VsbCAobm90ZVxuICogdGhhdCB0eXBlb2YgbnVsbCA9PT0gJ29iamVjdCc7IHRoaXMgaXMgYW4gZWRnZSBjYXNlKS4gRm9yIGV4YW1wbGU6XG4gKlxuICogZnVuY3Rpb24gZm9vKHByb2ZpbGU6IHtkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGx9KSB7XG4gKiAgIGFzc2VydFR5cGVzKGFyZ3VtZW50cywgW3tkaXNwbGF5TmFtZTogb3B0KCdzdHJpbmd8bnVsbCcpfV0pO1xuICogfVxuICpcbiAqIEBwYXJhbSBhcmdzXG4gKiBAcGFyYW0gZXhwZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFR5cGVzKFxuICBhcmdzOiBPbWl0PElBcmd1bWVudHMsICdjYWxsZWUnPixcbiAgLi4uZXhwZWN0ZWQ6IEFycmF5PFR5cGVFeHBlY3RhdGlvbiB8IE9wdGlvbmFsPlxuKTogdm9pZCB7XG4gIGlmIChhcmdzLmxlbmd0aCA+IGV4cGVjdGVkLmxlbmd0aCkge1xuICAgIF9mYWlsKEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IsIHt9KTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwZWN0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZXhwZWN0ID0gZXhwZWN0ZWRbaV07XG4gICAgY29uc3QgYXJnID0gYXJnc1tpXTtcblxuICAgIGlmIChleHBlY3QgaW5zdGFuY2VvZiBPcHRpb25hbCkge1xuICAgICAgLy8gSWYgdGhlIGFyZyBpcyB1bmRlZmluZWQsIHRoZW4gaXQgbWF0Y2hlcyBcIm9wdGlvbmFsXCIgYW5kIHdlIGNhbiBtb3ZlIHRvXG4gICAgICAvLyB0aGUgbmV4dCBhcmdcbiAgICAgIGlmICh0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGV4cGVjdCA9IGV4cGVjdC50eXBlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZXhwZWN0ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gSGFuZGxlIHRoZSBlZGdlIGNhc2UgZm9yIG51bGwgYmVjYXVzZSB0eXBlb2YgbnVsbCA9PT0gJ29iamVjdCdcbiAgICAgIGlmIChleHBlY3QuaW5jbHVkZXMoJ251bGwnKSAmJiBhcmcgPT09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlcXVpcmVkID0gZXhwZWN0LnNwbGl0KCd8Jyk7XG4gICAgICBfYXNzZXJ0KHJlcXVpcmVkLmluY2x1ZGVzKHR5cGVvZiBhcmcpLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SLCB7fSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwZWN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gUmVjdXJzaXZlbHkgY2hlY2sgcmVjb3JkIGFyZ3VtZW50c1xuICAgICAgY29uc3QgcmVjb3JkID0gYXJnIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgICAgY29uc3QgbWFwID0gZXhwZWN0IGFzIE1hcFR5cGU7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZXhwZWN0KTtcblxuICAgICAgYXNzZXJ0VHlwZXMoXG4gICAgICAgIGtleXMubWFwKGsgPT4gcmVjb3JkW2tdKSxcbiAgICAgICAgLi4ua2V5cy5tYXAoayA9PiBtYXBba10pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBfYXNzZXJ0KGFyZyBpbnN0YW5jZW9mIGV4cGVjdCwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUiwge30pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFVuY29uZGl0aW9uYWxseSBmYWlscywgdGhyb3dpbmcgYW4gaW50ZXJuYWwgZXJyb3Igd2l0aCB0aGUgZ2l2ZW4gbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0gZmFpbHVyZSB0eXBlIG9mIGZhaWx1cmUgZW5jb3VudGVyZWRcbiAqIEB0aHJvd3MgRXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnRmFpbChmYWlsdXJlOiBzdHJpbmcpOiBuZXZlciB7XG4gIC8vIExvZyB0aGUgZmFpbHVyZSBpbiBhZGRpdGlvbiB0byB0aHJvdyBhbiBleGNlcHRpb24sIGp1c3QgaW4gY2FzZSB0aGVcbiAgLy8gZXhjZXB0aW9uIGlzIHN3YWxsb3dlZC5cbiAgY29uc3QgbWVzc2FnZSA9IGBJTlRFUk5BTCBBU1NFUlRJT04gRkFJTEVEOiBgICsgZmFpbHVyZTtcbiAgX2xvZ0Vycm9yKG1lc3NhZ2UpO1xuXG4gIC8vIE5PVEU6IFdlIGRvbid0IHVzZSBGaXJlYmFzZUVycm9yIGhlcmUgYmVjYXVzZSB0aGVzZSBhcmUgaW50ZXJuYWwgZmFpbHVyZXNcbiAgLy8gdGhhdCBjYW5ub3QgYmUgaGFuZGxlZCBieSB0aGUgdXNlci4gKEFsc28gaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXJcbiAgLy8gZGVwZW5kZW5jeSBiZXR3ZWVuIHRoZSBlcnJvciBhbmQgYXNzZXJ0IG1vZHVsZXMgd2hpY2ggZG9lc24ndCB3b3JrLilcbiAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEZhaWxzIGlmIHRoZSBnaXZlbiBhc3NlcnRpb24gY29uZGl0aW9uIGlzIGZhbHNlLCB0aHJvd2luZyBhbiBFcnJvciB3aXRoIHRoZVxuICogZ2l2ZW4gbWVzc2FnZSBpZiBpdCBkaWQuXG4gKlxuICogQHBhcmFtIGFzc2VydGlvblxuICogQHBhcmFtIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnQXNzZXJ0KFxuICBhc3NlcnRpb246IHVua25vd24sXG4gIG1lc3NhZ2U6IHN0cmluZ1xuKTogYXNzZXJ0cyBhc3NlcnRpb24ge1xuICBpZiAoIWFzc2VydGlvbikge1xuICAgIGRlYnVnRmFpbChtZXNzYWdlKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRDdXJyZW50VXJsKCk6IHN0cmluZyB7XG4gIHJldHVybiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYubG9jYXRpb24/LmhyZWYpIHx8ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lzSHR0cE9ySHR0cHMoKTogYm9vbGVhbiB7XG4gIHJldHVybiBfZ2V0Q3VycmVudFNjaGVtZSgpID09PSAnaHR0cDonIHx8IF9nZXRDdXJyZW50U2NoZW1lKCkgPT09ICdodHRwczonO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldEN1cnJlbnRTY2hlbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gIHJldHVybiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYubG9jYXRpb24/LnByb3RvY29sKSB8fCBudWxsO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgaXNCcm93c2VyRXh0ZW5zaW9uIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgX2lzSHR0cE9ySHR0cHMgfSBmcm9tICcuL2xvY2F0aW9uJztcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgYnJvd3NlciBpcyB3b3JraW5nIG9ubGluZVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2lzT25saW5lKCk6IGJvb2xlYW4ge1xuICBpZiAoXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBuYXZpZ2F0b3IgJiZcbiAgICAnb25MaW5lJyBpbiBuYXZpZ2F0b3IgJiZcbiAgICB0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgLy8gQXBwbHkgb25seSBmb3IgdHJhZGl0aW9uYWwgd2ViIGFwcHMgYW5kIENocm9tZSBleHRlbnNpb25zLlxuICAgIC8vIFRoaXMgaXMgZXNwZWNpYWxseSB0cnVlIGZvciBDb3Jkb3ZhIGFwcHMgd2hpY2ggaGF2ZSB1bnJlbGlhYmxlXG4gICAgLy8gbmF2aWdhdG9yLm9uTGluZSBiZWhhdmlvciB1bmxlc3MgY29yZG92YS1wbHVnaW4tbmV0d29yay1pbmZvcm1hdGlvbiBpc1xuICAgIC8vIGluc3RhbGxlZCB3aGljaCBvdmVyd3JpdGVzIHRoZSBuYXRpdmUgbmF2aWdhdG9yLm9uTGluZSB2YWx1ZSBhbmRcbiAgICAvLyBkZWZpbmVzIG5hdmlnYXRvci5jb25uZWN0aW9uLlxuICAgIChfaXNIdHRwT3JIdHRwcygpIHx8IGlzQnJvd3NlckV4dGVuc2lvbigpIHx8ICdjb25uZWN0aW9uJyBpbiBuYXZpZ2F0b3IpXG4gICkge1xuICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICB9XG4gIC8vIElmIHdlIGNhbid0IGRldGVybWluZSB0aGUgc3RhdGUsIGFzc3VtZSBpdCBpcyBvbmxpbmUuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldFVzZXJMYW5ndWFnZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgbmF2aWdhdG9yTGFuZ3VhZ2U6IE5hdmlnYXRvckxhbmd1YWdlID0gbmF2aWdhdG9yO1xuICByZXR1cm4gKFxuICAgIC8vIE1vc3QgcmVsaWFibGUsIGJ1dCBvbmx5IHN1cHBvcnRlZCBpbiBDaHJvbWUvRmlyZWZveC5cbiAgICAobmF2aWdhdG9yTGFuZ3VhZ2UubGFuZ3VhZ2VzICYmIG5hdmlnYXRvckxhbmd1YWdlLmxhbmd1YWdlc1swXSkgfHxcbiAgICAvLyBTdXBwb3J0ZWQgaW4gbW9zdCBicm93c2VycywgYnV0IHJldHVybnMgdGhlIGxhbmd1YWdlIG9mIHRoZSBicm93c2VyXG4gICAgLy8gVUksIG5vdCB0aGUgbGFuZ3VhZ2Ugc2V0IGluIGJyb3dzZXIgc2V0dGluZ3MuXG4gICAgbmF2aWdhdG9yTGFuZ3VhZ2UubGFuZ3VhZ2UgfHxcbiAgICAvLyBDb3VsZG4ndCBkZXRlcm1pbmUgbGFuZ3VhZ2UuXG4gICAgbnVsbFxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgaXNNb2JpbGVDb3Jkb3ZhLCBpc1JlYWN0TmF0aXZlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgX2lzT25saW5lIH0gZnJvbSAnLi9uYXZpZ2F0b3InO1xuaW1wb3J0IHsgZGVidWdBc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIERlbGF5TWluIHtcbiAgT0ZGTElORSA9IDUwMDBcbn1cblxuLyoqXG4gKiBBIHN0cnVjdHVyZSB0byBoZWxwIHBpY2sgYmV0d2VlbiBhIHJhbmdlIG9mIGxvbmcgYW5kIHNob3J0IGRlbGF5IGR1cmF0aW9uc1xuICogZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiBJbiBnZW5lcmFsLCB0aGUgbG9uZyBkZWxheSBpcyB1c2VkIGZvclxuICogbW9iaWxlIGVudmlyb25tZW50cyB3aGVyZWFzIHNob3J0IGRlbGF5cyBhcmUgdXNlZCBmb3IgZGVza3RvcCBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWxheSB7XG4gIC8vIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgb2ZmbGluZSBkZWxheSB0aW1lb3V0IGluIG1zLlxuXG4gIHByaXZhdGUgcmVhZG9ubHkgaXNNb2JpbGU6IGJvb2xlYW47XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2hvcnREZWxheTogbnVtYmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9uZ0RlbGF5OiBudW1iZXJcbiAgKSB7XG4gICAgLy8gSW50ZXJuYWwgZXJyb3Igd2hlbiBpbXByb3Blcmx5IGluaXRpYWxpemVkLlxuICAgIGRlYnVnQXNzZXJ0KFxuICAgICAgbG9uZ0RlbGF5ID4gc2hvcnREZWxheSxcbiAgICAgICdTaG9ydCBkZWxheSBzaG91bGQgYmUgbGVzcyB0aGFuIGxvbmcgZGVsYXkhJ1xuICAgICk7XG4gICAgdGhpcy5pc01vYmlsZSA9IGlzTW9iaWxlQ29yZG92YSgpIHx8IGlzUmVhY3ROYXRpdmUoKTtcbiAgfVxuXG4gIGdldCgpOiBudW1iZXIge1xuICAgIGlmICghX2lzT25saW5lKCkpIHtcbiAgICAgIC8vIFBpY2sgdGhlIHNob3J0ZXIgdGltZW91dC5cbiAgICAgIHJldHVybiBNYXRoLm1pbihEZWxheU1pbi5PRkZMSU5FLCB0aGlzLnNob3J0RGVsYXkpO1xuICAgIH1cbiAgICAvLyBJZiBydW5uaW5nIGluIGEgbW9iaWxlIGVudmlyb25tZW50LCByZXR1cm4gdGhlIGxvbmcgZGVsYXksIG90aGVyd2lzZVxuICAgIC8vIHJldHVybiB0aGUgc2hvcnQgZGVsYXkuXG4gICAgLy8gVGhpcyBjb3VsZCBiZSBpbXByb3ZlZCBpbiB0aGUgZnV0dXJlIHRvIGR5bmFtaWNhbGx5IGNoYW5nZSBiYXNlZCBvbiBvdGhlclxuICAgIC8vIHZhcmlhYmxlcyBpbnN0ZWFkIG9mIGp1c3QgcmVhZGluZyB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAgICByZXR1cm4gdGhpcy5pc01vYmlsZSA/IHRoaXMubG9uZ0RlbGF5IDogdGhpcy5zaG9ydERlbGF5O1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb25maWdJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgZGVidWdBc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBfZW11bGF0b3JVcmwoY29uZmlnOiBDb25maWdJbnRlcm5hbCwgcGF0aD86IHN0cmluZyk6IHN0cmluZyB7XG4gIGRlYnVnQXNzZXJ0KGNvbmZpZy5lbXVsYXRvciwgJ0VtdWxhdG9yIHNob3VsZCBhbHdheXMgYmUgc2V0IGhlcmUnKTtcbiAgY29uc3QgeyB1cmwgfSA9IGNvbmZpZy5lbXVsYXRvcjtcblxuICBpZiAoIXBhdGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgcmV0dXJuIGAke3VybH0ke3BhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgxKSA6IHBhdGh9YDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGRlYnVnRmFpbCB9IGZyb20gJy4vYXNzZXJ0JztcblxuZXhwb3J0IGNsYXNzIEZldGNoUHJvdmlkZXIge1xuICBwcml2YXRlIHN0YXRpYyBmZXRjaEltcGw6IHR5cGVvZiBmZXRjaCB8IG51bGw7XG4gIHByaXZhdGUgc3RhdGljIGhlYWRlcnNJbXBsOiB0eXBlb2YgSGVhZGVycyB8IG51bGw7XG4gIHByaXZhdGUgc3RhdGljIHJlc3BvbnNlSW1wbDogdHlwZW9mIFJlc3BvbnNlIHwgbnVsbDtcblxuICBzdGF0aWMgaW5pdGlhbGl6ZShcbiAgICBmZXRjaEltcGw6IHR5cGVvZiBmZXRjaCxcbiAgICBoZWFkZXJzSW1wbD86IHR5cGVvZiBIZWFkZXJzLFxuICAgIHJlc3BvbnNlSW1wbD86IHR5cGVvZiBSZXNwb25zZVxuICApOiB2b2lkIHtcbiAgICB0aGlzLmZldGNoSW1wbCA9IGZldGNoSW1wbDtcbiAgICBpZiAoaGVhZGVyc0ltcGwpIHtcbiAgICAgIHRoaXMuaGVhZGVyc0ltcGwgPSBoZWFkZXJzSW1wbDtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlSW1wbCkge1xuICAgICAgdGhpcy5yZXNwb25zZUltcGwgPSByZXNwb25zZUltcGw7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZldGNoKCk6IHR5cGVvZiBmZXRjaCB7XG4gICAgaWYgKHRoaXMuZmV0Y2hJbXBsKSB7XG4gICAgICByZXR1cm4gdGhpcy5mZXRjaEltcGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2ZldGNoJyBpbiBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5mZXRjaDtcbiAgICB9XG4gICAgZGVidWdGYWlsKFxuICAgICAgJ0NvdWxkIG5vdCBmaW5kIGZldGNoIGltcGxlbWVudGF0aW9uLCBtYWtlIHN1cmUgeW91IGNhbGwgRmV0Y2hQcm92aWRlci5pbml0aWFsaXplKCkgd2l0aCBhbiBhcHByb3ByaWF0ZSBwb2x5ZmlsbCdcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGhlYWRlcnMoKTogdHlwZW9mIEhlYWRlcnMge1xuICAgIGlmICh0aGlzLmhlYWRlcnNJbXBsKSB7XG4gICAgICByZXR1cm4gdGhpcy5oZWFkZXJzSW1wbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAnSGVhZGVycycgaW4gc2VsZikge1xuICAgICAgcmV0dXJuIHNlbGYuSGVhZGVycztcbiAgICB9XG4gICAgZGVidWdGYWlsKFxuICAgICAgJ0NvdWxkIG5vdCBmaW5kIEhlYWRlcnMgaW1wbGVtZW50YXRpb24sIG1ha2Ugc3VyZSB5b3UgY2FsbCBGZXRjaFByb3ZpZGVyLmluaXRpYWxpemUoKSB3aXRoIGFuIGFwcHJvcHJpYXRlIHBvbHlmaWxsJ1xuICAgICk7XG4gIH1cblxuICBzdGF0aWMgcmVzcG9uc2UoKTogdHlwZW9mIFJlc3BvbnNlIHtcbiAgICBpZiAodGhpcy5yZXNwb25zZUltcGwpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlSW1wbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAnUmVzcG9uc2UnIGluIHNlbGYpIHtcbiAgICAgIHJldHVybiBzZWxmLlJlc3BvbnNlO1xuICAgIH1cbiAgICBkZWJ1Z0ZhaWwoXG4gICAgICAnQ291bGQgbm90IGZpbmQgUmVzcG9uc2UgaW1wbGVtZW50YXRpb24sIG1ha2Ugc3VyZSB5b3UgY2FsbCBGZXRjaFByb3ZpZGVyLmluaXRpYWxpemUoKSB3aXRoIGFuIGFwcHJvcHJpYXRlIHBvbHlmaWxsJ1xuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9jb3JlL2Vycm9ycyc7XG5cbi8qKlxuICogRXJyb3JzIHRoYXQgY2FuIGJlIHJldHVybmVkIGJ5IHRoZSBiYWNrZW5kXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIFNlcnZlckVycm9yIHtcbiAgQURNSU5fT05MWV9PUEVSQVRJT04gPSAnQURNSU5fT05MWV9PUEVSQVRJT04nLFxuICBCTE9DS0lOR19GVU5DVElPTl9FUlJPUl9SRVNQT05TRSA9ICdCTE9DS0lOR19GVU5DVElPTl9FUlJPUl9SRVNQT05TRScsXG4gIENBUFRDSEFfQ0hFQ0tfRkFJTEVEID0gJ0NBUFRDSEFfQ0hFQ0tfRkFJTEVEJyxcbiAgQ09SU19VTlNVUFBPUlRFRCA9ICdDT1JTX1VOU1VQUE9SVEVEJyxcbiAgQ1JFREVOVElBTF9NSVNNQVRDSCA9ICdDUkVERU5USUFMX01JU01BVENIJyxcbiAgQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOID0gJ0NSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTicsXG4gIERZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEID0gJ0RZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEJyxcbiAgRU1BSUxfQ0hBTkdFX05FRURTX1ZFUklGSUNBVElPTiA9ICdFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OJyxcbiAgRU1BSUxfRVhJU1RTID0gJ0VNQUlMX0VYSVNUUycsXG4gIEVNQUlMX05PVF9GT1VORCA9ICdFTUFJTF9OT1RfRk9VTkQnLFxuICBFWFBJUkVEX09PQl9DT0RFID0gJ0VYUElSRURfT09CX0NPREUnLFxuICBGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRCA9ICdGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRCcsXG4gIElOVkFMSURfQVBQX0NSRURFTlRJQUwgPSAnSU5WQUxJRF9BUFBfQ1JFREVOVElBTCcsXG4gIElOVkFMSURfQVBQX0lEID0gJ0lOVkFMSURfQVBQX0lEJyxcbiAgSU5WQUxJRF9DRVJUX0hBU0ggPSAnSU5WQUxJRF9DRVJUX0hBU0gnLFxuICBJTlZBTElEX0NPREUgPSAnSU5WQUxJRF9DT0RFJyxcbiAgSU5WQUxJRF9DT05USU5VRV9VUkkgPSAnSU5WQUxJRF9DT05USU5VRV9VUkknLFxuICBJTlZBTElEX0NVU1RPTV9UT0tFTiA9ICdJTlZBTElEX0NVU1RPTV9UT0tFTicsXG4gIElOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTiA9ICdJTlZBTElEX0RZTkFNSUNfTElOS19ET01BSU4nLFxuICBJTlZBTElEX0VNQUlMID0gJ0lOVkFMSURfRU1BSUwnLFxuICBJTlZBTElEX0lEX1RPS0VOID0gJ0lOVkFMSURfSURfVE9LRU4nLFxuICBJTlZBTElEX0lEUF9SRVNQT05TRSA9ICdJTlZBTElEX0lEUF9SRVNQT05TRScsXG4gIElOVkFMSURfSURFTlRJRklFUiA9ICdJTlZBTElEX0lERU5USUZJRVInLFxuICBJTlZBTElEX01FU1NBR0VfUEFZTE9BRCA9ICdJTlZBTElEX01FU1NBR0VfUEFZTE9BRCcsXG4gIElOVkFMSURfTUZBX1BFTkRJTkdfQ1JFREVOVElBTCA9ICdJTlZBTElEX01GQV9QRU5ESU5HX0NSRURFTlRJQUwnLFxuICBJTlZBTElEX09BVVRIX0NMSUVOVF9JRCA9ICdJTlZBTElEX09BVVRIX0NMSUVOVF9JRCcsXG4gIElOVkFMSURfT09CX0NPREUgPSAnSU5WQUxJRF9PT0JfQ09ERScsXG4gIElOVkFMSURfUEFTU1dPUkQgPSAnSU5WQUxJRF9QQVNTV09SRCcsXG4gIElOVkFMSURfUEVORElOR19UT0tFTiA9ICdJTlZBTElEX1BFTkRJTkdfVE9LRU4nLFxuICBJTlZBTElEX1BIT05FX05VTUJFUiA9ICdJTlZBTElEX1BIT05FX05VTUJFUicsXG4gIElOVkFMSURfUFJPVklERVJfSUQgPSAnSU5WQUxJRF9QUk9WSURFUl9JRCcsXG4gIElOVkFMSURfUkVDSVBJRU5UX0VNQUlMID0gJ0lOVkFMSURfUkVDSVBJRU5UX0VNQUlMJyxcbiAgSU5WQUxJRF9TRU5ERVIgPSAnSU5WQUxJRF9TRU5ERVInLFxuICBJTlZBTElEX1NFU1NJT05fSU5GTyA9ICdJTlZBTElEX1NFU1NJT05fSU5GTycsXG4gIElOVkFMSURfVEVNUE9SQVJZX1BST09GID0gJ0lOVkFMSURfVEVNUE9SQVJZX1BST09GJyxcbiAgSU5WQUxJRF9URU5BTlRfSUQgPSAnSU5WQUxJRF9URU5BTlRfSUQnLFxuICBNRkFfRU5ST0xMTUVOVF9OT1RfRk9VTkQgPSAnTUZBX0VOUk9MTE1FTlRfTk9UX0ZPVU5EJyxcbiAgTUlTU0lOR19BTkRST0lEX1BBQ0tBR0VfTkFNRSA9ICdNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FJyxcbiAgTUlTU0lOR19BUFBfQ1JFREVOVElBTCA9ICdNSVNTSU5HX0FQUF9DUkVERU5USUFMJyxcbiAgTUlTU0lOR19DT0RFID0gJ01JU1NJTkdfQ09ERScsXG4gIE1JU1NJTkdfQ09OVElOVUVfVVJJID0gJ01JU1NJTkdfQ09OVElOVUVfVVJJJyxcbiAgTUlTU0lOR19DVVNUT01fVE9LRU4gPSAnTUlTU0lOR19DVVNUT01fVE9LRU4nLFxuICBNSVNTSU5HX0lPU19CVU5ETEVfSUQgPSAnTUlTU0lOR19JT1NfQlVORExFX0lEJyxcbiAgTUlTU0lOR19NRkFfRU5ST0xMTUVOVF9JRCA9ICdNSVNTSU5HX01GQV9FTlJPTExNRU5UX0lEJyxcbiAgTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMID0gJ01JU1NJTkdfTUZBX1BFTkRJTkdfQ1JFREVOVElBTCcsXG4gIE1JU1NJTkdfT09CX0NPREUgPSAnTUlTU0lOR19PT0JfQ09ERScsXG4gIE1JU1NJTkdfT1JfSU5WQUxJRF9OT05DRSA9ICdNSVNTSU5HX09SX0lOVkFMSURfTk9OQ0UnLFxuICBNSVNTSU5HX1BBU1NXT1JEID0gJ01JU1NJTkdfUEFTU1dPUkQnLFxuICBNSVNTSU5HX1JFUV9UWVBFID0gJ01JU1NJTkdfUkVRX1RZUEUnLFxuICBNSVNTSU5HX1BIT05FX05VTUJFUiA9ICdNSVNTSU5HX1BIT05FX05VTUJFUicsXG4gIE1JU1NJTkdfU0VTU0lPTl9JTkZPID0gJ01JU1NJTkdfU0VTU0lPTl9JTkZPJyxcbiAgT1BFUkFUSU9OX05PVF9BTExPV0VEID0gJ09QRVJBVElPTl9OT1RfQUxMT1dFRCcsXG4gIFBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEID0gJ1BBU1NXT1JEX0xPR0lOX0RJU0FCTEVEJyxcbiAgUVVPVEFfRVhDRUVERUQgPSAnUVVPVEFfRVhDRUVERUQnLFxuICBSRVNFVF9QQVNTV09SRF9FWENFRURfTElNSVQgPSAnUkVTRVRfUEFTU1dPUkRfRVhDRUVEX0xJTUlUJyxcbiAgUkVKRUNURURfQ1JFREVOVElBTCA9ICdSRUpFQ1RFRF9DUkVERU5USUFMJyxcbiAgU0VDT05EX0ZBQ1RPUl9FWElTVFMgPSAnU0VDT05EX0ZBQ1RPUl9FWElTVFMnLFxuICBTRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEID0gJ1NFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQnLFxuICBTRVNTSU9OX0VYUElSRUQgPSAnU0VTU0lPTl9FWFBJUkVEJyxcbiAgVEVOQU5UX0lEX01JU01BVENIID0gJ1RFTkFOVF9JRF9NSVNNQVRDSCcsXG4gIFRPS0VOX0VYUElSRUQgPSAnVE9LRU5fRVhQSVJFRCcsXG4gIFRPT19NQU5ZX0FUVEVNUFRTX1RSWV9MQVRFUiA9ICdUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVInLFxuICBVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1IgPSAnVU5TVVBQT1JURURfRklSU1RfRkFDVE9SJyxcbiAgVU5TVVBQT1JURURfVEVOQU5UX09QRVJBVElPTiA9ICdVTlNVUFBPUlRFRF9URU5BTlRfT1BFUkFUSU9OJyxcbiAgVU5BVVRIT1JJWkVEX0RPTUFJTiA9ICdVTkFVVEhPUklaRURfRE9NQUlOJyxcbiAgVU5WRVJJRklFRF9FTUFJTCA9ICdVTlZFUklGSUVEX0VNQUlMJyxcbiAgVVNFUl9DQU5DRUxMRUQgPSAnVVNFUl9DQU5DRUxMRUQnLFxuICBVU0VSX0RJU0FCTEVEID0gJ1VTRVJfRElTQUJMRUQnLFxuICBVU0VSX05PVF9GT1VORCA9ICdVU0VSX05PVF9GT1VORCcsXG4gIFdFQUtfUEFTU1dPUkQgPSAnV0VBS19QQVNTV09SRCcsXG4gIFJFQ0FQVENIQV9OT1RfRU5BQkxFRCA9ICdSRUNBUFRDSEFfTk9UX0VOQUJMRUQnLFxuICBNSVNTSU5HX1JFQ0FQVENIQV9UT0tFTiA9ICdNSVNTSU5HX1JFQ0FQVENIQV9UT0tFTicsXG4gIElOVkFMSURfUkVDQVBUQ0hBX1RPS0VOID0gJ0lOVkFMSURfUkVDQVBUQ0hBX1RPS0VOJyxcbiAgSU5WQUxJRF9SRUNBUFRDSEFfQUNUSU9OID0gJ0lOVkFMSURfUkVDQVBUQ0hBX0FDVElPTicsXG4gIE1JU1NJTkdfQ0xJRU5UX1RZUEUgPSAnTUlTU0lOR19DTElFTlRfVFlQRScsXG4gIE1JU1NJTkdfUkVDQVBUQ0hBX1ZFUlNJT04gPSAnTUlTU0lOR19SRUNBUFRDSEFfVkVSU0lPTicsXG4gIElOVkFMSURfUkVDQVBUQ0hBX1ZFUlNJT04gPSAnSU5WQUxJRF9SRUNBUFRDSEFfVkVSU0lPTicsXG4gIElOVkFMSURfUkVRX1RZUEUgPSAnSU5WQUxJRF9SRVFfVFlQRSdcbn1cblxuLyoqXG4gKiBBUEkgUmVzcG9uc2UgaW4gdGhlIGV2ZW50IG9mIGFuIGVycm9yXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSnNvbkVycm9yIHtcbiAgZXJyb3I6IHtcbiAgICBjb2RlOiBudW1iZXI7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGVycm9ycz86IFtcbiAgICAgIHtcbiAgICAgICAgbWVzc2FnZTogU2VydmVyRXJyb3I7XG4gICAgICAgIGRvbWFpbjogc3RyaW5nO1xuICAgICAgICByZWFzb246IHN0cmluZztcbiAgICAgIH1cbiAgICBdO1xuICB9O1xufVxuXG4vKipcbiAqIFR5cGUgZGVmaW5pdGlvbiBmb3IgYSBtYXAgZnJvbSBzZXJ2ZXIgZXJyb3JzIHRvIGRldmVsb3BlciB2aXNpYmxlIGVycm9yc1xuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIFNlcnZlckVycm9yTWFwPEFwaUVycm9yIGV4dGVuZHMgc3RyaW5nPiA9IHtcbiAgcmVhZG9ubHkgW0sgaW4gQXBpRXJyb3JdOiBBdXRoRXJyb3JDb2RlO1xufTtcblxuLyoqXG4gKiBNYXAgZnJvbSBlcnJvcnMgcmV0dXJuZWQgYnkgdGhlIHNlcnZlciB0byBlcnJvcnMgdG8gZGV2ZWxvcGVyIHZpc2libGUgZXJyb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBTRVJWRVJfRVJST1JfTUFQOiBQYXJ0aWFsPFNlcnZlckVycm9yTWFwPFNlcnZlckVycm9yPj4gPSB7XG4gIC8vIEN1c3RvbSB0b2tlbiBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5DUkVERU5USUFMX01JU01BVENIXTogQXV0aEVycm9yQ29kZS5DUkVERU5USUFMX01JU01BVENILFxuICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX0NVU1RPTV9UT0tFTl06IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsXG5cbiAgLy8gQ3JlYXRlIEF1dGggVVJJIGVycm9ycy5cbiAgW1NlcnZlckVycm9yLklOVkFMSURfSURFTlRJRklFUl06IEF1dGhFcnJvckNvZGUuSU5WQUxJRF9FTUFJTCxcbiAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW4gaWYgdGhlIFNESyBzZW5kcyBhIGJhZCByZXF1ZXN0LlxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19DT05USU5VRV9VUkldOiBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SLFxuXG4gIC8vIFNpZ24gaW4gd2l0aCBlbWFpbCBhbmQgcGFzc3dvcmQgZXJyb3JzIChzb21lIGFwcGx5IHRvIHNpZ24gdXAgdG9vKS5cbiAgW1NlcnZlckVycm9yLklOVkFMSURfUEFTU1dPUkRdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfUEFTU1dPUkQsXG4gIC8vIFRoaXMgY2FuIG9ubHkgaGFwcGVuIGlmIHRoZSBTREsgc2VuZHMgYSBiYWQgcmVxdWVzdC5cbiAgW1NlcnZlckVycm9yLk1JU1NJTkdfUEFTU1dPUkRdOiBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUEFTU1dPUkQsXG5cbiAgLy8gU2lnbiB1cCB3aXRoIGVtYWlsIGFuZCBwYXNzd29yZCBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5FTUFJTF9FWElTVFNdOiBBdXRoRXJyb3JDb2RlLkVNQUlMX0VYSVNUUyxcbiAgW1NlcnZlckVycm9yLlBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEXTogQXV0aEVycm9yQ29kZS5PUEVSQVRJT05fTk9UX0FMTE9XRUQsXG5cbiAgLy8gVmVyaWZ5IGFzc2VydGlvbiBmb3Igc2lnbiBpbiB3aXRoIGNyZWRlbnRpYWwgZXJyb3JzOlxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9JRFBfUkVTUE9OU0VdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfSURQX1JFU1BPTlNFLFxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9QRU5ESU5HX1RPS0VOXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX0lEUF9SRVNQT05TRSxcbiAgW1NlcnZlckVycm9yLkZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEXTpcbiAgICBBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0UsXG5cbiAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW4gaWYgdGhlIFNESyBzZW5kcyBhIGJhZCByZXF1ZXN0LlxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19SRVFfVFlQRV06IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsXG5cbiAgLy8gU2VuZCBQYXNzd29yZCByZXNldCBlbWFpbCBlcnJvcnM6XG4gIFtTZXJ2ZXJFcnJvci5FTUFJTF9OT1RfRk9VTkRdOiBBdXRoRXJyb3JDb2RlLlVTRVJfREVMRVRFRCxcbiAgW1NlcnZlckVycm9yLlJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVF06XG4gICAgQXV0aEVycm9yQ29kZS5UT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVIsXG5cbiAgW1NlcnZlckVycm9yLkVYUElSRURfT09CX0NPREVdOiBBdXRoRXJyb3JDb2RlLkVYUElSRURfT09CX0NPREUsXG4gIFtTZXJ2ZXJFcnJvci5JTlZBTElEX09PQl9DT0RFXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX09PQl9DT0RFLFxuICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX09PQl9DT0RFXTogQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcblxuICAvLyBPcGVyYXRpb25zIHRoYXQgcmVxdWlyZSBJRCB0b2tlbiBpbiByZXF1ZXN0OlxuICBbU2VydmVyRXJyb3IuQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOXTpcbiAgICBBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTixcbiAgW1NlcnZlckVycm9yLklOVkFMSURfSURfVE9LRU5dOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfQVVUSCxcbiAgW1NlcnZlckVycm9yLlRPS0VOX0VYUElSRURdOiBBdXRoRXJyb3JDb2RlLlRPS0VOX0VYUElSRUQsXG4gIFtTZXJ2ZXJFcnJvci5VU0VSX05PVF9GT1VORF06IEF1dGhFcnJvckNvZGUuVE9LRU5fRVhQSVJFRCxcblxuICAvLyBPdGhlciBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5UT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVJdOlxuICAgIEF1dGhFcnJvckNvZGUuVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSLFxuXG4gIC8vIFBob25lIEF1dGggcmVsYXRlZCBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5JTlZBTElEX0NPREVdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfQ09ERSxcbiAgW1NlcnZlckVycm9yLklOVkFMSURfU0VTU0lPTl9JTkZPXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX1NFU1NJT05fSU5GTyxcbiAgW1NlcnZlckVycm9yLklOVkFMSURfVEVNUE9SQVJZX1BST09GXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX0lEUF9SRVNQT05TRSxcbiAgW1NlcnZlckVycm9yLk1JU1NJTkdfU0VTU0lPTl9JTkZPXTogQXV0aEVycm9yQ29kZS5NSVNTSU5HX1NFU1NJT05fSU5GTyxcbiAgW1NlcnZlckVycm9yLlNFU1NJT05fRVhQSVJFRF06IEF1dGhFcnJvckNvZGUuQ09ERV9FWFBJUkVELFxuXG4gIC8vIE90aGVyIGFjdGlvbiBjb2RlIGVycm9ycyB3aGVuIGFkZGl0aW9uYWwgc2V0dGluZ3MgcGFzc2VkLlxuICAvLyBNSVNTSU5HX0NPTlRJTlVFX1VSSSBpcyBnZXR0aW5nIG1hcHBlZCB0byBJTlRFUk5BTF9FUlJPUiBhYm92ZS5cbiAgLy8gVGhpcyBpcyBPSyBhcyB0aGlzIGVycm9yIHdpbGwgYmUgY2F1Z2h0IGJ5IGNsaWVudCBzaWRlIHZhbGlkYXRpb24uXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FXTpcbiAgICBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUUsXG4gIFtTZXJ2ZXJFcnJvci5VTkFVVEhPUklaRURfRE9NQUlOXTogQXV0aEVycm9yQ29kZS5VTkFVVEhPUklaRURfRE9NQUlOLFxuXG4gIC8vIGdldFByb2plY3RDb25maWcgZXJyb3JzIHdoZW4gY2xpZW50SWQgaXMgcGFzc2VkLlxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9PQVVUSF9DTElFTlRfSURdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfT0FVVEhfQ0xJRU5UX0lELFxuXG4gIC8vIFVzZXIgYWN0aW9ucyAoc2lnbi11cCBvciBkZWxldGlvbikgZGlzYWJsZWQgZXJyb3JzLlxuICBbU2VydmVyRXJyb3IuQURNSU5fT05MWV9PUEVSQVRJT05dOiBBdXRoRXJyb3JDb2RlLkFETUlOX09OTFlfT1BFUkFUSU9OLFxuXG4gIC8vIE11bHRpIGZhY3RvciByZWxhdGVkIGVycm9ycy5cbiAgW1NlcnZlckVycm9yLklOVkFMSURfTUZBX1BFTkRJTkdfQ1JFREVOVElBTF06XG4gICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX01GQV9TRVNTSU9OLFxuICBbU2VydmVyRXJyb3IuTUZBX0VOUk9MTE1FTlRfTk9UX0ZPVU5EXTogQXV0aEVycm9yQ29kZS5NRkFfSU5GT19OT1RfRk9VTkQsXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX01GQV9FTlJPTExNRU5UX0lEXTogQXV0aEVycm9yQ29kZS5NSVNTSU5HX01GQV9JTkZPLFxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMXTpcbiAgICBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfTUZBX1NFU1NJT04sXG4gIFtTZXJ2ZXJFcnJvci5TRUNPTkRfRkFDVE9SX0VYSVNUU106XG4gICAgQXV0aEVycm9yQ29kZS5TRUNPTkRfRkFDVE9SX0FMUkVBRFlfRU5ST0xMRUQsXG4gIFtTZXJ2ZXJFcnJvci5TRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEXTpcbiAgICBBdXRoRXJyb3JDb2RlLlNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQsXG5cbiAgLy8gQmxvY2tpbmcgZnVuY3Rpb25zIHJlbGF0ZWQgZXJyb3JzLlxuICBbU2VydmVyRXJyb3IuQkxPQ0tJTkdfRlVOQ1RJT05fRVJST1JfUkVTUE9OU0VdOiBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SLFxuXG4gIC8vIFJlY2FwdGNoYSByZWxhdGVkIGVycm9ycy5cbiAgW1NlcnZlckVycm9yLlJFQ0FQVENIQV9OT1RfRU5BQkxFRF06IEF1dGhFcnJvckNvZGUuUkVDQVBUQ0hBX05PVF9FTkFCTEVELFxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19SRUNBUFRDSEFfVE9LRU5dOiBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUkVDQVBUQ0hBX1RPS0VOLFxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9SRUNBUFRDSEFfVE9LRU5dOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfUkVDQVBUQ0hBX1RPS0VOLFxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9SRUNBUFRDSEFfQUNUSU9OXTpcbiAgICBBdXRoRXJyb3JDb2RlLklOVkFMSURfUkVDQVBUQ0hBX0FDVElPTixcbiAgW1NlcnZlckVycm9yLk1JU1NJTkdfQ0xJRU5UX1RZUEVdOiBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfQ0xJRU5UX1RZUEUsXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX1JFQ0FQVENIQV9WRVJTSU9OXTpcbiAgICBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUkVDQVBUQ0hBX1ZFUlNJT04sXG4gIFtTZXJ2ZXJFcnJvci5JTlZBTElEX1JFQ0FQVENIQV9WRVJTSU9OXTpcbiAgICBBdXRoRXJyb3JDb2RlLklOVkFMSURfUkVDQVBUQ0hBX1ZFUlNJT04sXG4gIFtTZXJ2ZXJFcnJvci5JTlZBTElEX1JFUV9UWVBFXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX1JFUV9UWVBFXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciwgcXVlcnlzdHJpbmcgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7IEF1dGhFcnJvckNvZGUsIE5hbWVkRXJyb3JQYXJhbXMgfSBmcm9tICcuLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQge1xuICBfY3JlYXRlRXJyb3IsXG4gIF9lcnJvcldpdGhDdXN0b21NZXNzYWdlLFxuICBfZmFpbFxufSBmcm9tICcuLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IERlbGF5IH0gZnJvbSAnLi4vY29yZS91dGlsL2RlbGF5JztcbmltcG9ydCB7IF9lbXVsYXRvclVybCB9IGZyb20gJy4uL2NvcmUvdXRpbC9lbXVsYXRvcic7XG5pbXBvcnQgeyBGZXRjaFByb3ZpZGVyIH0gZnJvbSAnLi4vY29yZS91dGlsL2ZldGNoX3Byb3ZpZGVyJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsLCBDb25maWdJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlLCBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IElkVG9rZW5NZmFSZXNwb25zZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IFNFUlZFUl9FUlJPUl9NQVAsIFNlcnZlckVycm9yLCBTZXJ2ZXJFcnJvck1hcCB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNvbnN0IGVudW0gSHR0cE1ldGhvZCB7XG4gIFBPU1QgPSAnUE9TVCcsXG4gIEdFVCA9ICdHRVQnXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEh0dHBIZWFkZXIge1xuICBDT05URU5UX1RZUEUgPSAnQ29udGVudC1UeXBlJyxcbiAgWF9GSVJFQkFTRV9MT0NBTEUgPSAnWC1GaXJlYmFzZS1Mb2NhbGUnLFxuICBYX0NMSUVOVF9WRVJTSU9OID0gJ1gtQ2xpZW50LVZlcnNpb24nLFxuICBYX0ZJUkVCQVNFX0dNUElEID0gJ1gtRmlyZWJhc2UtZ21waWQnLFxuICBYX0ZJUkVCQVNFX0NMSUVOVCA9ICdYLUZpcmViYXNlLUNsaWVudCcsXG4gIFhfRklSRUJBU0VfQVBQX0NIRUNLID0gJ1gtRmlyZWJhc2UtQXBwQ2hlY2snXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEVuZHBvaW50IHtcbiAgQ1JFQVRFX0FVVEhfVVJJID0gJy92MS9hY2NvdW50czpjcmVhdGVBdXRoVXJpJyxcbiAgREVMRVRFX0FDQ09VTlQgPSAnL3YxL2FjY291bnRzOmRlbGV0ZScsXG4gIFJFU0VUX1BBU1NXT1JEID0gJy92MS9hY2NvdW50czpyZXNldFBhc3N3b3JkJyxcbiAgU0lHTl9VUCA9ICcvdjEvYWNjb3VudHM6c2lnblVwJyxcbiAgU0lHTl9JTl9XSVRIX0NVU1RPTV9UT0tFTiA9ICcvdjEvYWNjb3VudHM6c2lnbkluV2l0aEN1c3RvbVRva2VuJyxcbiAgU0lHTl9JTl9XSVRIX0VNQUlMX0xJTksgPSAnL3YxL2FjY291bnRzOnNpZ25JbldpdGhFbWFpbExpbmsnLFxuICBTSUdOX0lOX1dJVEhfSURQID0gJy92MS9hY2NvdW50czpzaWduSW5XaXRoSWRwJyxcbiAgU0lHTl9JTl9XSVRIX1BBU1NXT1JEID0gJy92MS9hY2NvdW50czpzaWduSW5XaXRoUGFzc3dvcmQnLFxuICBTSUdOX0lOX1dJVEhfUEhPTkVfTlVNQkVSID0gJy92MS9hY2NvdW50czpzaWduSW5XaXRoUGhvbmVOdW1iZXInLFxuICBTRU5EX1ZFUklGSUNBVElPTl9DT0RFID0gJy92MS9hY2NvdW50czpzZW5kVmVyaWZpY2F0aW9uQ29kZScsXG4gIFNFTkRfT09CX0NPREUgPSAnL3YxL2FjY291bnRzOnNlbmRPb2JDb2RlJyxcbiAgU0VUX0FDQ09VTlRfSU5GTyA9ICcvdjEvYWNjb3VudHM6dXBkYXRlJyxcbiAgR0VUX0FDQ09VTlRfSU5GTyA9ICcvdjEvYWNjb3VudHM6bG9va3VwJyxcbiAgR0VUX1JFQ0FQVENIQV9QQVJBTSA9ICcvdjEvcmVjYXB0Y2hhUGFyYW1zJyxcbiAgU1RBUlRfTUZBX0VOUk9MTE1FTlQgPSAnL3YyL2FjY291bnRzL21mYUVucm9sbG1lbnQ6c3RhcnQnLFxuICBGSU5BTElaRV9NRkFfRU5ST0xMTUVOVCA9ICcvdjIvYWNjb3VudHMvbWZhRW5yb2xsbWVudDpmaW5hbGl6ZScsXG4gIFNUQVJUX01GQV9TSUdOX0lOID0gJy92Mi9hY2NvdW50cy9tZmFTaWduSW46c3RhcnQnLFxuICBGSU5BTElaRV9NRkFfU0lHTl9JTiA9ICcvdjIvYWNjb3VudHMvbWZhU2lnbkluOmZpbmFsaXplJyxcbiAgV0lUSERSQVdfTUZBID0gJy92Mi9hY2NvdW50cy9tZmFFbnJvbGxtZW50OndpdGhkcmF3JyxcbiAgR0VUX1BST0pFQ1RfQ09ORklHID0gJy92MS9wcm9qZWN0cycsXG4gIEdFVF9SRUNBUFRDSEFfQ09ORklHID0gJy92Mi9yZWNhcHRjaGFDb25maWcnXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIFJlY2FwdGNoYUNsaWVudFR5cGUge1xuICBXRUIgPSAnQ0xJRU5UX1RZUEVfV0VCJyxcbiAgQU5EUk9JRCA9ICdDTElFTlRfVFlQRV9BTkRST0lEJyxcbiAgSU9TID0gJ0NMSUVOVF9UWVBFX0lPUydcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gUmVjYXB0Y2hhVmVyc2lvbiB7XG4gIEVOVEVSUFJJU0UgPSAnUkVDQVBUQ0hBX0VOVEVSUFJJU0UnXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIFJlY2FwdGNoYUFjdGlvbk5hbWUge1xuICBTSUdOX0lOX1dJVEhfUEFTU1dPUkQgPSAnc2lnbkluV2l0aFBhc3N3b3JkJyxcbiAgR0VUX09PQl9DT0RFID0gJ2dldE9vYkNvZGUnLFxuICBTSUdOX1VQX1BBU1NXT1JEID0gJ3NpZ25VcFBhc3N3b3JkJ1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9BUElfVElNRU9VVF9NUyA9IG5ldyBEZWxheSgzMF8wMDAsIDYwXzAwMCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfYWRkVGlkSWZOZWNlc3Nhcnk8VCBleHRlbmRzIHsgdGVuYW50SWQ/OiBzdHJpbmcgfT4oXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFRcbik6IFQge1xuICBpZiAoYXV0aC50ZW5hbnRJZCAmJiAhcmVxdWVzdC50ZW5hbnRJZCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXF1ZXN0LFxuICAgICAgdGVuYW50SWQ6IGF1dGgudGVuYW50SWRcbiAgICB9O1xuICB9XG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3BlcmZvcm1BcGlSZXF1ZXN0PFQsIFY+KFxuICBhdXRoOiBBdXRoLFxuICBtZXRob2Q6IEh0dHBNZXRob2QsXG4gIHBhdGg6IEVuZHBvaW50LFxuICByZXF1ZXN0PzogVCxcbiAgY3VzdG9tRXJyb3JNYXA6IFBhcnRpYWw8U2VydmVyRXJyb3JNYXA8U2VydmVyRXJyb3I+PiA9IHt9XG4pOiBQcm9taXNlPFY+IHtcbiAgcmV0dXJuIF9wZXJmb3JtRmV0Y2hXaXRoRXJyb3JIYW5kbGluZyhhdXRoLCBjdXN0b21FcnJvck1hcCwgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBib2R5ID0ge307XG4gICAgbGV0IHBhcmFtcyA9IHt9O1xuICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICBpZiAobWV0aG9kID09PSBIdHRwTWV0aG9kLkdFVCkge1xuICAgICAgICBwYXJhbXMgPSByZXF1ZXN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9keSA9IHtcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5ID0gcXVlcnlzdHJpbmcoe1xuICAgICAga2V5OiBhdXRoLmNvbmZpZy5hcGlLZXksXG4gICAgICAuLi5wYXJhbXNcbiAgICB9KS5zbGljZSgxKTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSBhd2FpdCAoYXV0aCBhcyBBdXRoSW50ZXJuYWwpLl9nZXRBZGRpdGlvbmFsSGVhZGVycygpO1xuICAgIGhlYWRlcnNbSHR0cEhlYWRlci5DT05URU5UX1RZUEVdID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgaWYgKGF1dGgubGFuZ3VhZ2VDb2RlKSB7XG4gICAgICBoZWFkZXJzW0h0dHBIZWFkZXIuWF9GSVJFQkFTRV9MT0NBTEVdID0gYXV0aC5sYW5ndWFnZUNvZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIEZldGNoUHJvdmlkZXIuZmV0Y2goKShcbiAgICAgIF9nZXRGaW5hbFRhcmdldChhdXRoLCBhdXRoLmNvbmZpZy5hcGlIb3N0LCBwYXRoLCBxdWVyeSksXG4gICAgICB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgcmVmZXJyZXJQb2xpY3k6ICduby1yZWZlcnJlcicsXG4gICAgICAgIC4uLmJvZHlcbiAgICAgIH1cbiAgICApO1xuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9wZXJmb3JtRmV0Y2hXaXRoRXJyb3JIYW5kbGluZzxWPihcbiAgYXV0aDogQXV0aCxcbiAgY3VzdG9tRXJyb3JNYXA6IFBhcnRpYWw8U2VydmVyRXJyb3JNYXA8U2VydmVyRXJyb3I+PixcbiAgZmV0Y2hGbjogKCkgPT4gUHJvbWlzZTxSZXNwb25zZT5cbik6IFByb21pc2U8Vj4ge1xuICAoYXV0aCBhcyBBdXRoSW50ZXJuYWwpLl9jYW5Jbml0RW11bGF0b3IgPSBmYWxzZTtcbiAgY29uc3QgZXJyb3JNYXAgPSB7IC4uLlNFUlZFUl9FUlJPUl9NQVAsIC4uLmN1c3RvbUVycm9yTWFwIH07XG4gIHRyeSB7XG4gICAgY29uc3QgbmV0d29ya1RpbWVvdXQgPSBuZXcgTmV0d29ya1RpbWVvdXQ8UmVzcG9uc2U+KGF1dGgpO1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZSA9IGF3YWl0IFByb21pc2UucmFjZTxQcm9taXNlPFJlc3BvbnNlPj4oW1xuICAgICAgZmV0Y2hGbigpLFxuICAgICAgbmV0d29ya1RpbWVvdXQucHJvbWlzZVxuICAgIF0pO1xuXG4gICAgLy8gSWYgd2UndmUgcmVhY2hlZCB0aGlzIHBvaW50LCB0aGUgZmV0Y2ggc3VjY2VlZGVkIGFuZCB0aGUgbmV0d29ya1RpbWVvdXRcbiAgICAvLyBkaWRuJ3QgdGhyb3c7IGNsZWFyIHRoZSBuZXR3b3JrIHRpbWVvdXQgZGVsYXkgc28gdGhhdCBOb2RlIHdvbid0IGhhbmdcbiAgICBuZXR3b3JrVGltZW91dC5jbGVhck5ldHdvcmtUaW1lb3V0KCk7XG5cbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGlmICgnbmVlZENvbmZpcm1hdGlvbicgaW4ganNvbikge1xuICAgICAgdGhyb3cgX21ha2VUYWdnZWRFcnJvcihhdXRoLCBBdXRoRXJyb3JDb2RlLk5FRURfQ09ORklSTUFUSU9OLCBqc29uKTtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2Uub2sgJiYgISgnZXJyb3JNZXNzYWdlJyBpbiBqc29uKSkge1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHJlc3BvbnNlLm9rID8ganNvbi5lcnJvck1lc3NhZ2UgOiBqc29uLmVycm9yLm1lc3NhZ2U7XG4gICAgICBjb25zdCBbc2VydmVyRXJyb3JDb2RlLCBzZXJ2ZXJFcnJvck1lc3NhZ2VdID0gZXJyb3JNZXNzYWdlLnNwbGl0KCcgOiAnKTtcbiAgICAgIGlmIChzZXJ2ZXJFcnJvckNvZGUgPT09IFNlcnZlckVycm9yLkZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEKSB7XG4gICAgICAgIHRocm93IF9tYWtlVGFnZ2VkRXJyb3IoXG4gICAgICAgICAgYXV0aCxcbiAgICAgICAgICBBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0UsXG4gICAgICAgICAganNvblxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChzZXJ2ZXJFcnJvckNvZGUgPT09IFNlcnZlckVycm9yLkVNQUlMX0VYSVNUUykge1xuICAgICAgICB0aHJvdyBfbWFrZVRhZ2dlZEVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuRU1BSUxfRVhJU1RTLCBqc29uKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VydmVyRXJyb3JDb2RlID09PSBTZXJ2ZXJFcnJvci5VU0VSX0RJU0FCTEVEKSB7XG4gICAgICAgIHRocm93IF9tYWtlVGFnZ2VkRXJyb3IoYXV0aCwgQXV0aEVycm9yQ29kZS5VU0VSX0RJU0FCTEVELCBqc29uKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGF1dGhFcnJvciA9XG4gICAgICAgIGVycm9yTWFwW3NlcnZlckVycm9yQ29kZSBhcyBTZXJ2ZXJFcnJvcl0gfHxcbiAgICAgICAgKHNlcnZlckVycm9yQ29kZVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgLnJlcGxhY2UoL1tfXFxzXSsvZywgJy0nKSBhcyB1bmtub3duIGFzIEF1dGhFcnJvckNvZGUpO1xuICAgICAgaWYgKHNlcnZlckVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aHJvdyBfZXJyb3JXaXRoQ3VzdG9tTWVzc2FnZShhdXRoLCBhdXRoRXJyb3IsIHNlcnZlckVycm9yTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZmFpbChhdXRoLCBhdXRoRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgLy8gQ2hhbmdpbmcgdGhpcyB0byBhIGRpZmZlcmVudCBlcnJvciBjb2RlIHdpbGwgbG9nIHVzZXIgb3V0IHdoZW4gdGhlcmUgaXMgYSBuZXR3b3JrIGVycm9yXG4gICAgLy8gYmVjYXVzZSB3ZSB0cmVhdCBhbnkgZXJyb3Igb3RoZXIgdGhhbiBORVRXT1JLX1JFUVVFU1RfRkFJTEVEIGFzIHRva2VuIGlzIGludmFsaWQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9ibG9iLzRmYmM3MzYxMGQ3MGJlNGUwODUyZTdkZTYzYTM5Y2I3ODk3ZTg1NDYvcGFja2FnZXMvYXV0aC9zcmMvY29yZS9hdXRoL2F1dGhfaW1wbC50cyNMMzA5LUwzMTZcbiAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRUQsIHsgJ21lc3NhZ2UnOiBTdHJpbmcoZSkgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9wZXJmb3JtU2lnbkluUmVxdWVzdDxULCBWIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlPihcbiAgYXV0aDogQXV0aCxcbiAgbWV0aG9kOiBIdHRwTWV0aG9kLFxuICBwYXRoOiBFbmRwb2ludCxcbiAgcmVxdWVzdD86IFQsXG4gIGN1c3RvbUVycm9yTWFwOiBQYXJ0aWFsPFNlcnZlckVycm9yTWFwPFNlcnZlckVycm9yPj4gPSB7fVxuKTogUHJvbWlzZTxWPiB7XG4gIGNvbnN0IHNlcnZlclJlc3BvbnNlID0gKGF3YWl0IF9wZXJmb3JtQXBpUmVxdWVzdDxULCBWIHwgSWRUb2tlbk1mYVJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIG1ldGhvZCxcbiAgICBwYXRoLFxuICAgIHJlcXVlc3QsXG4gICAgY3VzdG9tRXJyb3JNYXBcbiAgKSkgYXMgVjtcbiAgaWYgKCdtZmFQZW5kaW5nQ3JlZGVudGlhbCcgaW4gc2VydmVyUmVzcG9uc2UpIHtcbiAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk1GQV9SRVFVSVJFRCwge1xuICAgICAgX3NlcnZlclJlc3BvbnNlOiBzZXJ2ZXJSZXNwb25zZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNlcnZlclJlc3BvbnNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldEZpbmFsVGFyZ2V0KFxuICBhdXRoOiBBdXRoLFxuICBob3N0OiBzdHJpbmcsXG4gIHBhdGg6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgY29uc3QgYmFzZSA9IGAke2hvc3R9JHtwYXRofT8ke3F1ZXJ5fWA7XG5cbiAgaWYgKCEoYXV0aCBhcyBBdXRoSW50ZXJuYWwpLmNvbmZpZy5lbXVsYXRvcikge1xuICAgIHJldHVybiBgJHthdXRoLmNvbmZpZy5hcGlTY2hlbWV9Oi8vJHtiYXNlfWA7XG4gIH1cblxuICByZXR1cm4gX2VtdWxhdG9yVXJsKGF1dGguY29uZmlnIGFzIENvbmZpZ0ludGVybmFsLCBiYXNlKTtcbn1cblxuY2xhc3MgTmV0d29ya1RpbWVvdXQ8VD4ge1xuICAvLyBOb2RlIHRpbWVycyBhbmQgYnJvd3NlciB0aW1lcnMgYXJlIGZ1bmRhbWVudGFsbHkgaW5jb21wYXRpYmxlLCBidXQgd2VcbiAgLy8gZG9uJ3QgY2FyZSBhYm91dCB0aGUgdmFsdWUgaGVyZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIHRpbWVyOiBhbnkgfCBudWxsID0gbnVsbDtcbiAgcmVhZG9ubHkgcHJvbWlzZSA9IG5ldyBQcm9taXNlPFQ+KChfLCByZWplY3QpID0+IHtcbiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgICBfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRUQpXG4gICAgICApO1xuICAgIH0sIERFRkFVTFRfQVBJX1RJTUVPVVRfTVMuZ2V0KCkpO1xuICB9KTtcblxuICBjbGVhck5ldHdvcmtUaW1lb3V0KCk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXV0aDogQXV0aCkge31cbn1cblxuaW50ZXJmYWNlIFBvdGVudGlhbFJlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHtcbiAgZW1haWw/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX21ha2VUYWdnZWRFcnJvcihcbiAgYXV0aDogQXV0aCxcbiAgY29kZTogQXV0aEVycm9yQ29kZSxcbiAgcmVzcG9uc2U6IFBvdGVudGlhbFJlc3BvbnNlXG4pOiBGaXJlYmFzZUVycm9yIHtcbiAgY29uc3QgZXJyb3JQYXJhbXM6IE5hbWVkRXJyb3JQYXJhbXMgPSB7XG4gICAgYXBwTmFtZTogYXV0aC5uYW1lXG4gIH07XG5cbiAgaWYgKHJlc3BvbnNlLmVtYWlsKSB7XG4gICAgZXJyb3JQYXJhbXMuZW1haWwgPSByZXNwb25zZS5lbWFpbDtcbiAgfVxuICBpZiAocmVzcG9uc2UucGhvbmVOdW1iZXIpIHtcbiAgICBlcnJvclBhcmFtcy5waG9uZU51bWJlciA9IHJlc3BvbnNlLnBob25lTnVtYmVyO1xuICB9XG5cbiAgY29uc3QgZXJyb3IgPSBfY3JlYXRlRXJyb3IoYXV0aCwgY29kZSwgZXJyb3JQYXJhbXMpO1xuXG4gIC8vIFdlIGtub3cgY3VzdG9tRGF0YSBpcyBkZWZpbmVkIG9uIGVycm9yIGJlY2F1c2UgZXJyb3JQYXJhbXMgaXMgZGVmaW5lZFxuICAoZXJyb3IuY3VzdG9tRGF0YSEgYXMgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UpLl90b2tlblJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEVuZHBvaW50LCBIdHRwTWV0aG9kLCBfcGVyZm9ybUFwaVJlcXVlc3QgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBNZmFFbnJvbGxtZW50IH0gZnJvbSAnLi9tZmEnO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlQWNjb3VudFJlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVBY2NvdW50KFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBEZWxldGVBY2NvdW50UmVxdWVzdFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8RGVsZXRlQWNjb3VudFJlcXVlc3QsIHZvaWQ+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LkRFTEVURV9BQ0NPVU5ULFxuICAgIHJlcXVlc3RcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlclVzZXJJbmZvIHtcbiAgcHJvdmlkZXJJZDogc3RyaW5nO1xuICByYXdJZD86IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICBwaG90b1VybD86IHN0cmluZztcbiAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlTGlua2VkQWNjb3VudHNSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICBkZWxldGVQcm92aWRlcjogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlTGlua2VkQWNjb3VudHNSZXNwb25zZSB7XG4gIHByb3ZpZGVyVXNlckluZm86IFByb3ZpZGVyVXNlckluZm9bXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUxpbmtlZEFjY291bnRzKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBEZWxldGVMaW5rZWRBY2NvdW50c1JlcXVlc3Rcbik6IFByb21pc2U8RGVsZXRlTGlua2VkQWNjb3VudHNSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFxuICAgIERlbGV0ZUxpbmtlZEFjY291bnRzUmVxdWVzdCxcbiAgICBEZWxldGVMaW5rZWRBY2NvdW50c1Jlc3BvbnNlXG4gID4oYXV0aCwgSHR0cE1ldGhvZC5QT1NULCBFbmRwb2ludC5TRVRfQUNDT1VOVF9JTkZPLCByZXF1ZXN0KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBUElVc2VySW5mbyB7XG4gIGxvY2FsSWQ/OiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICBwaG90b1VybD86IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG4gIGVtYWlsVmVyaWZpZWQ/OiBib29sZWFuO1xuICBwaG9uZU51bWJlcj86IHN0cmluZztcbiAgbGFzdExvZ2luQXQ/OiBudW1iZXI7XG4gIGNyZWF0ZWRBdD86IG51bWJlcjtcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG4gIHBhc3N3b3JkSGFzaD86IHN0cmluZztcbiAgcHJvdmlkZXJVc2VySW5mbz86IFByb3ZpZGVyVXNlckluZm9bXTtcbiAgbWZhSW5mbz86IE1mYUVucm9sbG1lbnRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRBY2NvdW50SW5mb1JlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QWNjb3VudEluZm9SZXNwb25zZSB7XG4gIHVzZXJzOiBBUElVc2VySW5mb1tdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWNjb3VudEluZm8oXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IEdldEFjY291bnRJbmZvUmVxdWVzdFxuKTogUHJvbWlzZTxHZXRBY2NvdW50SW5mb1Jlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8R2V0QWNjb3VudEluZm9SZXF1ZXN0LCBHZXRBY2NvdW50SW5mb1Jlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5HRVRfQUNDT1VOVF9JTkZPLFxuICAgIHJlcXVlc3RcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcoXG4gIHV0Y1RpbWVzdGFtcD86IHN0cmluZyB8IG51bWJlclxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCF1dGNUaW1lc3RhbXApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gQ29udmVydCB0byBkYXRlIG9iamVjdC5cbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoTnVtYmVyKHV0Y1RpbWVzdGFtcCkpO1xuICAgIC8vIFRlc3QgZGF0ZSBpcyB2YWxpZC5cbiAgICBpZiAoIWlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgLy8gQ29udmVydCB0byBVVEMgZGF0ZSBzdHJpbmcuXG4gICAgICByZXR1cm4gZGF0ZS50b1VUQ1N0cmluZygpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIERvIG5vdGhpbmcuIHVuZGVmaW5lZCB3aWxsIGJlIHJldHVybmVkLlxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJZFRva2VuUmVzdWx0LCBQYXJzZWRUb2tlbiwgVXNlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBiYXNlNjREZWNvZGUsIGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX2xvZ0Vycm9yIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nIH0gZnJvbSAnLi4vdXRpbC90aW1lJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG4vKipcbiAqIFJldHVybnMgYSBKU09OIFdlYiBUb2tlbiAoSldUKSB1c2VkIHRvIGlkZW50aWZ5IHRoZSB1c2VyIHRvIGEgRmlyZWJhc2Ugc2VydmljZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogUmV0dXJucyB0aGUgY3VycmVudCB0b2tlbiBpZiBpdCBoYXMgbm90IGV4cGlyZWQgb3IgaWYgaXQgd2lsbCBub3QgZXhwaXJlIGluIHRoZSBuZXh0IGZpdmVcbiAqIG1pbnV0ZXMuIE90aGVyd2lzZSwgdGhpcyB3aWxsIHJlZnJlc2ggdGhlIHRva2VuIGFuZCByZXR1cm4gYSBuZXcgb25lLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gZm9yY2VSZWZyZXNoIC0gRm9yY2UgcmVmcmVzaCByZWdhcmRsZXNzIG9mIHRva2VuIGV4cGlyYXRpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRUb2tlbih1c2VyOiBVc2VyLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikuZ2V0SWRUb2tlbihmb3JjZVJlZnJlc2gpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBkZXNlcmlhbGl6ZWQgSlNPTiBXZWIgVG9rZW4gKEpXVCkgdXNlZCB0byBpZGVudGlmeSB0aGUgdXNlciB0byBhIEZpcmViYXNlIHNlcnZpY2UuXG4gKlxuICogQHJlbWFya3NcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgdG9rZW4gaWYgaXQgaGFzIG5vdCBleHBpcmVkIG9yIGlmIGl0IHdpbGwgbm90IGV4cGlyZSBpbiB0aGUgbmV4dCBmaXZlXG4gKiBtaW51dGVzLiBPdGhlcndpc2UsIHRoaXMgd2lsbCByZWZyZXNoIHRoZSB0b2tlbiBhbmQgcmV0dXJuIGEgbmV3IG9uZS5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIGZvcmNlUmVmcmVzaCAtIEZvcmNlIHJlZnJlc2ggcmVnYXJkbGVzcyBvZiB0b2tlbiBleHBpcmF0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldElkVG9rZW5SZXN1bHQoXG4gIHVzZXI6IFVzZXIsXG4gIGZvcmNlUmVmcmVzaCA9IGZhbHNlXG4pOiBQcm9taXNlPElkVG9rZW5SZXN1bHQ+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgY29uc3QgdG9rZW4gPSBhd2FpdCB1c2VySW50ZXJuYWwuZ2V0SWRUb2tlbihmb3JjZVJlZnJlc2gpO1xuICBjb25zdCBjbGFpbXMgPSBfcGFyc2VUb2tlbih0b2tlbik7XG5cbiAgX2Fzc2VydChcbiAgICBjbGFpbXMgJiYgY2xhaW1zLmV4cCAmJiBjbGFpbXMuYXV0aF90aW1lICYmIGNsYWltcy5pYXQsXG4gICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICApO1xuICBjb25zdCBmaXJlYmFzZSA9XG4gICAgdHlwZW9mIGNsYWltcy5maXJlYmFzZSA9PT0gJ29iamVjdCcgPyBjbGFpbXMuZmlyZWJhc2UgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3Qgc2lnbkluUHJvdmlkZXI6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGZpcmViYXNlPy5bJ3NpZ25faW5fcHJvdmlkZXInXTtcblxuICByZXR1cm4ge1xuICAgIGNsYWltcyxcbiAgICB0b2tlbixcbiAgICBhdXRoVGltZTogdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nKFxuICAgICAgc2Vjb25kc1N0cmluZ1RvTWlsbGlzZWNvbmRzKGNsYWltcy5hdXRoX3RpbWUpXG4gICAgKSEsXG4gICAgaXNzdWVkQXRUaW1lOiB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcoXG4gICAgICBzZWNvbmRzU3RyaW5nVG9NaWxsaXNlY29uZHMoY2xhaW1zLmlhdClcbiAgICApISxcbiAgICBleHBpcmF0aW9uVGltZTogdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nKFxuICAgICAgc2Vjb25kc1N0cmluZ1RvTWlsbGlzZWNvbmRzKGNsYWltcy5leHApXG4gICAgKSEsXG4gICAgc2lnbkluUHJvdmlkZXI6IHNpZ25JblByb3ZpZGVyIHx8IG51bGwsXG4gICAgc2lnbkluU2Vjb25kRmFjdG9yOiBmaXJlYmFzZT8uWydzaWduX2luX3NlY29uZF9mYWN0b3InXSB8fCBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlY29uZHNTdHJpbmdUb01pbGxpc2Vjb25kcyhzZWNvbmRzOiBzdHJpbmcpOiBudW1iZXIge1xuICByZXR1cm4gTnVtYmVyKHNlY29uZHMpICogMTAwMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9wYXJzZVRva2VuKHRva2VuOiBzdHJpbmcpOiBQYXJzZWRUb2tlbiB8IG51bGwge1xuICBjb25zdCBbYWxnb3JpdGhtLCBwYXlsb2FkLCBzaWduYXR1cmVdID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgaWYgKFxuICAgIGFsZ29yaXRobSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgcGF5bG9hZCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgc2lnbmF0dXJlID09PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgX2xvZ0Vycm9yKCdKV1QgbWFsZm9ybWVkLCBjb250YWluZWQgZmV3ZXIgdGhhbiAzIHNlY3Rpb25zJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGRlY29kZWQgPSBiYXNlNjREZWNvZGUocGF5bG9hZCk7XG4gICAgaWYgKCFkZWNvZGVkKSB7XG4gICAgICBfbG9nRXJyb3IoJ0ZhaWxlZCB0byBkZWNvZGUgYmFzZTY0IEpXVCBwYXlsb2FkJyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlZCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBfbG9nRXJyb3IoXG4gICAgICAnQ2F1Z2h0IGVycm9yIHBhcnNpbmcgSldUIHBheWxvYWQgYXMgSlNPTicsXG4gICAgICAoZSBhcyBFcnJvcik/LnRvU3RyaW5nKClcbiAgICApO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdCBleHBpcmVzSW4gVFRMIGZyb20gYSB0b2tlbiBieSBzdWJ0cmFjdGluZyB0aGUgZXhwaXJhdGlvbiBmcm9tIHRoZSBpc3N1YW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF90b2tlbkV4cGlyZXNJbih0b2tlbjogc3RyaW5nKTogbnVtYmVyIHtcbiAgY29uc3QgcGFyc2VkVG9rZW4gPSBfcGFyc2VUb2tlbih0b2tlbik7XG4gIF9hc3NlcnQocGFyc2VkVG9rZW4sIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICBfYXNzZXJ0KHR5cGVvZiBwYXJzZWRUb2tlbi5leHAgIT09ICd1bmRlZmluZWQnLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgX2Fzc2VydCh0eXBlb2YgcGFyc2VkVG9rZW4uaWF0ICE9PSAndW5kZWZpbmVkJywgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIHJldHVybiBOdW1iZXIocGFyc2VkVG9rZW4uZXhwKSAtIE51bWJlcihwYXJzZWRUb2tlbi5pYXQpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9sb2dvdXRJZkludmFsaWRhdGVkPFQ+KFxuICB1c2VyOiBVc2VySW50ZXJuYWwsXG4gIHByb21pc2U6IFByb21pc2U8VD4sXG4gIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlXG4pOiBQcm9taXNlPFQ+IHtcbiAgaWYgKGJ5cGFzc0F1dGhTdGF0ZSkge1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IgJiYgaXNVc2VySW52YWxpZGF0ZWQoZSkpIHtcbiAgICAgIGlmICh1c2VyLmF1dGguY3VycmVudFVzZXIgPT09IHVzZXIpIHtcbiAgICAgICAgYXdhaXQgdXNlci5hdXRoLnNpZ25PdXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVXNlckludmFsaWRhdGVkKHsgY29kZSB9OiBGaXJlYmFzZUVycm9yKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgY29kZSA9PT0gYGF1dGgvJHtBdXRoRXJyb3JDb2RlLlVTRVJfRElTQUJMRUR9YCB8fFxuICAgIGNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5UT0tFTl9FWFBJUkVEfWBcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG4vLyBSZWZyZXNoIHRoZSB0b2tlbiBmaXZlIG1pbnV0ZXMgYmVmb3JlIGV4cGlyYXRpb25cbmV4cG9ydCBjb25zdCBlbnVtIER1cmF0aW9uIHtcbiAgT0ZGU0VUID0gNSAqIDEwMDAgKiA2MCxcbiAgUkVUUllfQkFDS09GRl9NSU4gPSAzMCAqIDEwMDAsXG4gIFJFVFJZX0JBQ0tPRkZfTUFYID0gMTYgKiA2MCAqIDEwMDBcbn1cblxuZXhwb3J0IGNsYXNzIFByb2FjdGl2ZVJlZnJlc2gge1xuICBwcml2YXRlIGlzUnVubmluZyA9IGZhbHNlO1xuXG4gIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyByZXR1cm4gZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgdHlwZXMuXG4gIC8vIFdlIGRvbid0IGFjdHVhbGx5IGNhcmUgd2hhdCB0aGUgdmFsdWUgaXMgYnV0IFRTIHdvbid0IGFjY2VwdCB1bmtub3duIGFuZFxuICAvLyB3ZSBjYW4ndCBjYXN0IHByb3Blcmx5IGluIGJvdGggZW52aXJvbm1lbnRzLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIHRpbWVySWQ6IGFueSB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGVycm9yQmFja29mZiA9IER1cmF0aW9uLlJFVFJZX0JBQ0tPRkZfTUlOO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdXNlcjogVXNlckludGVybmFsKSB7fVxuXG4gIF9zdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7XG4gICAgdGhpcy5zY2hlZHVsZSgpO1xuICB9XG5cbiAgX3N0b3AoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMudGltZXJJZCAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRJbnRlcnZhbCh3YXNFcnJvcjogYm9vbGVhbik6IG51bWJlciB7XG4gICAgaWYgKHdhc0Vycm9yKSB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuZXJyb3JCYWNrb2ZmO1xuICAgICAgdGhpcy5lcnJvckJhY2tvZmYgPSBNYXRoLm1pbihcbiAgICAgICAgdGhpcy5lcnJvckJhY2tvZmYgKiAyLFxuICAgICAgICBEdXJhdGlvbi5SRVRSWV9CQUNLT0ZGX01BWFxuICAgICAgKTtcbiAgICAgIHJldHVybiBpbnRlcnZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgdGhlIGVycm9yIGJhY2tvZmZcbiAgICAgIHRoaXMuZXJyb3JCYWNrb2ZmID0gRHVyYXRpb24uUkVUUllfQkFDS09GRl9NSU47XG4gICAgICBjb25zdCBleHBUaW1lID0gdGhpcy51c2VyLnN0c1Rva2VuTWFuYWdlci5leHBpcmF0aW9uVGltZSA/PyAwO1xuICAgICAgY29uc3QgaW50ZXJ2YWwgPSBleHBUaW1lIC0gRGF0ZS5ub3coKSAtIER1cmF0aW9uLk9GRlNFVDtcblxuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIGludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNjaGVkdWxlKHdhc0Vycm9yID0gZmFsc2UpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICAvLyBKdXN0IGluIGNhc2UuLi5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuZ2V0SW50ZXJ2YWwod2FzRXJyb3IpO1xuICAgIHRoaXMudGltZXJJZCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5pdGVyYXRpb24oKTtcbiAgICB9LCBpbnRlcnZhbCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGl0ZXJhdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy51c2VyLmdldElkVG9rZW4odHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gT25seSByZXRyeSBvbiBuZXR3b3JrIGVycm9yc1xuICAgICAgaWYgKFxuICAgICAgICAoZSBhcyBGaXJlYmFzZUVycm9yKT8uY29kZSA9PT1cbiAgICAgICAgYGF1dGgvJHtBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRUR9YFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoLyogd2FzRXJyb3IgKi8gdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zY2hlZHVsZSgpO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VyTWV0YWRhdGEgYXMgVXNlck1ldGFkYXRhVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IHV0Y1RpbWVzdGFtcFRvRGF0ZVN0cmluZyB9IGZyb20gJy4uL3V0aWwvdGltZSc7XG5cbmV4cG9ydCBjbGFzcyBVc2VyTWV0YWRhdGEgaW1wbGVtZW50cyBVc2VyTWV0YWRhdGFUeXBlIHtcbiAgY3JlYXRpb25UaW1lPzogc3RyaW5nO1xuICBsYXN0U2lnbkluVGltZT86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNyZWF0ZWRBdD86IHN0cmluZyB8IG51bWJlcixcbiAgICBwcml2YXRlIGxhc3RMb2dpbkF0Pzogc3RyaW5nIHwgbnVtYmVyXG4gICkge1xuICAgIHRoaXMuX2luaXRpYWxpemVUaW1lKCk7XG4gIH1cblxuICBwcml2YXRlIF9pbml0aWFsaXplVGltZSgpOiB2b2lkIHtcbiAgICB0aGlzLmxhc3RTaWduSW5UaW1lID0gdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nKHRoaXMubGFzdExvZ2luQXQpO1xuICAgIHRoaXMuY3JlYXRpb25UaW1lID0gdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nKHRoaXMuY3JlYXRlZEF0KTtcbiAgfVxuXG4gIF9jb3B5KG1ldGFkYXRhOiBVc2VyTWV0YWRhdGEpOiB2b2lkIHtcbiAgICB0aGlzLmNyZWF0ZWRBdCA9IG1ldGFkYXRhLmNyZWF0ZWRBdDtcbiAgICB0aGlzLmxhc3RMb2dpbkF0ID0gbWV0YWRhdGEubGFzdExvZ2luQXQ7XG4gICAgdGhpcy5faW5pdGlhbGl6ZVRpbWUoKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVkQXQ6IHRoaXMuY3JlYXRlZEF0LFxuICAgICAgbGFzdExvZ2luQXQ6IHRoaXMubGFzdExvZ2luQXRcbiAgICB9O1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VyLCBVc2VySW5mbyB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7XG4gIGdldEFjY291bnRJbmZvLFxuICBQcm92aWRlclVzZXJJbmZvXG59IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvYWNjb3VudCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9sb2dvdXRJZkludmFsaWRhdGVkIH0gZnJvbSAnLi9pbnZhbGlkYXRpb24nO1xuaW1wb3J0IHsgVXNlck1ldGFkYXRhIH0gZnJvbSAnLi91c2VyX21ldGFkYXRhJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9yZWxvYWRXaXRob3V0U2F2aW5nKHVzZXI6IFVzZXJJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBhdXRoID0gdXNlci5hdXRoO1xuICBjb25zdCBpZFRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgdXNlcixcbiAgICBnZXRBY2NvdW50SW5mbyhhdXRoLCB7IGlkVG9rZW4gfSlcbiAgKTtcblxuICBfYXNzZXJ0KHJlc3BvbnNlPy51c2Vycy5sZW5ndGgsIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuXG4gIGNvbnN0IGNvcmVBY2NvdW50ID0gcmVzcG9uc2UudXNlcnNbMF07XG5cbiAgdXNlci5fbm90aWZ5UmVsb2FkTGlzdGVuZXIoY29yZUFjY291bnQpO1xuXG4gIGNvbnN0IG5ld1Byb3ZpZGVyRGF0YSA9IGNvcmVBY2NvdW50LnByb3ZpZGVyVXNlckluZm8/Lmxlbmd0aFxuICAgID8gZXh0cmFjdFByb3ZpZGVyRGF0YShjb3JlQWNjb3VudC5wcm92aWRlclVzZXJJbmZvKVxuICAgIDogW107XG5cbiAgY29uc3QgcHJvdmlkZXJEYXRhID0gbWVyZ2VQcm92aWRlckRhdGEodXNlci5wcm92aWRlckRhdGEsIG5ld1Byb3ZpZGVyRGF0YSk7XG5cbiAgLy8gUHJlc2VydmVzIHRoZSBub24tbm9ueW1vdXMgc3RhdHVzIG9mIHRoZSBzdG9yZWQgdXNlciwgZXZlbiBpZiBubyBtb3JlXG4gIC8vIGNyZWRlbnRpYWxzIChmZWRlcmF0ZWQgb3IgZW1haWwvcGFzc3dvcmQpIGFyZSBsaW5rZWQgdG8gdGhlIHVzZXIuIElmXG4gIC8vIHRoZSB1c2VyIHdhcyBwcmV2aW91c2x5IGFub255bW91cywgdGhlbiB1c2UgcHJvdmlkZXIgZGF0YSB0byB1cGRhdGUuXG4gIC8vIE9uIHRoZSBvdGhlciBoYW5kLCBpZiBpdCB3YXMgbm90IGFub255bW91cyBiZWZvcmUsIGl0IHNob3VsZCBuZXZlciBiZVxuICAvLyBjb25zaWRlcmVkIGFub255bW91cyBub3cuXG4gIGNvbnN0IG9sZElzQW5vbnltb3VzID0gdXNlci5pc0Fub255bW91cztcbiAgY29uc3QgbmV3SXNBbm9ueW1vdXMgPVxuICAgICEodXNlci5lbWFpbCAmJiBjb3JlQWNjb3VudC5wYXNzd29yZEhhc2gpICYmICFwcm92aWRlckRhdGE/Lmxlbmd0aDtcbiAgY29uc3QgaXNBbm9ueW1vdXMgPSAhb2xkSXNBbm9ueW1vdXMgPyBmYWxzZSA6IG5ld0lzQW5vbnltb3VzO1xuXG4gIGNvbnN0IHVwZGF0ZXM6IFBhcnRpYWw8VXNlckludGVybmFsPiA9IHtcbiAgICB1aWQ6IGNvcmVBY2NvdW50LmxvY2FsSWQsXG4gICAgZGlzcGxheU5hbWU6IGNvcmVBY2NvdW50LmRpc3BsYXlOYW1lIHx8IG51bGwsXG4gICAgcGhvdG9VUkw6IGNvcmVBY2NvdW50LnBob3RvVXJsIHx8IG51bGwsXG4gICAgZW1haWw6IGNvcmVBY2NvdW50LmVtYWlsIHx8IG51bGwsXG4gICAgZW1haWxWZXJpZmllZDogY29yZUFjY291bnQuZW1haWxWZXJpZmllZCB8fCBmYWxzZSxcbiAgICBwaG9uZU51bWJlcjogY29yZUFjY291bnQucGhvbmVOdW1iZXIgfHwgbnVsbCxcbiAgICB0ZW5hbnRJZDogY29yZUFjY291bnQudGVuYW50SWQgfHwgbnVsbCxcbiAgICBwcm92aWRlckRhdGEsXG4gICAgbWV0YWRhdGE6IG5ldyBVc2VyTWV0YWRhdGEoY29yZUFjY291bnQuY3JlYXRlZEF0LCBjb3JlQWNjb3VudC5sYXN0TG9naW5BdCksXG4gICAgaXNBbm9ueW1vdXNcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKHVzZXIsIHVwZGF0ZXMpO1xufVxuXG4vKipcbiAqIFJlbG9hZHMgdXNlciBhY2NvdW50IGRhdGEsIGlmIHNpZ25lZCBpbi5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbG9hZCh1c2VyOiBVc2VyKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbDogVXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgYXdhaXQgX3JlbG9hZFdpdGhvdXRTYXZpbmcodXNlckludGVybmFsKTtcblxuICAvLyBFdmVuIHRob3VnaCB0aGUgY3VycmVudCB1c2VyIGhhc24ndCBjaGFuZ2VkLCB1cGRhdGVcbiAgLy8gY3VycmVudCB1c2VyIHdpbGwgdHJpZ2dlciBhIHBlcnNpc3RlbmNlIHVwZGF0ZSB3LyB0aGVcbiAgLy8gbmV3IGluZm8uXG4gIGF3YWl0IHVzZXJJbnRlcm5hbC5hdXRoLl9wZXJzaXN0VXNlcklmQ3VycmVudCh1c2VySW50ZXJuYWwpO1xuICB1c2VySW50ZXJuYWwuYXV0aC5fbm90aWZ5TGlzdGVuZXJzSWZDdXJyZW50KHVzZXJJbnRlcm5hbCk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvdmlkZXJEYXRhKFxuICBvcmlnaW5hbDogVXNlckluZm9bXSxcbiAgbmV3RGF0YTogVXNlckluZm9bXVxuKTogVXNlckluZm9bXSB7XG4gIGNvbnN0IGRlZHVwZWQgPSBvcmlnaW5hbC5maWx0ZXIoXG4gICAgbyA9PiAhbmV3RGF0YS5zb21lKG4gPT4gbi5wcm92aWRlcklkID09PSBvLnByb3ZpZGVySWQpXG4gICk7XG4gIHJldHVybiBbLi4uZGVkdXBlZCwgLi4ubmV3RGF0YV07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm92aWRlckRhdGEocHJvdmlkZXJzOiBQcm92aWRlclVzZXJJbmZvW10pOiBVc2VySW5mb1tdIHtcbiAgcmV0dXJuIHByb3ZpZGVycy5tYXAoKHsgcHJvdmlkZXJJZCwgLi4ucHJvdmlkZXIgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBwcm92aWRlcklkLFxuICAgICAgdWlkOiBwcm92aWRlci5yYXdJZCB8fCAnJyxcbiAgICAgIGRpc3BsYXlOYW1lOiBwcm92aWRlci5kaXNwbGF5TmFtZSB8fCBudWxsLFxuICAgICAgZW1haWw6IHByb3ZpZGVyLmVtYWlsIHx8IG51bGwsXG4gICAgICBwaG9uZU51bWJlcjogcHJvdmlkZXIucGhvbmVOdW1iZXIgfHwgbnVsbCxcbiAgICAgIHBob3RvVVJMOiBwcm92aWRlci5waG90b1VybCB8fCBudWxsXG4gICAgfTtcbiAgfSk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cblxuaW1wb3J0IHsgcXVlcnlzdHJpbmcgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7XG4gIF9nZXRGaW5hbFRhcmdldCxcbiAgX3BlcmZvcm1GZXRjaFdpdGhFcnJvckhhbmRsaW5nLFxuICBIdHRwTWV0aG9kLFxuICBIdHRwSGVhZGVyXG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEZldGNoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZmV0Y2hfcHJvdmlkZXInO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcblxuZXhwb3J0IGNvbnN0IGVudW0gRW5kcG9pbnQge1xuICBUT0tFTiA9ICcvdjEvdG9rZW4nXG59XG5cbi8qKiBUaGUgc2VydmVyIHJlc3BvbnNlcyB3aXRoIHNuYWtlX2Nhc2U7IHdlIGNvbnZlcnQgdG8gY2FtZWxDYXNlICovXG5pbnRlcmZhY2UgUmVxdWVzdFN0c1Rva2VuU2VydmVyUmVzcG9uc2Uge1xuICBhY2Nlc3NfdG9rZW46IHN0cmluZztcbiAgZXhwaXJlc19pbjogc3RyaW5nO1xuICByZWZyZXNoX3Rva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdFN0c1Rva2VuUmVzcG9uc2Uge1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICBleHBpcmVzSW46IHN0cmluZztcbiAgcmVmcmVzaFRva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0U3RzVG9rZW4oXG4gIGF1dGg6IEF1dGgsXG4gIHJlZnJlc2hUb2tlbjogc3RyaW5nXG4pOiBQcm9taXNlPFJlcXVlc3RTdHNUb2tlblJlc3BvbnNlPiB7XG4gIGNvbnN0IHJlc3BvbnNlID1cbiAgICBhd2FpdCBfcGVyZm9ybUZldGNoV2l0aEVycm9ySGFuZGxpbmc8UmVxdWVzdFN0c1Rva2VuU2VydmVyUmVzcG9uc2U+KFxuICAgICAgYXV0aCxcbiAgICAgIHt9LFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gcXVlcnlzdHJpbmcoe1xuICAgICAgICAgICdncmFudF90eXBlJzogJ3JlZnJlc2hfdG9rZW4nLFxuICAgICAgICAgICdyZWZyZXNoX3Rva2VuJzogcmVmcmVzaFRva2VuXG4gICAgICAgIH0pLnNsaWNlKDEpO1xuICAgICAgICBjb25zdCB7IHRva2VuQXBpSG9zdCwgYXBpS2V5IH0gPSBhdXRoLmNvbmZpZztcbiAgICAgICAgY29uc3QgdXJsID0gX2dldEZpbmFsVGFyZ2V0KFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgdG9rZW5BcGlIb3N0LFxuICAgICAgICAgIEVuZHBvaW50LlRPS0VOLFxuICAgICAgICAgIGBrZXk9JHthcGlLZXl9YFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBhd2FpdCAoYXV0aCBhcyBBdXRoSW50ZXJuYWwpLl9nZXRBZGRpdGlvbmFsSGVhZGVycygpO1xuICAgICAgICBoZWFkZXJzW0h0dHBIZWFkZXIuQ09OVEVOVF9UWVBFXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuXG4gICAgICAgIHJldHVybiBGZXRjaFByb3ZpZGVyLmZldGNoKCkodXJsLCB7XG4gICAgICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBPU1QsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICBib2R5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICk7XG5cbiAgLy8gVGhlIHJlc3BvbnNlIGNvbWVzIGJhY2sgaW4gc25ha2VfY2FzZS4gQ29udmVydCB0byBjYW1lbDpcbiAgcmV0dXJuIHtcbiAgICBhY2Nlc3NUb2tlbjogcmVzcG9uc2UuYWNjZXNzX3Rva2VuLFxuICAgIGV4cGlyZXNJbjogcmVzcG9uc2UuZXhwaXJlc19pbixcbiAgICByZWZyZXNoVG9rZW46IHJlc3BvbnNlLnJlZnJlc2hfdG9rZW5cbiAgfTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZpbmFsaXplTWZhUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IHJlcXVlc3RTdHNUb2tlbiB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi90b2tlbic7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgUGVyc2lzdGVkQmxvYiB9IGZyb20gJy4uL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7IF9hc3NlcnQsIGRlYnVnRmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF90b2tlbkV4cGlyZXNJbiB9IGZyb20gJy4vaWRfdG9rZW5fcmVzdWx0JztcblxuLyoqXG4gKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhlIG9mZmljaWFsIGV4cGlyYXRpb24gdGltZSBvZiBhIHRva2VuXG4gKiB0byByZWZyZXNoIHRoYXQgdG9rZW4sIHRvIHByb3ZpZGUgYSBidWZmZXIgZm9yIFJQQ3MgdG8gY29tcGxldGUuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIEJ1ZmZlciB7XG4gIFRPS0VOX1JFRlJFU0ggPSAzMF8wMDBcbn1cblxuLyoqXG4gKiBXZSBuZWVkIHRvIG1hcmsgdGhpcyBjbGFzcyBhcyBpbnRlcm5hbCBleHBsaWNpdGx5IHRvIGV4Y2x1ZGUgaXQgaW4gdGhlIHB1YmxpYyB0eXBpbmdzLCBiZWNhdXNlXG4gKiBpdCByZWZlcmVuY2VzIEF1dGhJbnRlcm5hbCB3aGljaCBoYXMgYSBjaXJjdWxhciBkZXBlbmRlbmN5IHdpdGggVXNlckludGVybmFsLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU3RzVG9rZW5NYW5hZ2VyIHtcbiAgcmVmcmVzaFRva2VuOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgYWNjZXNzVG9rZW46IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBleHBpcmF0aW9uVGltZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgZ2V0IGlzRXhwaXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgIXRoaXMuZXhwaXJhdGlvblRpbWUgfHxcbiAgICAgIERhdGUubm93KCkgPiB0aGlzLmV4cGlyYXRpb25UaW1lIC0gQnVmZmVyLlRPS0VOX1JFRlJFU0hcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlRnJvbVNlcnZlclJlc3BvbnNlKFxuICAgIHJlc3BvbnNlOiBJZFRva2VuUmVzcG9uc2UgfCBGaW5hbGl6ZU1mYVJlc3BvbnNlXG4gICk6IHZvaWQge1xuICAgIF9hc3NlcnQocmVzcG9uc2UuaWRUb2tlbiwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiByZXNwb25zZS5pZFRva2VuICE9PSAndW5kZWZpbmVkJyxcbiAgICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICApO1xuICAgIF9hc3NlcnQoXG4gICAgICB0eXBlb2YgcmVzcG9uc2UucmVmcmVzaFRva2VuICE9PSAndW5kZWZpbmVkJyxcbiAgICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICApO1xuICAgIGNvbnN0IGV4cGlyZXNJbiA9XG4gICAgICAnZXhwaXJlc0luJyBpbiByZXNwb25zZSAmJiB0eXBlb2YgcmVzcG9uc2UuZXhwaXJlc0luICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IE51bWJlcihyZXNwb25zZS5leHBpcmVzSW4pXG4gICAgICAgIDogX3Rva2VuRXhwaXJlc0luKHJlc3BvbnNlLmlkVG9rZW4pO1xuICAgIHRoaXMudXBkYXRlVG9rZW5zQW5kRXhwaXJhdGlvbihcbiAgICAgIHJlc3BvbnNlLmlkVG9rZW4sXG4gICAgICByZXNwb25zZS5yZWZyZXNoVG9rZW4sXG4gICAgICBleHBpcmVzSW5cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZ2V0VG9rZW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGZvcmNlUmVmcmVzaCA9IGZhbHNlXG4gICk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgIF9hc3NlcnQoXG4gICAgICAhdGhpcy5hY2Nlc3NUb2tlbiB8fCB0aGlzLnJlZnJlc2hUb2tlbixcbiAgICAgIGF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLlRPS0VOX0VYUElSRURcbiAgICApO1xuXG4gICAgaWYgKCFmb3JjZVJlZnJlc2ggJiYgdGhpcy5hY2Nlc3NUb2tlbiAmJiAhdGhpcy5pc0V4cGlyZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlZnJlc2hUb2tlbikge1xuICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoKGF1dGgsIHRoaXMucmVmcmVzaFRva2VuISk7XG4gICAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNsZWFyUmVmcmVzaFRva2VuKCk6IHZvaWQge1xuICAgIHRoaXMucmVmcmVzaFRva2VuID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVmcmVzaChhdXRoOiBBdXRoSW50ZXJuYWwsIG9sZFRva2VuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW4sIGV4cGlyZXNJbiB9ID0gYXdhaXQgcmVxdWVzdFN0c1Rva2VuKFxuICAgICAgYXV0aCxcbiAgICAgIG9sZFRva2VuXG4gICAgKTtcbiAgICB0aGlzLnVwZGF0ZVRva2Vuc0FuZEV4cGlyYXRpb24oXG4gICAgICBhY2Nlc3NUb2tlbixcbiAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgIE51bWJlcihleHBpcmVzSW4pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVG9rZW5zQW5kRXhwaXJhdGlvbihcbiAgICBhY2Nlc3NUb2tlbjogc3RyaW5nLFxuICAgIHJlZnJlc2hUb2tlbjogc3RyaW5nLFxuICAgIGV4cGlyZXNJblNlYzogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuIHx8IG51bGw7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuIHx8IG51bGw7XG4gICAgdGhpcy5leHBpcmF0aW9uVGltZSA9IERhdGUubm93KCkgKyBleHBpcmVzSW5TZWMgKiAxMDAwO1xuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKGFwcE5hbWU6IHN0cmluZywgb2JqZWN0OiBQZXJzaXN0ZWRCbG9iKTogU3RzVG9rZW5NYW5hZ2VyIHtcbiAgICBjb25zdCB7IHJlZnJlc2hUb2tlbiwgYWNjZXNzVG9rZW4sIGV4cGlyYXRpb25UaW1lIH0gPSBvYmplY3Q7XG5cbiAgICBjb25zdCBtYW5hZ2VyID0gbmV3IFN0c1Rva2VuTWFuYWdlcigpO1xuICAgIGlmIChyZWZyZXNoVG9rZW4pIHtcbiAgICAgIF9hc3NlcnQodHlwZW9mIHJlZnJlc2hUb2tlbiA9PT0gJ3N0cmluZycsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsIHtcbiAgICAgICAgYXBwTmFtZVxuICAgICAgfSk7XG4gICAgICBtYW5hZ2VyLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjtcbiAgICB9XG4gICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICBfYXNzZXJ0KHR5cGVvZiBhY2Nlc3NUb2tlbiA9PT0gJ3N0cmluZycsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsIHtcbiAgICAgICAgYXBwTmFtZVxuICAgICAgfSk7XG4gICAgICBtYW5hZ2VyLmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW47XG4gICAgfVxuICAgIGlmIChleHBpcmF0aW9uVGltZSkge1xuICAgICAgX2Fzc2VydChcbiAgICAgICAgdHlwZW9mIGV4cGlyYXRpb25UaW1lID09PSAnbnVtYmVyJyxcbiAgICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcbiAgICAgICAge1xuICAgICAgICAgIGFwcE5hbWVcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIG1hbmFnZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hbmFnZXI7XG4gIH1cblxuICB0b0pTT04oKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVmcmVzaFRva2VuOiB0aGlzLnJlZnJlc2hUb2tlbixcbiAgICAgIGFjY2Vzc1Rva2VuOiB0aGlzLmFjY2Vzc1Rva2VuLFxuICAgICAgZXhwaXJhdGlvblRpbWU6IHRoaXMuZXhwaXJhdGlvblRpbWVcbiAgICB9O1xuICB9XG5cbiAgX2Fzc2lnbihzdHNUb2tlbk1hbmFnZXI6IFN0c1Rva2VuTWFuYWdlcik6IHZvaWQge1xuICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBzdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW47XG4gICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBzdHNUb2tlbk1hbmFnZXIucmVmcmVzaFRva2VuO1xuICAgIHRoaXMuZXhwaXJhdGlvblRpbWUgPSBzdHNUb2tlbk1hbmFnZXIuZXhwaXJhdGlvblRpbWU7XG4gIH1cblxuICBfY2xvbmUoKTogU3RzVG9rZW5NYW5hZ2VyIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgU3RzVG9rZW5NYW5hZ2VyKCksIHRoaXMudG9KU09OKCkpO1xuICB9XG5cbiAgX3BlcmZvcm1SZWZyZXNoKCk6IG5ldmVyIHtcbiAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSWRUb2tlblJlc3VsdCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBOZXh0Rm4gfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7XG4gIEFQSVVzZXJJbmZvLFxuICBkZWxldGVBY2NvdW50XG59IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvYWNjb3VudCc7XG5pbXBvcnQgeyBGaW5hbGl6ZU1mYVJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7XG4gIE11dGFibGVVc2VySW5mbyxcbiAgVXNlckludGVybmFsLFxuICBVc2VyUGFyYW1ldGVyc1xufSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgUGVyc2lzdGVkQmxvYiB9IGZyb20gJy4uL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBnZXRJZFRva2VuUmVzdWx0IH0gZnJvbSAnLi9pZF90b2tlbl9yZXN1bHQnO1xuaW1wb3J0IHsgX2xvZ291dElmSW52YWxpZGF0ZWQgfSBmcm9tICcuL2ludmFsaWRhdGlvbic7XG5pbXBvcnQgeyBQcm9hY3RpdmVSZWZyZXNoIH0gZnJvbSAnLi9wcm9hY3RpdmVfcmVmcmVzaCc7XG5pbXBvcnQgeyBfcmVsb2FkV2l0aG91dFNhdmluZywgcmVsb2FkIH0gZnJvbSAnLi9yZWxvYWQnO1xuaW1wb3J0IHsgU3RzVG9rZW5NYW5hZ2VyIH0gZnJvbSAnLi90b2tlbl9tYW5hZ2VyJztcbmltcG9ydCB7IFVzZXJNZXRhZGF0YSB9IGZyb20gJy4vdXNlcl9tZXRhZGF0YSc7XG5pbXBvcnQgeyBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG5mdW5jdGlvbiBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChcbiAgYXNzZXJ0aW9uOiB1bmtub3duLFxuICBhcHBOYW1lOiBzdHJpbmdcbik6IGFzc2VydHMgYXNzZXJ0aW9uIGlzIHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIF9hc3NlcnQoXG4gICAgdHlwZW9mIGFzc2VydGlvbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFzc2VydGlvbiA9PT0gJ3VuZGVmaW5lZCcsXG4gICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcbiAgICB7IGFwcE5hbWUgfVxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgVXNlckltcGwgaW1wbGVtZW50cyBVc2VySW50ZXJuYWwge1xuICAvLyBGb3IgdGhlIHVzZXIgb2JqZWN0LCBwcm92aWRlciBpcyBhbHdheXMgRmlyZWJhc2UuXG4gIHJlYWRvbmx5IHByb3ZpZGVySWQgPSBQcm92aWRlcklkLkZJUkVCQVNFO1xuICBzdHNUb2tlbk1hbmFnZXI6IFN0c1Rva2VuTWFuYWdlcjtcbiAgLy8gTGFzdCBrbm93biBhY2Nlc3NUb2tlbiBzbyB3ZSBrbm93IHdoZW4gaXQgY2hhbmdlc1xuICBwcml2YXRlIGFjY2Vzc1Rva2VuOiBzdHJpbmcgfCBudWxsO1xuXG4gIHVpZDogc3RyaW5nO1xuICBhdXRoOiBBdXRoSW50ZXJuYWw7XG4gIGVtYWlsVmVyaWZpZWQ6IGJvb2xlYW47XG4gIGlzQW5vbnltb3VzOiBib29sZWFuO1xuICB0ZW5hbnRJZDogc3RyaW5nIHwgbnVsbDtcbiAgcmVhZG9ubHkgbWV0YWRhdGE6IFVzZXJNZXRhZGF0YTtcbiAgcHJvdmlkZXJEYXRhOiBNdXRhYmxlVXNlckluZm9bXTtcblxuICAvLyBPcHRpb25hbCBmaWVsZHMgZnJvbSBVc2VySW5mb1xuICBkaXNwbGF5TmFtZTogc3RyaW5nIHwgbnVsbDtcbiAgZW1haWw6IHN0cmluZyB8IG51bGw7XG4gIHBob25lTnVtYmVyOiBzdHJpbmcgfCBudWxsO1xuICBwaG90b1VSTDogc3RyaW5nIHwgbnVsbDtcblxuICBfcmVkaXJlY3RFdmVudElkPzogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IHByb2FjdGl2ZVJlZnJlc2ggPSBuZXcgUHJvYWN0aXZlUmVmcmVzaCh0aGlzKTtcblxuICBjb25zdHJ1Y3Rvcih7IHVpZCwgYXV0aCwgc3RzVG9rZW5NYW5hZ2VyLCAuLi5vcHQgfTogVXNlclBhcmFtZXRlcnMpIHtcbiAgICB0aGlzLnVpZCA9IHVpZDtcbiAgICB0aGlzLmF1dGggPSBhdXRoO1xuICAgIHRoaXMuc3RzVG9rZW5NYW5hZ2VyID0gc3RzVG9rZW5NYW5hZ2VyO1xuICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBzdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW47XG4gICAgdGhpcy5kaXNwbGF5TmFtZSA9IG9wdC5kaXNwbGF5TmFtZSB8fCBudWxsO1xuICAgIHRoaXMuZW1haWwgPSBvcHQuZW1haWwgfHwgbnVsbDtcbiAgICB0aGlzLmVtYWlsVmVyaWZpZWQgPSBvcHQuZW1haWxWZXJpZmllZCB8fCBmYWxzZTtcbiAgICB0aGlzLnBob25lTnVtYmVyID0gb3B0LnBob25lTnVtYmVyIHx8IG51bGw7XG4gICAgdGhpcy5waG90b1VSTCA9IG9wdC5waG90b1VSTCB8fCBudWxsO1xuICAgIHRoaXMuaXNBbm9ueW1vdXMgPSBvcHQuaXNBbm9ueW1vdXMgfHwgZmFsc2U7XG4gICAgdGhpcy50ZW5hbnRJZCA9IG9wdC50ZW5hbnRJZCB8fCBudWxsO1xuICAgIHRoaXMucHJvdmlkZXJEYXRhID0gb3B0LnByb3ZpZGVyRGF0YSA/IFsuLi5vcHQucHJvdmlkZXJEYXRhXSA6IFtdO1xuICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgVXNlck1ldGFkYXRhKFxuICAgICAgb3B0LmNyZWF0ZWRBdCB8fCB1bmRlZmluZWQsXG4gICAgICBvcHQubGFzdExvZ2luQXQgfHwgdW5kZWZpbmVkXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldElkVG9rZW4oZm9yY2VSZWZyZXNoPzogYm9vbGVhbik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSBhd2FpdCBfbG9nb3V0SWZJbnZhbGlkYXRlZChcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnN0c1Rva2VuTWFuYWdlci5nZXRUb2tlbih0aGlzLmF1dGgsIGZvcmNlUmVmcmVzaClcbiAgICApO1xuICAgIF9hc3NlcnQoYWNjZXNzVG9rZW4sIHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG5cbiAgICBpZiAodGhpcy5hY2Nlc3NUb2tlbiAhPT0gYWNjZXNzVG9rZW4pIHtcbiAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICAgIGF3YWl0IHRoaXMuYXV0aC5fcGVyc2lzdFVzZXJJZkN1cnJlbnQodGhpcyk7XG4gICAgICB0aGlzLmF1dGguX25vdGlmeUxpc3RlbmVyc0lmQ3VycmVudCh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjZXNzVG9rZW47XG4gIH1cblxuICBnZXRJZFRva2VuUmVzdWx0KGZvcmNlUmVmcmVzaD86IGJvb2xlYW4pOiBQcm9taXNlPElkVG9rZW5SZXN1bHQ+IHtcbiAgICByZXR1cm4gZ2V0SWRUb2tlblJlc3VsdCh0aGlzLCBmb3JjZVJlZnJlc2gpO1xuICB9XG5cbiAgcmVsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiByZWxvYWQodGhpcyk7XG4gIH1cblxuICBwcml2YXRlIHJlbG9hZFVzZXJJbmZvOiBBUElVc2VySW5mbyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHJlbG9hZExpc3RlbmVyOiBOZXh0Rm48QVBJVXNlckluZm8+IHwgbnVsbCA9IG51bGw7XG5cbiAgX2Fzc2lnbih1c2VyOiBVc2VySW50ZXJuYWwpOiB2b2lkIHtcbiAgICBpZiAodGhpcyA9PT0gdXNlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfYXNzZXJ0KHRoaXMudWlkID09PSB1c2VyLnVpZCwgdGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICB0aGlzLmRpc3BsYXlOYW1lID0gdXNlci5kaXNwbGF5TmFtZTtcbiAgICB0aGlzLnBob3RvVVJMID0gdXNlci5waG90b1VSTDtcbiAgICB0aGlzLmVtYWlsID0gdXNlci5lbWFpbDtcbiAgICB0aGlzLmVtYWlsVmVyaWZpZWQgPSB1c2VyLmVtYWlsVmVyaWZpZWQ7XG4gICAgdGhpcy5waG9uZU51bWJlciA9IHVzZXIucGhvbmVOdW1iZXI7XG4gICAgdGhpcy5pc0Fub255bW91cyA9IHVzZXIuaXNBbm9ueW1vdXM7XG4gICAgdGhpcy50ZW5hbnRJZCA9IHVzZXIudGVuYW50SWQ7XG4gICAgdGhpcy5wcm92aWRlckRhdGEgPSB1c2VyLnByb3ZpZGVyRGF0YS5tYXAodXNlckluZm8gPT4gKHsgLi4udXNlckluZm8gfSkpO1xuICAgIHRoaXMubWV0YWRhdGEuX2NvcHkodXNlci5tZXRhZGF0YSk7XG4gICAgdGhpcy5zdHNUb2tlbk1hbmFnZXIuX2Fzc2lnbih1c2VyLnN0c1Rva2VuTWFuYWdlcik7XG4gIH1cblxuICBfY2xvbmUoYXV0aDogQXV0aEludGVybmFsKTogVXNlckludGVybmFsIHtcbiAgICBjb25zdCBuZXdVc2VyID0gbmV3IFVzZXJJbXBsKHtcbiAgICAgIC4uLnRoaXMsXG4gICAgICBhdXRoLFxuICAgICAgc3RzVG9rZW5NYW5hZ2VyOiB0aGlzLnN0c1Rva2VuTWFuYWdlci5fY2xvbmUoKVxuICAgIH0pO1xuICAgIG5ld1VzZXIubWV0YWRhdGEuX2NvcHkodGhpcy5tZXRhZGF0YSk7XG4gICAgcmV0dXJuIG5ld1VzZXI7XG4gIH1cblxuICBfb25SZWxvYWQoY2FsbGJhY2s6IE5leHRGbjxBUElVc2VySW5mbz4pOiB2b2lkIHtcbiAgICAvLyBUaGVyZSBzaG91bGQgb25seSBldmVyIGJlIG9uZSBsaXN0ZW5lciwgYW5kIHRoYXQgaXMgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgTXVsdGlGYWN0b3JVc2VyXG4gICAgX2Fzc2VydCghdGhpcy5yZWxvYWRMaXN0ZW5lciwgdGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICB0aGlzLnJlbG9hZExpc3RlbmVyID0gY2FsbGJhY2s7XG4gICAgaWYgKHRoaXMucmVsb2FkVXNlckluZm8pIHtcbiAgICAgIHRoaXMuX25vdGlmeVJlbG9hZExpc3RlbmVyKHRoaXMucmVsb2FkVXNlckluZm8pO1xuICAgICAgdGhpcy5yZWxvYWRVc2VySW5mbyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgX25vdGlmeVJlbG9hZExpc3RlbmVyKHVzZXJJbmZvOiBBUElVc2VySW5mbyk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJlbG9hZExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnJlbG9hZExpc3RlbmVyKHVzZXJJbmZvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm8gbGlzdGVuZXIgaXMgc3Vic2NyaWJlZCB5ZXQsIHNhdmUgdGhlIHJlc3VsdCBzbyBpdCdzIGF2YWlsYWJsZSB3aGVuIHRoZXkgZG8gc3Vic2NyaWJlXG4gICAgICB0aGlzLnJlbG9hZFVzZXJJbmZvID0gdXNlckluZm87XG4gICAgfVxuICB9XG5cbiAgX3N0YXJ0UHJvYWN0aXZlUmVmcmVzaCgpOiB2b2lkIHtcbiAgICB0aGlzLnByb2FjdGl2ZVJlZnJlc2guX3N0YXJ0KCk7XG4gIH1cblxuICBfc3RvcFByb2FjdGl2ZVJlZnJlc2goKTogdm9pZCB7XG4gICAgdGhpcy5wcm9hY3RpdmVSZWZyZXNoLl9zdG9wKCk7XG4gIH1cblxuICBhc3luYyBfdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkoXG4gICAgcmVzcG9uc2U6IElkVG9rZW5SZXNwb25zZSB8IEZpbmFsaXplTWZhUmVzcG9uc2UsXG4gICAgcmVsb2FkID0gZmFsc2VcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbGV0IHRva2Vuc1JlZnJlc2hlZCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAgIHJlc3BvbnNlLmlkVG9rZW4gJiZcbiAgICAgIHJlc3BvbnNlLmlkVG9rZW4gIT09IHRoaXMuc3RzVG9rZW5NYW5hZ2VyLmFjY2Vzc1Rva2VuXG4gICAgKSB7XG4gICAgICB0aGlzLnN0c1Rva2VuTWFuYWdlci51cGRhdGVGcm9tU2VydmVyUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgdG9rZW5zUmVmcmVzaGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocmVsb2FkKSB7XG4gICAgICBhd2FpdCBfcmVsb2FkV2l0aG91dFNhdmluZyh0aGlzKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmF1dGguX3BlcnNpc3RVc2VySWZDdXJyZW50KHRoaXMpO1xuICAgIGlmICh0b2tlbnNSZWZyZXNoZWQpIHtcbiAgICAgIHRoaXMuYXV0aC5fbm90aWZ5TGlzdGVuZXJzSWZDdXJyZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpZFRva2VuID0gYXdhaXQgdGhpcy5nZXRJZFRva2VuKCk7XG4gICAgYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQodGhpcywgZGVsZXRlQWNjb3VudCh0aGlzLmF1dGgsIHsgaWRUb2tlbiB9KSk7XG4gICAgdGhpcy5zdHNUb2tlbk1hbmFnZXIuY2xlYXJSZWZyZXNoVG9rZW4oKTtcblxuICAgIC8vIFRPRE86IERldGVybWluZSBpZiBjYW5jZWxsYWJsZS1wcm9taXNlcyBhcmUgbmVjZXNzYXJ5IHRvIHVzZSBpbiB0aGlzIGNsYXNzIHNvIHRoYXQgZGVsZXRlKClcbiAgICAvLyAgICAgICBjYW5jZWxzIHBlbmRpbmcgYWN0aW9ucy4uLlxuXG4gICAgcmV0dXJuIHRoaXMuYXV0aC5zaWduT3V0KCk7XG4gIH1cblxuICB0b0pTT04oKTogUGVyc2lzdGVkQmxvYiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpZDogdGhpcy51aWQsXG4gICAgICBlbWFpbDogdGhpcy5lbWFpbCB8fCB1bmRlZmluZWQsXG4gICAgICBlbWFpbFZlcmlmaWVkOiB0aGlzLmVtYWlsVmVyaWZpZWQsXG4gICAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZSB8fCB1bmRlZmluZWQsXG4gICAgICBpc0Fub255bW91czogdGhpcy5pc0Fub255bW91cyxcbiAgICAgIHBob3RvVVJMOiB0aGlzLnBob3RvVVJMIHx8IHVuZGVmaW5lZCxcbiAgICAgIHBob25lTnVtYmVyOiB0aGlzLnBob25lTnVtYmVyIHx8IHVuZGVmaW5lZCxcbiAgICAgIHRlbmFudElkOiB0aGlzLnRlbmFudElkIHx8IHVuZGVmaW5lZCxcbiAgICAgIHByb3ZpZGVyRGF0YTogdGhpcy5wcm92aWRlckRhdGEubWFwKHVzZXJJbmZvID0+ICh7IC4uLnVzZXJJbmZvIH0pKSxcbiAgICAgIHN0c1Rva2VuTWFuYWdlcjogdGhpcy5zdHNUb2tlbk1hbmFnZXIudG9KU09OKCksXG4gICAgICAvLyBSZWRpcmVjdCBldmVudCBJRCBtdXN0IGJlIG1haW50YWluZWQgaW4gY2FzZSB0aGVyZSBpcyBhIHBlbmRpbmdcbiAgICAgIC8vIHJlZGlyZWN0IGV2ZW50LlxuICAgICAgX3JlZGlyZWN0RXZlbnRJZDogdGhpcy5fcmVkaXJlY3RFdmVudElkLFxuICAgICAgLi4udGhpcy5tZXRhZGF0YS50b0pTT04oKSxcblxuICAgICAgLy8gUmVxdWlyZWQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgbGVnYWN5IFNESyAoZ28vZmlyZWJhc2UtYXV0aC1zZGstcGVyc2lzdGVuY2UtcGFyc2luZyk6XG4gICAgICBhcGlLZXk6IHRoaXMuYXV0aC5jb25maWcuYXBpS2V5LFxuICAgICAgYXBwTmFtZTogdGhpcy5hdXRoLm5hbWVcbiAgICAgIC8vIE1pc3NpbmcgYXV0aERvbWFpbiB3aWxsIGJlIHRvbGVyYXRlZCBieSB0aGUgbGVnYWN5IFNESy5cbiAgICAgIC8vIHN0c1Rva2VuTWFuYWdlci5hcGlLZXkgaXNuJ3QgYWN0dWFsbHkgcmVxdWlyZWQgKGRlc3BpdGUgdGhlIGxlZ2FjeSBTREsgcGVyc2lzdGluZyBpdCkuXG4gICAgfTtcbiAgfVxuXG4gIGdldCByZWZyZXNoVG9rZW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zdHNUb2tlbk1hbmFnZXIucmVmcmVzaFRva2VuIHx8ICcnO1xuICB9XG5cbiAgc3RhdGljIF9mcm9tSlNPTihhdXRoOiBBdXRoSW50ZXJuYWwsIG9iamVjdDogUGVyc2lzdGVkQmxvYik6IFVzZXJJbnRlcm5hbCB7XG4gICAgY29uc3QgZGlzcGxheU5hbWUgPSBvYmplY3QuZGlzcGxheU5hbWUgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGVtYWlsID0gb2JqZWN0LmVtYWlsID8/IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwaG9uZU51bWJlciA9IG9iamVjdC5waG9uZU51bWJlciA/PyB1bmRlZmluZWQ7XG4gICAgY29uc3QgcGhvdG9VUkwgPSBvYmplY3QucGhvdG9VUkwgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHRlbmFudElkID0gb2JqZWN0LnRlbmFudElkID8/IHVuZGVmaW5lZDtcbiAgICBjb25zdCBfcmVkaXJlY3RFdmVudElkID0gb2JqZWN0Ll9yZWRpcmVjdEV2ZW50SWQgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGNyZWF0ZWRBdCA9IG9iamVjdC5jcmVhdGVkQXQgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGxhc3RMb2dpbkF0ID0gb2JqZWN0Lmxhc3RMb2dpbkF0ID8/IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7XG4gICAgICB1aWQsXG4gICAgICBlbWFpbFZlcmlmaWVkLFxuICAgICAgaXNBbm9ueW1vdXMsXG4gICAgICBwcm92aWRlckRhdGEsXG4gICAgICBzdHNUb2tlbk1hbmFnZXI6IHBsYWluT2JqZWN0VG9rZW5NYW5hZ2VyXG4gICAgfSA9IG9iamVjdDtcblxuICAgIF9hc3NlcnQodWlkICYmIHBsYWluT2JqZWN0VG9rZW5NYW5hZ2VyLCBhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcblxuICAgIGNvbnN0IHN0c1Rva2VuTWFuYWdlciA9IFN0c1Rva2VuTWFuYWdlci5mcm9tSlNPTihcbiAgICAgIHRoaXMubmFtZSxcbiAgICAgIHBsYWluT2JqZWN0VG9rZW5NYW5hZ2VyIGFzIFBlcnNpc3RlZEJsb2JcbiAgICApO1xuXG4gICAgX2Fzc2VydCh0eXBlb2YgdWlkID09PSAnc3RyaW5nJywgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoZGlzcGxheU5hbWUsIGF1dGgubmFtZSk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoZW1haWwsIGF1dGgubmFtZSk7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBlbWFpbFZlcmlmaWVkID09PSAnYm9vbGVhbicsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBpc0Fub255bW91cyA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICApO1xuICAgIGFzc2VydFN0cmluZ09yVW5kZWZpbmVkKHBob25lTnVtYmVyLCBhdXRoLm5hbWUpO1xuICAgIGFzc2VydFN0cmluZ09yVW5kZWZpbmVkKHBob3RvVVJMLCBhdXRoLm5hbWUpO1xuICAgIGFzc2VydFN0cmluZ09yVW5kZWZpbmVkKHRlbmFudElkLCBhdXRoLm5hbWUpO1xuICAgIGFzc2VydFN0cmluZ09yVW5kZWZpbmVkKF9yZWRpcmVjdEV2ZW50SWQsIGF1dGgubmFtZSk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoY3JlYXRlZEF0LCBhdXRoLm5hbWUpO1xuICAgIGFzc2VydFN0cmluZ09yVW5kZWZpbmVkKGxhc3RMb2dpbkF0LCBhdXRoLm5hbWUpO1xuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlckltcGwoe1xuICAgICAgdWlkLFxuICAgICAgYXV0aCxcbiAgICAgIGVtYWlsLFxuICAgICAgZW1haWxWZXJpZmllZCxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgaXNBbm9ueW1vdXMsXG4gICAgICBwaG90b1VSTCxcbiAgICAgIHBob25lTnVtYmVyLFxuICAgICAgdGVuYW50SWQsXG4gICAgICBzdHNUb2tlbk1hbmFnZXIsXG4gICAgICBjcmVhdGVkQXQsXG4gICAgICBsYXN0TG9naW5BdFxuICAgIH0pO1xuXG4gICAgaWYgKHByb3ZpZGVyRGF0YSAmJiBBcnJheS5pc0FycmF5KHByb3ZpZGVyRGF0YSkpIHtcbiAgICAgIHVzZXIucHJvdmlkZXJEYXRhID0gcHJvdmlkZXJEYXRhLm1hcCh1c2VySW5mbyA9PiAoeyAuLi51c2VySW5mbyB9KSk7XG4gICAgfVxuXG4gICAgaWYgKF9yZWRpcmVjdEV2ZW50SWQpIHtcbiAgICAgIHVzZXIuX3JlZGlyZWN0RXZlbnRJZCA9IF9yZWRpcmVjdEV2ZW50SWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzZXI7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhIFVzZXIgZnJvbSBhbiBpZFRva2VuIHNlcnZlciByZXNwb25zZVxuICAgKiBAcGFyYW0gYXV0aFxuICAgKiBAcGFyYW0gaWRUb2tlblJlc3BvbnNlXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgX2Zyb21JZFRva2VuUmVzcG9uc2UoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGlkVG9rZW5SZXNwb25zZTogSWRUb2tlblJlc3BvbnNlLFxuICAgIGlzQW5vbnltb3VzOiBib29sZWFuID0gZmFsc2VcbiAgKTogUHJvbWlzZTxVc2VySW50ZXJuYWw+IHtcbiAgICBjb25zdCBzdHNUb2tlbk1hbmFnZXIgPSBuZXcgU3RzVG9rZW5NYW5hZ2VyKCk7XG4gICAgc3RzVG9rZW5NYW5hZ2VyLnVwZGF0ZUZyb21TZXJ2ZXJSZXNwb25zZShpZFRva2VuUmVzcG9uc2UpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgRmlyZWJhc2UgQXV0aCB1c2VyLlxuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlckltcGwoe1xuICAgICAgdWlkOiBpZFRva2VuUmVzcG9uc2UubG9jYWxJZCxcbiAgICAgIGF1dGgsXG4gICAgICBzdHNUb2tlbk1hbmFnZXIsXG4gICAgICBpc0Fub255bW91c1xuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlcyB0aGUgdXNlciBpbmZvIGFuZCBkYXRhIGFuZCByZXNvbHZlcyB3aXRoIGEgdXNlciBpbnN0YW5jZS5cbiAgICBhd2FpdCBfcmVsb2FkV2l0aG91dFNhdmluZyh1c2VyKTtcbiAgICByZXR1cm4gdXNlcjtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgZGVidWdBc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5cbi8qKlxuICogT3VyIEFQSSBoYXMgYSBsb3Qgb2Ygb25lLW9mZiBjb25zdGFudHMgdGhhdCBhcmUgdXNlZCB0byBkbyB0aGluZ3MuXG4gKiBVbmZvcnR1bmF0ZWx5IHdlIGNhbid0IGV4cG9ydCB0aGVzZSBhcyBjbGFzc2VzIGluc3RhbnRpYXRlZCBkaXJlY3RseSBzaW5jZVxuICogdGhlIGNvbnN0cnVjdG9yIG1heSBzaWRlIGVmZmVjdCBhbmQgdGhlcmVmb3JlIGNhbid0IGJlIHByb3ZlbiB0byBiZSBzYWZlbHlcbiAqIGN1bGxlZC4gSW5zdGVhZCwgd2UgZXhwb3J0IHRoZXNlIGNsYXNzZXMgdGhlbXNlbHZlcyBhcyBhIGxvd2VyQ2FtZWxDYXNlXG4gKiBjb25zdGFudCwgYW5kIGluc3RhbnRpYXRlIHRoZW0gdW5kZXIgdGhlIGhvb2QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2luZ2xldG9uSW5zdGFudGlhdG9yPFQ+IHtcbiAgbmV3ICgpOiBUO1xufVxuXG5jb25zdCBpbnN0YW5jZUNhY2hlOiBNYXA8dW5rbm93biwgdW5rbm93bj4gPSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0SW5zdGFuY2U8VD4oY2xzOiB1bmtub3duKTogVCB7XG4gIGRlYnVnQXNzZXJ0KGNscyBpbnN0YW5jZW9mIEZ1bmN0aW9uLCAnRXhwZWN0ZWQgYSBjbGFzcyBkZWZpbml0aW9uJyk7XG4gIGxldCBpbnN0YW5jZSA9IGluc3RhbmNlQ2FjaGUuZ2V0KGNscykgYXMgVCB8IHVuZGVmaW5lZDtcblxuICBpZiAoaW5zdGFuY2UpIHtcbiAgICBkZWJ1Z0Fzc2VydChcbiAgICAgIGluc3RhbmNlIGluc3RhbmNlb2YgY2xzLFxuICAgICAgJ0luc3RhbmNlIHN0b3JlZCBpbiBjYWNoZSBtaXNtYXRjaGVkIHdpdGggY2xhc3MnXG4gICAgKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cblxuICBpbnN0YW5jZSA9IG5ldyAoY2xzIGFzIFNpbmdsZXRvbkluc3RhbnRpYXRvcjxUPikoKTtcbiAgaW5zdGFuY2VDYWNoZS5zZXQoY2xzLCBpbnN0YW5jZSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jbGVhckluc3RhbmNlTWFwKCk6IHZvaWQge1xuICBpbnN0YW5jZUNhY2hlLmNsZWFyKCk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQZXJzaXN0ZW5jZSB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7XG4gIFBlcnNpc3RlbmNlSW50ZXJuYWwsXG4gIFBlcnNpc3RlbmNlVHlwZSxcbiAgUGVyc2lzdGVuY2VWYWx1ZSxcbiAgU3RvcmFnZUV2ZW50TGlzdGVuZXJcbn0gZnJvbSAnLi4vcGVyc2lzdGVuY2UnO1xuXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlQZXJzaXN0ZW5jZSBpbXBsZW1lbnRzIFBlcnNpc3RlbmNlSW50ZXJuYWwge1xuICBzdGF0aWMgdHlwZTogJ05PTkUnID0gJ05PTkUnO1xuICByZWFkb25seSB0eXBlID0gUGVyc2lzdGVuY2VUeXBlLk5PTkU7XG4gIHN0b3JhZ2U6IFJlY29yZDxzdHJpbmcsIFBlcnNpc3RlbmNlVmFsdWU+ID0ge307XG5cbiAgYXN5bmMgX2lzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgX3NldChrZXk6IHN0cmluZywgdmFsdWU6IFBlcnNpc3RlbmNlVmFsdWUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgYXN5bmMgX2dldDxUIGV4dGVuZHMgUGVyc2lzdGVuY2VWYWx1ZT4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0b3JhZ2Vba2V5XTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAodmFsdWUgYXMgVCk7XG4gIH1cblxuICBhc3luYyBfcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZGVsZXRlIHRoaXMuc3RvcmFnZVtrZXldO1xuICB9XG5cbiAgX2FkZExpc3RlbmVyKF9rZXk6IHN0cmluZywgX2xpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIC8vIExpc3RlbmVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgaW4tbWVtb3J5IHN0b3JhZ2Ugc2luY2UgaXQgY2Fubm90IGJlIHNoYXJlZCBhY3Jvc3Mgd2luZG93cy93b3JrZXJzXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3JlbW92ZUxpc3RlbmVyKF9rZXk6IHN0cmluZywgX2xpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIC8vIExpc3RlbmVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgaW4tbWVtb3J5IHN0b3JhZ2Ugc2luY2UgaXQgY2Fubm90IGJlIHNoYXJlZCBhY3Jvc3Mgd2luZG93cy93b3JrZXJzXG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlfSBvZiB0eXBlICdOT05FJy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBpbk1lbW9yeVBlcnNpc3RlbmNlOiBQZXJzaXN0ZW5jZSA9IEluTWVtb3J5UGVyc2lzdGVuY2U7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBcGlLZXksIEFwcE5hbWUsIEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBQZXJzaXN0ZWRCbG9iLCBQZXJzaXN0ZW5jZUludGVybmFsIH0gZnJvbSAnLi4vcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHsgVXNlckltcGwgfSBmcm9tICcuLi91c2VyL3VzZXJfaW1wbCc7XG5pbXBvcnQgeyBfZ2V0SW5zdGFuY2UgfSBmcm9tICcuLi91dGlsL2luc3RhbnRpYXRvcic7XG5pbXBvcnQgeyBpbk1lbW9yeVBlcnNpc3RlbmNlIH0gZnJvbSAnLi9pbl9tZW1vcnknO1xuXG5leHBvcnQgY29uc3QgZW51bSBLZXlOYW1lIHtcbiAgQVVUSF9VU0VSID0gJ2F1dGhVc2VyJyxcbiAgQVVUSF9FVkVOVCA9ICdhdXRoRXZlbnQnLFxuICBSRURJUkVDVF9VU0VSID0gJ3JlZGlyZWN0VXNlcicsXG4gIFBFUlNJU1RFTkNFX1VTRVIgPSAncGVyc2lzdGVuY2UnXG59XG5leHBvcnQgY29uc3QgZW51bSBOYW1lc3BhY2Uge1xuICBQRVJTSVNURU5DRSA9ICdmaXJlYmFzZSdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9wZXJzaXN0ZW5jZUtleU5hbWUoXG4gIGtleTogc3RyaW5nLFxuICBhcGlLZXk6IEFwaUtleSxcbiAgYXBwTmFtZTogQXBwTmFtZVxuKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke05hbWVzcGFjZS5QRVJTSVNURU5DRX06JHtrZXl9OiR7YXBpS2V5fToke2FwcE5hbWV9YDtcbn1cblxuZXhwb3J0IGNsYXNzIFBlcnNpc3RlbmNlVXNlck1hbmFnZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGZ1bGxVc2VyS2V5OiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgZnVsbFBlcnNpc3RlbmNlS2V5OiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgYm91bmRFdmVudEhhbmRsZXI6ICgpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGVyc2lzdGVuY2U6IFBlcnNpc3RlbmNlSW50ZXJuYWwsXG4gICAgcHJpdmF0ZSByZWFkb25seSBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgcHJpdmF0ZSByZWFkb25seSB1c2VyS2V5OiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3QgeyBjb25maWcsIG5hbWUgfSA9IHRoaXMuYXV0aDtcbiAgICB0aGlzLmZ1bGxVc2VyS2V5ID0gX3BlcnNpc3RlbmNlS2V5TmFtZSh0aGlzLnVzZXJLZXksIGNvbmZpZy5hcGlLZXksIG5hbWUpO1xuICAgIHRoaXMuZnVsbFBlcnNpc3RlbmNlS2V5ID0gX3BlcnNpc3RlbmNlS2V5TmFtZShcbiAgICAgIEtleU5hbWUuUEVSU0lTVEVOQ0VfVVNFUixcbiAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgICBuYW1lXG4gICAgKTtcbiAgICB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyID0gYXV0aC5fb25TdG9yYWdlRXZlbnQuYmluZChhdXRoKTtcbiAgICB0aGlzLnBlcnNpc3RlbmNlLl9hZGRMaXN0ZW5lcih0aGlzLmZ1bGxVc2VyS2V5LCB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyKTtcbiAgfVxuXG4gIHNldEN1cnJlbnRVc2VyKHVzZXI6IFVzZXJJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLl9zZXQodGhpcy5mdWxsVXNlcktleSwgdXNlci50b0pTT04oKSk7XG4gIH1cblxuICBhc3luYyBnZXRDdXJyZW50VXNlcigpOiBQcm9taXNlPFVzZXJJbnRlcm5hbCB8IG51bGw+IHtcbiAgICBjb25zdCBibG9iID0gYXdhaXQgdGhpcy5wZXJzaXN0ZW5jZS5fZ2V0PFBlcnNpc3RlZEJsb2I+KHRoaXMuZnVsbFVzZXJLZXkpO1xuICAgIHJldHVybiBibG9iID8gVXNlckltcGwuX2Zyb21KU09OKHRoaXMuYXV0aCwgYmxvYikgOiBudWxsO1xuICB9XG5cbiAgcmVtb3ZlQ3VycmVudFVzZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuX3JlbW92ZSh0aGlzLmZ1bGxVc2VyS2V5KTtcbiAgfVxuXG4gIHNhdmVQZXJzaXN0ZW5jZUZvclJlZGlyZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlLl9zZXQoXG4gICAgICB0aGlzLmZ1bGxQZXJzaXN0ZW5jZUtleSxcbiAgICAgIHRoaXMucGVyc2lzdGVuY2UudHlwZVxuICAgICk7XG4gIH1cblxuICBhc3luYyBzZXRQZXJzaXN0ZW5jZShuZXdQZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2VJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLnBlcnNpc3RlbmNlID09PSBuZXdQZXJzaXN0ZW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gYXdhaXQgdGhpcy5nZXRDdXJyZW50VXNlcigpO1xuICAgIGF3YWl0IHRoaXMucmVtb3ZlQ3VycmVudFVzZXIoKTtcblxuICAgIHRoaXMucGVyc2lzdGVuY2UgPSBuZXdQZXJzaXN0ZW5jZTtcblxuICAgIGlmIChjdXJyZW50VXNlcikge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudFVzZXIoY3VycmVudFVzZXIpO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnBlcnNpc3RlbmNlLl9yZW1vdmVMaXN0ZW5lcih0aGlzLmZ1bGxVc2VyS2V5LCB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIHBlcnNpc3RlbmNlSGllcmFyY2h5OiBQZXJzaXN0ZW5jZUludGVybmFsW10sXG4gICAgdXNlcktleSA9IEtleU5hbWUuQVVUSF9VU0VSXG4gICk6IFByb21pc2U8UGVyc2lzdGVuY2VVc2VyTWFuYWdlcj4ge1xuICAgIGlmICghcGVyc2lzdGVuY2VIaWVyYXJjaHkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIoXG4gICAgICAgIF9nZXRJbnN0YW5jZShpbk1lbW9yeVBlcnNpc3RlbmNlKSxcbiAgICAgICAgYXV0aCxcbiAgICAgICAgdXNlcktleVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBFbGltaW5hdGUgYW55IHBlcnNpc3RlbmNlcyB0aGF0IGFyZSBub3QgYXZhaWxhYmxlXG4gICAgY29uc3QgYXZhaWxhYmxlUGVyc2lzdGVuY2VzID0gKFxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHBlcnNpc3RlbmNlSGllcmFyY2h5Lm1hcChhc3luYyBwZXJzaXN0ZW5jZSA9PiB7XG4gICAgICAgICAgaWYgKGF3YWl0IHBlcnNpc3RlbmNlLl9pc0F2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyc2lzdGVuY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKS5maWx0ZXIocGVyc2lzdGVuY2UgPT4gcGVyc2lzdGVuY2UpIGFzIFBlcnNpc3RlbmNlSW50ZXJuYWxbXTtcblxuICAgIC8vIEZhbGwgYmFjayB0byB0aGUgZmlyc3QgcGVyc2lzdGVuY2UgbGlzdGVkLCBvciBpbiBtZW1vcnkgaWYgbm9uZSBhdmFpbGFibGVcbiAgICBsZXQgc2VsZWN0ZWRQZXJzaXN0ZW5jZSA9XG4gICAgICBhdmFpbGFibGVQZXJzaXN0ZW5jZXNbMF0gfHxcbiAgICAgIF9nZXRJbnN0YW5jZTxQZXJzaXN0ZW5jZUludGVybmFsPihpbk1lbW9yeVBlcnNpc3RlbmNlKTtcblxuICAgIGNvbnN0IGtleSA9IF9wZXJzaXN0ZW5jZUtleU5hbWUodXNlcktleSwgYXV0aC5jb25maWcuYXBpS2V5LCBhdXRoLm5hbWUpO1xuXG4gICAgLy8gUHVsbCBvdXQgdGhlIGV4aXN0aW5nIHVzZXIsIHNldHRpbmcgdGhlIGNob3NlbiBwZXJzaXN0ZW5jZSB0byB0aGF0XG4gICAgLy8gcGVyc2lzdGVuY2UgaWYgdGhlIHVzZXIgZXhpc3RzLlxuICAgIGxldCB1c2VyVG9NaWdyYXRlOiBVc2VySW50ZXJuYWwgfCBudWxsID0gbnVsbDtcbiAgICAvLyBOb3RlLCBoZXJlIHdlIGNoZWNrIGZvciBhIHVzZXIgaW4gX2FsbF8gcGVyc2lzdGVuY2VzLCBub3QganVzdCB0aGVcbiAgICAvLyBvbmVzIGRlZW1lZCBhdmFpbGFibGUuIElmIHdlIGNhbiBtaWdyYXRlIGEgdXNlciBvdXQgb2YgYSBicm9rZW5cbiAgICAvLyBwZXJzaXN0ZW5jZSwgd2Ugd2lsbCAoYnV0IG9ubHkgaWYgdGhhdCBwZXJzaXN0ZW5jZSBzdXBwb3J0cyBtaWdyYXRpb24pLlxuICAgIGZvciAoY29uc3QgcGVyc2lzdGVuY2Ugb2YgcGVyc2lzdGVuY2VIaWVyYXJjaHkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCBwZXJzaXN0ZW5jZS5fZ2V0PFBlcnNpc3RlZEJsb2I+KGtleSk7XG4gICAgICAgIGlmIChibG9iKSB7XG4gICAgICAgICAgY29uc3QgdXNlciA9IFVzZXJJbXBsLl9mcm9tSlNPTihhdXRoLCBibG9iKTsgLy8gdGhyb3dzIGZvciB1bnBhcnNhYmxlIGJsb2IgKHdyb25nIGZvcm1hdClcbiAgICAgICAgICBpZiAocGVyc2lzdGVuY2UgIT09IHNlbGVjdGVkUGVyc2lzdGVuY2UpIHtcbiAgICAgICAgICAgIHVzZXJUb01pZ3JhdGUgPSB1c2VyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3RlZFBlcnNpc3RlbmNlID0gcGVyc2lzdGVuY2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2gge31cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBmaW5kIHRoZSB1c2VyIGluIGEgcGVyc2lzdGVuY2UgdGhhdCBkb2VzIHN1cHBvcnQgbWlncmF0aW9uLCB1c2VcbiAgICAvLyB0aGF0IG1pZ3JhdGlvbiBwYXRoIChvZiBvbmx5IHBlcnNpc3RlbmNlcyB0aGF0IHN1cHBvcnQgbWlncmF0aW9uKVxuICAgIGNvbnN0IG1pZ3JhdGlvbkhpZXJhcmNoeSA9IGF2YWlsYWJsZVBlcnNpc3RlbmNlcy5maWx0ZXIoXG4gICAgICBwID0+IHAuX3Nob3VsZEFsbG93TWlncmF0aW9uXG4gICAgKTtcblxuICAgIC8vIElmIHRoZSBwZXJzaXN0ZW5jZSBkb2VzIF9ub3RfIGFsbG93IG1pZ3JhdGlvbiwganVzdCBmaW5pc2ggb2ZmIGhlcmVcbiAgICBpZiAoXG4gICAgICAhc2VsZWN0ZWRQZXJzaXN0ZW5jZS5fc2hvdWxkQWxsb3dNaWdyYXRpb24gfHxcbiAgICAgICFtaWdyYXRpb25IaWVyYXJjaHkubGVuZ3RoXG4gICAgKSB7XG4gICAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIoc2VsZWN0ZWRQZXJzaXN0ZW5jZSwgYXV0aCwgdXNlcktleSk7XG4gICAgfVxuXG4gICAgc2VsZWN0ZWRQZXJzaXN0ZW5jZSA9IG1pZ3JhdGlvbkhpZXJhcmNoeVswXTtcbiAgICBpZiAodXNlclRvTWlncmF0ZSkge1xuICAgICAgLy8gVGhpcyBub3JtYWxseSBzaG91bGRuJ3QgdGhyb3cgc2luY2UgY2hvc2VuUGVyc2lzdGVuY2UuaXNBdmFpbGFibGUoKSBpcyB0cnVlLCBidXQgaWYgaXQgZG9lc1xuICAgICAgLy8gd2UnbGwganVzdCBsZXQgaXQgYnViYmxlIHRvIHN1cmZhY2UgdGhlIGVycm9yLlxuICAgICAgYXdhaXQgc2VsZWN0ZWRQZXJzaXN0ZW5jZS5fc2V0KGtleSwgdXNlclRvTWlncmF0ZS50b0pTT04oKSk7XG4gICAgfVxuXG4gICAgLy8gQXR0ZW1wdCB0byBjbGVhciB0aGUga2V5IGluIG90aGVyIHBlcnNpc3RlbmNlcyBidXQgaWdub3JlIGVycm9ycy4gVGhpcyBoZWxwcyBwcmV2ZW50IGlzc3Vlc1xuICAgIC8vIHN1Y2ggYXMgdXNlcnMgZ2V0dGluZyBzdHVjayB3aXRoIGEgcHJldmlvdXMgYWNjb3VudCBhZnRlciBzaWduaW5nIG91dCBhbmQgcmVmcmVzaGluZyB0aGUgdGFiLlxuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgcGVyc2lzdGVuY2VIaWVyYXJjaHkubWFwKGFzeW5jIHBlcnNpc3RlbmNlID0+IHtcbiAgICAgICAgaWYgKHBlcnNpc3RlbmNlICE9PSBzZWxlY3RlZFBlcnNpc3RlbmNlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHBlcnNpc3RlbmNlLl9yZW1vdmUoa2V5KTtcbiAgICAgICAgICB9IGNhdGNoIHt9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIoc2VsZWN0ZWRQZXJzaXN0ZW5jZSwgYXV0aCwgdXNlcktleSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGlzSUUsIGdldFVBIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbnRlcmZhY2UgTmF2aWdhdG9yU3RhbmRhbG9uZSBleHRlbmRzIE5hdmlnYXRvciB7XG4gIHN0YW5kYWxvbmU/OiB1bmtub3duO1xufVxuXG5pbnRlcmZhY2UgRG9jdW1lbnQge1xuICBkb2N1bWVudE1vZGU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogRW51bXMgZm9yIEJyb3dzZXIgbmFtZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQnJvd3Nlck5hbWUge1xuICBBTkRST0lEID0gJ0FuZHJvaWQnLFxuICBCTEFDS0JFUlJZID0gJ0JsYWNrYmVycnknLFxuICBFREdFID0gJ0VkZ2UnLFxuICBGSVJFRk9YID0gJ0ZpcmVmb3gnLFxuICBJRSA9ICdJRScsXG4gIElFTU9CSUxFID0gJ0lFTW9iaWxlJyxcbiAgT1BFUkEgPSAnT3BlcmEnLFxuICBPVEhFUiA9ICdPdGhlcicsXG4gIENIUk9NRSA9ICdDaHJvbWUnLFxuICBTQUZBUkkgPSAnU2FmYXJpJyxcbiAgU0lMSyA9ICdTaWxrJyxcbiAgV0VCT1MgPSAnV2Vib3MnXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBicm93c2VyIGZvciB0aGUgcHVycG9zZXMgb2YgcmVwb3J0aW5nIHVzYWdlIHRvIHRoZSBBUElcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9nZXRCcm93c2VyTmFtZSh1c2VyQWdlbnQ6IHN0cmluZyk6IEJyb3dzZXJOYW1lIHwgc3RyaW5nIHtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgaWYgKHVhLmluY2x1ZGVzKCdvcGVyYS8nKSB8fCB1YS5pbmNsdWRlcygnb3ByLycpIHx8IHVhLmluY2x1ZGVzKCdvcGlvcy8nKSkge1xuICAgIHJldHVybiBCcm93c2VyTmFtZS5PUEVSQTtcbiAgfSBlbHNlIGlmIChfaXNJRU1vYmlsZSh1YSkpIHtcbiAgICAvLyBXaW5kb3dzIHBob25lIElFTW9iaWxlIGJyb3dzZXIuXG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLklFTU9CSUxFO1xuICB9IGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdtc2llJykgfHwgdWEuaW5jbHVkZXMoJ3RyaWRlbnQvJykpIHtcbiAgICByZXR1cm4gQnJvd3Nlck5hbWUuSUU7XG4gIH0gZWxzZSBpZiAodWEuaW5jbHVkZXMoJ2VkZ2UvJykpIHtcbiAgICByZXR1cm4gQnJvd3Nlck5hbWUuRURHRTtcbiAgfSBlbHNlIGlmIChfaXNGaXJlZm94KHVhKSkge1xuICAgIHJldHVybiBCcm93c2VyTmFtZS5GSVJFRk9YO1xuICB9IGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdzaWxrLycpKSB7XG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLlNJTEs7XG4gIH0gZWxzZSBpZiAoX2lzQmxhY2tCZXJyeSh1YSkpIHtcbiAgICAvLyBCbGFja2JlcnJ5IGJyb3dzZXIuXG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLkJMQUNLQkVSUlk7XG4gIH0gZWxzZSBpZiAoX2lzV2ViT1ModWEpKSB7XG4gICAgLy8gV2ViT1MgZGVmYXVsdCBicm93c2VyLlxuICAgIHJldHVybiBCcm93c2VyTmFtZS5XRUJPUztcbiAgfSBlbHNlIGlmIChfaXNTYWZhcmkodWEpKSB7XG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLlNBRkFSSTtcbiAgfSBlbHNlIGlmIChcbiAgICAodWEuaW5jbHVkZXMoJ2Nocm9tZS8nKSB8fCBfaXNDaHJvbWVJT1ModWEpKSAmJlxuICAgICF1YS5pbmNsdWRlcygnZWRnZS8nKVxuICApIHtcbiAgICByZXR1cm4gQnJvd3Nlck5hbWUuQ0hST01FO1xuICB9IGVsc2UgaWYgKF9pc0FuZHJvaWQodWEpKSB7XG4gICAgLy8gQW5kcm9pZCBzdG9jayBicm93c2VyLlxuICAgIHJldHVybiBCcm93c2VyTmFtZS5BTkRST0lEO1xuICB9IGVsc2Uge1xuICAgIC8vIE1vc3QgbW9kZXJuIGJyb3dzZXJzIGhhdmUgbmFtZS92ZXJzaW9uIGF0IGVuZCBvZiB1c2VyIGFnZW50IHN0cmluZy5cbiAgICBjb25zdCByZSA9IC8oW2EtekEtWlxcZFxcLl0rKVxcL1thLXpBLVpcXGRcXC5dKiQvO1xuICAgIGNvbnN0IG1hdGNoZXMgPSB1c2VyQWdlbnQubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaGVzPy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQnJvd3Nlck5hbWUuT1RIRVI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNGaXJlZm94KHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL2ZpcmVmb3hcXC8vaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc1NhZmFyaSh1c2VyQWdlbnQgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIGNvbnN0IHVhID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAoXG4gICAgdWEuaW5jbHVkZXMoJ3NhZmFyaS8nKSAmJlxuICAgICF1YS5pbmNsdWRlcygnY2hyb21lLycpICYmXG4gICAgIXVhLmluY2x1ZGVzKCdjcmlvcy8nKSAmJlxuICAgICF1YS5pbmNsdWRlcygnYW5kcm9pZCcpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNDaHJvbWVJT1ModWEgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAvY3Jpb3NcXC8vaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0lFTW9iaWxlKHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL2llbW9iaWxlL2kudGVzdCh1YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNBbmRyb2lkKHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL2FuZHJvaWQvaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0JsYWNrQmVycnkodWEgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAvYmxhY2tiZXJyeS9pLnRlc3QodWEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lzV2ViT1ModWEgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAvd2Vib3MvaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0lPUyh1YSA9IGdldFVBKCkpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICAvaXBob25lfGlwYWR8aXBvZC9pLnRlc3QodWEpIHx8XG4gICAgKC9tYWNpbnRvc2gvaS50ZXN0KHVhKSAmJiAvbW9iaWxlL2kudGVzdCh1YSkpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNJT1M3T3I4KHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIC8oaVBhZHxpUGhvbmV8aVBvZCkuKk9TIDdfXFxkL2kudGVzdCh1YSkgfHxcbiAgICAvKGlQYWR8aVBob25lfGlQb2QpLipPUyA4X1xcZC9pLnRlc3QodWEpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNJT1NTdGFuZGFsb25lKHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gX2lzSU9TKHVhKSAmJiAhISh3aW5kb3cubmF2aWdhdG9yIGFzIE5hdmlnYXRvclN0YW5kYWxvbmUpPy5zdGFuZGFsb25lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lzSUUxMCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSUUoKSAmJiAoZG9jdW1lbnQgYXMgRG9jdW1lbnQpLmRvY3VtZW50TW9kZSA9PT0gMTA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNNb2JpbGVCcm93c2VyKHVhOiBzdHJpbmcgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIC8vIFRPRE86IGltcGxlbWVudCBnZXRCcm93c2VyTmFtZSBlcXVpdmFsZW50IGZvciBPUy5cbiAgcmV0dXJuIChcbiAgICBfaXNJT1ModWEpIHx8XG4gICAgX2lzQW5kcm9pZCh1YSkgfHxcbiAgICBfaXNXZWJPUyh1YSkgfHxcbiAgICBfaXNCbGFja0JlcnJ5KHVhKSB8fFxuICAgIC93aW5kb3dzIHBob25lL2kudGVzdCh1YSkgfHxcbiAgICBfaXNJRU1vYmlsZSh1YSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0lmcmFtZSgpOiBib29sZWFuIHtcbiAgdHJ5IHtcbiAgICAvLyBDaGVjayB0aGF0IHRoZSBjdXJyZW50IHdpbmRvdyBpcyBub3QgdGhlIHRvcCB3aW5kb3cuXG4gICAgLy8gSWYgc28sIHJldHVybiB0cnVlLlxuICAgIHJldHVybiAhISh3aW5kb3cgJiYgd2luZG93ICE9PSB3aW5kb3cudG9wKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgU0RLX1ZFUlNJT04gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IF9nZXRCcm93c2VyTmFtZSB9IGZyb20gJy4vYnJvd3Nlcic7XG5pbXBvcnQgeyBnZXRVQSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuZXhwb3J0IGNvbnN0IGVudW0gQ2xpZW50SW1wbGVtZW50YXRpb24ge1xuICBDT1JFID0gJ0pzQ29yZSdcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQ2xpZW50UGxhdGZvcm0ge1xuICBCUk9XU0VSID0gJ0Jyb3dzZXInLFxuICBOT0RFID0gJ05vZGUnLFxuICBSRUFDVF9OQVRJVkUgPSAnUmVhY3ROYXRpdmUnLFxuICBDT1JET1ZBID0gJ0NvcmRvdmEnLFxuICBXT1JLRVIgPSAnV29ya2VyJ1xufVxuXG4vKlxuICogRGV0ZXJtaW5lIHRoZSBTREsgdmVyc2lvbiBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9nZXRDbGllbnRWZXJzaW9uKFxuICBjbGllbnRQbGF0Zm9ybTogQ2xpZW50UGxhdGZvcm0sXG4gIGZyYW1ld29ya3M6IHJlYWRvbmx5IHN0cmluZ1tdID0gW11cbik6IHN0cmluZyB7XG4gIGxldCByZXBvcnRlZFBsYXRmb3JtOiBzdHJpbmc7XG4gIHN3aXRjaCAoY2xpZW50UGxhdGZvcm0pIHtcbiAgICBjYXNlIENsaWVudFBsYXRmb3JtLkJST1dTRVI6XG4gICAgICAvLyBJbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQsIHJlcG9ydCB0aGUgYnJvd3NlciBuYW1lLlxuICAgICAgcmVwb3J0ZWRQbGF0Zm9ybSA9IF9nZXRCcm93c2VyTmFtZShnZXRVQSgpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ2xpZW50UGxhdGZvcm0uV09SS0VSOlxuICAgICAgLy8gVGVjaG5pY2FsbHkgYSB3b3JrZXIgcnVucyBmcm9tIGEgYnJvd3NlciBidXQgd2UgbmVlZCB0byBkaWZmZXJlbnRpYXRlIGFcbiAgICAgIC8vIHdvcmtlciBmcm9tIGEgYnJvd3Nlci5cbiAgICAgIC8vIEZvciBleGFtcGxlOiBDaHJvbWUtV29ya2VyL0pzQ29yZS80LjkuMS9GaXJlYmFzZUNvcmUtd2ViLlxuICAgICAgcmVwb3J0ZWRQbGF0Zm9ybSA9IGAke19nZXRCcm93c2VyTmFtZShnZXRVQSgpKX0tJHtjbGllbnRQbGF0Zm9ybX1gO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlcG9ydGVkUGxhdGZvcm0gPSBjbGllbnRQbGF0Zm9ybTtcbiAgfVxuICBjb25zdCByZXBvcnRlZEZyYW1ld29ya3MgPSBmcmFtZXdvcmtzLmxlbmd0aFxuICAgID8gZnJhbWV3b3Jrcy5qb2luKCcsJylcbiAgICA6ICdGaXJlYmFzZUNvcmUtd2ViJzsgLyogZGVmYXVsdCB2YWx1ZSBpZiBubyBvdGhlciBmcmFtZXdvcmsgaXMgdXNlZCAqL1xuICByZXR1cm4gYCR7cmVwb3J0ZWRQbGF0Zm9ybX0vJHtDbGllbnRJbXBsZW1lbnRhdGlvbi5DT1JFfS8ke1NES19WRVJTSU9OfS8ke3JlcG9ydGVkRnJhbWV3b3Jrc31gO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgRW5kcG9pbnQsXG4gIEh0dHBNZXRob2QsXG4gIFJlY2FwdGNoYUNsaWVudFR5cGUsXG4gIFJlY2FwdGNoYVZlcnNpb24sXG4gIF9wZXJmb3JtQXBpUmVxdWVzdCxcbiAgX2FkZFRpZElmTmVjZXNzYXJ5XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbnRlcmZhY2UgR2V0UmVjYXB0Y2hhUGFyYW1SZXNwb25zZSB7XG4gIHJlY2FwdGNoYVNpdGVLZXk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZWNhcHRjaGFQYXJhbXMoYXV0aDogQXV0aCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiAoXG4gICAgKFxuICAgICAgYXdhaXQgX3BlcmZvcm1BcGlSZXF1ZXN0PHZvaWQsIEdldFJlY2FwdGNoYVBhcmFtUmVzcG9uc2U+KFxuICAgICAgICBhdXRoLFxuICAgICAgICBIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgRW5kcG9pbnQuR0VUX1JFQ0FQVENIQV9QQVJBTVxuICAgICAgKVxuICAgICkucmVjYXB0Y2hhU2l0ZUtleSB8fCAnJ1xuICApO1xufVxuXG4vLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBhcmUgZm9yIHJlQ0FQVENIQSBlbnRlcnByaXNlIGludGVncmF0aW9uLlxuaW50ZXJmYWNlIEdldFJlY2FwdGNoYUNvbmZpZ1JlcXVlc3Qge1xuICB0ZW5hbnRJZD86IHN0cmluZztcbiAgY2xpZW50VHlwZT86IFJlY2FwdGNoYUNsaWVudFR5cGU7XG4gIHZlcnNpb24/OiBSZWNhcHRjaGFWZXJzaW9uO1xufVxuXG5pbnRlcmZhY2UgUmVjYXB0Y2hhRW5mb3JjZW1lbnRTdGF0ZSB7XG4gIHByb3ZpZGVyOiBzdHJpbmc7XG4gIGVuZm9yY2VtZW50U3RhdGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRSZWNhcHRjaGFDb25maWdSZXNwb25zZSB7XG4gIHJlY2FwdGNoYUtleTogc3RyaW5nO1xuICByZWNhcHRjaGFFbmZvcmNlbWVudFN0YXRlOiBSZWNhcHRjaGFFbmZvcmNlbWVudFN0YXRlW107XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZWNhcHRjaGFDb25maWcoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IEdldFJlY2FwdGNoYUNvbmZpZ1JlcXVlc3Rcbik6IFByb21pc2U8R2V0UmVjYXB0Y2hhQ29uZmlnUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBHZXRSZWNhcHRjaGFDb25maWdSZXF1ZXN0LFxuICAgIEdldFJlY2FwdGNoYUNvbmZpZ1Jlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLkdFVCxcbiAgICBFbmRwb2ludC5HRVRfUkVDQVBUQ0hBX0NPTkZJRyxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFJlY2FwdGNoYVBhcmFtZXRlcnMgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgR2V0UmVjYXB0Y2hhQ29uZmlnUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vcmVjYXB0Y2hhJztcblxuLy8gcmVDQVBUQ0hBIHYyIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBSZWNhcHRjaGEge1xuICByZW5kZXI6IChjb250YWluZXI6IEhUTUxFbGVtZW50LCBwYXJhbWV0ZXJzOiBSZWNhcHRjaGFQYXJhbWV0ZXJzKSA9PiBudW1iZXI7XG4gIGdldFJlc3BvbnNlOiAoaWQ6IG51bWJlcikgPT4gc3RyaW5nO1xuICBleGVjdXRlOiAoaWQ6IG51bWJlcikgPT4gdW5rbm93bjtcbiAgcmVzZXQ6IChpZDogbnVtYmVyKSA9PiB1bmtub3duO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWMihcbiAgZ3JlY2FwdGNoYTogUmVjYXB0Y2hhIHwgR3JlQ0FQVENIQSB8IHVuZGVmaW5lZFxuKTogZ3JlY2FwdGNoYSBpcyBSZWNhcHRjaGEge1xuICByZXR1cm4gKFxuICAgIGdyZWNhcHRjaGEgIT09IHVuZGVmaW5lZCAmJlxuICAgIChncmVjYXB0Y2hhIGFzIFJlY2FwdGNoYSkuZ2V0UmVzcG9uc2UgIT09IHVuZGVmaW5lZFxuICApO1xufVxuXG4vLyByZUNBUFRDSEEgRW50ZXJwcmlzZSAmIHYzIHNoYXJlZCBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgR3JlQ0FQVENIQVRvcExldmVsIGV4dGVuZHMgR3JlQ0FQVENIQSB7XG4gIGVudGVycHJpc2U6IEdyZUNBUFRDSEE7XG59XG5cbi8vIHJlQ0FQVENIQSBFbnRlcnByaXNlIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBHcmVDQVBUQ0hBIHtcbiAgcmVhZHk6IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgZXhlY3V0ZTogKHNpdGVLZXk6IHN0cmluZywgb3B0aW9uczogeyBhY3Rpb246IHN0cmluZyB9KSA9PiBQcm9taXNlPHN0cmluZz47XG4gIHJlbmRlcjogKFxuICAgIGNvbnRhaW5lcjogc3RyaW5nIHwgSFRNTEVsZW1lbnQsXG4gICAgcGFyYW1ldGVyczogR3JlQ0FQVENIQVJlbmRlck9wdGlvblxuICApID0+IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcmVDQVBUQ0hBUmVuZGVyT3B0aW9uIHtcbiAgc2l0ZWtleTogc3RyaW5nO1xuICBzaXplOiAnaW52aXNpYmxlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW50ZXJwcmlzZShcbiAgZ3JlY2FwdGNoYTogUmVjYXB0Y2hhIHwgR3JlQ0FQVENIQSB8IHVuZGVmaW5lZFxuKTogZ3JlY2FwdGNoYSBpcyBHcmVDQVBUQ0hBVG9wTGV2ZWwge1xuICByZXR1cm4gKFxuICAgIGdyZWNhcHRjaGEgIT09IHVuZGVmaW5lZCAmJlxuICAgIChncmVjYXB0Y2hhIGFzIEdyZUNBUFRDSEFUb3BMZXZlbCkuZW50ZXJwcmlzZSAhPT0gdW5kZWZpbmVkXG4gICk7XG59XG5cbi8vIFRPRE8oY2h1YW5yKTogUmVwbGFjZSB0aGlzIHdpdGggdGhlIEF1dGhXaW5kb3cgYWZ0ZXIgcmVzb2x2aW5nIHRoZSBkZXBlbmRlbmN5IGlzc3VlIGluIE5vZGUuanMgZW52LlxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBncmVjYXB0Y2hhPzogUmVjYXB0Y2hhIHwgR3JlQ0FQVENIQVRvcExldmVsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWNhcHRjaGFDb25maWcge1xuICAvKipcbiAgICogVGhlIHJlQ0FQVENIQSBzaXRlIGtleS5cbiAgICovXG4gIHNpdGVLZXk6IHN0cmluZyA9ICcnO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVDQVBUQ0hBIGVuYWJsZW1lbnQgc3RhdHVzIG9mIHRoZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IGZvciB0aGUgY3VycmVudCB0ZW5hbnQuXG4gICAqL1xuICBlbWFpbFBhc3N3b3JkRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBHZXRSZWNhcHRjaGFDb25maWdSZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5yZWNhcHRjaGFLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNhcHRjaGFLZXkgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIC8vIEV4YW1wbGUgcmVzcG9uc2UucmVjYXB0Y2hhS2V5OiBcInByb2plY3RzL3Byb2oxMjMva2V5cy9zaXRla2V5MTIzXCJcbiAgICB0aGlzLnNpdGVLZXkgPSByZXNwb25zZS5yZWNhcHRjaGFLZXkuc3BsaXQoJy8nKVszXTtcbiAgICB0aGlzLmVtYWlsUGFzc3dvcmRFbmFibGVkID0gcmVzcG9uc2UucmVjYXB0Y2hhRW5mb3JjZW1lbnRTdGF0ZS5zb21lKFxuICAgICAgZW5mb3JjZW1lbnRTdGF0ZSA9PlxuICAgICAgICBlbmZvcmNlbWVudFN0YXRlLnByb3ZpZGVyID09PSAnRU1BSUxfUEFTU1dPUkRfUFJPVklERVInICYmXG4gICAgICAgIGVuZm9yY2VtZW50U3RhdGUuZW5mb3JjZW1lbnRTdGF0ZSAhPT0gJ09GRidcbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2NyZWF0ZUVycm9yIH0gZnJvbSAnLi4vY29yZS91dGlsL2Fzc2VydCc7XG5cbmZ1bmN0aW9uIGdldFNjcmlwdFBhcmVudEVsZW1lbnQoKTogSFRNTERvY3VtZW50IHwgSFRNTEhlYWRFbGVtZW50IHtcbiAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJyk/LlswXSA/PyBkb2N1bWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9sb2FkSlModXJsOiBzdHJpbmcpOiBQcm9taXNlPEV2ZW50PiB7XG4gIC8vIFRPRE86IGNvbnNpZGVyIGFkZGluZyB0aW1lb3V0IHN1cHBvcnQgJiBjYW5jZWxsYXRpb25cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnc3JjJywgdXJsKTtcbiAgICBlbC5vbmxvYWQgPSByZXNvbHZlO1xuICAgIGVsLm9uZXJyb3IgPSBlID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gX2NyZWF0ZUVycm9yKEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgICAgZXJyb3IuY3VzdG9tRGF0YSA9IGUgYXMgdW5rbm93biBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfTtcbiAgICBlbC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgZWwuY2hhcnNldCA9ICdVVEYtOCc7XG4gICAgZ2V0U2NyaXB0UGFyZW50RWxlbWVudCgpLmFwcGVuZENoaWxkKGVsKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZ2VuZXJhdGVDYWxsYmFja05hbWUocHJlZml4OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYF9fJHtwcmVmaXh9JHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKX1gO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgaXNFbnRlcnByaXNlLCBSZWNhcHRjaGFDb25maWcgfSBmcm9tICcuL3JlY2FwdGNoYSc7XG5pbXBvcnQgeyBnZXRSZWNhcHRjaGFDb25maWcgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vcmVjYXB0Y2hhJztcbmltcG9ydCB7XG4gIFJlY2FwdGNoYUNsaWVudFR5cGUsXG4gIFJlY2FwdGNoYVZlcnNpb24sXG4gIFJlY2FwdGNoYUFjdGlvbk5hbWVcbn0gZnJvbSAnLi4vLi4vYXBpJztcblxuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uLy4uL2NvcmUvYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0ICogYXMganNIZWxwZXJzIGZyb20gJy4uL2xvYWRfanMnO1xuXG5jb25zdCBSRUNBUFRDSEFfRU5URVJQUklTRV9VUkwgPVxuICAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvZW50ZXJwcmlzZS5qcz9yZW5kZXI9JztcblxuZXhwb3J0IGNvbnN0IFJFQ0FQVENIQV9FTlRFUlBSSVNFX1ZFUklGSUVSX1RZUEUgPSAncmVjYXB0Y2hhLWVudGVycHJpc2UnO1xuZXhwb3J0IGNvbnN0IEZBS0VfVE9LRU4gPSAnTk9fUkVDQVBUQ0hBJztcblxuZXhwb3J0IGNsYXNzIFJlY2FwdGNoYUVudGVycHJpc2VWZXJpZmllciB7XG4gIC8qKlxuICAgKiBJZGVudGlmaWVzIHRoZSB0eXBlIG9mIGFwcGxpY2F0aW9uIHZlcmlmaWVyIChlLmcuIFwicmVjYXB0Y2hhLWVudGVycHJpc2VcIikuXG4gICAqL1xuICByZWFkb25seSB0eXBlID0gUkVDQVBUQ0hBX0VOVEVSUFJJU0VfVkVSSUZJRVJfVFlQRTtcblxuICBwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbDtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGF1dGhFeHRlcm4gLSBUaGUgY29ycmVzcG9uZGluZyBGaXJlYmFzZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhdXRoRXh0ZXJuOiBBdXRoKSB7XG4gICAgdGhpcy5hdXRoID0gX2Nhc3RBdXRoKGF1dGhFeHRlcm4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSB2ZXJpZmljYXRpb24gcHJvY2Vzcy5cbiAgICpcbiAgICogQHJldHVybnMgQSBQcm9taXNlIGZvciBhIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSB2YWxpZGl0eSBvZiBhIHJlcXVlc3QuXG4gICAqL1xuICBhc3luYyB2ZXJpZnkoXG4gICAgYWN0aW9uOiBzdHJpbmcgPSAndmVyaWZ5JyxcbiAgICBmb3JjZVJlZnJlc2ggPSBmYWxzZVxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlU2l0ZUtleShhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgaWYgKCFmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgaWYgKGF1dGgudGVuYW50SWQgPT0gbnVsbCAmJiBhdXRoLl9hZ2VudFJlY2FwdGNoYUNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGF1dGguX2FnZW50UmVjYXB0Y2hhQ29uZmlnLnNpdGVLZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGF1dGgudGVuYW50SWQgIT0gbnVsbCAmJlxuICAgICAgICAgIGF1dGguX3RlbmFudFJlY2FwdGNoYUNvbmZpZ3NbYXV0aC50ZW5hbnRJZF0gIT09IHVuZGVmaW5lZFxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gYXV0aC5fdGVuYW50UmVjYXB0Y2hhQ29uZmlnc1thdXRoLnRlbmFudElkXS5zaXRlS2V5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgZ2V0UmVjYXB0Y2hhQ29uZmlnKGF1dGgsIHtcbiAgICAgICAgICBjbGllbnRUeXBlOiBSZWNhcHRjaGFDbGllbnRUeXBlLldFQixcbiAgICAgICAgICB2ZXJzaW9uOiBSZWNhcHRjaGFWZXJzaW9uLkVOVEVSUFJJU0VcbiAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVjYXB0Y2hhS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigncmVjYXB0Y2hhIEVudGVycHJpc2Ugc2l0ZSBrZXkgdW5kZWZpbmVkJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbmV3IFJlY2FwdGNoYUNvbmZpZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgIGlmIChhdXRoLnRlbmFudElkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdXRoLl9hZ2VudFJlY2FwdGNoYUNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdXRoLl90ZW5hbnRSZWNhcHRjaGFDb25maWdzW2F1dGgudGVuYW50SWRdID0gY29uZmlnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGNvbmZpZy5zaXRlS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmV0cmlldmVSZWNhcHRjaGFUb2tlbihcbiAgICAgIHNpdGVLZXk6IHN0cmluZyxcbiAgICAgIHJlc29sdmU6ICh2YWx1ZTogc3RyaW5nIHwgUHJvbWlzZUxpa2U8c3RyaW5nPikgPT4gdm9pZCxcbiAgICAgIHJlamVjdDogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWRcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IGdyZWNhcHRjaGEgPSB3aW5kb3cuZ3JlY2FwdGNoYTtcbiAgICAgIGlmIChpc0VudGVycHJpc2UoZ3JlY2FwdGNoYSkpIHtcbiAgICAgICAgZ3JlY2FwdGNoYS5lbnRlcnByaXNlLnJlYWR5KCgpID0+IHtcbiAgICAgICAgICBncmVjYXB0Y2hhLmVudGVycHJpc2VcbiAgICAgICAgICAgIC5leGVjdXRlKHNpdGVLZXksIHsgYWN0aW9uIH0pXG4gICAgICAgICAgICAudGhlbih0b2tlbiA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUodG9rZW4pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUoRkFLRV9UT0tFTik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoRXJyb3IoJ05vIHJlQ0FQVENIQSBlbnRlcnByaXNlIHNjcmlwdCBsb2FkZWQuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJldHJpZXZlU2l0ZUtleSh0aGlzLmF1dGgpXG4gICAgICAgIC50aGVuKHNpdGVLZXkgPT4ge1xuICAgICAgICAgIGlmICghZm9yY2VSZWZyZXNoICYmIGlzRW50ZXJwcmlzZSh3aW5kb3cuZ3JlY2FwdGNoYSkpIHtcbiAgICAgICAgICAgIHJldHJpZXZlUmVjYXB0Y2hhVG9rZW4oc2l0ZUtleSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBuZXcgRXJyb3IoJ1JlY2FwdGNoYVZlcmlmaWVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIGJyb3dzZXInKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqc0hlbHBlcnNcbiAgICAgICAgICAgICAgLl9sb2FkSlMoUkVDQVBUQ0hBX0VOVEVSUFJJU0VfVVJMICsgc2l0ZUtleSlcbiAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHJpZXZlUmVjYXB0Y2hhVG9rZW4oc2l0ZUtleSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluamVjdFJlY2FwdGNoYUZpZWxkczxUPihcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICByZXF1ZXN0OiBULFxuICBhY3Rpb246IFJlY2FwdGNoYUFjdGlvbk5hbWUsXG4gIGNhcHRjaGFSZXNwID0gZmFsc2Vcbik6IFByb21pc2U8VD4ge1xuICBjb25zdCB2ZXJpZmllciA9IG5ldyBSZWNhcHRjaGFFbnRlcnByaXNlVmVyaWZpZXIoYXV0aCk7XG4gIGxldCBjYXB0Y2hhUmVzcG9uc2U7XG4gIHRyeSB7XG4gICAgY2FwdGNoYVJlc3BvbnNlID0gYXdhaXQgdmVyaWZpZXIudmVyaWZ5KGFjdGlvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdGNoYVJlc3BvbnNlID0gYXdhaXQgdmVyaWZpZXIudmVyaWZ5KGFjdGlvbiwgdHJ1ZSk7XG4gIH1cbiAgY29uc3QgbmV3UmVxdWVzdCA9IHsgLi4ucmVxdWVzdCB9O1xuICBpZiAoIWNhcHRjaGFSZXNwKSB7XG4gICAgT2JqZWN0LmFzc2lnbihuZXdSZXF1ZXN0LCB7IGNhcHRjaGFSZXNwb25zZSB9KTtcbiAgfSBlbHNlIHtcbiAgICBPYmplY3QuYXNzaWduKG5ld1JlcXVlc3QsIHsgJ2NhcHRjaGFSZXNwJzogY2FwdGNoYVJlc3BvbnNlIH0pO1xuICB9XG4gIE9iamVjdC5hc3NpZ24obmV3UmVxdWVzdCwgeyAnY2xpZW50VHlwZSc6IFJlY2FwdGNoYUNsaWVudFR5cGUuV0VCIH0pO1xuICBPYmplY3QuYXNzaWduKG5ld1JlcXVlc3QsIHtcbiAgICAncmVjYXB0Y2hhVmVyc2lvbic6IFJlY2FwdGNoYVZlcnNpb24uRU5URVJQUklTRVxuICB9KTtcbiAgcmV0dXJuIG5ld1JlcXVlc3Q7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IFVuc3Vic2NyaWJlLCBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG5pbnRlcmZhY2UgTWlkZGxld2FyZUVudHJ5IHtcbiAgKHVzZXI6IFVzZXIgfCBudWxsKTogUHJvbWlzZTx2b2lkPjtcbiAgb25BYm9ydD86ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRoTWlkZGxld2FyZVF1ZXVlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBxdWV1ZTogTWlkZGxld2FyZUVudHJ5W10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCkge31cblxuICBwdXNoQ2FsbGJhY2soXG4gICAgY2FsbGJhY2s6ICh1c2VyOiBVc2VyIHwgbnVsbCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD4sXG4gICAgb25BYm9ydD86ICgpID0+IHZvaWRcbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIC8vIFRoZSBjYWxsYmFjayBjb3VsZCBiZSBzeW5jIG9yIGFzeW5jLiBXcmFwIGl0IGludG8gYVxuICAgIC8vIGZ1bmN0aW9uIHRoYXQgaXMgYWx3YXlzIGFzeW5jLlxuICAgIGNvbnN0IHdyYXBwZWRDYWxsYmFjazogTWlkZGxld2FyZUVudHJ5ID0gKFxuICAgICAgdXNlcjogVXNlciB8IG51bGxcbiAgICApOiBQcm9taXNlPHZvaWQ+ID0+XG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2sodXNlcik7XG4gICAgICAgICAgLy8gRWl0aGVyIHJlc29sdmUgd2l0aCBleGlzdGluZyBwcm9taXNlIG9yIHdyYXAgYSBub24tcHJvbWlzZVxuICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpbnRvIGEgcHJvbWlzZS5cbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBTeW5jIGNhbGxiYWNrIHRocm93cy5cbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIC8vIEF0dGFjaCB0aGUgb25BYm9ydCBpZiBwcmVzZW50XG4gICAgd3JhcHBlZENhbGxiYWNrLm9uQWJvcnQgPSBvbkFib3J0O1xuICAgIHRoaXMucXVldWUucHVzaCh3cmFwcGVkQ2FsbGJhY2spO1xuXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIFVuc3Vic2NyaWJlLiBSZXBsYWNlIHdpdGggbm8tb3AuIERvIG5vdCByZW1vdmUgZnJvbSBhcnJheSwgb3IgaXQgd2lsbCBkaXN0dXJiXG4gICAgICAvLyBpbmRleGluZyBvZiBvdGhlciBlbGVtZW50cy5cbiAgICAgIHRoaXMucXVldWVbaW5kZXhdID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIHJ1bk1pZGRsZXdhcmUobmV4dFVzZXI6IFVzZXIgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuYXV0aC5jdXJyZW50VXNlciA9PT0gbmV4dFVzZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXaGlsZSBydW5uaW5nIHRoZSBtaWRkbGV3YXJlLCBidWlsZCBhIHRlbXBvcmFyeSBzdGFjayBvZiBvbkFib3J0XG4gICAgLy8gY2FsbGJhY2tzIHRvIGNhbGwgaWYgb25lIG1pZGRsZXdhcmUgY2FsbGJhY2sgcmVqZWN0cy5cblxuICAgIGNvbnN0IG9uQWJvcnRTdGFjazogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgICB0cnkge1xuICAgICAgZm9yIChjb25zdCBiZWZvcmVTdGF0ZUNhbGxiYWNrIG9mIHRoaXMucXVldWUpIHtcbiAgICAgICAgYXdhaXQgYmVmb3JlU3RhdGVDYWxsYmFjayhuZXh0VXNlcik7XG5cbiAgICAgICAgLy8gT25seSBwdXNoIHRoZSBvbkFib3J0IGlmIHRoZSBjYWxsYmFjayBzdWNjZWVkc1xuICAgICAgICBpZiAoYmVmb3JlU3RhdGVDYWxsYmFjay5vbkFib3J0KSB7XG4gICAgICAgICAgb25BYm9ydFN0YWNrLnB1c2goYmVmb3JlU3RhdGVDYWxsYmFjay5vbkFib3J0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFJ1biBhbGwgb25BYm9ydCwgd2l0aCBzZXBhcmF0ZSB0cnkvY2F0Y2ggdG8gaWdub3JlIGFueSBlcnJvcnMgYW5kXG4gICAgICAvLyBjb250aW51ZVxuICAgICAgb25BYm9ydFN0YWNrLnJldmVyc2UoKTtcbiAgICAgIGZvciAoY29uc3Qgb25BYm9ydCBvZiBvbkFib3J0U3RhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvbkFib3J0KCk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAvKiBzd2FsbG93IGVycm9yICovXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgdGhpcy5hdXRoLl9lcnJvckZhY3RvcnkuY3JlYXRlKEF1dGhFcnJvckNvZGUuTE9HSU5fQkxPQ0tFRCwge1xuICAgICAgICBvcmlnaW5hbE1lc3NhZ2U6IChlIGFzIEVycm9yKT8ubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfRmlyZWJhc2VTZXJ2aWNlLCBGaXJlYmFzZUFwcCB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IEFwcENoZWNrSW50ZXJuYWxDb21wb25lbnROYW1lIH0gZnJvbSAnQGZpcmViYXNlL2FwcC1jaGVjay1pbnRlcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIEF1dGgsXG4gIEF1dGhFcnJvck1hcCxcbiAgQXV0aFNldHRpbmdzLFxuICBFbXVsYXRvckNvbmZpZyxcbiAgTmV4dE9yT2JzZXJ2ZXIsXG4gIFBlcnNpc3RlbmNlLFxuICBQb3B1cFJlZGlyZWN0UmVzb2x2ZXIsXG4gIFVzZXIsXG4gIFVzZXJDcmVkZW50aWFsLFxuICBDb21wbGV0ZUZuLFxuICBFcnJvckZuLFxuICBOZXh0Rm4sXG4gIFVuc3Vic2NyaWJlXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQge1xuICBjcmVhdGVTdWJzY3JpYmUsXG4gIEVycm9yRmFjdG9yeSxcbiAgRmlyZWJhc2VFcnJvcixcbiAgZ2V0TW9kdWxhckluc3RhbmNlLFxuICBPYnNlcnZlcixcbiAgU3Vic2NyaWJlXG59IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgQXV0aEludGVybmFsLCBDb25maWdJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7XG4gIEF1dGhFcnJvckNvZGUsXG4gIEF1dGhFcnJvclBhcmFtcyxcbiAgRXJyb3JNYXBSZXRyaWV2ZXIsXG4gIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWVxufSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgUGVyc2lzdGVuY2VJbnRlcm5hbCB9IGZyb20gJy4uL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7XG4gIEtleU5hbWUsXG4gIFBlcnNpc3RlbmNlVXNlck1hbmFnZXJcbn0gZnJvbSAnLi4vcGVyc2lzdGVuY2UvcGVyc2lzdGVuY2VfdXNlcl9tYW5hZ2VyJztcbmltcG9ydCB7IF9yZWxvYWRXaXRob3V0U2F2aW5nIH0gZnJvbSAnLi4vdXNlci9yZWxvYWQnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uL3V0aWwvaW5zdGFudGlhdG9yJztcbmltcG9ydCB7IF9nZXRVc2VyTGFuZ3VhZ2UgfSBmcm9tICcuLi91dGlsL25hdmlnYXRvcic7XG5pbXBvcnQgeyBfZ2V0Q2xpZW50VmVyc2lvbiB9IGZyb20gJy4uL3V0aWwvdmVyc2lvbic7XG5pbXBvcnQgeyBIdHRwSGVhZGVyLCBSZWNhcHRjaGFDbGllbnRUeXBlLCBSZWNhcHRjaGFWZXJzaW9uIH0gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7IGdldFJlY2FwdGNoYUNvbmZpZyB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9yZWNhcHRjaGEnO1xuaW1wb3J0IHsgUmVjYXB0Y2hhRW50ZXJwcmlzZVZlcmlmaWVyIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm1fYnJvd3Nlci9yZWNhcHRjaGEvcmVjYXB0Y2hhX2VudGVycHJpc2VfdmVyaWZpZXInO1xuaW1wb3J0IHsgQXV0aE1pZGRsZXdhcmVRdWV1ZSB9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBSZWNhcHRjaGFDb25maWcgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybV9icm93c2VyL3JlY2FwdGNoYS9yZWNhcHRjaGEnO1xuaW1wb3J0IHsgX2xvZ1dhcm4gfSBmcm9tICcuLi91dGlsL2xvZyc7XG5cbmludGVyZmFjZSBBc3luY0FjdGlvbiB7XG4gICgpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBEZWZhdWx0Q29uZmlnIHtcbiAgVE9LRU5fQVBJX0hPU1QgPSAnc2VjdXJldG9rZW4uZ29vZ2xlYXBpcy5jb20nLFxuICBBUElfSE9TVCA9ICdpZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20nLFxuICBBUElfU0NIRU1FID0gJ2h0dHBzJ1xufVxuXG5leHBvcnQgY2xhc3MgQXV0aEltcGwgaW1wbGVtZW50cyBBdXRoSW50ZXJuYWwsIF9GaXJlYmFzZVNlcnZpY2Uge1xuICBjdXJyZW50VXNlcjogVXNlciB8IG51bGwgPSBudWxsO1xuICBlbXVsYXRvckNvbmZpZzogRW11bGF0b3JDb25maWcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBvcGVyYXRpb25zID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHByaXZhdGUgcGVyc2lzdGVuY2VNYW5hZ2VyPzogUGVyc2lzdGVuY2VVc2VyTWFuYWdlcjtcbiAgcHJpdmF0ZSByZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcj86IFBlcnNpc3RlbmNlVXNlck1hbmFnZXI7XG4gIHByaXZhdGUgYXV0aFN0YXRlU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbjxVc2VyPih0aGlzKTtcbiAgcHJpdmF0ZSBpZFRva2VuU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbjxVc2VyPih0aGlzKTtcbiAgcHJpdmF0ZSByZWFkb25seSBiZWZvcmVTdGF0ZVF1ZXVlID0gbmV3IEF1dGhNaWRkbGV3YXJlUXVldWUodGhpcyk7XG4gIHByaXZhdGUgcmVkaXJlY3RVc2VyOiBVc2VySW50ZXJuYWwgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkID0gZmFsc2U7XG5cbiAgLy8gQW55IG5ldHdvcmsgY2FsbHMgd2lsbCBzZXQgdGhpcyB0byB0cnVlIGFuZCBwcmV2ZW50IHN1YnNlcXVlbnQgZW11bGF0b3JcbiAgLy8gaW5pdGlhbGl6YXRpb25cbiAgX2NhbkluaXRFbXVsYXRvciA9IHRydWU7XG4gIF9pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gIF9kZWxldGVkID0gZmFsc2U7XG4gIF9pbml0aWFsaXphdGlvblByb21pc2U6IFByb21pc2U8dm9pZD4gfCBudWxsID0gbnVsbDtcbiAgX3BvcHVwUmVkaXJlY3RSZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwgfCBudWxsID0gbnVsbDtcbiAgX2Vycm9yRmFjdG9yeTogRXJyb3JGYWN0b3J5PEF1dGhFcnJvckNvZGUsIEF1dGhFcnJvclBhcmFtcz4gPVxuICAgIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWTtcbiAgX2FnZW50UmVjYXB0Y2hhQ29uZmlnOiBSZWNhcHRjaGFDb25maWcgfCBudWxsID0gbnVsbDtcbiAgX3RlbmFudFJlY2FwdGNoYUNvbmZpZ3M6IFJlY29yZDxzdHJpbmcsIFJlY2FwdGNoYUNvbmZpZz4gPSB7fTtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8vIFRyYWNrcyB0aGUgbGFzdCBub3RpZmllZCBVSUQgZm9yIHN0YXRlIGNoYW5nZSBsaXN0ZW5lcnMgdG8gcHJldmVudFxuICAvLyByZXBlYXRlZCBjYWxscyB0byB0aGUgY2FsbGJhY2tzLiBVbmRlZmluZWQgbWVhbnMgaXQncyBuZXZlciBiZWVuXG4gIC8vIGNhbGxlZCwgd2hlcmVhcyBudWxsIG1lYW5zIGl0J3MgYmVlbiBjYWxsZWQgd2l0aCBhIHNpZ25lZCBvdXQgdXNlclxuICBwcml2YXRlIGxhc3ROb3RpZmllZFVpZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBsYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICB0ZW5hbnRJZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHNldHRpbmdzOiBBdXRoU2V0dGluZ3MgPSB7IGFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZzogZmFsc2UgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXBwOiBGaXJlYmFzZUFwcCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlcjogUHJvdmlkZXI8J2hlYXJ0YmVhdCc+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXBwQ2hlY2tTZXJ2aWNlUHJvdmlkZXI6IFByb3ZpZGVyPEFwcENoZWNrSW50ZXJuYWxDb21wb25lbnROYW1lPixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBDb25maWdJbnRlcm5hbFxuICApIHtcbiAgICB0aGlzLm5hbWUgPSBhcHAubmFtZTtcbiAgICB0aGlzLmNsaWVudFZlcnNpb24gPSBjb25maWcuc2RrQ2xpZW50VmVyc2lvbjtcbiAgfVxuXG4gIF9pbml0aWFsaXplV2l0aFBlcnNpc3RlbmNlKFxuICAgIHBlcnNpc3RlbmNlSGllcmFyY2h5OiBQZXJzaXN0ZW5jZUludGVybmFsW10sXG4gICAgcG9wdXBSZWRpcmVjdFJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChwb3B1cFJlZGlyZWN0UmVzb2x2ZXIpIHtcbiAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciA9IF9nZXRJbnN0YW5jZShwb3B1cFJlZGlyZWN0UmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIC8vIEhhdmUgdG8gY2hlY2sgZm9yIGFwcCBkZWxldGlvbiB0aHJvdWdob3V0IGluaXRpYWxpemF0aW9uIChhZnRlciBlYWNoXG4gICAgLy8gcHJvbWlzZSByZXNvbHV0aW9uKVxuICAgIHRoaXMuX2luaXRpYWxpemF0aW9uUHJvbWlzZSA9IHRoaXMucXVldWUoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IGF3YWl0IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIuY3JlYXRlKFxuICAgICAgICB0aGlzLFxuICAgICAgICBwZXJzaXN0ZW5jZUhpZXJhcmNoeVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0aWFsaXplIHRoZSByZXNvbHZlciBlYXJseSBpZiBuZWNlc3NhcnkgKG9ubHkgYXBwbGljYWJsZSB0byB3ZWI6XG4gICAgICAvLyB0aGlzIHdpbGwgY2F1c2UgdGhlIGlmcmFtZSB0byBsb2FkIGltbWVkaWF0ZWx5IGluIGNlcnRhaW4gY2FzZXMpXG4gICAgICBpZiAodGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyPy5fc2hvdWxkSW5pdFByb2FjdGl2ZWx5KSB7XG4gICAgICAgIC8vIElmIHRoaXMgZmFpbHMsIGRvbid0IGhhbHQgYXV0aCBsb2FkaW5nXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyLl9pbml0aWFsaXplKHRoaXMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLyogSWdub3JlIHRoZSBlcnJvciAqL1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZUN1cnJlbnRVc2VyKHBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XG4gICAgICB0aGlzLmxhc3ROb3RpZmllZFVpZCA9IHRoaXMuY3VycmVudFVzZXI/LnVpZCB8fCBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fZGVsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxpemF0aW9uUHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgcGVyc2lzdGVuY2UgaXMgY2hhbmdlZCBpbiBhbm90aGVyIHdpbmRvdywgdGhlIHVzZXIgbWFuYWdlciB3aWxsIGxldCB1cyBrbm93XG4gICAqL1xuICBhc3luYyBfb25TdG9yYWdlRXZlbnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLmdldEN1cnJlbnRVc2VyKCk7XG5cbiAgICBpZiAoIXRoaXMuY3VycmVudFVzZXIgJiYgIXVzZXIpIHtcbiAgICAgIC8vIE5vIGNoYW5nZSwgZG8gbm90aGluZyAod2FzIHNpZ25lZCBvdXQgYW5kIHJlbWFpbmVkIHNpZ25lZCBvdXQpLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBzYW1lIHVzZXIgaXMgdG8gYmUgc3luY2hyb25pemVkLlxuICAgIGlmICh0aGlzLmN1cnJlbnRVc2VyICYmIHVzZXIgJiYgdGhpcy5jdXJyZW50VXNlci51aWQgPT09IHVzZXIudWlkKSB7XG4gICAgICAvLyBEYXRhIHVwZGF0ZSwgc2ltcGx5IGNvcHkgZGF0YSBjaGFuZ2VzLlxuICAgICAgdGhpcy5fY3VycmVudFVzZXIuX2Fzc2lnbih1c2VyKTtcbiAgICAgIC8vIElmIHRva2VucyBjaGFuZ2VkIGZyb20gcHJldmlvdXMgdXNlciB0b2tlbnMsIHRoaXMgd2lsbCB0cmlnZ2VyXG4gICAgICAvLyBub3RpZnlBdXRoTGlzdGVuZXJzXy5cbiAgICAgIGF3YWl0IHRoaXMuY3VycmVudFVzZXIuZ2V0SWRUb2tlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBjdXJyZW50IEF1dGggc3RhdGUuIEVpdGhlciBhIG5ldyBsb2dpbiBvciBsb2dvdXQuXG4gICAgLy8gU2tpcCBibG9ja2luZyBjYWxsYmFja3MsIHRoZXkgc2hvdWxkIG5vdCBhcHBseSB0byBhIGNoYW5nZSBpbiBhbm90aGVyIHRhYi5cbiAgICBhd2FpdCB0aGlzLl91cGRhdGVDdXJyZW50VXNlcih1c2VyLCAvKiBza2lwQmVmb3JlU3RhdGVDYWxsYmFja3MgKi8gdHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVDdXJyZW50VXNlcihcbiAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gRmlyc3QgY2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSBwZW5kaW5nIHJlZGlyZWN0IGV2ZW50LlxuICAgIGNvbnN0IHByZXZpb3VzbHlTdG9yZWRVc2VyID1cbiAgICAgIChhd2FpdCB0aGlzLmFzc2VydGVkUGVyc2lzdGVuY2UuZ2V0Q3VycmVudFVzZXIoKSkgYXMgVXNlckludGVybmFsIHwgbnVsbDtcbiAgICBsZXQgZnV0dXJlQ3VycmVudFVzZXIgPSBwcmV2aW91c2x5U3RvcmVkVXNlcjtcbiAgICBsZXQgbmVlZHNUb2NoZWNrTWlkZGxld2FyZSA9IGZhbHNlO1xuICAgIGlmIChwb3B1cFJlZGlyZWN0UmVzb2x2ZXIgJiYgdGhpcy5jb25maWcuYXV0aERvbWFpbikge1xuICAgICAgYXdhaXQgdGhpcy5nZXRPckluaXRSZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcigpO1xuICAgICAgY29uc3QgcmVkaXJlY3RVc2VyRXZlbnRJZCA9IHRoaXMucmVkaXJlY3RVc2VyPy5fcmVkaXJlY3RFdmVudElkO1xuICAgICAgY29uc3Qgc3RvcmVkVXNlckV2ZW50SWQgPSBmdXR1cmVDdXJyZW50VXNlcj8uX3JlZGlyZWN0RXZlbnRJZDtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMudHJ5UmVkaXJlY3RTaWduSW4ocG9wdXBSZWRpcmVjdFJlc29sdmVyKTtcblxuICAgICAgLy8gSWYgdGhlIHN0b3JlZCB1c2VyIChpLmUuIHRoZSBvbGQgXCJjdXJyZW50VXNlclwiKSBoYXMgYSByZWRpcmVjdElkIHRoYXRcbiAgICAgIC8vIG1hdGNoZXMgdGhlIHJlZGlyZWN0IHVzZXIsIHRoZW4gd2Ugd2FudCB0byBpbml0aWFsbHkgc2lnbiBpbiB3aXRoIHRoZVxuICAgICAgLy8gbmV3IHVzZXIgb2JqZWN0IGZyb20gcmVzdWx0LlxuICAgICAgLy8gVE9ETyhzYW1naG8pOiBNb3JlIHRob3JvdWdobHkgdGVzdCBhbGwgb2YgdGhpc1xuICAgICAgaWYgKFxuICAgICAgICAoIXJlZGlyZWN0VXNlckV2ZW50SWQgfHwgcmVkaXJlY3RVc2VyRXZlbnRJZCA9PT0gc3RvcmVkVXNlckV2ZW50SWQpICYmXG4gICAgICAgIHJlc3VsdD8udXNlclxuICAgICAgKSB7XG4gICAgICAgIGZ1dHVyZUN1cnJlbnRVc2VyID0gcmVzdWx0LnVzZXIgYXMgVXNlckludGVybmFsO1xuICAgICAgICBuZWVkc1RvY2hlY2tNaWRkbGV3YXJlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBubyB1c2VyIGluIHBlcnNpc3RlbmNlLCB0aGVyZSBpcyBubyBjdXJyZW50IHVzZXIuIFNldCB0byBudWxsLlxuICAgIGlmICghZnV0dXJlQ3VycmVudFVzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKCFmdXR1cmVDdXJyZW50VXNlci5fcmVkaXJlY3RFdmVudElkKSB7XG4gICAgICAvLyBUaGlzIGlzbid0IGEgcmVkaXJlY3QgbGluayBvcGVyYXRpb24sIHdlIGNhbiByZWxvYWQgYW5kIGJhaWwuXG4gICAgICAvLyBGaXJzdCB0aG91Z2gsIGVuc3VyZSB0aGF0IHdlIGNoZWNrIHRoZSBtaWRkbGV3YXJlIGlzIGhhcHB5LlxuICAgICAgaWYgKG5lZWRzVG9jaGVja01pZGRsZXdhcmUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB0aGlzLmJlZm9yZVN0YXRlUXVldWUucnVuTWlkZGxld2FyZShmdXR1cmVDdXJyZW50VXNlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBmdXR1cmVDdXJyZW50VXNlciA9IHByZXZpb3VzbHlTdG9yZWRVc2VyO1xuICAgICAgICAgIC8vIFdlIGtub3cgdGhpcyBpcyBhdmFpbGFibGUgc2luY2UgdGhlIGJpdCBpcyBvbmx5IHNldCB3aGVuIHRoZVxuICAgICAgICAgIC8vIHJlc29sdmVyIGlzIGF2YWlsYWJsZVxuICAgICAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciEuX292ZXJyaWRlUmVkaXJlY3RSZXN1bHQodGhpcywgKCkgPT5cbiAgICAgICAgICAgIFByb21pc2UucmVqZWN0KGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZnV0dXJlQ3VycmVudFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVsb2FkQW5kU2V0Q3VycmVudFVzZXJPckNsZWFyKGZ1dHVyZUN1cnJlbnRVc2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2Fzc2VydCh0aGlzLl9wb3B1cFJlZGlyZWN0UmVzb2x2ZXIsIHRoaXMsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuICAgIGF3YWl0IHRoaXMuZ2V0T3JJbml0UmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIoKTtcblxuICAgIC8vIElmIHRoZSByZWRpcmVjdCB1c2VyJ3MgZXZlbnQgSUQgbWF0Y2hlcyB0aGUgY3VycmVudCB1c2VyJ3MgZXZlbnQgSUQsXG4gICAgLy8gRE8gTk9UIHJlbG9hZCB0aGUgY3VycmVudCB1c2VyLCBvdGhlcndpc2UgdGhleSdsbCBiZSBjbGVhcmVkIGZyb20gc3RvcmFnZS5cbiAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgdGhlIHJlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KCkgZmxvdy5cbiAgICBpZiAoXG4gICAgICB0aGlzLnJlZGlyZWN0VXNlciAmJlxuICAgICAgdGhpcy5yZWRpcmVjdFVzZXIuX3JlZGlyZWN0RXZlbnRJZCA9PT0gZnV0dXJlQ3VycmVudFVzZXIuX3JlZGlyZWN0RXZlbnRJZFxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcihmdXR1cmVDdXJyZW50VXNlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVsb2FkQW5kU2V0Q3VycmVudFVzZXJPckNsZWFyKGZ1dHVyZUN1cnJlbnRVc2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdHJ5UmVkaXJlY3RTaWduSW4oXG4gICAgcmVkaXJlY3RSZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8VXNlckNyZWRlbnRpYWwgfCBudWxsPiB7XG4gICAgLy8gVGhlIHJlZGlyZWN0IHVzZXIgbmVlZHMgdG8gYmUgY2hlY2tlZCAoYW5kIHNpZ25lZCBpbiBpZiBhdmFpbGFibGUpXG4gICAgLy8gZHVyaW5nIGF1dGggaW5pdGlhbGl6YXRpb24uIEFsbCBvZiB0aGUgbm9ybWFsIHNpZ24gaW4gYW5kIGxpbmsvcmVhdXRoXG4gICAgLy8gZmxvd3MgY2FsbCBiYWNrIGludG8gYXV0aCBhbmQgcHVzaCB0aGluZ3Mgb250byB0aGUgcHJvbWlzZSBxdWV1ZS4gV2VcbiAgICAvLyBuZWVkIHRvIGF3YWl0IHRoZSByZXN1bHQgb2YgdGhlIHJlZGlyZWN0IHNpZ24gaW4gKmluc2lkZSB0aGUgcHJvbWlzZVxuICAgIC8vIHF1ZXVlKi4gVGhpcyBwcmVzZW50cyBhIHByb2JsZW06IHdlIHJ1biBpbnRvIGRlYWRsb2NrLiBTZWU6XG4gICAgLy8gICAg4pSMPiBbSW5pdGlhbGl6YXRpb25dIOKUgOKUgOKUgOKUgOKUgOKUkFxuICAgIC8vICAgIOKUjD4gWzxvdGhlciBxdWV1ZSB0YXNrcz5dIOKUglxuICAgIC8vICAgIOKUlOKUgCBbZ2V0UmVkaXJlY3RSZXN1bHRdIDzilIDilJhcbiAgICAvLyAgICB3aGVyZSBbXSBhcmUgdGFza3Mgb24gdGhlIHF1ZXVlIGFuZCBhcnJvd3MgZGVub3RlIGF3YWl0c1xuICAgIC8vIEluaXRpYWxpemF0aW9uIHdpbGwgbmV2ZXIgY29tcGxldGUgYmVjYXVzZSBpdCdzIHdhaXRpbmcgb24gc29tZXRoaW5nXG4gICAgLy8gdGhhdCdzIHdhaXRpbmcgZm9yIGluaXRpYWxpemF0aW9uIHRvIGNvbXBsZXRlIVxuICAgIC8vXG4gICAgLy8gSW5zdGVhZCwgdGhpcyBtZXRob2QgY2FsbHMgZ2V0UmVkaXJlY3RSZXN1bHQoKSAoc3RvcmVkIGluXG4gICAgLy8gX2NvbXBsZXRlUmVkaXJlY3RGbikgd2l0aCBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCBpbnN0cnVjdHMgYWxsIG9mXG4gICAgLy8gdGhlIHVuZGVybHlpbmcgYXV0aCBvcGVyYXRpb25zIHRvIHNraXAgYW55dGhpbmcgdGhhdCBtdXRhdGVzIGF1dGggc3RhdGUuXG5cbiAgICBsZXQgcmVzdWx0OiBVc2VyQ3JlZGVudGlhbCB8IG51bGwgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZSBrbm93IHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciBpcyBzZXQgc2luY2UgcmVkaXJlY3RSZXNvbHZlclxuICAgICAgLy8gaXMgcGFzc2VkIGluLiBUaGUgX2NvbXBsZXRlUmVkaXJlY3RGbiBleHBlY3RzIHRoZSB1bndyYXBwZWQgZXh0ZXJuLlxuICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyIS5fY29tcGxldGVSZWRpcmVjdEZuKFxuICAgICAgICB0aGlzLFxuICAgICAgICByZWRpcmVjdFJlc29sdmVyLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFN3YWxsb3cgYW55IGVycm9ycyBoZXJlOyB0aGUgY29kZSBjYW4gcmV0cmlldmUgdGhlbSBpblxuICAgICAgLy8gZ2V0UmVkaXJlY3RSZXN1bHQoKS5cbiAgICAgIGF3YWl0IHRoaXMuX3NldFJlZGlyZWN0VXNlcihudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZWxvYWRBbmRTZXRDdXJyZW50VXNlck9yQ2xlYXIoXG4gICAgdXNlcjogVXNlckludGVybmFsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBfcmVsb2FkV2l0aG91dFNhdmluZyh1c2VyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIChlIGFzIEZpcmViYXNlRXJyb3IpPy5jb2RlICE9PVxuICAgICAgICBgYXV0aC8ke0F1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRH1gXG4gICAgICApIHtcbiAgICAgICAgLy8gU29tZXRoaW5nJ3Mgd3Jvbmcgd2l0aCB0aGUgdXNlcidzIHRva2VuLiBMb2cgdGhlbSBvdXQgYW5kIHJlbW92ZVxuICAgICAgICAvLyB0aGVtIGZyb20gc3RvcmFnZVxuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RseVNldEN1cnJlbnRVc2VyKG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIodXNlcik7XG4gIH1cblxuICB1c2VEZXZpY2VMYW5ndWFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IF9nZXRVc2VyTGFuZ3VhZ2UoKTtcbiAgfVxuXG4gIGFzeW5jIF9kZWxldGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5fZGVsZXRlZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyB1cGRhdGVDdXJyZW50VXNlcih1c2VyRXh0ZXJuOiBVc2VyIHwgbnVsbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIFRoZSBwdWJsaWMgdXBkYXRlQ3VycmVudFVzZXIgbWV0aG9kIG5lZWRzIHRvIG1ha2UgYSBjb3B5IG9mIHRoZSB1c2VyLFxuICAgIC8vIGFuZCBhbHNvIGNoZWNrIHRoYXQgdGhlIHByb2plY3QgbWF0Y2hlc1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXh0ZXJuXG4gICAgICA/IChnZXRNb2R1bGFySW5zdGFuY2UodXNlckV4dGVybikgYXMgVXNlckludGVybmFsKVxuICAgICAgOiBudWxsO1xuICAgIGlmICh1c2VyKSB7XG4gICAgICBfYXNzZXJ0KFxuICAgICAgICB1c2VyLmF1dGguY29uZmlnLmFwaUtleSA9PT0gdGhpcy5jb25maWcuYXBpS2V5LFxuICAgICAgICB0aGlzLFxuICAgICAgICBBdXRoRXJyb3JDb2RlLklOVkFMSURfQVVUSFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXIgJiYgdXNlci5fY2xvbmUodGhpcykpO1xuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZUN1cnJlbnRVc2VyKFxuICAgIHVzZXI6IFVzZXIgfCBudWxsLFxuICAgIHNraXBCZWZvcmVTdGF0ZUNhbGxiYWNrczogYm9vbGVhbiA9IGZhbHNlXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9kZWxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1c2VyKSB7XG4gICAgICBfYXNzZXJ0KFxuICAgICAgICB0aGlzLnRlbmFudElkID09PSB1c2VyLnRlbmFudElkLFxuICAgICAgICB0aGlzLFxuICAgICAgICBBdXRoRXJyb3JDb2RlLlRFTkFOVF9JRF9NSVNNQVRDSFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIXNraXBCZWZvcmVTdGF0ZUNhbGxiYWNrcykge1xuICAgICAgYXdhaXQgdGhpcy5iZWZvcmVTdGF0ZVF1ZXVlLnJ1bk1pZGRsZXdhcmUodXNlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucXVldWUoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5kaXJlY3RseVNldEN1cnJlbnRVc2VyKHVzZXIgYXMgVXNlckludGVybmFsIHwgbnVsbCk7XG4gICAgICB0aGlzLm5vdGlmeUF1dGhMaXN0ZW5lcnMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNpZ25PdXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gUnVuIGZpcnN0LCB0byBibG9jayBfc2V0UmVkaXJlY3RVc2VyKCkgaWYgYW55IGNhbGxiYWNrcyBmYWlsLlxuICAgIGF3YWl0IHRoaXMuYmVmb3JlU3RhdGVRdWV1ZS5ydW5NaWRkbGV3YXJlKG51bGwpO1xuICAgIC8vIENsZWFyIHRoZSByZWRpcmVjdCB1c2VyIHdoZW4gc2lnbk91dCBpcyBjYWxsZWRcbiAgICBpZiAodGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlciB8fCB0aGlzLl9wb3B1cFJlZGlyZWN0UmVzb2x2ZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuX3NldFJlZGlyZWN0VXNlcihudWxsKTtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGNhbGxiYWNrcyBmcm9tIGJlaW5nIGNhbGxlZCBhZ2FpbiBpbiBfdXBkYXRlQ3VycmVudFVzZXIsIGFzXG4gICAgLy8gdGhleSB3ZXJlIGFscmVhZHkgY2FsbGVkIGluIHRoZSBmaXJzdCBsaW5lLlxuICAgIHJldHVybiB0aGlzLl91cGRhdGVDdXJyZW50VXNlcihudWxsLCAvKiBza2lwQmVmb3JlU3RhdGVDYWxsYmFja3MgKi8gdHJ1ZSk7XG4gIH1cblxuICBzZXRQZXJzaXN0ZW5jZShwZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZShhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmFzc2VydGVkUGVyc2lzdGVuY2Uuc2V0UGVyc2lzdGVuY2UoX2dldEluc3RhbmNlKHBlcnNpc3RlbmNlKSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplUmVjYXB0Y2hhQ29uZmlnKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmVjYXB0Y2hhQ29uZmlnKHRoaXMsIHtcbiAgICAgIGNsaWVudFR5cGU6IFJlY2FwdGNoYUNsaWVudFR5cGUuV0VCLFxuICAgICAgdmVyc2lvbjogUmVjYXB0Y2hhVmVyc2lvbi5FTlRFUlBSSVNFXG4gICAgfSk7XG5cbiAgICBjb25zdCBjb25maWcgPSBuZXcgUmVjYXB0Y2hhQ29uZmlnKHJlc3BvbnNlKTtcbiAgICBpZiAodGhpcy50ZW5hbnRJZCA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9hZ2VudFJlY2FwdGNoYUNvbmZpZyA9IGNvbmZpZztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdGVuYW50UmVjYXB0Y2hhQ29uZmlnc1t0aGlzLnRlbmFudElkXSA9IGNvbmZpZztcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmVtYWlsUGFzc3dvcmRFbmFibGVkKSB7XG4gICAgICBjb25zdCB2ZXJpZmllciA9IG5ldyBSZWNhcHRjaGFFbnRlcnByaXNlVmVyaWZpZXIodGhpcyk7XG4gICAgICB2b2lkIHZlcmlmaWVyLnZlcmlmeSgpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRSZWNhcHRjaGFDb25maWcoKTogUmVjYXB0Y2hhQ29uZmlnIHwgbnVsbCB7XG4gICAgaWYgKHRoaXMudGVuYW50SWQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FnZW50UmVjYXB0Y2hhQ29uZmlnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fdGVuYW50UmVjYXB0Y2hhQ29uZmlnc1t0aGlzLnRlbmFudElkXTtcbiAgICB9XG4gIH1cblxuICBfZ2V0UGVyc2lzdGVuY2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLnBlcnNpc3RlbmNlLnR5cGU7XG4gIH1cblxuICBfdXBkYXRlRXJyb3JNYXAoZXJyb3JNYXA6IEF1dGhFcnJvck1hcCk6IHZvaWQge1xuICAgIHRoaXMuX2Vycm9yRmFjdG9yeSA9IG5ldyBFcnJvckZhY3Rvcnk8QXV0aEVycm9yQ29kZSwgQXV0aEVycm9yUGFyYW1zPihcbiAgICAgICdhdXRoJyxcbiAgICAgICdGaXJlYmFzZScsXG4gICAgICAoZXJyb3JNYXAgYXMgRXJyb3JNYXBSZXRyaWV2ZXIpKClcbiAgICApO1xuICB9XG5cbiAgb25BdXRoU3RhdGVDaGFuZ2VkKFxuICAgIG5leHRPck9ic2VydmVyOiBOZXh0T3JPYnNlcnZlcjxVc2VyPixcbiAgICBlcnJvcj86IEVycm9yRm4sXG4gICAgY29tcGxldGVkPzogQ29tcGxldGVGblxuICApOiBVbnN1YnNjcmliZSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJTdGF0ZUxpc3RlbmVyKFxuICAgICAgdGhpcy5hdXRoU3RhdGVTdWJzY3JpcHRpb24sXG4gICAgICBuZXh0T3JPYnNlcnZlcixcbiAgICAgIGVycm9yLFxuICAgICAgY29tcGxldGVkXG4gICAgKTtcbiAgfVxuXG4gIGJlZm9yZUF1dGhTdGF0ZUNoYW5nZWQoXG4gICAgY2FsbGJhY2s6ICh1c2VyOiBVc2VyIHwgbnVsbCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD4sXG4gICAgb25BYm9ydD86ICgpID0+IHZvaWRcbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIHJldHVybiB0aGlzLmJlZm9yZVN0YXRlUXVldWUucHVzaENhbGxiYWNrKGNhbGxiYWNrLCBvbkFib3J0KTtcbiAgfVxuXG4gIG9uSWRUb2tlbkNoYW5nZWQoXG4gICAgbmV4dE9yT2JzZXJ2ZXI6IE5leHRPck9ic2VydmVyPFVzZXI+LFxuICAgIGVycm9yPzogRXJyb3JGbixcbiAgICBjb21wbGV0ZWQ/OiBDb21wbGV0ZUZuXG4gICk6IFVuc3Vic2NyaWJlIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlclN0YXRlTGlzdGVuZXIoXG4gICAgICB0aGlzLmlkVG9rZW5TdWJzY3JpcHRpb24sXG4gICAgICBuZXh0T3JPYnNlcnZlcixcbiAgICAgIGVycm9yLFxuICAgICAgY29tcGxldGVkXG4gICAgKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBhcGlLZXk6IHRoaXMuY29uZmlnLmFwaUtleSxcbiAgICAgIGF1dGhEb21haW46IHRoaXMuY29uZmlnLmF1dGhEb21haW4sXG4gICAgICBhcHBOYW1lOiB0aGlzLm5hbWUsXG4gICAgICBjdXJyZW50VXNlcjogdGhpcy5fY3VycmVudFVzZXI/LnRvSlNPTigpXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIF9zZXRSZWRpcmVjdFVzZXIoXG4gICAgdXNlcjogVXNlckludGVybmFsIHwgbnVsbCxcbiAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcmVkaXJlY3RNYW5hZ2VyID0gYXdhaXQgdGhpcy5nZXRPckluaXRSZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcihcbiAgICAgIHBvcHVwUmVkaXJlY3RSZXNvbHZlclxuICAgICk7XG4gICAgcmV0dXJuIHVzZXIgPT09IG51bGxcbiAgICAgID8gcmVkaXJlY3RNYW5hZ2VyLnJlbW92ZUN1cnJlbnRVc2VyKClcbiAgICAgIDogcmVkaXJlY3RNYW5hZ2VyLnNldEN1cnJlbnRVc2VyKHVzZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRPckluaXRSZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcihcbiAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgKTogUHJvbWlzZTxQZXJzaXN0ZW5jZVVzZXJNYW5hZ2VyPiB7XG4gICAgaWYgKCF0aGlzLnJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyKSB7XG4gICAgICBjb25zdCByZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwgfCBudWxsID1cbiAgICAgICAgKHBvcHVwUmVkaXJlY3RSZXNvbHZlciAmJiBfZ2V0SW5zdGFuY2UocG9wdXBSZWRpcmVjdFJlc29sdmVyKSkgfHxcbiAgICAgICAgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyO1xuICAgICAgX2Fzc2VydChyZXNvbHZlciwgdGhpcywgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUik7XG4gICAgICB0aGlzLnJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyID0gYXdhaXQgUGVyc2lzdGVuY2VVc2VyTWFuYWdlci5jcmVhdGUoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIFtfZ2V0SW5zdGFuY2UocmVzb2x2ZXIuX3JlZGlyZWN0UGVyc2lzdGVuY2UpXSxcbiAgICAgICAgS2V5TmFtZS5SRURJUkVDVF9VU0VSXG4gICAgICApO1xuICAgICAgdGhpcy5yZWRpcmVjdFVzZXIgPVxuICAgICAgICBhd2FpdCB0aGlzLnJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyLmdldEN1cnJlbnRVc2VyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXI7XG4gIH1cblxuICBhc3luYyBfcmVkaXJlY3RVc2VyRm9ySWQoaWQ6IHN0cmluZyk6IFByb21pc2U8VXNlckludGVybmFsIHwgbnVsbD4ge1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSd2ZSBjbGVhcmVkIGFueSBwZW5kaW5nIHBlcnNpc3RlbmNlIGFjdGlvbnMgaWYgd2UncmUgbm90IGluXG4gICAgLy8gdGhlIGluaXRpYWxpemVyXG4gICAgaWYgKHRoaXMuX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMucXVldWUoYXN5bmMgKCkgPT4ge30pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jdXJyZW50VXNlcj8uX3JlZGlyZWN0RXZlbnRJZCA9PT0gaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50VXNlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZWRpcmVjdFVzZXI/Ll9yZWRpcmVjdEV2ZW50SWQgPT09IGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWRpcmVjdFVzZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBfcGVyc2lzdFVzZXJJZkN1cnJlbnQodXNlcjogVXNlckludGVybmFsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHVzZXIgPT09IHRoaXMuY3VycmVudFVzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXVlKGFzeW5jICgpID0+IHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcih1c2VyKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIE5vdGlmaWVzIGxpc3RlbmVycyBvbmx5IGlmIHRoZSB1c2VyIGlzIGN1cnJlbnQgKi9cbiAgX25vdGlmeUxpc3RlbmVyc0lmQ3VycmVudCh1c2VyOiBVc2VySW50ZXJuYWwpOiB2b2lkIHtcbiAgICBpZiAodXNlciA9PT0gdGhpcy5jdXJyZW50VXNlcikge1xuICAgICAgdGhpcy5ub3RpZnlBdXRoTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgX2tleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZy5hdXRoRG9tYWlufToke3RoaXMuY29uZmlnLmFwaUtleX06JHt0aGlzLm5hbWV9YDtcbiAgfVxuXG4gIF9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTogdm9pZCB7XG4gICAgdGhpcy5pc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5jdXJyZW50VXNlcikge1xuICAgICAgdGhpcy5fY3VycmVudFVzZXIuX3N0YXJ0UHJvYWN0aXZlUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIF9zdG9wUHJvYWN0aXZlUmVmcmVzaCgpOiB2b2lkIHtcbiAgICB0aGlzLmlzUHJvYWN0aXZlUmVmcmVzaEVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5jdXJyZW50VXNlcikge1xuICAgICAgdGhpcy5fY3VycmVudFVzZXIuX3N0b3BQcm9hY3RpdmVSZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIFJldHVybnMgdGhlIGN1cnJlbnQgdXNlciBjYXN0IGFzIHRoZSBpbnRlcm5hbCB0eXBlICovXG4gIGdldCBfY3VycmVudFVzZXIoKTogVXNlckludGVybmFsIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VXNlciBhcyBVc2VySW50ZXJuYWw7XG4gIH1cblxuICBwcml2YXRlIG5vdGlmeUF1dGhMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9pc0luaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pZFRva2VuU3Vic2NyaXB0aW9uLm5leHQodGhpcy5jdXJyZW50VXNlcik7XG5cbiAgICBjb25zdCBjdXJyZW50VWlkID0gdGhpcy5jdXJyZW50VXNlcj8udWlkID8/IG51bGw7XG4gICAgaWYgKHRoaXMubGFzdE5vdGlmaWVkVWlkICE9PSBjdXJyZW50VWlkKSB7XG4gICAgICB0aGlzLmxhc3ROb3RpZmllZFVpZCA9IGN1cnJlbnRVaWQ7XG4gICAgICB0aGlzLmF1dGhTdGF0ZVN1YnNjcmlwdGlvbi5uZXh0KHRoaXMuY3VycmVudFVzZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJTdGF0ZUxpc3RlbmVyKFxuICAgIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uPFVzZXI+LFxuICAgIG5leHRPck9ic2VydmVyOiBOZXh0T3JPYnNlcnZlcjxVc2VyPixcbiAgICBlcnJvcj86IEVycm9yRm4sXG4gICAgY29tcGxldGVkPzogQ29tcGxldGVGblxuICApOiBVbnN1YnNjcmliZSB7XG4gICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBjYiA9XG4gICAgICB0eXBlb2YgbmV4dE9yT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBuZXh0T3JPYnNlcnZlclxuICAgICAgICA6IG5leHRPck9ic2VydmVyLm5leHQuYmluZChuZXh0T3JPYnNlcnZlcik7XG5cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5faXNJbml0aWFsaXplZFxuICAgICAgPyBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgOiB0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gICAgX2Fzc2VydChwcm9taXNlLCB0aGlzLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICAvLyBUaGUgY2FsbGJhY2sgbmVlZHMgdG8gYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IHBlciB0aGUgc3BlYy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgcHJvbWlzZS50aGVuKCgpID0+IGNiKHRoaXMuY3VycmVudFVzZXIpKTtcblxuICAgIGlmICh0eXBlb2YgbmV4dE9yT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24uYWRkT2JzZXJ2ZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLmFkZE9ic2VydmVyKG5leHRPck9ic2VydmVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5wcm90ZWN0ZWQgKGZyb20gcmFjZSBjb25kaXRpb25zKSBtZXRob2QgdG8gc2V0IHRoZSBjdXJyZW50IHVzZXIuIFRoaXNcbiAgICogc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gd2l0aGluIGEgcXVldWVkIGNhbGxiYWNrLiBUaGlzIGlzIG5lY2Vzc2FyeVxuICAgKiBiZWNhdXNlIHRoZSBxdWV1ZSBzaG91bGRuJ3QgcmVseSBvbiBhbm90aGVyIHF1ZXVlZCBjYWxsYmFjay5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZGlyZWN0bHlTZXRDdXJyZW50VXNlcihcbiAgICB1c2VyOiBVc2VySW50ZXJuYWwgfCBudWxsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmN1cnJlbnRVc2VyICYmIHRoaXMuY3VycmVudFVzZXIgIT09IHVzZXIpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRVc2VyLl9zdG9wUHJvYWN0aXZlUmVmcmVzaCgpO1xuICAgIH1cbiAgICBpZiAodXNlciAmJiB0aGlzLmlzUHJvYWN0aXZlUmVmcmVzaEVuYWJsZWQpIHtcbiAgICAgIHVzZXIuX3N0YXJ0UHJvYWN0aXZlUmVmcmVzaCgpO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudFVzZXIgPSB1c2VyO1xuXG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuYXNzZXJ0ZWRQZXJzaXN0ZW5jZS5zZXRDdXJyZW50VXNlcih1c2VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLnJlbW92ZUN1cnJlbnRVc2VyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBxdWV1ZShhY3Rpb246IEFzeW5jQWN0aW9uKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gSW4gY2FzZSBzb21ldGhpbmcgZXJyb3JzLCB0aGUgY2FsbGJhY2sgc3RpbGwgc2hvdWxkIGJlIGNhbGxlZCBpbiBvcmRlclxuICAgIC8vIHRvIGtlZXAgdGhlIHByb21pc2UgY2hhaW4gYWxpdmVcbiAgICB0aGlzLm9wZXJhdGlvbnMgPSB0aGlzLm9wZXJhdGlvbnMudGhlbihhY3Rpb24sIGFjdGlvbik7XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGFzc2VydGVkUGVyc2lzdGVuY2UoKTogUGVyc2lzdGVuY2VVc2VyTWFuYWdlciB7XG4gICAgX2Fzc2VydCh0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciwgdGhpcywgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyO1xuICB9XG5cbiAgcHJpdmF0ZSBmcmFtZXdvcmtzOiBzdHJpbmdbXSA9IFtdO1xuICBwcml2YXRlIGNsaWVudFZlcnNpb246IHN0cmluZztcbiAgX2xvZ0ZyYW1ld29yayhmcmFtZXdvcms6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghZnJhbWV3b3JrIHx8IHRoaXMuZnJhbWV3b3Jrcy5pbmNsdWRlcyhmcmFtZXdvcmspKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZnJhbWV3b3Jrcy5wdXNoKGZyYW1ld29yayk7XG5cbiAgICAvLyBTb3J0IGFscGhhYmV0aWNhbGx5IHNvIHRoYXQgXCJGaXJlYmFzZUNvcmUtd2ViLEZpcmViYXNlVUktd2ViXCIgYW5kXG4gICAgLy8gXCJGaXJlYmFzZVVJLXdlYixGaXJlYmFzZUNvcmUtd2ViXCIgYXJlbid0IHZpZXdlZCBhcyBkaWZmZXJlbnQuXG4gICAgdGhpcy5mcmFtZXdvcmtzLnNvcnQoKTtcbiAgICB0aGlzLmNsaWVudFZlcnNpb24gPSBfZ2V0Q2xpZW50VmVyc2lvbihcbiAgICAgIHRoaXMuY29uZmlnLmNsaWVudFBsYXRmb3JtLFxuICAgICAgdGhpcy5fZ2V0RnJhbWV3b3JrcygpXG4gICAgKTtcbiAgfVxuICBfZ2V0RnJhbWV3b3JrcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWV3b3JrcztcbiAgfVxuICBhc3luYyBfZ2V0QWRkaXRpb25hbEhlYWRlcnMoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XG4gICAgLy8gQWRkaXRpb25hbCBoZWFkZXJzIG9uIGV2ZXJ5IHJlcXVlc3RcbiAgICBjb25zdCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgW0h0dHBIZWFkZXIuWF9DTElFTlRfVkVSU0lPTl06IHRoaXMuY2xpZW50VmVyc2lvblxuICAgIH07XG5cbiAgICBpZiAodGhpcy5hcHAub3B0aW9ucy5hcHBJZCkge1xuICAgICAgaGVhZGVyc1tIdHRwSGVhZGVyLlhfRklSRUJBU0VfR01QSURdID0gdGhpcy5hcHAub3B0aW9ucy5hcHBJZDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgaGVhcnRiZWF0IHNlcnZpY2UgZXhpc3RzLCBhZGQgdGhlIGhlYXJ0YmVhdCBzdHJpbmdcbiAgICBjb25zdCBoZWFydGJlYXRzSGVhZGVyID0gYXdhaXQgdGhpcy5oZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXJcbiAgICAgIC5nZXRJbW1lZGlhdGUoe1xuICAgICAgICBvcHRpb25hbDogdHJ1ZVxuICAgICAgfSlcbiAgICAgID8uZ2V0SGVhcnRiZWF0c0hlYWRlcigpO1xuICAgIGlmIChoZWFydGJlYXRzSGVhZGVyKSB7XG4gICAgICBoZWFkZXJzW0h0dHBIZWFkZXIuWF9GSVJFQkFTRV9DTElFTlRdID0gaGVhcnRiZWF0c0hlYWRlcjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgQXBwIENoZWNrIHNlcnZpY2UgZXhpc3RzLCBhZGQgdGhlIEFwcCBDaGVjayB0b2tlbiBpbiB0aGUgaGVhZGVyc1xuICAgIGNvbnN0IGFwcENoZWNrVG9rZW4gPSBhd2FpdCB0aGlzLl9nZXRBcHBDaGVja1Rva2VuKCk7XG4gICAgaWYgKGFwcENoZWNrVG9rZW4pIHtcbiAgICAgIGhlYWRlcnNbSHR0cEhlYWRlci5YX0ZJUkVCQVNFX0FQUF9DSEVDS10gPSBhcHBDaGVja1Rva2VuO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9XG5cbiAgYXN5bmMgX2dldEFwcENoZWNrVG9rZW4oKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBhcHBDaGVja1Rva2VuUmVzdWx0ID0gYXdhaXQgdGhpcy5hcHBDaGVja1NlcnZpY2VQcm92aWRlclxuICAgICAgLmdldEltbWVkaWF0ZSh7IG9wdGlvbmFsOiB0cnVlIH0pXG4gICAgICA/LmdldFRva2VuKCk7XG4gICAgaWYgKGFwcENoZWNrVG9rZW5SZXN1bHQ/LmVycm9yKSB7XG4gICAgICAvLyBDb250ZXh0OiBhcHBDaGVjay5nZXRUb2tlbigpIHdpbGwgbmV2ZXIgdGhyb3cgZXZlbiBpZiBhbiBlcnJvciBoYXBwZW5lZC5cbiAgICAgIC8vIEluIHRoZSBlcnJvciBjYXNlLCBhIGR1bW15IHRva2VuIHdpbGwgYmUgcmV0dXJuZWQgYWxvbmcgd2l0aCBhbiBlcnJvciBmaWVsZCBkZXNjcmliaW5nXG4gICAgICAvLyB0aGUgZXJyb3IuIEluIGdlbmVyYWwsIHdlIHNob3VsZG4ndCBjYXJlIGFib3V0IHRoZSBlcnJvciBjb25kaXRpb24gYW5kIGp1c3QgdXNlXG4gICAgICAvLyB0aGUgdG9rZW4gKGFjdHVhbCBvciBkdW1teSkgdG8gc2VuZCByZXF1ZXN0cy5cbiAgICAgIF9sb2dXYXJuKFxuICAgICAgICBgRXJyb3Igd2hpbGUgcmV0cmlldmluZyBBcHAgQ2hlY2sgdG9rZW46ICR7YXBwQ2hlY2tUb2tlblJlc3VsdC5lcnJvcn1gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXBwQ2hlY2tUb2tlblJlc3VsdD8udG9rZW47XG4gIH1cbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgdXNlZCB0byBjYXN0IGRvd24gdG8gb3VyIHByaXZhdGUgaW1wbG1lbnRhdGlvbiBvZiBBdXRoLlxuICogSXQgd2lsbCBhbHNvIGhhbmRsZSB1bndyYXBwaW5nIGZyb20gdGhlIGNvbXBhdCB0eXBlIGlmIG5lY2Vzc2FyeVxuICpcbiAqIEBwYXJhbSBhdXRoIEF1dGggb2JqZWN0IHBhc3NlZCBpbiBmcm9tIGRldmVsb3BlclxuICovXG5leHBvcnQgZnVuY3Rpb24gX2Nhc3RBdXRoKGF1dGg6IEF1dGgpOiBBdXRoSW50ZXJuYWwge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpIGFzIEF1dGhJbnRlcm5hbDtcbn1cblxuLyoqIEhlbHBlciBjbGFzcyB0byB3cmFwIHN1YnNjcmliZXIgbG9naWMgKi9cbmNsYXNzIFN1YnNjcmlwdGlvbjxUPiB7XG4gIHByaXZhdGUgb2JzZXJ2ZXI6IE9ic2VydmVyPFQgfCBudWxsPiB8IG51bGwgPSBudWxsO1xuICByZWFkb25seSBhZGRPYnNlcnZlcjogU3Vic2NyaWJlPFQgfCBudWxsPiA9IGNyZWF0ZVN1YnNjcmliZShcbiAgICBvYnNlcnZlciA9PiAodGhpcy5vYnNlcnZlciA9IG9ic2VydmVyKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCkge31cblxuICBnZXQgbmV4dCgpOiBOZXh0Rm48VCB8IG51bGw+IHtcbiAgICBfYXNzZXJ0KHRoaXMub2JzZXJ2ZXIsIHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXIubmV4dC5iaW5kKHRoaXMub2JzZXJ2ZXIpO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfZ2V0UHJvdmlkZXIsIEZpcmViYXNlQXBwIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBkZWVwRXF1YWwgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoLCBEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IFBlcnNpc3RlbmNlSW50ZXJuYWwgfSBmcm9tICcuLi9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBfZmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uL3V0aWwvaW5zdGFudGlhdG9yJztcbmltcG9ydCB7IEF1dGhJbXBsIH0gZnJvbSAnLi9hdXRoX2ltcGwnO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIHtAbGluayBBdXRofSBpbnN0YW5jZSB3aXRoIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXJcbiAqIHtAbGluayBEZXBlbmRlbmNpZXN9LlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgbW9yZSBjb250cm9sIG92ZXIgdGhlIHtAbGluayBBdXRofSBpbnN0YW5jZSB0aGFuXG4gKiB7QGxpbmsgZ2V0QXV0aH0uIGBnZXRBdXRoYCB1c2VzIHBsYXRmb3JtLXNwZWNpZmljIGRlZmF1bHRzIHRvIHN1cHBseVxuICogdGhlIHtAbGluayBEZXBlbmRlbmNpZXN9LiBJbiBnZW5lcmFsLCBgZ2V0QXV0aGAgaXMgdGhlIGVhc2llc3Qgd2F5IHRvXG4gKiBpbml0aWFsaXplIEF1dGggYW5kIHdvcmtzIGZvciBtb3N0IHVzZSBjYXNlcy4gVXNlIGBpbml0aWFsaXplQXV0aGAgaWYgeW91XG4gKiBuZWVkIGNvbnRyb2wgb3ZlciB3aGljaCBwZXJzaXN0ZW5jZSBsYXllciBpcyB1c2VkLCBvciB0byBtaW5pbWl6ZSBidW5kbGVcbiAqIHNpemUgaWYgeW91J3JlIG5vdCB1c2luZyBlaXRoZXIgYHNpZ25JbldpdGhQb3B1cGAgb3IgYHNpZ25JbldpdGhSZWRpcmVjdGAuXG4gKlxuICogRm9yIGV4YW1wbGUsIGlmIHlvdXIgYXBwIG9ubHkgdXNlcyBhbm9ueW1vdXMgYWNjb3VudHMgYW5kIHlvdSBvbmx5IHdhbnRcbiAqIGFjY291bnRzIHNhdmVkIGZvciB0aGUgY3VycmVudCBzZXNzaW9uLCBpbml0aWFsaXplIGBBdXRoYCB3aXRoOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBhdXRoID0gaW5pdGlhbGl6ZUF1dGgoYXBwLCB7XG4gKiAgIHBlcnNpc3RlbmNlOiBicm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlLFxuICogICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IHVuZGVmaW5lZCxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUF1dGgoYXBwOiBGaXJlYmFzZUFwcCwgZGVwcz86IERlcGVuZGVuY2llcyk6IEF1dGgge1xuICBjb25zdCBwcm92aWRlciA9IF9nZXRQcm92aWRlcihhcHAsICdhdXRoJyk7XG5cbiAgaWYgKHByb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSkge1xuICAgIGNvbnN0IGF1dGggPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKSBhcyBBdXRoSW1wbDtcbiAgICBjb25zdCBpbml0aWFsT3B0aW9ucyA9IHByb3ZpZGVyLmdldE9wdGlvbnMoKSBhcyBEZXBlbmRlbmNpZXM7XG4gICAgaWYgKGRlZXBFcXVhbChpbml0aWFsT3B0aW9ucywgZGVwcyA/PyB7fSkpIHtcbiAgICAgIHJldHVybiBhdXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLkFMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGF1dGggPSBwcm92aWRlci5pbml0aWFsaXplKHsgb3B0aW9uczogZGVwcyB9KSBhcyBBdXRoSW1wbDtcblxuICByZXR1cm4gYXV0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pbml0aWFsaXplQXV0aEluc3RhbmNlKFxuICBhdXRoOiBBdXRoSW1wbCxcbiAgZGVwcz86IERlcGVuZGVuY2llc1xuKTogdm9pZCB7XG4gIGNvbnN0IHBlcnNpc3RlbmNlID0gZGVwcz8ucGVyc2lzdGVuY2UgfHwgW107XG4gIGNvbnN0IGhpZXJhcmNoeSA9IChcbiAgICBBcnJheS5pc0FycmF5KHBlcnNpc3RlbmNlKSA/IHBlcnNpc3RlbmNlIDogW3BlcnNpc3RlbmNlXVxuICApLm1hcDxQZXJzaXN0ZW5jZUludGVybmFsPihfZ2V0SW5zdGFuY2UpO1xuICBpZiAoZGVwcz8uZXJyb3JNYXApIHtcbiAgICBhdXRoLl91cGRhdGVFcnJvck1hcChkZXBzLmVycm9yTWFwKTtcbiAgfVxuXG4gIC8vIFRoaXMgcHJvbWlzZSBpcyBpbnRlbmRlZCB0byBmbG9hdDsgYXV0aCBpbml0aWFsaXphdGlvbiBoYXBwZW5zIGluIHRoZVxuICAvLyBiYWNrZ3JvdW5kLCBtZWFud2hpbGUgdGhlIGF1dGggb2JqZWN0IG1heSBiZSB1c2VkIGJ5IHRoZSBhcHAuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgYXV0aC5faW5pdGlhbGl6ZVdpdGhQZXJzaXN0ZW5jZShoaWVyYXJjaHksIGRlcHM/LnBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuL2F1dGhfaW1wbCc7XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUge0BsaW5rIEF1dGh9IGluc3RhbmNlIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIEZpcmViYXNlIEF1dGggRW11bGF0b3IsIGluc3RlYWQgb2YgcHJvZHVjdGlvblxuICogRmlyZWJhc2UgQXV0aCBzZXJ2aWNlcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5IGltbWVkaWF0ZWx5IGZvbGxvd2luZyB0aGUgZmlyc3QgY2FsbCB0b1xuICoge0BsaW5rIGluaXRpYWxpemVBdXRofS4gIERvIG5vdCB1c2Ugd2l0aCBwcm9kdWN0aW9uIGNyZWRlbnRpYWxzIGFzIGVtdWxhdG9yXG4gKiB0cmFmZmljIGlzIG5vdCBlbmNyeXB0ZWQuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25uZWN0QXV0aEVtdWxhdG9yKGF1dGgsICdodHRwOi8vMTI3LjAuMC4xOjkwOTknLCB7IGRpc2FibGVXYXJuaW5nczogdHJ1ZSB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB1cmwgLSBUaGUgVVJMIGF0IHdoaWNoIHRoZSBlbXVsYXRvciBpcyBydW5uaW5nIChlZywgJ2h0dHA6Ly9sb2NhbGhvc3Q6OTA5OScpLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gYG9wdGlvbnMuZGlzYWJsZVdhcm5pbmdzYCBkZWZhdWx0cyB0byBgZmFsc2VgLiBTZXQgaXQgdG9cbiAqIGB0cnVlYCB0byBkaXNhYmxlIHRoZSB3YXJuaW5nIGJhbm5lciBhdHRhY2hlZCB0byB0aGUgRE9NLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RBdXRoRW11bGF0b3IoXG4gIGF1dGg6IEF1dGgsXG4gIHVybDogc3RyaW5nLFxuICBvcHRpb25zPzogeyBkaXNhYmxlV2FybmluZ3M6IGJvb2xlYW4gfVxuKTogdm9pZCB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgX2Fzc2VydChcbiAgICBhdXRoSW50ZXJuYWwuX2NhbkluaXRFbXVsYXRvcixcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgQXV0aEVycm9yQ29kZS5FTVVMQVRPUl9DT05GSUdfRkFJTEVEXG4gICk7XG5cbiAgX2Fzc2VydChcbiAgICAvXmh0dHBzPzpcXC9cXC8vLnRlc3QodXJsKSxcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX0VNVUxBVE9SX1NDSEVNRVxuICApO1xuXG4gIGNvbnN0IGRpc2FibGVXYXJuaW5ncyA9ICEhb3B0aW9ucz8uZGlzYWJsZVdhcm5pbmdzO1xuXG4gIGNvbnN0IHByb3RvY29sID0gZXh0cmFjdFByb3RvY29sKHVybCk7XG4gIGNvbnN0IHsgaG9zdCwgcG9ydCB9ID0gZXh0cmFjdEhvc3RBbmRQb3J0KHVybCk7XG4gIGNvbnN0IHBvcnRTdHIgPSBwb3J0ID09PSBudWxsID8gJycgOiBgOiR7cG9ydH1gO1xuXG4gIC8vIEFsd2F5cyByZXBsYWNlIHBhdGggd2l0aCBcIi9cIiAoZXZlbiBpZiBpbnB1dCB1cmwgaGFkIG5vIHBhdGggYXQgYWxsLCBvciBoYWQgYSBkaWZmZXJlbnQgb25lKS5cbiAgYXV0aEludGVybmFsLmNvbmZpZy5lbXVsYXRvciA9IHsgdXJsOiBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke3BvcnRTdHJ9L2AgfTtcbiAgYXV0aEludGVybmFsLnNldHRpbmdzLmFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZyA9IHRydWU7XG4gIGF1dGhJbnRlcm5hbC5lbXVsYXRvckNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICAgIGhvc3QsXG4gICAgcG9ydCxcbiAgICBwcm90b2NvbDogcHJvdG9jb2wucmVwbGFjZSgnOicsICcnKSxcbiAgICBvcHRpb25zOiBPYmplY3QuZnJlZXplKHsgZGlzYWJsZVdhcm5pbmdzIH0pXG4gIH0pO1xuXG4gIGlmICghZGlzYWJsZVdhcm5pbmdzKSB7XG4gICAgZW1pdEVtdWxhdG9yV2FybmluZygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm90b2NvbCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHByb3RvY29sRW5kID0gdXJsLmluZGV4T2YoJzonKTtcbiAgcmV0dXJuIHByb3RvY29sRW5kIDwgMCA/ICcnIDogdXJsLnN1YnN0cigwLCBwcm90b2NvbEVuZCArIDEpO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SG9zdEFuZFBvcnQodXJsOiBzdHJpbmcpOiB7XG4gIGhvc3Q6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyIHwgbnVsbDtcbn0ge1xuICBjb25zdCBwcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbCh1cmwpO1xuICBjb25zdCBhdXRob3JpdHkgPSAvKFxcL1xcLyk/KFtePyMvXSspLy5leGVjKHVybC5zdWJzdHIocHJvdG9jb2wubGVuZ3RoKSk7IC8vIEJldHdlZW4gLy8gYW5kIC8sID8gb3IgIy5cbiAgaWYgKCFhdXRob3JpdHkpIHtcbiAgICByZXR1cm4geyBob3N0OiAnJywgcG9ydDogbnVsbCB9O1xuICB9XG4gIGNvbnN0IGhvc3RBbmRQb3J0ID0gYXV0aG9yaXR5WzJdLnNwbGl0KCdAJykucG9wKCkgfHwgJyc7IC8vIFN0cmlwIG91dCBcInVzZXJuYW1lOnBhc3N3b3JkQFwiLlxuICBjb25zdCBicmFja2V0ZWRJUHY2ID0gL14oXFxbW15cXF1dK1xcXSkoOnwkKS8uZXhlYyhob3N0QW5kUG9ydCk7XG4gIGlmIChicmFja2V0ZWRJUHY2KSB7XG4gICAgY29uc3QgaG9zdCA9IGJyYWNrZXRlZElQdjZbMV07XG4gICAgcmV0dXJuIHsgaG9zdCwgcG9ydDogcGFyc2VQb3J0KGhvc3RBbmRQb3J0LnN1YnN0cihob3N0Lmxlbmd0aCArIDEpKSB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtob3N0LCBwb3J0XSA9IGhvc3RBbmRQb3J0LnNwbGl0KCc6Jyk7XG4gICAgcmV0dXJuIHsgaG9zdCwgcG9ydDogcGFyc2VQb3J0KHBvcnQpIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VQb3J0KHBvcnRTdHI6IHN0cmluZyk6IG51bWJlciB8IG51bGwge1xuICBpZiAoIXBvcnRTdHIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBwb3J0ID0gTnVtYmVyKHBvcnRTdHIpO1xuICBpZiAoaXNOYU4ocG9ydCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcG9ydDtcbn1cblxuZnVuY3Rpb24gZW1pdEVtdWxhdG9yV2FybmluZygpOiB2b2lkIHtcbiAgZnVuY3Rpb24gYXR0YWNoQmFubmVyKCk6IHZvaWQge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IHN0eSA9IGVsLnN0eWxlO1xuICAgIGVsLmlubmVyVGV4dCA9XG4gICAgICAnUnVubmluZyBpbiBlbXVsYXRvciBtb2RlLiBEbyBub3QgdXNlIHdpdGggcHJvZHVjdGlvbiBjcmVkZW50aWFscy4nO1xuICAgIHN0eS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgc3R5LndpZHRoID0gJzEwMCUnO1xuICAgIHN0eS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZmZmZic7XG4gICAgc3R5LmJvcmRlciA9ICcuMWVtIHNvbGlkICMwMDAwMDAnO1xuICAgIHN0eS5jb2xvciA9ICcjYjUwMDAwJztcbiAgICBzdHkuYm90dG9tID0gJzBweCc7XG4gICAgc3R5LmxlZnQgPSAnMHB4JztcbiAgICBzdHkubWFyZ2luID0gJzBweCc7XG4gICAgc3R5LnpJbmRleCA9ICcxMDAwMCc7XG4gICAgc3R5LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZpcmViYXNlLWVtdWxhdG9yLXdhcm5pbmcnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuaW5mbyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgICdXQVJOSU5HOiBZb3UgYXJlIHVzaW5nIHRoZSBBdXRoIEVtdWxhdG9yLCcgK1xuICAgICAgICAnIHdoaWNoIGlzIGludGVuZGVkIGZvciBsb2NhbCB0ZXN0aW5nIG9ubHkuICBEbyBub3QgdXNlIHdpdGgnICtcbiAgICAgICAgJyBwcm9kdWN0aW9uIGNyZWRlbnRpYWxzLidcbiAgICApO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBhdHRhY2hCYW5uZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhdHRhY2hCYW5uZXIoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBob25lT3JPYXV0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgZGVidWdGYWlsIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuXG4vKipcbiAqIEludGVyZmFjZSB0aGF0IHJlcHJlc2VudHMgdGhlIGNyZWRlbnRpYWxzIHJldHVybmVkIGJ5IGFuIHtAbGluayBBdXRoUHJvdmlkZXJ9LlxuICpcbiAqIEByZW1hcmtzXG4gKiBJbXBsZW1lbnRhdGlvbnMgc3BlY2lmeSB0aGUgZGV0YWlscyBhYm91dCBlYWNoIGF1dGggcHJvdmlkZXIncyBjcmVkZW50aWFsIHJlcXVpcmVtZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoQ3JlZGVudGlhbCB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBhdXRoZW50aWNhdGlvbiBwcm92aWRlciBJRCBmb3IgdGhlIGNyZWRlbnRpYWwuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIEZvciBleGFtcGxlLCAnZmFjZWJvb2suY29tJywgb3IgJ2dvb2dsZS5jb20nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb3ZpZGVySWQ6IHN0cmluZyxcbiAgICAvKipcbiAgICAgKiBUaGUgYXV0aGVudGljYXRpb24gc2lnbiBpbiBtZXRob2QgZm9yIHRoZSBjcmVkZW50aWFsLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBGb3IgZXhhbXBsZSwge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfUEFTU1dPUkQsIG9yXG4gICAgICoge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfTElOSy4gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgc2lnbi1pbiBtZXRob2RcbiAgICAgKiBpZGVudGlmaWVyIGFzIHJldHVybmVkIGluIHtAbGluayBmZXRjaFNpZ25Jbk1ldGhvZHNGb3JFbWFpbH0uXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2lnbkluTWV0aG9kOiBzdHJpbmdcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKTogb2JqZWN0IHtcbiAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2dldElkVG9rZW5SZXNwb25zZShfYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGRlYnVnRmFpbCgnbm90IGltcGxlbWVudGVkJyk7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfbGlua1RvSWRUb2tlbihcbiAgICBfYXV0aDogQXV0aEludGVybmFsLFxuICAgIF9pZFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoX2F1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGRlYnVnRmFpbCgnbm90IGltcGxlbWVudGVkJyk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFjdGlvbkNvZGVPcGVyYXRpb24sIEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQge1xuICBFbmRwb2ludCxcbiAgSHR0cE1ldGhvZCxcbiAgX2FkZFRpZElmTmVjZXNzYXJ5LFxuICBfcGVyZm9ybUFwaVJlcXVlc3Rcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgTWZhRW5yb2xsbWVudCB9IGZyb20gJy4vbWZhJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNldFBhc3N3b3JkUmVxdWVzdCB7XG4gIG9vYkNvZGU6IHN0cmluZztcbiAgbmV3UGFzc3dvcmQ/OiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc2V0UGFzc3dvcmRSZXNwb25zZSB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG5ld0VtYWlsPzogc3RyaW5nO1xuICByZXF1ZXN0VHlwZT86IEFjdGlvbkNvZGVPcGVyYXRpb247XG4gIG1mYUluZm8/OiBNZmFFbnJvbGxtZW50O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzZXRQYXNzd29yZChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogUmVzZXRQYXNzd29yZFJlcXVlc3Rcbik6IFByb21pc2U8UmVzZXRQYXNzd29yZFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8UmVzZXRQYXNzd29yZFJlcXVlc3QsIFJlc2V0UGFzc3dvcmRSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuUkVTRVRfUEFTU1dPUkQsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICByZXR1cm5TZWN1cmVUb2tlbj86IGJvb2xlYW47XG4gIGVtYWlsPzogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVFbWFpbFBhc3N3b3JkUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge31cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUVtYWlsUGFzc3dvcmQoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0XG4pOiBQcm9taXNlPFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFxuICAgIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0LFxuICAgIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXNwb25zZVxuICA+KGF1dGgsIEh0dHBNZXRob2QuUE9TVCwgRW5kcG9pbnQuU0VUX0FDQ09VTlRfSU5GTywgcmVxdWVzdCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbHlBY3Rpb25Db2RlUmVxdWVzdCB7XG4gIG9vYkNvZGU6IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbHlBY3Rpb25Db2RlUmVzcG9uc2Uge31cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwcGx5QWN0aW9uQ29kZShcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogQXBwbHlBY3Rpb25Db2RlUmVxdWVzdFxuKTogUHJvbWlzZTxBcHBseUFjdGlvbkNvZGVSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PEFwcGx5QWN0aW9uQ29kZVJlcXVlc3QsIEFwcGx5QWN0aW9uQ29kZVJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TRVRfQUNDT1VOVF9JTkZPLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWN0aW9uQ29kZU9wZXJhdGlvbiwgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBSZWNhcHRjaGFDbGllbnRUeXBlLFxuICBSZWNhcHRjaGFWZXJzaW9uLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9wZXJmb3JtQXBpUmVxdWVzdCxcbiAgX3BlcmZvcm1TaWduSW5SZXF1ZXN0XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IElkVG9rZW4sIElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcblxuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoUGFzc3dvcmRSZXF1ZXN0IHtcbiAgcmV0dXJuU2VjdXJlVG9rZW4/OiBib29sZWFuO1xuICBlbWFpbDogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbiAgY2FwdGNoYVJlc3BvbnNlPzogc3RyaW5nO1xuICBjbGllbnRUeXBlPzogUmVjYXB0Y2hhQ2xpZW50VHlwZTtcbiAgcmVjYXB0Y2hhVmVyc2lvbj86IFJlY2FwdGNoYVZlcnNpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aFBhc3N3b3JkUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBlbWFpbDogc3RyaW5nO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBhc3N3b3JkKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoUGFzc3dvcmRSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhQYXNzd29yZFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8XG4gICAgU2lnbkluV2l0aFBhc3N3b3JkUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoUGFzc3dvcmRSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9QQVNTV09SRCxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRPb2JDb2RlUmVxdWVzdCB7XG4gIGVtYWlsPzogc3RyaW5nOyAvLyBFdmVyeXRoaW5nIGV4Y2VwdCBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFxuICBjb250aW51ZVVybD86IHN0cmluZztcbiAgaU9TQnVuZGxlSWQ/OiBzdHJpbmc7XG4gIGlvc0FwcFN0b3JlSWQ/OiBzdHJpbmc7XG4gIGFuZHJvaWRQYWNrYWdlTmFtZT86IHN0cmluZztcbiAgYW5kcm9pZEluc3RhbGxBcHA/OiBib29sZWFuO1xuICBhbmRyb2lkTWluaW11bVZlcnNpb25Db2RlPzogc3RyaW5nO1xuICBjYW5IYW5kbGVDb2RlSW5BcHA/OiBib29sZWFuO1xuICBkeW5hbWljTGlua0RvbWFpbj86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG4gIHRhcmdldFByb2plY3RpZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZXJpZnlFbWFpbFJlcXVlc3QgZXh0ZW5kcyBHZXRPb2JDb2RlUmVxdWVzdCB7XG4gIHJlcXVlc3RUeXBlOiBBY3Rpb25Db2RlT3BlcmF0aW9uLlZFUklGWV9FTUFJTDtcbiAgaWRUb2tlbjogSWRUb2tlbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXNzd29yZFJlc2V0UmVxdWVzdCBleHRlbmRzIEdldE9vYkNvZGVSZXF1ZXN0IHtcbiAgcmVxdWVzdFR5cGU6IEFjdGlvbkNvZGVPcGVyYXRpb24uUEFTU1dPUkRfUkVTRVQ7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGNhcHRjaGFSZXNwPzogc3RyaW5nO1xuICBjbGllbnRUeXBlPzogUmVjYXB0Y2hhQ2xpZW50VHlwZTtcbiAgcmVjYXB0Y2hhVmVyc2lvbj86IFJlY2FwdGNoYVZlcnNpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW1haWxTaWduSW5SZXF1ZXN0IGV4dGVuZHMgR2V0T29iQ29kZVJlcXVlc3Qge1xuICByZXF1ZXN0VHlwZTogQWN0aW9uQ29kZU9wZXJhdGlvbi5FTUFJTF9TSUdOSU47XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGNhcHRjaGFSZXNwPzogc3RyaW5nO1xuICBjbGllbnRUeXBlPzogUmVjYXB0Y2hhQ2xpZW50VHlwZTtcbiAgcmVjYXB0Y2hhVmVyc2lvbj86IFJlY2FwdGNoYVZlcnNpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyaWZ5QW5kQ2hhbmdlRW1haWxSZXF1ZXN0IGV4dGVuZHMgR2V0T29iQ29kZVJlcXVlc3Qge1xuICByZXF1ZXN0VHlwZTogQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfQU5EX0NIQU5HRV9FTUFJTDtcbiAgaWRUb2tlbjogSWRUb2tlbjtcbiAgbmV3RW1haWw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEdldE9vYkNvZGVSZXNwb25zZSB7XG4gIGVtYWlsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyaWZ5RW1haWxSZXNwb25zZSBleHRlbmRzIEdldE9vYkNvZGVSZXNwb25zZSB7fVxuZXhwb3J0IGludGVyZmFjZSBQYXNzd29yZFJlc2V0UmVzcG9uc2UgZXh0ZW5kcyBHZXRPb2JDb2RlUmVzcG9uc2Uge31cbmV4cG9ydCBpbnRlcmZhY2UgRW1haWxTaWduSW5SZXNwb25zZSBleHRlbmRzIEdldE9vYkNvZGVSZXNwb25zZSB7fVxuZXhwb3J0IGludGVyZmFjZSBWZXJpZnlBbmRDaGFuZ2VFbWFpbFJlc3BvbnNlIGV4dGVuZHMgR2V0T29iQ29kZVJlcXVlc3Qge31cblxuYXN5bmMgZnVuY3Rpb24gc2VuZE9vYkNvZGUoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IEdldE9vYkNvZGVSZXF1ZXN0XG4pOiBQcm9taXNlPEdldE9vYkNvZGVSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PEdldE9vYkNvZGVSZXF1ZXN0LCBHZXRPb2JDb2RlUmVzcG9uc2U+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNFTkRfT09CX0NPREUsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kRW1haWxWZXJpZmljYXRpb24oXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFZlcmlmeUVtYWlsUmVxdWVzdFxuKTogUHJvbWlzZTxWZXJpZnlFbWFpbFJlc3BvbnNlPiB7XG4gIHJldHVybiBzZW5kT29iQ29kZShhdXRoLCByZXF1ZXN0KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRQYXNzd29yZFJlc2V0RW1haWwoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFBhc3N3b3JkUmVzZXRSZXF1ZXN0XG4pOiBQcm9taXNlPFBhc3N3b3JkUmVzZXRSZXNwb25zZT4ge1xuICByZXR1cm4gc2VuZE9vYkNvZGUoYXV0aCwgcmVxdWVzdCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kU2lnbkluTGlua1RvRW1haWwoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IEVtYWlsU2lnbkluUmVxdWVzdFxuKTogUHJvbWlzZTxFbWFpbFNpZ25JblJlc3BvbnNlPiB7XG4gIHJldHVybiBzZW5kT29iQ29kZShhdXRoLCByZXF1ZXN0KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeUFuZENoYW5nZUVtYWlsKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBWZXJpZnlBbmRDaGFuZ2VFbWFpbFJlcXVlc3Rcbik6IFByb21pc2U8VmVyaWZ5QW5kQ2hhbmdlRW1haWxSZXNwb25zZT4ge1xuICByZXR1cm4gc2VuZE9vYkNvZGUoYXV0aCwgcmVxdWVzdCk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBfcGVyZm9ybVNpZ25JblJlcXVlc3QsXG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBfYWRkVGlkSWZOZWNlc3Nhcnlcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aEVtYWlsTGlua1JlcXVlc3Qge1xuICBlbWFpbDogc3RyaW5nO1xuICBvb2JDb2RlOiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhFbWFpbExpbmtSZXNwb25zZSBleHRlbmRzIElkVG9rZW5SZXNwb25zZSB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGlzTmV3VXNlcjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhFbWFpbExpbmsoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFNpZ25JbldpdGhFbWFpbExpbmtSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhFbWFpbExpbmtSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0PFxuICAgIFNpZ25JbldpdGhFbWFpbExpbmtSZXF1ZXN0LFxuICAgIFNpZ25JbldpdGhFbWFpbExpbmtSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9FTUFJTF9MSU5LLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhFbWFpbExpbmtGb3JMaW5raW5nUmVxdWVzdFxuICBleHRlbmRzIFNpZ25JbldpdGhFbWFpbExpbmtSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aEVtYWlsTGlua0ZvckxpbmtpbmcoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFNpZ25JbldpdGhFbWFpbExpbmtGb3JMaW5raW5nUmVxdWVzdFxuKTogUHJvbWlzZTxTaWduSW5XaXRoRW1haWxMaW5rUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdDxcbiAgICBTaWduSW5XaXRoRW1haWxMaW5rRm9yTGlua2luZ1JlcXVlc3QsXG4gICAgU2lnbkluV2l0aEVtYWlsTGlua1Jlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9JTl9XSVRIX0VNQUlMX0xJTkssXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQcm92aWRlcklkLCBTaWduSW5NZXRob2QgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbmltcG9ydCB7IHVwZGF0ZUVtYWlsUGFzc3dvcmQgfSBmcm9tICcuLi8uLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQge1xuICBzaWduSW5XaXRoUGFzc3dvcmQsXG4gIFNpZ25JbldpdGhQYXNzd29yZFJlcXVlc3Rcbn0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQge1xuICBzaWduSW5XaXRoRW1haWxMaW5rLFxuICBzaWduSW5XaXRoRW1haWxMaW5rRm9yTGlua2luZ1xufSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vZW1haWxfbGluayc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2ZhaWwgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vYXV0aF9jcmVkZW50aWFsJztcbmltcG9ydCB7IGluamVjdFJlY2FwdGNoYUZpZWxkcyB9IGZyb20gJy4uLy4uL3BsYXRmb3JtX2Jyb3dzZXIvcmVjYXB0Y2hhL3JlY2FwdGNoYV9lbnRlcnByaXNlX3ZlcmlmaWVyJztcbmltcG9ydCB7IFJlY2FwdGNoYUFjdGlvbk5hbWUsIFJlY2FwdGNoYUNsaWVudFR5cGUgfSBmcm9tICcuLi8uLi9hcGknO1xuLyoqXG4gKiBJbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoZSBjcmVkZW50aWFscyByZXR1cm5lZCBieSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IGZvclxuICoge0BsaW5rIFByb3ZpZGVySWR9LlBBU1NXT1JEXG4gKlxuICogQHJlbWFya3NcbiAqIENvdmVycyBib3RoIHtAbGluayBTaWduSW5NZXRob2R9LkVNQUlMX1BBU1NXT1JEIGFuZFxuICoge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfTElOSy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBFbWFpbEF1dGhDcmVkZW50aWFsIGV4dGVuZHMgQXV0aENyZWRlbnRpYWwge1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IF9lbWFpbDogc3RyaW5nLFxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBfcGFzc3dvcmQ6IHN0cmluZyxcbiAgICBzaWduSW5NZXRob2Q6IFNpZ25Jbk1ldGhvZCxcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmVhZG9ubHkgX3RlbmFudElkOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICApIHtcbiAgICBzdXBlcihQcm92aWRlcklkLlBBU1NXT1JELCBzaWduSW5NZXRob2QpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21FbWFpbEFuZFBhc3N3b3JkKFxuICAgIGVtYWlsOiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICApOiBFbWFpbEF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gbmV3IEVtYWlsQXV0aENyZWRlbnRpYWwoXG4gICAgICBlbWFpbCxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgU2lnbkluTWV0aG9kLkVNQUlMX1BBU1NXT1JEXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIF9mcm9tRW1haWxBbmRDb2RlKFxuICAgIGVtYWlsOiBzdHJpbmcsXG4gICAgb29iQ29kZTogc3RyaW5nLFxuICAgIHRlbmFudElkOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICApOiBFbWFpbEF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gbmV3IEVtYWlsQXV0aENyZWRlbnRpYWwoXG4gICAgICBlbWFpbCxcbiAgICAgIG9vYkNvZGUsXG4gICAgICBTaWduSW5NZXRob2QuRU1BSUxfTElOSyxcbiAgICAgIHRlbmFudElkXG4gICAgKTtcbiAgfVxuXG4gIC8qKiB7QGluaGVyaXRkb2MgQXV0aENyZWRlbnRpYWwudG9KU09OfSAqL1xuICB0b0pTT04oKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgZW1haWw6IHRoaXMuX2VtYWlsLFxuICAgICAgcGFzc3dvcmQ6IHRoaXMuX3Bhc3N3b3JkLFxuICAgICAgc2lnbkluTWV0aG9kOiB0aGlzLnNpZ25Jbk1ldGhvZCxcbiAgICAgIHRlbmFudElkOiB0aGlzLl90ZW5hbnRJZFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIG1ldGhvZCB0byBkZXNlcmlhbGl6ZSBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0IGludG8gYW4ge0BsaW5rICBBdXRoQ3JlZGVudGlhbH0uXG4gICAqXG4gICAqIEBwYXJhbSBqc29uIC0gRWl0aGVyIGBvYmplY3RgIG9yIHRoZSBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0LiBXaGVuIHN0cmluZyBpc1xuICAgKiBwcm92aWRlZCwgYEpTT04ucGFyc2VgIHdvdWxkIGJlIGNhbGxlZCBmaXJzdC5cbiAgICpcbiAgICogQHJldHVybnMgSWYgdGhlIEpTT04gaW5wdXQgZG9lcyBub3QgcmVwcmVzZW50IGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0sIG51bGwgaXMgcmV0dXJuZWQuXG4gICAqL1xuICBzdGF0aWMgZnJvbUpTT04oanNvbjogb2JqZWN0IHwgc3RyaW5nKTogRW1haWxBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGNvbnN0IG9iaiA9IHR5cGVvZiBqc29uID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoanNvbikgOiBqc29uO1xuICAgIGlmIChvYmo/LmVtYWlsICYmIG9iaj8ucGFzc3dvcmQpIHtcbiAgICAgIGlmIChvYmouc2lnbkluTWV0aG9kID09PSBTaWduSW5NZXRob2QuRU1BSUxfUEFTU1dPUkQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb21FbWFpbEFuZFBhc3N3b3JkKG9iai5lbWFpbCwgb2JqLnBhc3N3b3JkKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqLnNpZ25Jbk1ldGhvZCA9PT0gU2lnbkluTWV0aG9kLkVNQUlMX0xJTkspIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb21FbWFpbEFuZENvZGUob2JqLmVtYWlsLCBvYmoucGFzc3dvcmQsIG9iai50ZW5hbnRJZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc3luYyBfZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgc3dpdGNoICh0aGlzLnNpZ25Jbk1ldGhvZCkge1xuICAgICAgY2FzZSBTaWduSW5NZXRob2QuRU1BSUxfUEFTU1dPUkQ6XG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IFNpZ25JbldpdGhQYXNzd29yZFJlcXVlc3QgPSB7XG4gICAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXG4gICAgICAgICAgZW1haWw6IHRoaXMuX2VtYWlsLFxuICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLl9wYXNzd29yZCxcbiAgICAgICAgICBjbGllbnRUeXBlOiBSZWNhcHRjaGFDbGllbnRUeXBlLldFQlxuICAgICAgICB9O1xuICAgICAgICBpZiAoYXV0aC5fZ2V0UmVjYXB0Y2hhQ29uZmlnKCk/LmVtYWlsUGFzc3dvcmRFbmFibGVkKSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdFdpdGhSZWNhcHRjaGEgPSBhd2FpdCBpbmplY3RSZWNhcHRjaGFGaWVsZHMoXG4gICAgICAgICAgICBhdXRoLFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIFJlY2FwdGNoYUFjdGlvbk5hbWUuU0lHTl9JTl9XSVRIX1BBU1NXT1JEXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gc2lnbkluV2l0aFBhc3N3b3JkKGF1dGgsIHJlcXVlc3RXaXRoUmVjYXB0Y2hhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc2lnbkluV2l0aFBhc3N3b3JkKGF1dGgsIHJlcXVlc3QpLmNhdGNoKGFzeW5jIGVycm9yID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgZXJyb3IuY29kZSA9PT0gYGF1dGgvJHtBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUkVDQVBUQ0hBX1RPS0VOfWBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAnU2lnbi1pbiB3aXRoIGVtYWlsIGFkZHJlc3MgYW5kIHBhc3N3b3JkIGlzIHByb3RlY3RlZCBieSByZUNBUFRDSEEgZm9yIHRoaXMgcHJvamVjdC4gQXV0b21hdGljYWxseSB0cmlnZ2VyaW5nIHRoZSByZUNBUFRDSEEgZmxvdyBhbmQgcmVzdGFydGluZyB0aGUgc2lnbi1pbiBmbG93LidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdFdpdGhSZWNhcHRjaGEgPSBhd2FpdCBpbmplY3RSZWNhcHRjaGFGaWVsZHMoXG4gICAgICAgICAgICAgICAgYXV0aCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgIFJlY2FwdGNoYUFjdGlvbk5hbWUuU0lHTl9JTl9XSVRIX1BBU1NXT1JEXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHJldHVybiBzaWduSW5XaXRoUGFzc3dvcmQoYXV0aCwgcmVxdWVzdFdpdGhSZWNhcHRjaGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSBTaWduSW5NZXRob2QuRU1BSUxfTElOSzpcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwge1xuICAgICAgICAgIGVtYWlsOiB0aGlzLl9lbWFpbCxcbiAgICAgICAgICBvb2JDb2RlOiB0aGlzLl9wYXNzd29yZFxuICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIF9mYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXN5bmMgX2xpbmtUb0lkVG9rZW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGlkVG9rZW46IHN0cmluZ1xuICApOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIHN3aXRjaCAodGhpcy5zaWduSW5NZXRob2QpIHtcbiAgICAgIGNhc2UgU2lnbkluTWV0aG9kLkVNQUlMX1BBU1NXT1JEOlxuICAgICAgICByZXR1cm4gdXBkYXRlRW1haWxQYXNzd29yZChhdXRoLCB7XG4gICAgICAgICAgaWRUb2tlbixcbiAgICAgICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZSxcbiAgICAgICAgICBlbWFpbDogdGhpcy5fZW1haWwsXG4gICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuX3Bhc3N3b3JkXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBTaWduSW5NZXRob2QuRU1BSUxfTElOSzpcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhFbWFpbExpbmtGb3JMaW5raW5nKGF1dGgsIHtcbiAgICAgICAgICBpZFRva2VuLFxuICAgICAgICAgIGVtYWlsOiB0aGlzLl9lbWFpbCxcbiAgICAgICAgICBvb2JDb2RlOiB0aGlzLl9wYXNzd29yZFxuICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIF9mYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2dldFJlYXV0aGVudGljYXRpb25SZXNvbHZlcihhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9wZXJmb3JtU2lnbkluUmVxdWVzdFxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBJZFRva2VuLCBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoSWRwUmVxdWVzdCB7XG4gIHJlcXVlc3RVcmk6IHN0cmluZztcbiAgcG9zdEJvZHk/OiBzdHJpbmc7XG4gIHNlc3Npb25JZD86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG4gIHJldHVyblNlY3VyZVRva2VuOiBib29sZWFuO1xuICByZXR1cm5JZHBDcmVkZW50aWFsPzogYm9vbGVhbjtcbiAgaWRUb2tlbj86IElkVG9rZW47XG4gIGF1dG9DcmVhdGU/OiBib29sZWFuO1xuICBwZW5kaW5nVG9rZW4/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aElkcFJlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHtcbiAgb2F1dGhBY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgb2F1dGhUb2tlblNlY3JldD86IHN0cmluZztcbiAgbm9uY2U/OiBzdHJpbmc7XG4gIG9hdXRoSWRUb2tlbj86IHN0cmluZztcbiAgcGVuZGluZ1Rva2VuPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aElkcChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogU2lnbkluV2l0aElkcFJlcXVlc3Rcbik6IFByb21pc2U8U2lnbkluV2l0aElkcFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8U2lnbkluV2l0aElkcFJlcXVlc3QsIFNpZ25JbldpdGhJZHBSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9JTl9XSVRIX0lEUCxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHF1ZXJ5c3RyaW5nIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQge1xuICBzaWduSW5XaXRoSWRwLFxuICBTaWduSW5XaXRoSWRwUmVxdWVzdFxufSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vaWRwJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfZmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9hdXRoX2NyZWRlbnRpYWwnO1xuXG5jb25zdCBJRFBfUkVRVUVTVF9VUkkgPSAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT0F1dGhDcmVkZW50aWFsUGFyYW1zIHtcbiAgLy8gT0F1dGggMiB1c2VzIGVpdGhlciBpZCB0b2tlbiBvciBhY2Nlc3MgdG9rZW5cbiAgaWRUb2tlbj86IHN0cmluZyB8IG51bGw7XG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nIHwgbnVsbDtcblxuICAvLyBUaGVzZSBmaWVsZHMgYXJlIHVzZWQgd2l0aCBPQXV0aCAxXG4gIG9hdXRoVG9rZW4/OiBzdHJpbmc7XG4gIHNlY3JldD86IHN0cmluZztcbiAgb2F1dGhUb2tlblNlY3JldD86IHN0cmluZztcblxuICAvLyBOb25jZSBpcyBvbmx5IHNldCBpZiBwZW5kaW5nVG9rZW4gaXMgbm90IHByZXNlbnRcbiAgbm9uY2U/OiBzdHJpbmc7XG4gIHBlbmRpbmdUb2tlbj86IHN0cmluZztcblxuICAvLyBVdGlsaXRpZXNcbiAgcHJvdmlkZXJJZDogc3RyaW5nO1xuICBzaWduSW5NZXRob2Q6IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBPQXV0aCBjcmVkZW50aWFscyByZXR1cm5lZCBieSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXG4gKlxuICogQHJlbWFya3NcbiAqIEltcGxlbWVudGF0aW9ucyBzcGVjaWZ5IHRoZSBkZXRhaWxzIGFib3V0IGVhY2ggYXV0aCBwcm92aWRlcidzIGNyZWRlbnRpYWwgcmVxdWlyZW1lbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9BdXRoQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCBJRCB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhlIGNyZWRlbnRpYWwgaWYgaXQgYmVsb25ncyB0byBhbiBPSURDIHByb3ZpZGVyLFxuICAgKiBzdWNoIGFzIGBnb29nbGUuY29tYC5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBpZFRva2VuPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIE9BdXRoIGFjY2VzcyB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhlIGNyZWRlbnRpYWwgaWYgaXQgYmVsb25ncyB0byBhblxuICAgKiB7QGxpbmsgT0F1dGhQcm92aWRlcn0sIHN1Y2ggYXMgYGZhY2Vib29rLmNvbWAsIGB0d2l0dGVyLmNvbWAsIGV0Yy5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBhY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4gc2VjcmV0IGFzc29jaWF0ZWQgd2l0aCB0aGUgY3JlZGVudGlhbCBpZiBpdCBiZWxvbmdzIHRvIGFuIE9BdXRoIDEuMFxuICAgKiBwcm92aWRlciwgc3VjaCBhcyBgdHdpdHRlci5jb21gLlxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHNlY3JldD86IHN0cmluZztcblxuICBwcml2YXRlIG5vbmNlPzogc3RyaW5nO1xuICBwcml2YXRlIHBlbmRpbmdUb2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21QYXJhbXMocGFyYW1zOiBPQXV0aENyZWRlbnRpYWxQYXJhbXMpOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIGNvbnN0IGNyZWQgPSBuZXcgT0F1dGhDcmVkZW50aWFsKHBhcmFtcy5wcm92aWRlcklkLCBwYXJhbXMuc2lnbkluTWV0aG9kKTtcblxuICAgIGlmIChwYXJhbXMuaWRUb2tlbiB8fCBwYXJhbXMuYWNjZXNzVG9rZW4pIHtcbiAgICAgIC8vIE9BdXRoIDIgYW5kIGVpdGhlciBJRCB0b2tlbiBvciBhY2Nlc3MgdG9rZW4uXG4gICAgICBpZiAocGFyYW1zLmlkVG9rZW4pIHtcbiAgICAgICAgY3JlZC5pZFRva2VuID0gcGFyYW1zLmlkVG9rZW47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgY3JlZC5hY2Nlc3NUb2tlbiA9IHBhcmFtcy5hY2Nlc3NUb2tlbjtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIG5vbmNlIGlmIGF2YWlsYWJsZSBhbmQgbm8gcGVuZGluZ1Rva2VuIGlzIHByZXNlbnQuXG4gICAgICBpZiAocGFyYW1zLm5vbmNlICYmICFwYXJhbXMucGVuZGluZ1Rva2VuKSB7XG4gICAgICAgIGNyZWQubm9uY2UgPSBwYXJhbXMubm9uY2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMucGVuZGluZ1Rva2VuKSB7XG4gICAgICAgIGNyZWQucGVuZGluZ1Rva2VuID0gcGFyYW1zLnBlbmRpbmdUb2tlbjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5vYXV0aFRva2VuICYmIHBhcmFtcy5vYXV0aFRva2VuU2VjcmV0KSB7XG4gICAgICAvLyBPQXV0aCAxIGFuZCBPQXV0aCB0b2tlbiB3aXRoIHRva2VuIHNlY3JldFxuICAgICAgY3JlZC5hY2Nlc3NUb2tlbiA9IHBhcmFtcy5vYXV0aFRva2VuO1xuICAgICAgY3JlZC5zZWNyZXQgPSBwYXJhbXMub2F1dGhUb2tlblNlY3JldDtcbiAgICB9IGVsc2Uge1xuICAgICAgX2ZhaWwoQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWQ7XG4gIH1cblxuICAvKioge0Bpbmhlcml0ZG9jIEF1dGhDcmVkZW50aWFsLnRvSlNPTn0gICovXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBpZFRva2VuOiB0aGlzLmlkVG9rZW4sXG4gICAgICBhY2Nlc3NUb2tlbjogdGhpcy5hY2Nlc3NUb2tlbixcbiAgICAgIHNlY3JldDogdGhpcy5zZWNyZXQsXG4gICAgICBub25jZTogdGhpcy5ub25jZSxcbiAgICAgIHBlbmRpbmdUb2tlbjogdGhpcy5wZW5kaW5nVG9rZW4sXG4gICAgICBwcm92aWRlcklkOiB0aGlzLnByb3ZpZGVySWQsXG4gICAgICBzaWduSW5NZXRob2Q6IHRoaXMuc2lnbkluTWV0aG9kXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgbWV0aG9kIHRvIGRlc2VyaWFsaXplIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QgaW50byBhblxuICAgKiB7QGxpbmsgIEF1dGhDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIGpzb24gLSBJbnB1dCBjYW4gYmUgZWl0aGVyIE9iamVjdCBvciB0aGUgc3RyaW5naWZpZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdC5cbiAgICogV2hlbiBzdHJpbmcgaXMgcHJvdmlkZWQsIEpTT04ucGFyc2Ugd291bGQgYmUgY2FsbGVkIGZpcnN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBJZiB0aGUgSlNPTiBpbnB1dCBkb2VzIG5vdCByZXByZXNlbnQgYW4ge0BsaW5rICBBdXRoQ3JlZGVudGlhbH0sIG51bGwgaXMgcmV0dXJuZWQuXG4gICAqL1xuICBzdGF0aWMgZnJvbUpTT04oanNvbjogc3RyaW5nIHwgb2JqZWN0KTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgY29uc3Qgb2JqID0gdHlwZW9mIGpzb24gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShqc29uKSA6IGpzb247XG4gICAgY29uc3QgeyBwcm92aWRlcklkLCBzaWduSW5NZXRob2QsIC4uLnJlc3QgfTogT0F1dGhDcmVkZW50aWFsUGFyYW1zID0gb2JqO1xuICAgIGlmICghcHJvdmlkZXJJZCB8fCAhc2lnbkluTWV0aG9kKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBjcmVkID0gbmV3IE9BdXRoQ3JlZGVudGlhbChwcm92aWRlcklkLCBzaWduSW5NZXRob2QpO1xuICAgIGNyZWQuaWRUb2tlbiA9IHJlc3QuaWRUb2tlbiB8fCB1bmRlZmluZWQ7XG4gICAgY3JlZC5hY2Nlc3NUb2tlbiA9IHJlc3QuYWNjZXNzVG9rZW4gfHwgdW5kZWZpbmVkO1xuICAgIGNyZWQuc2VjcmV0ID0gcmVzdC5zZWNyZXQ7XG4gICAgY3JlZC5ub25jZSA9IHJlc3Qubm9uY2U7XG4gICAgY3JlZC5wZW5kaW5nVG9rZW4gPSByZXN0LnBlbmRpbmdUb2tlbiB8fCBudWxsO1xuICAgIHJldHVybiBjcmVkO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9saW5rVG9JZFRva2VuKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5idWlsZFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0LmlkVG9rZW4gPSBpZFRva2VuO1xuICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHJlcXVlc3QpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0UmVhdXRoZW50aWNhdGlvblJlc29sdmVyKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5hdXRvQ3JlYXRlID0gZmFsc2U7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkUmVxdWVzdCgpOiBTaWduSW5XaXRoSWRwUmVxdWVzdCB7XG4gICAgY29uc3QgcmVxdWVzdDogU2lnbkluV2l0aElkcFJlcXVlc3QgPSB7XG4gICAgICByZXF1ZXN0VXJpOiBJRFBfUkVRVUVTVF9VUkksXG4gICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5wZW5kaW5nVG9rZW4pIHtcbiAgICAgIHJlcXVlc3QucGVuZGluZ1Rva2VuID0gdGhpcy5wZW5kaW5nVG9rZW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBvc3RCb2R5OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgICBpZiAodGhpcy5pZFRva2VuKSB7XG4gICAgICAgIHBvc3RCb2R5WydpZF90b2tlbiddID0gdGhpcy5pZFRva2VuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgcG9zdEJvZHlbJ2FjY2Vzc190b2tlbiddID0gdGhpcy5hY2Nlc3NUb2tlbjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNlY3JldCkge1xuICAgICAgICBwb3N0Qm9keVsnb2F1dGhfdG9rZW5fc2VjcmV0J10gPSB0aGlzLnNlY3JldDtcbiAgICAgIH1cblxuICAgICAgcG9zdEJvZHlbJ3Byb3ZpZGVySWQnXSA9IHRoaXMucHJvdmlkZXJJZDtcbiAgICAgIGlmICh0aGlzLm5vbmNlICYmICF0aGlzLnBlbmRpbmdUb2tlbikge1xuICAgICAgICBwb3N0Qm9keVsnbm9uY2UnXSA9IHRoaXMubm9uY2U7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QucG9zdEJvZHkgPSBxdWVyeXN0cmluZyhwb3N0Qm9keSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9tYWtlVGFnZ2VkRXJyb3IsXG4gIF9wZXJmb3JtQXBpUmVxdWVzdCxcbiAgX3BlcmZvcm1TaWduSW5SZXF1ZXN0XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBTZXJ2ZXJFcnJvciwgU2VydmVyRXJyb3JNYXAgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3Qge1xuICBwaG9uZU51bWJlcjogc3RyaW5nO1xuICByZWNhcHRjaGFUb2tlbjogc3RyaW5nO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kUGhvbmVWZXJpZmljYXRpb25Db2RlUmVzcG9uc2Uge1xuICBzZXNzaW9uSW5mbzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZShcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3Rcbik6IFByb21pc2U8U2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8XG4gICAgU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3QsXG4gICAgU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0VORF9WRVJJRklDQVRJT05fQ09ERSxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IHtcbiAgdGVtcG9yYXJ5UHJvb2Y/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xuICBzZXNzaW9uSW5mbz86IHN0cmluZztcbiAgY29kZT86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua1dpdGhQaG9uZU51bWJlclJlcXVlc3RcbiAgZXh0ZW5kcyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHtcbiAgdGVtcG9yYXJ5UHJvb2Y/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBob25lTnVtYmVyKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8XG4gICAgU2lnbkluV2l0aFBob25lTnVtYmVyUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9QSE9ORV9OVU1CRVIsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaW5rV2l0aFBob25lTnVtYmVyKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBMaW5rV2l0aFBob25lTnVtYmVyUmVxdWVzdFxuKTogUHJvbWlzZTxTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9wZXJmb3JtU2lnbkluUmVxdWVzdDxcbiAgICBMaW5rV2l0aFBob25lTnVtYmVyUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9QSE9ORV9OVU1CRVIsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG4gIGlmIChyZXNwb25zZS50ZW1wb3JhcnlQcm9vZikge1xuICAgIHRocm93IF9tYWtlVGFnZ2VkRXJyb3IoYXV0aCwgQXV0aEVycm9yQ29kZS5ORUVEX0NPTkZJUk1BVElPTiwgcmVzcG9uc2UpO1xuICB9XG4gIHJldHVybiByZXNwb25zZTtcbn1cblxuaW50ZXJmYWNlIFZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmdSZXF1ZXN0XG4gIGV4dGVuZHMgU2lnbkluV2l0aFBob25lTnVtYmVyUmVxdWVzdCB7XG4gIG9wZXJhdGlvbjogJ1JFQVVUSCc7XG59XG5cbmNvbnN0IFZFUklGWV9QSE9ORV9OVU1CRVJfRk9SX0VYSVNUSU5HX0VSUk9SX01BUF86IFBhcnRpYWw8XG4gIFNlcnZlckVycm9yTWFwPFNlcnZlckVycm9yPlxuPiA9IHtcbiAgW1NlcnZlckVycm9yLlVTRVJfTk9UX0ZPVU5EXTogQXV0aEVycm9yQ29kZS5VU0VSX0RFTEVURURcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlQaG9uZU51bWJlckZvckV4aXN0aW5nKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlPiB7XG4gIGNvbnN0IGFwaVJlcXVlc3Q6IFZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmdSZXF1ZXN0ID0ge1xuICAgIC4uLnJlcXVlc3QsXG4gICAgb3BlcmF0aW9uOiAnUkVBVVRIJ1xuICB9O1xuICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0PFxuICAgIFZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmdSZXF1ZXN0LFxuICAgIFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9JTl9XSVRIX1BIT05FX05VTUJFUixcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgYXBpUmVxdWVzdCksXG4gICAgVkVSSUZZX1BIT05FX05VTUJFUl9GT1JfRVhJU1RJTkdfRVJST1JfTUFQX1xuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUHJvdmlkZXJJZCwgU2lnbkluTWV0aG9kIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG5pbXBvcnQgeyBQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQge1xuICBsaW5rV2l0aFBob25lTnVtYmVyLFxuICBzaWduSW5XaXRoUGhvbmVOdW1iZXIsXG4gIFNpZ25JbldpdGhQaG9uZU51bWJlclJlcXVlc3QsXG4gIHZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3Rpbmdcbn0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL3Ntcyc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9hdXRoX2NyZWRlbnRpYWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBob25lQXV0aENyZWRlbnRpYWxQYXJhbWV0ZXJzIHtcbiAgdmVyaWZpY2F0aW9uSWQ/OiBzdHJpbmc7XG4gIHZlcmlmaWNhdGlvbkNvZGU/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xuICB0ZW1wb3JhcnlQcm9vZj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBjcmVkZW50aWFscyByZXR1cm5lZCBieSB7QGxpbmsgUGhvbmVBdXRoUHJvdmlkZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFBob25lQXV0aENyZWRlbnRpYWwgZXh0ZW5kcyBBdXRoQ3JlZGVudGlhbCB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwYXJhbXM6IFBob25lQXV0aENyZWRlbnRpYWxQYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIoUHJvdmlkZXJJZC5QSE9ORSwgU2lnbkluTWV0aG9kLlBIT05FKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIF9mcm9tVmVyaWZpY2F0aW9uKFxuICAgIHZlcmlmaWNhdGlvbklkOiBzdHJpbmcsXG4gICAgdmVyaWZpY2F0aW9uQ29kZTogc3RyaW5nXG4gICk6IFBob25lQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBuZXcgUGhvbmVBdXRoQ3JlZGVudGlhbCh7IHZlcmlmaWNhdGlvbklkLCB2ZXJpZmljYXRpb25Db2RlIH0pO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21Ub2tlblJlc3BvbnNlKFxuICAgIHBob25lTnVtYmVyOiBzdHJpbmcsXG4gICAgdGVtcG9yYXJ5UHJvb2Y6IHN0cmluZ1xuICApOiBQaG9uZUF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gbmV3IFBob25lQXV0aENyZWRlbnRpYWwoeyBwaG9uZU51bWJlciwgdGVtcG9yYXJ5UHJvb2YgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhQaG9uZU51bWJlcihhdXRoLCB0aGlzLl9tYWtlVmVyaWZpY2F0aW9uUmVxdWVzdCgpKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2xpbmtUb0lkVG9rZW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGlkVG9rZW46IHN0cmluZ1xuICApOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBsaW5rV2l0aFBob25lTnVtYmVyKGF1dGgsIHtcbiAgICAgIGlkVG9rZW4sXG4gICAgICAuLi50aGlzLl9tYWtlVmVyaWZpY2F0aW9uUmVxdWVzdCgpXG4gICAgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdmVyaWZ5UGhvbmVOdW1iZXJGb3JFeGlzdGluZyhhdXRoLCB0aGlzLl9tYWtlVmVyaWZpY2F0aW9uUmVxdWVzdCgpKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX21ha2VWZXJpZmljYXRpb25SZXF1ZXN0KCk6IFNpZ25JbldpdGhQaG9uZU51bWJlclJlcXVlc3Qge1xuICAgIGNvbnN0IHsgdGVtcG9yYXJ5UHJvb2YsIHBob25lTnVtYmVyLCB2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSB9ID1cbiAgICAgIHRoaXMucGFyYW1zO1xuICAgIGlmICh0ZW1wb3JhcnlQcm9vZiAmJiBwaG9uZU51bWJlcikge1xuICAgICAgcmV0dXJuIHsgdGVtcG9yYXJ5UHJvb2YsIHBob25lTnVtYmVyIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlc3Npb25JbmZvOiB2ZXJpZmljYXRpb25JZCxcbiAgICAgIGNvZGU6IHZlcmlmaWNhdGlvbkNvZGVcbiAgICB9O1xuICB9XG5cbiAgLyoqIHtAaW5oZXJpdGRvYyBBdXRoQ3JlZGVudGlhbC50b0pTT059ICovXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIGNvbnN0IG9iajogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIHByb3ZpZGVySWQ6IHRoaXMucHJvdmlkZXJJZFxuICAgIH07XG4gICAgaWYgKHRoaXMucGFyYW1zLnBob25lTnVtYmVyKSB7XG4gICAgICBvYmoucGhvbmVOdW1iZXIgPSB0aGlzLnBhcmFtcy5waG9uZU51bWJlcjtcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyYW1zLnRlbXBvcmFyeVByb29mKSB7XG4gICAgICBvYmoudGVtcG9yYXJ5UHJvb2YgPSB0aGlzLnBhcmFtcy50ZW1wb3JhcnlQcm9vZjtcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyYW1zLnZlcmlmaWNhdGlvbkNvZGUpIHtcbiAgICAgIG9iai52ZXJpZmljYXRpb25Db2RlID0gdGhpcy5wYXJhbXMudmVyaWZpY2F0aW9uQ29kZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyYW1zLnZlcmlmaWNhdGlvbklkKSB7XG4gICAgICBvYmoudmVyaWZpY2F0aW9uSWQgPSB0aGlzLnBhcmFtcy52ZXJpZmljYXRpb25JZDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLyoqIEdlbmVyYXRlcyBhIHBob25lIGNyZWRlbnRpYWwgYmFzZWQgb24gYSBwbGFpbiBvYmplY3Qgb3IgYSBKU09OIHN0cmluZy4gKi9cbiAgc3RhdGljIGZyb21KU09OKGpzb246IG9iamVjdCB8IHN0cmluZyk6IFBob25lQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICBpZiAodHlwZW9mIGpzb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHZlcmlmaWNhdGlvbklkLCB2ZXJpZmljYXRpb25Db2RlLCBwaG9uZU51bWJlciwgdGVtcG9yYXJ5UHJvb2YgfSA9XG4gICAgICBqc29uIGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgaWYgKFxuICAgICAgIXZlcmlmaWNhdGlvbkNvZGUgJiZcbiAgICAgICF2ZXJpZmljYXRpb25JZCAmJlxuICAgICAgIXBob25lTnVtYmVyICYmXG4gICAgICAhdGVtcG9yYXJ5UHJvb2ZcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUGhvbmVBdXRoQ3JlZGVudGlhbCh7XG4gICAgICB2ZXJpZmljYXRpb25JZCxcbiAgICAgIHZlcmlmaWNhdGlvbkNvZGUsXG4gICAgICBwaG9uZU51bWJlcixcbiAgICAgIHRlbXBvcmFyeVByb29mXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGV4dHJhY3RRdWVyeXN0cmluZywgcXVlcnlzdHJpbmdEZWNvZGUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBY3Rpb25Db2RlT3BlcmF0aW9uIH0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi91dGlsL2Fzc2VydCc7XG5cbi8qKlxuICogRW51bXMgZm9yIGZpZWxkcyBpbiBVUkwgcXVlcnkgc3RyaW5nLlxuICpcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGVudW0gUXVlcnlGaWVsZCB7XG4gIEFQSV9LRVkgPSAnYXBpS2V5JyxcbiAgQ09ERSA9ICdvb2JDb2RlJyxcbiAgQ09OVElOVUVfVVJMID0gJ2NvbnRpbnVlVXJsJyxcbiAgTEFOR1VBR0VfQ09ERSA9ICdsYW5ndWFnZUNvZGUnLFxuICBNT0RFID0gJ21vZGUnLFxuICBURU5BTlRfSUQgPSAndGVuYW50SWQnXG59XG5cbi8qKlxuICogTWFwcyB0aGUgbW9kZSBzdHJpbmcgaW4gYWN0aW9uIGNvZGUgVVJMIHRvIEFjdGlvbiBDb2RlIEluZm8gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSBtb2RlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlTW9kZShtb2RlOiBzdHJpbmcgfCBudWxsKTogQWN0aW9uQ29kZU9wZXJhdGlvbiB8IG51bGwge1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlICdyZWNvdmVyRW1haWwnOlxuICAgICAgcmV0dXJuIEFjdGlvbkNvZGVPcGVyYXRpb24uUkVDT1ZFUl9FTUFJTDtcbiAgICBjYXNlICdyZXNldFBhc3N3b3JkJzpcbiAgICAgIHJldHVybiBBY3Rpb25Db2RlT3BlcmF0aW9uLlBBU1NXT1JEX1JFU0VUO1xuICAgIGNhc2UgJ3NpZ25Jbic6XG4gICAgICByZXR1cm4gQWN0aW9uQ29kZU9wZXJhdGlvbi5FTUFJTF9TSUdOSU47XG4gICAgY2FzZSAndmVyaWZ5RW1haWwnOlxuICAgICAgcmV0dXJuIEFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0VNQUlMO1xuICAgIGNhc2UgJ3ZlcmlmeUFuZENoYW5nZUVtYWlsJzpcbiAgICAgIHJldHVybiBBY3Rpb25Db2RlT3BlcmF0aW9uLlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMO1xuICAgIGNhc2UgJ3JldmVydFNlY29uZEZhY3RvckFkZGl0aW9uJzpcbiAgICAgIHJldHVybiBBY3Rpb25Db2RlT3BlcmF0aW9uLlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB0byBwYXJzZSBGREwgbGlua3NcbiAqXG4gKiBAcGFyYW0gdXJsXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRGVlcExpbmsodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBsaW5rID0gcXVlcnlzdHJpbmdEZWNvZGUoZXh0cmFjdFF1ZXJ5c3RyaW5nKHVybCkpWydsaW5rJ107XG5cbiAgLy8gRG91YmxlIGxpbmsgY2FzZSAoYXV0b21hdGljIHJlZGlyZWN0KS5cbiAgY29uc3QgZG91YmxlRGVlcExpbmsgPSBsaW5rXG4gICAgPyBxdWVyeXN0cmluZ0RlY29kZShleHRyYWN0UXVlcnlzdHJpbmcobGluaykpWydkZWVwX2xpbmtfaWQnXVxuICAgIDogbnVsbDtcbiAgLy8gaU9TIGN1c3RvbSBzY2hlbWUgbGlua3MuXG4gIGNvbnN0IGlPU0RlZXBMaW5rID0gcXVlcnlzdHJpbmdEZWNvZGUoZXh0cmFjdFF1ZXJ5c3RyaW5nKHVybCkpW1xuICAgICdkZWVwX2xpbmtfaWQnXG4gIF07XG4gIGNvbnN0IGlPU0RvdWJsZURlZXBMaW5rID0gaU9TRGVlcExpbmtcbiAgICA/IHF1ZXJ5c3RyaW5nRGVjb2RlKGV4dHJhY3RRdWVyeXN0cmluZyhpT1NEZWVwTGluaykpWydsaW5rJ11cbiAgICA6IG51bGw7XG4gIHJldHVybiBpT1NEb3VibGVEZWVwTGluayB8fCBpT1NEZWVwTGluayB8fCBkb3VibGVEZWVwTGluayB8fCBsaW5rIHx8IHVybDtcbn1cblxuLyoqXG4gKiBBIHV0aWxpdHkgY2xhc3MgdG8gcGFyc2UgZW1haWwgYWN0aW9uIFVSTHMgc3VjaCBhcyBwYXNzd29yZCByZXNldCwgZW1haWwgdmVyaWZpY2F0aW9uLFxuICogZW1haWwgbGluayBzaWduIGluLCBldGMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQWN0aW9uQ29kZVVSTCB7XG4gIC8qKlxuICAgKiBUaGUgQVBJIGtleSBvZiB0aGUgZW1haWwgYWN0aW9uIGxpbmsuXG4gICAqL1xuICByZWFkb25seSBhcGlLZXk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gY29kZSBvZiB0aGUgZW1haWwgYWN0aW9uIGxpbmsuXG4gICAqL1xuICByZWFkb25seSBjb2RlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY29udGludWUgVVJMIG9mIHRoZSBlbWFpbCBhY3Rpb24gbGluay4gTnVsbCBpZiBub3QgcHJvdmlkZWQuXG4gICAqL1xuICByZWFkb25seSBjb250aW51ZVVybDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSBsYW5ndWFnZSBjb2RlIG9mIHRoZSBlbWFpbCBhY3Rpb24gbGluay4gTnVsbCBpZiBub3QgcHJvdmlkZWQuXG4gICAqL1xuICByZWFkb25seSBsYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHBlcmZvcm1lZCBieSB0aGUgZW1haWwgYWN0aW9uIGxpbmsuIEl0IHJldHVybnMgZnJvbSBvbmUgb2YgdGhlIHR5cGVzIGZyb21cbiAgICoge0BsaW5rIEFjdGlvbkNvZGVJbmZvfVxuICAgKi9cbiAgcmVhZG9ubHkgb3BlcmF0aW9uOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdGVuYW50IElEIG9mIHRoZSBlbWFpbCBhY3Rpb24gbGluay4gTnVsbCBpZiB0aGUgZW1haWwgYWN0aW9uIGlzIGZyb20gdGhlIHBhcmVudCBwcm9qZWN0LlxuICAgKi9cbiAgcmVhZG9ubHkgdGVuYW50SWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhY3Rpb25MaW5rIC0gVGhlIGxpbmsgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBVUkwuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVVSTH0gb2JqZWN0LCBvciBudWxsIGlmIHRoZSBsaW5rIGlzIGludmFsaWQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoYWN0aW9uTGluazogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gcXVlcnlzdHJpbmdEZWNvZGUoZXh0cmFjdFF1ZXJ5c3RyaW5nKGFjdGlvbkxpbmspKTtcbiAgICBjb25zdCBhcGlLZXkgPSBzZWFyY2hQYXJhbXNbUXVlcnlGaWVsZC5BUElfS0VZXSA/PyBudWxsO1xuICAgIGNvbnN0IGNvZGUgPSBzZWFyY2hQYXJhbXNbUXVlcnlGaWVsZC5DT0RFXSA/PyBudWxsO1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHBhcnNlTW9kZShzZWFyY2hQYXJhbXNbUXVlcnlGaWVsZC5NT0RFXSA/PyBudWxsKTtcbiAgICAvLyBWYWxpZGF0ZSBBUEkga2V5LCBjb2RlIGFuZCBtb2RlLlxuICAgIF9hc3NlcnQoYXBpS2V5ICYmIGNvZGUgJiYgb3BlcmF0aW9uLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMuY29udGludWVVcmwgPSBzZWFyY2hQYXJhbXNbUXVlcnlGaWVsZC5DT05USU5VRV9VUkxdID8/IG51bGw7XG4gICAgdGhpcy5sYW5ndWFnZUNvZGUgPSBzZWFyY2hQYXJhbXNbUXVlcnlGaWVsZC5MQU5HVUFHRV9DT0RFXSA/PyBudWxsO1xuICAgIHRoaXMudGVuYW50SWQgPSBzZWFyY2hQYXJhbXNbUXVlcnlGaWVsZC5URU5BTlRfSURdID8/IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIHRoZSBlbWFpbCBhY3Rpb24gbGluayBzdHJpbmcgYW5kIHJldHVybnMgYW4ge0BsaW5rIEFjdGlvbkNvZGVVUkx9IGlmIHRoZSBsaW5rIGlzIHZhbGlkLFxuICAgKiBvdGhlcndpc2UgcmV0dXJucyBudWxsLlxuICAgKlxuICAgKiBAcGFyYW0gbGluayAgLSBUaGUgZW1haWwgYWN0aW9uIGxpbmsgc3RyaW5nLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEFjdGlvbkNvZGVVUkx9IG9iamVjdCwgb3IgbnVsbCBpZiB0aGUgbGluayBpcyBpbnZhbGlkLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzdGF0aWMgcGFyc2VMaW5rKGxpbms6IHN0cmluZyk6IEFjdGlvbkNvZGVVUkwgfCBudWxsIHtcbiAgICBjb25zdCBhY3Rpb25MaW5rID0gcGFyc2VEZWVwTGluayhsaW5rKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBBY3Rpb25Db2RlVVJMKGFjdGlvbkxpbmspO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUGFyc2VzIHRoZSBlbWFpbCBhY3Rpb24gbGluayBzdHJpbmcgYW5kIHJldHVybnMgYW4ge0BsaW5rIEFjdGlvbkNvZGVVUkx9IGlmXG4gKiB0aGUgbGluayBpcyB2YWxpZCwgb3RoZXJ3aXNlIHJldHVybnMgbnVsbC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFjdGlvbkNvZGVVUkwobGluazogc3RyaW5nKTogQWN0aW9uQ29kZVVSTCB8IG51bGwge1xuICByZXR1cm4gQWN0aW9uQ29kZVVSTC5wYXJzZUxpbmsobGluayk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQcm92aWRlcklkLCBTaWduSW5NZXRob2QgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBBY3Rpb25Db2RlVVJMIH0gZnJvbSAnLi4vYWN0aW9uX2NvZGVfdXJsJztcbmltcG9ydCB7IEVtYWlsQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscy9lbWFpbCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcge0BsaW5rIEVtYWlsQXV0aENyZWRlbnRpYWx9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEVtYWlsQXV0aFByb3ZpZGVyIGltcGxlbWVudHMgQXV0aFByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LlBBU1NXT1JELCBldmVuIGZvciBlbWFpbCBsaW5rLlxuICAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAncGFzc3dvcmQnID0gUHJvdmlkZXJJZC5QQVNTV09SRDtcbiAgLyoqXG4gICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfUEFTU1dPUkQuXG4gICAqL1xuICBzdGF0aWMgcmVhZG9ubHkgRU1BSUxfUEFTU1dPUkRfU0lHTl9JTl9NRVRIT0Q6ICdwYXNzd29yZCcgPVxuICAgIFNpZ25Jbk1ldGhvZC5FTUFJTF9QQVNTV09SRDtcbiAgLyoqXG4gICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfTElOSy5cbiAgICovXG4gIHN0YXRpYyByZWFkb25seSBFTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EOiAnZW1haWxMaW5rJyA9XG4gICAgU2lnbkluTWV0aG9kLkVNQUlMX0xJTks7XG4gIC8qKlxuICAgKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5QQVNTV09SRCwgZXZlbiBmb3IgZW1haWwgbGluay5cbiAgICovXG4gIHJlYWRvbmx5IHByb3ZpZGVySWQgPSBFbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRDtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IHVzaW5nIGFuIGVtYWlsIGFuZCBwYXNzd29yZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IEVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoZW1haWwsIHBhc3N3b3JkKTtcbiAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoLCBhdXRoQ3JlZGVudGlhbCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBlbWFpbCAtIEVtYWlsIGFkZHJlc3MuXG4gICAqIEBwYXJhbSBwYXNzd29yZCAtIFVzZXIgYWNjb3VudCBwYXNzd29yZC5cbiAgICogQHJldHVybnMgVGhlIGF1dGggcHJvdmlkZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBFbWFpbEF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gRW1haWxBdXRoQ3JlZGVudGlhbC5fZnJvbUVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0gdXNpbmcgYW4gZW1haWwgYW5kIGFuIGVtYWlsIGxpbmsgYWZ0ZXIgYSBzaWduIGluIHdpdGhcbiAgICogZW1haWwgbGluayBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgYXV0aENyZWRlbnRpYWwgPSBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsV2l0aExpbmsoYXV0aCwgZW1haWwsIGVtYWlsTGluayk7XG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoYXV0aCwgYXV0aENyZWRlbnRpYWwpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBhd2FpdCBzZW5kU2lnbkluTGlua1RvRW1haWwoYXV0aCwgZW1haWwpO1xuICAgKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdXNlci5cbiAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoRW1haWxMaW5rKGF1dGgsIGVtYWlsLCBlbWFpbExpbmspO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlIHVzZWQgdG8gdmVyaWZ5IHRoZSBsaW5rLlxuICAgKiBAcGFyYW0gZW1haWwgLSBFbWFpbCBhZGRyZXNzLlxuICAgKiBAcGFyYW0gZW1haWxMaW5rIC0gU2lnbi1pbiBlbWFpbCBsaW5rLlxuICAgKiBAcmV0dXJucyAtIFRoZSBhdXRoIHByb3ZpZGVyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbFdpdGhMaW5rKFxuICAgIGVtYWlsOiBzdHJpbmcsXG4gICAgZW1haWxMaW5rOiBzdHJpbmdcbiAgKTogRW1haWxBdXRoQ3JlZGVudGlhbCB7XG4gICAgY29uc3QgYWN0aW9uQ29kZVVybCA9IEFjdGlvbkNvZGVVUkwucGFyc2VMaW5rKGVtYWlsTGluayk7XG4gICAgX2Fzc2VydChhY3Rpb25Db2RlVXJsLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcblxuICAgIHJldHVybiBFbWFpbEF1dGhDcmVkZW50aWFsLl9mcm9tRW1haWxBbmRDb2RlKFxuICAgICAgZW1haWwsXG4gICAgICBhY3Rpb25Db2RlVXJsLmNvZGUsXG4gICAgICBhY3Rpb25Db2RlVXJsLnRlbmFudElkXG4gICAgKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuLyoqXG4gKiBNYXAgb2YgT0F1dGggQ3VzdG9tIFBhcmFtZXRlcnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBDdXN0b21QYXJhbWV0ZXJzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIEZlZGVyYXRlZCBwcm92aWRlcnMgKE9BdXRoIChpbmNsdWRpbmcgT0lEQyksIFNBTUwpLlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgbm90IG1lYW50IHRvIGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIgaW1wbGVtZW50cyBBdXRoUHJvdmlkZXIge1xuICAvKiogQGludGVybmFsICovXG4gIGRlZmF1bHRMYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgY3VzdG9tUGFyYW1ldGVyczogQ3VzdG9tUGFyYW1ldGVycyA9IHt9O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmb3IgZ2VuZXJpYyBPQXV0aCBwcm92aWRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBwcm92aWRlcklkIC0gUHJvdmlkZXIgZm9yIHdoaWNoIGNyZWRlbnRpYWxzIHNob3VsZCBiZSBnZW5lcmF0ZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBwcm92aWRlcklkOiBzdHJpbmcpIHt9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGFuZ3VhZ2UgZ29kZS5cbiAgICpcbiAgICogQHBhcmFtIGxhbmd1YWdlQ29kZSAtIGxhbmd1YWdlIGNvZGVcbiAgICovXG4gIHNldERlZmF1bHRMYW5ndWFnZShsYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZUNvZGUgPSBsYW5ndWFnZUNvZGU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgT0F1dGggY3VzdG9tIHBhcmFtZXRlcnMgdG8gcGFzcyBpbiBhbiBPQXV0aCByZXF1ZXN0IGZvciBwb3B1cCBhbmQgcmVkaXJlY3Qgc2lnbi1pblxuICAgKiBvcGVyYXRpb25zLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBGb3IgYSBkZXRhaWxlZCBsaXN0LCBjaGVjayB0aGUgcmVzZXJ2ZWQgcmVxdWlyZWQgT0F1dGggMi4wIHBhcmFtZXRlcnMgc3VjaCBhcyBgY2xpZW50X2lkYCxcbiAgICogYHJlZGlyZWN0X3VyaWAsIGBzY29wZWAsIGByZXNwb25zZV90eXBlYCwgYW5kIGBzdGF0ZWAgYXJlIG5vdCBhbGxvd2VkIGFuZCB3aWxsIGJlIGlnbm9yZWQuXG4gICAqXG4gICAqIEBwYXJhbSBjdXN0b21PQXV0aFBhcmFtZXRlcnMgLSBUaGUgY3VzdG9tIE9BdXRoIHBhcmFtZXRlcnMgdG8gcGFzcyBpbiB0aGUgT0F1dGggcmVxdWVzdC5cbiAgICovXG4gIHNldEN1c3RvbVBhcmFtZXRlcnMoY3VzdG9tT0F1dGhQYXJhbWV0ZXJzOiBDdXN0b21QYXJhbWV0ZXJzKTogQXV0aFByb3ZpZGVyIHtcbiAgICB0aGlzLmN1c3RvbVBhcmFtZXRlcnMgPSBjdXN0b21PQXV0aFBhcmFtZXRlcnM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbGlzdCBvZiB7QGxpbmsgQ3VzdG9tUGFyYW1ldGVyc30uXG4gICAqL1xuICBnZXRDdXN0b21QYXJhbWV0ZXJzKCk6IEN1c3RvbVBhcmFtZXRlcnMge1xuICAgIHJldHVybiB0aGlzLmN1c3RvbVBhcmFtZXRlcnM7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhQcm92aWRlciwgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbmltcG9ydCB7IE9BdXRoQ3JlZGVudGlhbCwgT0F1dGhDcmVkZW50aWFsUGFyYW1zIH0gZnJvbSAnLi4vY3JlZGVudGlhbHMvb2F1dGgnO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgU2lnbkluV2l0aElkcFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJuYWwnO1xuaW1wb3J0IHsgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9mZWRlcmF0ZWQnO1xuXG4vKipcbiAqIERlZmluZXMgdGhlIG9wdGlvbnMgZm9yIGluaXRpYWxpemluZyBhbiB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfS5cbiAqXG4gKiBAcmVtYXJrc1xuICogRm9yIElEIHRva2VucyB3aXRoIG5vbmNlIGNsYWltLCB0aGUgcmF3IG5vbmNlIGhhcyB0byBhbHNvIGJlIHByb3ZpZGVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPQXV0aENyZWRlbnRpYWxPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCBJRCB0b2tlbiB1c2VkIHRvIGluaXRpYWxpemUgdGhlIHtAbGluayBPQXV0aENyZWRlbnRpYWx9LlxuICAgKi9cbiAgaWRUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4gdXNlZCB0byBpbml0aWFsaXplIHRoZSB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfS5cbiAgICovXG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHJhdyBub25jZSBhc3NvY2lhdGVkIHdpdGggdGhlIElEIHRva2VuLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBJdCBpcyByZXF1aXJlZCB3aGVuIGFuIElEIHRva2VuIHdpdGggYSBub25jZSBmaWVsZCBpcyBwcm92aWRlZC4gVGhlIFNIQS0yNTYgaGFzaCBvZiB0aGVcbiAgICogcmF3IG5vbmNlIG11c3QgbWF0Y2ggdGhlIG5vbmNlIGZpZWxkIGluIHRoZSBJRCB0b2tlbi5cbiAgICovXG4gIHJhd05vbmNlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIENvbW1vbiBjb2RlIHRvIGFsbCBPQXV0aCBwcm92aWRlcnMuIFRoaXMgaXMgc2VwYXJhdGUgZnJvbSB0aGVcbiAqIHtAbGluayBPQXV0aFByb3ZpZGVyfSBzbyB0aGF0IGNoaWxkIHByb3ZpZGVycyAobGlrZVxuICoge0BsaW5rIEdvb2dsZUF1dGhQcm92aWRlcn0pIGRvbid0IGluaGVyaXQgdGhlIGBjcmVkZW50aWFsYCBpbnN0YW5jZSBtZXRob2QuXG4gKiBJbnN0ZWFkLCB0aGV5IHJlbHkgb24gYSBzdGF0aWMgYGNyZWRlbnRpYWxgIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VPQXV0aFByb3ZpZGVyXG4gIGV4dGVuZHMgRmVkZXJhdGVkQXV0aFByb3ZpZGVyXG4gIGltcGxlbWVudHMgQXV0aFByb3ZpZGVyXG57XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJpdmF0ZSBzY29wZXM6IHN0cmluZ1tdID0gW107XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBPQXV0aCBzY29wZSB0byB0aGUgY3JlZGVudGlhbC5cbiAgICpcbiAgICogQHBhcmFtIHNjb3BlIC0gUHJvdmlkZXIgT0F1dGggc2NvcGUgdG8gYWRkLlxuICAgKi9cbiAgYWRkU2NvcGUoc2NvcGU6IHN0cmluZyk6IEF1dGhQcm92aWRlciB7XG4gICAgLy8gSWYgbm90IGFscmVhZHkgYWRkZWQsIGFkZCBzY29wZSB0byBsaXN0LlxuICAgIGlmICghdGhpcy5zY29wZXMuaW5jbHVkZXMoc2NvcGUpKSB7XG4gICAgICB0aGlzLnNjb3Blcy5wdXNoKHNjb3BlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbGlzdCBvZiBPQXV0aCBzY29wZXMuXG4gICAqL1xuICBnZXRTY29wZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbLi4udGhpcy5zY29wZXNdO1xuICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgZ2VuZXJpYyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHJlZGlyZWN0LlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgT0F1dGhQcm92aWRlcignZ29vZ2xlLmNvbScpO1xuICogLy8gU3RhcnQgYSBzaWduIGluIHByb2Nlc3MgZm9yIGFuIHVuYXV0aGVudGljYXRlZCB1c2VyLlxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3Byb2ZpbGUnKTtcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xuICogYXdhaXQgc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyKTtcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxuICpcbiAqIC8vIEFmdGVyIHJldHVybmluZyBmcm9tIHRoZSByZWRpcmVjdCB3aGVuIHlvdXIgYXBwIGluaXRpYWxpemVzIHlvdSBjYW4gb2J0YWluIHRoZSByZXN1bHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xuICogaWYgKHJlc3VsdCkge1xuICogICAvLyBUaGlzIGlzIHRoZSBzaWduZWQtaW4gdXNlclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XG4gKiAgIC8vIFRoaXMgZ2l2ZXMgeW91IGEgT0F1dGggQWNjZXNzIFRva2VuIGZvciB0aGUgcHJvdmlkZXIuXG4gKiAgIGNvbnN0IGNyZWRlbnRpYWwgPSBwcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChhdXRoLCByZXN1bHQpO1xuICogICBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHBvcHVwLlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgT0F1dGhQcm92aWRlcignZ29vZ2xlLmNvbScpO1xuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3Byb2ZpbGUnKTtcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAqXG4gKiAvLyBUaGUgc2lnbmVkLWluIHVzZXIgaW5mby5cbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqIC8vIFRoaXMgZ2l2ZXMgeW91IGEgT0F1dGggQWNjZXNzIFRva2VuIGZvciB0aGUgcHJvdmlkZXIuXG4gKiBjb25zdCBjcmVkZW50aWFsID0gcHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQoYXV0aCwgcmVzdWx0KTtcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIGBgYFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgT0F1dGhQcm92aWRlciBleHRlbmRzIEJhc2VPQXV0aFByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIEpTT04gc3RyaW5nIG9yIGEgcGxhaW4gb2JqZWN0LlxuICAgKiBAcGFyYW0ganNvbiAtIEEgcGxhaW4gb2JqZWN0IG9yIGEgSlNPTiBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbUpTT04oanNvbjogb2JqZWN0IHwgc3RyaW5nKTogT0F1dGhDcmVkZW50aWFsIHtcbiAgICBjb25zdCBvYmogPSB0eXBlb2YganNvbiA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGpzb24pIDoganNvbjtcbiAgICBfYXNzZXJ0KFxuICAgICAgJ3Byb3ZpZGVySWQnIGluIG9iaiAmJiAnc2lnbkluTWV0aG9kJyBpbiBvYmosXG4gICAgICBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SXG4gICAgKTtcbiAgICByZXR1cm4gT0F1dGhDcmVkZW50aWFsLl9mcm9tUGFyYW1zKG9iaik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSBnZW5lcmljIE9BdXRoIHByb3ZpZGVyJ3MgYWNjZXNzIHRva2VuIG9yIElEIHRva2VuLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBUaGUgcmF3IG5vbmNlIGlzIHJlcXVpcmVkIHdoZW4gYW4gSUQgdG9rZW4gd2l0aCBhIG5vbmNlIGZpZWxkIGlzIHByb3ZpZGVkLiBUaGUgU0hBLTI1NiBoYXNoIG9mXG4gICAqIHRoZSByYXcgbm9uY2UgbXVzdCBtYXRjaCB0aGUgbm9uY2UgZmllbGQgaW4gdGhlIElEIHRva2VuLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIGBnb29nbGVVc2VyYCBmcm9tIHRoZSBvbnN1Y2Nlc3MgR29vZ2xlIFNpZ24gSW4gY2FsbGJhY2suXG4gICAqIC8vIEluaXRpYWxpemUgYSBnZW5lcmF0ZSBPQXV0aCBwcm92aWRlciB3aXRoIGEgYGdvb2dsZS5jb21gIHByb3ZpZGVySWQuXG4gICAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IE9BdXRoUHJvdmlkZXIoJ2dvb2dsZS5jb20nKTtcbiAgICogY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWwoe1xuICAgKiAgIGlkVG9rZW46IGdvb2dsZVVzZXIuZ2V0QXV0aFJlc3BvbnNlKCkuaWRfdG9rZW4sXG4gICAqIH0pO1xuICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBFaXRoZXIgdGhlIG9wdGlvbnMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIElEIHRva2VuLCBhY2Nlc3MgdG9rZW4gYW5kIHJhdyBub25jZVxuICAgKiBvciB0aGUgSUQgdG9rZW4gc3RyaW5nLlxuICAgKi9cbiAgY3JlZGVudGlhbChwYXJhbXM6IE9BdXRoQ3JlZGVudGlhbE9wdGlvbnMpOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiB0aGlzLl9jcmVkZW50aWFsKHsgLi4ucGFyYW1zLCBub25jZTogcGFyYW1zLnJhd05vbmNlIH0pO1xuICB9XG5cbiAgLyoqIEFuIGludGVybmFsIGNyZWRlbnRpYWwgbWV0aG9kIHRoYXQgYWNjZXB0cyBtb3JlIHBlcm1pc3NpdmUgb3B0aW9ucyAqL1xuICBwcml2YXRlIF9jcmVkZW50aWFsKFxuICAgIHBhcmFtczogT21pdDxPQXV0aENyZWRlbnRpYWxQYXJhbXMsICdzaWduSW5NZXRob2QnIHwgJ3Byb3ZpZGVySWQnPlxuICApOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIF9hc3NlcnQocGFyYW1zLmlkVG9rZW4gfHwgcGFyYW1zLmFjY2Vzc1Rva2VuLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICAvLyBGb3IgT0F1dGhDcmVkZW50aWFsLCBzaWduIGluIG1ldGhvZCBpcyBzYW1lIGFzIHByb3ZpZGVySWQuXG4gICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBwcm92aWRlcklkOiB0aGlzLnByb3ZpZGVySWQsXG4gICAgICBzaWduSW5NZXRob2Q6IHRoaXMucHJvdmlkZXJJZFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbVJlc3VsdChcbiAgICB1c2VyQ3JlZGVudGlhbDogVXNlckNyZWRlbnRpYWxcbiAgKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIE9BdXRoUHJvdmlkZXIub2F1dGhDcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIHVzZXJDcmVkZW50aWFsIGFzIFVzZXJDcmVkZW50aWFsSW50ZXJuYWxcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xuICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gT0F1dGhQcm92aWRlci5vYXV0aENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgKGVycm9yLmN1c3RvbURhdGEgfHwge30pIGFzIFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG9hdXRoQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3Qoe1xuICAgIF90b2tlblJlc3BvbnNlOiB0b2tlblJlc3BvbnNlXG4gIH06IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBvYXV0aElkVG9rZW4sXG4gICAgICBvYXV0aEFjY2Vzc1Rva2VuLFxuICAgICAgb2F1dGhUb2tlblNlY3JldCxcbiAgICAgIHBlbmRpbmdUb2tlbixcbiAgICAgIG5vbmNlLFxuICAgICAgcHJvdmlkZXJJZFxuICAgIH0gPSB0b2tlblJlc3BvbnNlIGFzIFNpZ25JbldpdGhJZHBSZXNwb25zZTtcbiAgICBpZiAoXG4gICAgICAhb2F1dGhBY2Nlc3NUb2tlbiAmJlxuICAgICAgIW9hdXRoVG9rZW5TZWNyZXQgJiZcbiAgICAgICFvYXV0aElkVG9rZW4gJiZcbiAgICAgICFwZW5kaW5nVG9rZW5cbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghcHJvdmlkZXJJZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgT0F1dGhQcm92aWRlcihwcm92aWRlcklkKS5fY3JlZGVudGlhbCh7XG4gICAgICAgIGlkVG9rZW46IG9hdXRoSWRUb2tlbixcbiAgICAgICAgYWNjZXNzVG9rZW46IG9hdXRoQWNjZXNzVG9rZW4sXG4gICAgICAgIG5vbmNlLFxuICAgICAgICBwZW5kaW5nVG9rZW5cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBPQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscy9vYXV0aCc7XG5pbXBvcnQgeyBCYXNlT0F1dGhQcm92aWRlciB9IGZyb20gJy4vb2F1dGgnO1xuaW1wb3J0IHsgUHJvdmlkZXJJZCwgU2lnbkluTWV0aG9kIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGFuIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZvciB7QGxpbmsgUHJvdmlkZXJJZH0uRkFDRUJPT0suXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXG4gKiBwcm92aWRlci5hZGRTY29wZSgndXNlcl9iaXJ0aGRheScpO1xuICogYXdhaXQgc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyKTtcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxuICpcbiAqIC8vIEFmdGVyIHJldHVybmluZyBmcm9tIHRoZSByZWRpcmVjdCB3aGVuIHlvdXIgYXBwIGluaXRpYWxpemVzIHlvdSBjYW4gb2J0YWluIHRoZSByZXN1bHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xuICogaWYgKHJlc3VsdCkge1xuICogICAvLyBUaGlzIGlzIHRoZSBzaWduZWQtaW4gdXNlclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XG4gKiAgIC8vIFRoaXMgZ2l2ZXMgeW91IGEgRmFjZWJvb2sgQWNjZXNzIFRva2VuLlxuICogICBjb25zdCBjcmVkZW50aWFsID0gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQocmVzdWx0KTtcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogfVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiBwcm92aWRlci5hZGRTY29wZSgndXNlcl9iaXJ0aGRheScpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAqXG4gKiAvLyBUaGUgc2lnbmVkLWluIHVzZXIgaW5mby5cbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqIC8vIFRoaXMgZ2l2ZXMgeW91IGEgRmFjZWJvb2sgQWNjZXNzIFRva2VuLlxuICogY29uc3QgY3JlZGVudGlhbCA9IEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XG4gKiBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWNlYm9va0F1dGhQcm92aWRlciBleHRlbmRzIEJhc2VPQXV0aFByb3ZpZGVyIHtcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRkFDRUJPT0suICovXG4gIHN0YXRpYyByZWFkb25seSBGQUNFQk9PS19TSUdOX0lOX01FVEhPRDogJ2ZhY2Vib29rLmNvbScgPVxuICAgIFNpZ25Jbk1ldGhvZC5GQUNFQk9PSztcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LkZBQ0VCT09LLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUFJPVklERVJfSUQ6ICdmYWNlYm9vay5jb20nID0gUHJvdmlkZXJJZC5GQUNFQk9PSztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQcm92aWRlcklkLkZBQ0VCT09LKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmb3IgRmFjZWJvb2suXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gYGV2ZW50YCBmcm9tIHRoZSBGYWNlYm9vayBhdXRoLmF1dGhSZXNwb25zZUNoYW5nZSBjYWxsYmFjay5cbiAgICogY29uc3QgY3JlZGVudGlhbCA9IEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoZXZlbnQuYXV0aFJlc3BvbnNlLmFjY2Vzc1Rva2VuKTtcbiAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZGVudGlhbCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4gLSBGYWNlYm9vayBhY2Nlc3MgdG9rZW4uXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbChhY2Nlc3NUb2tlbjogc3RyaW5nKTogT0F1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gT0F1dGhDcmVkZW50aWFsLl9mcm9tUGFyYW1zKHtcbiAgICAgIHByb3ZpZGVySWQ6IEZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxuICAgICAgc2lnbkluTWV0aG9kOiBGYWNlYm9va0F1dGhQcm92aWRlci5GQUNFQk9PS19TSUdOX0lOX01FVEhPRCxcbiAgICAgIGFjY2Vzc1Rva2VuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgVXNlckNyZWRlbnRpYWx9LlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KFxuICAgIHVzZXJDcmVkZW50aWFsOiBVc2VyQ3JlZGVudGlhbFxuICApOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xuICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICAoZXJyb3IuY3VzdG9tRGF0YSB8fCB7fSkgYXMgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2VcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3Qoe1xuICAgIF90b2tlblJlc3BvbnNlOiB0b2tlblJlc3BvbnNlXG4gIH06IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgaWYgKCF0b2tlblJlc3BvbnNlIHx8ICEoJ29hdXRoQWNjZXNzVG9rZW4nIGluIHRva2VuUmVzcG9uc2UpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXRva2VuUmVzcG9uc2Uub2F1dGhBY2Nlc3NUb2tlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBGYWNlYm9va0F1dGhQcm92aWRlci5jcmVkZW50aWFsKHRva2VuUmVzcG9uc2Uub2F1dGhBY2Nlc3NUb2tlbik7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7IFNpZ25JbldpdGhJZHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAnO1xuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBPQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscy9vYXV0aCc7XG5pbXBvcnQgeyBCYXNlT0F1dGhQcm92aWRlciB9IGZyb20gJy4vb2F1dGgnO1xuaW1wb3J0IHsgUHJvdmlkZXJJZCwgU2lnbkluTWV0aG9kIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGFuIGFuIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZvciB7QGxpbmsgUHJvdmlkZXJJZH0uR09PR0xFLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHb29nbGVBdXRoUHJvdmlkZXIoKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdwcm9maWxlJyk7XG4gKiBwcm92aWRlci5hZGRTY29wZSgnZW1haWwnKTtcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIEdvb2dsZSBBY2Nlc3MgVG9rZW4uXG4gKiAgIGNvbnN0IGNyZWRlbnRpYWwgPSBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQocmVzdWx0KTtcbiAqICAgY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogfVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEdvb2dsZUF1dGhQcm92aWRlcigpO1xuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3Byb2ZpbGUnKTtcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAqXG4gKiAvLyBUaGUgc2lnbmVkLWluIHVzZXIgaW5mby5cbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqIC8vIFRoaXMgZ2l2ZXMgeW91IGEgR29vZ2xlIEFjY2VzcyBUb2tlbi5cbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQocmVzdWx0KTtcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEdvb2dsZUF1dGhQcm92aWRlciBleHRlbmRzIEJhc2VPQXV0aFByb3ZpZGVyIHtcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uR09PR0xFLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgR09PR0xFX1NJR05fSU5fTUVUSE9EOiAnZ29vZ2xlLmNvbScgPSBTaWduSW5NZXRob2QuR09PR0xFO1xuICAvKiogQWx3YXlzIHNldCB0byB7QGxpbmsgUHJvdmlkZXJJZH0uR09PR0xFLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUFJPVklERVJfSUQ6ICdnb29nbGUuY29tJyA9IFByb3ZpZGVySWQuR09PR0xFO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFByb3ZpZGVySWQuR09PR0xFKTtcbiAgICB0aGlzLmFkZFNjb3BlKCdwcm9maWxlJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgZm9yIEdvb2dsZS4gQXQgbGVhc3Qgb25lIG9mIElEIHRva2VuIGFuZCBhY2Nlc3MgdG9rZW4gaXMgcmVxdWlyZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gXFxgZ29vZ2xlVXNlclxcYCBmcm9tIHRoZSBvbnN1Y2Nlc3MgR29vZ2xlIFNpZ24gSW4gY2FsbGJhY2suXG4gICAqIGNvbnN0IGNyZWRlbnRpYWwgPSBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChnb29nbGVVc2VyLmdldEF1dGhSZXNwb25zZSgpLmlkX3Rva2VuKTtcbiAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZGVudGlhbCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaWRUb2tlbiAtIEdvb2dsZSBJRCB0b2tlbi5cbiAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gR29vZ2xlIGFjY2VzcyB0b2tlbi5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsKFxuICAgIGlkVG9rZW4/OiBzdHJpbmcgfCBudWxsLFxuICAgIGFjY2Vzc1Rva2VuPzogc3RyaW5nIHwgbnVsbFxuICApOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBPQXV0aENyZWRlbnRpYWwuX2Zyb21QYXJhbXMoe1xuICAgICAgcHJvdmlkZXJJZDogR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxuICAgICAgc2lnbkluTWV0aG9kOiBHb29nbGVBdXRoUHJvdmlkZXIuR09PR0xFX1NJR05fSU5fTUVUSE9ELFxuICAgICAgaWRUb2tlbixcbiAgICAgIGFjY2Vzc1Rva2VuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgVXNlckNyZWRlbnRpYWx9LlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KFxuICAgIHVzZXJDcmVkZW50aWFsOiBVc2VyQ3JlZGVudGlhbFxuICApOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gR29vZ2xlQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgdXNlckNyZWRlbnRpYWwgYXMgVXNlckNyZWRlbnRpYWxJbnRlcm5hbFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIEF1dGhFcnJvcn0gd2hpY2ggd2FzXG4gICAqIHRocm93biBkdXJpbmcgYSBzaWduLWluLCBsaW5rLCBvciByZWF1dGhlbnRpY2F0ZSBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21FcnJvcihlcnJvcjogRmlyZWJhc2VFcnJvcik6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICAoZXJyb3IuY3VzdG9tRGF0YSB8fCB7fSkgYXMgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2VcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3Qoe1xuICAgIF90b2tlblJlc3BvbnNlOiB0b2tlblJlc3BvbnNlXG4gIH06IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IG9hdXRoSWRUb2tlbiwgb2F1dGhBY2Nlc3NUb2tlbiB9ID1cbiAgICAgIHRva2VuUmVzcG9uc2UgYXMgU2lnbkluV2l0aElkcFJlc3BvbnNlO1xuICAgIGlmICghb2F1dGhJZFRva2VuICYmICFvYXV0aEFjY2Vzc1Rva2VuKSB7XG4gICAgICAvLyBUaGlzIGNvdWxkIGJlIGFuIG9hdXRoIDEgY3JlZGVudGlhbCBvciBhIHBob25lIGNyZWRlbnRpYWxcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gR29vZ2xlQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwob2F1dGhJZFRva2VuLCBvYXV0aEFjY2Vzc1Rva2VuKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBPQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscy9vYXV0aCc7XG5pbXBvcnQgeyBCYXNlT0F1dGhQcm92aWRlciB9IGZyb20gJy4vb2F1dGgnO1xuaW1wb3J0IHsgUHJvdmlkZXJJZCwgU2lnbkluTWV0aG9kIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGFuIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZvciB7QGxpbmsgUHJvdmlkZXJJZH0uR0lUSFVCLlxuICpcbiAqIEByZW1hcmtzXG4gKiBHaXRIdWIgcmVxdWlyZXMgYW4gT0F1dGggMi4wIHJlZGlyZWN0LCBzbyB5b3UgY2FuIGVpdGhlciBoYW5kbGUgdGhlIHJlZGlyZWN0IGRpcmVjdGx5LCBvciB1c2VcbiAqIHRoZSB7QGxpbmsgc2lnbkluV2l0aFBvcHVwfSBoYW5kbGVyOlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHaXRodWJBdXRoUHJvdmlkZXIoKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdyZXBvJyk7XG4gKiBhd2FpdCBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIpO1xuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXG4gKlxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XG4gKiBpZiAocmVzdWx0KSB7XG4gKiAgIC8vIFRoaXMgaXMgdGhlIHNpZ25lZC1pbiB1c2VyXG4gKiAgIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBHaXRodWIgQWNjZXNzIFRva2VuLlxuICogICBjb25zdCBjcmVkZW50aWFsID0gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHaXRodWJBdXRoUHJvdmlkZXIoKTtcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdyZXBvJyk7XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xuICpcbiAqIC8vIFRoZSBzaWduZWQtaW4gdXNlciBpbmZvLlxuICogY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBHaXRodWIgQWNjZXNzIFRva2VuLlxuICogY29uc3QgY3JlZGVudGlhbCA9IEdpdGh1YkF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRodWJBdXRoUHJvdmlkZXIgZXh0ZW5kcyBCYXNlT0F1dGhQcm92aWRlciB7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LkdJVEhVQi4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IEdJVEhVQl9TSUdOX0lOX01FVEhPRDogJ2dpdGh1Yi5jb20nID0gU2lnbkluTWV0aG9kLkdJVEhVQjtcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LkdJVEhVQi4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAnZ2l0aHViLmNvbScgPSBQcm92aWRlcklkLkdJVEhVQjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQcm92aWRlcklkLkdJVEhVQik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgZm9yIEdpdGh1Yi5cbiAgICpcbiAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gR2l0aHViIGFjY2VzcyB0b2tlbi5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsKGFjY2Vzc1Rva2VuOiBzdHJpbmcpOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBPQXV0aENyZWRlbnRpYWwuX2Zyb21QYXJhbXMoe1xuICAgICAgcHJvdmlkZXJJZDogR2l0aHViQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxuICAgICAgc2lnbkluTWV0aG9kOiBHaXRodWJBdXRoUHJvdmlkZXIuR0lUSFVCX1NJR05fSU5fTUVUSE9ELFxuICAgICAgYWNjZXNzVG9rZW5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQoXG4gICAgdXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsXG4gICk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBHaXRodWJBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xuICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgKGVycm9yLmN1c3RvbURhdGEgfHwge30pIGFzIFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHtcbiAgICBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZVxuICB9OiBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSB8fCAhKCdvYXV0aEFjY2Vzc1Rva2VuJyBpbiB0b2tlblJlc3BvbnNlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlblJlc3BvbnNlLm9hdXRoQWNjZXNzVG9rZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodG9rZW5SZXNwb25zZS5vYXV0aEFjY2Vzc1Rva2VuKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBTQU1MIGNyZWRlbnRpYWxzIHJldHVybmVkIGJ5IGFuIHtAbGluayBTQU1MQXV0aFByb3ZpZGVyfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cblxuaW1wb3J0IHtcbiAgc2lnbkluV2l0aElkcCxcbiAgU2lnbkluV2l0aElkcFJlcXVlc3Rcbn0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2lkcCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9hdXRoX2NyZWRlbnRpYWwnO1xuXG5jb25zdCBJRFBfUkVRVUVTVF9VUkkgPSAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgU0FNTEF1dGhDcmVkZW50aWFsIGV4dGVuZHMgQXV0aENyZWRlbnRpYWwge1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGVuZGluZ1Rva2VuOiBzdHJpbmdcbiAgKSB7XG4gICAgc3VwZXIocHJvdmlkZXJJZCwgcHJvdmlkZXJJZCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5idWlsZFJlcXVlc3QoKTtcbiAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCByZXF1ZXN0KTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2xpbmtUb0lkVG9rZW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGlkVG9rZW46IHN0cmluZ1xuICApOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmJ1aWxkUmVxdWVzdCgpO1xuICAgIHJlcXVlc3QuaWRUb2tlbiA9IGlkVG9rZW47XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5idWlsZFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0LmF1dG9DcmVhdGUgPSBmYWxzZTtcbiAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCByZXF1ZXN0KTtcbiAgfVxuXG4gIC8qKiB7QGluaGVyaXRkb2MgQXV0aENyZWRlbnRpYWwudG9KU09OfSAgKi9cbiAgdG9KU09OKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNpZ25Jbk1ldGhvZDogdGhpcy5zaWduSW5NZXRob2QsXG4gICAgICBwcm92aWRlcklkOiB0aGlzLnByb3ZpZGVySWQsXG4gICAgICBwZW5kaW5nVG9rZW46IHRoaXMucGVuZGluZ1Rva2VuXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgbWV0aG9kIHRvIGRlc2VyaWFsaXplIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QgaW50byBhblxuICAgKiB7QGxpbmsgIEF1dGhDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIGpzb24gLSBJbnB1dCBjYW4gYmUgZWl0aGVyIE9iamVjdCBvciB0aGUgc3RyaW5naWZpZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdC5cbiAgICogV2hlbiBzdHJpbmcgaXMgcHJvdmlkZWQsIEpTT04ucGFyc2Ugd291bGQgYmUgY2FsbGVkIGZpcnN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBJZiB0aGUgSlNPTiBpbnB1dCBkb2VzIG5vdCByZXByZXNlbnQgYW4ge0BsaW5rICBBdXRoQ3JlZGVudGlhbH0sIG51bGwgaXMgcmV0dXJuZWQuXG4gICAqL1xuICBzdGF0aWMgZnJvbUpTT04oanNvbjogc3RyaW5nIHwgb2JqZWN0KTogU0FNTEF1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgY29uc3Qgb2JqID0gdHlwZW9mIGpzb24gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShqc29uKSA6IGpzb247XG4gICAgY29uc3QgeyBwcm92aWRlcklkLCBzaWduSW5NZXRob2QsIHBlbmRpbmdUb2tlbiB9OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID1cbiAgICAgIG9iajtcbiAgICBpZiAoXG4gICAgICAhcHJvdmlkZXJJZCB8fFxuICAgICAgIXNpZ25Jbk1ldGhvZCB8fFxuICAgICAgIXBlbmRpbmdUb2tlbiB8fFxuICAgICAgcHJvdmlkZXJJZCAhPT0gc2lnbkluTWV0aG9kXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNBTUxBdXRoQ3JlZGVudGlhbChwcm92aWRlcklkLCBwZW5kaW5nVG9rZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBzdGF0aWMgbWV0aG9kIHRvIGF2b2lkIGV4cG9zaW5nIHRoZSBjb25zdHJ1Y3RvciB0byBlbmQgdXNlcnMuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc3RhdGljIF9jcmVhdGUocHJvdmlkZXJJZDogc3RyaW5nLCBwZW5kaW5nVG9rZW46IHN0cmluZyk6IFNBTUxBdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIG5ldyBTQU1MQXV0aENyZWRlbnRpYWwocHJvdmlkZXJJZCwgcGVuZGluZ1Rva2VuKTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRSZXF1ZXN0KCk6IFNpZ25JbldpdGhJZHBSZXF1ZXN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVxdWVzdFVyaTogSURQX1JFUVVFU1RfVVJJLFxuICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXG4gICAgICBwZW5kaW5nVG9rZW46IHRoaXMucGVuZGluZ1Rva2VuXG4gICAgfTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IFNpZ25JbldpdGhJZHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAnO1xuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IFNBTUxBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzL3NhbWwnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9mZWRlcmF0ZWQnO1xuXG5jb25zdCBTQU1MX1BST1ZJREVSX1BSRUZJWCA9ICdzYW1sLic7XG5cbi8qKlxuICogQW4ge0BsaW5rIEF1dGhQcm92aWRlcn0gZm9yIFNBTUwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgU0FNTEF1dGhQcm92aWRlciBleHRlbmRzIEZlZGVyYXRlZEF1dGhQcm92aWRlciB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3Rvci4gVGhlIHByb3ZpZGVySWQgbXVzdCBzdGFydCB3aXRoIFwic2FtbC5cIlxuICAgKiBAcGFyYW0gcHJvdmlkZXJJZCAtIFNBTUwgcHJvdmlkZXIgSUQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm92aWRlcklkOiBzdHJpbmcpIHtcbiAgICBfYXNzZXJ0KFxuICAgICAgcHJvdmlkZXJJZC5zdGFydHNXaXRoKFNBTUxfUFJPVklERVJfUFJFRklYKSxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIHN1cGVyKHByb3ZpZGVySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgVXNlckNyZWRlbnRpYWx9IGFmdGVyIGFcbiAgICogc3VjY2Vzc2Z1bCBTQU1MIGZsb3cgY29tcGxldGVzLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgdG8gZ2V0IGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0sIHlvdSBjb3VsZCB3cml0ZSB0aGVcbiAgICogZm9sbG93aW5nIGNvZGU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHNhbWxQcm92aWRlcik7XG4gICAqIGNvbnN0IGNyZWRlbnRpYWwgPSBTQU1MQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHVzZXJDcmVkZW50aWFsKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQoXG4gICAgdXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsXG4gICk6IEF1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIFNBTUxBdXRoUHJvdmlkZXIuc2FtbENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgdXNlckNyZWRlbnRpYWwgYXMgVXNlckNyZWRlbnRpYWxJbnRlcm5hbFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcbiAgICogdGhyb3duIGR1cmluZyBhIHNpZ24taW4sIGxpbmssIG9yIHJlYXV0aGVudGljYXRlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbUVycm9yKGVycm9yOiBGaXJlYmFzZUVycm9yKTogQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gU0FNTEF1dGhQcm92aWRlci5zYW1sQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICAoZXJyb3IuY3VzdG9tRGF0YSB8fCB7fSkgYXMgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSBmcm9tIGEgSlNPTiBzdHJpbmcgb3IgYSBwbGFpbiBvYmplY3QuXG4gICAqIEBwYXJhbSBqc29uIC0gQSBwbGFpbiBvYmplY3Qgb3IgYSBKU09OIHN0cmluZ1xuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tSlNPTihqc29uOiBzdHJpbmcgfCBvYmplY3QpOiBBdXRoQ3JlZGVudGlhbCB7XG4gICAgY29uc3QgY3JlZGVudGlhbCA9IFNBTUxBdXRoQ3JlZGVudGlhbC5mcm9tSlNPTihqc29uKTtcbiAgICBfYXNzZXJ0KGNyZWRlbnRpYWwsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuICAgIHJldHVybiBjcmVkZW50aWFsO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgc2FtbENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHtcbiAgICBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZVxuICB9OiBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSk6IFNBTUxBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBwZW5kaW5nVG9rZW4sIHByb3ZpZGVySWQgfSA9IHRva2VuUmVzcG9uc2UgYXMgU2lnbkluV2l0aElkcFJlc3BvbnNlO1xuXG4gICAgaWYgKCFwZW5kaW5nVG9rZW4gfHwgIXByb3ZpZGVySWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gU0FNTEF1dGhDcmVkZW50aWFsLl9jcmVhdGUocHJvdmlkZXJJZCwgcGVuZGluZ1Rva2VuKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIFR3aXR0ZXIgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQgeyBTaWduSW5XaXRoSWRwUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vaWRwJztcbmltcG9ydCB7IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgT0F1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vY3JlZGVudGlhbHMvb2F1dGgnO1xuaW1wb3J0IHsgQmFzZU9BdXRoUHJvdmlkZXIgfSBmcm9tICcuL29hdXRoJztcbmltcG9ydCB7IFByb3ZpZGVySWQsIFNpZ25Jbk1ldGhvZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuLyoqXG4gKiBQcm92aWRlciBmb3IgZ2VuZXJhdGluZyBhbiB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmb3Ige0BsaW5rIFByb3ZpZGVySWR9LlRXSVRURVIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IFR3aXR0ZXJBdXRoUHJvdmlkZXIoKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIFR3aXR0ZXIgQWNjZXNzIFRva2VuIGFuZCBTZWNyZXQuXG4gKiAgIGNvbnN0IGNyZWRlbnRpYWwgPSBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqICAgY29uc3Qgc2VjcmV0ID0gY3JlZGVudGlhbC5zZWNyZXQ7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHBvcHVwLlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgVHdpdHRlckF1dGhQcm92aWRlcigpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAqXG4gKiAvLyBUaGUgc2lnbmVkLWluIHVzZXIgaW5mby5cbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqIC8vIFRoaXMgZ2l2ZXMgeW91IGEgVHdpdHRlciBBY2Nlc3MgVG9rZW4gYW5kIFNlY3JldC5cbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XG4gKiBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiBjb25zdCBzZWNyZXQgPSBjcmVkZW50aWFsLnNlY3JldDtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFR3aXR0ZXJBdXRoUHJvdmlkZXIgZXh0ZW5kcyBCYXNlT0F1dGhQcm92aWRlciB7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LlRXSVRURVIuICovXG4gIHN0YXRpYyByZWFkb25seSBUV0lUVEVSX1NJR05fSU5fTUVUSE9EOiAndHdpdHRlci5jb20nID0gU2lnbkluTWV0aG9kLlRXSVRURVI7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5UV0lUVEVSLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUFJPVklERVJfSUQ6ICd0d2l0dGVyLmNvbScgPSBQcm92aWRlcklkLlRXSVRURVI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUHJvdmlkZXJJZC5UV0lUVEVSKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmb3IgVHdpdHRlci5cbiAgICpcbiAgICogQHBhcmFtIHRva2VuIC0gVHdpdHRlciBhY2Nlc3MgdG9rZW4uXG4gICAqIEBwYXJhbSBzZWNyZXQgLSBUd2l0dGVyIHNlY3JldC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsKHRva2VuOiBzdHJpbmcsIHNlY3JldDogc3RyaW5nKTogT0F1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gT0F1dGhDcmVkZW50aWFsLl9mcm9tUGFyYW1zKHtcbiAgICAgIHByb3ZpZGVySWQ6IFR3aXR0ZXJBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXG4gICAgICBzaWduSW5NZXRob2Q6IFR3aXR0ZXJBdXRoUHJvdmlkZXIuVFdJVFRFUl9TSUdOX0lOX01FVEhPRCxcbiAgICAgIG9hdXRoVG9rZW46IHRva2VuLFxuICAgICAgb2F1dGhUb2tlblNlY3JldDogc2VjcmV0XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgVXNlckNyZWRlbnRpYWx9LlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KFxuICAgIHVzZXJDcmVkZW50aWFsOiBVc2VyQ3JlZGVudGlhbFxuICApOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIHVzZXJDcmVkZW50aWFsIGFzIFVzZXJDcmVkZW50aWFsSW50ZXJuYWxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIEF1dGhFcnJvcn0gd2hpY2ggd2FzXG4gICAqIHRocm93biBkdXJpbmcgYSBzaWduLWluLCBsaW5rLCBvciByZWF1dGhlbnRpY2F0ZSBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21FcnJvcihlcnJvcjogRmlyZWJhc2VFcnJvcik6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgKGVycm9yLmN1c3RvbURhdGEgfHwge30pIGFzIFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHtcbiAgICBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZVxuICB9OiBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgb2F1dGhBY2Nlc3NUb2tlbiwgb2F1dGhUb2tlblNlY3JldCB9ID1cbiAgICAgIHRva2VuUmVzcG9uc2UgYXMgU2lnbkluV2l0aElkcFJlc3BvbnNlO1xuICAgIGlmICghb2F1dGhBY2Nlc3NUb2tlbiB8fCAhb2F1dGhUb2tlblNlY3JldCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBUd2l0dGVyQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwob2F1dGhBY2Nlc3NUb2tlbiwgb2F1dGhUb2tlblNlY3JldCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBSZWNhcHRjaGFDbGllbnRUeXBlLFxuICBSZWNhcHRjaGFWZXJzaW9uLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9wZXJmb3JtU2lnbkluUmVxdWVzdFxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaWduVXBSZXF1ZXN0IHtcbiAgcmV0dXJuU2VjdXJlVG9rZW4/OiBib29sZWFuO1xuICBlbWFpbD86IHN0cmluZztcbiAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xuICBjYXB0Y2hhUmVzcG9uc2U/OiBzdHJpbmc7XG4gIGNsaWVudFR5cGU/OiBSZWNhcHRjaGFDbGllbnRUeXBlO1xuICByZWNhcHRjaGFWZXJzaW9uPzogUmVjYXB0Y2hhVmVyc2lvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaWduVXBSZXNwb25zZSBleHRlbmRzIElkVG9rZW5SZXNwb25zZSB7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICBlbWFpbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25VcChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogU2lnblVwUmVxdWVzdFxuKTogUHJvbWlzZTxTaWduVXBSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0PFNpZ25VcFJlcXVlc3QsIFNpZ25VcFJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TSUdOX1VQLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgVXNlckludGVybmFsLCBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBVc2VySW1wbCB9IGZyb20gJy4vdXNlcl9pbXBsJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSwgUHJvdmlkZXJJZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuaW50ZXJmYWNlIFVzZXJDcmVkZW50aWFsUGFyYW1zIHtcbiAgcmVhZG9ubHkgdXNlcjogVXNlckludGVybmFsO1xuICByZWFkb25seSBwcm92aWRlcklkOiBQcm92aWRlcklkIHwgc3RyaW5nIHwgbnVsbDtcbiAgcmVhZG9ubHkgX3Rva2VuUmVzcG9uc2U/OiBQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlO1xuICByZWFkb25seSBvcGVyYXRpb25UeXBlOiBPcGVyYXRpb25UeXBlO1xufVxuXG5leHBvcnQgY2xhc3MgVXNlckNyZWRlbnRpYWxJbXBsXG4gIGltcGxlbWVudHMgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCwgVXNlckNyZWRlbnRpYWxQYXJhbXNcbntcbiAgcmVhZG9ubHkgdXNlcjogVXNlckludGVybmFsO1xuICByZWFkb25seSBwcm92aWRlcklkOiBQcm92aWRlcklkIHwgc3RyaW5nIHwgbnVsbDtcbiAgcmVhZG9ubHkgX3Rva2VuUmVzcG9uc2U6IFBob25lT3JPYXV0aFRva2VuUmVzcG9uc2UgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IG9wZXJhdGlvblR5cGU6IE9wZXJhdGlvblR5cGU7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBVc2VyQ3JlZGVudGlhbFBhcmFtcykge1xuICAgIHRoaXMudXNlciA9IHBhcmFtcy51c2VyO1xuICAgIHRoaXMucHJvdmlkZXJJZCA9IHBhcmFtcy5wcm92aWRlcklkO1xuICAgIHRoaXMuX3Rva2VuUmVzcG9uc2UgPSBwYXJhbXMuX3Rva2VuUmVzcG9uc2U7XG4gICAgdGhpcy5vcGVyYXRpb25UeXBlID0gcGFyYW1zLm9wZXJhdGlvblR5cGU7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX2Zyb21JZFRva2VuUmVzcG9uc2UoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIG9wZXJhdGlvblR5cGU6IE9wZXJhdGlvblR5cGUsXG4gICAgaWRUb2tlblJlc3BvbnNlOiBJZFRva2VuUmVzcG9uc2UsXG4gICAgaXNBbm9ueW1vdXM6IGJvb2xlYW4gPSBmYWxzZVxuICApOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+IHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlckltcGwuX2Zyb21JZFRva2VuUmVzcG9uc2UoXG4gICAgICBhdXRoLFxuICAgICAgaWRUb2tlblJlc3BvbnNlLFxuICAgICAgaXNBbm9ueW1vdXNcbiAgICApO1xuICAgIGNvbnN0IHByb3ZpZGVySWQgPSBwcm92aWRlcklkRm9yUmVzcG9uc2UoaWRUb2tlblJlc3BvbnNlKTtcbiAgICBjb25zdCB1c2VyQ3JlZCA9IG5ldyBVc2VyQ3JlZGVudGlhbEltcGwoe1xuICAgICAgdXNlcixcbiAgICAgIHByb3ZpZGVySWQsXG4gICAgICBfdG9rZW5SZXNwb25zZTogaWRUb2tlblJlc3BvbnNlLFxuICAgICAgb3BlcmF0aW9uVHlwZVxuICAgIH0pO1xuICAgIHJldHVybiB1c2VyQ3JlZDtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfZm9yT3BlcmF0aW9uKFxuICAgIHVzZXI6IFVzZXJJbnRlcm5hbCxcbiAgICBvcGVyYXRpb25UeXBlOiBPcGVyYXRpb25UeXBlLFxuICAgIHJlc3BvbnNlOiBQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlXG4gICk6IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbXBsPiB7XG4gICAgYXdhaXQgdXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkocmVzcG9uc2UsIC8qIHJlbG9hZCAqLyB0cnVlKTtcbiAgICBjb25zdCBwcm92aWRlcklkID0gcHJvdmlkZXJJZEZvclJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gbmV3IFVzZXJDcmVkZW50aWFsSW1wbCh7XG4gICAgICB1c2VyLFxuICAgICAgcHJvdmlkZXJJZCxcbiAgICAgIF90b2tlblJlc3BvbnNlOiByZXNwb25zZSxcbiAgICAgIG9wZXJhdGlvblR5cGVcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm92aWRlcklkRm9yUmVzcG9uc2UoXG4gIHJlc3BvbnNlOiBJZFRva2VuUmVzcG9uc2Vcbik6IFByb3ZpZGVySWQgfCBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKHJlc3BvbnNlLnByb3ZpZGVySWQpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UucHJvdmlkZXJJZDtcbiAgfVxuXG4gIGlmICgncGhvbmVOdW1iZXInIGluIHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIFByb3ZpZGVySWQuUEhPTkU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGgsIFVzZXJDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IHNpZ25VcCB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9zaWduX3VwJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbXBsIH0gZnJvbSAnLi4vdXNlci91c2VyX2NyZWRlbnRpYWxfaW1wbCc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIGFzIGFuIGFub255bW91cyB1c2VyLlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGFub255bW91cyB1c2VyIHNpZ25lZCBpbiwgdGhhdCB1c2VyIHdpbGwgYmUgcmV0dXJuZWQ7IG90aGVyd2lzZSwgYVxuICogbmV3IGFub255bW91cyB1c2VyIGlkZW50aXR5IHdpbGwgYmUgY3JlYXRlZCBhbmQgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbkFub255bW91c2x5KGF1dGg6IEF1dGgpOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgYXdhaXQgYXV0aEludGVybmFsLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gIGlmIChhdXRoSW50ZXJuYWwuY3VycmVudFVzZXI/LmlzQW5vbnltb3VzKSB7XG4gICAgLy8gSWYgYW4gYW5vbnltb3VzIHVzZXIgaXMgYWxyZWFkeSBzaWduZWQgaW4sIG5vIG5lZWQgdG8gc2lnbiB0aGVtIGluIGFnYWluLlxuICAgIHJldHVybiBuZXcgVXNlckNyZWRlbnRpYWxJbXBsKHtcbiAgICAgIHVzZXI6IGF1dGhJbnRlcm5hbC5jdXJyZW50VXNlciBhcyBVc2VySW50ZXJuYWwsXG4gICAgICBwcm92aWRlcklkOiBudWxsLFxuICAgICAgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZS5TSUdOX0lOXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduVXAoYXV0aEludGVybmFsLCB7XG4gICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWVcbiAgfSk7XG4gIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgVXNlckNyZWRlbnRpYWxJbXBsLl9mcm9tSWRUb2tlblJlc3BvbnNlKFxuICAgIGF1dGhJbnRlcm5hbCxcbiAgICBPcGVyYXRpb25UeXBlLlNJR05fSU4sXG4gICAgcmVzcG9uc2UsXG4gICAgdHJ1ZVxuICApO1xuICBhd2FpdCBhdXRoSW50ZXJuYWwuX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXJDcmVkZW50aWFsLnVzZXIpO1xuICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBNdWx0aUZhY3RvckVycm9yIGFzIE11bHRpRmFjdG9yRXJyb3JQdWJsaWMgfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jb3JlL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IElkVG9rZW5NZmFSZXNwb25zZSB9IGZyb20gJy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uL21vZGVsL2VudW1zJztcblxuZXhwb3J0IHR5cGUgTXVsdGlGYWN0b3JFcnJvckRhdGEgPSBNdWx0aUZhY3RvckVycm9yUHVibGljWydjdXN0b21EYXRhJ10gJiB7XG4gIF9zZXJ2ZXJSZXNwb25zZTogSWRUb2tlbk1mYVJlc3BvbnNlO1xufTtcblxuZXhwb3J0IGNsYXNzIE11bHRpRmFjdG9yRXJyb3JcbiAgZXh0ZW5kcyBGaXJlYmFzZUVycm9yXG4gIGltcGxlbWVudHMgTXVsdGlGYWN0b3JFcnJvclB1YmxpY1xue1xuICByZWFkb25seSBjdXN0b21EYXRhOiBNdWx0aUZhY3RvckVycm9yRGF0YTtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBlcnJvcjogRmlyZWJhc2VFcnJvcixcbiAgICByZWFkb25seSBvcGVyYXRpb25UeXBlOiBPcGVyYXRpb25UeXBlLFxuICAgIHJlYWRvbmx5IHVzZXI/OiBVc2VySW50ZXJuYWxcbiAgKSB7XG4gICAgc3VwZXIoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTXVsdGlGYWN0b3JFcnJvci5wcm90b3R5cGUpO1xuICAgIHRoaXMuY3VzdG9tRGF0YSA9IHtcbiAgICAgIGFwcE5hbWU6IGF1dGgubmFtZSxcbiAgICAgIHRlbmFudElkOiBhdXRoLnRlbmFudElkID8/IHVuZGVmaW5lZCxcbiAgICAgIF9zZXJ2ZXJSZXNwb25zZTogZXJyb3IuY3VzdG9tRGF0YSEuX3NlcnZlclJlc3BvbnNlIGFzIElkVG9rZW5NZmFSZXNwb25zZSxcbiAgICAgIG9wZXJhdGlvblR5cGVcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIF9mcm9tRXJyb3JBbmRPcGVyYXRpb24oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGVycm9yOiBGaXJlYmFzZUVycm9yLFxuICAgIG9wZXJhdGlvblR5cGU6IE9wZXJhdGlvblR5cGUsXG4gICAgdXNlcj86IFVzZXJJbnRlcm5hbFxuICApOiBNdWx0aUZhY3RvckVycm9yIHtcbiAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yRXJyb3IoYXV0aCwgZXJyb3IsIG9wZXJhdGlvblR5cGUsIHVzZXIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcHJvY2Vzc0NyZWRlbnRpYWxTYXZpbmdNZmFDb250ZXh0SWZOZWNlc3NhcnkoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZSxcbiAgY3JlZGVudGlhbDogQXV0aENyZWRlbnRpYWwsXG4gIHVzZXI/OiBVc2VySW50ZXJuYWxcbik6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gIGNvbnN0IGlkVG9rZW5Qcm92aWRlciA9XG4gICAgb3BlcmF0aW9uVHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5SRUFVVEhFTlRJQ0FURVxuICAgICAgPyBjcmVkZW50aWFsLl9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aClcbiAgICAgIDogY3JlZGVudGlhbC5fZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGgpO1xuXG4gIHJldHVybiBpZFRva2VuUHJvdmlkZXIuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGlmIChlcnJvci5jb2RlID09PSBgYXV0aC8ke0F1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEfWApIHtcbiAgICAgIHRocm93IE11bHRpRmFjdG9yRXJyb3IuX2Zyb21FcnJvckFuZE9wZXJhdGlvbihcbiAgICAgICAgYXV0aCxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIG9wZXJhdGlvblR5cGUsXG4gICAgICAgIHVzZXJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlckFzc29jaWF0ZWRPYmplY3Qge1xuICBwcm92aWRlcklkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIFVzZXJJbmZvIHByb3ZpZGVyIGRhdGEgYW5kIGNvbnZlcnRzIGl0IHRvIGEgc2V0IG9mIG5hbWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlckRhdGFBc05hbWVzPFQgZXh0ZW5kcyBQcm92aWRlckFzc29jaWF0ZWRPYmplY3Q+KFxuICBwcm92aWRlckRhdGE6IFRbXVxuKTogU2V0PHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFNldChcbiAgICBwcm92aWRlckRhdGFcbiAgICAgIC5tYXAoKHsgcHJvdmlkZXJJZCB9KSA9PiBwcm92aWRlcklkKVxuICAgICAgLmZpbHRlcihwaWQgPT4gISFwaWQpIGFzIHN0cmluZ1tdXG4gICk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgZGVsZXRlTGlua2VkQWNjb3VudHMgfSBmcm9tICcuLi8uLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L2FjY291bnQnO1xuaW1wb3J0IHsgVXNlckludGVybmFsLCBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IHByb3ZpZGVyRGF0YUFzTmFtZXMgfSBmcm9tICcuLi91dGlsL3Byb3ZpZGVycyc7XG5pbXBvcnQgeyBfbG9nb3V0SWZJbnZhbGlkYXRlZCB9IGZyb20gJy4vaW52YWxpZGF0aW9uJztcbmltcG9ydCB7IF9yZWxvYWRXaXRob3V0U2F2aW5nIH0gZnJvbSAnLi9yZWxvYWQnO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbXBsIH0gZnJvbSAnLi91c2VyX2NyZWRlbnRpYWxfaW1wbCc7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlLCBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFVubGlua3MgYSBwcm92aWRlciBmcm9tIGEgdXNlciBhY2NvdW50LlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gcHJvdmlkZXJJZCAtIFRoZSBwcm92aWRlciB0byB1bmxpbmsuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdW5saW5rKHVzZXI6IFVzZXIsIHByb3ZpZGVySWQ6IHN0cmluZyk6IFByb21pc2U8VXNlcj4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBhd2FpdCBfYXNzZXJ0TGlua2VkU3RhdHVzKHRydWUsIHVzZXJJbnRlcm5hbCwgcHJvdmlkZXJJZCk7XG4gIGNvbnN0IHsgcHJvdmlkZXJVc2VySW5mbyB9ID0gYXdhaXQgZGVsZXRlTGlua2VkQWNjb3VudHModXNlckludGVybmFsLmF1dGgsIHtcbiAgICBpZFRva2VuOiBhd2FpdCB1c2VySW50ZXJuYWwuZ2V0SWRUb2tlbigpLFxuICAgIGRlbGV0ZVByb3ZpZGVyOiBbcHJvdmlkZXJJZF1cbiAgfSk7XG5cbiAgY29uc3QgcHJvdmlkZXJzTGVmdCA9IHByb3ZpZGVyRGF0YUFzTmFtZXMocHJvdmlkZXJVc2VySW5mbyB8fCBbXSk7XG5cbiAgdXNlckludGVybmFsLnByb3ZpZGVyRGF0YSA9IHVzZXJJbnRlcm5hbC5wcm92aWRlckRhdGEuZmlsdGVyKHBkID0+XG4gICAgcHJvdmlkZXJzTGVmdC5oYXMocGQucHJvdmlkZXJJZClcbiAgKTtcbiAgaWYgKCFwcm92aWRlcnNMZWZ0LmhhcyhQcm92aWRlcklkLlBIT05FKSkge1xuICAgIHVzZXJJbnRlcm5hbC5waG9uZU51bWJlciA9IG51bGw7XG4gIH1cblxuICBhd2FpdCB1c2VySW50ZXJuYWwuYXV0aC5fcGVyc2lzdFVzZXJJZkN1cnJlbnQodXNlckludGVybmFsKTtcbiAgcmV0dXJuIHVzZXJJbnRlcm5hbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9saW5rKFxuICB1c2VyOiBVc2VySW50ZXJuYWwsXG4gIGNyZWRlbnRpYWw6IEF1dGhDcmVkZW50aWFsLFxuICBieXBhc3NBdXRoU3RhdGUgPSBmYWxzZVxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsPiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgdXNlcixcbiAgICBjcmVkZW50aWFsLl9saW5rVG9JZFRva2VuKHVzZXIuYXV0aCwgYXdhaXQgdXNlci5nZXRJZFRva2VuKCkpLFxuICAgIGJ5cGFzc0F1dGhTdGF0ZVxuICApO1xuICByZXR1cm4gVXNlckNyZWRlbnRpYWxJbXBsLl9mb3JPcGVyYXRpb24odXNlciwgT3BlcmF0aW9uVHlwZS5MSU5LLCByZXNwb25zZSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfYXNzZXJ0TGlua2VkU3RhdHVzKFxuICBleHBlY3RlZDogYm9vbGVhbixcbiAgdXNlcjogVXNlckludGVybmFsLFxuICBwcm92aWRlcjogc3RyaW5nXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgYXdhaXQgX3JlbG9hZFdpdGhvdXRTYXZpbmcodXNlcik7XG4gIGNvbnN0IHByb3ZpZGVySWRzID0gcHJvdmlkZXJEYXRhQXNOYW1lcyh1c2VyLnByb3ZpZGVyRGF0YSk7XG5cbiAgY29uc3QgY29kZSA9XG4gICAgZXhwZWN0ZWQgPT09IGZhbHNlXG4gICAgICA/IEF1dGhFcnJvckNvZGUuUFJPVklERVJfQUxSRUFEWV9MSU5LRURcbiAgICAgIDogQXV0aEVycm9yQ29kZS5OT19TVUNIX1BST1ZJREVSO1xuICBfYXNzZXJ0KHByb3ZpZGVySWRzLmhhcyhwcm92aWRlcikgPT09IGV4cGVjdGVkLCB1c2VyLmF1dGgsIGNvZGUpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IF9wcm9jZXNzQ3JlZGVudGlhbFNhdmluZ01mYUNvbnRleHRJZk5lY2Vzc2FyeSB9IGZyb20gJy4uLy4uL21mYS9tZmFfZXJyb3InO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQsIF9mYWlsIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX3BhcnNlVG9rZW4gfSBmcm9tICcuL2lkX3Rva2VuX3Jlc3VsdCc7XG5pbXBvcnQgeyBfbG9nb3V0SWZJbnZhbGlkYXRlZCB9IGZyb20gJy4vaW52YWxpZGF0aW9uJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW1wbCB9IGZyb20gJy4vdXNlcl9jcmVkZW50aWFsX2ltcGwnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3JlYXV0aGVudGljYXRlKFxuICB1c2VyOiBVc2VySW50ZXJuYWwsXG4gIGNyZWRlbnRpYWw6IEF1dGhDcmVkZW50aWFsLFxuICBieXBhc3NBdXRoU3RhdGUgPSBmYWxzZVxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEltcGw+IHtcbiAgY29uc3QgeyBhdXRoIH0gPSB1c2VyO1xuICBjb25zdCBvcGVyYXRpb25UeXBlID0gT3BlcmF0aW9uVHlwZS5SRUFVVEhFTlRJQ0FURTtcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgICB1c2VyLFxuICAgICAgX3Byb2Nlc3NDcmVkZW50aWFsU2F2aW5nTWZhQ29udGV4dElmTmVjZXNzYXJ5KFxuICAgICAgICBhdXRoLFxuICAgICAgICBvcGVyYXRpb25UeXBlLFxuICAgICAgICBjcmVkZW50aWFsLFxuICAgICAgICB1c2VyXG4gICAgICApLFxuICAgICAgYnlwYXNzQXV0aFN0YXRlXG4gICAgKTtcbiAgICBfYXNzZXJ0KHJlc3BvbnNlLmlkVG9rZW4sIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIGNvbnN0IHBhcnNlZCA9IF9wYXJzZVRva2VuKHJlc3BvbnNlLmlkVG9rZW4pO1xuICAgIF9hc3NlcnQocGFyc2VkLCBhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcblxuICAgIGNvbnN0IHsgc3ViOiBsb2NhbElkIH0gPSBwYXJzZWQ7XG4gICAgX2Fzc2VydCh1c2VyLnVpZCA9PT0gbG9jYWxJZCwgYXV0aCwgQXV0aEVycm9yQ29kZS5VU0VSX01JU01BVENIKTtcblxuICAgIHJldHVybiBVc2VyQ3JlZGVudGlhbEltcGwuX2Zvck9wZXJhdGlvbih1c2VyLCBvcGVyYXRpb25UeXBlLCByZXNwb25zZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBDb252ZXJ0IHVzZXIgZGVsZXRlZCBlcnJvciBpbnRvIHVzZXIgbWlzbWF0Y2hcbiAgICBpZiAoKGUgYXMgRmlyZWJhc2VFcnJvcik/LmNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5VU0VSX0RFTEVURUR9YCkge1xuICAgICAgX2ZhaWwoYXV0aCwgQXV0aEVycm9yQ29kZS5VU0VSX01JU01BVENIKTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWwsIEF1dGgsIFVzZXIgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBfcHJvY2Vzc0NyZWRlbnRpYWxTYXZpbmdNZmFDb250ZXh0SWZOZWNlc3NhcnkgfSBmcm9tICcuLi8uLi9tZmEvbWZhX2Vycm9yJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IF9hc3NlcnRMaW5rZWRTdGF0dXMsIF9saW5rIH0gZnJvbSAnLi4vdXNlci9saW5rX3VubGluayc7XG5pbXBvcnQgeyBfcmVhdXRoZW50aWNhdGUgfSBmcm9tICcuLi91c2VyL3JlYXV0aGVudGljYXRlJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW1wbCB9IGZyb20gJy4uL3VzZXIvdXNlcl9jcmVkZW50aWFsX2ltcGwnO1xuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi4vYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9zaWduSW5XaXRoQ3JlZGVudGlhbChcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICBjcmVkZW50aWFsOiBBdXRoQ3JlZGVudGlhbCxcbiAgYnlwYXNzQXV0aFN0YXRlID0gZmFsc2Vcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3Qgb3BlcmF0aW9uVHlwZSA9IE9wZXJhdGlvblR5cGUuU0lHTl9JTjtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBfcHJvY2Vzc0NyZWRlbnRpYWxTYXZpbmdNZmFDb250ZXh0SWZOZWNlc3NhcnkoXG4gICAgYXV0aCxcbiAgICBvcGVyYXRpb25UeXBlLFxuICAgIGNyZWRlbnRpYWxcbiAgKTtcbiAgY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBVc2VyQ3JlZGVudGlhbEltcGwuX2Zyb21JZFRva2VuUmVzcG9uc2UoXG4gICAgYXV0aCxcbiAgICBvcGVyYXRpb25UeXBlLFxuICAgIHJlc3BvbnNlXG4gICk7XG5cbiAgaWYgKCFieXBhc3NBdXRoU3RhdGUpIHtcbiAgICBhd2FpdCBhdXRoLl91cGRhdGVDdXJyZW50VXNlcih1c2VyQ3JlZGVudGlhbC51c2VyKTtcbiAgfVxuICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2lnbnMgaW4gd2l0aCB0aGUgZ2l2ZW4gY3JlZGVudGlhbHMuXG4gKlxuICogQHJlbWFya3NcbiAqIEFuIHtAbGluayBBdXRoUHJvdmlkZXJ9IGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGF1dGggY3JlZGVudGlhbC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoQ3JlZGVudGlhbChcbiAgYXV0aDogQXV0aCxcbiAgY3JlZGVudGlhbDogQXV0aENyZWRlbnRpYWxcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgcmV0dXJuIF9zaWduSW5XaXRoQ3JlZGVudGlhbChfY2FzdEF1dGgoYXV0aCksIGNyZWRlbnRpYWwpO1xufVxuXG4vKipcbiAqIExpbmtzIHRoZSB1c2VyIGFjY291bnQgd2l0aCB0aGUgZ2l2ZW4gY3JlZGVudGlhbHMuXG4gKlxuICogQHJlbWFya3NcbiAqIEFuIHtAbGluayBBdXRoUHJvdmlkZXJ9IGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhdXRoIGNyZWRlbnRpYWwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlua1dpdGhDcmVkZW50aWFsKFxuICB1c2VyOiBVc2VyLFxuICBjcmVkZW50aWFsOiBBdXRoQ3JlZGVudGlhbFxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuXG4gIGF3YWl0IF9hc3NlcnRMaW5rZWRTdGF0dXMoZmFsc2UsIHVzZXJJbnRlcm5hbCwgY3JlZGVudGlhbC5wcm92aWRlcklkKTtcblxuICByZXR1cm4gX2xpbmsodXNlckludGVybmFsLCBjcmVkZW50aWFsKTtcbn1cblxuLyoqXG4gKiBSZS1hdXRoZW50aWNhdGVzIGEgdXNlciB1c2luZyBhIGZyZXNoIGNyZWRlbnRpYWwuXG4gKlxuICogQHJlbWFya3NcbiAqIFVzZSBiZWZvcmUgb3BlcmF0aW9ucyBzdWNoIGFzIHtAbGluayB1cGRhdGVQYXNzd29yZH0gdGhhdCByZXF1aXJlIHRva2VucyBmcm9tIHJlY2VudCBzaWduLWluXG4gKiBhdHRlbXB0cy4gVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgdG8gcmVjb3ZlciBmcm9tIGEgYENSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTmAgZXJyb3JcbiAqIG9yIGEgYFRPS0VOX0VYUElSRURgIGVycm9yLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhdXRoIGNyZWRlbnRpYWwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbChcbiAgdXNlcjogVXNlcixcbiAgY3JlZGVudGlhbDogQXV0aENyZWRlbnRpYWxcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgcmV0dXJuIF9yZWF1dGhlbnRpY2F0ZShnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsLCBjcmVkZW50aWFsKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9wZXJmb3JtU2lnbkluUmVxdWVzdFxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoQ3VzdG9tVG9rZW5SZXF1ZXN0IHtcbiAgdG9rZW46IHN0cmluZztcbiAgcmV0dXJuU2VjdXJlVG9rZW46IGJvb2xlYW47XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhDdXN0b21Ub2tlblJlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHt9XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoQ3VzdG9tVG9rZW4oXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFNpZ25JbldpdGhDdXN0b21Ub2tlblJlcXVlc3Rcbik6IFByb21pc2U8U2lnbkluV2l0aEN1c3RvbVRva2VuUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdDxcbiAgICBTaWduSW5XaXRoQ3VzdG9tVG9rZW5SZXF1ZXN0LFxuICAgIFNpZ25JbldpdGhDdXN0b21Ub2tlblJlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9JTl9XSVRIX0NVU1RPTV9UT0tFTixcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGgsIFVzZXJDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgc2lnbkluV2l0aEN1c3RvbVRva2VuIGFzIGdldElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9jdXN0b21fdG9rZW4nO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbXBsIH0gZnJvbSAnLi4vdXNlci91c2VyX2NyZWRlbnRpYWxfaW1wbCc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGEgY3VzdG9tIHRva2VuLlxuICpcbiAqIEByZW1hcmtzXG4gKiBDdXN0b20gdG9rZW5zIGFyZSB1c2VkIHRvIGludGVncmF0ZSBGaXJlYmFzZSBBdXRoIHdpdGggZXhpc3RpbmcgYXV0aCBzeXN0ZW1zLCBhbmQgbXVzdFxuICogYmUgZ2VuZXJhdGVkIGJ5IGFuIGF1dGggYmFja2VuZCB1c2luZyB0aGVcbiAqIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9yZWZlcmVuY2UvYWRtaW4vbm9kZS9hZG1pbi5hdXRoLkF1dGgjY3JlYXRlY3VzdG9tdG9rZW4gfCBjcmVhdGVDdXN0b21Ub2tlbn1cbiAqIG1ldGhvZCBpbiB0aGUge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2F1dGgvYWRtaW4gfCBBZG1pbiBTREt9IC5cbiAqXG4gKiBGYWlscyB3aXRoIGFuIGVycm9yIGlmIHRoZSB0b2tlbiBpcyBpbnZhbGlkLCBleHBpcmVkLCBvciBub3QgYWNjZXB0ZWQgYnkgdGhlIEZpcmViYXNlIEF1dGggc2VydmljZS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gY3VzdG9tVG9rZW4gLSBUaGUgY3VzdG9tIHRva2VuIHRvIHNpZ24gaW4gd2l0aC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoQ3VzdG9tVG9rZW4oXG4gIGF1dGg6IEF1dGgsXG4gIGN1c3RvbVRva2VuOiBzdHJpbmdcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBjb25zdCByZXNwb25zZTogSWRUb2tlblJlc3BvbnNlID0gYXdhaXQgZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGhJbnRlcm5hbCwge1xuICAgIHRva2VuOiBjdXN0b21Ub2tlbixcbiAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZVxuICB9KTtcbiAgY29uc3QgY3JlZCA9IGF3YWl0IFVzZXJDcmVkZW50aWFsSW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgT3BlcmF0aW9uVHlwZS5TSUdOX0lOLFxuICAgIHJlc3BvbnNlXG4gICk7XG4gIGF3YWl0IGF1dGhJbnRlcm5hbC5fdXBkYXRlQ3VycmVudFVzZXIoY3JlZC51c2VyKTtcbiAgcmV0dXJuIGNyZWQ7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBGYWN0b3JJZCxcbiAgTXVsdGlGYWN0b3JJbmZvLFxuICBQaG9uZU11bHRpRmFjdG9ySW5mbyxcbiAgVG90cE11bHRpRmFjdG9ySW5mb1xufSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHtcbiAgUGhvbmVNZmFFbnJvbGxtZW50LFxuICBNZmFFbnJvbGxtZW50LFxuICBUb3RwTWZhRW5yb2xsbWVudFxufSBmcm9tICcuLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L21mYSc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2ZhaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXVsdGlGYWN0b3JJbmZvSW1wbCBpbXBsZW1lbnRzIE11bHRpRmFjdG9ySW5mbyB7XG4gIHJlYWRvbmx5IHVpZDogc3RyaW5nO1xuICByZWFkb25seSBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7XG4gIHJlYWRvbmx5IGVucm9sbG1lbnRUaW1lOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGZhY3RvcklkOiBGYWN0b3JJZCwgcmVzcG9uc2U6IE1mYUVucm9sbG1lbnQpIHtcbiAgICB0aGlzLnVpZCA9IHJlc3BvbnNlLm1mYUVucm9sbG1lbnRJZDtcbiAgICB0aGlzLmVucm9sbG1lbnRUaW1lID0gbmV3IERhdGUocmVzcG9uc2UuZW5yb2xsZWRBdCkudG9VVENTdHJpbmcoKTtcbiAgICB0aGlzLmRpc3BsYXlOYW1lID0gcmVzcG9uc2UuZGlzcGxheU5hbWU7XG4gIH1cblxuICBzdGF0aWMgX2Zyb21TZXJ2ZXJSZXNwb25zZShcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgZW5yb2xsbWVudDogTWZhRW5yb2xsbWVudFxuICApOiBNdWx0aUZhY3RvckluZm9JbXBsIHtcbiAgICBpZiAoJ3Bob25lSW5mbycgaW4gZW5yb2xsbWVudCkge1xuICAgICAgcmV0dXJuIFBob25lTXVsdGlGYWN0b3JJbmZvSW1wbC5fZnJvbVNlcnZlclJlc3BvbnNlKGF1dGgsIGVucm9sbG1lbnQpO1xuICAgIH0gZWxzZSBpZiAoJ3RvdHBJbmZvJyBpbiBlbnJvbGxtZW50KSB7XG4gICAgICByZXR1cm4gVG90cE11bHRpRmFjdG9ySW5mb0ltcGwuX2Zyb21TZXJ2ZXJSZXNwb25zZShhdXRoLCBlbnJvbGxtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIF9mYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaG9uZU11bHRpRmFjdG9ySW5mb0ltcGxcbiAgZXh0ZW5kcyBNdWx0aUZhY3RvckluZm9JbXBsXG4gIGltcGxlbWVudHMgUGhvbmVNdWx0aUZhY3RvckluZm9cbntcbiAgcmVhZG9ubHkgcGhvbmVOdW1iZXI6IHN0cmluZztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBQaG9uZU1mYUVucm9sbG1lbnQpIHtcbiAgICBzdXBlcihGYWN0b3JJZC5QSE9ORSwgcmVzcG9uc2UpO1xuICAgIHRoaXMucGhvbmVOdW1iZXIgPSByZXNwb25zZS5waG9uZUluZm87XG4gIH1cblxuICBzdGF0aWMgX2Zyb21TZXJ2ZXJSZXNwb25zZShcbiAgICBfYXV0aDogQXV0aEludGVybmFsLFxuICAgIGVucm9sbG1lbnQ6IE1mYUVucm9sbG1lbnRcbiAgKTogUGhvbmVNdWx0aUZhY3RvckluZm9JbXBsIHtcbiAgICByZXR1cm4gbmV3IFBob25lTXVsdGlGYWN0b3JJbmZvSW1wbChlbnJvbGxtZW50IGFzIFBob25lTWZhRW5yb2xsbWVudCk7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBUb3RwTXVsdGlGYWN0b3JJbmZvSW1wbFxuICBleHRlbmRzIE11bHRpRmFjdG9ySW5mb0ltcGxcbiAgaW1wbGVtZW50cyBUb3RwTXVsdGlGYWN0b3JJbmZvXG57XG4gIHByaXZhdGUgY29uc3RydWN0b3IocmVzcG9uc2U6IFRvdHBNZmFFbnJvbGxtZW50KSB7XG4gICAgc3VwZXIoRmFjdG9ySWQuVE9UUCwgcmVzcG9uc2UpO1xuICB9XG5cbiAgc3RhdGljIF9mcm9tU2VydmVyUmVzcG9uc2UoXG4gICAgX2F1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBlbnJvbGxtZW50OiBNZmFFbnJvbGxtZW50XG4gICk6IFRvdHBNdWx0aUZhY3RvckluZm9JbXBsIHtcbiAgICByZXR1cm4gbmV3IFRvdHBNdWx0aUZhY3RvckluZm9JbXBsKGVucm9sbG1lbnQgYXMgVG90cE1mYUVucm9sbG1lbnQpO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBY3Rpb25Db2RlU2V0dGluZ3MsIEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBHZXRPb2JDb2RlUmVxdWVzdCB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9lbWFpbF9hbmRfcGFzc3dvcmQnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogR2V0T29iQ29kZVJlcXVlc3QsXG4gIGFjdGlvbkNvZGVTZXR0aW5nczogQWN0aW9uQ29kZVNldHRpbmdzXG4pOiB2b2lkIHtcbiAgX2Fzc2VydChcbiAgICBhY3Rpb25Db2RlU2V0dGluZ3MudXJsPy5sZW5ndGggPiAwLFxuICAgIGF1dGgsXG4gICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX0NPTlRJTlVFX1VSSVxuICApO1xuICBfYXNzZXJ0KFxuICAgIHR5cGVvZiBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW4gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW4ubGVuZ3RoID4gMCxcbiAgICBhdXRoLFxuICAgIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOXG4gICk7XG5cbiAgcmVxdWVzdC5jb250aW51ZVVybCA9IGFjdGlvbkNvZGVTZXR0aW5ncy51cmw7XG4gIHJlcXVlc3QuZHluYW1pY0xpbmtEb21haW4gPSBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW47XG4gIHJlcXVlc3QuY2FuSGFuZGxlQ29kZUluQXBwID0gYWN0aW9uQ29kZVNldHRpbmdzLmhhbmRsZUNvZGVJbkFwcDtcblxuICBpZiAoYWN0aW9uQ29kZVNldHRpbmdzLmlPUykge1xuICAgIF9hc3NlcnQoXG4gICAgICBhY3Rpb25Db2RlU2V0dGluZ3MuaU9TLmJ1bmRsZUlkLmxlbmd0aCA+IDAsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5NSVNTSU5HX0lPU19CVU5ETEVfSURcbiAgICApO1xuICAgIHJlcXVlc3QuaU9TQnVuZGxlSWQgPSBhY3Rpb25Db2RlU2V0dGluZ3MuaU9TLmJ1bmRsZUlkO1xuICB9XG5cbiAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncy5hbmRyb2lkKSB7XG4gICAgX2Fzc2VydChcbiAgICAgIGFjdGlvbkNvZGVTZXR0aW5ncy5hbmRyb2lkLnBhY2thZ2VOYW1lLmxlbmd0aCA+IDAsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5NSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FXG4gICAgKTtcbiAgICByZXF1ZXN0LmFuZHJvaWRJbnN0YWxsQXBwID0gYWN0aW9uQ29kZVNldHRpbmdzLmFuZHJvaWQuaW5zdGFsbEFwcDtcbiAgICByZXF1ZXN0LmFuZHJvaWRNaW5pbXVtVmVyc2lvbkNvZGUgPVxuICAgICAgYWN0aW9uQ29kZVNldHRpbmdzLmFuZHJvaWQubWluaW11bVZlcnNpb247XG4gICAgcmVxdWVzdC5hbmRyb2lkUGFja2FnZU5hbWUgPSBhY3Rpb25Db2RlU2V0dGluZ3MuYW5kcm9pZC5wYWNrYWdlTmFtZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQWN0aW9uQ29kZUluZm8sXG4gIEFjdGlvbkNvZGVPcGVyYXRpb24sXG4gIEFjdGlvbkNvZGVTZXR0aW5ncyxcbiAgQXV0aCxcbiAgVXNlckNyZWRlbnRpYWxcbn0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0ICogYXMgYWNjb3VudCBmcm9tICcuLi8uLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQgKiBhcyBhdXRoZW50aWNhdGlvbiBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vZW1haWxfYW5kX3Bhc3N3b3JkJztcbmltcG9ydCB7IHNpZ25VcCwgU2lnblVwUmVxdWVzdCB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9zaWduX3VwJztcbmltcG9ydCB7IE11bHRpRmFjdG9ySW5mb0ltcGwgfSBmcm9tICcuLi8uLi9tZmEvbWZhX2luZm8nO1xuaW1wb3J0IHsgRW1haWxBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZW1haWwnO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbXBsIH0gZnJvbSAnLi4vdXNlci91c2VyX2NyZWRlbnRpYWxfaW1wbCc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdCB9IGZyb20gJy4vYWN0aW9uX2NvZGVfc2V0dGluZ3MnO1xuaW1wb3J0IHsgc2lnbkluV2l0aENyZWRlbnRpYWwgfSBmcm9tICcuL2NyZWRlbnRpYWwnO1xuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi4vYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuaW1wb3J0IHsgaW5qZWN0UmVjYXB0Y2hhRmllbGRzIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm1fYnJvd3Nlci9yZWNhcHRjaGEvcmVjYXB0Y2hhX2VudGVycHJpc2VfdmVyaWZpZXInO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgUmVjYXB0Y2hhQWN0aW9uTmFtZSwgUmVjYXB0Y2hhQ2xpZW50VHlwZSB9IGZyb20gJy4uLy4uL2FwaSc7XG5cbi8qKlxuICogU2VuZHMgYSBwYXNzd29yZCByZXNldCBlbWFpbCB0byB0aGUgZ2l2ZW4gZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVG8gY29tcGxldGUgdGhlIHBhc3N3b3JkIHJlc2V0LCBjYWxsIHtAbGluayBjb25maXJtUGFzc3dvcmRSZXNldH0gd2l0aCB0aGUgY29kZSBzdXBwbGllZCBpblxuICogdGhlIGVtYWlsIHNlbnQgdG8gdGhlIHVzZXIsIGFsb25nIHdpdGggdGhlIG5ldyBwYXNzd29yZCBzcGVjaWZpZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IGFjdGlvbkNvZGVTZXR0aW5ncyA9IHtcbiAqICAgdXJsOiAnaHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vP2VtYWlsPXVzZXJAZXhhbXBsZS5jb20nLFxuICogICBpT1M6IHtcbiAqICAgICAgYnVuZGxlSWQ6ICdjb20uZXhhbXBsZS5pb3MnXG4gKiAgIH0sXG4gKiAgIGFuZHJvaWQ6IHtcbiAqICAgICBwYWNrYWdlTmFtZTogJ2NvbS5leGFtcGxlLmFuZHJvaWQnLFxuICogICAgIGluc3RhbGxBcHA6IHRydWUsXG4gKiAgICAgbWluaW11bVZlcnNpb246ICcxMidcbiAqICAgfSxcbiAqICAgaGFuZGxlQ29kZUluQXBwOiB0cnVlXG4gKiB9O1xuICogYXdhaXQgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gKiAvLyBPYnRhaW4gY29kZSBmcm9tIHVzZXIuXG4gKiBhd2FpdCBjb25maXJtUGFzc3dvcmRSZXNldCgndXNlckBleGFtcGxlLmNvbScsIGNvZGUpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIGFjdGlvbkNvZGVTZXR0aW5ncyAtIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVNldHRpbmdzfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kUGFzc3dvcmRSZXNldEVtYWlsKFxuICBhdXRoOiBBdXRoLFxuICBlbWFpbDogc3RyaW5nLFxuICBhY3Rpb25Db2RlU2V0dGluZ3M/OiBBY3Rpb25Db2RlU2V0dGluZ3Ncbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XG4gIGNvbnN0IHJlcXVlc3Q6IGF1dGhlbnRpY2F0aW9uLlBhc3N3b3JkUmVzZXRSZXF1ZXN0ID0ge1xuICAgIHJlcXVlc3RUeXBlOiBBY3Rpb25Db2RlT3BlcmF0aW9uLlBBU1NXT1JEX1JFU0VULFxuICAgIGVtYWlsLFxuICAgIGNsaWVudFR5cGU6IFJlY2FwdGNoYUNsaWVudFR5cGUuV0VCXG4gIH07XG4gIGlmIChhdXRoSW50ZXJuYWwuX2dldFJlY2FwdGNoYUNvbmZpZygpPy5lbWFpbFBhc3N3b3JkRW5hYmxlZCkge1xuICAgIGNvbnN0IHJlcXVlc3RXaXRoUmVjYXB0Y2hhID0gYXdhaXQgaW5qZWN0UmVjYXB0Y2hhRmllbGRzKFxuICAgICAgYXV0aEludGVybmFsLFxuICAgICAgcmVxdWVzdCxcbiAgICAgIFJlY2FwdGNoYUFjdGlvbk5hbWUuR0VUX09PQl9DT0RFLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncykge1xuICAgICAgX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdChcbiAgICAgICAgYXV0aEludGVybmFsLFxuICAgICAgICByZXF1ZXN0V2l0aFJlY2FwdGNoYSxcbiAgICAgICAgYWN0aW9uQ29kZVNldHRpbmdzXG4gICAgICApO1xuICAgIH1cbiAgICBhd2FpdCBhdXRoZW50aWNhdGlvbi5zZW5kUGFzc3dvcmRSZXNldEVtYWlsKFxuICAgICAgYXV0aEludGVybmFsLFxuICAgICAgcmVxdWVzdFdpdGhSZWNhcHRjaGFcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MpIHtcbiAgICAgIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QoXG4gICAgICAgIGF1dGhJbnRlcm5hbCxcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgYWN0aW9uQ29kZVNldHRpbmdzXG4gICAgICApO1xuICAgIH1cbiAgICBhd2FpdCBhdXRoZW50aWNhdGlvblxuICAgICAgLnNlbmRQYXNzd29yZFJlc2V0RW1haWwoYXV0aEludGVybmFsLCByZXF1ZXN0KVxuICAgICAgLmNhdGNoKGFzeW5jIGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5NSVNTSU5HX1JFQ0FQVENIQV9UT0tFTn1gKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAnUGFzc3dvcmQgcmVzZXRzIGFyZSBwcm90ZWN0ZWQgYnkgcmVDQVBUQ0hBIGZvciB0aGlzIHByb2plY3QuIEF1dG9tYXRpY2FsbHkgdHJpZ2dlcmluZyB0aGUgcmVDQVBUQ0hBIGZsb3cgYW5kIHJlc3RhcnRpbmcgdGhlIHBhc3N3b3JkIHJlc2V0IGZsb3cuJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdFdpdGhSZWNhcHRjaGEgPSBhd2FpdCBpbmplY3RSZWNhcHRjaGFGaWVsZHMoXG4gICAgICAgICAgICBhdXRoSW50ZXJuYWwsXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgUmVjYXB0Y2hhQWN0aW9uTmFtZS5HRVRfT09CX0NPREUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoYWN0aW9uQ29kZVNldHRpbmdzKSB7XG4gICAgICAgICAgICBfc2V0QWN0aW9uQ29kZVNldHRpbmdzT25SZXF1ZXN0KFxuICAgICAgICAgICAgICBhdXRoSW50ZXJuYWwsXG4gICAgICAgICAgICAgIHJlcXVlc3RXaXRoUmVjYXB0Y2hhLFxuICAgICAgICAgICAgICBhY3Rpb25Db2RlU2V0dGluZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IGF1dGhlbnRpY2F0aW9uLnNlbmRQYXNzd29yZFJlc2V0RW1haWwoXG4gICAgICAgICAgICBhdXRoSW50ZXJuYWwsXG4gICAgICAgICAgICByZXF1ZXN0V2l0aFJlY2FwdGNoYVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb21wbGV0ZXMgdGhlIHBhc3N3b3JkIHJlc2V0IHByb2Nlc3MsIGdpdmVuIGEgY29uZmlybWF0aW9uIGNvZGUgYW5kIG5ldyBwYXNzd29yZC5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gb29iQ29kZSAtIEEgY29uZmlybWF0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlci5cbiAqIEBwYXJhbSBuZXdQYXNzd29yZCAtIFRoZSBuZXcgcGFzc3dvcmQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uZmlybVBhc3N3b3JkUmVzZXQoXG4gIGF1dGg6IEF1dGgsXG4gIG9vYkNvZGU6IHN0cmluZyxcbiAgbmV3UGFzc3dvcmQ6IHN0cmluZ1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IGFjY291bnQucmVzZXRQYXNzd29yZChnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCksIHtcbiAgICBvb2JDb2RlLFxuICAgIG5ld1Bhc3N3b3JkXG4gIH0pO1xuICAvLyBEbyBub3QgcmV0dXJuIHRoZSBlbWFpbC5cbn1cblxuLyoqXG4gKiBBcHBsaWVzIGEgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlciBieSBlbWFpbCBvciBvdGhlciBvdXQtb2YtYmFuZCBtZWNoYW5pc20uXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIG9vYkNvZGUgLSBBIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXBwbHlBY3Rpb25Db2RlKFxuICBhdXRoOiBBdXRoLFxuICBvb2JDb2RlOiBzdHJpbmdcbik6IFByb21pc2U8dm9pZD4ge1xuICBhd2FpdCBhY2NvdW50LmFwcGx5QWN0aW9uQ29kZShnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCksIHsgb29iQ29kZSB9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSB2ZXJpZmljYXRpb24gY29kZSBzZW50IHRvIHRoZSB1c2VyIGJ5IGVtYWlsIG9yIG90aGVyIG91dC1vZi1iYW5kIG1lY2hhbmlzbS5cbiAqXG4gKiBAcmV0dXJucyBtZXRhZGF0YSBhYm91dCB0aGUgY29kZS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gb29iQ29kZSAtIEEgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0FjdGlvbkNvZGUoXG4gIGF1dGg6IEF1dGgsXG4gIG9vYkNvZGU6IHN0cmluZ1xuKTogUHJvbWlzZTxBY3Rpb25Db2RlSW5mbz4ge1xuICBjb25zdCBhdXRoTW9kdWxhciA9IGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhY2NvdW50LnJlc2V0UGFzc3dvcmQoYXV0aE1vZHVsYXIsIHsgb29iQ29kZSB9KTtcblxuICAvLyBFbWFpbCBjb3VsZCBiZSBlbXB0eSBvbmx5IGlmIHRoZSByZXF1ZXN0IHR5cGUgaXMgRU1BSUxfU0lHTklOIG9yXG4gIC8vIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMLlxuICAvLyBOZXcgZW1haWwgc2hvdWxkIG5vdCBiZSBlbXB0eSBpZiB0aGUgcmVxdWVzdCB0eXBlIGlzXG4gIC8vIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMLlxuICAvLyBNdWx0aS1mYWN0b3IgaW5mbyBjb3VsZCBub3QgYmUgZW1wdHkgaWYgdGhlIHJlcXVlc3QgdHlwZSBpc1xuICAvLyBSRVZFUlRfU0VDT05EX0ZBQ1RPUl9BRERJVElPTi5cbiAgY29uc3Qgb3BlcmF0aW9uID0gcmVzcG9uc2UucmVxdWVzdFR5cGU7XG4gIF9hc3NlcnQob3BlcmF0aW9uLCBhdXRoTW9kdWxhciwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIHN3aXRjaCAob3BlcmF0aW9uKSB7XG4gICAgY2FzZSBBY3Rpb25Db2RlT3BlcmF0aW9uLkVNQUlMX1NJR05JTjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfQU5EX0NIQU5HRV9FTUFJTDpcbiAgICAgIF9hc3NlcnQocmVzcG9uc2UubmV3RW1haWwsIGF1dGhNb2R1bGFyLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQWN0aW9uQ29kZU9wZXJhdGlvbi5SRVZFUlRfU0VDT05EX0ZBQ1RPUl9BRERJVElPTjpcbiAgICAgIF9hc3NlcnQocmVzcG9uc2UubWZhSW5mbywgYXV0aE1vZHVsYXIsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgIGRlZmF1bHQ6XG4gICAgICBfYXNzZXJ0KHJlc3BvbnNlLmVtYWlsLCBhdXRoTW9kdWxhciwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIH1cblxuICAvLyBUaGUgbXVsdGktZmFjdG9yIGluZm8gZm9yIHJldmVydCBzZWNvbmQgZmFjdG9yIGFkZGl0aW9uXG4gIGxldCBtdWx0aUZhY3RvckluZm86IE11bHRpRmFjdG9ySW5mb0ltcGwgfCBudWxsID0gbnVsbDtcbiAgaWYgKHJlc3BvbnNlLm1mYUluZm8pIHtcbiAgICBtdWx0aUZhY3RvckluZm8gPSBNdWx0aUZhY3RvckluZm9JbXBsLl9mcm9tU2VydmVyUmVzcG9uc2UoXG4gICAgICBfY2FzdEF1dGgoYXV0aE1vZHVsYXIpLFxuICAgICAgcmVzcG9uc2UubWZhSW5mb1xuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGE6IHtcbiAgICAgIGVtYWlsOlxuICAgICAgICAocmVzcG9uc2UucmVxdWVzdFR5cGUgPT09IEFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0FORF9DSEFOR0VfRU1BSUxcbiAgICAgICAgICA/IHJlc3BvbnNlLm5ld0VtYWlsXG4gICAgICAgICAgOiByZXNwb25zZS5lbWFpbCkgfHwgbnVsbCxcbiAgICAgIHByZXZpb3VzRW1haWw6XG4gICAgICAgIChyZXNwb25zZS5yZXF1ZXN0VHlwZSA9PT0gQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfQU5EX0NIQU5HRV9FTUFJTFxuICAgICAgICAgID8gcmVzcG9uc2UuZW1haWxcbiAgICAgICAgICA6IHJlc3BvbnNlLm5ld0VtYWlsKSB8fCBudWxsLFxuICAgICAgbXVsdGlGYWN0b3JJbmZvXG4gICAgfSxcbiAgICBvcGVyYXRpb25cbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBwYXNzd29yZCByZXNldCBjb2RlIHNlbnQgdG8gdGhlIHVzZXIgYnkgZW1haWwgb3Igb3RoZXIgb3V0LW9mLWJhbmQgbWVjaGFuaXNtLlxuICpcbiAqIEByZXR1cm5zIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcyBpZiB2YWxpZC5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gY29kZSAtIEEgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlQYXNzd29yZFJlc2V0Q29kZShcbiAgYXV0aDogQXV0aCxcbiAgY29kZTogc3RyaW5nXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGNoZWNrQWN0aW9uQ29kZShnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCksIGNvZGUpO1xuICAvLyBFbWFpbCBzaG91bGQgYWx3YXlzIGJlIHByZXNlbnQgc2luY2UgYSBjb2RlIHdhcyBzZW50IHRvIGl0XG4gIHJldHVybiBkYXRhLmVtYWlsITtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHVzZXIgYWNjb3VudCBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBlbWFpbCBhZGRyZXNzIGFuZCBwYXNzd29yZC5cbiAqXG4gKiBAcmVtYXJrc1xuICogT24gc3VjY2Vzc2Z1bCBjcmVhdGlvbiBvZiB0aGUgdXNlciBhY2NvdW50LCB0aGlzIHVzZXIgd2lsbCBhbHNvIGJlIHNpZ25lZCBpbiB0byB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIFVzZXIgYWNjb3VudCBjcmVhdGlvbiBjYW4gZmFpbCBpZiB0aGUgYWNjb3VudCBhbHJlYWR5IGV4aXN0cyBvciB0aGUgcGFzc3dvcmQgaXMgaW52YWxpZC5cbiAqXG4gKiBOb3RlOiBUaGUgZW1haWwgYWRkcmVzcyBhY3RzIGFzIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB1c2VyIGFuZCBlbmFibGVzIGFuIGVtYWlsLWJhc2VkXG4gKiBwYXNzd29yZCByZXNldC4gVGhpcyBmdW5jdGlvbiB3aWxsIGNyZWF0ZSBhIG5ldyB1c2VyIGFjY291bnQgYW5kIHNldCB0aGUgaW5pdGlhbCB1c2VyIHBhc3N3b3JkLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBlbWFpbCAtIFRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSBwYXNzd29yZCAtIFRoZSB1c2VyJ3MgY2hvc2VuIHBhc3N3b3JkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChcbiAgYXV0aDogQXV0aCxcbiAgZW1haWw6IHN0cmluZyxcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XG4gIGNvbnN0IHJlcXVlc3Q6IFNpZ25VcFJlcXVlc3QgPSB7XG4gICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXG4gICAgZW1haWwsXG4gICAgcGFzc3dvcmQsXG4gICAgY2xpZW50VHlwZTogUmVjYXB0Y2hhQ2xpZW50VHlwZS5XRUJcbiAgfTtcbiAgbGV0IHNpZ25VcFJlc3BvbnNlOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT47XG4gIGlmIChhdXRoSW50ZXJuYWwuX2dldFJlY2FwdGNoYUNvbmZpZygpPy5lbWFpbFBhc3N3b3JkRW5hYmxlZCkge1xuICAgIGNvbnN0IHJlcXVlc3RXaXRoUmVjYXB0Y2hhID0gYXdhaXQgaW5qZWN0UmVjYXB0Y2hhRmllbGRzKFxuICAgICAgYXV0aEludGVybmFsLFxuICAgICAgcmVxdWVzdCxcbiAgICAgIFJlY2FwdGNoYUFjdGlvbk5hbWUuU0lHTl9VUF9QQVNTV09SRFxuICAgICk7XG4gICAgc2lnblVwUmVzcG9uc2UgPSBzaWduVXAoYXV0aEludGVybmFsLCByZXF1ZXN0V2l0aFJlY2FwdGNoYSk7XG4gIH0gZWxzZSB7XG4gICAgc2lnblVwUmVzcG9uc2UgPSBzaWduVXAoYXV0aEludGVybmFsLCByZXF1ZXN0KS5jYXRjaChhc3luYyBlcnJvciA9PiB7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gYGF1dGgvJHtBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUkVDQVBUQ0hBX1RPS0VOfWApIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgJ1NpZ24tdXAgaXMgcHJvdGVjdGVkIGJ5IHJlQ0FQVENIQSBmb3IgdGhpcyBwcm9qZWN0LiBBdXRvbWF0aWNhbGx5IHRyaWdnZXJpbmcgdGhlIHJlQ0FQVENIQSBmbG93IGFuZCByZXN0YXJ0aW5nIHRoZSBzaWduLXVwIGZsb3cuJ1xuICAgICAgICApO1xuICAgICAgICBjb25zdCByZXF1ZXN0V2l0aFJlY2FwdGNoYSA9IGF3YWl0IGluamVjdFJlY2FwdGNoYUZpZWxkcyhcbiAgICAgICAgICBhdXRoSW50ZXJuYWwsXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICBSZWNhcHRjaGFBY3Rpb25OYW1lLlNJR05fVVBfUEFTU1dPUkRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHNpZ25VcChhdXRoSW50ZXJuYWwsIHJlcXVlc3RXaXRoUmVjYXB0Y2hhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNpZ25VcFJlc3BvbnNlLmNhdGNoKGVycm9yID0+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9KTtcblxuICBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IFVzZXJDcmVkZW50aWFsSW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgT3BlcmF0aW9uVHlwZS5TSUdOX0lOLFxuICAgIHJlc3BvbnNlXG4gICk7XG4gIGF3YWl0IGF1dGhJbnRlcm5hbC5fdXBkYXRlQ3VycmVudFVzZXIodXNlckNyZWRlbnRpYWwudXNlcik7XG5cbiAgcmV0dXJuIHVzZXJDcmVkZW50aWFsO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGFuIGVtYWlsIGFuZCBwYXNzd29yZC5cbiAqXG4gKiBAcmVtYXJrc1xuICogRmFpbHMgd2l0aCBhbiBlcnJvciBpZiB0aGUgZW1haWwgYWRkcmVzcyBhbmQgcGFzc3dvcmQgZG8gbm90IG1hdGNoLlxuICpcbiAqIE5vdGU6IFRoZSB1c2VyJ3MgcGFzc3dvcmQgaXMgTk9UIHRoZSBwYXNzd29yZCB1c2VkIHRvIGFjY2VzcyB0aGUgdXNlcidzIGVtYWlsIGFjY291bnQuIFRoZVxuICogZW1haWwgYWRkcmVzcyBzZXJ2ZXMgYXMgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHVzZXIsIGFuZCB0aGUgcGFzc3dvcmQgaXMgdXNlZCB0byBhY2Nlc3NcbiAqIHRoZSB1c2VyJ3MgYWNjb3VudCBpbiB5b3VyIEZpcmViYXNlIHByb2plY3QuIFNlZSBhbHNvOiB7QGxpbmsgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkfS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gZW1haWwgLSBUaGUgdXNlcnMgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSBwYXNzd29yZCAtIFRoZSB1c2VycyBwYXNzd29yZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChcbiAgYXV0aDogQXV0aCxcbiAgZW1haWw6IHN0cmluZyxcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICByZXR1cm4gc2lnbkluV2l0aENyZWRlbnRpYWwoXG4gICAgZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLFxuICAgIEVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoZW1haWwsIHBhc3N3b3JkKVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQWN0aW9uQ29kZU9wZXJhdGlvbixcbiAgQWN0aW9uQ29kZVNldHRpbmdzLFxuICBBdXRoLFxuICBVc2VyQ3JlZGVudGlhbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQgeyBBY3Rpb25Db2RlVVJMIH0gZnJvbSAnLi4vYWN0aW9uX2NvZGVfdXJsJztcbmltcG9ydCB7IEVtYWlsQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2VtYWlsJztcbmltcG9ydCB7IF9nZXRDdXJyZW50VXJsIH0gZnJvbSAnLi4vdXRpbC9sb2NhdGlvbic7XG5pbXBvcnQgeyBfc2V0QWN0aW9uQ29kZVNldHRpbmdzT25SZXF1ZXN0IH0gZnJvbSAnLi9hY3Rpb25fY29kZV9zZXR0aW5ncyc7XG5pbXBvcnQgeyBzaWduSW5XaXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBpbmplY3RSZWNhcHRjaGFGaWVsZHMgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybV9icm93c2VyL3JlY2FwdGNoYS9yZWNhcHRjaGFfZW50ZXJwcmlzZV92ZXJpZmllcic7XG5pbXBvcnQgeyBSZWNhcHRjaGFBY3Rpb25OYW1lLCBSZWNhcHRjaGFDbGllbnRUeXBlIH0gZnJvbSAnLi4vLi4vYXBpJztcblxuLyoqXG4gKiBTZW5kcyBhIHNpZ24taW4gZW1haWwgbGluayB0byB0aGUgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgZW1haWwuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSBzaWduLWluIG9wZXJhdGlvbiBoYXMgdG8gYWx3YXlzIGJlIGNvbXBsZXRlZCBpbiB0aGUgYXBwIHVubGlrZSBvdGhlciBvdXQgb2YgYmFuZCBlbWFpbFxuICogYWN0aW9ucyAocGFzc3dvcmQgcmVzZXQgYW5kIGVtYWlsIHZlcmlmaWNhdGlvbnMpLiBUaGlzIGlzIGJlY2F1c2UsIGF0IHRoZSBlbmQgb2YgdGhlIGZsb3csXG4gKiB0aGUgdXNlciBpcyBleHBlY3RlZCB0byBiZSBzaWduZWQgaW4gYW5kIHRoZWlyIEF1dGggc3RhdGUgcGVyc2lzdGVkIHdpdGhpbiB0aGUgYXBwLlxuICpcbiAqIFRvIGNvbXBsZXRlIHNpZ24gaW4gd2l0aCB0aGUgZW1haWwgbGluaywgY2FsbCB7QGxpbmsgc2lnbkluV2l0aEVtYWlsTGlua30gd2l0aCB0aGUgZW1haWxcbiAqIGFkZHJlc3MgYW5kIHRoZSBlbWFpbCBsaW5rIHN1cHBsaWVkIGluIHRoZSBlbWFpbCBzZW50IHRvIHRoZSB1c2VyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBhY3Rpb25Db2RlU2V0dGluZ3MgPSB7XG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcbiAqICAgaU9TOiB7XG4gKiAgICAgIGJ1bmRsZUlkOiAnY29tLmV4YW1wbGUuaW9zJ1xuICogICB9LFxuICogICBhbmRyb2lkOiB7XG4gKiAgICAgcGFja2FnZU5hbWU6ICdjb20uZXhhbXBsZS5hbmRyb2lkJyxcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXG4gKiAgIH0sXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxuICogfTtcbiAqIGF3YWl0IHNlbmRTaWduSW5MaW5rVG9FbWFpbChhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdGhlIHVzZXIuXG4gKiBpZihpc1NpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwgZW1haWxMaW5rKSkge1xuICogICBhd2FpdCBzaWduSW5XaXRoRW1haWxMaW5rKGF1dGgsICd1c2VyQGV4YW1wbGUuY29tJywgZW1haWxMaW5rKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoSW50ZXJuYWwgLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIGFjdGlvbkNvZGVTZXR0aW5ncyAtIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVNldHRpbmdzfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kU2lnbkluTGlua1RvRW1haWwoXG4gIGF1dGg6IEF1dGgsXG4gIGVtYWlsOiBzdHJpbmcsXG4gIGFjdGlvbkNvZGVTZXR0aW5nczogQWN0aW9uQ29kZVNldHRpbmdzXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBjb25zdCByZXF1ZXN0OiBhcGkuRW1haWxTaWduSW5SZXF1ZXN0ID0ge1xuICAgIHJlcXVlc3RUeXBlOiBBY3Rpb25Db2RlT3BlcmF0aW9uLkVNQUlMX1NJR05JTixcbiAgICBlbWFpbCxcbiAgICBjbGllbnRUeXBlOiBSZWNhcHRjaGFDbGllbnRUeXBlLldFQlxuICB9O1xuICBmdW5jdGlvbiBzZXRBY3Rpb25Db2RlU2V0dGluZ3MoXG4gICAgcmVxdWVzdDogYXBpLkVtYWlsU2lnbkluUmVxdWVzdCxcbiAgICBhY3Rpb25Db2RlU2V0dGluZ3M6IEFjdGlvbkNvZGVTZXR0aW5nc1xuICApOiB2b2lkIHtcbiAgICBfYXNzZXJ0KFxuICAgICAgYWN0aW9uQ29kZVNldHRpbmdzLmhhbmRsZUNvZGVJbkFwcCxcbiAgICAgIGF1dGhJbnRlcm5hbCxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MpIHtcbiAgICAgIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QoXG4gICAgICAgIGF1dGhJbnRlcm5hbCxcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgYWN0aW9uQ29kZVNldHRpbmdzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoYXV0aEludGVybmFsLl9nZXRSZWNhcHRjaGFDb25maWcoKT8uZW1haWxQYXNzd29yZEVuYWJsZWQpIHtcbiAgICBjb25zdCByZXF1ZXN0V2l0aFJlY2FwdGNoYSA9IGF3YWl0IGluamVjdFJlY2FwdGNoYUZpZWxkcyhcbiAgICAgIGF1dGhJbnRlcm5hbCxcbiAgICAgIHJlcXVlc3QsXG4gICAgICBSZWNhcHRjaGFBY3Rpb25OYW1lLkdFVF9PT0JfQ09ERSxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHNldEFjdGlvbkNvZGVTZXR0aW5ncyhyZXF1ZXN0V2l0aFJlY2FwdGNoYSwgYWN0aW9uQ29kZVNldHRpbmdzKTtcbiAgICBhd2FpdCBhcGkuc2VuZFNpZ25JbkxpbmtUb0VtYWlsKGF1dGhJbnRlcm5hbCwgcmVxdWVzdFdpdGhSZWNhcHRjaGEpO1xuICB9IGVsc2Uge1xuICAgIHNldEFjdGlvbkNvZGVTZXR0aW5ncyhyZXF1ZXN0LCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xuICAgIGF3YWl0IGFwaVxuICAgICAgLnNlbmRTaWduSW5MaW5rVG9FbWFpbChhdXRoSW50ZXJuYWwsIHJlcXVlc3QpXG4gICAgICAuY2F0Y2goYXN5bmMgZXJyb3IgPT4ge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gYGF1dGgvJHtBdXRoRXJyb3JDb2RlLk1JU1NJTkdfUkVDQVBUQ0hBX1RPS0VOfWApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICdFbWFpbCBsaW5rIHNpZ24taW4gaXMgcHJvdGVjdGVkIGJ5IHJlQ0FQVENIQSBmb3IgdGhpcyBwcm9qZWN0LiBBdXRvbWF0aWNhbGx5IHRyaWdnZXJpbmcgdGhlIHJlQ0FQVENIQSBmbG93IGFuZCByZXN0YXJ0aW5nIHRoZSBzaWduLWluIGZsb3cuJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdFdpdGhSZWNhcHRjaGEgPSBhd2FpdCBpbmplY3RSZWNhcHRjaGFGaWVsZHMoXG4gICAgICAgICAgICBhdXRoSW50ZXJuYWwsXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgUmVjYXB0Y2hhQWN0aW9uTmFtZS5HRVRfT09CX0NPREUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzZXRBY3Rpb25Db2RlU2V0dGluZ3MocmVxdWVzdFdpdGhSZWNhcHRjaGEsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gICAgICAgICAgYXdhaXQgYXBpLnNlbmRTaWduSW5MaW5rVG9FbWFpbChhdXRoSW50ZXJuYWwsIHJlcXVlc3RXaXRoUmVjYXB0Y2hhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBpbmNvbWluZyBsaW5rIGlzIGEgc2lnbi1pbiB3aXRoIGVtYWlsIGxpbmsgc3VpdGFibGUgZm9yIHtAbGluayBzaWduSW5XaXRoRW1haWxMaW5rfS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gZW1haWxMaW5rIC0gVGhlIGxpbmsgc2VudCB0byB0aGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTaWduSW5XaXRoRW1haWxMaW5rKGF1dGg6IEF1dGgsIGVtYWlsTGluazogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGFjdGlvbkNvZGVVcmwgPSBBY3Rpb25Db2RlVVJMLnBhcnNlTGluayhlbWFpbExpbmspO1xuICByZXR1cm4gYWN0aW9uQ29kZVVybD8ub3BlcmF0aW9uID09PSBBY3Rpb25Db2RlT3BlcmF0aW9uLkVNQUlMX1NJR05JTjtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB1c2luZyBhbiBlbWFpbCBhbmQgc2lnbi1pbiBlbWFpbCBsaW5rLlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiBubyBsaW5rIGlzIHBhc3NlZCwgdGhlIGxpbmsgaXMgaW5mZXJyZWQgZnJvbSB0aGUgY3VycmVudCBVUkwuXG4gKlxuICogRmFpbHMgd2l0aCBhbiBlcnJvciBpZiB0aGUgZW1haWwgYWRkcmVzcyBpcyBpbnZhbGlkIG9yIE9UUCBpbiBlbWFpbCBsaW5rIGV4cGlyZXMuXG4gKlxuICogTm90ZTogQ29uZmlybSB0aGUgbGluayBpcyBhIHNpZ24taW4gZW1haWwgbGluayBiZWZvcmUgY2FsbGluZyB0aGlzIG1ldGhvZCBmaXJlYmFzZS5hdXRoLkF1dGguaXNTaWduSW5XaXRoRW1haWxMaW5rLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBhY3Rpb25Db2RlU2V0dGluZ3MgPSB7XG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcbiAqICAgaU9TOiB7XG4gKiAgICAgIGJ1bmRsZUlkOiAnY29tLmV4YW1wbGUuaW9zJ1xuICogICB9LFxuICogICBhbmRyb2lkOiB7XG4gKiAgICAgcGFja2FnZU5hbWU6ICdjb20uZXhhbXBsZS5hbmRyb2lkJyxcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXG4gKiAgIH0sXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxuICogfTtcbiAqIGF3YWl0IHNlbmRTaWduSW5MaW5rVG9FbWFpbChhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdGhlIHVzZXIuXG4gKiBpZihpc1NpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwgZW1haWxMaW5rKSkge1xuICogICBhd2FpdCBzaWduSW5XaXRoRW1haWxMaW5rKGF1dGgsICd1c2VyQGV4YW1wbGUuY29tJywgZW1haWxMaW5rKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBlbWFpbCAtIFRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSBlbWFpbExpbmsgLSBUaGUgbGluayBzZW50IHRvIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoRW1haWxMaW5rKFxuICBhdXRoOiBBdXRoLFxuICBlbWFpbDogc3RyaW5nLFxuICBlbWFpbExpbms/OiBzdHJpbmdcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3QgYXV0aE1vZHVsYXIgPSBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCk7XG4gIGNvbnN0IGNyZWRlbnRpYWwgPSBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsV2l0aExpbmsoXG4gICAgZW1haWwsXG4gICAgZW1haWxMaW5rIHx8IF9nZXRDdXJyZW50VXJsKClcbiAgKTtcbiAgLy8gQ2hlY2sgaWYgdGhlIHRlbmFudCBJRCBpbiB0aGUgZW1haWwgbGluayBtYXRjaGVzIHRoZSB0ZW5hbnQgSUQgb24gQXV0aFxuICAvLyBpbnN0YW5jZS5cbiAgX2Fzc2VydChcbiAgICBjcmVkZW50aWFsLl90ZW5hbnRJZCA9PT0gKGF1dGhNb2R1bGFyLnRlbmFudElkIHx8IG51bGwpLFxuICAgIGF1dGhNb2R1bGFyLFxuICAgIEF1dGhFcnJvckNvZGUuVEVOQU5UX0lEX01JU01BVENIXG4gICk7XG4gIHJldHVybiBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoTW9kdWxhciwgY3JlZGVudGlhbCk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBFbmRwb2ludCxcbiAgSHR0cE1ldGhvZCxcbiAgX2FkZFRpZElmTmVjZXNzYXJ5LFxuICBfcGVyZm9ybUFwaVJlcXVlc3Rcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQXV0aFVyaVJlcXVlc3Qge1xuICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gIGNvbnRpbnVlVXJpOiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUF1dGhVcmlSZXNwb25zZSB7XG4gIHNpZ25pbk1ldGhvZHM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQXV0aFVyaShcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogQ3JlYXRlQXV0aFVyaVJlcXVlc3Rcbik6IFByb21pc2U8Q3JlYXRlQXV0aFVyaVJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8Q3JlYXRlQXV0aFVyaVJlcXVlc3QsIENyZWF0ZUF1dGhVcmlSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuQ1JFQVRFX0FVVEhfVVJJLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQWN0aW9uQ29kZU9wZXJhdGlvbixcbiAgQWN0aW9uQ29kZVNldHRpbmdzLFxuICBBdXRoLFxuICBVc2VyXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7XG4gIGNyZWF0ZUF1dGhVcmksXG4gIENyZWF0ZUF1dGhVcmlSZXF1ZXN0XG59IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9jcmVhdGVfYXV0aF91cmknO1xuaW1wb3J0ICogYXMgYXBpIGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9lbWFpbF9hbmRfcGFzc3dvcmQnO1xuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBfZ2V0Q3VycmVudFVybCwgX2lzSHR0cE9ySHR0cHMgfSBmcm9tICcuLi91dGlsL2xvY2F0aW9uJztcbmltcG9ydCB7IF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QgfSBmcm9tICcuL2FjdGlvbl9jb2RlX3NldHRpbmdzJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IG9mIHBvc3NpYmxlIHNpZ24gaW4gbWV0aG9kcyBmb3IgdGhlIGdpdmVuIGVtYWlsIGFkZHJlc3MuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgaXMgdXNlZnVsIHRvIGRpZmZlcmVudGlhdGUgbWV0aG9kcyBvZiBzaWduLWluIGZvciB0aGUgc2FtZSBwcm92aWRlciwgZWcuXG4gKiB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdoaWNoIGhhcyAyIG1ldGhvZHMgb2Ygc2lnbi1pbixcbiAqIHtAbGluayBTaWduSW5NZXRob2R9LkVNQUlMX1BBU1NXT1JEIGFuZFxuICoge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfTElOSy5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gZW1haWwgLSBUaGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwoXG4gIGF1dGg6IEF1dGgsXG4gIGVtYWlsOiBzdHJpbmdcbik6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgLy8gY3JlYXRlQXV0aFVyaSByZXR1cm5zIGFuIGVycm9yIGlmIGNvbnRpbnVlIFVSSSBpcyBub3QgaHR0cCBvciBodHRwcy5cbiAgLy8gRm9yIGVudmlyb25tZW50cyBsaWtlIENvcmRvdmEsIENocm9tZSBleHRlbnNpb25zLCBuYXRpdmUgZnJhbWV3b3JrcywgZmlsZVxuICAvLyBzeXN0ZW1zLCBldGMsIHVzZSBodHRwOi8vbG9jYWxob3N0IGFzIGNvbnRpbnVlIFVSTC5cbiAgY29uc3QgY29udGludWVVcmkgPSBfaXNIdHRwT3JIdHRwcygpID8gX2dldEN1cnJlbnRVcmwoKSA6ICdodHRwOi8vbG9jYWxob3N0JztcbiAgY29uc3QgcmVxdWVzdDogQ3JlYXRlQXV0aFVyaVJlcXVlc3QgPSB7XG4gICAgaWRlbnRpZmllcjogZW1haWwsXG4gICAgY29udGludWVVcmlcbiAgfTtcblxuICBjb25zdCB7IHNpZ25pbk1ldGhvZHMgfSA9IGF3YWl0IGNyZWF0ZUF1dGhVcmkoXG4gICAgZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLFxuICAgIHJlcXVlc3RcbiAgKTtcblxuICByZXR1cm4gc2lnbmluTWV0aG9kcyB8fCBbXTtcbn1cblxuLyoqXG4gKiBTZW5kcyBhIHZlcmlmaWNhdGlvbiBlbWFpbCB0byBhIHVzZXIuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSB2ZXJpZmljYXRpb24gcHJvY2VzcyBpcyBjb21wbGV0ZWQgYnkgY2FsbGluZyB7QGxpbmsgYXBwbHlBY3Rpb25Db2RlfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xuICogICB1cmw6ICdodHRwczovL3d3dy5leGFtcGxlLmNvbS8/ZW1haWw9dXNlckBleGFtcGxlLmNvbScsXG4gKiAgIGlPUzoge1xuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcbiAqICAgfSxcbiAqICAgYW5kcm9pZDoge1xuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXG4gKiAgICAgaW5zdGFsbEFwcDogdHJ1ZSxcbiAqICAgICBtaW5pbXVtVmVyc2lvbjogJzEyJ1xuICogICB9LFxuICogICBoYW5kbGVDb2RlSW5BcHA6IHRydWVcbiAqIH07XG4gKiBhd2FpdCBzZW5kRW1haWxWZXJpZmljYXRpb24odXNlciwgYWN0aW9uQ29kZVNldHRpbmdzKTtcbiAqIC8vIE9idGFpbiBjb2RlIGZyb20gdGhlIHVzZXIuXG4gKiBhd2FpdCBhcHBseUFjdGlvbkNvZGUoYXV0aCwgY29kZSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIGFjdGlvbkNvZGVTZXR0aW5ncyAtIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVNldHRpbmdzfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kRW1haWxWZXJpZmljYXRpb24oXG4gIHVzZXI6IFVzZXIsXG4gIGFjdGlvbkNvZGVTZXR0aW5ncz86IEFjdGlvbkNvZGVTZXR0aW5ncyB8IG51bGxcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBjb25zdCBpZFRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gIGNvbnN0IHJlcXVlc3Q6IGFwaS5WZXJpZnlFbWFpbFJlcXVlc3QgPSB7XG4gICAgcmVxdWVzdFR5cGU6IEFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0VNQUlMLFxuICAgIGlkVG9rZW5cbiAgfTtcbiAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncykge1xuICAgIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QoXG4gICAgICB1c2VySW50ZXJuYWwuYXV0aCxcbiAgICAgIHJlcXVlc3QsXG4gICAgICBhY3Rpb25Db2RlU2V0dGluZ3NcbiAgICApO1xuICB9XG5cbiAgY29uc3QgeyBlbWFpbCB9ID0gYXdhaXQgYXBpLnNlbmRFbWFpbFZlcmlmaWNhdGlvbih1c2VySW50ZXJuYWwuYXV0aCwgcmVxdWVzdCk7XG5cbiAgaWYgKGVtYWlsICE9PSB1c2VyLmVtYWlsKSB7XG4gICAgYXdhaXQgdXNlci5yZWxvYWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIFNlbmRzIGEgdmVyaWZpY2F0aW9uIGVtYWlsIHRvIGEgbmV3IGVtYWlsIGFkZHJlc3MuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSB1c2VyJ3MgZW1haWwgd2lsbCBiZSB1cGRhdGVkIHRvIHRoZSBuZXcgb25lIGFmdGVyIGJlaW5nIHZlcmlmaWVkLlxuICpcbiAqIElmIHlvdSBoYXZlIGEgY3VzdG9tIGVtYWlsIGFjdGlvbiBoYW5kbGVyLCB5b3UgY2FuIGNvbXBsZXRlIHRoZSB2ZXJpZmljYXRpb24gcHJvY2VzcyBieSBjYWxsaW5nXG4gKiB7QGxpbmsgYXBwbHlBY3Rpb25Db2RlfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xuICogICB1cmw6ICdodHRwczovL3d3dy5leGFtcGxlLmNvbS8/ZW1haWw9dXNlckBleGFtcGxlLmNvbScsXG4gKiAgIGlPUzoge1xuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcbiAqICAgfSxcbiAqICAgYW5kcm9pZDoge1xuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXG4gKiAgICAgaW5zdGFsbEFwcDogdHJ1ZSxcbiAqICAgICBtaW5pbXVtVmVyc2lvbjogJzEyJ1xuICogICB9LFxuICogICBoYW5kbGVDb2RlSW5BcHA6IHRydWVcbiAqIH07XG4gKiBhd2FpdCB2ZXJpZnlCZWZvcmVVcGRhdGVFbWFpbCh1c2VyLCAnbmV3ZW1haWxAZXhhbXBsZS5jb20nLCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xuICogLy8gT2J0YWluIGNvZGUgZnJvbSB0aGUgdXNlci5cbiAqIGF3YWl0IGFwcGx5QWN0aW9uQ29kZShhdXRoLCBjb2RlKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gbmV3RW1haWwgLSBUaGUgbmV3IGVtYWlsIGFkZHJlc3MgdG8gYmUgdmVyaWZpZWQgYmVmb3JlIHVwZGF0ZS5cbiAqIEBwYXJhbSBhY3Rpb25Db2RlU2V0dGluZ3MgLSBUaGUge0BsaW5rIEFjdGlvbkNvZGVTZXR0aW5nc30uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5QmVmb3JlVXBkYXRlRW1haWwoXG4gIHVzZXI6IFVzZXIsXG4gIG5ld0VtYWlsOiBzdHJpbmcsXG4gIGFjdGlvbkNvZGVTZXR0aW5ncz86IEFjdGlvbkNvZGVTZXR0aW5ncyB8IG51bGxcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBjb25zdCBpZFRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gIGNvbnN0IHJlcXVlc3Q6IGFwaS5WZXJpZnlBbmRDaGFuZ2VFbWFpbFJlcXVlc3QgPSB7XG4gICAgcmVxdWVzdFR5cGU6IEFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwsXG4gICAgaWRUb2tlbixcbiAgICBuZXdFbWFpbFxuICB9O1xuICBpZiAoYWN0aW9uQ29kZVNldHRpbmdzKSB7XG4gICAgX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdChcbiAgICAgIHVzZXJJbnRlcm5hbC5hdXRoLFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGFjdGlvbkNvZGVTZXR0aW5nc1xuICAgICk7XG4gIH1cblxuICBjb25zdCB7IGVtYWlsIH0gPSBhd2FpdCBhcGkudmVyaWZ5QW5kQ2hhbmdlRW1haWwodXNlckludGVybmFsLmF1dGgsIHJlcXVlc3QpO1xuXG4gIGlmIChlbWFpbCAhPT0gdXNlci5lbWFpbCkge1xuICAgIC8vIElmIHRoZSBsb2NhbCBjb3B5IG9mIHRoZSBlbWFpbCBvbiB1c2VyIGlzIG91dGRhdGVkLCByZWxvYWQgdGhlXG4gICAgLy8gdXNlci5cbiAgICBhd2FpdCB1c2VyLnJlbG9hZCgpO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBFbmRwb2ludCwgSHR0cE1ldGhvZCwgX3BlcmZvcm1BcGlSZXF1ZXN0IH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlUHJvZmlsZVJlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgcGhvdG9Vcmw/OiBzdHJpbmcgfCBudWxsO1xuICByZXR1cm5TZWN1cmVUb2tlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVQcm9maWxlUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7XG4gIHBob3RvVXJsPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVByb2ZpbGUoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFVwZGF0ZVByb2ZpbGVSZXF1ZXN0XG4pOiBQcm9taXNlPFVwZGF0ZVByb2ZpbGVSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFVwZGF0ZVByb2ZpbGVSZXF1ZXN0LCBVcGRhdGVQcm9maWxlUmVzcG9uc2U+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNFVF9BQ0NPVU5UX0lORk8sXG4gICAgcmVxdWVzdFxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7XG4gIHVwZGF0ZUVtYWlsUGFzc3dvcmQgYXMgYXBpVXBkYXRlRW1haWxQYXNzd29yZCxcbiAgVXBkYXRlRW1haWxQYXNzd29yZFJlcXVlc3Rcbn0gZnJvbSAnLi4vLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9lbWFpbF9hbmRfcGFzc3dvcmQnO1xuaW1wb3J0IHsgdXBkYXRlUHJvZmlsZSBhcyBhcGlVcGRhdGVQcm9maWxlIH0gZnJvbSAnLi4vLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9wcm9maWxlJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgX2xvZ291dElmSW52YWxpZGF0ZWQgfSBmcm9tICcuL2ludmFsaWRhdGlvbic7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFVwZGF0ZXMgYSB1c2VyJ3MgcHJvZmlsZSBkYXRhLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gcHJvZmlsZSAtIFRoZSBwcm9maWxlJ3MgYGRpc3BsYXlOYW1lYCBhbmQgYHBob3RvVVJMYCB0byB1cGRhdGUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlUHJvZmlsZShcbiAgdXNlcjogVXNlcixcbiAge1xuICAgIGRpc3BsYXlOYW1lLFxuICAgIHBob3RvVVJMOiBwaG90b1VybFxuICB9OiB7IGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbDsgcGhvdG9VUkw/OiBzdHJpbmcgfCBudWxsIH1cbik6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCAmJiBwaG90b1VybCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgY29uc3QgaWRUb2tlbiA9IGF3YWl0IHVzZXJJbnRlcm5hbC5nZXRJZFRva2VuKCk7XG4gIGNvbnN0IHByb2ZpbGVSZXF1ZXN0ID0ge1xuICAgIGlkVG9rZW4sXG4gICAgZGlzcGxheU5hbWUsXG4gICAgcGhvdG9VcmwsXG4gICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWVcbiAgfTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBfbG9nb3V0SWZJbnZhbGlkYXRlZChcbiAgICB1c2VySW50ZXJuYWwsXG4gICAgYXBpVXBkYXRlUHJvZmlsZSh1c2VySW50ZXJuYWwuYXV0aCwgcHJvZmlsZVJlcXVlc3QpXG4gICk7XG5cbiAgdXNlckludGVybmFsLmRpc3BsYXlOYW1lID0gcmVzcG9uc2UuZGlzcGxheU5hbWUgfHwgbnVsbDtcbiAgdXNlckludGVybmFsLnBob3RvVVJMID0gcmVzcG9uc2UucGhvdG9VcmwgfHwgbnVsbDtcblxuICAvLyBVcGRhdGUgdGhlIHBhc3N3b3JkIHByb3ZpZGVyIGFzIHdlbGxcbiAgY29uc3QgcGFzc3dvcmRQcm92aWRlciA9IHVzZXJJbnRlcm5hbC5wcm92aWRlckRhdGEuZmluZChcbiAgICAoeyBwcm92aWRlcklkIH0pID0+IHByb3ZpZGVySWQgPT09IFByb3ZpZGVySWQuUEFTU1dPUkRcbiAgKTtcbiAgaWYgKHBhc3N3b3JkUHJvdmlkZXIpIHtcbiAgICBwYXNzd29yZFByb3ZpZGVyLmRpc3BsYXlOYW1lID0gdXNlckludGVybmFsLmRpc3BsYXlOYW1lO1xuICAgIHBhc3N3b3JkUHJvdmlkZXIucGhvdG9VUkwgPSB1c2VySW50ZXJuYWwucGhvdG9VUkw7XG4gIH1cblxuICBhd2FpdCB1c2VySW50ZXJuYWwuX3VwZGF0ZVRva2Vuc0lmTmVjZXNzYXJ5KHJlc3BvbnNlKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogQW4gZW1haWwgd2lsbCBiZSBzZW50IHRvIHRoZSBvcmlnaW5hbCBlbWFpbCBhZGRyZXNzIChpZiBpdCB3YXMgc2V0KSB0aGF0IGFsbG93cyB0byByZXZva2UgdGhlXG4gKiBlbWFpbCBhZGRyZXNzIGNoYW5nZSwgaW4gb3JkZXIgdG8gcHJvdGVjdCB0aGVtIGZyb20gYWNjb3VudCBoaWphY2tpbmcuXG4gKlxuICogSW1wb3J0YW50OiB0aGlzIGlzIGEgc2VjdXJpdHkgc2Vuc2l0aXZlIG9wZXJhdGlvbiB0aGF0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGhhdmUgcmVjZW50bHkgc2lnbmVkXG4gKiBpbi4gSWYgdGhpcyByZXF1aXJlbWVudCBpc24ndCBtZXQsIGFzayB0aGUgdXNlciB0byBhdXRoZW50aWNhdGUgYWdhaW4gYW5kIHRoZW4gY2FsbFxuICoge0BsaW5rIHJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWx9LlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gbmV3RW1haWwgLSBUaGUgbmV3IGVtYWlsIGFkZHJlc3MuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRW1haWwodXNlcjogVXNlciwgbmV3RW1haWw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gdXBkYXRlRW1haWxPclBhc3N3b3JkKFxuICAgIGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWwsXG4gICAgbmV3RW1haWwsXG4gICAgbnVsbFxuICApO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHVzZXIncyBwYXNzd29yZC5cbiAqXG4gKiBAcmVtYXJrc1xuICogSW1wb3J0YW50OiB0aGlzIGlzIGEgc2VjdXJpdHkgc2Vuc2l0aXZlIG9wZXJhdGlvbiB0aGF0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGhhdmUgcmVjZW50bHkgc2lnbmVkXG4gKiBpbi4gSWYgdGhpcyByZXF1aXJlbWVudCBpc24ndCBtZXQsIGFzayB0aGUgdXNlciB0byBhdXRoZW50aWNhdGUgYWdhaW4gYW5kIHRoZW4gY2FsbFxuICoge0BsaW5rIHJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWx9LlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gbmV3UGFzc3dvcmQgLSBUaGUgbmV3IHBhc3N3b3JkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVBhc3N3b3JkKHVzZXI6IFVzZXIsIG5ld1Bhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIHVwZGF0ZUVtYWlsT3JQYXNzd29yZChcbiAgICBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsLFxuICAgIG51bGwsXG4gICAgbmV3UGFzc3dvcmRcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlRW1haWxPclBhc3N3b3JkKFxuICB1c2VyOiBVc2VySW50ZXJuYWwsXG4gIGVtYWlsOiBzdHJpbmcgfCBudWxsLFxuICBwYXNzd29yZDogc3RyaW5nIHwgbnVsbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHsgYXV0aCB9ID0gdXNlcjtcbiAgY29uc3QgaWRUb2tlbiA9IGF3YWl0IHVzZXIuZ2V0SWRUb2tlbigpO1xuICBjb25zdCByZXF1ZXN0OiBVcGRhdGVFbWFpbFBhc3N3b3JkUmVxdWVzdCA9IHtcbiAgICBpZFRva2VuLFxuICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlXG4gIH07XG5cbiAgaWYgKGVtYWlsKSB7XG4gICAgcmVxdWVzdC5lbWFpbCA9IGVtYWlsO1xuICB9XG5cbiAgaWYgKHBhc3N3b3JkKSB7XG4gICAgcmVxdWVzdC5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBfbG9nb3V0SWZJbnZhbGlkYXRlZChcbiAgICB1c2VyLFxuICAgIGFwaVVwZGF0ZUVtYWlsUGFzc3dvcmQoYXV0aCwgcmVxdWVzdClcbiAgKTtcbiAgYXdhaXQgdXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkocmVzcG9uc2UsIC8qIHJlbG9hZCAqLyB0cnVlKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFkZGl0aW9uYWxVc2VySW5mbywgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlLCBJZFRva2VuUmVzcG9uc2VLaW5kIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgX3BhcnNlVG9rZW4gfSBmcm9tICcuL2lkX3Rva2VuX3Jlc3VsdCc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFBhcnNlIHRoZSBgQWRkaXRpb25hbFVzZXJJbmZvYCBmcm9tIHRoZSBJRCB0b2tlbiByZXNwb25zZS5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgaWRUb2tlblJlc3BvbnNlPzogSWRUb2tlblJlc3BvbnNlXG4pOiBBZGRpdGlvbmFsVXNlckluZm8gfCBudWxsIHtcbiAgaWYgKCFpZFRva2VuUmVzcG9uc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB7IHByb3ZpZGVySWQgfSA9IGlkVG9rZW5SZXNwb25zZTtcbiAgY29uc3QgcHJvZmlsZSA9IGlkVG9rZW5SZXNwb25zZS5yYXdVc2VySW5mb1xuICAgID8gSlNPTi5wYXJzZShpZFRva2VuUmVzcG9uc2UucmF3VXNlckluZm8pXG4gICAgOiB7fTtcbiAgY29uc3QgaXNOZXdVc2VyID1cbiAgICBpZFRva2VuUmVzcG9uc2UuaXNOZXdVc2VyIHx8XG4gICAgaWRUb2tlblJlc3BvbnNlLmtpbmQgPT09IElkVG9rZW5SZXNwb25zZUtpbmQuU2lnbnVwTmV3VXNlcjtcbiAgaWYgKCFwcm92aWRlcklkICYmIGlkVG9rZW5SZXNwb25zZT8uaWRUb2tlbikge1xuICAgIGNvbnN0IHNpZ25JblByb3ZpZGVyID0gX3BhcnNlVG9rZW4oaWRUb2tlblJlc3BvbnNlLmlkVG9rZW4pPy5maXJlYmFzZT8uW1xuICAgICAgJ3NpZ25faW5fcHJvdmlkZXInXG4gICAgXTtcbiAgICBpZiAoc2lnbkluUHJvdmlkZXIpIHtcbiAgICAgIGNvbnN0IGZpbHRlcmVkUHJvdmlkZXJJZCA9XG4gICAgICAgIHNpZ25JblByb3ZpZGVyICE9PSBQcm92aWRlcklkLkFOT05ZTU9VUyAmJlxuICAgICAgICBzaWduSW5Qcm92aWRlciAhPT0gUHJvdmlkZXJJZC5DVVNUT01cbiAgICAgICAgICA/IChzaWduSW5Qcm92aWRlciBhcyBQcm92aWRlcklkKVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgIC8vIFVzZXMgZ2VuZXJpYyBjbGFzcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxlZ2FjeSBTREsuXG4gICAgICByZXR1cm4gbmV3IEdlbmVyaWNBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBmaWx0ZXJlZFByb3ZpZGVySWQpO1xuICAgIH1cbiAgfVxuICBpZiAoIXByb3ZpZGVySWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzd2l0Y2ggKHByb3ZpZGVySWQpIHtcbiAgICBjYXNlIFByb3ZpZGVySWQuRkFDRUJPT0s6XG4gICAgICByZXR1cm4gbmV3IEZhY2Vib29rQWRkaXRpb25hbFVzZXJJbmZvKGlzTmV3VXNlciwgcHJvZmlsZSk7XG4gICAgY2FzZSBQcm92aWRlcklkLkdJVEhVQjpcbiAgICAgIHJldHVybiBuZXcgR2l0aHViQWRkaXRpb25hbFVzZXJJbmZvKGlzTmV3VXNlciwgcHJvZmlsZSk7XG4gICAgY2FzZSBQcm92aWRlcklkLkdPT0dMRTpcbiAgICAgIHJldHVybiBuZXcgR29vZ2xlQWRkaXRpb25hbFVzZXJJbmZvKGlzTmV3VXNlciwgcHJvZmlsZSk7XG4gICAgY2FzZSBQcm92aWRlcklkLlRXSVRURVI6XG4gICAgICByZXR1cm4gbmV3IFR3aXR0ZXJBZGRpdGlvbmFsVXNlckluZm8oXG4gICAgICAgIGlzTmV3VXNlcixcbiAgICAgICAgcHJvZmlsZSxcbiAgICAgICAgaWRUb2tlblJlc3BvbnNlLnNjcmVlbk5hbWUgfHwgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIFByb3ZpZGVySWQuQ1VTVE9NOlxuICAgIGNhc2UgUHJvdmlkZXJJZC5BTk9OWU1PVVM6XG4gICAgICByZXR1cm4gbmV3IEdlbmVyaWNBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBudWxsKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG5ldyBHZW5lcmljQWRkaXRpb25hbFVzZXJJbmZvKGlzTmV3VXNlciwgcHJvdmlkZXJJZCwgcHJvZmlsZSk7XG4gIH1cbn1cblxuY2xhc3MgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyBpbXBsZW1lbnRzIEFkZGl0aW9uYWxVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IGlzTmV3VXNlcjogYm9vbGVhbixcbiAgICByZWFkb25seSBwcm92aWRlcklkOiBQcm92aWRlcklkIHwgc3RyaW5nIHwgbnVsbCxcbiAgICByZWFkb25seSBwcm9maWxlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHt9XG4gICkge31cbn1cblxuY2xhc3MgRmVkZXJhdGVkQWRkaXRpb25hbFVzZXJJbmZvV2l0aFVzZXJuYW1lIGV4dGVuZHMgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGlzTmV3VXNlcjogYm9vbGVhbixcbiAgICBwcm92aWRlcklkOiBQcm92aWRlcklkLFxuICAgIHByb2ZpbGU6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICAgIHJlYWRvbmx5IHVzZXJuYW1lOiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIHN1cGVyKGlzTmV3VXNlciwgcHJvdmlkZXJJZCwgcHJvZmlsZSk7XG4gIH1cbn1cblxuY2xhc3MgRmFjZWJvb2tBZGRpdGlvbmFsVXNlckluZm8gZXh0ZW5kcyBHZW5lcmljQWRkaXRpb25hbFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoaXNOZXdVc2VyOiBib29sZWFuLCBwcm9maWxlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge1xuICAgIHN1cGVyKGlzTmV3VXNlciwgUHJvdmlkZXJJZC5GQUNFQk9PSywgcHJvZmlsZSk7XG4gIH1cbn1cblxuY2xhc3MgR2l0aHViQWRkaXRpb25hbFVzZXJJbmZvIGV4dGVuZHMgRmVkZXJhdGVkQWRkaXRpb25hbFVzZXJJbmZvV2l0aFVzZXJuYW1lIHtcbiAgY29uc3RydWN0b3IoaXNOZXdVc2VyOiBib29sZWFuLCBwcm9maWxlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge1xuICAgIHN1cGVyKFxuICAgICAgaXNOZXdVc2VyLFxuICAgICAgUHJvdmlkZXJJZC5HSVRIVUIsXG4gICAgICBwcm9maWxlLFxuICAgICAgdHlwZW9mIHByb2ZpbGU/LmxvZ2luID09PSAnc3RyaW5nJyA/IHByb2ZpbGU/LmxvZ2luIDogbnVsbFxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgR29vZ2xlQWRkaXRpb25hbFVzZXJJbmZvIGV4dGVuZHMgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKGlzTmV3VXNlcjogYm9vbGVhbiwgcHJvZmlsZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pIHtcbiAgICBzdXBlcihpc05ld1VzZXIsIFByb3ZpZGVySWQuR09PR0xFLCBwcm9maWxlKTtcbiAgfVxufVxuXG5jbGFzcyBUd2l0dGVyQWRkaXRpb25hbFVzZXJJbmZvIGV4dGVuZHMgRmVkZXJhdGVkQWRkaXRpb25hbFVzZXJJbmZvV2l0aFVzZXJuYW1lIHtcbiAgY29uc3RydWN0b3IoXG4gICAgaXNOZXdVc2VyOiBib29sZWFuLFxuICAgIHByb2ZpbGU6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICAgIHNjcmVlbk5hbWU6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIoaXNOZXdVc2VyLCBQcm92aWRlcklkLlRXSVRURVIsIHByb2ZpbGUsIHNjcmVlbk5hbWUpO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdHMgcHJvdmlkZXIgc3BlY2lmaWMge0BsaW5rIEFkZGl0aW9uYWxVc2VySW5mb30gZm9yIHRoZSBnaXZlbiBjcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRkaXRpb25hbFVzZXJJbmZvKFxuICB1c2VyQ3JlZGVudGlhbDogVXNlckNyZWRlbnRpYWxcbik6IEFkZGl0aW9uYWxVc2VySW5mbyB8IG51bGwge1xuICBjb25zdCB7IHVzZXIsIF90b2tlblJlc3BvbnNlIH0gPSB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsO1xuICBpZiAodXNlci5pc0Fub255bW91cyAmJiAhX3Rva2VuUmVzcG9uc2UpIHtcbiAgICAvLyBIYW5kbGUgdGhlIHNwZWNpYWwgY2FzZSB3aGVyZSBzaWduSW5Bbm9ueW1vdXNseSgpIGdldHMgY2FsbGVkIHR3aWNlLlxuICAgIC8vIE5vIG5ldHdvcmsgY2FsbCBpcyBtYWRlIHNvIHRoZXJlJ3Mgbm90aGluZyB0byBhY3R1YWxseSBmaWxsIHRoaXMgaW5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvdmlkZXJJZDogbnVsbCxcbiAgICAgIGlzTmV3VXNlcjogZmFsc2UsXG4gICAgICBwcm9maWxlOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfZnJvbUlkVG9rZW5SZXNwb25zZShfdG9rZW5SZXNwb25zZSk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQge1xuICBBdXRoLFxuICBOZXh0T3JPYnNlcnZlcixcbiAgUGVyc2lzdGVuY2UsXG4gIFVzZXIsXG4gIENvbXBsZXRlRm4sXG4gIEVycm9yRm4sXG4gIFVuc3Vic2NyaWJlXG59IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi9jb3JlL2F1dGgvYXV0aF9pbXBsJztcblxuZXhwb3J0IHtcbiAgZGVidWdFcnJvck1hcCxcbiAgcHJvZEVycm9yTWFwLFxuICBBVVRIX0VSUk9SX0NPREVTX01BUF9ET19OT1RfVVNFX0lOVEVSTkFMTFkgYXMgQXV0aEVycm9yQ29kZXNcbn0gZnJvbSAnLi9lcnJvcnMnO1xuXG4vLyBOb24tb3B0aW9uYWwgYXV0aCBtZXRob2RzLlxuLyoqXG4gKiBDaGFuZ2VzIHRoZSB0eXBlIG9mIHBlcnNpc3RlbmNlIG9uIHRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UgZm9yIHRoZSBjdXJyZW50bHkgc2F2ZWRcbiAqIGBBdXRoYCBzZXNzaW9uIGFuZCBhcHBsaWVzIHRoaXMgdHlwZSBvZiBwZXJzaXN0ZW5jZSBmb3IgZnV0dXJlIHNpZ24taW4gcmVxdWVzdHMsIGluY2x1ZGluZ1xuICogc2lnbi1pbiB3aXRoIHJlZGlyZWN0IHJlcXVlc3RzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIG1ha2VzIGl0IGVhc3kgZm9yIGEgdXNlciBzaWduaW5nIGluIHRvIHNwZWNpZnkgd2hldGhlciB0aGVpciBzZXNzaW9uIHNob3VsZCBiZVxuICogcmVtZW1iZXJlZCBvciBub3QuIEl0IGFsc28gbWFrZXMgaXQgZWFzaWVyIHRvIG5ldmVyIHBlcnNpc3QgdGhlIGBBdXRoYCBzdGF0ZSBmb3IgYXBwbGljYXRpb25zXG4gKiB0aGF0IGFyZSBzaGFyZWQgYnkgb3RoZXIgdXNlcnMgb3IgaGF2ZSBzZW5zaXRpdmUgZGF0YS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogc2V0UGVyc2lzdGVuY2UoYXV0aCwgYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gcGVyc2lzdGVuY2UgLSBUaGUge0BsaW5rIFBlcnNpc3RlbmNlfSB0byB1c2UuXG4gKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIHBlcnNpc3RlbmNlIGNoYW5nZSBoYXMgY29tcGxldGVkXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UGVyc2lzdGVuY2UoXG4gIGF1dGg6IEF1dGgsXG4gIHBlcnNpc3RlbmNlOiBQZXJzaXN0ZW5jZVxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCkuc2V0UGVyc2lzdGVuY2UocGVyc2lzdGVuY2UpO1xufVxuXG4vKipcbiAqIExvYWRzIHRoZSByZUNBUFRDSEEgY29uZmlndXJhdGlvbiBpbnRvIHRoZSBgQXV0aGAgaW5zdGFuY2UuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgd2lsbCBsb2FkIHRoZSByZUNBUFRDSEEgY29uZmlnLCB3aGljaCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcmVDQVBUQ0hBXG4gKiB2ZXJpZmljYXRpb24gZmxvdyBzaG91bGQgYmUgdHJpZ2dlcmVkIGZvciBlYWNoIGF1dGggcHJvdmlkZXIsIGludG8gdGhlXG4gKiBjdXJyZW50IEF1dGggc2Vzc2lvbi5cbiAqXG4gKiBJZiBpbml0aWFsaXplUmVjYXB0Y2hhQ29uZmlnKCkgaXMgbm90IGludm9rZWQsIHRoZSBhdXRoIGZsb3cgd2lsbCBhbHdheXMgc3RhcnRcbiAqIHdpdGhvdXQgcmVDQVBUQ0hBIHZlcmlmaWNhdGlvbi4gSWYgdGhlIHByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQgdG8gcmVxdWlyZSByZUNBUFRDSEFcbiAqIHZlcmlmaWNhdGlvbiwgdGhlIFNESyB3aWxsIHRyYW5zcGFyZW50bHkgbG9hZCB0aGUgcmVDQVBUQ0hBIGNvbmZpZyBhbmQgcmVzdGFydCB0aGVcbiAqIGF1dGggZmxvd3MuXG4gKlxuICogVGh1cywgYnkgY2FsbGluZyB0aGlzIG9wdGlvbmFsIG1ldGhvZCwgeW91IHdpbGwgcmVkdWNlIHRoZSBsYXRlbmN5IG9mIGZ1dHVyZSBhdXRoIGZsb3dzLlxuICogTG9hZGluZyB0aGUgcmVDQVBUQ0hBIGNvbmZpZyBlYXJseSB3aWxsIGFsc28gZW5oYW5jZSB0aGUgc2lnbmFsIGNvbGxlY3RlZCBieSByZUNBUFRDSEEuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGluaXRpYWxpemVSZWNhcHRjaGFDb25maWcoYXV0aCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVJlY2FwdGNoYUNvbmZpZyhhdXRoOiBBdXRoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgcmV0dXJuIGF1dGhJbnRlcm5hbC5pbml0aWFsaXplUmVjYXB0Y2hhQ29uZmlnKCk7XG59XG5cbi8qKlxuICogQWRkcyBhbiBvYnNlcnZlciBmb3IgY2hhbmdlcyB0byB0aGUgc2lnbmVkLWluIHVzZXIncyBJRCB0b2tlbi5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBpbmNsdWRlcyBzaWduLWluLCBzaWduLW91dCwgYW5kIHRva2VuIHJlZnJlc2ggZXZlbnRzLlxuICogVGhpcyB3aWxsIG5vdCBiZSB0cmlnZ2VyZWQgYXV0b21hdGljYWxseSB1cG9uIElEIHRva2VuIGV4cGlyYXRpb24uIFVzZSB7QGxpbmsgVXNlci5nZXRJZFRva2VufSB0byByZWZyZXNoIHRoZSBJRCB0b2tlbi5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gbmV4dE9yT2JzZXJ2ZXIgLSBjYWxsYmFjayB0cmlnZ2VyZWQgb24gY2hhbmdlLlxuICogQHBhcmFtIGVycm9yIC0gRGVwcmVjYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBuZXZlciB0cmlnZ2VyZWQuIEVycm9yc1xuICogb24gc2lnbmluZyBpbi9vdXQgY2FuIGJlIGNhdWdodCBpbiBwcm9taXNlcyByZXR1cm5lZCBmcm9tXG4gKiBzaWduLWluL3NpZ24tb3V0IGZ1bmN0aW9ucy5cbiAqIEBwYXJhbSBjb21wbGV0ZWQgLSBEZXByZWNhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5ldmVyIHRyaWdnZXJlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbklkVG9rZW5DaGFuZ2VkKFxuICBhdXRoOiBBdXRoLFxuICBuZXh0T3JPYnNlcnZlcjogTmV4dE9yT2JzZXJ2ZXI8VXNlcj4sXG4gIGVycm9yPzogRXJyb3JGbixcbiAgY29tcGxldGVkPzogQ29tcGxldGVGblxuKTogVW5zdWJzY3JpYmUge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLm9uSWRUb2tlbkNoYW5nZWQoXG4gICAgbmV4dE9yT2JzZXJ2ZXIsXG4gICAgZXJyb3IsXG4gICAgY29tcGxldGVkXG4gICk7XG59XG4vKipcbiAqIEFkZHMgYSBibG9ja2luZyBjYWxsYmFjayB0aGF0IHJ1bnMgYmVmb3JlIGFuIGF1dGggc3RhdGUgY2hhbmdlXG4gKiBzZXRzIGEgbmV3IHVzZXIuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdHJpZ2dlcmVkIGJlZm9yZSBuZXcgdXNlciB2YWx1ZSBpcyBzZXQuXG4gKiAgIElmIHRoaXMgdGhyb3dzLCBpdCBibG9ja3MgdGhlIHVzZXIgZnJvbSBiZWluZyBzZXQuXG4gKiBAcGFyYW0gb25BYm9ydCAtIGNhbGxiYWNrIHRyaWdnZXJlZCBpZiBhIGxhdGVyIGBiZWZvcmVBdXRoU3RhdGVDaGFuZ2VkKClgXG4gKiAgIGNhbGxiYWNrIHRocm93cywgYWxsb3dpbmcgeW91IHRvIHVuZG8gYW55IHNpZGUgZWZmZWN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJlZm9yZUF1dGhTdGF0ZUNoYW5nZWQoXG4gIGF1dGg6IEF1dGgsXG4gIGNhbGxiYWNrOiAodXNlcjogVXNlciB8IG51bGwpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+LFxuICBvbkFib3J0PzogKCkgPT4gdm9pZFxuKTogVW5zdWJzY3JpYmUge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLmJlZm9yZUF1dGhTdGF0ZUNoYW5nZWQoY2FsbGJhY2ssIG9uQWJvcnQpO1xufVxuLyoqXG4gKiBBZGRzIGFuIG9ic2VydmVyIGZvciBjaGFuZ2VzIHRvIHRoZSB1c2VyJ3Mgc2lnbi1pbiBzdGF0ZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogVG8ga2VlcCB0aGUgb2xkIGJlaGF2aW9yLCBzZWUge0BsaW5rIG9uSWRUb2tlbkNoYW5nZWR9LlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBuZXh0T3JPYnNlcnZlciAtIGNhbGxiYWNrIHRyaWdnZXJlZCBvbiBjaGFuZ2UuXG4gKiBAcGFyYW0gZXJyb3IgLSBEZXByZWNhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5ldmVyIHRyaWdnZXJlZC4gRXJyb3JzXG4gKiBvbiBzaWduaW5nIGluL291dCBjYW4gYmUgY2F1Z2h0IGluIHByb21pc2VzIHJldHVybmVkIGZyb21cbiAqIHNpZ24taW4vc2lnbi1vdXQgZnVuY3Rpb25zLlxuICogQHBhcmFtIGNvbXBsZXRlZCAtIERlcHJlY2F0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbmV2ZXIgdHJpZ2dlcmVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uQXV0aFN0YXRlQ2hhbmdlZChcbiAgYXV0aDogQXV0aCxcbiAgbmV4dE9yT2JzZXJ2ZXI6IE5leHRPck9ic2VydmVyPFVzZXI+LFxuICBlcnJvcj86IEVycm9yRm4sXG4gIGNvbXBsZXRlZD86IENvbXBsZXRlRm5cbik6IFVuc3Vic2NyaWJlIHtcbiAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKS5vbkF1dGhTdGF0ZUNoYW5nZWQoXG4gICAgbmV4dE9yT2JzZXJ2ZXIsXG4gICAgZXJyb3IsXG4gICAgY29tcGxldGVkXG4gICk7XG59XG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UgdG8gdGhlIGRlZmF1bHQgZGV2aWNlL2Jyb3dzZXIgcHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRGV2aWNlTGFuZ3VhZ2UoYXV0aDogQXV0aCk6IHZvaWQge1xuICBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCkudXNlRGV2aWNlTGFuZ3VhZ2UoKTtcbn1cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2V0cyB0aGUgcHJvdmlkZWQgdXNlciBhcyB7QGxpbmsgQXV0aC5jdXJyZW50VXNlcn0gb24gdGhlXG4gKiB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKlxuICogQHJlbWFya3NcbiAqIEEgbmV3IGluc3RhbmNlIGNvcHkgb2YgdGhlIHVzZXIgcHJvdmlkZWQgd2lsbCBiZSBtYWRlIGFuZCBzZXQgYXMgY3VycmVudFVzZXIuXG4gKlxuICogVGhpcyB3aWxsIHRyaWdnZXIge0BsaW5rIG9uQXV0aFN0YXRlQ2hhbmdlZH0gYW5kIHtAbGluayBvbklkVG9rZW5DaGFuZ2VkfSBsaXN0ZW5lcnNcbiAqIGxpa2Ugb3RoZXIgc2lnbiBpbiBtZXRob2RzLlxuICpcbiAqIFRoZSBvcGVyYXRpb24gZmFpbHMgd2l0aCBhbiBlcnJvciBpZiB0aGUgdXNlciB0byBiZSB1cGRhdGVkIGJlbG9uZ3MgdG8gYSBkaWZmZXJlbnQgRmlyZWJhc2VcbiAqIHByb2plY3QuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIHVzZXIgLSBUaGUgbmV3IHtAbGluayBVc2VyfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDdXJyZW50VXNlcihcbiAgYXV0aDogQXV0aCxcbiAgdXNlcjogVXNlciB8IG51bGxcbik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLnVwZGF0ZUN1cnJlbnRVc2VyKHVzZXIpO1xufVxuLyoqXG4gKiBTaWducyBvdXQgdGhlIGN1cnJlbnQgdXNlci5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbk91dChhdXRoOiBBdXRoKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCkuc2lnbk91dCgpO1xufVxuXG5leHBvcnQgeyBpbml0aWFsaXplQXV0aCB9IGZyb20gJy4vYXV0aC9pbml0aWFsaXplJztcbmV4cG9ydCB7IGNvbm5lY3RBdXRoRW11bGF0b3IgfSBmcm9tICcuL2F1dGgvZW11bGF0b3InO1xuXG4vLyBjcmVkZW50aWFsc1xuZXhwb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuL2NyZWRlbnRpYWxzJztcbmV4cG9ydCB7IEVtYWlsQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuL2NyZWRlbnRpYWxzL2VtYWlsJztcbmV4cG9ydCB7IE9BdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbHMvb2F1dGgnO1xuZXhwb3J0IHsgUGhvbmVBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbHMvcGhvbmUnO1xuXG4vLyBwZXJzaXN0ZW5jZVxuZXhwb3J0IHsgaW5NZW1vcnlQZXJzaXN0ZW5jZSB9IGZyb20gJy4vcGVyc2lzdGVuY2UvaW5fbWVtb3J5JztcblxuLy8gcHJvdmlkZXJzXG5leHBvcnQgeyBFbWFpbEF1dGhQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL2VtYWlsJztcbmV4cG9ydCB7IEZhY2Vib29rQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvZmFjZWJvb2snO1xuZXhwb3J0IHsgQ3VzdG9tUGFyYW1ldGVycyB9IGZyb20gJy4vcHJvdmlkZXJzL2ZlZGVyYXRlZCc7XG5leHBvcnQgeyBHb29nbGVBdXRoUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9nb29nbGUnO1xuZXhwb3J0IHsgR2l0aHViQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvZ2l0aHViJztcbmV4cG9ydCB7IE9BdXRoUHJvdmlkZXIsIE9BdXRoQ3JlZGVudGlhbE9wdGlvbnMgfSBmcm9tICcuL3Byb3ZpZGVycy9vYXV0aCc7XG5leHBvcnQgeyBTQU1MQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvc2FtbCc7XG5leHBvcnQgeyBUd2l0dGVyQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvdHdpdHRlcic7XG5cbi8vIHN0cmF0ZWdpZXNcbmV4cG9ydCB7IHNpZ25JbkFub255bW91c2x5IH0gZnJvbSAnLi9zdHJhdGVnaWVzL2Fub255bW91cyc7XG5leHBvcnQge1xuICBzaWduSW5XaXRoQ3JlZGVudGlhbCxcbiAgbGlua1dpdGhDcmVkZW50aWFsLFxuICByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsXG59IGZyb20gJy4vc3RyYXRlZ2llcy9jcmVkZW50aWFsJztcbmV4cG9ydCB7IHNpZ25JbldpdGhDdXN0b21Ub2tlbiB9IGZyb20gJy4vc3RyYXRlZ2llcy9jdXN0b21fdG9rZW4nO1xuZXhwb3J0IHtcbiAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbCxcbiAgY29uZmlybVBhc3N3b3JkUmVzZXQsXG4gIGFwcGx5QWN0aW9uQ29kZSxcbiAgY2hlY2tBY3Rpb25Db2RlLFxuICB2ZXJpZnlQYXNzd29yZFJlc2V0Q29kZSxcbiAgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkLFxuICBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZFxufSBmcm9tICcuL3N0cmF0ZWdpZXMvZW1haWxfYW5kX3Bhc3N3b3JkJztcbmV4cG9ydCB7XG4gIHNlbmRTaWduSW5MaW5rVG9FbWFpbCxcbiAgaXNTaWduSW5XaXRoRW1haWxMaW5rLFxuICBzaWduSW5XaXRoRW1haWxMaW5rXG59IGZyb20gJy4vc3RyYXRlZ2llcy9lbWFpbF9saW5rJztcbmV4cG9ydCB7XG4gIGZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsLFxuICBzZW5kRW1haWxWZXJpZmljYXRpb24sXG4gIHZlcmlmeUJlZm9yZVVwZGF0ZUVtYWlsXG59IGZyb20gJy4vc3RyYXRlZ2llcy9lbWFpbCc7XG5cbi8vIGNvcmVcbmV4cG9ydCB7IEFjdGlvbkNvZGVVUkwsIHBhcnNlQWN0aW9uQ29kZVVSTCB9IGZyb20gJy4vYWN0aW9uX2NvZGVfdXJsJztcblxuLy8gdXNlclxuZXhwb3J0IHtcbiAgdXBkYXRlUHJvZmlsZSxcbiAgdXBkYXRlRW1haWwsXG4gIHVwZGF0ZVBhc3N3b3JkXG59IGZyb20gJy4vdXNlci9hY2NvdW50X2luZm8nO1xuZXhwb3J0IHsgZ2V0SWRUb2tlbiwgZ2V0SWRUb2tlblJlc3VsdCB9IGZyb20gJy4vdXNlci9pZF90b2tlbl9yZXN1bHQnO1xuZXhwb3J0IHsgdW5saW5rIH0gZnJvbSAnLi91c2VyL2xpbmtfdW5saW5rJztcbmV4cG9ydCB7IGdldEFkZGl0aW9uYWxVc2VySW5mbyB9IGZyb20gJy4vdXNlci9hZGRpdGlvbmFsX3VzZXJfaW5mbyc7XG5cbi8vIE5vbi1vcHRpb25hbCB1c2VyIG1ldGhvZHMuXG5leHBvcnQgeyByZWxvYWQgfSBmcm9tICcuL3VzZXIvcmVsb2FkJztcbi8qKlxuICogRGVsZXRlcyBhbmQgc2lnbnMgb3V0IHRoZSB1c2VyLlxuICpcbiAqIEByZW1hcmtzXG4gKiBJbXBvcnRhbnQ6IHRoaXMgaXMgYSBzZWN1cml0eS1zZW5zaXRpdmUgb3BlcmF0aW9uIHRoYXQgcmVxdWlyZXMgdGhlIHVzZXIgdG8gaGF2ZSByZWNlbnRseVxuICogc2lnbmVkIGluLiBJZiB0aGlzIHJlcXVpcmVtZW50IGlzbid0IG1ldCwgYXNrIHRoZSB1c2VyIHRvIGF1dGhlbnRpY2F0ZSBhZ2FpbiBhbmQgdGhlbiBjYWxsXG4gKiB7QGxpbmsgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbH0uXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVVc2VyKHVzZXI6IFVzZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKS5kZWxldGUoKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IE11bHRpRmFjdG9yU2Vzc2lvbiB9IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIE11bHRpRmFjdG9yU2Vzc2lvblR5cGUge1xuICBFTlJPTEwgPSAnZW5yb2xsJyxcbiAgU0lHTl9JTiA9ICdzaWduaW4nXG59XG5cbmludGVyZmFjZSBTZXJpYWxpemVkTXVsdGlGYWN0b3JTZXNzaW9uIHtcbiAgbXVsdGlGYWN0b3JTZXNzaW9uOiB7XG4gICAgaWRUb2tlbj86IHN0cmluZztcbiAgICBwZW5kaW5nQ3JlZGVudGlhbD86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIE11bHRpRmFjdG9yU2Vzc2lvbkltcGwgaW1wbGVtZW50cyBNdWx0aUZhY3RvclNlc3Npb24ge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHR5cGU6IE11bHRpRmFjdG9yU2Vzc2lvblR5cGUsXG4gICAgcmVhZG9ubHkgY3JlZGVudGlhbDogc3RyaW5nLFxuICAgIHJlYWRvbmx5IGF1dGg/OiBBdXRoSW50ZXJuYWxcbiAgKSB7fVxuXG4gIHN0YXRpYyBfZnJvbUlkdG9rZW4oXG4gICAgaWRUb2tlbjogc3RyaW5nLFxuICAgIGF1dGg/OiBBdXRoSW50ZXJuYWxcbiAgKTogTXVsdGlGYWN0b3JTZXNzaW9uSW1wbCB7XG4gICAgcmV0dXJuIG5ldyBNdWx0aUZhY3RvclNlc3Npb25JbXBsKFxuICAgICAgTXVsdGlGYWN0b3JTZXNzaW9uVHlwZS5FTlJPTEwsXG4gICAgICBpZFRva2VuLFxuICAgICAgYXV0aFxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgX2Zyb21NZmFQZW5kaW5nQ3JlZGVudGlhbChcbiAgICBtZmFQZW5kaW5nQ3JlZGVudGlhbDogc3RyaW5nXG4gICk6IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwge1xuICAgIHJldHVybiBuZXcgTXVsdGlGYWN0b3JTZXNzaW9uSW1wbChcbiAgICAgIE11bHRpRmFjdG9yU2Vzc2lvblR5cGUuU0lHTl9JTixcbiAgICAgIG1mYVBlbmRpbmdDcmVkZW50aWFsXG4gICAgKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBTZXJpYWxpemVkTXVsdGlGYWN0b3JTZXNzaW9uIHtcbiAgICBjb25zdCBrZXkgPVxuICAgICAgdGhpcy50eXBlID09PSBNdWx0aUZhY3RvclNlc3Npb25UeXBlLkVOUk9MTFxuICAgICAgICA/ICdpZFRva2VuJ1xuICAgICAgICA6ICdwZW5kaW5nQ3JlZGVudGlhbCc7XG4gICAgcmV0dXJuIHtcbiAgICAgIG11bHRpRmFjdG9yU2Vzc2lvbjoge1xuICAgICAgICBba2V5XTogdGhpcy5jcmVkZW50aWFsXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSlNPTihcbiAgICBvYmo6IFBhcnRpYWw8U2VyaWFsaXplZE11bHRpRmFjdG9yU2Vzc2lvbj5cbiAgKTogTXVsdGlGYWN0b3JTZXNzaW9uSW1wbCB8IG51bGwge1xuICAgIGlmIChvYmo/Lm11bHRpRmFjdG9yU2Vzc2lvbikge1xuICAgICAgaWYgKG9iai5tdWx0aUZhY3RvclNlc3Npb24/LnBlbmRpbmdDcmVkZW50aWFsKSB7XG4gICAgICAgIHJldHVybiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLl9mcm9tTWZhUGVuZGluZ0NyZWRlbnRpYWwoXG4gICAgICAgICAgb2JqLm11bHRpRmFjdG9yU2Vzc2lvbi5wZW5kaW5nQ3JlZGVudGlhbFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChvYmoubXVsdGlGYWN0b3JTZXNzaW9uPy5pZFRva2VuKSB7XG4gICAgICAgIHJldHVybiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLl9mcm9tSWR0b2tlbihcbiAgICAgICAgICBvYmoubXVsdGlGYWN0b3JTZXNzaW9uLmlkVG9rZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEF1dGgsXG4gIE11bHRpRmFjdG9yUmVzb2x2ZXIsXG4gIFVzZXJDcmVkZW50aWFsLFxuICBNdWx0aUZhY3RvckVycm9yXG59IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uL2NvcmUvYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW1wbCB9IGZyb20gJy4uL2NvcmUvdXNlci91c2VyX2NyZWRlbnRpYWxfaW1wbCc7XG5pbXBvcnQgeyBfYXNzZXJ0LCBfZmFpbCB9IGZyb20gJy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsIH0gZnJvbSAnLi9tZmFfYXNzZXJ0aW9uJztcbmltcG9ydCB7IE11bHRpRmFjdG9yRXJyb3IgYXMgTXVsdGlGYWN0b3JFcnJvckludGVybmFsIH0gZnJvbSAnLi9tZmFfZXJyb3InO1xuaW1wb3J0IHsgTXVsdGlGYWN0b3JJbmZvSW1wbCB9IGZyb20gJy4vbWZhX2luZm8nO1xuaW1wb3J0IHsgTXVsdGlGYWN0b3JTZXNzaW9uSW1wbCB9IGZyb20gJy4vbWZhX3Nlc3Npb24nO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uL21vZGVsL2VudW1zJztcblxuZXhwb3J0IGNsYXNzIE11bHRpRmFjdG9yUmVzb2x2ZXJJbXBsIGltcGxlbWVudHMgTXVsdGlGYWN0b3JSZXNvbHZlciB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgc2Vzc2lvbjogTXVsdGlGYWN0b3JTZXNzaW9uSW1wbCxcbiAgICByZWFkb25seSBoaW50czogTXVsdGlGYWN0b3JJbmZvSW1wbFtdLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2lnbkluUmVzb2x2ZXI6IChcbiAgICAgIGFzc2VydGlvbjogTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsXG4gICAgKSA9PiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+XG4gICkge31cblxuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyBfZnJvbUVycm9yKFxuICAgIGF1dGhFeHRlcm46IEF1dGgsXG4gICAgZXJyb3I6IE11bHRpRmFjdG9yRXJyb3JJbnRlcm5hbFxuICApOiBNdWx0aUZhY3RvclJlc29sdmVySW1wbCB7XG4gICAgY29uc3QgYXV0aCA9IF9jYXN0QXV0aChhdXRoRXh0ZXJuKTtcbiAgICBjb25zdCBzZXJ2ZXJSZXNwb25zZSA9IGVycm9yLmN1c3RvbURhdGEuX3NlcnZlclJlc3BvbnNlO1xuICAgIGNvbnN0IGhpbnRzID0gKHNlcnZlclJlc3BvbnNlLm1mYUluZm8gfHwgW10pLm1hcChlbnJvbGxtZW50ID0+XG4gICAgICBNdWx0aUZhY3RvckluZm9JbXBsLl9mcm9tU2VydmVyUmVzcG9uc2UoYXV0aCwgZW5yb2xsbWVudClcbiAgICApO1xuXG4gICAgX2Fzc2VydChcbiAgICAgIHNlcnZlclJlc3BvbnNlLm1mYVBlbmRpbmdDcmVkZW50aWFsLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICApO1xuICAgIGNvbnN0IHNlc3Npb24gPSBNdWx0aUZhY3RvclNlc3Npb25JbXBsLl9mcm9tTWZhUGVuZGluZ0NyZWRlbnRpYWwoXG4gICAgICBzZXJ2ZXJSZXNwb25zZS5tZmFQZW5kaW5nQ3JlZGVudGlhbFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yUmVzb2x2ZXJJbXBsKFxuICAgICAgc2Vzc2lvbixcbiAgICAgIGhpbnRzLFxuICAgICAgYXN5bmMgKFxuICAgICAgICBhc3NlcnRpb246IE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbFxuICAgICAgKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsPiA9PiB7XG4gICAgICAgIGNvbnN0IG1mYVJlc3BvbnNlID0gYXdhaXQgYXNzZXJ0aW9uLl9wcm9jZXNzKGF1dGgsIHNlc3Npb24pO1xuICAgICAgICAvLyBDbGVhciBvdXQgdGhlIHVubmVlZGVkIGZpZWxkcyBmcm9tIHRoZSBvbGQgbG9naW4gcmVzcG9uc2VcbiAgICAgICAgZGVsZXRlIHNlcnZlclJlc3BvbnNlLm1mYUluZm87XG4gICAgICAgIGRlbGV0ZSBzZXJ2ZXJSZXNwb25zZS5tZmFQZW5kaW5nQ3JlZGVudGlhbDtcblxuICAgICAgICAvLyBVc2UgaW4gdGhlIG5ldyB0b2tlbiAmIHJlZnJlc2ggdG9rZW4gaW4gdGhlIG9sZCByZXNwb25zZVxuICAgICAgICBjb25zdCBpZFRva2VuUmVzcG9uc2UgPSB7XG4gICAgICAgICAgLi4uc2VydmVyUmVzcG9uc2UsXG4gICAgICAgICAgaWRUb2tlbjogbWZhUmVzcG9uc2UuaWRUb2tlbixcbiAgICAgICAgICByZWZyZXNoVG9rZW46IG1mYVJlc3BvbnNlLnJlZnJlc2hUb2tlblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCBjb2xsYXBzZSB0aGlzIHN3aXRjaCBzdGF0ZW1lbnQgaW50byBVc2VyQ3JlZGVudGlhbEltcGwuX2Zvck9wZXJhdGlvbiBhbmQgaGF2ZSBpdCBzdXBwb3J0IHRoZSBTSUdOX0lOIGNhc2VcbiAgICAgICAgc3dpdGNoIChlcnJvci5vcGVyYXRpb25UeXBlKSB7XG4gICAgICAgICAgY2FzZSBPcGVyYXRpb25UeXBlLlNJR05fSU46XG4gICAgICAgICAgICBjb25zdCB1c2VyQ3JlZGVudGlhbCA9XG4gICAgICAgICAgICAgIGF3YWl0IFVzZXJDcmVkZW50aWFsSW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgICAgICAgICAgICAgICBhdXRoLFxuICAgICAgICAgICAgICAgIGVycm9yLm9wZXJhdGlvblR5cGUsXG4gICAgICAgICAgICAgICAgaWRUb2tlblJlc3BvbnNlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBhd2FpdCBhdXRoLl91cGRhdGVDdXJyZW50VXNlcih1c2VyQ3JlZGVudGlhbC51c2VyKTtcbiAgICAgICAgICAgIHJldHVybiB1c2VyQ3JlZGVudGlhbDtcbiAgICAgICAgICBjYXNlIE9wZXJhdGlvblR5cGUuUkVBVVRIRU5USUNBVEU6XG4gICAgICAgICAgICBfYXNzZXJ0KGVycm9yLnVzZXIsIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgICAgICAgICAgcmV0dXJuIFVzZXJDcmVkZW50aWFsSW1wbC5fZm9yT3BlcmF0aW9uKFxuICAgICAgICAgICAgICBlcnJvci51c2VyLFxuICAgICAgICAgICAgICBlcnJvci5vcGVyYXRpb25UeXBlLFxuICAgICAgICAgICAgICBpZFRva2VuUmVzcG9uc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIF9mYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmVTaWduSW4oXG4gICAgYXNzZXJ0aW9uRXh0ZXJuOiBNdWx0aUZhY3RvckFzc2VydGlvbkltcGxcbiAgKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICAgIGNvbnN0IGFzc2VydGlvbiA9IGFzc2VydGlvbkV4dGVybiBhcyBNdWx0aUZhY3RvckFzc2VydGlvbkltcGw7XG4gICAgcmV0dXJuIHRoaXMuc2lnbkluUmVzb2x2ZXIoYXNzZXJ0aW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIFByb3ZpZGVzIGEge0BsaW5rIE11bHRpRmFjdG9yUmVzb2x2ZXJ9IHN1aXRhYmxlIGZvciBjb21wbGV0aW9uIG9mIGFcbiAqIG11bHRpLWZhY3RvciBmbG93LlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBlcnJvciAtIFRoZSB7QGxpbmsgTXVsdGlGYWN0b3JFcnJvcn0gcmFpc2VkIGR1cmluZyBhIHNpZ24taW4sIG9yXG4gKiByZWF1dGhlbnRpY2F0aW9uIG9wZXJhdGlvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNdWx0aUZhY3RvclJlc29sdmVyKFxuICBhdXRoOiBBdXRoLFxuICBlcnJvcjogTXVsdGlGYWN0b3JFcnJvclxuKTogTXVsdGlGYWN0b3JSZXNvbHZlciB7XG4gIGNvbnN0IGF1dGhNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpO1xuICBjb25zdCBlcnJvckludGVybmFsID0gZXJyb3IgYXMgTXVsdGlGYWN0b3JFcnJvckludGVybmFsO1xuICBfYXNzZXJ0KFxuICAgIGVycm9yLmN1c3RvbURhdGEub3BlcmF0aW9uVHlwZSxcbiAgICBhdXRoTW9kdWxhcixcbiAgICBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SXG4gICk7XG4gIF9hc3NlcnQoXG4gICAgZXJyb3JJbnRlcm5hbC5jdXN0b21EYXRhLl9zZXJ2ZXJSZXNwb25zZT8ubWZhUGVuZGluZ0NyZWRlbnRpYWwsXG4gICAgYXV0aE1vZHVsYXIsXG4gICAgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICApO1xuXG4gIHJldHVybiBNdWx0aUZhY3RvclJlc29sdmVySW1wbC5fZnJvbUVycm9yKGF1dGhNb2R1bGFyLCBlcnJvckludGVybmFsKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9wZXJmb3JtQXBpUmVxdWVzdFxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IH0gZnJvbSAnLi4vYXV0aGVudGljYXRpb24vc21zJztcbmltcG9ydCB7IEZpbmFsaXplTWZhUmVzcG9uc2UgfSBmcm9tICcuLi9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5cbi8qKlxuICogTUZBIEluZm8gYXMgcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAqL1xuaW50ZXJmYWNlIEJhc2VNZmFFbnJvbGxtZW50IHtcbiAgbWZhRW5yb2xsbWVudElkOiBzdHJpbmc7XG4gIGVucm9sbGVkQXQ6IG51bWJlcjtcbiAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQW4gTUZBIHByb3ZpZGVkIGJ5IFNNUyB2ZXJpZmljYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGhvbmVNZmFFbnJvbGxtZW50IGV4dGVuZHMgQmFzZU1mYUVucm9sbG1lbnQge1xuICBwaG9uZUluZm86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBNRkEgcHJvdmlkZWQgYnkgVE9UUCAoVGltZS1iYXNlZCBPbmUgVGltZSBQYXNzd29yZCkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVG90cE1mYUVucm9sbG1lbnQgZXh0ZW5kcyBCYXNlTWZhRW5yb2xsbWVudCB7fVxuXG4vKipcbiAqIE1mYUVucm9sbG1lbnQgY2FuIGJlIGFueSBzdWJ0eXBlIG9mIEJhc2VNZmFFbnJvbGxtZW50LCBjdXJyZW50bHkgb25seSBQaG9uZU1mYUVucm9sbG1lbnQgYW5kIFRvdHBNZmFFbnJvbGxtZW50IGFyZSBzdXBwb3J0ZWQuXG4gKi9cbmV4cG9ydCB0eXBlIE1mYUVucm9sbG1lbnQgPSBQaG9uZU1mYUVucm9sbG1lbnQgfCBUb3RwTWZhRW5yb2xsbWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBTdGFydFBob25lTWZhRW5yb2xsbWVudFJlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIHBob25lRW5yb2xsbWVudEluZm86IHtcbiAgICBwaG9uZU51bWJlcjogc3RyaW5nO1xuICAgIHJlY2FwdGNoYVRva2VuOiBzdHJpbmc7XG4gIH07XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXJ0UGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2Uge1xuICBwaG9uZVNlc3Npb25JbmZvOiB7XG4gICAgc2Vzc2lvbkluZm86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0RW5yb2xsUGhvbmVNZmEoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgcmVxdWVzdDogU3RhcnRQaG9uZU1mYUVucm9sbG1lbnRSZXF1ZXN0XG4pOiBQcm9taXNlPFN0YXJ0UGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBTdGFydFBob25lTWZhRW5yb2xsbWVudFJlcXVlc3QsXG4gICAgU3RhcnRQaG9uZU1mYUVucm9sbG1lbnRSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNUQVJUX01GQV9FTlJPTExNRU5ULFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmFsaXplUGhvbmVNZmFFbnJvbGxtZW50UmVxdWVzdCB7XG4gIGlkVG9rZW46IHN0cmluZztcbiAgcGhvbmVWZXJpZmljYXRpb25JbmZvOiBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0O1xuICBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmFsaXplUGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2VcbiAgZXh0ZW5kcyBGaW5hbGl6ZU1mYVJlc3BvbnNlIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5hbGl6ZUVucm9sbFBob25lTWZhKFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIHJlcXVlc3Q6IEZpbmFsaXplUGhvbmVNZmFFbnJvbGxtZW50UmVxdWVzdFxuKTogUHJvbWlzZTxGaW5hbGl6ZVBob25lTWZhRW5yb2xsbWVudFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8XG4gICAgRmluYWxpemVQaG9uZU1mYUVucm9sbG1lbnRSZXF1ZXN0LFxuICAgIEZpbmFsaXplUGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2VcbiAgPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5GSU5BTElaRV9NRkFfRU5ST0xMTUVOVCxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU3RhcnRUb3RwTWZhRW5yb2xsbWVudFJlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIHRvdHBFbnJvbGxtZW50SW5mbzoge307XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXJ0VG90cE1mYUVucm9sbG1lbnRSZXNwb25zZSB7XG4gIHRvdHBTZXNzaW9uSW5mbzoge1xuICAgIHNoYXJlZFNlY3JldEtleTogc3RyaW5nO1xuICAgIHZlcmlmaWNhdGlvbkNvZGVMZW5ndGg6IG51bWJlcjtcbiAgICBoYXNoaW5nQWxnb3JpdGhtOiBzdHJpbmc7XG4gICAgcGVyaW9kU2VjOiBudW1iZXI7XG4gICAgc2Vzc2lvbkluZm86IHN0cmluZztcbiAgICBmaW5hbGl6ZUVucm9sbG1lbnRUaW1lOiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEVucm9sbFRvdHBNZmEoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgcmVxdWVzdDogU3RhcnRUb3RwTWZhRW5yb2xsbWVudFJlcXVlc3Rcbik6IFByb21pc2U8U3RhcnRUb3RwTWZhRW5yb2xsbWVudFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8XG4gICAgU3RhcnRUb3RwTWZhRW5yb2xsbWVudFJlcXVlc3QsXG4gICAgU3RhcnRUb3RwTWZhRW5yb2xsbWVudFJlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU1RBUlRfTUZBX0VOUk9MTE1FTlQsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG90cFZlcmlmaWNhdGlvbkluZm8ge1xuICBzZXNzaW9uSW5mbzogc3RyaW5nO1xuICB2ZXJpZmljYXRpb25Db2RlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEZpbmFsaXplVG90cE1mYUVucm9sbG1lbnRSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICB0b3RwVmVyaWZpY2F0aW9uSW5mbzogVG90cFZlcmlmaWNhdGlvbkluZm87XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluYWxpemVUb3RwTWZhRW5yb2xsbWVudFJlc3BvbnNlXG4gIGV4dGVuZHMgRmluYWxpemVNZmFSZXNwb25zZSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gZmluYWxpemVFbnJvbGxUb3RwTWZhKFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIHJlcXVlc3Q6IEZpbmFsaXplVG90cE1mYUVucm9sbG1lbnRSZXF1ZXN0XG4pOiBQcm9taXNlPEZpbmFsaXplVG90cE1mYUVucm9sbG1lbnRSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFxuICAgIEZpbmFsaXplVG90cE1mYUVucm9sbG1lbnRSZXF1ZXN0LFxuICAgIEZpbmFsaXplVG90cE1mYUVucm9sbG1lbnRSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LkZJTkFMSVpFX01GQV9FTlJPTExNRU5ULFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpdGhkcmF3TWZhUmVxdWVzdCB7XG4gIGlkVG9rZW46IHN0cmluZztcbiAgbWZhRW5yb2xsbWVudElkOiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpdGhkcmF3TWZhUmVzcG9uc2UgZXh0ZW5kcyBGaW5hbGl6ZU1mYVJlc3BvbnNlIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoZHJhd01mYShcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICByZXF1ZXN0OiBXaXRoZHJhd01mYVJlcXVlc3Rcbik6IFByb21pc2U8V2l0aGRyYXdNZmFSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFdpdGhkcmF3TWZhUmVxdWVzdCwgV2l0aGRyYXdNZmFSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuV0lUSERSQVdfTUZBLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIE11bHRpRmFjdG9yQXNzZXJ0aW9uLFxuICBNdWx0aUZhY3RvckluZm8sXG4gIE11bHRpRmFjdG9yU2Vzc2lvbixcbiAgTXVsdGlGYWN0b3JVc2VyLFxuICBVc2VyXG59IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IHdpdGhkcmF3TWZhIH0gZnJvbSAnLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9tZmEnO1xuaW1wb3J0IHsgX2xvZ291dElmSW52YWxpZGF0ZWQgfSBmcm9tICcuLi9jb3JlL3VzZXIvaW52YWxpZGF0aW9uJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsIH0gZnJvbSAnLi9tZmFfYXNzZXJ0aW9uJztcbmltcG9ydCB7IE11bHRpRmFjdG9ySW5mb0ltcGwgfSBmcm9tICcuL21mYV9pbmZvJztcbmltcG9ydCB7IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwgfSBmcm9tICcuL21mYV9zZXNzaW9uJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuZXhwb3J0IGNsYXNzIE11bHRpRmFjdG9yVXNlckltcGwgaW1wbGVtZW50cyBNdWx0aUZhY3RvclVzZXIge1xuICBlbnJvbGxlZEZhY3RvcnM6IE11bHRpRmFjdG9ySW5mb1tdID0gW107XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihyZWFkb25seSB1c2VyOiBVc2VySW50ZXJuYWwpIHtcbiAgICB1c2VyLl9vblJlbG9hZCh1c2VySW5mbyA9PiB7XG4gICAgICBpZiAodXNlckluZm8ubWZhSW5mbykge1xuICAgICAgICB0aGlzLmVucm9sbGVkRmFjdG9ycyA9IHVzZXJJbmZvLm1mYUluZm8ubWFwKGVucm9sbG1lbnQgPT5cbiAgICAgICAgICBNdWx0aUZhY3RvckluZm9JbXBsLl9mcm9tU2VydmVyUmVzcG9uc2UodXNlci5hdXRoLCBlbnJvbGxtZW50KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIF9mcm9tVXNlcih1c2VyOiBVc2VySW50ZXJuYWwpOiBNdWx0aUZhY3RvclVzZXJJbXBsIHtcbiAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yVXNlckltcGwodXNlcik7XG4gIH1cblxuICBhc3luYyBnZXRTZXNzaW9uKCk6IFByb21pc2U8TXVsdGlGYWN0b3JTZXNzaW9uPiB7XG4gICAgcmV0dXJuIE11bHRpRmFjdG9yU2Vzc2lvbkltcGwuX2Zyb21JZHRva2VuKFxuICAgICAgYXdhaXQgdGhpcy51c2VyLmdldElkVG9rZW4oKSxcbiAgICAgIHRoaXMudXNlci5hdXRoXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGVucm9sbChcbiAgICBhc3NlcnRpb25FeHRlcm46IE11bHRpRmFjdG9yQXNzZXJ0aW9uLFxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBhc3NlcnRpb24gPSBhc3NlcnRpb25FeHRlcm4gYXMgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsO1xuICAgIGNvbnN0IHNlc3Npb24gPSAoYXdhaXQgdGhpcy5nZXRTZXNzaW9uKCkpIGFzIE11bHRpRmFjdG9yU2Vzc2lvbkltcGw7XG4gICAgY29uc3QgZmluYWxpemVNZmFSZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKFxuICAgICAgdGhpcy51c2VyLFxuICAgICAgYXNzZXJ0aW9uLl9wcm9jZXNzKHRoaXMudXNlci5hdXRoLCBzZXNzaW9uLCBkaXNwbGF5TmFtZSlcbiAgICApO1xuICAgIC8vIE5ldyB0b2tlbnMgd2lsbCBiZSBpc3N1ZWQgYWZ0ZXIgZW5yb2xsbWVudCBvZiB0aGUgbmV3IHNlY29uZCBmYWN0b3JzLlxuICAgIC8vIFRoZXkgbmVlZCB0byBiZSB1cGRhdGVkIG9uIHRoZSB1c2VyLlxuICAgIGF3YWl0IHRoaXMudXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkoZmluYWxpemVNZmFSZXNwb25zZSk7XG4gICAgLy8gVGhlIHVzZXIgbmVlZHMgdG8gYmUgcmVsb2FkZWQgdG8gZ2V0IHRoZSBuZXcgbXVsdGktZmFjdG9yIGluZm9ybWF0aW9uXG4gICAgLy8gZnJvbSBzZXJ2ZXIuIFVTRVJfUkVMT0FERUQgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQgYW5kIGBlbnJvbGxlZEZhY3RvcnNgXG4gICAgLy8gd2lsbCBiZSB1cGRhdGVkLlxuICAgIHJldHVybiB0aGlzLnVzZXIucmVsb2FkKCk7XG4gIH1cblxuICBhc3luYyB1bmVucm9sbChpbmZvT3JVaWQ6IE11bHRpRmFjdG9ySW5mbyB8IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG1mYUVucm9sbG1lbnRJZCA9XG4gICAgICB0eXBlb2YgaW5mb09yVWlkID09PSAnc3RyaW5nJyA/IGluZm9PclVpZCA6IGluZm9PclVpZC51aWQ7XG4gICAgY29uc3QgaWRUb2tlbiA9IGF3YWl0IHRoaXMudXNlci5nZXRJZFRva2VuKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGlkVG9rZW5SZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKFxuICAgICAgICB0aGlzLnVzZXIsXG4gICAgICAgIHdpdGhkcmF3TWZhKHRoaXMudXNlci5hdXRoLCB7XG4gICAgICAgICAgaWRUb2tlbixcbiAgICAgICAgICBtZmFFbnJvbGxtZW50SWRcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICAvLyBSZW1vdmUgdGhlIHNlY29uZCBmYWN0b3IgZnJvbSB0aGUgdXNlcidzIGxpc3QuXG4gICAgICB0aGlzLmVucm9sbGVkRmFjdG9ycyA9IHRoaXMuZW5yb2xsZWRGYWN0b3JzLmZpbHRlcihcbiAgICAgICAgKHsgdWlkIH0pID0+IHVpZCAhPT0gbWZhRW5yb2xsbWVudElkXG4gICAgICApO1xuICAgICAgLy8gRGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGJhY2tlbmQgZGVjaWRlZCB0byByZXZva2UgdGhlIHVzZXIncyBzZXNzaW9uLFxuICAgICAgLy8gdGhlIHRva2VuUmVzcG9uc2UgbWF5IGJlIGVtcHR5LiBJZiB0aGUgdG9rZW5zIHdlcmUgbm90IHVwZGF0ZWQgKGFuZCB0aGV5XG4gICAgICAvLyBhcmUgbm93IGludmFsaWQpLCByZWxvYWRpbmcgdGhlIHVzZXIgd2lsbCBkaXNjb3ZlciB0aGlzIGFuZCBpbnZhbGlkYXRlXG4gICAgICAvLyB0aGUgdXNlcidzIHN0YXRlIGFjY29yZGluZ2x5LlxuICAgICAgYXdhaXQgdGhpcy51c2VyLl91cGRhdGVUb2tlbnNJZk5lY2Vzc2FyeShpZFRva2VuUmVzcG9uc2UpO1xuICAgICAgYXdhaXQgdGhpcy51c2VyLnJlbG9hZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG11bHRpRmFjdG9yVXNlckNhY2hlID0gbmV3IFdlYWtNYXA8VXNlciwgTXVsdGlGYWN0b3JVc2VyPigpO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgTXVsdGlGYWN0b3JVc2VyfSBjb3JyZXNwb25kaW5nIHRvIHRoZSB1c2VyLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIGlzIHVzZWQgdG8gYWNjZXNzIGFsbCBtdWx0aS1mYWN0b3IgcHJvcGVydGllcyBhbmQgb3BlcmF0aW9ucyByZWxhdGVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlGYWN0b3IodXNlcjogVXNlcik6IE11bHRpRmFjdG9yVXNlciB7XG4gIGNvbnN0IHVzZXJNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xuICBpZiAoIW11bHRpRmFjdG9yVXNlckNhY2hlLmhhcyh1c2VyTW9kdWxhcikpIHtcbiAgICBtdWx0aUZhY3RvclVzZXJDYWNoZS5zZXQoXG4gICAgICB1c2VyTW9kdWxhcixcbiAgICAgIE11bHRpRmFjdG9yVXNlckltcGwuX2Zyb21Vc2VyKHVzZXJNb2R1bGFyIGFzIFVzZXJJbnRlcm5hbClcbiAgICApO1xuICB9XG4gIHJldHVybiBtdWx0aUZhY3RvclVzZXJDYWNoZS5nZXQodXNlck1vZHVsYXIpITtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBQZXJzaXN0ZW5jZSB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIFBlcnNpc3RlbmNlVHlwZSB7XG4gIFNFU1NJT04gPSAnU0VTU0lPTicsXG4gIExPQ0FMID0gJ0xPQ0FMJyxcbiAgTk9ORSA9ICdOT05FJ1xufVxuXG5leHBvcnQgdHlwZSBQZXJzaXN0ZWRCbG9iID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFudGlhdG9yPFQ+IHtcbiAgKGJsb2I6IFBlcnNpc3RlZEJsb2IpOiBUO1xufVxuXG5leHBvcnQgdHlwZSBQZXJzaXN0ZW5jZVZhbHVlID0gUGVyc2lzdGVkQmxvYiB8IHN0cmluZztcblxuZXhwb3J0IGNvbnN0IFNUT1JBR0VfQVZBSUxBQkxFX0tFWSA9ICdfX3Nhayc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmFnZUV2ZW50TGlzdGVuZXIge1xuICAodmFsdWU6IFBlcnNpc3RlbmNlVmFsdWUgfCBudWxsKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZXJzaXN0ZW5jZUludGVybmFsIGV4dGVuZHMgUGVyc2lzdGVuY2Uge1xuICB0eXBlOiBQZXJzaXN0ZW5jZVR5cGU7XG4gIF9pc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+O1xuICBfc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogUGVyc2lzdGVuY2VWYWx1ZSk6IFByb21pc2U8dm9pZD47XG4gIF9nZXQ8VCBleHRlbmRzIFBlcnNpc3RlbmNlVmFsdWU+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD47XG4gIF9yZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICBfYWRkTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQ7XG4gIF9yZW1vdmVMaXN0ZW5lcihrZXk6IHN0cmluZywgbGlzdGVuZXI6IFN0b3JhZ2VFdmVudExpc3RlbmVyKTogdm9pZDtcbiAgLy8gU2hvdWxkIHRoaXMgcGVyc2lzdGVuY2UgYWxsb3cgbWlncmF0aW9uIHVwIHRoZSBjaG9zZW4gaGllcmFyY2h5P1xuICBfc2hvdWxkQWxsb3dNaWdyYXRpb24/OiBib29sZWFuO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgUGVyc2lzdGVuY2VWYWx1ZSxcbiAgU1RPUkFHRV9BVkFJTEFCTEVfS0VZLFxuICBQZXJzaXN0ZW5jZVR5cGVcbn0gZnJvbSAnLi4vLi4vY29yZS9wZXJzaXN0ZW5jZSc7XG5cbi8vIFRoZXJlIGFyZSB0d28gZGlmZmVyZW50IGJyb3dzZXIgcGVyc2lzdGVuY2UgdHlwZXM6IGxvY2FsIGFuZCBzZXNzaW9uLlxuLy8gQm90aCBoYXZlIHRoZSBzYW1lIGltcGxlbWVudGF0aW9uIGJ1dCB1c2UgYSBkaWZmZXJlbnQgdW5kZXJseWluZyBzdG9yYWdlXG4vLyBvYmplY3QuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCcm93c2VyUGVyc2lzdGVuY2VDbGFzcyB7XG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc3RvcmFnZVJldHJpZXZlcjogKCkgPT4gU3RvcmFnZSxcbiAgICByZWFkb25seSB0eXBlOiBQZXJzaXN0ZW5jZVR5cGVcbiAgKSB7fVxuXG4gIF9pc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCF0aGlzLnN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0FWQUlMQUJMRV9LRVksICcxJyk7XG4gICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShTVE9SQUdFX0FWQUlMQUJMRV9LRVkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIF9nZXQ8VCBleHRlbmRzIFBlcnNpc3RlbmNlVmFsdWU+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuICAgIGNvbnN0IGpzb24gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoanNvbiA/IEpTT04ucGFyc2UoanNvbikgOiBudWxsKTtcbiAgfVxuXG4gIF9yZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgc3RvcmFnZSgpOiBTdG9yYWdlIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlUmV0cmlldmVyKCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBlcnNpc3RlbmNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgZ2V0VUEgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQge1xuICBfaXNTYWZhcmksXG4gIF9pc0lPUyxcbiAgX2lzSWZyYW1lLFxuICBfaXNNb2JpbGVCcm93c2VyLFxuICBfaXNJRTEwXG59IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9icm93c2VyJztcbmltcG9ydCB7XG4gIFBlcnNpc3RlbmNlSW50ZXJuYWwgYXMgSW50ZXJuYWxQZXJzaXN0ZW5jZSxcbiAgUGVyc2lzdGVuY2VUeXBlLFxuICBQZXJzaXN0ZW5jZVZhbHVlLFxuICBTdG9yYWdlRXZlbnRMaXN0ZW5lclxufSBmcm9tICcuLi8uLi9jb3JlL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7IEJyb3dzZXJQZXJzaXN0ZW5jZUNsYXNzIH0gZnJvbSAnLi9icm93c2VyJztcblxuZnVuY3Rpb24gX2lmcmFtZUNhbm5vdFN5bmNXZWJTdG9yYWdlKCk6IGJvb2xlYW4ge1xuICBjb25zdCB1YSA9IGdldFVBKCk7XG4gIHJldHVybiBfaXNTYWZhcmkodWEpIHx8IF9pc0lPUyh1YSk7XG59XG5cbi8vIFRoZSBwb2xsaW5nIHBlcmlvZCBpbiBjYXNlIGV2ZW50cyBhcmUgbm90IHN1cHBvcnRlZFxuZXhwb3J0IGNvbnN0IF9QT0xMSU5HX0lOVEVSVkFMX01TID0gMTAwMDtcblxuLy8gVGhlIElFIDEwIGxvY2FsU3RvcmFnZSBjcm9zcyB0YWIgc3luY2hyb25pemF0aW9uIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xuY29uc3QgSUUxMF9MT0NBTF9TVE9SQUdFX1NZTkNfREVMQVkgPSAxMDtcblxuY2xhc3MgQnJvd3NlckxvY2FsUGVyc2lzdGVuY2VcbiAgZXh0ZW5kcyBCcm93c2VyUGVyc2lzdGVuY2VDbGFzc1xuICBpbXBsZW1lbnRzIEludGVybmFsUGVyc2lzdGVuY2VcbntcbiAgc3RhdGljIHR5cGU6ICdMT0NBTCcgPSAnTE9DQUwnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCgpID0+IHdpbmRvdy5sb2NhbFN0b3JhZ2UsIFBlcnNpc3RlbmNlVHlwZS5MT0NBTCk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRvbmx5IGJvdW5kRXZlbnRIYW5kbGVyID0gKFxuICAgIGV2ZW50OiBTdG9yYWdlRXZlbnQsXG4gICAgcG9sbD86IGJvb2xlYW5cbiAgKTogdm9pZCA9PiB0aGlzLm9uU3RvcmFnZUV2ZW50KGV2ZW50LCBwb2xsKTtcbiAgcHJpdmF0ZSByZWFkb25seSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIFNldDxTdG9yYWdlRXZlbnRMaXN0ZW5lcj4+ID0ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxDYWNoZTogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVsbD4gPSB7fTtcbiAgLy8gc2V0VGltZW91dCByZXR1cm4gdmFsdWUgaXMgcGxhdGZvcm0gc3BlY2lmaWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcHJpdmF0ZSBwb2xsVGltZXI6IGFueSB8IG51bGwgPSBudWxsO1xuXG4gIC8vIFNhZmFyaSBvciBpT1MgYnJvd3NlciBhbmQgZW1iZWRkZWQgaW4gYW4gaWZyYW1lLlxuICBwcml2YXRlIHJlYWRvbmx5IHNhZmFyaUxvY2FsU3RvcmFnZU5vdFN5bmNlZCA9XG4gICAgX2lmcmFtZUNhbm5vdFN5bmNXZWJTdG9yYWdlKCkgJiYgX2lzSWZyYW1lKCk7XG4gIC8vIFdoZXRoZXIgdG8gdXNlIHBvbGxpbmcgaW5zdGVhZCBvZiBkZXBlbmRpbmcgb24gd2luZG93IGV2ZW50c1xuICBwcml2YXRlIHJlYWRvbmx5IGZhbGxiYWNrVG9Qb2xsaW5nID0gX2lzTW9iaWxlQnJvd3NlcigpO1xuICByZWFkb25seSBfc2hvdWxkQWxsb3dNaWdyYXRpb24gPSB0cnVlO1xuXG4gIHByaXZhdGUgZm9yQWxsQ2hhbmdlZEtleXMoXG4gICAgY2I6IChrZXk6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZyB8IG51bGwsIG5ld1ZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIC8vIENoZWNrIGFsbCBrZXlzIHdpdGggbGlzdGVuZXJzIG9uIHRoZW0uXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpKSB7XG4gICAgICAvLyBHZXQgdmFsdWUgZnJvbSBsb2NhbFN0b3JhZ2UuXG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMubG9jYWxDYWNoZVtrZXldO1xuICAgICAgLy8gSWYgbG9jYWwgbWFwIHZhbHVlIGRvZXMgbm90IG1hdGNoLCB0cmlnZ2VyIGxpc3RlbmVyIHdpdGggc3RvcmFnZSBldmVudC5cbiAgICAgIC8vIERpZmZlcmVudGlhdGUgdGhpcyBzaW11bGF0ZWQgZXZlbnQgZnJvbSB0aGUgcmVhbCBzdG9yYWdlIGV2ZW50LlxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICBjYihrZXksIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblN0b3JhZ2VFdmVudChldmVudDogU3RvcmFnZUV2ZW50LCBwb2xsID0gZmFsc2UpOiB2b2lkIHtcbiAgICAvLyBLZXkgd291bGQgYmUgbnVsbCBpbiBzb21lIHNpdHVhdGlvbnMsIGxpa2Ugd2hlbiBsb2NhbFN0b3JhZ2UgaXMgY2xlYXJlZFxuICAgIGlmICghZXZlbnQua2V5KSB7XG4gICAgICB0aGlzLmZvckFsbENoYW5nZWRLZXlzKFxuICAgICAgICAoa2V5OiBzdHJpbmcsIF9vbGRWYWx1ZTogc3RyaW5nIHwgbnVsbCwgbmV3VmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XG5cbiAgICAvLyBDaGVjayB0aGUgbWVjaGFuaXNtIGhvdyB0aGlzIGV2ZW50IHdhcyBkZXRlY3RlZC5cbiAgICAvLyBUaGUgZmlyc3QgZXZlbnQgd2lsbCBkaWN0YXRlIHRoZSBtZWNoYW5pc20gdG8gYmUgdXNlZC5cbiAgICBpZiAocG9sbCkge1xuICAgICAgLy8gRW52aXJvbm1lbnQgZGV0ZWN0cyBzdG9yYWdlIGNoYW5nZXMgdmlhIHBvbGxpbmcuXG4gICAgICAvLyBSZW1vdmUgc3RvcmFnZSBldmVudCBsaXN0ZW5lciB0byBwcmV2ZW50IHBvc3NpYmxlIGV2ZW50IGR1cGxpY2F0aW9uLlxuICAgICAgdGhpcy5kZXRhY2hMaXN0ZW5lcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbnZpcm9ubWVudCBkZXRlY3RzIHN0b3JhZ2UgY2hhbmdlcyB2aWEgc3RvcmFnZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIC8vIFJlbW92ZSBwb2xsaW5nIGxpc3RlbmVyIHRvIHByZXZlbnQgcG9zc2libGUgZXZlbnQgZHVwbGljYXRpb24uXG4gICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgfVxuXG4gICAgLy8gU2FmYXJpIGVtYmVkZGVkIGlmcmFtZS4gU3RvcmFnZSBldmVudCB3aWxsIHRyaWdnZXIgd2l0aCB0aGUgZGVsdGFcbiAgICAvLyBjaGFuZ2VzIGJ1dCBubyBjaGFuZ2VzIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgaWZyYW1lIGxvY2FsU3RvcmFnZS5cbiAgICBpZiAodGhpcy5zYWZhcmlMb2NhbFN0b3JhZ2VOb3RTeW5jZWQpIHtcbiAgICAgIC8vIEdldCBjdXJyZW50IGlmcmFtZSBwYWdlIHZhbHVlLlxuICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgLy8gVmFsdWUgbm90IHN5bmNocm9uaXplZCwgc3luY2hyb25pemUgbWFudWFsbHkuXG4gICAgICBpZiAoZXZlbnQubmV3VmFsdWUgIT09IHN0b3JlZFZhbHVlKSB7XG4gICAgICAgIGlmIChldmVudC5uZXdWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFZhbHVlIGNoYW5nZWQgZnJvbSBjdXJyZW50IHZhbHVlLlxuICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKGtleSwgZXZlbnQubmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEN1cnJlbnQgdmFsdWUgZGVsZXRlZC5cbiAgICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubG9jYWxDYWNoZVtrZXldID09PSBldmVudC5uZXdWYWx1ZSAmJiAhcG9sbCkge1xuICAgICAgICAvLyBBbHJlYWR5IGRldGVjdGVkIGFuZCBwcm9jZXNzZWQsIGRvIG5vdCB0cmlnZ2VyIGxpc3RlbmVycyBhZ2Fpbi5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRyaWdnZXJMaXN0ZW5lcnMgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyBLZWVwIGxvY2FsIG1hcCB1cCB0byBkYXRlIGluIGNhc2Ugc3RvcmFnZSBldmVudCBpcyB0cmlnZ2VyZWQgYmVmb3JlXG4gICAgICAvLyBwb2xsLlxuICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKCFwb2xsICYmIHRoaXMubG9jYWxDYWNoZVtrZXldID09PSBzdG9yZWRWYWx1ZSkge1xuICAgICAgICAvLyBSZWFsIHN0b3JhZ2UgZXZlbnQgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBkZXRlY3RlZCwgZG8gbm90aGluZy5cbiAgICAgICAgLy8gVGhpcyBzZWVtcyB0byB0cmlnZ2VyIGluIHNvbWUgSUUgYnJvd3NlcnMgZm9yIHNvbWUgcmVhc29uLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhrZXksIHN0b3JlZFZhbHVlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIGlmIChcbiAgICAgIF9pc0lFMTAoKSAmJlxuICAgICAgc3RvcmVkVmFsdWUgIT09IGV2ZW50Lm5ld1ZhbHVlICYmXG4gICAgICBldmVudC5uZXdWYWx1ZSAhPT0gZXZlbnQub2xkVmFsdWVcbiAgICApIHtcbiAgICAgIC8vIElFIDEwIGhhcyB0aGlzIHdlaXJkIGJ1ZyB3aGVyZSBhIHN0b3JhZ2UgZXZlbnQgd291bGQgdHJpZ2dlciB3aXRoIHRoZVxuICAgICAgLy8gY29ycmVjdCBrZXksIG9sZFZhbHVlIGFuZCBuZXdWYWx1ZSBidXQgbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSBkb2VzXG4gICAgICAvLyBub3QgeWllbGQgdGhlIHVwZGF0ZWQgdmFsdWUgdW50aWwgYSBmZXcgbWlsbGlzZWNvbmRzLiBUaGlzIGVuc3VyZXNcbiAgICAgIC8vIHRoaXMgcmVjb3ZlcnMgZnJvbSB0aGF0IHNpdHVhdGlvbi5cbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlckxpc3RlbmVycywgSUUxMF9MT0NBTF9TVE9SQUdFX1NZTkNfREVMQVkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmlnZ2VyTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBub3RpZnlMaXN0ZW5lcnMoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgQXJyYXkuZnJvbShsaXN0ZW5lcnMpKSB7XG4gICAgICAgIGxpc3RlbmVyKHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFBvbGxpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9wUG9sbGluZygpO1xuXG4gICAgdGhpcy5wb2xsVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmZvckFsbENoYW5nZWRLZXlzKFxuICAgICAgICAoa2V5OiBzdHJpbmcsIG9sZFZhbHVlOiBzdHJpbmcgfCBudWxsLCBuZXdWYWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgICAgICAgIHRoaXMub25TdG9yYWdlRXZlbnQoXG4gICAgICAgICAgICBuZXcgU3RvcmFnZUV2ZW50KCdzdG9yYWdlJywge1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIG9sZFZhbHVlLFxuICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvKiBwb2xsICovIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0sIF9QT0xMSU5HX0lOVEVSVkFMX01TKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RvcFBvbGxpbmcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucG9sbFRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucG9sbFRpbWVyKTtcbiAgICAgIHRoaXMucG9sbFRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaExpc3RlbmVyKCk6IHZvaWQge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy5ib3VuZEV2ZW50SGFuZGxlcik7XG4gIH1cblxuICBwcml2YXRlIGRldGFjaExpc3RlbmVyKCk6IHZvaWQge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy5ib3VuZEV2ZW50SGFuZGxlcik7XG4gIH1cblxuICBfYWRkTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBXaGV0aGVyIGJyb3dzZXIgY2FuIGRldGVjdCBzdG9yYWdlIGV2ZW50IHdoZW4gaXQgaGFkIGFscmVhZHkgYmVlbiBwdXNoZWQgdG8gdGhlIGJhY2tncm91bmQuXG4gICAgICAvLyBUaGlzIG1heSBoYXBwZW4gaW4gc29tZSBtb2JpbGUgYnJvd3NlcnMuIEEgbG9jYWxTdG9yYWdlIGNoYW5nZSBpbiB0aGUgZm9yZWdyb3VuZCB3aW5kb3dcbiAgICAgIC8vIHdpbGwgbm90IGJlIGRldGVjdGVkIGluIHRoZSBiYWNrZ3JvdW5kIHdpbmRvdyB2aWEgdGhlIHN0b3JhZ2UgZXZlbnQuXG4gICAgICAvLyBUaGlzIHdhcyBkZXRlY3RlZCBpbiBpT1MgNy54IG1vYmlsZSBicm93c2Vyc1xuICAgICAgaWYgKHRoaXMuZmFsbGJhY2tUb1BvbGxpbmcpIHtcbiAgICAgICAgdGhpcy5zdGFydFBvbGxpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXR0YWNoTGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1trZXldID0gbmV3IFNldCgpO1xuICAgICAgLy8gUG9wdWxhdGUgdGhlIGNhY2hlIHRvIGF2b2lkIHNwdXJpb3VzbHkgdHJpZ2dlcmluZyBvbiBmaXJzdCBwb2xsLlxuICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVyc1trZXldLmFkZChsaXN0ZW5lcik7XG4gIH1cblxuICBfcmVtb3ZlTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1trZXldLmRlbGV0ZShsaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldLnNpemUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZGV0YWNoTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgbG9jYWwgY2FjaGUgb24gYmFzZSBvcGVyYXRpb25zOlxuXG4gIGFzeW5jIF9zZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgc3VwZXIuX3NldChrZXksIHZhbHVlKTtcbiAgICB0aGlzLmxvY2FsQ2FjaGVba2V5XSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuXG4gIGFzeW5jIF9nZXQ8VCBleHRlbmRzIFBlcnNpc3RlbmNlVmFsdWU+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgc3VwZXIuX2dldDxUPihrZXkpO1xuICAgIHRoaXMubG9jYWxDYWNoZVtrZXldID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGFzeW5jIF9yZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBzdXBlci5fcmVtb3ZlKGtleSk7XG4gICAgZGVsZXRlIHRoaXMubG9jYWxDYWNoZVtrZXldO1xuICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlfSBvZiB0eXBlIGBMT0NBTGAgdXNpbmcgYGxvY2FsU3RvcmFnZWBcbiAqIGZvciB0aGUgdW5kZXJseWluZyBzdG9yYWdlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlOiBQZXJzaXN0ZW5jZSA9IEJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGVyc2lzdGVuY2UgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQge1xuICBQZXJzaXN0ZW5jZUludGVybmFsIGFzIEludGVybmFsUGVyc2lzdGVuY2UsXG4gIFBlcnNpc3RlbmNlVHlwZSxcbiAgU3RvcmFnZUV2ZW50TGlzdGVuZXJcbn0gZnJvbSAnLi4vLi4vY29yZS9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBCcm93c2VyUGVyc2lzdGVuY2VDbGFzcyB9IGZyb20gJy4vYnJvd3Nlcic7XG5cbmNsYXNzIEJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2VcbiAgZXh0ZW5kcyBCcm93c2VyUGVyc2lzdGVuY2VDbGFzc1xuICBpbXBsZW1lbnRzIEludGVybmFsUGVyc2lzdGVuY2VcbntcbiAgc3RhdGljIHR5cGU6ICdTRVNTSU9OJyA9ICdTRVNTSU9OJztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigoKSA9PiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UsIFBlcnNpc3RlbmNlVHlwZS5TRVNTSU9OKTtcbiAgfVxuXG4gIF9hZGRMaXN0ZW5lcihfa2V5OiBzdHJpbmcsIF9saXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICAvLyBMaXN0ZW5lcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIHNlc3Npb24gc3RvcmFnZSBzaW5jZSBpdCBjYW5ub3QgYmUgc2hhcmVkIGFjcm9zcyB3aW5kb3dzXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3JlbW92ZUxpc3RlbmVyKF9rZXk6IHN0cmluZywgX2xpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIC8vIExpc3RlbmVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3Igc2Vzc2lvbiBzdG9yYWdlIHNpbmNlIGl0IGNhbm5vdCBiZSBzaGFyZWQgYWNyb3NzIHdpbmRvd3NcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgUGVyc2lzdGVuY2V9IG9mIGBTRVNTSU9OYCB1c2luZyBgc2Vzc2lvblN0b3JhZ2VgXG4gKiBmb3IgdGhlIHVuZGVybHlpbmcgc3RvcmFnZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBicm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlOiBQZXJzaXN0ZW5jZSA9IEJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2U7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiogVE9ETzogcmVtb3ZlIHRoaXMgb25jZSB0c2xpYiBoYXMgYSBwb2x5ZmlsbCBmb3IgUHJvbWlzZS5hbGxTZXR0bGVkICovXG5pbnRlcmZhY2UgUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxUPiB7XG4gIGZ1bGZpbGxlZDogdHJ1ZTtcbiAgdmFsdWU6IFQ7XG59XG5cbmludGVyZmFjZSBQcm9taXNlUmVqZWN0ZWRSZXN1bHQge1xuICBmdWxmaWxsZWQ6IGZhbHNlO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZWFzb246IGFueTtcbn1cblxuZXhwb3J0IHR5cGUgUHJvbWlzZVNldHRsZWRSZXN1bHQ8VD4gPVxuICB8IFByb21pc2VGdWxmaWxsZWRSZXN1bHQ8VD5cbiAgfCBQcm9taXNlUmVqZWN0ZWRSZXN1bHQ7XG5cbi8qKlxuICogU2hpbSBmb3IgUHJvbWlzZS5hbGxTZXR0bGVkLCBub3RlIHRoZSBzbGlnaHRseSBkaWZmZXJlbnQgZm9ybWF0IG9mIGBmdWxmaWxsZWRgIHZzIGBzdGF0dXNgLlxuICpcbiAqIEBwYXJhbSBwcm9taXNlcyAtIEFycmF5IG9mIHByb21pc2VzIHRvIHdhaXQgb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfYWxsU2V0dGxlZDxUPihcbiAgcHJvbWlzZXM6IEFycmF5PFByb21pc2U8VD4+XG4pOiBQcm9taXNlPEFycmF5PFByb21pc2VTZXR0bGVkUmVzdWx0PFQ+Pj4ge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgcHJvbWlzZXMubWFwKGFzeW5jIHByb21pc2UgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwcm9taXNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZ1bGZpbGxlZDogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9IGFzIFByb21pc2VGdWxmaWxsZWRSZXN1bHQ8VD47XG4gICAgICB9IGNhdGNoIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmdWxmaWxsZWQ6IGZhbHNlLFxuICAgICAgICAgIHJlYXNvblxuICAgICAgICB9IGFzIFByb21pc2VSZWplY3RlZFJlc3VsdDtcbiAgICAgIH1cbiAgICB9KVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgUmVjZWl2ZXJIYW5kbGVyLFxuICBfRXZlbnRUeXBlLFxuICBfUmVjZWl2ZXJSZXNwb25zZSxcbiAgU2VuZGVyTWVzc2FnZUV2ZW50LFxuICBfU3RhdHVzLFxuICBfU2VuZGVyUmVxdWVzdFxufSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IF9hbGxTZXR0bGVkIH0gZnJvbSAnLi9wcm9taXNlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgY2xhc3MgZm9yIHJlY2VpdmluZyBtZXNzYWdlcy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWNlaXZlciB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHJlY2VpdmVyczogUmVjZWl2ZXJbXSA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IGJvdW5kRXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlcnNNYXA6IHtcbiAgICAvLyBUeXBlc2NyaXB0IGRvZXNuJ3QgaGF2ZSBleGlzdGVudGlhbCB0eXBlcyA6KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgW2V2ZW50VHlwZTogc3RyaW5nXTogU2V0PFJlY2VpdmVySGFuZGxlcjxhbnksIGFueT4+O1xuICB9ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBldmVudFRhcmdldDogRXZlbnRUYXJnZXQpIHtcbiAgICB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyID0gdGhpcy5oYW5kbGVFdmVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbiBhbiBpbnN0YW5jZSBvZiBhIFJlY2VpdmVyIGZvciBhIGdpdmVuIGV2ZW50IHRhcmdldCwgaWYgbm9uZSBleGlzdHMgaXQgd2lsbCBiZSBjcmVhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRUYXJnZXQgLSBBbiBldmVudCB0YXJnZXQgKHN1Y2ggYXMgd2luZG93IG9yIHNlbGYpIHRocm91Z2ggd2hpY2ggdGhlIHVuZGVybHlpbmdcbiAgICogbWVzc2FnZXMgd2lsbCBiZSByZWNlaXZlZC5cbiAgICovXG4gIHN0YXRpYyBfZ2V0SW5zdGFuY2UoZXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0KTogUmVjZWl2ZXIge1xuICAgIC8vIFRoZSByZXN1bHRzIGFyZSBzdG9yZWQgaW4gYW4gYXJyYXkgc2luY2Ugb2JqZWN0cyBjYW4ndCBiZSBrZXlzIGZvciBvdGhlclxuICAgIC8vIG9iamVjdHMuIEluIGFkZGl0aW9uLCBzZXR0aW5nIGEgdW5pcXVlIHByb3BlcnR5IG9uIGFuIGV2ZW50IHRhcmdldCBhcyBhXG4gICAgLy8gaGFzaCBtYXAga2V5IG1heSBub3QgYmUgYWxsb3dlZCBkdWUgdG8gQ09SUyByZXN0cmljdGlvbnMuXG4gICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMucmVjZWl2ZXJzLmZpbmQocmVjZWl2ZXIgPT5cbiAgICAgIHJlY2VpdmVyLmlzTGlzdGVuaW5ndG8oZXZlbnRUYXJnZXQpXG4gICAgKTtcbiAgICBpZiAoZXhpc3RpbmdJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nSW5zdGFuY2U7XG4gICAgfVxuICAgIGNvbnN0IG5ld0luc3RhbmNlID0gbmV3IFJlY2VpdmVyKGV2ZW50VGFyZ2V0KTtcbiAgICB0aGlzLnJlY2VpdmVycy5wdXNoKG5ld0luc3RhbmNlKTtcbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH1cblxuICBwcml2YXRlIGlzTGlzdGVuaW5ndG8oZXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRUYXJnZXQgPT09IGV2ZW50VGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZhbnMgb3V0IGEgTWVzc2FnZUV2ZW50IHRvIHRoZSBhcHByb3ByaWF0ZSBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFNlbmRzIGFuIHtAbGluayBTdGF0dXMuQUNLfSB1cG9uIHJlY2VpcHQgYW5kIGEge0BsaW5rIFN0YXR1cy5ET05FfSBvbmNlIGFsbCBoYW5kbGVycyBoYXZlXG4gICAqIGZpbmlzaGVkIHByb2Nlc3NpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCAtIFRoZSBNZXNzYWdlRXZlbnQuXG4gICAqXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZUV2ZW50PFxuICAgIFQgZXh0ZW5kcyBfUmVjZWl2ZXJSZXNwb25zZSxcbiAgICBTIGV4dGVuZHMgX1NlbmRlclJlcXVlc3RcbiAgPihldmVudDogRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBtZXNzYWdlRXZlbnQgPSBldmVudCBhcyBNZXNzYWdlRXZlbnQ8U2VuZGVyTWVzc2FnZUV2ZW50PFM+PjtcbiAgICBjb25zdCB7IGV2ZW50SWQsIGV2ZW50VHlwZSwgZGF0YSB9ID0gbWVzc2FnZUV2ZW50LmRhdGE7XG5cbiAgICBjb25zdCBoYW5kbGVyczogU2V0PFJlY2VpdmVySGFuZGxlcjxULCBTPj4gfCB1bmRlZmluZWQgPVxuICAgICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xuICAgIGlmICghaGFuZGxlcnM/LnNpemUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtZXNzYWdlRXZlbnQucG9ydHNbMF0ucG9zdE1lc3NhZ2Uoe1xuICAgICAgc3RhdHVzOiBfU3RhdHVzLkFDSyxcbiAgICAgIGV2ZW50SWQsXG4gICAgICBldmVudFR5cGVcbiAgICB9KTtcblxuICAgIGNvbnN0IHByb21pc2VzID0gQXJyYXkuZnJvbShoYW5kbGVycykubWFwKGFzeW5jIGhhbmRsZXIgPT5cbiAgICAgIGhhbmRsZXIobWVzc2FnZUV2ZW50Lm9yaWdpbiwgZGF0YSlcbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2FsbFNldHRsZWQocHJvbWlzZXMpO1xuICAgIG1lc3NhZ2VFdmVudC5wb3J0c1swXS5wb3N0TWVzc2FnZSh7XG4gICAgICBzdGF0dXM6IF9TdGF0dXMuRE9ORSxcbiAgICAgIGV2ZW50SWQsXG4gICAgICBldmVudFR5cGUsXG4gICAgICByZXNwb25zZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSBhbiBldmVudCBoYW5kbGVyIGZvciBhIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudFR5cGUgLSBFdmVudCBuYW1lIHRvIHN1YnNjcmliZSB0by5cbiAgICogQHBhcmFtIGV2ZW50SGFuZGxlciAtIFRoZSBldmVudCBoYW5kbGVyIHdoaWNoIHNob3VsZCByZWNlaXZlIHRoZSBldmVudHMuXG4gICAqXG4gICAqL1xuICBfc3Vic2NyaWJlPFQgZXh0ZW5kcyBfUmVjZWl2ZXJSZXNwb25zZSwgUyBleHRlbmRzIF9TZW5kZXJSZXF1ZXN0PihcbiAgICBldmVudFR5cGU6IF9FdmVudFR5cGUsXG4gICAgZXZlbnRIYW5kbGVyOiBSZWNlaXZlckhhbmRsZXI8VCwgUz5cbiAgKTogdm9pZCB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuaGFuZGxlcnNNYXApLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5ldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5ib3VuZEV2ZW50SGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXSA9IG5ldyBTZXQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0uYWRkKGV2ZW50SGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgYW4gZXZlbnQgaGFuZGxlciBmcm9tIGEgcGFydGljdWxhciBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50VHlwZSAtIEV2ZW50IG5hbWUgdG8gdW5zdWJzY3JpYmUgZnJvbS5cbiAgICogQHBhcmFtIGV2ZW50SGFuZGxlciAtIE9wdGlub2FsIGV2ZW50IGhhbmRsZXIsIGlmIG5vbmUgcHJvdmlkZWQsIHVuc3Vic2NyaWJlIGFsbCBoYW5kbGVycyBvbiB0aGlzIGV2ZW50LlxuICAgKlxuICAgKi9cbiAgX3Vuc3Vic2NyaWJlPFQgZXh0ZW5kcyBfUmVjZWl2ZXJSZXNwb25zZSwgUyBleHRlbmRzIF9TZW5kZXJSZXF1ZXN0PihcbiAgICBldmVudFR5cGU6IF9FdmVudFR5cGUsXG4gICAgZXZlbnRIYW5kbGVyPzogUmVjZWl2ZXJIYW5kbGVyPFQsIFM+XG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0gJiYgZXZlbnRIYW5kbGVyKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0uZGVsZXRlKGV2ZW50SGFuZGxlcik7XG4gICAgfVxuICAgIGlmICghZXZlbnRIYW5kbGVyIHx8IHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXS5zaXplID09PSAwKSB7XG4gICAgICBkZWxldGUgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdO1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmhhbmRsZXJzTWFwKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9nZW5lcmF0ZUV2ZW50SWQocHJlZml4ID0gJycsIGRpZ2l0cyA9IDEwKTogc3RyaW5nIHtcbiAgbGV0IHJhbmRvbSA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZ2l0czsgaSsrKSB7XG4gICAgcmFuZG9tICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgfVxuICByZXR1cm4gcHJlZml4ICsgcmFuZG9tO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgX2dlbmVyYXRlRXZlbnRJZCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9ldmVudF9pZCc7XG5pbXBvcnQge1xuICBfU2VuZGVyUmVxdWVzdCxcbiAgX0V2ZW50VHlwZSxcbiAgUmVjZWl2ZXJNZXNzYWdlRXZlbnQsXG4gIF9NZXNzYWdlRXJyb3IsXG4gIFNlbmRlck1lc3NhZ2VFdmVudCxcbiAgX1N0YXR1cyxcbiAgX1JlY2VpdmVyTWVzc2FnZVJlc3BvbnNlLFxuICBfUmVjZWl2ZXJSZXNwb25zZSxcbiAgX1RpbWVvdXREdXJhdGlvblxufSBmcm9tICcuL2luZGV4JztcblxuaW50ZXJmYWNlIE1lc3NhZ2VIYW5kbGVyIHtcbiAgbWVzc2FnZUNoYW5uZWw6IE1lc3NhZ2VDaGFubmVsO1xuICBvbk1lc3NhZ2U6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBzZW5kaW5nIG1lc3NhZ2VzIGFuZCB3YWl0aW5nIGZvciBhIGNvbXBsZXRpb24gcmVzcG9uc2UuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgU2VuZGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVycyA9IG5ldyBTZXQ8TWVzc2FnZUhhbmRsZXI+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0YXJnZXQ6IFNlcnZpY2VXb3JrZXIpIHt9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIHRoZSBoYW5kbGVyIGFuZCByZW1vdmUgaXQgZnJvbSBvdXIgdHJhY2tpbmcgU2V0LlxuICAgKlxuICAgKiBAcGFyYW0gaGFuZGxlciAtIFRoZSBoYW5kbGVyIHRvIHVuc3Vic2NyaWJlLlxuICAgKi9cbiAgcHJpdmF0ZSByZW1vdmVNZXNzYWdlSGFuZGxlcihoYW5kbGVyOiBNZXNzYWdlSGFuZGxlcik6IHZvaWQge1xuICAgIGlmIChoYW5kbGVyLm1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICBoYW5kbGVyLm1lc3NhZ2VDaGFubmVsLnBvcnQxLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdtZXNzYWdlJyxcbiAgICAgICAgaGFuZGxlci5vbk1lc3NhZ2VcbiAgICAgICk7XG4gICAgICBoYW5kbGVyLm1lc3NhZ2VDaGFubmVsLnBvcnQxLmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlcnMuZGVsZXRlKGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBSZWNlaXZlciBsb2NhdGVkIGF0IHtAbGluayB0YXJnZXR9LlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBXZSdsbCBmaXJzdCB3YWl0IGEgYml0IGZvciBhbiBBQ0sgLCBpZiB3ZSBnZXQgb25lIHdlIHdpbGwgd2FpdCBzaWduaWZpY2FudGx5IGxvbmdlciB1bnRpbCB0aGVcbiAgICogcmVjZWl2ZXIgaGFzIGhhZCBhIGNoYW5jZSB0byBmdWxseSBwcm9jZXNzIHRoZSBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50VHlwZSAtIFR5cGUgb2YgZXZlbnQgdG8gc2VuZC5cbiAgICogQHBhcmFtIGRhdGEgLSBUaGUgcGF5bG9hZCBvZiB0aGUgZXZlbnQuXG4gICAqIEBwYXJhbSB0aW1lb3V0IC0gVGltZW91dCBmb3Igd2FpdGluZyBvbiBhbiBBQ0sgZnJvbSB0aGUgcmVjZWl2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHNldHRsZWQgcHJvbWlzZXMgZnJvbSBhbGwgdGhlIGhhbmRsZXJzIHRoYXQgd2VyZSBsaXN0ZW5pbmcgb24gdGhlIHJlY2VpdmVyLlxuICAgKi9cbiAgYXN5bmMgX3NlbmQ8VCBleHRlbmRzIF9SZWNlaXZlclJlc3BvbnNlLCBTIGV4dGVuZHMgX1NlbmRlclJlcXVlc3Q+KFxuICAgIGV2ZW50VHlwZTogX0V2ZW50VHlwZSxcbiAgICBkYXRhOiBTLFxuICAgIHRpbWVvdXQgPSBfVGltZW91dER1cmF0aW9uLkFDS1xuICApOiBQcm9taXNlPF9SZWNlaXZlck1lc3NhZ2VSZXNwb25zZTxUPj4ge1xuICAgIGNvbnN0IG1lc3NhZ2VDaGFubmVsID1cbiAgICAgIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgTWVzc2FnZUNoYW5uZWwoKSA6IG51bGw7XG4gICAgaWYgKCFtZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKF9NZXNzYWdlRXJyb3IuQ09OTkVDVElPTl9VTkFWQUlMQUJMRSk7XG4gICAgfVxuICAgIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyByZXR1cm4gZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgdHlwZXMuXG4gICAgLy8gV2UgZG9uJ3QgYWN0dWFsbHkgY2FyZSB3aGF0IHRoZSB2YWx1ZSBpcyBidXQgVFMgd29uJ3QgYWNjZXB0IHVua25vd24gYW5kXG4gICAgLy8gd2UgY2FuJ3QgY2FzdCBwcm9wZXJseSBpbiBib3RoIGVudmlyb25tZW50cy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBjb21wbGV0aW9uVGltZXI6IGFueTtcbiAgICBsZXQgaGFuZGxlcjogTWVzc2FnZUhhbmRsZXI7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPF9SZWNlaXZlck1lc3NhZ2VSZXNwb25zZTxUPj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9IF9nZW5lcmF0ZUV2ZW50SWQoJycsIDIwKTtcbiAgICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQxLnN0YXJ0KCk7XG4gICAgICBjb25zdCBhY2tUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKF9NZXNzYWdlRXJyb3IuVU5TVVBQT1JURURfRVZFTlQpKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgaGFuZGxlciA9IHtcbiAgICAgICAgbWVzc2FnZUNoYW5uZWwsXG4gICAgICAgIG9uTWVzc2FnZShldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlRXZlbnQgPSBldmVudCBhcyBNZXNzYWdlRXZlbnQ8UmVjZWl2ZXJNZXNzYWdlRXZlbnQ8VD4+O1xuICAgICAgICAgIGlmIChtZXNzYWdlRXZlbnQuZGF0YS5ldmVudElkICE9PSBldmVudElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAobWVzc2FnZUV2ZW50LmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIF9TdGF0dXMuQUNLOlxuICAgICAgICAgICAgICAvLyBUaGUgcmVjZWl2ZXIgc2hvdWxkIEFDSyBmaXJzdC5cbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFja1RpbWVyKTtcbiAgICAgICAgICAgICAgY29tcGxldGlvblRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihfTWVzc2FnZUVycm9yLlRJTUVPVVQpKTtcbiAgICAgICAgICAgICAgfSwgX1RpbWVvdXREdXJhdGlvbi5DT01QTEVUSU9OKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIF9TdGF0dXMuRE9ORTpcbiAgICAgICAgICAgICAgLy8gT25jZSB0aGUgcmVjZWl2ZXIncyBoYW5kbGVycyBhcmUgZmluaXNoZWQgd2Ugd2lsbCBnZXQgdGhlIHJlc3VsdHMuXG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChjb21wbGV0aW9uVGltZXIpO1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VFdmVudC5kYXRhLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYWNrVGltZXIpO1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY29tcGxldGlvblRpbWVyKTtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihfTWVzc2FnZUVycm9yLklOVkFMSURfUkVTUE9OU0UpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5oYW5kbGVycy5hZGQoaGFuZGxlcik7XG4gICAgICBtZXNzYWdlQ2hhbm5lbC5wb3J0MS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlci5vbk1lc3NhZ2UpO1xuICAgICAgdGhpcy50YXJnZXQucG9zdE1lc3NhZ2UoXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgZXZlbnRJZCxcbiAgICAgICAgICBkYXRhXG4gICAgICAgIH0gYXMgU2VuZGVyTWVzc2FnZUV2ZW50PFM+LFxuICAgICAgICBbbWVzc2FnZUNoYW5uZWwucG9ydDJdXG4gICAgICApO1xuICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNZXNzYWdlSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUmVjYXB0Y2hhLCBHcmVDQVBUQ0hBVG9wTGV2ZWwgfSBmcm9tICcuL3JlY2FwdGNoYS9yZWNhcHRjaGEnO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgd2luZG93IHR5cGUgdGhhdCBtZWxkcyB0aGUgbm9ybWFsIHdpbmRvdyB0eXBlIHBsdXMgdGhlXG4gKiB2YXJpb3VzIGJpdHMgd2UgbmVlZC4gVGhlIHRocmVlIGRpZmZlcmVudCBibG9ja3MgdGhhdCBhcmUgJidkIHRvZ2V0aGVyXG4gKiBjYW50IGJlIGRlZmluZWQgaW4gdGhlIHNhbWUgYmxvY2sgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCB0eXBlIEF1dGhXaW5kb3cgPSB7XG4gIC8vIFN0YW5kYXJkIHdpbmRvdyB0eXBlc1xuICBbVCBpbiBrZXlvZiBXaW5kb3ddOiBXaW5kb3dbVF07XG59ICYge1xuICAvLyBBbnkga25vd24gLyBuYW1lZCBwcm9wZXJ0aWVzIHdlIHdhbnQgdG8gYWRkXG4gIGdyZWNhcHRjaGE/OiBSZWNhcHRjaGEgfCBHcmVDQVBUQ0hBVG9wTGV2ZWw7XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4gIF9fX2pzbD86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIGdhcGk/OiB0eXBlb2YgZ2FwaTtcbn0gJiB7XG4gIC8vIEEgZmluYWwgY2F0Y2gtYWxsIGZvciBjYWxsYmFja3MgKHdoaWNoIHdpbGwgaGF2ZSByYW5kb20gbmFtZXMpIHRoYXRcbiAgLy8gd2Ugd2lsbCBzdGljayBvbiB0aGUgd2luZG93LlxuICBbY2FsbGJhY2s6IHN0cmluZ106ICguLi5hcmdzOiB1bmtub3duW10pID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqIExhenkgYWNjZXNzb3IgZm9yIHdpbmRvdywgc2luY2UgdGhlIGNvbXBhdCBsYXllciB3b24ndCB0cmVlIHNoYWtlIHRoaXMgb3V0LFxuICogd2UgbmVlZCB0byBtYWtlIHN1cmUgbm90IHRvIG1lc3Mgd2l0aCB3aW5kb3cgdW5sZXNzIHdlIGhhdmUgdG9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF93aW5kb3coKTogQXV0aFdpbmRvdyB7XG4gIHJldHVybiB3aW5kb3cgYXMgdW5rbm93biBhcyBBdXRoV2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3NldFdpbmRvd0xvY2F0aW9uKHVybDogc3RyaW5nKTogdm9pZCB7XG4gIF93aW5kb3coKS5sb2NhdGlvbi5ocmVmID0gdXJsO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IF93aW5kb3cgfSBmcm9tICcuLi9hdXRoX3dpbmRvdyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNXb3JrZXIoKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIF93aW5kb3coKVsnV29ya2VyR2xvYmFsU2NvcGUnXSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgX3dpbmRvdygpWydpbXBvcnRTY3JpcHRzJ10gPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9nZXRBY3RpdmVTZXJ2aWNlV29ya2VyKCk6IFByb21pc2U8U2VydmljZVdvcmtlciB8IG51bGw+IHtcbiAgaWYgKCFuYXZpZ2F0b3I/LnNlcnZpY2VXb3JrZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IGF3YWl0IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5O1xuICAgIHJldHVybiByZWdpc3RyYXRpb24uYWN0aXZlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldFNlcnZpY2VXb3JrZXJDb250cm9sbGVyKCk6IFNlcnZpY2VXb3JrZXIgfCBudWxsIHtcbiAgcmV0dXJuIG5hdmlnYXRvcj8uc2VydmljZVdvcmtlcj8uY29udHJvbGxlciB8fCBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldFdvcmtlckdsb2JhbFNjb3BlKCk6IFNlcnZpY2VXb3JrZXIgfCBudWxsIHtcbiAgcmV0dXJuIF9pc1dvcmtlcigpID8gKHNlbGYgYXMgdW5rbm93biBhcyBTZXJ2aWNlV29ya2VyKSA6IG51bGw7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQZXJzaXN0ZW5jZSB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQge1xuICBQZXJzaXN0ZWRCbG9iLFxuICBQZXJzaXN0ZW5jZUludGVybmFsIGFzIEludGVybmFsUGVyc2lzdGVuY2UsXG4gIFBlcnNpc3RlbmNlVHlwZSxcbiAgUGVyc2lzdGVuY2VWYWx1ZSxcbiAgU3RvcmFnZUV2ZW50TGlzdGVuZXIsXG4gIFNUT1JBR0VfQVZBSUxBQkxFX0tFWVxufSBmcm9tICcuLi8uLi9jb3JlL3BlcnNpc3RlbmNlLyc7XG5pbXBvcnQge1xuICBfRXZlbnRUeXBlLFxuICBfUGluZ1Jlc3BvbnNlLFxuICBLZXlDaGFuZ2VkUmVzcG9uc2UsXG4gIEtleUNoYW5nZWRSZXF1ZXN0LFxuICBQaW5nUmVxdWVzdCxcbiAgX1RpbWVvdXREdXJhdGlvblxufSBmcm9tICcuLi9tZXNzYWdlY2hhbm5lbC9pbmRleCc7XG5pbXBvcnQgeyBSZWNlaXZlciB9IGZyb20gJy4uL21lc3NhZ2VjaGFubmVsL3JlY2VpdmVyJztcbmltcG9ydCB7IFNlbmRlciB9IGZyb20gJy4uL21lc3NhZ2VjaGFubmVsL3NlbmRlcic7XG5pbXBvcnQge1xuICBfaXNXb3JrZXIsXG4gIF9nZXRBY3RpdmVTZXJ2aWNlV29ya2VyLFxuICBfZ2V0U2VydmljZVdvcmtlckNvbnRyb2xsZXIsXG4gIF9nZXRXb3JrZXJHbG9iYWxTY29wZVxufSBmcm9tICcuLi91dGlsL3dvcmtlcic7XG5cbmV4cG9ydCBjb25zdCBEQl9OQU1FID0gJ2ZpcmViYXNlTG9jYWxTdG9yYWdlRGInO1xuY29uc3QgREJfVkVSU0lPTiA9IDE7XG5jb25zdCBEQl9PQkpFQ1RTVE9SRV9OQU1FID0gJ2ZpcmViYXNlTG9jYWxTdG9yYWdlJztcbmNvbnN0IERCX0RBVEFfS0VZUEFUSCA9ICdmYmFzZV9rZXknO1xuXG5pbnRlcmZhY2UgREJPYmplY3Qge1xuICBbREJfREFUQV9LRVlQQVRIXTogc3RyaW5nO1xuICB2YWx1ZTogUGVyc2lzdGVkQmxvYjtcbn1cblxuLyoqXG4gKiBQcm9taXNlIHdyYXBwZXIgZm9yIElEQlJlcXVlc3RcbiAqXG4gKiBVbmZvcnR1bmF0ZWx5IHdlIGNhbid0IGNsZWFubHkgZXh0ZW5kIFByb21pc2U8VD4gc2luY2UgcHJvbWlzZXMgYXJlIG5vdCBjYWxsYWJsZSBpbiBFUzZcbiAqXG4gKi9cbmNsYXNzIERCUHJvbWlzZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVxdWVzdDogSURCUmVxdWVzdCkge31cblxuICB0b1Byb21pc2UoKTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHRoaXMucmVxdWVzdC5yZXN1bHQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdCh0aGlzLnJlcXVlc3QuZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T2JqZWN0U3RvcmUoZGI6IElEQkRhdGFiYXNlLCBpc1JlYWRXcml0ZTogYm9vbGVhbik6IElEQk9iamVjdFN0b3JlIHtcbiAgcmV0dXJuIGRiXG4gICAgLnRyYW5zYWN0aW9uKFtEQl9PQkpFQ1RTVE9SRV9OQU1FXSwgaXNSZWFkV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpXG4gICAgLm9iamVjdFN0b3JlKERCX09CSkVDVFNUT1JFX05BTUUpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2NsZWFyRGF0YWJhc2UoZGI6IElEQkRhdGFiYXNlKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IG9iamVjdFN0b3JlID0gZ2V0T2JqZWN0U3RvcmUoZGIsIHRydWUpO1xuICByZXR1cm4gbmV3IERCUHJvbWlzZTx2b2lkPihvYmplY3RTdG9yZS5jbGVhcigpKS50b1Byb21pc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kZWxldGVEYXRhYmFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShEQl9OQU1FKTtcbiAgcmV0dXJuIG5ldyBEQlByb21pc2U8dm9pZD4ocmVxdWVzdCkudG9Qcm9taXNlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfb3BlbkRhdGFiYXNlKCk6IFByb21pc2U8SURCRGF0YWJhc2U+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKERCX05BTUUsIERCX1ZFUlNJT04pO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgfSk7XG5cbiAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYiA9IHJlcXVlc3QucmVzdWx0O1xuXG4gICAgICB0cnkge1xuICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShEQl9PQkpFQ1RTVE9SRV9OQU1FLCB7IGtleVBhdGg6IERCX0RBVEFfS0VZUEFUSCB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGI6IElEQkRhdGFiYXNlID0gcmVxdWVzdC5yZXN1bHQ7XG4gICAgICAvLyBTdHJhbmdlIGJ1ZyB0aGF0IG9jY3VycyBpbiBGaXJlZm94IHdoZW4gbXVsdGlwbGUgdGFicyBhcmUgb3BlbmVkIGF0IHRoZVxuICAgICAgLy8gc2FtZSB0aW1lLiBUaGUgb25seSB3YXkgdG8gcmVjb3ZlciBzZWVtcyB0byBiZSBkZWxldGluZyB0aGUgZGF0YWJhc2VcbiAgICAgIC8vIGFuZCByZS1pbml0aWFsaXppbmcgaXQuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82MzRcblxuICAgICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKERCX09CSkVDVFNUT1JFX05BTUUpKSB7XG4gICAgICAgIC8vIE5lZWQgdG8gY2xvc2UgdGhlIGRhdGFiYXNlIG9yIGVsc2UgeW91IGdldCBhIGBibG9ja2VkYCBldmVudFxuICAgICAgICBkYi5jbG9zZSgpO1xuICAgICAgICBhd2FpdCBfZGVsZXRlRGF0YWJhc2UoKTtcbiAgICAgICAgcmVzb2x2ZShhd2FpdCBfb3BlbkRhdGFiYXNlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShkYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3B1dE9iamVjdChcbiAgZGI6IElEQkRhdGFiYXNlLFxuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IFBlcnNpc3RlbmNlVmFsdWUgfCBzdHJpbmdcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCByZXF1ZXN0ID0gZ2V0T2JqZWN0U3RvcmUoZGIsIHRydWUpLnB1dCh7XG4gICAgW0RCX0RBVEFfS0VZUEFUSF06IGtleSxcbiAgICB2YWx1ZVxuICB9KTtcbiAgcmV0dXJuIG5ldyBEQlByb21pc2U8dm9pZD4ocmVxdWVzdCkudG9Qcm9taXNlKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE9iamVjdChcbiAgZGI6IElEQkRhdGFiYXNlLFxuICBrZXk6IHN0cmluZ1xuKTogUHJvbWlzZTxQZXJzaXN0ZWRCbG9iIHwgbnVsbD4ge1xuICBjb25zdCByZXF1ZXN0ID0gZ2V0T2JqZWN0U3RvcmUoZGIsIGZhbHNlKS5nZXQoa2V5KTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IG5ldyBEQlByb21pc2U8REJPYmplY3QgfCB1bmRlZmluZWQ+KHJlcXVlc3QpLnRvUHJvbWlzZSgpO1xuICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRhdGEudmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZGVsZXRlT2JqZWN0KGRiOiBJREJEYXRhYmFzZSwga2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGdldE9iamVjdFN0b3JlKGRiLCB0cnVlKS5kZWxldGUoa2V5KTtcbiAgcmV0dXJuIG5ldyBEQlByb21pc2U8dm9pZD4ocmVxdWVzdCkudG9Qcm9taXNlKCk7XG59XG5cbmV4cG9ydCBjb25zdCBfUE9MTElOR19JTlRFUlZBTF9NUyA9IDgwMDtcbmV4cG9ydCBjb25zdCBfVFJBTlNBQ1RJT05fUkVUUllfQ09VTlQgPSAzO1xuXG5jbGFzcyBJbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlIGltcGxlbWVudHMgSW50ZXJuYWxQZXJzaXN0ZW5jZSB7XG4gIHN0YXRpYyB0eXBlOiAnTE9DQUwnID0gJ0xPQ0FMJztcblxuICB0eXBlID0gUGVyc2lzdGVuY2VUeXBlLkxPQ0FMO1xuICBkYj86IElEQkRhdGFiYXNlO1xuICByZWFkb25seSBfc2hvdWxkQWxsb3dNaWdyYXRpb24gPSB0cnVlO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgbGlzdGVuZXJzOiBSZWNvcmQ8c3RyaW5nLCBTZXQ8U3RvcmFnZUV2ZW50TGlzdGVuZXI+PiA9IHt9O1xuICBwcml2YXRlIHJlYWRvbmx5IGxvY2FsQ2FjaGU6IFJlY29yZDxzdHJpbmcsIFBlcnNpc3RlbmNlVmFsdWUgfCBudWxsPiA9IHt9O1xuICAvLyBzZXRUaW1lb3V0IHJldHVybiB2YWx1ZSBpcyBwbGF0Zm9ybSBzcGVjaWZpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIHBvbGxUaW1lcjogYW55IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgcGVuZGluZ1dyaXRlcyA9IDA7XG5cbiAgcHJpdmF0ZSByZWNlaXZlcjogUmVjZWl2ZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBzZW5kZXI6IFNlbmRlciB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHNlcnZpY2VXb3JrZXJSZWNlaXZlckF2YWlsYWJsZSA9IGZhbHNlO1xuICBwcml2YXRlIGFjdGl2ZVNlcnZpY2VXb3JrZXI6IFNlcnZpY2VXb3JrZXIgfCBudWxsID0gbnVsbDtcbiAgLy8gVmlzaWJsZSBmb3IgdGVzdGluZyBvbmx5XG4gIHJlYWRvbmx5IF93b3JrZXJJbml0aWFsaXphdGlvblByb21pc2U6IFByb21pc2U8dm9pZD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gRmlyZSAmIGZvcmdldCB0aGUgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIGFzIGl0IG1heSBuZXZlciByZXNvbHZlXG4gICAgdGhpcy5fd29ya2VySW5pdGlhbGl6YXRpb25Qcm9taXNlID1cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVNlcnZpY2VXb3JrZXJNZXNzYWdpbmcoKS50aGVuKFxuICAgICAgICAoKSA9PiB7fSxcbiAgICAgICAgKCkgPT4ge31cbiAgICAgICk7XG4gIH1cblxuICBhc3luYyBfb3BlbkRiKCk6IFByb21pc2U8SURCRGF0YWJhc2U+IHtcbiAgICBpZiAodGhpcy5kYikge1xuICAgICAgcmV0dXJuIHRoaXMuZGI7XG4gICAgfVxuICAgIHRoaXMuZGIgPSBhd2FpdCBfb3BlbkRhdGFiYXNlKCk7XG4gICAgcmV0dXJuIHRoaXMuZGI7XG4gIH1cblxuICBhc3luYyBfd2l0aFJldHJpZXM8VD4ob3A6IChkYjogSURCRGF0YWJhc2UpID0+IFByb21pc2U8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICBsZXQgbnVtQXR0ZW1wdHMgPSAwO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5fb3BlbkRiKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBvcChkYik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChudW1BdHRlbXB0cysrID4gX1RSQU5TQUNUSU9OX1JFVFJZX0NPVU5UKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kYikge1xuICAgICAgICAgIHRoaXMuZGIuY2xvc2UoKTtcbiAgICAgICAgICB0aGlzLmRiID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIGFkZGluZyBleHBvbmVudGlhbCBiYWNrb2ZmXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluZGV4ZWREQiBldmVudHMgZG8gbm90IHByb3BhZ2F0ZSBmcm9tIHRoZSBtYWluIHdpbmRvdyB0byB0aGUgd29ya2VyIGNvbnRleHQuICBXZSByZWx5IG9uIGFcbiAgICogcG9zdE1lc3NhZ2UgaW50ZXJmYWNlIHRvIHNlbmQgdGhlc2UgZXZlbnRzIHRvIHRoZSB3b3JrZXIgb3Vyc2VsdmVzLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplU2VydmljZVdvcmtlck1lc3NhZ2luZygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gX2lzV29ya2VyKCkgPyB0aGlzLmluaXRpYWxpemVSZWNlaXZlcigpIDogdGhpcy5pbml0aWFsaXplU2VuZGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQXMgdGhlIHdvcmtlciB3ZSBzaG91bGQgbGlzdGVuIHRvIGV2ZW50cyBmcm9tIHRoZSBtYWluIHdpbmRvdy5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZVJlY2VpdmVyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucmVjZWl2ZXIgPSBSZWNlaXZlci5fZ2V0SW5zdGFuY2UoX2dldFdvcmtlckdsb2JhbFNjb3BlKCkhKTtcbiAgICAvLyBSZWZyZXNoIGZyb20gcGVyc2lzdGVuY2UgaWYgd2UgcmVjZWl2ZSBhIEtleUNoYW5nZWQgbWVzc2FnZS5cbiAgICB0aGlzLnJlY2VpdmVyLl9zdWJzY3JpYmUoXG4gICAgICBfRXZlbnRUeXBlLktFWV9DSEFOR0VELFxuICAgICAgYXN5bmMgKF9vcmlnaW46IHN0cmluZywgZGF0YTogS2V5Q2hhbmdlZFJlcXVlc3QpID0+IHtcbiAgICAgICAgY29uc3Qga2V5cyA9IGF3YWl0IHRoaXMuX3BvbGwoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBrZXlQcm9jZXNzZWQ6IGtleXMuaW5jbHVkZXMoZGF0YS5rZXkpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgKTtcbiAgICAvLyBMZXQgdGhlIHNlbmRlciBrbm93IHRoYXQgd2UgYXJlIGxpc3RlbmluZyBzbyB0aGV5IGdpdmUgdXMgbW9yZSB0aW1lb3V0LlxuICAgIHRoaXMucmVjZWl2ZXIuX3N1YnNjcmliZShcbiAgICAgIF9FdmVudFR5cGUuUElORyxcbiAgICAgIGFzeW5jIChfb3JpZ2luOiBzdHJpbmcsIF9kYXRhOiBQaW5nUmVxdWVzdCkgPT4ge1xuICAgICAgICByZXR1cm4gW19FdmVudFR5cGUuS0VZX0NIQU5HRURdO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXMgdGhlIG1haW4gd2luZG93LCB3ZSBzaG91bGQgbGV0IHRoZSB3b3JrZXIga25vdyB3aGVuIGtleXMgY2hhbmdlIChzZXQgYW5kIHJlbW92ZSkuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmljZVdvcmtlckNvbnRhaW5lci9yZWFkeSB8IFNlcnZpY2VXb3JrZXJDb250YWluZXIucmVhZHl9XG4gICAqIG1heSBub3QgcmVzb2x2ZS5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZVNlbmRlcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlcmUncyBhbiBhY3RpdmUgc2VydmljZSB3b3JrZXIuXG4gICAgdGhpcy5hY3RpdmVTZXJ2aWNlV29ya2VyID0gYXdhaXQgX2dldEFjdGl2ZVNlcnZpY2VXb3JrZXIoKTtcbiAgICBpZiAoIXRoaXMuYWN0aXZlU2VydmljZVdvcmtlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNlbmRlciA9IG5ldyBTZW5kZXIodGhpcy5hY3RpdmVTZXJ2aWNlV29ya2VyKTtcbiAgICAvLyBQaW5nIHRoZSBzZXJ2aWNlIHdvcmtlciB0byBjaGVjayB3aGF0IGV2ZW50cyB0aGV5IGNhbiBoYW5kbGUuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMuc2VuZGVyLl9zZW5kPF9QaW5nUmVzcG9uc2UsIFBpbmdSZXF1ZXN0PihcbiAgICAgIF9FdmVudFR5cGUuUElORyxcbiAgICAgIHt9LFxuICAgICAgX1RpbWVvdXREdXJhdGlvbi5MT05HX0FDS1xuICAgICk7XG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHJlc3VsdHNbMF0/LmZ1bGZpbGxlZCAmJlxuICAgICAgcmVzdWx0c1swXT8udmFsdWUuaW5jbHVkZXMoX0V2ZW50VHlwZS5LRVlfQ0hBTkdFRClcbiAgICApIHtcbiAgICAgIHRoaXMuc2VydmljZVdvcmtlclJlY2VpdmVyQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGV0IHRoZSB3b3JrZXIga25vdyBhYm91dCBhIGNoYW5nZWQga2V5LCB0aGUgZXhhY3Qga2V5IGRvZXNuJ3QgdGVjaG5pY2FsbHkgbWF0dGVyIHNpbmNlIHRoZVxuICAgKiB3b3JrZXIgd2lsbCBqdXN0IHRyaWdnZXIgYSBmdWxsIHN5bmMgYW55d2F5LlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBGb3Igbm93LCB3ZSBvbmx5IHN1cHBvcnQgb25lIHNlcnZpY2Ugd29ya2VyIHBlciBwYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IC0gU3RvcmFnZSBrZXkgd2hpY2ggY2hhbmdlZC5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgbm90aWZ5U2VydmljZVdvcmtlcihrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChcbiAgICAgICF0aGlzLnNlbmRlciB8fFxuICAgICAgIXRoaXMuYWN0aXZlU2VydmljZVdvcmtlciB8fFxuICAgICAgX2dldFNlcnZpY2VXb3JrZXJDb250cm9sbGVyKCkgIT09IHRoaXMuYWN0aXZlU2VydmljZVdvcmtlclxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5zZW5kZXIuX3NlbmQ8S2V5Q2hhbmdlZFJlc3BvbnNlLCBLZXlDaGFuZ2VkUmVxdWVzdD4oXG4gICAgICAgIF9FdmVudFR5cGUuS0VZX0NIQU5HRUQsXG4gICAgICAgIHsga2V5IH0sXG4gICAgICAgIC8vIFVzZSBsb25nIHRpbWVvdXQgaWYgcmVjZWl2ZXIgaGFzIHByZXZpb3VzbHkgcmVzcG9uZGVkIHRvIGEgcGluZyBmcm9tIHVzLlxuICAgICAgICB0aGlzLnNlcnZpY2VXb3JrZXJSZWNlaXZlckF2YWlsYWJsZVxuICAgICAgICAgID8gX1RpbWVvdXREdXJhdGlvbi5MT05HX0FDS1xuICAgICAgICAgIDogX1RpbWVvdXREdXJhdGlvbi5BQ0tcbiAgICAgICk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBUaGlzIGlzIGEgYmVzdCBlZmZvcnQgYXBwcm9hY2guIElnbm9yZSBlcnJvcnMuXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX2lzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWluZGV4ZWREQikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBkYiA9IGF3YWl0IF9vcGVuRGF0YWJhc2UoKTtcbiAgICAgIGF3YWl0IF9wdXRPYmplY3QoZGIsIFNUT1JBR0VfQVZBSUxBQkxFX0tFWSwgJzEnKTtcbiAgICAgIGF3YWl0IF9kZWxldGVPYmplY3QoZGIsIFNUT1JBR0VfQVZBSUxBQkxFX0tFWSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfd2l0aFBlbmRpbmdXcml0ZSh3cml0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucGVuZGluZ1dyaXRlcysrO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB3cml0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnBlbmRpbmdXcml0ZXMtLTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBfc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogUGVyc2lzdGVuY2VWYWx1ZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl93aXRoUGVuZGluZ1dyaXRlKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuX3dpdGhSZXRyaWVzKChkYjogSURCRGF0YWJhc2UpID0+IF9wdXRPYmplY3QoZGIsIGtleSwgdmFsdWUpKTtcbiAgICAgIHRoaXMubG9jYWxDYWNoZVtrZXldID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcy5ub3RpZnlTZXJ2aWNlV29ya2VyKGtleSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBfZ2V0PFQgZXh0ZW5kcyBQZXJzaXN0ZW5jZVZhbHVlPihrZXk6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+IHtcbiAgICBjb25zdCBvYmogPSAoYXdhaXQgdGhpcy5fd2l0aFJldHJpZXMoKGRiOiBJREJEYXRhYmFzZSkgPT5cbiAgICAgIGdldE9iamVjdChkYiwga2V5KVxuICAgICkpIGFzIFQ7XG4gICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSBvYmo7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGFzeW5jIF9yZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fd2l0aFBlbmRpbmdXcml0ZShhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLl93aXRoUmV0cmllcygoZGI6IElEQkRhdGFiYXNlKSA9PiBfZGVsZXRlT2JqZWN0KGRiLCBrZXkpKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmxvY2FsQ2FjaGVba2V5XTtcbiAgICAgIHJldHVybiB0aGlzLm5vdGlmeVNlcnZpY2VXb3JrZXIoa2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgX3BvbGwoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIC8vIFRPRE86IGNoZWNrIGlmIHdlIG5lZWQgdG8gZmFsbGJhY2sgaWYgZ2V0QWxsIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl93aXRoUmV0cmllcygoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICBjb25zdCBnZXRBbGxSZXF1ZXN0ID0gZ2V0T2JqZWN0U3RvcmUoZGIsIGZhbHNlKS5nZXRBbGwoKTtcbiAgICAgIHJldHVybiBuZXcgREJQcm9taXNlPERCT2JqZWN0W10gfCBudWxsPihnZXRBbGxSZXF1ZXN0KS50b1Byb21pc2UoKTtcbiAgICB9KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSBwZW5kaW5nIHdyaXRlcyBpbiBwcm9ncmVzcyBhYm9ydCwgd2UnbGwgZ2V0IHBpY2tlZCB1cCBvbiB0aGUgbmV4dCBwb2xsXG4gICAgaWYgKHRoaXMucGVuZGluZ1dyaXRlcyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBjb25zdCBrZXlzSW5SZXN1bHQgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCB7IGZiYXNlX2tleToga2V5LCB2YWx1ZSB9IG9mIHJlc3VsdCkge1xuICAgICAga2V5c0luUmVzdWx0LmFkZChrZXkpO1xuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHRoaXMubG9jYWxDYWNoZVtrZXldKSAhPT0gSlNPTi5zdHJpbmdpZnkodmFsdWUpKSB7XG4gICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKGtleSwgdmFsdWUgYXMgUGVyc2lzdGVuY2VWYWx1ZSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGxvY2FsS2V5IG9mIE9iamVjdC5rZXlzKHRoaXMubG9jYWxDYWNoZSkpIHtcbiAgICAgIGlmICh0aGlzLmxvY2FsQ2FjaGVbbG9jYWxLZXldICYmICFrZXlzSW5SZXN1bHQuaGFzKGxvY2FsS2V5KSkge1xuICAgICAgICAvLyBEZWxldGVkXG4gICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKGxvY2FsS2V5LCBudWxsKTtcbiAgICAgICAga2V5cy5wdXNoKGxvY2FsS2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBwcml2YXRlIG5vdGlmeUxpc3RlbmVycyhcbiAgICBrZXk6IHN0cmluZyxcbiAgICBuZXdWYWx1ZTogUGVyc2lzdGVuY2VWYWx1ZSB8IG51bGxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSBuZXdWYWx1ZTtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgQXJyYXkuZnJvbShsaXN0ZW5lcnMpKSB7XG4gICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0UG9sbGluZygpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG5cbiAgICB0aGlzLnBvbGxUaW1lciA9IHNldEludGVydmFsKFxuICAgICAgYXN5bmMgKCkgPT4gdGhpcy5fcG9sbCgpLFxuICAgICAgX1BPTExJTkdfSU5URVJWQUxfTVNcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdG9wUG9sbGluZygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5wb2xsVGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wb2xsVGltZXIpO1xuICAgICAgdGhpcy5wb2xsVGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRMaXN0ZW5lcihrZXk6IHN0cmluZywgbGlzdGVuZXI6IFN0b3JhZ2VFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc3RhcnRQb2xsaW5nKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5saXN0ZW5lcnNba2V5XSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnNba2V5XSA9IG5ldyBTZXQoKTtcbiAgICAgIC8vIFBvcHVsYXRlIHRoZSBjYWNoZSB0byBhdm9pZCBzcHVyaW91c2x5IHRyaWdnZXJpbmcgb24gZmlyc3QgcG9sbC5cbiAgICAgIHZvaWQgdGhpcy5fZ2V0KGtleSk7IC8vIFRoaXMgY2FuIGhhcHBlbiBpbiB0aGUgYmFja2dyb3VuZCBhc3luYyBhbmQgd2UgY2FuIHJldHVybiBpbW1lZGlhdGVseS5cbiAgICB9XG4gICAgdGhpcy5saXN0ZW5lcnNba2V5XS5hZGQobGlzdGVuZXIpO1xuICB9XG5cbiAgX3JlbW92ZUxpc3RlbmVyKGtleTogc3RyaW5nLCBsaXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lcnNba2V5XSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnNba2V5XS5kZWxldGUobGlzdGVuZXIpO1xuXG4gICAgICBpZiAodGhpcy5saXN0ZW5lcnNba2V5XS5zaXplID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlfSBvZiB0eXBlIGBMT0NBTGAgdXNpbmcgYGluZGV4ZWREQmBcbiAqIGZvciB0aGUgdW5kZXJseWluZyBzdG9yYWdlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2U6IFBlcnNpc3RlbmNlID0gSW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIF9wZXJmb3JtQXBpUmVxdWVzdCxcbiAgRW5kcG9pbnQsXG4gIEh0dHBNZXRob2QsXG4gIF9hZGRUaWRJZk5lY2Vzc2FyeVxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IE1mYUVucm9sbG1lbnQgfSBmcm9tICcuLi9hY2NvdW50X21hbmFnZW1lbnQvbWZhJztcbmltcG9ydCB7IFNpZ25JbldpdGhJZHBSZXNwb25zZSB9IGZyb20gJy4vaWRwJztcbmltcG9ydCB7XG4gIFNpZ25JbldpdGhQaG9uZU51bWJlclJlcXVlc3QsXG4gIFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlXG59IGZyb20gJy4vc21zJztcblxuZXhwb3J0IGludGVyZmFjZSBGaW5hbGl6ZU1mYVJlc3BvbnNlIHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICByZWZyZXNoVG9rZW46IHN0cmluZztcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJZFRva2VuTWZhUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBtZmFQZW5kaW5nQ3JlZGVudGlhbD86IHN0cmluZztcbiAgbWZhSW5mbz86IE1mYUVucm9sbG1lbnRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFydFBob25lTWZhU2lnbkluUmVxdWVzdCB7XG4gIG1mYVBlbmRpbmdDcmVkZW50aWFsOiBzdHJpbmc7XG4gIG1mYUVucm9sbG1lbnRJZDogc3RyaW5nO1xuICBwaG9uZVNpZ25JbkluZm86IHtcbiAgICByZWNhcHRjaGFUb2tlbjogc3RyaW5nO1xuICB9O1xuICB0ZW5hbnRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFydFBob25lTWZhU2lnbkluUmVzcG9uc2Uge1xuICBwaG9uZVJlc3BvbnNlSW5mbzoge1xuICAgIHNlc3Npb25JbmZvOiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFNpZ25JblBob25lTWZhKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTdGFydFBob25lTWZhU2lnbkluUmVxdWVzdFxuKTogUHJvbWlzZTxTdGFydFBob25lTWZhU2lnbkluUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBTdGFydFBob25lTWZhU2lnbkluUmVxdWVzdCxcbiAgICBTdGFydFBob25lTWZhU2lnbkluUmVzcG9uc2VcbiAgPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TVEFSVF9NRkFfU0lHTl9JTixcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVxdWVzdCB7XG4gIG1mYVBlbmRpbmdDcmVkZW50aWFsOiBzdHJpbmc7XG4gIHBob25lVmVyaWZpY2F0aW9uSW5mbzogU2lnbkluV2l0aFBob25lTnVtYmVyUmVxdWVzdDtcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbi8vIFRPVFAgTUZBIFNpZ24gaW4gb25seSBoYXMgYSBmaW5hbGl6ZSBwaGFzZS4gUGhvbmUgTUZBIGhhcyBhIHN0YXJ0IHBoYXNlIHRvIGluaXRpYXRlIHNlbmRpbmcgYW5cbi8vIFNNUyBhbmQgYSBmaW5hbGl6ZSBwaGFzZSB0byBjb21wbGV0ZSBzaWduIGluLiBXaXRoIFRPVFAsIHRoZSB1c2VyIGFscmVhZHkgaGFzIHRoZSBPVFAgaW4gdGhlXG4vLyBUT1RQL0F1dGhlbnRpY2F0b3IgYXBwLlxuZXhwb3J0IGludGVyZmFjZSBGaW5hbGl6ZVRvdHBNZmFTaWduSW5SZXF1ZXN0IHtcbiAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHN0cmluZztcbiAgdG90cFZlcmlmaWNhdGlvbkluZm86IHsgdmVyaWZpY2F0aW9uQ29kZTogc3RyaW5nIH07XG4gIHRlbmFudElkPzogc3RyaW5nO1xuICBtZmFFbnJvbGxtZW50SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVzcG9uc2UgZXh0ZW5kcyBGaW5hbGl6ZU1mYVJlc3BvbnNlIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluYWxpemVUb3RwTWZhU2lnbkluUmVzcG9uc2UgZXh0ZW5kcyBGaW5hbGl6ZU1mYVJlc3BvbnNlIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5hbGl6ZVNpZ25JblBob25lTWZhKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVxdWVzdFxuKTogUHJvbWlzZTxGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVxdWVzdCxcbiAgICBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVzcG9uc2VcbiAgPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5GSU5BTElaRV9NRkFfU0lHTl9JTixcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmFsaXplU2lnbkluVG90cE1mYShcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogRmluYWxpemVUb3RwTWZhU2lnbkluUmVxdWVzdFxuKTogUHJvbWlzZTxGaW5hbGl6ZVRvdHBNZmFTaWduSW5SZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFxuICAgIEZpbmFsaXplVG90cE1mYVNpZ25JblJlcXVlc3QsXG4gICAgRmluYWxpemVUb3RwTWZhU2lnbkluUmVzcG9uc2VcbiAgPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5GSU5BTElaRV9NRkFfU0lHTl9JTixcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgUGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZSA9XG4gIHwgU2lnbkluV2l0aFBob25lTnVtYmVyUmVzcG9uc2VcbiAgfCBTaWduSW5XaXRoSWRwUmVzcG9uc2VcbiAgfCBJZFRva2VuUmVzcG9uc2U7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBSZWNhcHRjaGFQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7XG4gIFJlY2FwdGNoYSxcbiAgR3JlQ0FQVENIQVRvcExldmVsLFxuICBHcmVDQVBUQ0hBUmVuZGVyT3B0aW9uLFxuICBHcmVDQVBUQ0hBXG59IGZyb20gJy4vcmVjYXB0Y2hhJztcblxuZXhwb3J0IGNvbnN0IF9TT0xWRV9USU1FX01TID0gNTAwO1xuZXhwb3J0IGNvbnN0IF9FWFBJUkFUSU9OX1RJTUVfTVMgPSA2MF8wMDA7XG5leHBvcnQgY29uc3QgX1dJREdFVF9JRF9TVEFSVCA9IDFfMDAwXzAwMF8wMDBfMDAwO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdpZGdldCB7XG4gIGdldFJlc3BvbnNlOiAoKSA9PiBzdHJpbmcgfCBudWxsO1xuICBkZWxldGU6ICgpID0+IHZvaWQ7XG4gIGV4ZWN1dGU6ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrUmVDYXB0Y2hhIGltcGxlbWVudHMgUmVjYXB0Y2hhIHtcbiAgcHJpdmF0ZSBjb3VudGVyID0gX1dJREdFVF9JRF9TVEFSVDtcbiAgX3dpZGdldHMgPSBuZXcgTWFwPG51bWJlciwgV2lkZ2V0PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXV0aDogQXV0aEludGVybmFsKSB7fVxuXG4gIHJlbmRlcihcbiAgICBjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50LFxuICAgIHBhcmFtZXRlcnM/OiBSZWNhcHRjaGFQYXJhbWV0ZXJzXG4gICk6IG51bWJlciB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmNvdW50ZXI7XG4gICAgdGhpcy5fd2lkZ2V0cy5zZXQoXG4gICAgICBpZCxcbiAgICAgIG5ldyBNb2NrV2lkZ2V0KGNvbnRhaW5lciwgdGhpcy5hdXRoLm5hbWUsIHBhcmFtZXRlcnMgfHwge30pXG4gICAgKTtcbiAgICB0aGlzLmNvdW50ZXIrKztcbiAgICByZXR1cm4gaWQ7XG4gIH1cblxuICByZXNldChvcHRXaWRnZXRJZD86IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGlkID0gb3B0V2lkZ2V0SWQgfHwgX1dJREdFVF9JRF9TVEFSVDtcbiAgICB2b2lkIHRoaXMuX3dpZGdldHMuZ2V0KGlkKT8uZGVsZXRlKCk7XG4gICAgdGhpcy5fd2lkZ2V0cy5kZWxldGUoaWQpO1xuICB9XG5cbiAgZ2V0UmVzcG9uc2Uob3B0V2lkZ2V0SWQ/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlkID0gb3B0V2lkZ2V0SWQgfHwgX1dJREdFVF9JRF9TVEFSVDtcbiAgICByZXR1cm4gdGhpcy5fd2lkZ2V0cy5nZXQoaWQpPy5nZXRSZXNwb25zZSgpIHx8ICcnO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZShvcHRXaWRnZXRJZD86IG51bWJlciB8IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgaWQ6IG51bWJlciA9IChvcHRXaWRnZXRJZCBhcyBudW1iZXIpIHx8IF9XSURHRVRfSURfU1RBUlQ7XG4gICAgdm9pZCB0aGlzLl93aWRnZXRzLmdldChpZCk/LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vY2tHcmVDQVBUQ0hBVG9wTGV2ZWwgaW1wbGVtZW50cyBHcmVDQVBUQ0hBVG9wTGV2ZWwge1xuICBlbnRlcnByaXNlOiBHcmVDQVBUQ0hBID0gbmV3IE1vY2tHcmVDQVBUQ0hBKCk7XG4gIHJlYWR5KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGV4ZWN1dGUoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9zaXRlS2V5OiBzdHJpbmcsXG4gICAgX29wdGlvbnM6IHsgYWN0aW9uOiBzdHJpbmcgfVxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJ3Rva2VuJyk7XG4gIH1cbiAgcmVuZGVyKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBfY29udGFpbmVyOiBzdHJpbmcgfCBIVE1MRWxlbWVudCxcbiAgICBfcGFyYW1ldGVyczogR3JlQ0FQVENIQVJlbmRlck9wdGlvblxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW9ja0dyZUNBUFRDSEEgaW1wbGVtZW50cyBHcmVDQVBUQ0hBIHtcbiAgcmVhZHkoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgZXhlY3V0ZShcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX3NpdGVLZXk6IHN0cmluZyxcbiAgICBfb3B0aW9uczogeyBhY3Rpb246IHN0cmluZyB9XG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgndG9rZW4nKTtcbiAgfVxuICByZW5kZXIoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9jb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50LFxuICAgIF9wYXJhbWV0ZXJzOiBHcmVDQVBUQ0hBUmVuZGVyT3B0aW9uXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrV2lkZ2V0IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHJlYWRvbmx5IGlzVmlzaWJsZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSB0aW1lcklkOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkZWxldGVkID0gZmFsc2U7XG4gIHByaXZhdGUgcmVzcG9uc2VUb2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpY2tIYW5kbGVyID0gKCk6IHZvaWQgPT4ge1xuICAgIHRoaXMuZXhlY3V0ZSgpO1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbnRhaW5lck9ySWQ6IHN0cmluZyB8IEhUTUxFbGVtZW50LFxuICAgIGFwcE5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhcmFtczogUmVjYXB0Y2hhUGFyYW1ldGVyc1xuICApIHtcbiAgICBjb25zdCBjb250YWluZXIgPVxuICAgICAgdHlwZW9mIGNvbnRhaW5lck9ySWQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVyT3JJZClcbiAgICAgICAgOiBjb250YWluZXJPcklkO1xuICAgIF9hc3NlcnQoY29udGFpbmVyLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SLCB7IGFwcE5hbWUgfSk7XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmlzVmlzaWJsZSA9IHRoaXMucGFyYW1zLnNpemUgIT09ICdpbnZpc2libGUnO1xuICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgdGhpcy5leGVjdXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIGdldFJlc3BvbnNlKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHRoaXMuY2hlY2tJZkRlbGV0ZWQoKTtcbiAgICByZXR1cm4gdGhpcy5yZXNwb25zZVRva2VuO1xuICB9XG5cbiAgZGVsZXRlKCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tJZkRlbGV0ZWQoKTtcbiAgICB0aGlzLmRlbGV0ZWQgPSB0cnVlO1xuICAgIGlmICh0aGlzLnRpbWVySWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVySWQpO1xuICAgICAgdGhpcy50aW1lcklkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gIH1cblxuICBleGVjdXRlKCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tJZkRlbGV0ZWQoKTtcbiAgICBpZiAodGhpcy50aW1lcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5yZXNwb25zZVRva2VuID0gZ2VuZXJhdGVSYW5kb21BbHBoYU51bWVyaWNTdHJpbmcoNTApO1xuICAgICAgY29uc3QgeyBjYWxsYmFjaywgJ2V4cGlyZWQtY2FsbGJhY2snOiBleHBpcmVkQ2FsbGJhY2sgfSA9IHRoaXMucGFyYW1zO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbGJhY2sodGhpcy5yZXNwb25zZVRva2VuKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cblxuICAgICAgdGhpcy50aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRpbWVySWQgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc3BvbnNlVG9rZW4gPSBudWxsO1xuICAgICAgICBpZiAoZXhwaXJlZENhbGxiYWNrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV4cGlyZWRDYWxsYmFjaygpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICB0aGlzLmV4ZWN1dGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgX0VYUElSQVRJT05fVElNRV9NUyk7XG4gICAgfSwgX1NPTFZFX1RJTUVfTVMpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0lmRGVsZXRlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxldGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlQ0FQVENIQSBtb2NrIHdhcyBhbHJlYWR5IGRlbGV0ZWQhJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tQWxwaGFOdW1lcmljU3RyaW5nKGxlbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgY29uc3QgY2hhcnMgPSBbXTtcbiAgY29uc3QgYWxsb3dlZENoYXJzID1cbiAgICAnMTIzNDU2Nzg5MGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2hhcnMucHVzaChcbiAgICAgIGFsbG93ZWRDaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsb3dlZENoYXJzLmxlbmd0aCkpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBxdWVyeXN0cmluZyB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQsIF9jcmVhdGVFcnJvciB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgRGVsYXkgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZGVsYXknO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBfd2luZG93IH0gZnJvbSAnLi4vYXV0aF93aW5kb3cnO1xuaW1wb3J0ICogYXMganNIZWxwZXJzIGZyb20gJy4uL2xvYWRfanMnO1xuaW1wb3J0IHsgUmVjYXB0Y2hhLCBpc1YyIH0gZnJvbSAnLi9yZWNhcHRjaGEnO1xuaW1wb3J0IHsgTW9ja1JlQ2FwdGNoYSB9IGZyb20gJy4vcmVjYXB0Y2hhX21vY2snO1xuXG4vLyBSZUNhcHRjaGEgd2lsbCBsb2FkIHVzaW5nIHRoZSBzYW1lIGNhbGxiYWNrLCBzbyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gbmVlZHNcbi8vIHRvIGJlIGtlcHQgYXJvdW5kXG5leHBvcnQgY29uc3QgX0pTTE9BRF9DQUxMQkFDSyA9IGpzSGVscGVycy5fZ2VuZXJhdGVDYWxsYmFja05hbWUoJ3JjYicpO1xuY29uc3QgTkVUV09SS19USU1FT1VUX0RFTEFZID0gbmV3IERlbGF5KDMwMDAwLCA2MDAwMCk7XG5jb25zdCBSRUNBUFRDSEFfQkFTRSA9ICdodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/JztcblxuLyoqXG4gKiBXZSBuZWVkIHRvIG1hcmsgdGhpcyBpbnRlcmZhY2UgYXMgaW50ZXJuYWwgZXhwbGljaXRseSB0byBleGNsdWRlIGl0IGluIHRoZSBwdWJsaWMgdHlwaW5ncywgYmVjYXVzZVxuICogaXQgcmVmZXJlbmNlcyBBdXRoSW50ZXJuYWwgd2hpY2ggaGFzIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSB3aXRoIFVzZXJJbnRlcm5hbC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZUNhcHRjaGFMb2FkZXIge1xuICBsb2FkKGF1dGg6IEF1dGhJbnRlcm5hbCwgaGw/OiBzdHJpbmcpOiBQcm9taXNlPFJlY2FwdGNoYT47XG4gIGNsZWFyZWRPbmVJbnN0YW5jZSgpOiB2b2lkO1xufVxuXG4vKipcbiAqIExvYWRlciBmb3IgdGhlIEdSZUNhcHRjaGEgbGlicmFyeS4gVGhlcmUgc2hvdWxkIG9ubHkgZXZlciBiZSBvbmUgb2YgdGhpcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlQ2FwdGNoYUxvYWRlckltcGwgaW1wbGVtZW50cyBSZUNhcHRjaGFMb2FkZXIge1xuICBwcml2YXRlIGhvc3RMYW5ndWFnZSA9ICcnO1xuICBwcml2YXRlIGNvdW50ZXIgPSAwO1xuICAvKipcbiAgICogQ2hlY2sgZm9yIGByZW5kZXIoKWAgbWV0aG9kLiBgd2luZG93LmdyZWNhcHRjaGFgIHdpbGwgZXhpc3QgaWYgdGhlIEVudGVycHJpc2VcbiAgICogdmVyc2lvbiBvZiB0aGUgUmVDQVBUQ0hBIHNjcmlwdCB3YXMgbG9hZGVkIGJ5IHNvbWVvbmUgZWxzZSAoZS5nLiBBcHAgQ2hlY2spIGJ1dFxuICAgKiBgd2luZG93LmdyZWNhcHRjaGEucmVuZGVyKClgIHdpbGwgbm90LiBBbm90aGVyIGxvYWQgd2lsbCBhZGQgaXQuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGxpYnJhcnlTZXBhcmF0ZWx5TG9hZGVkID0gISFfd2luZG93KCkuZ3JlY2FwdGNoYT8ucmVuZGVyO1xuXG4gIGxvYWQoYXV0aDogQXV0aEludGVybmFsLCBobCA9ICcnKTogUHJvbWlzZTxSZWNhcHRjaGE+IHtcbiAgICBfYXNzZXJ0KGlzSG9zdExhbmd1YWdlVmFsaWQoaGwpLCBhdXRoLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcblxuICAgIGlmICh0aGlzLnNob3VsZFJlc29sdmVJbW1lZGlhdGVseShobCkgJiYgaXNWMihfd2luZG93KCkuZ3JlY2FwdGNoYSkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3dpbmRvdygpLmdyZWNhcHRjaGEhIGFzIFJlY2FwdGNoYSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxSZWNhcHRjaGE+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IG5ldHdvcmtUaW1lb3V0ID0gX3dpbmRvdygpLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRCkpO1xuICAgICAgfSwgTkVUV09SS19USU1FT1VUX0RFTEFZLmdldCgpKTtcblxuICAgICAgX3dpbmRvdygpW19KU0xPQURfQ0FMTEJBQ0tdID0gKCkgPT4ge1xuICAgICAgICBfd2luZG93KCkuY2xlYXJUaW1lb3V0KG5ldHdvcmtUaW1lb3V0KTtcbiAgICAgICAgZGVsZXRlIF93aW5kb3coKVtfSlNMT0FEX0NBTExCQUNLXTtcblxuICAgICAgICBjb25zdCByZWNhcHRjaGEgPSBfd2luZG93KCkuZ3JlY2FwdGNoYSBhcyBSZWNhcHRjaGE7XG5cbiAgICAgICAgaWYgKCFyZWNhcHRjaGEgfHwgIWlzVjIocmVjYXB0Y2hhKSkge1xuICAgICAgICAgIHJlamVjdChfY3JlYXRlRXJyb3IoYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdyYXAgdGhlIGdyZXB0Y2hhIHJlbmRlciBmdW5jdGlvbiBzbyB0aGF0IHdlIGtub3cgaWYgdGhlIGRldmVsb3BlciBoYXNcbiAgICAgICAgLy8gY2FsbGVkIGl0IHNlcGFyYXRlbHlcbiAgICAgICAgY29uc3QgcmVuZGVyID0gcmVjYXB0Y2hhLnJlbmRlcjtcbiAgICAgICAgcmVjYXB0Y2hhLnJlbmRlciA9IChjb250YWluZXIsIHBhcmFtcykgPT4ge1xuICAgICAgICAgIGNvbnN0IHdpZGdldElkID0gcmVuZGVyKGNvbnRhaW5lciwgcGFyYW1zKTtcbiAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICByZXR1cm4gd2lkZ2V0SWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5ob3N0TGFuZ3VhZ2UgPSBobDtcbiAgICAgICAgcmVzb2x2ZShyZWNhcHRjaGEpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgdXJsID0gYCR7UkVDQVBUQ0hBX0JBU0V9PyR7cXVlcnlzdHJpbmcoe1xuICAgICAgICBvbmxvYWQ6IF9KU0xPQURfQ0FMTEJBQ0ssXG4gICAgICAgIHJlbmRlcjogJ2V4cGxpY2l0JyxcbiAgICAgICAgaGxcbiAgICAgIH0pfWA7XG5cbiAgICAgIGpzSGVscGVycy5fbG9hZEpTKHVybCkuY2F0Y2goKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQobmV0d29ya1RpbWVvdXQpO1xuICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJlZE9uZUluc3RhbmNlKCk6IHZvaWQge1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRSZXNvbHZlSW1tZWRpYXRlbHkoaGw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vIFdlIGNhbiByZXNvbHZlIGltbWVkaWF0ZWx5IGlmOlxuICAgIC8vICAg4oCiIGdyZWNhcHRjaGEgaXMgYWxyZWFkeSBkZWZpbmVkIEFORCAoXG4gICAgLy8gICAgIDEuIHRoZSByZXF1ZXN0ZWQgbGFuZ3VhZ2UgY29kZXMgYXJlIHRoZSBzYW1lIE9SXG4gICAgLy8gICAgIDIuIHRoZXJlIGV4aXN0cyBhbHJlYWR5IGEgUmVDYXB0Y2hhIG9uIHRoZSBwYWdlXG4gICAgLy8gICAgIDMuIHRoZSBsaWJyYXJ5IHdhcyBhbHJlYWR5IGxvYWRlZCBieSB0aGUgYXBwXG4gICAgLy8gSW4gY2FzZXMgKDIpIGFuZCAoMyksIHdlIF9jYW4ndF8gcmVsb2FkIGFzIGl0IHdvdWxkIGJyZWFrIHRoZSByZWNhcHRjaGFzXG4gICAgLy8gdGhhdCBhcmUgYWxyZWFkeSBpbiB0aGUgcGFnZVxuICAgIHJldHVybiAoXG4gICAgICAhIV93aW5kb3coKS5ncmVjYXB0Y2hhPy5yZW5kZXIgJiZcbiAgICAgIChobCA9PT0gdGhpcy5ob3N0TGFuZ3VhZ2UgfHxcbiAgICAgICAgdGhpcy5jb3VudGVyID4gMCB8fFxuICAgICAgICB0aGlzLmxpYnJhcnlTZXBhcmF0ZWx5TG9hZGVkKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNIb3N0TGFuZ3VhZ2VWYWxpZChobDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBobC5sZW5ndGggPD0gNiAmJiAvXlxccypbYS16QS1aMC05XFwtXSpcXHMqJC8udGVzdChobCk7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrUmVDYXB0Y2hhTG9hZGVySW1wbCBpbXBsZW1lbnRzIFJlQ2FwdGNoYUxvYWRlciB7XG4gIGFzeW5jIGxvYWQoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxSZWNhcHRjaGE+IHtcbiAgICByZXR1cm4gbmV3IE1vY2tSZUNhcHRjaGEoYXV0aCk7XG4gIH1cblxuICBjbGVhcmVkT25lSW5zdGFuY2UoKTogdm9pZCB7fVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aCwgUmVjYXB0Y2hhUGFyYW1ldGVycyB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBnZXRSZWNhcHRjaGFQYXJhbXMgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vcmVjYXB0Y2hhJztcbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uLy4uL2NvcmUvYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9pc0h0dHBPckh0dHBzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2xvY2F0aW9uJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2FwcGxpY2F0aW9uX3ZlcmlmaWVyJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgX3dpbmRvdyB9IGZyb20gJy4uL2F1dGhfd2luZG93JztcbmltcG9ydCB7IF9pc1dvcmtlciB9IGZyb20gJy4uL3V0aWwvd29ya2VyJztcbmltcG9ydCB7IFJlY2FwdGNoYSB9IGZyb20gJy4vcmVjYXB0Y2hhJztcbmltcG9ydCB7XG4gIE1vY2tSZUNhcHRjaGFMb2FkZXJJbXBsLFxuICBSZUNhcHRjaGFMb2FkZXIsXG4gIFJlQ2FwdGNoYUxvYWRlckltcGxcbn0gZnJvbSAnLi9yZWNhcHRjaGFfbG9hZGVyJztcblxuZXhwb3J0IGNvbnN0IFJFQ0FQVENIQV9WRVJJRklFUl9UWVBFID0gJ3JlY2FwdGNoYSc7XG5cbmNvbnN0IERFRkFVTFRfUEFSQU1TOiBSZWNhcHRjaGFQYXJhbWV0ZXJzID0ge1xuICB0aGVtZTogJ2xpZ2h0JyxcbiAgdHlwZTogJ2ltYWdlJ1xufTtcblxudHlwZSBUb2tlbkNhbGxiYWNrID0gKHRva2VuOiBzdHJpbmcpID0+IHZvaWQ7XG5cbi8qKlxuICogQW4ge0BsaW5rIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhLyB8IHJlQ0FQVENIQX0tYmFzZWQgYXBwbGljYXRpb24gdmVyaWZpZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUmVjYXB0Y2hhVmVyaWZpZXIgaW1wbGVtZW50cyBBcHBsaWNhdGlvblZlcmlmaWVySW50ZXJuYWwge1xuICAvKipcbiAgICogVGhlIGFwcGxpY2F0aW9uIHZlcmlmaWVyIHR5cGUuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIEZvciBhIHJlQ0FQVENIQSB2ZXJpZmllciwgdGhpcyBpcyAncmVjYXB0Y2hhJy5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGUgPSBSRUNBUFRDSEFfVkVSSUZJRVJfVFlQRTtcbiAgcHJpdmF0ZSBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSB3aWRnZXRJZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSByZWFkb25seSBpc0ludmlzaWJsZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWFkb25seSB0b2tlbkNoYW5nZUxpc3RlbmVycyA9IG5ldyBTZXQ8VG9rZW5DYWxsYmFjaz4oKTtcbiAgcHJpdmF0ZSByZW5kZXJQcm9taXNlOiBQcm9taXNlPG51bWJlcj4gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWFkb25seSBhdXRoOiBBdXRoSW50ZXJuYWw7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICByZWFkb25seSBfcmVjYXB0Y2hhTG9hZGVyOiBSZUNhcHRjaGFMb2FkZXI7XG4gIHByaXZhdGUgcmVjYXB0Y2hhOiBSZWNhcHRjaGEgfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGNvbnRhaW5lck9ySWQgLSBUaGUgcmVDQVBUQ0hBIGNvbnRhaW5lciBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFRoaXMgaGFzIGRpZmZlcmVudCBtZWFuaW5nIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSByZUNBUFRDSEEgaXMgaGlkZGVuIG9yIHZpc2libGUuIEZvciBhXG4gICAqIHZpc2libGUgcmVDQVBUQ0hBIHRoZSBjb250YWluZXIgbXVzdCBiZSBlbXB0eS4gSWYgYSBzdHJpbmcgaXMgdXNlZCwgaXQgaGFzIHRvIGNvcnJlc3BvbmQgdG9cbiAgICogYW4gZWxlbWVudCBJRC4gVGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBtdXN0IGFsc28gbXVzdCBiZSBpbiB0aGUgRE9NIGF0IHRoZSB0aW1lIG9mXG4gICAqIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIFRoZSBvcHRpb25hbCByZUNBUFRDSEEgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogQ2hlY2sgdGhlIHJlQ0FQVENIQSBkb2NzIGZvciBhIGNvbXByZWhlbnNpdmUgbGlzdC4gQWxsIHBhcmFtZXRlcnMgYXJlIGFjY2VwdGVkIGV4Y2VwdCBmb3JcbiAgICogdGhlIHNpdGVrZXkuIEZpcmViYXNlIEF1dGggYmFja2VuZCBwcm92aXNpb25zIGEgcmVDQVBUQ0hBIGZvciBlYWNoIHByb2plY3QgYW5kIHdpbGxcbiAgICogY29uZmlndXJlIHRoaXMgdXBvbiByZW5kZXJpbmcuIEZvciBhbiBpbnZpc2libGUgcmVDQVBUQ0hBLCBhIHNpemUga2V5IG11c3QgaGF2ZSB0aGUgdmFsdWVcbiAgICogJ2ludmlzaWJsZScuXG4gICAqXG4gICAqIEBwYXJhbSBhdXRoRXh0ZXJuIC0gVGhlIGNvcnJlc3BvbmRpbmcgRmlyZWJhc2Uge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29udGFpbmVyT3JJZDogSFRNTEVsZW1lbnQgfCBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJhbWV0ZXJzOiBSZWNhcHRjaGFQYXJhbWV0ZXJzID0ge1xuICAgICAgLi4uREVGQVVMVF9QQVJBTVNcbiAgICB9LFxuICAgIGF1dGhFeHRlcm46IEF1dGhcbiAgKSB7XG4gICAgdGhpcy5hdXRoID0gX2Nhc3RBdXRoKGF1dGhFeHRlcm4pO1xuICAgIHRoaXMuaXNJbnZpc2libGUgPSB0aGlzLnBhcmFtZXRlcnMuc2l6ZSA9PT0gJ2ludmlzaWJsZSc7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXG4gICAgKTtcbiAgICBjb25zdCBjb250YWluZXIgPVxuICAgICAgdHlwZW9mIGNvbnRhaW5lck9ySWQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVyT3JJZClcbiAgICAgICAgOiBjb250YWluZXJPcklkO1xuICAgIF9hc3NlcnQoY29udGFpbmVyLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5wYXJhbWV0ZXJzLmNhbGxiYWNrID0gdGhpcy5tYWtlVG9rZW5DYWxsYmFjayh0aGlzLnBhcmFtZXRlcnMuY2FsbGJhY2spO1xuXG4gICAgdGhpcy5fcmVjYXB0Y2hhTG9hZGVyID0gdGhpcy5hdXRoLnNldHRpbmdzLmFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ1xuICAgICAgPyBuZXcgTW9ja1JlQ2FwdGNoYUxvYWRlckltcGwoKVxuICAgICAgOiBuZXcgUmVDYXB0Y2hhTG9hZGVySW1wbCgpO1xuXG4gICAgdGhpcy52YWxpZGF0ZVN0YXJ0aW5nU3RhdGUoKTtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IGlmIHNkayB2ZXJzaW9uIGlzIG5lZWRlZFxuICB9XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciB0aGUgdXNlciB0byBzb2x2ZSB0aGUgcmVDQVBUQ0hBIGFuZCByZXNvbHZlcyB3aXRoIHRoZSByZUNBUFRDSEEgdG9rZW4uXG4gICAqXG4gICAqIEByZXR1cm5zIEEgUHJvbWlzZSBmb3IgdGhlIHJlQ0FQVENIQSB0b2tlbi5cbiAgICovXG4gIGFzeW5jIHZlcmlmeSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgY29uc3QgaWQgPSBhd2FpdCB0aGlzLnJlbmRlcigpO1xuICAgIGNvbnN0IHJlY2FwdGNoYSA9IHRoaXMuZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gcmVjYXB0Y2hhLmdldFJlc3BvbnNlKGlkKTtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPihyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IHRva2VuQ2hhbmdlID0gKHRva2VuOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgIHJldHVybjsgLy8gSWdub3JlIHRva2VuIGV4cGlyYXRpb25zLlxuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9rZW5DaGFuZ2VMaXN0ZW5lcnMuZGVsZXRlKHRva2VuQ2hhbmdlKTtcbiAgICAgICAgcmVzb2x2ZSh0b2tlbik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnRva2VuQ2hhbmdlTGlzdGVuZXJzLmFkZCh0b2tlbkNoYW5nZSk7XG4gICAgICBpZiAodGhpcy5pc0ludmlzaWJsZSkge1xuICAgICAgICByZWNhcHRjaGEuZXhlY3V0ZShpZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgcmVDQVBUQ0hBIHdpZGdldCBvbiB0aGUgcGFnZS5cbiAgICpcbiAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVDQVBUQ0hBIHdpZGdldCBJRC5cbiAgICovXG4gIHJlbmRlcigpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmFzc2VydE5vdERlc3Ryb3llZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgYSBwcm9taXNlLiBTaW5jZSBpdCdzIG5vdCBhc3luYyAod2Ugd2FudCB0byByZXR1cm4gdGhlXG4gICAgICAvLyBfc2FtZV8gcHJvbWlzZSBpZiByZW5kZXJpbmcgaXMgc3RpbGwgb2NjdXJyaW5nKSwgdGhlIEFQSSBzdXJmYWNlIHNob3VsZFxuICAgICAgLy8gcmVqZWN0IHdpdGggdGhlIGVycm9yIHJhdGhlciB0aGFuIGp1c3QgdGhyb3dcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJQcm9taXNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9taXNlO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyUHJvbWlzZSA9IHRoaXMubWFrZVJlbmRlclByb21pc2UoKS5jYXRjaChlID0+IHtcbiAgICAgIHRoaXMucmVuZGVyUHJvbWlzZSA9IG51bGw7XG4gICAgICB0aHJvdyBlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyUHJvbWlzZTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3Jlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgaWYgKHRoaXMud2lkZ2V0SWQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKS5yZXNldCh0aGlzLndpZGdldElkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSByZUNBUFRDSEEgd2lkZ2V0IGZyb20gdGhlIHBhZ2UgYW5kIGRlc3Ryb3lzIHRoZSBpbnN0YW5jZS5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3JlY2FwdGNoYUxvYWRlci5jbGVhcmVkT25lSW5zdGFuY2UoKTtcbiAgICBpZiAoIXRoaXMuaXNJbnZpc2libGUpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlU3RhcnRpbmdTdGF0ZSgpOiB2b2lkIHtcbiAgICBfYXNzZXJ0KCF0aGlzLnBhcmFtZXRlcnMuc2l0ZWtleSwgdGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICBfYXNzZXJ0KFxuICAgICAgdGhpcy5pc0ludmlzaWJsZSB8fCAhdGhpcy5jb250YWluZXIuaGFzQ2hpbGROb2RlcygpLFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICAgICk7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgbWFrZVRva2VuQ2FsbGJhY2soXG4gICAgZXhpc3Rpbmc6IFRva2VuQ2FsbGJhY2sgfCBzdHJpbmcgfCB1bmRlZmluZWRcbiAgKTogVG9rZW5DYWxsYmFjayB7XG4gICAgcmV0dXJuIHRva2VuID0+IHtcbiAgICAgIHRoaXMudG9rZW5DaGFuZ2VMaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcih0b2tlbikpO1xuICAgICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBleGlzdGluZyh0b2tlbik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgZ2xvYmFsRnVuYyA9IF93aW5kb3coKVtleGlzdGluZ107XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsRnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdsb2JhbEZ1bmModG9rZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXNzZXJ0Tm90RGVzdHJveWVkKCk6IHZvaWQge1xuICAgIF9hc3NlcnQoIXRoaXMuZGVzdHJveWVkLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVuZGVyUHJvbWlzZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xuICAgIGlmICghdGhpcy53aWRnZXRJZCkge1xuICAgICAgbGV0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgaWYgKCF0aGlzLmlzSW52aXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IGd1YXJhbnRlZWRFbXB0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3VhcmFudGVlZEVtcHR5KTtcbiAgICAgICAgY29udGFpbmVyID0gZ3VhcmFudGVlZEVtcHR5O1xuICAgICAgfVxuXG4gICAgICB0aGlzLndpZGdldElkID0gdGhpcy5nZXRBc3NlcnRlZFJlY2FwdGNoYSgpLnJlbmRlcihcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICB0aGlzLnBhcmFtZXRlcnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMud2lkZ2V0SWQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgX2Fzc2VydChcbiAgICAgIF9pc0h0dHBPckh0dHBzKCkgJiYgIV9pc1dvcmtlcigpLFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG5cbiAgICBhd2FpdCBkb21SZWFkeSgpO1xuICAgIHRoaXMucmVjYXB0Y2hhID0gYXdhaXQgdGhpcy5fcmVjYXB0Y2hhTG9hZGVyLmxvYWQoXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICB0aGlzLmF1dGgubGFuZ3VhZ2VDb2RlIHx8IHVuZGVmaW5lZFxuICAgICk7XG5cbiAgICBjb25zdCBzaXRlS2V5ID0gYXdhaXQgZ2V0UmVjYXB0Y2hhUGFyYW1zKHRoaXMuYXV0aCk7XG4gICAgX2Fzc2VydChzaXRlS2V5LCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHRoaXMucGFyYW1ldGVycy5zaXRla2V5ID0gc2l0ZUtleTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKTogUmVjYXB0Y2hhIHtcbiAgICBfYXNzZXJ0KHRoaXMucmVjYXB0Y2hhLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHJldHVybiB0aGlzLnJlY2FwdGNoYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkb21SZWFkeSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbGV0IHJlc29sdmVyOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9jdW1lbnQgbm90IHJlYWR5LCB3YWl0IGZvciBsb2FkIGJlZm9yZSByZXNvbHZpbmcuXG4gICAgLy8gU2F2ZSByZXNvbHZlciwgc28gd2UgY2FuIHJlbW92ZSBsaXN0ZW5lciBpbiBjYXNlIGl0IHdhcyBleHRlcm5hbGx5XG4gICAgLy8gY2FuY2VsbGVkLlxuICAgIHJlc29sdmVyID0gKCkgPT4gcmVzb2x2ZSgpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZXIpO1xuICB9KS5jYXRjaChlID0+IHtcbiAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHRocm93IGU7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQXBwbGljYXRpb25WZXJpZmllcixcbiAgQXV0aCxcbiAgQ29uZmlybWF0aW9uUmVzdWx0LFxuICBQaG9uZUluZm9PcHRpb25zLFxuICBVc2VyLFxuICBVc2VyQ3JlZGVudGlhbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBzdGFydEVucm9sbFBob25lTWZhIH0gZnJvbSAnLi4vLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9tZmEnO1xuaW1wb3J0IHsgc3RhcnRTaWduSW5QaG9uZU1mYSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgc2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9zbXMnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25WZXJpZmllckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXBwbGljYXRpb25fdmVyaWZpZXInO1xuaW1wb3J0IHsgUGhvbmVBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvcmUvY3JlZGVudGlhbHMvcGhvbmUnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnRMaW5rZWRTdGF0dXMsIF9saW5rIH0gZnJvbSAnLi4vLi4vY29yZS91c2VyL2xpbmtfdW5saW5rJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHtcbiAgbGlua1dpdGhDcmVkZW50aWFsLFxuICByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsLFxuICBzaWduSW5XaXRoQ3JlZGVudGlhbFxufSBmcm9tICcuLi8uLi9jb3JlL3N0cmF0ZWdpZXMvY3JlZGVudGlhbCc7XG5pbXBvcnQge1xuICBNdWx0aUZhY3RvclNlc3Npb25JbXBsLFxuICBNdWx0aUZhY3RvclNlc3Npb25UeXBlXG59IGZyb20gJy4uLy4uL21mYS9tZmFfc2Vzc2lvbic7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IFJFQ0FQVENIQV9WRVJJRklFUl9UWVBFIH0gZnJvbSAnLi4vcmVjYXB0Y2hhL3JlY2FwdGNoYV92ZXJpZmllcic7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi8uLi9jb3JlL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IFByb3ZpZGVySWQgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbmludGVyZmFjZSBPbkNvbmZpcm1hdGlvbkNhbGxiYWNrIHtcbiAgKGNyZWRlbnRpYWw6IFBob25lQXV0aENyZWRlbnRpYWwpOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPjtcbn1cblxuY2xhc3MgQ29uZmlybWF0aW9uUmVzdWx0SW1wbCBpbXBsZW1lbnRzIENvbmZpcm1hdGlvblJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHZlcmlmaWNhdGlvbklkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBvbkNvbmZpcm1hdGlvbjogT25Db25maXJtYXRpb25DYWxsYmFja1xuICApIHt9XG5cbiAgY29uZmlybSh2ZXJpZmljYXRpb25Db2RlOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gICAgY29uc3QgYXV0aENyZWRlbnRpYWwgPSBQaG9uZUF1dGhDcmVkZW50aWFsLl9mcm9tVmVyaWZpY2F0aW9uKFxuICAgICAgdGhpcy52ZXJpZmljYXRpb25JZCxcbiAgICAgIHZlcmlmaWNhdGlvbkNvZGVcbiAgICApO1xuICAgIHJldHVybiB0aGlzLm9uQ29uZmlybWF0aW9uKGF1dGhDcmVkZW50aWFsKTtcbiAgfVxufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGEgcGhvbmUgbnVtYmVyLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIG1ldGhvZCBzZW5kcyBhIGNvZGUgdmlhIFNNUyB0byB0aGUgZ2l2ZW5cbiAqIHBob25lIG51bWJlciwgYW5kIHJldHVybnMgYSB7QGxpbmsgQ29uZmlybWF0aW9uUmVzdWx0fS4gQWZ0ZXIgdGhlIHVzZXJcbiAqIHByb3ZpZGVzIHRoZSBjb2RlIHNlbnQgdG8gdGhlaXIgcGhvbmUsIGNhbGwge0BsaW5rIENvbmZpcm1hdGlvblJlc3VsdC5jb25maXJtfVxuICogd2l0aCB0aGUgY29kZSB0byBzaWduIHRoZSB1c2VyIGluLlxuICpcbiAqIEZvciBhYnVzZSBwcmV2ZW50aW9uLCB0aGlzIG1ldGhvZCBhbHNvIHJlcXVpcmVzIGEge0BsaW5rIEFwcGxpY2F0aW9uVmVyaWZpZXJ9LlxuICogVGhpcyBTREsgaW5jbHVkZXMgYSByZUNBUFRDSEEtYmFzZWQgaW1wbGVtZW50YXRpb24sIHtAbGluayBSZWNhcHRjaGFWZXJpZmllcn0uXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiB3b3JrIG9uIG90aGVyIHBsYXRmb3JtcyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZVxuICoge0BsaW5rIFJlY2FwdGNoYVZlcmlmaWVyfSAobGlrZSBSZWFjdCBOYXRpdmUpLCBidXQgeW91IG5lZWQgdG8gdXNlIGFcbiAqIHRoaXJkLXBhcnR5IHtAbGluayBBcHBsaWNhdGlvblZlcmlmaWVyfSBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gJ3JlY2FwdGNoYS1jb250YWluZXInIGlzIHRoZSBJRCBvZiBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gKiBjb25zdCBhcHBsaWNhdGlvblZlcmlmaWVyID0gbmV3IGZpcmViYXNlLmF1dGguUmVjYXB0Y2hhVmVyaWZpZXIoJ3JlY2FwdGNoYS1jb250YWluZXInKTtcbiAqIGNvbnN0IGNvbmZpcm1hdGlvblJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhQaG9uZU51bWJlcihhdXRoLCBwaG9uZU51bWJlciwgYXBwbGljYXRpb25WZXJpZmllcik7XG4gKiAvLyBPYnRhaW4gYSB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXG4gKiBjb25zdCBjcmVkZW50aWFsID0gYXdhaXQgY29uZmlybWF0aW9uUmVzdWx0LmNvbmZpcm0odmVyaWZpY2F0aW9uQ29kZSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gcGhvbmVOdW1iZXIgLSBUaGUgdXNlcidzIHBob25lIG51bWJlciBpbiBFLjE2NCBmb3JtYXQgKGUuZy4gKzE2NTA1NTUwMTAxKS5cbiAqIEBwYXJhbSBhcHBWZXJpZmllciAtIFRoZSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBob25lTnVtYmVyKFxuICBhdXRoOiBBdXRoLFxuICBwaG9uZU51bWJlcjogc3RyaW5nLFxuICBhcHBWZXJpZmllcjogQXBwbGljYXRpb25WZXJpZmllclxuKTogUHJvbWlzZTxDb25maXJtYXRpb25SZXN1bHQ+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IF92ZXJpZnlQaG9uZU51bWJlcihcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgcGhvbmVOdW1iZXIsXG4gICAgZ2V0TW9kdWxhckluc3RhbmNlKGFwcFZlcmlmaWVyIGFzIEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbClcbiAgKTtcbiAgcmV0dXJuIG5ldyBDb25maXJtYXRpb25SZXN1bHRJbXBsKHZlcmlmaWNhdGlvbklkLCBjcmVkID0+XG4gICAgc2lnbkluV2l0aENyZWRlbnRpYWwoYXV0aEludGVybmFsLCBjcmVkKVxuICApO1xufVxuXG4vKipcbiAqIExpbmtzIHRoZSB1c2VyIGFjY291bnQgd2l0aCB0aGUgZ2l2ZW4gcGhvbmUgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gcGhvbmVOdW1iZXIgLSBUaGUgdXNlcidzIHBob25lIG51bWJlciBpbiBFLjE2NCBmb3JtYXQgKGUuZy4gKzE2NTA1NTUwMTAxKS5cbiAqIEBwYXJhbSBhcHBWZXJpZmllciAtIFRoZSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlua1dpdGhQaG9uZU51bWJlcihcbiAgdXNlcjogVXNlcixcbiAgcGhvbmVOdW1iZXI6IHN0cmluZyxcbiAgYXBwVmVyaWZpZXI6IEFwcGxpY2F0aW9uVmVyaWZpZXJcbik6IFByb21pc2U8Q29uZmlybWF0aW9uUmVzdWx0PiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWw7XG4gIGF3YWl0IF9hc3NlcnRMaW5rZWRTdGF0dXMoZmFsc2UsIHVzZXJJbnRlcm5hbCwgUHJvdmlkZXJJZC5QSE9ORSk7XG4gIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gYXdhaXQgX3ZlcmlmeVBob25lTnVtYmVyKFxuICAgIHVzZXJJbnRlcm5hbC5hdXRoLFxuICAgIHBob25lTnVtYmVyLFxuICAgIGdldE1vZHVsYXJJbnN0YW5jZShhcHBWZXJpZmllciBhcyBBcHBsaWNhdGlvblZlcmlmaWVySW50ZXJuYWwpXG4gICk7XG4gIHJldHVybiBuZXcgQ29uZmlybWF0aW9uUmVzdWx0SW1wbCh2ZXJpZmljYXRpb25JZCwgY3JlZCA9PlxuICAgIGxpbmtXaXRoQ3JlZGVudGlhbCh1c2VySW50ZXJuYWwsIGNyZWQpXG4gICk7XG59XG5cbi8qKlxuICogUmUtYXV0aGVudGljYXRlcyBhIHVzZXIgdXNpbmcgYSBmcmVzaCBwaG9uZSBjcmVkZW50aWFsLlxuICpcbiAqIEByZW1hcmtzIFVzZSBiZWZvcmUgb3BlcmF0aW9ucyBzdWNoIGFzIHtAbGluayB1cGRhdGVQYXNzd29yZH0gdGhhdCByZXF1aXJlIHRva2VucyBmcm9tIHJlY2VudCBzaWduLWluIGF0dGVtcHRzLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gcGhvbmVOdW1iZXIgLSBUaGUgdXNlcidzIHBob25lIG51bWJlciBpbiBFLjE2NCBmb3JtYXQgKGUuZy4gKzE2NTA1NTUwMTAxKS5cbiAqIEBwYXJhbSBhcHBWZXJpZmllciAtIFRoZSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhdXRoZW50aWNhdGVXaXRoUGhvbmVOdW1iZXIoXG4gIHVzZXI6IFVzZXIsXG4gIHBob25lTnVtYmVyOiBzdHJpbmcsXG4gIGFwcFZlcmlmaWVyOiBBcHBsaWNhdGlvblZlcmlmaWVyXG4pOiBQcm9taXNlPENvbmZpcm1hdGlvblJlc3VsdD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IF92ZXJpZnlQaG9uZU51bWJlcihcbiAgICB1c2VySW50ZXJuYWwuYXV0aCxcbiAgICBwaG9uZU51bWJlcixcbiAgICBnZXRNb2R1bGFySW5zdGFuY2UoYXBwVmVyaWZpZXIgYXMgQXBwbGljYXRpb25WZXJpZmllckludGVybmFsKVxuICApO1xuICByZXR1cm4gbmV3IENvbmZpcm1hdGlvblJlc3VsdEltcGwodmVyaWZpY2F0aW9uSWQsIGNyZWQgPT5cbiAgICByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsKHVzZXJJbnRlcm5hbCwgY3JlZClcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmVyaWZpY2F0aW9uIElEIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgU01TIGNvZGUgdGhhdCBpcyBzZW50LlxuICpcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF92ZXJpZnlQaG9uZU51bWJlcihcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICBvcHRpb25zOiBQaG9uZUluZm9PcHRpb25zIHwgc3RyaW5nLFxuICB2ZXJpZmllcjogQXBwbGljYXRpb25WZXJpZmllckludGVybmFsXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCByZWNhcHRjaGFUb2tlbiA9IGF3YWl0IHZlcmlmaWVyLnZlcmlmeSgpO1xuXG4gIHRyeSB7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiByZWNhcHRjaGFUb2tlbiA9PT0gJ3N0cmluZycsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICAgICk7XG4gICAgX2Fzc2VydChcbiAgICAgIHZlcmlmaWVyLnR5cGUgPT09IFJFQ0FQVENIQV9WRVJJRklFUl9UWVBFLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuXG4gICAgbGV0IHBob25lSW5mb09wdGlvbnM6IFBob25lSW5mb09wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwaG9uZUluZm9PcHRpb25zID0ge1xuICAgICAgICBwaG9uZU51bWJlcjogb3B0aW9uc1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGhvbmVJbmZvT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKCdzZXNzaW9uJyBpbiBwaG9uZUluZm9PcHRpb25zKSB7XG4gICAgICBjb25zdCBzZXNzaW9uID0gcGhvbmVJbmZvT3B0aW9ucy5zZXNzaW9uIGFzIE11bHRpRmFjdG9yU2Vzc2lvbkltcGw7XG5cbiAgICAgIGlmICgncGhvbmVOdW1iZXInIGluIHBob25lSW5mb09wdGlvbnMpIHtcbiAgICAgICAgX2Fzc2VydChcbiAgICAgICAgICBzZXNzaW9uLnR5cGUgPT09IE11bHRpRmFjdG9yU2Vzc2lvblR5cGUuRU5ST0xMLFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICAgICApO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN0YXJ0RW5yb2xsUGhvbmVNZmEoYXV0aCwge1xuICAgICAgICAgIGlkVG9rZW46IHNlc3Npb24uY3JlZGVudGlhbCxcbiAgICAgICAgICBwaG9uZUVucm9sbG1lbnRJbmZvOiB7XG4gICAgICAgICAgICBwaG9uZU51bWJlcjogcGhvbmVJbmZvT3B0aW9ucy5waG9uZU51bWJlcixcbiAgICAgICAgICAgIHJlY2FwdGNoYVRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnBob25lU2Vzc2lvbkluZm8uc2Vzc2lvbkluZm87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfYXNzZXJ0KFxuICAgICAgICAgIHNlc3Npb24udHlwZSA9PT0gTXVsdGlGYWN0b3JTZXNzaW9uVHlwZS5TSUdOX0lOLFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtZmFFbnJvbGxtZW50SWQgPVxuICAgICAgICAgIHBob25lSW5mb09wdGlvbnMubXVsdGlGYWN0b3JIaW50Py51aWQgfHxcbiAgICAgICAgICBwaG9uZUluZm9PcHRpb25zLm11bHRpRmFjdG9yVWlkO1xuICAgICAgICBfYXNzZXJ0KG1mYUVucm9sbG1lbnRJZCwgYXV0aCwgQXV0aEVycm9yQ29kZS5NSVNTSU5HX01GQV9JTkZPKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdGFydFNpZ25JblBob25lTWZhKGF1dGgsIHtcbiAgICAgICAgICBtZmFQZW5kaW5nQ3JlZGVudGlhbDogc2Vzc2lvbi5jcmVkZW50aWFsLFxuICAgICAgICAgIG1mYUVucm9sbG1lbnRJZCxcbiAgICAgICAgICBwaG9uZVNpZ25JbkluZm86IHtcbiAgICAgICAgICAgIHJlY2FwdGNoYVRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnBob25lUmVzcG9uc2VJbmZvLnNlc3Npb25JbmZvO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IHNlc3Npb25JbmZvIH0gPSBhd2FpdCBzZW5kUGhvbmVWZXJpZmljYXRpb25Db2RlKGF1dGgsIHtcbiAgICAgICAgcGhvbmVOdW1iZXI6IHBob25lSW5mb09wdGlvbnMucGhvbmVOdW1iZXIsXG4gICAgICAgIHJlY2FwdGNoYVRva2VuXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZXNzaW9uSW5mbztcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgdmVyaWZpZXIuX3Jlc2V0KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSB1c2VyJ3MgcGhvbmUgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIC8vICdyZWNhcHRjaGEtY29udGFpbmVyJyBpcyB0aGUgSUQgb2YgYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxuICogY29uc3QgYXBwbGljYXRpb25WZXJpZmllciA9IG5ldyBSZWNhcHRjaGFWZXJpZmllcigncmVjYXB0Y2hhLWNvbnRhaW5lcicpO1xuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgUGhvbmVBdXRoUHJvdmlkZXIoYXV0aCk7XG4gKiBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IHByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyKCcrMTY1MDU1NTAxMDEnLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcbiAqIC8vIE9idGFpbiB0aGUgdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICogY29uc3QgcGhvbmVDcmVkZW50aWFsID0gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSk7XG4gKiBhd2FpdCB1cGRhdGVQaG9uZU51bWJlcih1c2VyLCBwaG9uZUNyZWRlbnRpYWwpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gQSBjcmVkZW50aWFsIGF1dGhlbnRpY2F0aW5nIHRoZSBuZXcgcGhvbmUgbnVtYmVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBob25lTnVtYmVyKFxuICB1c2VyOiBVc2VyLFxuICBjcmVkZW50aWFsOiBQaG9uZUF1dGhDcmVkZW50aWFsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgYXdhaXQgX2xpbmsoZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbCwgY3JlZGVudGlhbCk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBBdXRoLFxuICBQaG9uZUluZm9PcHRpb25zLFxuICBBcHBsaWNhdGlvblZlcmlmaWVyLFxuICBVc2VyQ3JlZGVudGlhbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9zbXMnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25WZXJpZmllckludGVybmFsIGFzIEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2FwcGxpY2F0aW9uX3ZlcmlmaWVyJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCBhcyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgYXMgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgUGhvbmVBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvcmUvY3JlZGVudGlhbHMvcGhvbmUnO1xuaW1wb3J0IHsgX3ZlcmlmeVBob25lTnVtYmVyIH0gZnJvbSAnLi4vc3RyYXRlZ2llcy9waG9uZSc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi8uLi9jb3JlL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yLCBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IFByb3ZpZGVySWQsIFNpZ25Jbk1ldGhvZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuLyoqXG4gKiBQcm92aWRlciBmb3IgZ2VuZXJhdGluZyBhbiB7QGxpbmsgUGhvbmVBdXRoQ3JlZGVudGlhbH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vICdyZWNhcHRjaGEtY29udGFpbmVyJyBpcyB0aGUgSUQgb2YgYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxuICogY29uc3QgYXBwbGljYXRpb25WZXJpZmllciA9IG5ldyBSZWNhcHRjaGFWZXJpZmllcigncmVjYXB0Y2hhLWNvbnRhaW5lcicpO1xuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgUGhvbmVBdXRoUHJvdmlkZXIoYXV0aCk7XG4gKiBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IHByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyKCcrMTY1MDU1NTAxMDEnLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcbiAqIC8vIE9idGFpbiB0aGUgdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICogY29uc3QgcGhvbmVDcmVkZW50aWFsID0gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSk7XG4gKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIHBob25lQ3JlZGVudGlhbCk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBQaG9uZUF1dGhQcm92aWRlciB7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5QSE9ORS4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAncGhvbmUnID0gUHJvdmlkZXJJZC5QSE9ORTtcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uUEhPTkUuICovXG4gIHN0YXRpYyByZWFkb25seSBQSE9ORV9TSUdOX0lOX01FVEhPRDogJ3Bob25lJyA9IFNpZ25Jbk1ldGhvZC5QSE9ORTtcblxuICAvKiogQWx3YXlzIHNldCB0byB7QGxpbmsgUHJvdmlkZXJJZH0uUEhPTkUuICovXG4gIHJlYWRvbmx5IHByb3ZpZGVySWQgPSBQaG9uZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRDtcbiAgcHJpdmF0ZSByZWFkb25seSBhdXRoOiBBdXRoSW50ZXJuYWw7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhdXRoIC0gVGhlIEZpcmViYXNlIHtAbGluayBBdXRofSBpbnN0YW5jZSBpbiB3aGljaCBzaWduLWlucyBzaG91bGQgb2NjdXIuXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhdXRoOiBBdXRoKSB7XG4gICAgdGhpcy5hdXRoID0gX2Nhc3RBdXRoKGF1dGgpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFN0YXJ0cyBhIHBob25lIG51bWJlciBhdXRoZW50aWNhdGlvbiBmbG93IGJ5IHNlbmRpbmcgYSB2ZXJpZmljYXRpb24gY29kZSB0byB0aGUgZ2l2ZW4gcGhvbmVcbiAgICogbnVtYmVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IFBob25lQXV0aFByb3ZpZGVyKGF1dGgpO1xuICAgKiBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IHByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyKHBob25lTnVtYmVyLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcbiAgICogLy8gT2J0YWluIHZlcmlmaWNhdGlvbkNvZGUgZnJvbSB0aGUgdXNlci5cbiAgICogY29uc3QgYXV0aENyZWRlbnRpYWwgPSBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsKHZlcmlmaWNhdGlvbklkLCB2ZXJpZmljYXRpb25Db2RlKTtcbiAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoLCBhdXRoQ3JlZGVudGlhbCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBBbiBhbHRlcm5hdGl2ZSBmbG93IGlzIHByb3ZpZGVkIHVzaW5nIHRoZSBgc2lnbkluV2l0aFBob25lTnVtYmVyYCBtZXRob2QuXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgY29uZmlybWF0aW9uUmVzdWx0ID0gc2lnbkluV2l0aFBob25lTnVtYmVyKGF1dGgsIHBob25lTnVtYmVyLCBhcHBsaWNhdGlvblZlcmlmaWVyKTtcbiAgICogLy8gT2J0YWluIHZlcmlmaWNhdGlvbkNvZGUgZnJvbSB0aGUgdXNlci5cbiAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBjb25maXJtYXRpb25SZXN1bHQuY29uZmlybSh2ZXJpZmljYXRpb25Db2RlKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBwaG9uZUluZm9PcHRpb25zIC0gVGhlIHVzZXIncyB7QGxpbmsgUGhvbmVJbmZvT3B0aW9uc30uIFRoZSBwaG9uZSBudW1iZXIgc2hvdWxkIGJlIGluXG4gICAqIEUuMTY0IGZvcm1hdCAoZS5nLiArMTY1MDU1NTAxMDEpLlxuICAgKiBAcGFyYW0gYXBwbGljYXRpb25WZXJpZmllciAtIEZvciBhYnVzZSBwcmV2ZW50aW9uLCB0aGlzIG1ldGhvZCBhbHNvIHJlcXVpcmVzIGFcbiAgICoge0BsaW5rIEFwcGxpY2F0aW9uVmVyaWZpZXJ9LiBUaGlzIFNESyBpbmNsdWRlcyBhIHJlQ0FQVENIQS1iYXNlZCBpbXBsZW1lbnRhdGlvbixcbiAgICoge0BsaW5rIFJlY2FwdGNoYVZlcmlmaWVyfS5cbiAgICpcbiAgICogQHJldHVybnMgQSBQcm9taXNlIGZvciBhIHZlcmlmaWNhdGlvbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cbiAgICoge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWx9IHRvIGlkZW50aWZ5IHRoaXMgZmxvdy4uXG4gICAqL1xuICB2ZXJpZnlQaG9uZU51bWJlcihcbiAgICBwaG9uZU9wdGlvbnM6IFBob25lSW5mb09wdGlvbnMgfCBzdHJpbmcsXG4gICAgYXBwbGljYXRpb25WZXJpZmllcjogQXBwbGljYXRpb25WZXJpZmllclxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBfdmVyaWZ5UGhvbmVOdW1iZXIoXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICBwaG9uZU9wdGlvbnMsXG4gICAgICBnZXRNb2R1bGFySW5zdGFuY2UoYXBwbGljYXRpb25WZXJpZmllciBhcyBBcHBsaWNhdGlvblZlcmlmaWVySW50ZXJuYWwpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcGhvbmUgYXV0aCBjcmVkZW50aWFsLCBnaXZlbiB0aGUgdmVyaWZpY2F0aW9uIElEIGZyb21cbiAgICoge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyfSBhbmQgdGhlIGNvZGUgdGhhdCB3YXMgc2VudCB0byB0aGUgdXNlcidzXG4gICAqIG1vYmlsZSBkZXZpY2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcHJvdmlkZXIgPSBuZXcgUGhvbmVBdXRoUHJvdmlkZXIoYXV0aCk7XG4gICAqIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gcHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXIocGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xuICAgKiAvLyBPYnRhaW4gdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICAgKiBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xuICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIGF1dGhDcmVkZW50aWFsKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEFuIGFsdGVybmF0aXZlIGZsb3cgaXMgcHJvdmlkZWQgdXNpbmcgdGhlIGBzaWduSW5XaXRoUGhvbmVOdW1iZXJgIG1ldGhvZC5cbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBjb25maXJtYXRpb25SZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUGhvbmVOdW1iZXIoYXV0aCwgcGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xuICAgKiAvLyBPYnRhaW4gdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IGNvbmZpcm1hdGlvblJlc3VsdC5jb25maXJtKHZlcmlmaWNhdGlvbkNvZGUpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHZlcmlmaWNhdGlvbklkIC0gVGhlIHZlcmlmaWNhdGlvbiBJRCByZXR1cm5lZCBmcm9tIHtAbGluayBQaG9uZUF1dGhQcm92aWRlci52ZXJpZnlQaG9uZU51bWJlcn0uXG4gICAqIEBwYXJhbSB2ZXJpZmljYXRpb25Db2RlIC0gVGhlIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIncyBtb2JpbGUgZGV2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgYXV0aCBwcm92aWRlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWwoXG4gICAgdmVyaWZpY2F0aW9uSWQ6IHN0cmluZyxcbiAgICB2ZXJpZmljYXRpb25Db2RlOiBzdHJpbmdcbiAgKTogUGhvbmVBdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIFBob25lQXV0aENyZWRlbnRpYWwuX2Zyb21WZXJpZmljYXRpb24oXG4gICAgICB2ZXJpZmljYXRpb25JZCxcbiAgICAgIHZlcmlmaWNhdGlvbkNvZGVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgVXNlckNyZWRlbnRpYWx9LlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tUmVzdWx0KFxuICAgIHVzZXJDcmVkZW50aWFsOiBVc2VyQ3JlZGVudGlhbFxuICApOiBBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGNvbnN0IGNyZWRlbnRpYWwgPSB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsO1xuICAgIHJldHVybiBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChjcmVkZW50aWFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0gd2hlbiBwYXNzZWQgYW4gZXJyb3IuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHdvcmtzIGZvciBlcnJvcnMgbGlrZVxuICAgKiBgYXV0aC9hY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsc2AuIFRoaXMgaXMgdXNlZnVsIGZvclxuICAgKiByZWNvdmVyaW5nIHdoZW4gYXR0ZW1wdGluZyB0byBzZXQgYSB1c2VyJ3MgcGhvbmUgbnVtYmVyIGJ1dCB0aGUgbnVtYmVyXG4gICAqIGluIHF1ZXN0aW9uIGlzIGFscmVhZHkgdGllZCB0byBhbm90aGVyIGFjY291bnQuIEZvciBleGFtcGxlLCB0aGUgZm9sbG93aW5nXG4gICAqIGNvZGUgdHJpZXMgdG8gdXBkYXRlIHRoZSBjdXJyZW50IHVzZXIncyBwaG9uZSBudW1iZXIsIGFuZCBpZiB0aGF0XG4gICAqIGZhaWxzLCBsaW5rcyB0aGUgdXNlciB3aXRoIHRoZSBhY2NvdW50IGFzc29jaWF0ZWQgd2l0aCB0aGF0IG51bWJlcjpcbiAgICpcbiAgICogYGBganNcbiAgICogY29uc3QgcHJvdmlkZXIgPSBuZXcgUGhvbmVBdXRoUHJvdmlkZXIoYXV0aCk7XG4gICAqIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gYXdhaXQgcHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXIobnVtYmVyLCB2ZXJpZmllcik7XG4gICAqIHRyeSB7XG4gICAqICAgY29uc3QgY29kZSA9ICcnOyAvLyBQcm9tcHQgdGhlIHVzZXIgZm9yIHRoZSB2ZXJpZmljYXRpb24gY29kZVxuICAgKiAgIGF3YWl0IHVwZGF0ZVBob25lTnVtYmVyKFxuICAgKiAgICAgICBhdXRoLmN1cnJlbnRVc2VyLFxuICAgKiAgICAgICBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsKHZlcmlmaWNhdGlvbklkLCBjb2RlKSk7XG4gICAqIH0gY2F0Y2ggKGUpIHtcbiAgICogICBpZiAoKGUgYXMgRmlyZWJhc2VFcnJvcik/LmNvZGUgPT09ICdhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnKSB7XG4gICAqICAgICBjb25zdCBjcmVkID0gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21FcnJvcihlKTtcbiAgICogICAgIGF3YWl0IGxpbmtXaXRoQ3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLCBjcmVkKTtcbiAgICogICB9XG4gICAqIH1cbiAgICpcbiAgICogLy8gQXQgdGhpcyBwb2ludCwgYXV0aC5jdXJyZW50VXNlci5waG9uZU51bWJlciA9PT0gbnVtYmVyLlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGVycm9yIC0gVGhlIGVycm9yIHRvIGdlbmVyYXRlIGEgY3JlZGVudGlhbCBmcm9tLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSBhcyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh7XG4gICAgX3Rva2VuUmVzcG9uc2U6IHRva2VuUmVzcG9uc2VcbiAgfTogVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UpOiBBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0gPVxuICAgICAgdG9rZW5SZXNwb25zZSBhcyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZTtcbiAgICBpZiAocGhvbmVOdW1iZXIgJiYgdGVtcG9yYXJ5UHJvb2YpIHtcbiAgICAgIHJldHVybiBQaG9uZUF1dGhDcmVkZW50aWFsLl9mcm9tVG9rZW5SZXNwb25zZShcbiAgICAgICAgcGhvbmVOdW1iZXIsXG4gICAgICAgIHRlbXBvcmFyeVByb29mXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUG9wdXBSZWRpcmVjdFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5pbXBvcnQgeyBfZ2V0SW5zdGFuY2UgfSBmcm9tICcuL2luc3RhbnRpYXRvcic7XG5cbi8qKlxuICogQ2hvb3NlcyBhIHBvcHVwL3JlZGlyZWN0IHJlc29sdmVyIHRvIHVzZS4gVGhpcyBwcmVmZXJzIHRoZSBvdmVycmlkZSAod2hpY2hcbiAqIGlzIGRpcmVjdGx5IHBhc3NlZCBpbiksIGFuZCBmYWxscyBiYWNrIHRvIHRoZSBwcm9wZXJ0eSBzZXQgb24gdGhlIGF1dGhcbiAqIG9iamVjdC4gSWYgbmVpdGhlciBhcmUgYXZhaWxhYmxlLCB0aGlzIGZ1bmN0aW9uIGVycm9ycyB3LyBhbiBhcmd1bWVudCBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF93aXRoRGVmYXVsdFJlc29sdmVyKFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIHJlc29sdmVyT3ZlcnJpZGU6IFBvcHVwUmVkaXJlY3RSZXNvbHZlciB8IHVuZGVmaW5lZFxuKTogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwge1xuICBpZiAocmVzb2x2ZXJPdmVycmlkZSkge1xuICAgIHJldHVybiBfZ2V0SW5zdGFuY2UocmVzb2x2ZXJPdmVycmlkZSk7XG4gIH1cblxuICBfYXNzZXJ0KGF1dGguX3BvcHVwUmVkaXJlY3RSZXNvbHZlciwgYXV0aCwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUik7XG5cbiAgcmV0dXJuIGF1dGguX3BvcHVwUmVkaXJlY3RSZXNvbHZlcjtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIHNpZ25JbldpdGhJZHAsXG4gIFNpZ25JbldpdGhJZHBSZXF1ZXN0XG59IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAnO1xuaW1wb3J0IHsgUGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwsIFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgX2xpbmsgYXMgX2xpbmtVc2VyIH0gZnJvbSAnLi4vdXNlci9saW5rX3VubGluayc7XG5pbXBvcnQgeyBfcmVhdXRoZW50aWNhdGUgfSBmcm9tICcuLi91c2VyL3JlYXV0aGVudGljYXRlJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBfc2lnbkluV2l0aENyZWRlbnRpYWwgfSBmcm9tICcuL2NyZWRlbnRpYWwnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElkcFRhc2tQYXJhbXMge1xuICBhdXRoOiBBdXRoSW50ZXJuYWw7XG4gIHJlcXVlc3RVcmk6IHN0cmluZztcbiAgc2Vzc2lvbklkPzogc3RyaW5nO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbiAgcG9zdEJvZHk/OiBzdHJpbmc7XG4gIHBlbmRpbmdUb2tlbj86IHN0cmluZztcbiAgdXNlcj86IFVzZXJJbnRlcm5hbDtcbiAgYnlwYXNzQXV0aFN0YXRlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgSWRwVGFzayA9IChcbiAgcGFyYW1zOiBJZHBUYXNrUGFyYW1zXG4pID0+IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbD47XG5cbmNsYXNzIElkcENyZWRlbnRpYWwgZXh0ZW5kcyBBdXRoQ3JlZGVudGlhbCB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHBhcmFtczogSWRwVGFza1BhcmFtcykge1xuICAgIHN1cGVyKFByb3ZpZGVySWQuQ1VTVE9NLCBQcm92aWRlcklkLkNVU1RPTSk7XG4gIH1cblxuICBfZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8UGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHRoaXMuX2J1aWxkSWRwUmVxdWVzdCgpKTtcbiAgfVxuXG4gIF9saW5rVG9JZFRva2VuKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCB0aGlzLl9idWlsZElkcFJlcXVlc3QoaWRUb2tlbikpO1xuICB9XG5cbiAgX2dldFJlYXV0aGVudGljYXRpb25SZXNvbHZlcihhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHRoaXMuX2J1aWxkSWRwUmVxdWVzdCgpKTtcbiAgfVxuXG4gIHByaXZhdGUgX2J1aWxkSWRwUmVxdWVzdChpZFRva2VuPzogc3RyaW5nKTogU2lnbkluV2l0aElkcFJlcXVlc3Qge1xuICAgIGNvbnN0IHJlcXVlc3Q6IFNpZ25JbldpdGhJZHBSZXF1ZXN0ID0ge1xuICAgICAgcmVxdWVzdFVyaTogdGhpcy5wYXJhbXMucmVxdWVzdFVyaSxcbiAgICAgIHNlc3Npb25JZDogdGhpcy5wYXJhbXMuc2Vzc2lvbklkLFxuICAgICAgcG9zdEJvZHk6IHRoaXMucGFyYW1zLnBvc3RCb2R5LFxuICAgICAgdGVuYW50SWQ6IHRoaXMucGFyYW1zLnRlbmFudElkLFxuICAgICAgcGVuZGluZ1Rva2VuOiB0aGlzLnBhcmFtcy5wZW5kaW5nVG9rZW4sXG4gICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZSxcbiAgICAgIHJldHVybklkcENyZWRlbnRpYWw6IHRydWVcbiAgICB9O1xuXG4gICAgaWYgKGlkVG9rZW4pIHtcbiAgICAgIHJlcXVlc3QuaWRUb2tlbiA9IGlkVG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9zaWduSW4oXG4gIHBhcmFtczogSWRwVGFza1BhcmFtc1xuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsPiB7XG4gIHJldHVybiBfc2lnbkluV2l0aENyZWRlbnRpYWwoXG4gICAgcGFyYW1zLmF1dGgsXG4gICAgbmV3IElkcENyZWRlbnRpYWwocGFyYW1zKSxcbiAgICBwYXJhbXMuYnlwYXNzQXV0aFN0YXRlXG4gICkgYXMgUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9yZWF1dGgoXG4gIHBhcmFtczogSWRwVGFza1BhcmFtc1xuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsPiB7XG4gIGNvbnN0IHsgYXV0aCwgdXNlciB9ID0gcGFyYW1zO1xuICBfYXNzZXJ0KHVzZXIsIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICByZXR1cm4gX3JlYXV0aGVudGljYXRlKFxuICAgIHVzZXIsXG4gICAgbmV3IElkcENyZWRlbnRpYWwocGFyYW1zKSxcbiAgICBwYXJhbXMuYnlwYXNzQXV0aFN0YXRlXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfbGluayhcbiAgcGFyYW1zOiBJZHBUYXNrUGFyYW1zXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+IHtcbiAgY29uc3QgeyBhdXRoLCB1c2VyIH0gPSBwYXJhbXM7XG4gIF9hc3NlcnQodXNlciwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIHJldHVybiBfbGlua1VzZXIodXNlciwgbmV3IElkcENyZWRlbnRpYWwocGFyYW1zKSwgcGFyYW1zLmJ5cGFzc0F1dGhTdGF0ZSk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQge1xuICBBdXRoRXZlbnQsXG4gIEF1dGhFdmVudENvbnN1bWVyLFxuICBBdXRoRXZlbnRUeXBlLFxuICBFdmVudE1hbmFnZXIsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsXG59IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCwgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBkZWJ1Z0Fzc2VydCwgX2ZhaWwgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge1xuICBfbGluayxcbiAgX3JlYXV0aCxcbiAgX3NpZ25JbixcbiAgSWRwVGFzayxcbiAgSWRwVGFza1BhcmFtc1xufSBmcm9tICcuLi9zdHJhdGVnaWVzL2lkcCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcblxuaW50ZXJmYWNlIFBlbmRpbmdQcm9taXNlIHtcbiAgcmVzb2x2ZTogKGNyZWQ6IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfCBudWxsKSA9PiB2b2lkO1xuICByZWplY3Q6IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG59XG5cbi8qKlxuICogUG9wdXAgZXZlbnQgbWFuYWdlci4gSGFuZGxlcyB0aGUgcG9wdXAncyBlbnRpcmUgbGlmZWN5Y2xlOyBsaXN0ZW5zIHRvIGF1dGhcbiAqIGV2ZW50c1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uXG4gIGltcGxlbWVudHMgQXV0aEV2ZW50Q29uc3VtZXJcbntcbiAgcHJpdmF0ZSBwZW5kaW5nUHJvbWlzZTogUGVuZGluZ1Byb21pc2UgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciB8IG51bGwgPSBudWxsO1xuICByZWFkb25seSBmaWx0ZXI6IEF1dGhFdmVudFR5cGVbXTtcblxuICBhYnN0cmFjdCBldmVudElkOiBzdHJpbmcgfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgZmlsdGVyOiBBdXRoRXZlbnRUeXBlIHwgQXV0aEV2ZW50VHlwZVtdLFxuICAgIHByb3RlY3RlZCByZWFkb25seSByZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwsXG4gICAgcHJvdGVjdGVkIHVzZXI/OiBVc2VySW50ZXJuYWwsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlXG4gICkge1xuICAgIHRoaXMuZmlsdGVyID0gQXJyYXkuaXNBcnJheShmaWx0ZXIpID8gZmlsdGVyIDogW2ZpbHRlcl07XG4gIH1cblxuICBhYnN0cmFjdCBvbkV4ZWN1dGlvbigpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIGV4ZWN1dGUoKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsIHwgbnVsbD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsIHwgbnVsbD4oXG4gICAgICBhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMucGVuZGluZ1Byb21pc2UgPSB7IHJlc29sdmUsIHJlamVjdCB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIgPSBhd2FpdCB0aGlzLnJlc29sdmVyLl9pbml0aWFsaXplKHRoaXMuYXV0aCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5vbkV4ZWN1dGlvbigpO1xuICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLnJlZ2lzdGVyQ29uc3VtZXIodGhpcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLnJlamVjdChlIGFzIEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBhc3luYyBvbkF1dGhFdmVudChldmVudDogQXV0aEV2ZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyB1cmxSZXNwb25zZSwgc2Vzc2lvbklkLCBwb3N0Qm9keSwgdGVuYW50SWQsIGVycm9yLCB0eXBlIH0gPSBldmVudDtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRoaXMucmVqZWN0KGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJhbXM6IElkcFRhc2tQYXJhbXMgPSB7XG4gICAgICBhdXRoOiB0aGlzLmF1dGgsXG4gICAgICByZXF1ZXN0VXJpOiB1cmxSZXNwb25zZSEsXG4gICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZCEsXG4gICAgICB0ZW5hbnRJZDogdGVuYW50SWQgfHwgdW5kZWZpbmVkLFxuICAgICAgcG9zdEJvZHk6IHBvc3RCb2R5IHx8IHVuZGVmaW5lZCxcbiAgICAgIHVzZXI6IHRoaXMudXNlcixcbiAgICAgIGJ5cGFzc0F1dGhTdGF0ZTogdGhpcy5ieXBhc3NBdXRoU3RhdGVcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucmVzb2x2ZShhd2FpdCB0aGlzLmdldElkcFRhc2sodHlwZSkocGFyYW1zKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5yZWplY3QoZSBhcyBFcnJvcik7XG4gICAgfVxuICB9XG5cbiAgb25FcnJvcihlcnJvcjogRmlyZWJhc2VFcnJvcik6IHZvaWQge1xuICAgIHRoaXMucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SWRwVGFzayh0eXBlOiBBdXRoRXZlbnRUeXBlKTogSWRwVGFzayB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEF1dGhFdmVudFR5cGUuU0lHTl9JTl9WSUFfUE9QVVA6XG4gICAgICBjYXNlIEF1dGhFdmVudFR5cGUuU0lHTl9JTl9WSUFfUkVESVJFQ1Q6XG4gICAgICAgIHJldHVybiBfc2lnbkluO1xuICAgICAgY2FzZSBBdXRoRXZlbnRUeXBlLkxJTktfVklBX1BPUFVQOlxuICAgICAgY2FzZSBBdXRoRXZlbnRUeXBlLkxJTktfVklBX1JFRElSRUNUOlxuICAgICAgICByZXR1cm4gX2xpbms7XG4gICAgICBjYXNlIEF1dGhFdmVudFR5cGUuUkVBVVRIX1ZJQV9QT1BVUDpcbiAgICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5SRUFVVEhfVklBX1JFRElSRUNUOlxuICAgICAgICByZXR1cm4gX3JlYXV0aDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIF9mYWlsKHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHJlc29sdmUoY3JlZDogVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB8IG51bGwpOiB2b2lkIHtcbiAgICBkZWJ1Z0Fzc2VydCh0aGlzLnBlbmRpbmdQcm9taXNlLCAnUGVuZGluZyBwcm9taXNlIHdhcyBuZXZlciBzZXQnKTtcbiAgICB0aGlzLnBlbmRpbmdQcm9taXNlLnJlc29sdmUoY3JlZCk7XG4gICAgdGhpcy51bnJlZ2lzdGVyQW5kQ2xlYW5VcCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlamVjdChlcnJvcjogRXJyb3IpOiB2b2lkIHtcbiAgICBkZWJ1Z0Fzc2VydCh0aGlzLnBlbmRpbmdQcm9taXNlLCAnUGVuZGluZyBwcm9taXNlIHdhcyBuZXZlciBzZXQnKTtcbiAgICB0aGlzLnBlbmRpbmdQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgdGhpcy51bnJlZ2lzdGVyQW5kQ2xlYW5VcCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1bnJlZ2lzdGVyQW5kQ2xlYW5VcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ldmVudE1hbmFnZXIpIHtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLnVucmVnaXN0ZXJDb25zdW1lcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdQcm9taXNlID0gbnVsbDtcbiAgICB0aGlzLmNsZWFuVXAoKTtcbiAgfVxuXG4gIGFic3RyYWN0IGNsZWFuVXAoKTogdm9pZDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEF1dGgsXG4gIEF1dGhQcm92aWRlcixcbiAgUG9wdXBSZWRpcmVjdFJlc29sdmVyLFxuICBVc2VyLFxuICBVc2VyQ3JlZGVudGlhbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi8uLi9jb3JlL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQge1xuICBfYXNzZXJ0LFxuICBkZWJ1Z0Fzc2VydCxcbiAgX2NyZWF0ZUVycm9yLFxuICBfYXNzZXJ0SW5zdGFuY2VPZlxufSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IERlbGF5IH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2RlbGF5JztcbmltcG9ydCB7IF9nZW5lcmF0ZUV2ZW50SWQgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZXZlbnRfaWQnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQge1xuICBBdXRoRXZlbnRUeXBlLFxuICBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IF93aXRoRGVmYXVsdFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL3Jlc29sdmVyJztcbmltcG9ydCB7IEF1dGhQb3B1cCB9IGZyb20gJy4uL3V0aWwvcG9wdXAnO1xuaW1wb3J0IHsgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vY29yZS9zdHJhdGVnaWVzL2Fic3RyYWN0X3BvcHVwX3JlZGlyZWN0X29wZXJhdGlvbic7XG5pbXBvcnQgeyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9jb3JlL3Byb3ZpZGVycy9mZWRlcmF0ZWQnO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKlxuICogVGhlIGV2ZW50IHRpbWVvdXQgaXMgdGhlIHNhbWUgb24gbW9iaWxlIGFuZCBkZXNrdG9wLCBubyBuZWVkIGZvciBEZWxheS4gU2V0IHRoaXMgdG8gOHMgc2luY2VcbiAqIGJsb2NraW5nIGZ1bmN0aW9ucyBjYW4gdGFrZSB1cHRvIDdzIHRvIGNvbXBsZXRlIHNpZ24gaW4sIGFzIGRvY3VtZW50ZWQgaW46XG4gKiBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vaWRlbnRpdHktcGxhdGZvcm0vZG9jcy9ibG9ja2luZy1mdW5jdGlvbnMjdW5kZXJzdGFuZGluZ19ibG9ja2luZ19mdW5jdGlvbnNcbiAqIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2F1dGgvZXh0ZW5kLXdpdGgtYmxvY2tpbmctZnVuY3Rpb25zI3VuZGVyc3RhbmRpbmdfYmxvY2tpbmdfZnVuY3Rpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIF9UaW1lb3V0IHtcbiAgQVVUSF9FVkVOVCA9IDgwMDBcbn1cbmV4cG9ydCBjb25zdCBfUE9MTF9XSU5ET1dfQ0xPU0VfVElNRU9VVCA9IG5ldyBEZWxheSgyMDAwLCAxMDAwMCk7XG5cbi8qKlxuICogQXV0aGVudGljYXRlcyBhIEZpcmViYXNlIGNsaWVudCB1c2luZyBhIHBvcHVwLWJhc2VkIE9BdXRoIGF1dGhlbnRpY2F0aW9uIGZsb3cuXG4gKlxuICogQHJlbWFya3NcbiAqIElmIHN1Y2NlZWRzLCByZXR1cm5zIHRoZSBzaWduZWQgaW4gdXNlciBhbG9uZyB3aXRoIHRoZSBwcm92aWRlcidzIGNyZWRlbnRpYWwuIElmIHNpZ24gaW4gd2FzXG4gKiB1bnN1Y2Nlc3NmdWwsIHJldHVybnMgYW4gZXJyb3Igb2JqZWN0IGNvbnRhaW5pbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXJyb3IuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xuICpcbiAqIC8vIFRoZSBzaWduZWQtaW4gdXNlciBpbmZvLlxuICogY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXG4gKiBjb25zdCBjcmVkZW50aWFsID0gcHJvdmlkZXIuY3JlZGVudGlhbEZyb21SZXN1bHQoYXV0aCwgcmVzdWx0KTtcbiAqIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBvcHVwKFxuICBhdXRoOiBBdXRoLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XG4gIF9hc3NlcnRJbnN0YW5jZU9mKGF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xuICBjb25zdCByZXNvbHZlckludGVybmFsID0gX3dpdGhEZWZhdWx0UmVzb2x2ZXIoYXV0aEludGVybmFsLCByZXNvbHZlcik7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBQb3B1cE9wZXJhdGlvbihcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgQXV0aEV2ZW50VHlwZS5TSUdOX0lOX1ZJQV9QT1BVUCxcbiAgICBwcm92aWRlcixcbiAgICByZXNvbHZlckludGVybmFsXG4gICk7XG4gIHJldHVybiBhY3Rpb24uZXhlY3V0ZU5vdE51bGwoKTtcbn1cblxuLyoqXG4gKiBSZWF1dGhlbnRpY2F0ZXMgdGhlIGN1cnJlbnQgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQge0BsaW5rIE9BdXRoUHJvdmlkZXJ9IHVzaW5nIGEgcG9wLXVwIGJhc2VkXG4gKiBPQXV0aCBmbG93LlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiB0aGUgcmVhdXRoZW50aWNhdGlvbiBpcyBzdWNjZXNzZnVsLCB0aGUgcmV0dXJuZWQgcmVzdWx0IHdpbGwgY29udGFpbiB0aGUgdXNlciBhbmQgdGhlXG4gKiBwcm92aWRlcidzIGNyZWRlbnRpYWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xuICogLy8gUmVhdXRoZW50aWNhdGUgdXNpbmcgYSBwb3B1cC5cbiAqIGF3YWl0IHJlYXV0aGVudGljYXRlV2l0aFBvcHVwKHJlc3VsdC51c2VyLCBwcm92aWRlcik7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXG4gKiBOb24tT0F1dGggcHJvdmlkZXJzIGxpa2Uge0BsaW5rIEVtYWlsQXV0aFByb3ZpZGVyfSB3aWxsIHRocm93IGFuIGVycm9yLlxuICogQHBhcmFtIHJlc29sdmVyIC0gQW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0sIG9wdGlvbmFsXG4gKiBpZiBhbHJlYWR5IHN1cHBsaWVkIHRvIHtAbGluayBpbml0aWFsaXplQXV0aH0gb3IgcHJvdmlkZWQgYnkge0BsaW5rIGdldEF1dGh9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYXV0aGVudGljYXRlV2l0aFBvcHVwKFxuICB1c2VyOiBVc2VyLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBfYXNzZXJ0SW5zdGFuY2VPZih1c2VySW50ZXJuYWwuYXV0aCwgcHJvdmlkZXIsIEZlZGVyYXRlZEF1dGhQcm92aWRlcik7XG4gIGNvbnN0IHJlc29sdmVySW50ZXJuYWwgPSBfd2l0aERlZmF1bHRSZXNvbHZlcih1c2VySW50ZXJuYWwuYXV0aCwgcmVzb2x2ZXIpO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgUG9wdXBPcGVyYXRpb24oXG4gICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgQXV0aEV2ZW50VHlwZS5SRUFVVEhfVklBX1BPUFVQLFxuICAgIHByb3ZpZGVyLFxuICAgIHJlc29sdmVySW50ZXJuYWwsXG4gICAgdXNlckludGVybmFsXG4gICk7XG4gIHJldHVybiBhY3Rpb24uZXhlY3V0ZU5vdE51bGwoKTtcbn1cblxuLyoqXG4gKiBMaW5rcyB0aGUgYXV0aGVudGljYXRlZCBwcm92aWRlciB0byB0aGUgdXNlciBhY2NvdW50IHVzaW5nIGEgcG9wLXVwIGJhc2VkIE9BdXRoIGZsb3cuXG4gKlxuICogQHJlbWFya3NcbiAqIElmIHRoZSBsaW5raW5nIGlzIHN1Y2Nlc3NmdWwsIHRoZSByZXR1cm5lZCByZXN1bHQgd2lsbCBjb250YWluIHRoZSB1c2VyIGFuZCB0aGUgcHJvdmlkZXIncyBjcmVkZW50aWFsLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBzb21lIG90aGVyIHByb3ZpZGVyLlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAqIC8vIExpbmsgdXNpbmcgYSBwb3B1cC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiBhd2FpdCBsaW5rV2l0aFBvcHVwKHJlc3VsdC51c2VyLCBwcm92aWRlcik7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXG4gKiBOb24tT0F1dGggcHJvdmlkZXJzIGxpa2Uge0BsaW5rIEVtYWlsQXV0aFByb3ZpZGVyfSB3aWxsIHRocm93IGFuIGVycm9yLlxuICogQHBhcmFtIHJlc29sdmVyIC0gQW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0sIG9wdGlvbmFsXG4gKiBpZiBhbHJlYWR5IHN1cHBsaWVkIHRvIHtAbGluayBpbml0aWFsaXplQXV0aH0gb3IgcHJvdmlkZWQgYnkge0BsaW5rIGdldEF1dGh9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxpbmtXaXRoUG9wdXAoXG4gIHVzZXI6IFVzZXIsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWw7XG4gIF9hc3NlcnRJbnN0YW5jZU9mKHVzZXJJbnRlcm5hbC5hdXRoLCBwcm92aWRlciwgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKTtcbiAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKHVzZXJJbnRlcm5hbC5hdXRoLCByZXNvbHZlcik7XG5cbiAgY29uc3QgYWN0aW9uID0gbmV3IFBvcHVwT3BlcmF0aW9uKFxuICAgIHVzZXJJbnRlcm5hbC5hdXRoLFxuICAgIEF1dGhFdmVudFR5cGUuTElOS19WSUFfUE9QVVAsXG4gICAgcHJvdmlkZXIsXG4gICAgcmVzb2x2ZXJJbnRlcm5hbCxcbiAgICB1c2VySW50ZXJuYWxcbiAgKTtcbiAgcmV0dXJuIGFjdGlvbi5leGVjdXRlTm90TnVsbCgpO1xufVxuXG4vKipcbiAqIFBvcHVwIGV2ZW50IG1hbmFnZXIuIEhhbmRsZXMgdGhlIHBvcHVwJ3MgZW50aXJlIGxpZmVjeWNsZTsgbGlzdGVucyB0byBhdXRoXG4gKiBldmVudHNcbiAqXG4gKi9cbmNsYXNzIFBvcHVwT3BlcmF0aW9uIGV4dGVuZHMgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIHtcbiAgLy8gT25seSBvbmUgcG9wdXAgaXMgZXZlciBzaG93biBhdCBvbmNlLiBUaGUgbGlmZWN5Y2xlIG9mIHRoZSBjdXJyZW50IHBvcHVwXG4gIC8vIGNhbiBiZSBtYW5hZ2VkIC8gY2FuY2VsbGVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci5cbiAgcHJpdmF0ZSBzdGF0aWMgY3VycmVudFBvcHVwQWN0aW9uOiBQb3B1cE9wZXJhdGlvbiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGF1dGhXaW5kb3c6IEF1dGhQb3B1cCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHBvbGxJZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGZpbHRlcjogQXV0aEV2ZW50VHlwZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gICAgcmVzb2x2ZXI6IFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsLFxuICAgIHVzZXI/OiBVc2VySW50ZXJuYWxcbiAgKSB7XG4gICAgc3VwZXIoYXV0aCwgZmlsdGVyLCByZXNvbHZlciwgdXNlcik7XG4gICAgaWYgKFBvcHVwT3BlcmF0aW9uLmN1cnJlbnRQb3B1cEFjdGlvbikge1xuICAgICAgUG9wdXBPcGVyYXRpb24uY3VycmVudFBvcHVwQWN0aW9uLmNhbmNlbCgpO1xuICAgIH1cblxuICAgIFBvcHVwT3BlcmF0aW9uLmN1cnJlbnRQb3B1cEFjdGlvbiA9IHRoaXM7XG4gIH1cblxuICBhc3luYyBleGVjdXRlTm90TnVsbCgpOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlKCk7XG4gICAgX2Fzc2VydChyZXN1bHQsIHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIG9uRXhlY3V0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGRlYnVnQXNzZXJ0KFxuICAgICAgdGhpcy5maWx0ZXIubGVuZ3RoID09PSAxLFxuICAgICAgJ1BvcHVwIG9wZXJhdGlvbnMgb25seSBoYW5kbGUgb25lIGV2ZW50J1xuICAgICk7XG4gICAgY29uc3QgZXZlbnRJZCA9IF9nZW5lcmF0ZUV2ZW50SWQoKTtcbiAgICB0aGlzLmF1dGhXaW5kb3cgPSBhd2FpdCB0aGlzLnJlc29sdmVyLl9vcGVuUG9wdXAoXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICB0aGlzLnByb3ZpZGVyLFxuICAgICAgdGhpcy5maWx0ZXJbMF0sIC8vIFRoZXJlJ3MgYWx3YXlzIG9uZSwgc2VlIGNvbnN0cnVjdG9yXG4gICAgICBldmVudElkXG4gICAgKTtcbiAgICB0aGlzLmF1dGhXaW5kb3cuYXNzb2NpYXRlZEV2ZW50ID0gZXZlbnRJZDtcblxuICAgIC8vIENoZWNrIGZvciB3ZWIgc3RvcmFnZSBzdXBwb3J0IGFuZCBvcmlnaW4gdmFsaWRhdGlvbiBfYWZ0ZXJfIHRoZSBwb3B1cCBpc1xuICAgIC8vIGxvYWRlZC4gVGhlc2Ugb3BlcmF0aW9ucyBhcmUgc2xvdyAofjEgc2Vjb25kIG9yIHNvKSBSYXRoZXIgdGhhblxuICAgIC8vIHdhaXRpbmcgb24gdGhlbSBiZWZvcmUgb3BlbmluZyB0aGUgd2luZG93LCBvcHRpbWlzdGljYWxseSBvcGVuIHRoZSBwb3B1cFxuICAgIC8vIGFuZCBjaGVjayBmb3Igc3RvcmFnZSBzdXBwb3J0IGF0IHRoZSBzYW1lIHRpbWUuIElmIHN0b3JhZ2Ugc3VwcG9ydCBpc1xuICAgIC8vIG5vdCBhdmFpbGFibGUsIHRoaXMgd2lsbCBjYXVzZSB0aGUgd2hvbGUgdGhpbmcgdG8gcmVqZWN0IHByb3Blcmx5LiBJdFxuICAgIC8vIHdpbGwgYWxzbyBjbG9zZSB0aGUgcG9wdXAsIGJ1dCBzaW5jZSB0aGUgcHJvbWlzZSBoYXMgYWxyZWFkeSByZWplY3RlZCxcbiAgICAvLyB0aGUgcG9wdXAgY2xvc2VkIGJ5IHVzZXIgcG9sbCB3aWxsIHJlamVjdCBpbnRvIHRoZSB2b2lkLlxuICAgIHRoaXMucmVzb2x2ZXIuX29yaWdpblZhbGlkYXRpb24odGhpcy5hdXRoKS5jYXRjaChlID0+IHtcbiAgICAgIHRoaXMucmVqZWN0KGUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZXNvbHZlci5faXNJZnJhbWVXZWJTdG9yYWdlU3VwcG9ydGVkKHRoaXMuYXV0aCwgaXNTdXBwb3J0ZWQgPT4ge1xuICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgICB0aGlzLnJlamVjdChcbiAgICAgICAgICBfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLldFQl9TVE9SQUdFX1VOU1VQUE9SVEVEKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIHVzZXIgY2xvc3VyZS4gTm90aWNlIHRoaXMgZG9lcyAqbm90KiB1c2UgYXdhaXRcbiAgICB0aGlzLnBvbGxVc2VyQ2FuY2VsbGF0aW9uKCk7XG4gIH1cblxuICBnZXQgZXZlbnRJZCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5hdXRoV2luZG93Py5hc3NvY2lhdGVkRXZlbnQgfHwgbnVsbDtcbiAgfVxuXG4gIGNhbmNlbCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlamVjdChfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLkVYUElSRURfUE9QVVBfUkVRVUVTVCkpO1xuICB9XG5cbiAgY2xlYW5VcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hdXRoV2luZG93KSB7XG4gICAgICB0aGlzLmF1dGhXaW5kb3cuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wb2xsSWQpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5wb2xsSWQpO1xuICAgIH1cblxuICAgIHRoaXMuYXV0aFdpbmRvdyA9IG51bGw7XG4gICAgdGhpcy5wb2xsSWQgPSBudWxsO1xuICAgIFBvcHVwT3BlcmF0aW9uLmN1cnJlbnRQb3B1cEFjdGlvbiA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIHBvbGxVc2VyQ2FuY2VsbGF0aW9uKCk6IHZvaWQge1xuICAgIGNvbnN0IHBvbGwgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5hdXRoV2luZG93Py53aW5kb3c/LmNsb3NlZCkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGVyZSBpcyBzdWZmaWNpZW50IHRpbWUgZm9yIHdoYXRldmVyIGFjdGlvbiB0b1xuICAgICAgICAvLyBjb21wbGV0ZS4gVGhlIHdpbmRvdyBjb3VsZCBoYXZlIGNsb3NlZCBidXQgdGhlIHNpZ24gaW4gbmV0d29ya1xuICAgICAgICAvLyBjYWxsIGNvdWxkIHN0aWxsIGJlIGluIGZsaWdodC4gVGhpcyBpcyBzcGVjaWZpY2FsbHkgdHJ1ZSBmb3JcbiAgICAgICAgLy8gRmlyZWZveCBvciBpZiB0aGUgb3BlbmVyIGlzIGluIGFuIGlmcmFtZSwgaW4gd2hpY2ggY2FzZSB0aGUgb2F1dGhcbiAgICAgICAgLy8gaGVscGVyIGNsb3NlcyB0aGUgcG9wdXAuXG4gICAgICAgIHRoaXMucG9sbElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucG9sbElkID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnJlamVjdChcbiAgICAgICAgICAgIF9jcmVhdGVFcnJvcih0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuUE9QVVBfQ0xPU0VEX0JZX1VTRVIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSwgX1RpbWVvdXQuQVVUSF9FVkVOVCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb2xsSWQgPSB3aW5kb3cuc2V0VGltZW91dChwb2xsLCBfUE9MTF9XSU5ET1dfQ0xPU0VfVElNRU9VVC5nZXQoKSk7XG4gICAgfTtcblxuICAgIHBvbGwoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQge1xuICBBdXRoRXZlbnQsXG4gIEF1dGhFdmVudFR5cGUsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsXG59IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IFBlcnNpc3RlbmNlSW50ZXJuYWwgfSBmcm9tICcuLi9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBfcGVyc2lzdGVuY2VLZXlOYW1lIH0gZnJvbSAnLi4vcGVyc2lzdGVuY2UvcGVyc2lzdGVuY2VfdXNlcl9tYW5hZ2VyJztcbmltcG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uL3V0aWwvaW5zdGFudGlhdG9yJztcbmltcG9ydCB7IEFic3RyYWN0UG9wdXBSZWRpcmVjdE9wZXJhdGlvbiB9IGZyb20gJy4vYWJzdHJhY3RfcG9wdXBfcmVkaXJlY3Rfb3BlcmF0aW9uJztcblxuY29uc3QgUEVORElOR19SRURJUkVDVF9LRVkgPSAncGVuZGluZ1JlZGlyZWN0JztcblxuLy8gV2Ugb25seSBnZXQgb25lIHJlZGlyZWN0IG91dGNvbWUgZm9yIGFueSBvbmUgYXV0aCwgc28ganVzdCBzdG9yZSBpdFxuLy8gaW4gaGVyZS5cbmNvbnN0IHJlZGlyZWN0T3V0Y29tZU1hcDogTWFwPFxuICBzdHJpbmcsXG4gICgpID0+IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbCB8IG51bGw+XG4+ID0gbmV3IE1hcCgpO1xuXG5leHBvcnQgY2xhc3MgUmVkaXJlY3RBY3Rpb24gZXh0ZW5kcyBBYnN0cmFjdFBvcHVwUmVkaXJlY3RPcGVyYXRpb24ge1xuICBldmVudElkID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgcmVzb2x2ZXI6IFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsLFxuICAgIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgYXV0aCxcbiAgICAgIFtcbiAgICAgICAgQXV0aEV2ZW50VHlwZS5TSUdOX0lOX1ZJQV9SRURJUkVDVCxcbiAgICAgICAgQXV0aEV2ZW50VHlwZS5MSU5LX1ZJQV9SRURJUkVDVCxcbiAgICAgICAgQXV0aEV2ZW50VHlwZS5SRUFVVEhfVklBX1JFRElSRUNULFxuICAgICAgICBBdXRoRXZlbnRUeXBlLlVOS05PV05cbiAgICAgIF0sXG4gICAgICByZXNvbHZlcixcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIGJ5cGFzc0F1dGhTdGF0ZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGV4ZWN1dGUgZnVuY3Rpb247IGlmIHdlIGFscmVhZHkgaGF2ZSBhIHJlZGlyZWN0IHJlc3VsdCwgdGhlblxuICAgKiBqdXN0IHJldHVybiBpdC5cbiAgICovXG4gIGFzeW5jIGV4ZWN1dGUoKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsIHwgbnVsbD4ge1xuICAgIGxldCByZWFkeU91dGNvbWUgPSByZWRpcmVjdE91dGNvbWVNYXAuZ2V0KHRoaXMuYXV0aC5fa2V5KCkpO1xuICAgIGlmICghcmVhZHlPdXRjb21lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBoYXNQZW5kaW5nUmVkaXJlY3QgPSBhd2FpdCBfZ2V0QW5kQ2xlYXJQZW5kaW5nUmVkaXJlY3RTdGF0dXMoXG4gICAgICAgICAgdGhpcy5yZXNvbHZlcixcbiAgICAgICAgICB0aGlzLmF1dGhcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaGFzUGVuZGluZ1JlZGlyZWN0ID8gYXdhaXQgc3VwZXIuZXhlY3V0ZSgpIDogbnVsbDtcbiAgICAgICAgcmVhZHlPdXRjb21lID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlYWR5T3V0Y29tZSA9ICgpID0+IFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgfVxuXG4gICAgICByZWRpcmVjdE91dGNvbWVNYXAuc2V0KHRoaXMuYXV0aC5fa2V5KCksIHJlYWR5T3V0Y29tZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgbm90IGJ5cGFzc2luZyBhdXRoIHN0YXRlLCB0aGUgcmVhZHkgb3V0Y29tZSBzaG91bGQgYmUgc2V0IHRvXG4gICAgLy8gbnVsbC5cbiAgICBpZiAoIXRoaXMuYnlwYXNzQXV0aFN0YXRlKSB7XG4gICAgICByZWRpcmVjdE91dGNvbWVNYXAuc2V0KHRoaXMuYXV0aC5fa2V5KCksICgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWR5T3V0Y29tZSgpO1xuICB9XG5cbiAgYXN5bmMgb25BdXRoRXZlbnQoZXZlbnQ6IEF1dGhFdmVudCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChldmVudC50eXBlID09PSBBdXRoRXZlbnRUeXBlLlNJR05fSU5fVklBX1JFRElSRUNUKSB7XG4gICAgICByZXR1cm4gc3VwZXIub25BdXRoRXZlbnQoZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gQXV0aEV2ZW50VHlwZS5VTktOT1dOKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgc2VudGluZWwgdmFsdWUgaW5kaWNhdGluZyB0aGVyZSdzIG5vIHBlbmRpbmcgcmVkaXJlY3RcbiAgICAgIHRoaXMucmVzb2x2ZShudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuZXZlbnRJZCkge1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuYXV0aC5fcmVkaXJlY3RVc2VyRm9ySWQoZXZlbnQuZXZlbnRJZCk7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xuICAgICAgICByZXR1cm4gc3VwZXIub25BdXRoRXZlbnQoZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlKG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9uRXhlY3V0aW9uKCk6IFByb21pc2U8dm9pZD4ge31cblxuICBjbGVhblVwKCk6IHZvaWQge31cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9nZXRBbmRDbGVhclBlbmRpbmdSZWRpcmVjdFN0YXR1cyhcbiAgcmVzb2x2ZXI6IFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsLFxuICBhdXRoOiBBdXRoSW50ZXJuYWxcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCBrZXkgPSBwZW5kaW5nUmVkaXJlY3RLZXkoYXV0aCk7XG4gIGNvbnN0IHBlcnNpc3RlbmNlID0gcmVzb2x2ZXJQZXJzaXN0ZW5jZShyZXNvbHZlcik7XG4gIGlmICghKGF3YWl0IHBlcnNpc3RlbmNlLl9pc0F2YWlsYWJsZSgpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBoYXNQZW5kaW5nUmVkaXJlY3QgPSAoYXdhaXQgcGVyc2lzdGVuY2UuX2dldChrZXkpKSA9PT0gJ3RydWUnO1xuICBhd2FpdCBwZXJzaXN0ZW5jZS5fcmVtb3ZlKGtleSk7XG4gIHJldHVybiBoYXNQZW5kaW5nUmVkaXJlY3Q7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfc2V0UGVuZGluZ1JlZGlyZWN0U3RhdHVzKFxuICByZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwsXG4gIGF1dGg6IEF1dGhJbnRlcm5hbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiByZXNvbHZlclBlcnNpc3RlbmNlKHJlc29sdmVyKS5fc2V0KHBlbmRpbmdSZWRpcmVjdEtleShhdXRoKSwgJ3RydWUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jbGVhclJlZGlyZWN0T3V0Y29tZXMoKTogdm9pZCB7XG4gIHJlZGlyZWN0T3V0Y29tZU1hcC5jbGVhcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX292ZXJyaWRlUmVkaXJlY3RSZXN1bHQoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgcmVzdWx0OiAoKSA9PiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfCBudWxsPlxuKTogdm9pZCB7XG4gIHJlZGlyZWN0T3V0Y29tZU1hcC5zZXQoYXV0aC5fa2V5KCksIHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVyUGVyc2lzdGVuY2UoXG4gIHJlc29sdmVyOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbFxuKTogUGVyc2lzdGVuY2VJbnRlcm5hbCB7XG4gIHJldHVybiBfZ2V0SW5zdGFuY2UocmVzb2x2ZXIuX3JlZGlyZWN0UGVyc2lzdGVuY2UpO1xufVxuXG5mdW5jdGlvbiBwZW5kaW5nUmVkaXJlY3RLZXkoYXV0aDogQXV0aEludGVybmFsKTogc3RyaW5nIHtcbiAgcmV0dXJuIF9wZXJzaXN0ZW5jZUtleU5hbWUoXG4gICAgUEVORElOR19SRURJUkVDVF9LRVksXG4gICAgYXV0aC5jb25maWcuYXBpS2V5LFxuICAgIGF1dGgubmFtZVxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQXV0aCxcbiAgQXV0aFByb3ZpZGVyLFxuICBQb3B1cFJlZGlyZWN0UmVzb2x2ZXIsXG4gIFVzZXIsXG4gIFVzZXJDcmVkZW50aWFsXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uLy4uL2NvcmUvYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgX2Fzc2VydExpbmtlZFN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvdXNlci9saW5rX3VubGluayc7XG5pbXBvcnQgeyBfYXNzZXJ0SW5zdGFuY2VPZiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX2dlbmVyYXRlRXZlbnRJZCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9ldmVudF9pZCc7XG5pbXBvcnQgeyBBdXRoRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcG9wdXBfcmVkaXJlY3QnO1xuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBfd2l0aERlZmF1bHRSZXNvbHZlciB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9yZXNvbHZlcic7XG5pbXBvcnQge1xuICBSZWRpcmVjdEFjdGlvbixcbiAgX3NldFBlbmRpbmdSZWRpcmVjdFN0YXR1c1xufSBmcm9tICcuLi8uLi9jb3JlL3N0cmF0ZWdpZXMvcmVkaXJlY3QnO1xuaW1wb3J0IHsgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vY29yZS9wcm92aWRlcnMvZmVkZXJhdGVkJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXG4gKiBBdXRoZW50aWNhdGVzIGEgRmlyZWJhc2UgY2xpZW50IHVzaW5nIGEgZnVsbC1wYWdlIHJlZGlyZWN0IGZsb3cuXG4gKlxuICogQHJlbWFya3NcbiAqIFRvIGhhbmRsZSB0aGUgcmVzdWx0cyBhbmQgZXJyb3JzIGZvciB0aGlzIG9wZXJhdGlvbiwgcmVmZXIgdG8ge0BsaW5rIGdldFJlZGlyZWN0UmVzdWx0fS5cbiAqIEZvbGxvdyB0aGUge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2F1dGgvd2ViL3JlZGlyZWN0LWJlc3QtcHJhY3RpY2VzXG4gKiB8IGJlc3QgcHJhY3RpY2VzfSB3aGVuIHVzaW5nIHtAbGluayBzaWduSW5XaXRoUmVkaXJlY3R9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogLy8gWW91IGNhbiBhZGQgYWRkaXRpb25hbCBzY29wZXMgdG8gdGhlIHByb3ZpZGVyOlxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3VzZXJfYmlydGhkYXknKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIEZhY2Vib29rIEFjY2VzcyBUb2tlbi5cbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIC8vIEFzIHRoaXMgQVBJIGNhbiBiZSB1c2VkIGZvciBzaWduLWluLCBsaW5raW5nIGFuZCByZWF1dGhlbnRpY2F0aW9uLFxuICogLy8gY2hlY2sgdGhlIG9wZXJhdGlvblR5cGUgdG8gZGV0ZXJtaW5lIHdoYXQgdHJpZ2dlcmVkIHRoaXMgcmVkaXJlY3RcbiAqIC8vIG9wZXJhdGlvbi5cbiAqIGNvbnN0IG9wZXJhdGlvblR5cGUgPSByZXN1bHQub3BlcmF0aW9uVHlwZTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduSW5XaXRoUmVkaXJlY3QoXG4gIGF1dGg6IEF1dGgsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPG5ldmVyPiB7XG4gIHJldHVybiBfc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyLCByZXNvbHZlcikgYXMgUHJvbWlzZTxuZXZlcj47XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfc2lnbkluV2l0aFJlZGlyZWN0KFxuICBhdXRoOiBBdXRoLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTx2b2lkIHwgbmV2ZXI+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBfYXNzZXJ0SW5zdGFuY2VPZihhdXRoLCBwcm92aWRlciwgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKTtcbiAgLy8gV2FpdCBmb3IgYXV0aCBpbml0aWFsaXphdGlvbiB0byBjb21wbGV0ZSwgdGhpcyB3aWxsIHByb2Nlc3MgcGVuZGluZyByZWRpcmVjdHMgYW5kIGNsZWFyIHRoZVxuICAvLyBQRU5ESU5HX1JFRElSRUNUX0tFWSBpbiBwZXJzaXN0ZW5jZS4gVGhpcyBzaG91bGQgYmUgY29tcGxldGVkIGJlZm9yZSBzdGFydGluZyBhIG5ld1xuICAvLyByZWRpcmVjdCBhbmQgY3JlYXRpbmcgYSBQRU5ESU5HX1JFRElSRUNUX0tFWSBlbnRyeS5cbiAgYXdhaXQgYXV0aEludGVybmFsLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gIGNvbnN0IHJlc29sdmVySW50ZXJuYWwgPSBfd2l0aERlZmF1bHRSZXNvbHZlcihhdXRoSW50ZXJuYWwsIHJlc29sdmVyKTtcbiAgYXdhaXQgX3NldFBlbmRpbmdSZWRpcmVjdFN0YXR1cyhyZXNvbHZlckludGVybmFsLCBhdXRoSW50ZXJuYWwpO1xuXG4gIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QoXG4gICAgYXV0aEludGVybmFsLFxuICAgIHByb3ZpZGVyLFxuICAgIEF1dGhFdmVudFR5cGUuU0lHTl9JTl9WSUFfUkVESVJFQ1RcbiAgKTtcbn1cblxuLyoqXG4gKiBSZWF1dGhlbnRpY2F0ZXMgdGhlIGN1cnJlbnQgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQge0BsaW5rIE9BdXRoUHJvdmlkZXJ9IHVzaW5nIGEgZnVsbC1wYWdlIHJlZGlyZWN0IGZsb3cuXG4gKiBAcmVtYXJrc1xuICogVG8gaGFuZGxlIHRoZSByZXN1bHRzIGFuZCBlcnJvcnMgZm9yIHRoaXMgb3BlcmF0aW9uLCByZWZlciB0byB7QGxpbmsgZ2V0UmVkaXJlY3RSZXN1bHR9LlxuICogRm9sbG93IHRoZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvYXV0aC93ZWIvcmVkaXJlY3QtYmVzdC1wcmFjdGljZXNcbiAqIHwgYmVzdCBwcmFjdGljZXN9IHdoZW4gdXNpbmcge0BsaW5rIHJlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0fS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHJlZGlyZWN0LlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIC8vIFJlYXV0aGVudGljYXRlIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBhd2FpdCByZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdChyZXN1bHQudXNlciwgcHJvdmlkZXIpO1xuICogLy8gVGhpcyB3aWxsIGFnYWluIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXG4gKlxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXG4gKiBOb24tT0F1dGggcHJvdmlkZXJzIGxpa2Uge0BsaW5rIEVtYWlsQXV0aFByb3ZpZGVyfSB3aWxsIHRocm93IGFuIGVycm9yLlxuICogQHBhcmFtIHJlc29sdmVyIC0gQW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0sIG9wdGlvbmFsXG4gKiBpZiBhbHJlYWR5IHN1cHBsaWVkIHRvIHtAbGluayBpbml0aWFsaXplQXV0aH0gb3IgcHJvdmlkZWQgYnkge0BsaW5rIGdldEF1dGh9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KFxuICB1c2VyOiBVc2VyLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTxuZXZlcj4ge1xuICByZXR1cm4gX3JlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KFxuICAgIHVzZXIsXG4gICAgcHJvdmlkZXIsXG4gICAgcmVzb2x2ZXJcbiAgKSBhcyBQcm9taXNlPG5ldmVyPjtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfcmVhdXRoZW50aWNhdGVXaXRoUmVkaXJlY3QoXG4gIHVzZXI6IFVzZXIsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPHZvaWQgfCBuZXZlcj4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBfYXNzZXJ0SW5zdGFuY2VPZih1c2VySW50ZXJuYWwuYXV0aCwgcHJvdmlkZXIsIEZlZGVyYXRlZEF1dGhQcm92aWRlcik7XG4gIC8vIFdhaXQgZm9yIGF1dGggaW5pdGlhbGl6YXRpb24gdG8gY29tcGxldGUsIHRoaXMgd2lsbCBwcm9jZXNzIHBlbmRpbmcgcmVkaXJlY3RzIGFuZCBjbGVhciB0aGVcbiAgLy8gUEVORElOR19SRURJUkVDVF9LRVkgaW4gcGVyc2lzdGVuY2UuIFRoaXMgc2hvdWxkIGJlIGNvbXBsZXRlZCBiZWZvcmUgc3RhcnRpbmcgYSBuZXdcbiAgLy8gcmVkaXJlY3QgYW5kIGNyZWF0aW5nIGEgUEVORElOR19SRURJUkVDVF9LRVkgZW50cnkuXG4gIGF3YWl0IHVzZXJJbnRlcm5hbC5hdXRoLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gIC8vIEFsbG93IHRoZSByZXNvbHZlciB0byBlcnJvciBiZWZvcmUgcGVyc2lzdGluZyB0aGUgcmVkaXJlY3QgdXNlclxuICBjb25zdCByZXNvbHZlckludGVybmFsID0gX3dpdGhEZWZhdWx0UmVzb2x2ZXIodXNlckludGVybmFsLmF1dGgsIHJlc29sdmVyKTtcbiAgYXdhaXQgX3NldFBlbmRpbmdSZWRpcmVjdFN0YXR1cyhyZXNvbHZlckludGVybmFsLCB1c2VySW50ZXJuYWwuYXV0aCk7XG5cbiAgY29uc3QgZXZlbnRJZCA9IGF3YWl0IHByZXBhcmVVc2VyRm9yUmVkaXJlY3QodXNlckludGVybmFsKTtcbiAgcmV0dXJuIHJlc29sdmVySW50ZXJuYWwuX29wZW5SZWRpcmVjdChcbiAgICB1c2VySW50ZXJuYWwuYXV0aCxcbiAgICBwcm92aWRlcixcbiAgICBBdXRoRXZlbnRUeXBlLlJFQVVUSF9WSUFfUkVESVJFQ1QsXG4gICAgZXZlbnRJZFxuICApO1xufVxuXG4vKipcbiAqIExpbmtzIHRoZSB7QGxpbmsgT0F1dGhQcm92aWRlcn0gdG8gdGhlIHVzZXIgYWNjb3VudCB1c2luZyBhIGZ1bGwtcGFnZSByZWRpcmVjdCBmbG93LlxuICogQHJlbWFya3NcbiAqIFRvIGhhbmRsZSB0aGUgcmVzdWx0cyBhbmQgZXJyb3JzIGZvciB0aGlzIG9wZXJhdGlvbiwgcmVmZXIgdG8ge0BsaW5rIGdldFJlZGlyZWN0UmVzdWx0fS5cbiAqIEZvbGxvdyB0aGUge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2F1dGgvd2ViL3JlZGlyZWN0LWJlc3QtcHJhY3RpY2VzXG4gKiB8IGJlc3QgcHJhY3RpY2VzfSB3aGVuIHVzaW5nIHtAbGluayBsaW5rV2l0aFJlZGlyZWN0fS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBzb21lIG90aGVyIHByb3ZpZGVyLlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAqIC8vIExpbmsgdXNpbmcgYSByZWRpcmVjdC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiBhd2FpdCBsaW5rV2l0aFJlZGlyZWN0KHJlc3VsdC51c2VyLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gcHJvdmlkZXIgLSBUaGUgcHJvdmlkZXIgdG8gYXV0aGVudGljYXRlLiBUaGUgcHJvdmlkZXIgaGFzIHRvIGJlIGFuIHtAbGluayBPQXV0aFByb3ZpZGVyfS5cbiAqIE5vbi1PQXV0aCBwcm92aWRlcnMgbGlrZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gKiBAcGFyYW0gcmVzb2x2ZXIgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSwgb3B0aW9uYWxcbiAqIGlmIGFscmVhZHkgc3VwcGxpZWQgdG8ge0BsaW5rIGluaXRpYWxpemVBdXRofSBvciBwcm92aWRlZCBieSB7QGxpbmsgZ2V0QXV0aH0uXG4gKlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmtXaXRoUmVkaXJlY3QoXG4gIHVzZXI6IFVzZXIsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPG5ldmVyPiB7XG4gIHJldHVybiBfbGlua1dpdGhSZWRpcmVjdCh1c2VyLCBwcm92aWRlciwgcmVzb2x2ZXIpIGFzIFByb21pc2U8bmV2ZXI+O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9saW5rV2l0aFJlZGlyZWN0KFxuICB1c2VyOiBVc2VyLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTx2b2lkIHwgbmV2ZXI+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xuICAvLyBXYWl0IGZvciBhdXRoIGluaXRpYWxpemF0aW9uIHRvIGNvbXBsZXRlLCB0aGlzIHdpbGwgcHJvY2VzcyBwZW5kaW5nIHJlZGlyZWN0cyBhbmQgY2xlYXIgdGhlXG4gIC8vIFBFTkRJTkdfUkVESVJFQ1RfS0VZIGluIHBlcnNpc3RlbmNlLiBUaGlzIHNob3VsZCBiZSBjb21wbGV0ZWQgYmVmb3JlIHN0YXJ0aW5nIGEgbmV3XG4gIC8vIHJlZGlyZWN0IGFuZCBjcmVhdGluZyBhIFBFTkRJTkdfUkVESVJFQ1RfS0VZIGVudHJ5LlxuICBhd2FpdCB1c2VySW50ZXJuYWwuYXV0aC5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICAvLyBBbGxvdyB0aGUgcmVzb2x2ZXIgdG8gZXJyb3IgYmVmb3JlIHBlcnNpc3RpbmcgdGhlIHJlZGlyZWN0IHVzZXJcbiAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKHVzZXJJbnRlcm5hbC5hdXRoLCByZXNvbHZlcik7XG4gIGF3YWl0IF9hc3NlcnRMaW5rZWRTdGF0dXMoZmFsc2UsIHVzZXJJbnRlcm5hbCwgcHJvdmlkZXIucHJvdmlkZXJJZCk7XG4gIGF3YWl0IF9zZXRQZW5kaW5nUmVkaXJlY3RTdGF0dXMocmVzb2x2ZXJJbnRlcm5hbCwgdXNlckludGVybmFsLmF1dGgpO1xuXG4gIGNvbnN0IGV2ZW50SWQgPSBhd2FpdCBwcmVwYXJlVXNlckZvclJlZGlyZWN0KHVzZXJJbnRlcm5hbCk7XG4gIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QoXG4gICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgcHJvdmlkZXIsXG4gICAgQXV0aEV2ZW50VHlwZS5MSU5LX1ZJQV9SRURJUkVDVCxcbiAgICBldmVudElkXG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0gZnJvbSB0aGUgcmVkaXJlY3QtYmFzZWQgc2lnbi1pbiBmbG93LlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiBzaWduLWluIHN1Y2NlZWRlZCwgcmV0dXJucyB0aGUgc2lnbmVkIGluIHVzZXIuIElmIHNpZ24taW4gd2FzIHVuc3VjY2Vzc2Z1bCwgZmFpbHMgd2l0aCBhblxuICogZXJyb3IuIElmIG5vIHJlZGlyZWN0IG9wZXJhdGlvbiB3YXMgY2FsbGVkLCByZXR1cm5zIGBudWxsYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHJlZGlyZWN0LlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcbiAqIC8vIFlvdSBjYW4gYWRkIGFkZGl0aW9uYWwgc2NvcGVzIHRvIHRoZSBwcm92aWRlcjpcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCd1c2VyX2JpcnRoZGF5Jyk7XG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXG4gKiBhd2FpdCBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIpO1xuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXG4gKlxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XG4gKiBpZiAocmVzdWx0KSB7XG4gKiAgIC8vIFRoaXMgaXMgdGhlIHNpZ25lZC1pbiB1c2VyXG4gKiAgIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBGYWNlYm9vayBBY2Nlc3MgVG9rZW4uXG4gKiAgIGNvbnN0IGNyZWRlbnRpYWwgPSBwcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChhdXRoLCByZXN1bHQpO1xuICogICBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiB9XG4gKiAvLyBBcyB0aGlzIEFQSSBjYW4gYmUgdXNlZCBmb3Igc2lnbi1pbiwgbGlua2luZyBhbmQgcmVhdXRoZW50aWNhdGlvbixcbiAqIC8vIGNoZWNrIHRoZSBvcGVyYXRpb25UeXBlIHRvIGRldGVybWluZSB3aGF0IHRyaWdnZXJlZCB0aGlzIHJlZGlyZWN0XG4gKiAvLyBvcGVyYXRpb24uXG4gKiBjb25zdCBvcGVyYXRpb25UeXBlID0gcmVzdWx0Lm9wZXJhdGlvblR5cGU7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gcmVzb2x2ZXIgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSwgb3B0aW9uYWxcbiAqIGlmIGFscmVhZHkgc3VwcGxpZWQgdG8ge0BsaW5rIGluaXRpYWxpemVBdXRofSBvciBwcm92aWRlZCBieSB7QGxpbmsgZ2V0QXV0aH0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVkaXJlY3RSZXN1bHQoXG4gIGF1dGg6IEF1dGgsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsIHwgbnVsbD4ge1xuICBhd2FpdCBfY2FzdEF1dGgoYXV0aCkuX2luaXRpYWxpemF0aW9uUHJvbWlzZTtcbiAgcmV0dXJuIF9nZXRSZWRpcmVjdFJlc3VsdChhdXRoLCByZXNvbHZlciwgZmFsc2UpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2dldFJlZGlyZWN0UmVzdWx0KFxuICBhdXRoOiBBdXRoLFxuICByZXNvbHZlckV4dGVybj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlcixcbiAgYnlwYXNzQXV0aFN0YXRlID0gZmFsc2Vcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWwgfCBudWxsPiB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgY29uc3QgcmVzb2x2ZXIgPSBfd2l0aERlZmF1bHRSZXNvbHZlcihhdXRoSW50ZXJuYWwsIHJlc29sdmVyRXh0ZXJuKTtcbiAgY29uc3QgYWN0aW9uID0gbmV3IFJlZGlyZWN0QWN0aW9uKGF1dGhJbnRlcm5hbCwgcmVzb2x2ZXIsIGJ5cGFzc0F1dGhTdGF0ZSk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFjdGlvbi5leGVjdXRlKCk7XG5cbiAgaWYgKHJlc3VsdCAmJiAhYnlwYXNzQXV0aFN0YXRlKSB7XG4gICAgZGVsZXRlIHJlc3VsdC51c2VyLl9yZWRpcmVjdEV2ZW50SWQ7XG4gICAgYXdhaXQgYXV0aEludGVybmFsLl9wZXJzaXN0VXNlcklmQ3VycmVudChyZXN1bHQudXNlciBhcyBVc2VySW50ZXJuYWwpO1xuICAgIGF3YWl0IGF1dGhJbnRlcm5hbC5fc2V0UmVkaXJlY3RVc2VyKG51bGwsIHJlc29sdmVyRXh0ZXJuKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVVc2VyRm9yUmVkaXJlY3QodXNlcjogVXNlckludGVybmFsKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgZXZlbnRJZCA9IF9nZW5lcmF0ZUV2ZW50SWQoYCR7dXNlci51aWR9Ojo6YCk7XG4gIHVzZXIuX3JlZGlyZWN0RXZlbnRJZCA9IGV2ZW50SWQ7XG4gIGF3YWl0IHVzZXIuYXV0aC5fc2V0UmVkaXJlY3RVc2VyKHVzZXIpO1xuICBhd2FpdCB1c2VyLmF1dGguX3BlcnNpc3RVc2VySWZDdXJyZW50KHVzZXIpO1xuICByZXR1cm4gZXZlbnRJZDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEF1dGhFdmVudCxcbiAgQXV0aEV2ZW50Q29uc3VtZXIsXG4gIEF1dGhFdmVudFR5cGUsXG4gIEV2ZW50TWFuYWdlclxufSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgX2NyZWF0ZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuXG4vLyBUaGUgYW1vdW50IG9mIHRpbWUgdG8gc3RvcmUgdGhlIFVJRHMgb2Ygc2VlbiBldmVudHM7IHRoaXMgaXNcbi8vIHNldCB0byAxMCBtaW4gYnkgZGVmYXVsdFxuY29uc3QgRVZFTlRfRFVQTElDQVRJT05fQ0FDSEVfRFVSQVRJT05fTVMgPSAxMCAqIDYwICogMTAwMDtcblxuZXhwb3J0IGNsYXNzIEF1dGhFdmVudE1hbmFnZXIgaW1wbGVtZW50cyBFdmVudE1hbmFnZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlZEV2ZW50VWlkczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uc3VtZXJzOiBTZXQ8QXV0aEV2ZW50Q29uc3VtZXI+ID0gbmV3IFNldCgpO1xuICBwcm90ZWN0ZWQgcXVldWVkUmVkaXJlY3RFdmVudDogQXV0aEV2ZW50IHwgbnVsbCA9IG51bGw7XG4gIHByb3RlY3RlZCBoYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QgPSBmYWxzZTtcbiAgcHJpdmF0ZSBsYXN0UHJvY2Vzc2VkRXZlbnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCkge31cblxuICByZWdpc3RlckNvbnN1bWVyKGF1dGhFdmVudENvbnN1bWVyOiBBdXRoRXZlbnRDb25zdW1lcik6IHZvaWQge1xuICAgIHRoaXMuY29uc3VtZXJzLmFkZChhdXRoRXZlbnRDb25zdW1lcik7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgJiZcbiAgICAgIHRoaXMuaXNFdmVudEZvckNvbnN1bWVyKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCwgYXV0aEV2ZW50Q29uc3VtZXIpXG4gICAgKSB7XG4gICAgICB0aGlzLnNlbmRUb0NvbnN1bWVyKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCwgYXV0aEV2ZW50Q29uc3VtZXIpO1xuICAgICAgdGhpcy5zYXZlRXZlbnRUb0NhY2hlKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCk7XG4gICAgICB0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHVucmVnaXN0ZXJDb25zdW1lcihhdXRoRXZlbnRDb25zdW1lcjogQXV0aEV2ZW50Q29uc3VtZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnN1bWVycy5kZWxldGUoYXV0aEV2ZW50Q29uc3VtZXIpO1xuICB9XG5cbiAgb25FdmVudChldmVudDogQXV0aEV2ZW50KTogYm9vbGVhbiB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGV2ZW50IGhhcyBhbHJlYWR5IGJlZW4gaGFuZGxlZFxuICAgIGlmICh0aGlzLmhhc0V2ZW50QmVlbkhhbmRsZWQoZXZlbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGhhbmRsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnN1bWVycy5mb3JFYWNoKGNvbnN1bWVyID0+IHtcbiAgICAgIGlmICh0aGlzLmlzRXZlbnRGb3JDb25zdW1lcihldmVudCwgY29uc3VtZXIpKSB7XG4gICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbmRUb0NvbnN1bWVyKGV2ZW50LCBjb25zdW1lcik7XG4gICAgICAgIHRoaXMuc2F2ZUV2ZW50VG9DYWNoZShldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5oYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QgfHwgIWlzUmVkaXJlY3RFdmVudChldmVudCkpIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgc2VlbiBhIHJlZGlyZWN0IGJlZm9yZSwgb3IgdGhpcyBpcyBhIHBvcHVwIGV2ZW50LFxuICAgICAgLy8gYmFpbCBub3dcbiAgICAgIHJldHVybiBoYW5kbGVkO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSGFuZGxlZFBvdGVudGlhbFJlZGlyZWN0ID0gdHJ1ZTtcblxuICAgIC8vIElmIHRoZSByZWRpcmVjdCB3YXNuJ3QgaGFuZGxlZCwgaGFuZyBvbiB0byBpdFxuICAgIGlmICghaGFuZGxlZCkge1xuICAgICAgdGhpcy5xdWV1ZWRSZWRpcmVjdEV2ZW50ID0gZXZlbnQ7XG4gICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlZDtcbiAgfVxuXG4gIHByaXZhdGUgc2VuZFRvQ29uc3VtZXIoZXZlbnQ6IEF1dGhFdmVudCwgY29uc3VtZXI6IEF1dGhFdmVudENvbnN1bWVyKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LmVycm9yICYmICFpc051bGxSZWRpcmVjdEV2ZW50KGV2ZW50KSkge1xuICAgICAgY29uc3QgY29kZSA9XG4gICAgICAgIChldmVudC5lcnJvci5jb2RlPy5zcGxpdCgnYXV0aC8nKVsxXSBhcyBBdXRoRXJyb3JDb2RlKSB8fFxuICAgICAgICBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SO1xuICAgICAgY29uc3VtZXIub25FcnJvcihfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBjb2RlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN1bWVyLm9uQXV0aEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzRXZlbnRGb3JDb25zdW1lcihcbiAgICBldmVudDogQXV0aEV2ZW50LFxuICAgIGNvbnN1bWVyOiBBdXRoRXZlbnRDb25zdW1lclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBldmVudElkTWF0Y2hlcyA9XG4gICAgICBjb25zdW1lci5ldmVudElkID09PSBudWxsIHx8XG4gICAgICAoISFldmVudC5ldmVudElkICYmIGV2ZW50LmV2ZW50SWQgPT09IGNvbnN1bWVyLmV2ZW50SWQpO1xuICAgIHJldHVybiBjb25zdW1lci5maWx0ZXIuaW5jbHVkZXMoZXZlbnQudHlwZSkgJiYgZXZlbnRJZE1hdGNoZXM7XG4gIH1cblxuICBwcml2YXRlIGhhc0V2ZW50QmVlbkhhbmRsZWQoZXZlbnQ6IEF1dGhFdmVudCk6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIERhdGUubm93KCkgLSB0aGlzLmxhc3RQcm9jZXNzZWRFdmVudFRpbWUgPj1cbiAgICAgIEVWRU5UX0RVUExJQ0FUSU9OX0NBQ0hFX0RVUkFUSU9OX01TXG4gICAgKSB7XG4gICAgICB0aGlzLmNhY2hlZEV2ZW50VWlkcy5jbGVhcigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlZEV2ZW50VWlkcy5oYXMoZXZlbnRVaWQoZXZlbnQpKTtcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZUV2ZW50VG9DYWNoZShldmVudDogQXV0aEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZWRFdmVudFVpZHMuYWRkKGV2ZW50VWlkKGV2ZW50KSk7XG4gICAgdGhpcy5sYXN0UHJvY2Vzc2VkRXZlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudFVpZChlOiBBdXRoRXZlbnQpOiBzdHJpbmcge1xuICByZXR1cm4gW2UudHlwZSwgZS5ldmVudElkLCBlLnNlc3Npb25JZCwgZS50ZW5hbnRJZF0uZmlsdGVyKHYgPT4gdikuam9pbignLScpO1xufVxuXG5mdW5jdGlvbiBpc051bGxSZWRpcmVjdEV2ZW50KHsgdHlwZSwgZXJyb3IgfTogQXV0aEV2ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZSA9PT0gQXV0aEV2ZW50VHlwZS5VTktOT1dOICYmXG4gICAgZXJyb3I/LmNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5OT19BVVRIX0VWRU5UfWBcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdEV2ZW50KGV2ZW50OiBBdXRoRXZlbnQpOiBib29sZWFuIHtcbiAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgY2FzZSBBdXRoRXZlbnRUeXBlLlNJR05fSU5fVklBX1JFRElSRUNUOlxuICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5MSU5LX1ZJQV9SRURJUkVDVDpcbiAgICBjYXNlIEF1dGhFdmVudFR5cGUuUkVBVVRIX1ZJQV9SRURJUkVDVDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5VTktOT1dOOlxuICAgICAgcmV0dXJuIGlzTnVsbFJlZGlyZWN0RXZlbnQoZXZlbnQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IF9wZXJmb3JtQXBpUmVxdWVzdCwgRW5kcG9pbnQsIEh0dHBNZXRob2QgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBHZXRQcm9qZWN0Q29uZmlnUmVxdWVzdCB7XG4gIGFuZHJvaWRQYWNrYWdlTmFtZT86IHN0cmluZztcbiAgaW9zQnVuZGxlSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0UHJvamVjdENvbmZpZ1Jlc3BvbnNlIHtcbiAgYXV0aG9yaXplZERvbWFpbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2dldFByb2plY3RDb25maWcoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IEdldFByb2plY3RDb25maWdSZXF1ZXN0ID0ge31cbik6IFByb21pc2U8R2V0UHJvamVjdENvbmZpZ1Jlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8R2V0UHJvamVjdENvbmZpZ1JlcXVlc3QsIEdldFByb2plY3RDb25maWdSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLkdFVCxcbiAgICBFbmRwb2ludC5HRVRfUFJPSkVDVF9DT05GSUcsXG4gICAgcmVxdWVzdFxuICApO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgX2dldFByb2plY3RDb25maWcgfSBmcm9tICcuLi8uLi9hcGkvcHJvamVjdF9jb25maWcvZ2V0X3Byb2plY3RfY29uZmlnJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfZmFpbCB9IGZyb20gJy4vYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRDdXJyZW50VXJsIH0gZnJvbSAnLi9sb2NhdGlvbic7XG5cbmNvbnN0IElQX0FERFJFU1NfUkVHRVggPSAvXlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9JC87XG5jb25zdCBIVFRQX1JFR0VYID0gL15odHRwcz8vO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3ZhbGlkYXRlT3JpZ2luKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICAvLyBTa2lwIG9yaWdpbiB2YWxpZGF0aW9uIGlmIHdlIGFyZSBpbiBhbiBlbXVsYXRlZCBlbnZpcm9ubWVudFxuICBpZiAoYXV0aC5jb25maWcuZW11bGF0b3IpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGF1dGhvcml6ZWREb21haW5zIH0gPSBhd2FpdCBfZ2V0UHJvamVjdENvbmZpZyhhdXRoKTtcblxuICBmb3IgKGNvbnN0IGRvbWFpbiBvZiBhdXRob3JpemVkRG9tYWlucykge1xuICAgIHRyeSB7XG4gICAgICBpZiAobWF0Y2hEb21haW4oZG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBEbyBub3RoaW5nIGlmIHRoZXJlJ3MgYSBVUkwgZXJyb3I7IGp1c3QgY29udGludWUgc2VhcmNoaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gSW4gdGhlIG9sZCBTREssIHRoaXMgZXJyb3IgYWxzbyBwcm92aWRlcyBoZWxwZnVsIG1lc3NhZ2VzLlxuICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLklOVkFMSURfT1JJR0lOKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hEb21haW4oZXhwZWN0ZWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBjdXJyZW50VXJsID0gX2dldEN1cnJlbnRVcmwoKTtcbiAgY29uc3QgeyBwcm90b2NvbCwgaG9zdG5hbWUgfSA9IG5ldyBVUkwoY3VycmVudFVybCk7XG4gIGlmIChleHBlY3RlZC5zdGFydHNXaXRoKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJykpIHtcbiAgICBjb25zdCBjZVVybCA9IG5ldyBVUkwoZXhwZWN0ZWQpO1xuXG4gICAgaWYgKGNlVXJsLmhvc3RuYW1lID09PSAnJyAmJiBob3N0bmFtZSA9PT0gJycpIHtcbiAgICAgIC8vIEZvciBzb21lIHJlYXNvbiB3ZSdyZSBub3QgcGFyc2luZyBjaHJvbWUgVVJMcyBwcm9wZXJseVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJvdG9jb2wgPT09ICdjaHJvbWUtZXh0ZW5zaW9uOicgJiZcbiAgICAgICAgZXhwZWN0ZWQucmVwbGFjZSgnY2hyb21lLWV4dGVuc2lvbjovLycsICcnKSA9PT1cbiAgICAgICAgICBjdXJyZW50VXJsLnJlcGxhY2UoJ2Nocm9tZS1leHRlbnNpb246Ly8nLCAnJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3RvY29sID09PSAnY2hyb21lLWV4dGVuc2lvbjonICYmIGNlVXJsLmhvc3RuYW1lID09PSBob3N0bmFtZTtcbiAgfVxuXG4gIGlmICghSFRUUF9SRUdFWC50ZXN0KHByb3RvY29sKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChJUF9BRERSRVNTX1JFR0VYLnRlc3QoZXhwZWN0ZWQpKSB7XG4gICAgLy8gVGhlIGRvbWFpbiBoYXMgdG8gYmUgZXhhY3RseSBlcXVhbCB0byB0aGUgcGF0dGVybiwgYXMgYW4gSVAgZG9tYWluIHdpbGxcbiAgICAvLyBvbmx5IGNvbnRhaW4gdGhlIElQLCBubyBleHRyYSBjaGFyYWN0ZXIuXG4gICAgcmV0dXJuIGhvc3RuYW1lID09PSBleHBlY3RlZDtcbiAgfVxuXG4gIC8vIERvdHMgaW4gcGF0dGVybiBzaG91bGQgYmUgZXNjYXBlZC5cbiAgY29uc3QgZXNjYXBlZERvbWFpblBhdHRlcm4gPSBleHBlY3RlZC5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJyk7XG4gIC8vIE5vbiBpcCBhZGRyZXNzIGRvbWFpbnMuXG4gIC8vIGRvbWFpbi5jb20gPSAqLmRvbWFpbi5jb20gT1IgZG9tYWluLmNvbVxuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoXG4gICAgJ14oLitcXFxcLicgKyBlc2NhcGVkRG9tYWluUGF0dGVybiArICd8JyArIGVzY2FwZWREb21haW5QYXR0ZXJuICsgJykkJyxcbiAgICAnaSdcbiAgKTtcbiAgcmV0dXJuIHJlLnRlc3QoaG9zdG5hbWUpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBfY3JlYXRlRXJyb3IgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IERlbGF5IH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2RlbGF5JztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgX3dpbmRvdyB9IGZyb20gJy4uL2F1dGhfd2luZG93JztcbmltcG9ydCAqIGFzIGpzIGZyb20gJy4uL2xvYWRfanMnO1xuXG5jb25zdCBORVRXT1JLX1RJTUVPVVQgPSBuZXcgRGVsYXkoMzAwMDAsIDYwMDAwKTtcblxuLyoqXG4gKiBSZXNldCB1bmxhb2RlZCBHQXBpIG1vZHVsZXMuIElmIGdhcGkubG9hZCBmYWlscyBkdWUgdG8gYSBuZXR3b3JrIGVycm9yLFxuICogaXQgd2lsbCBzdG9wIHdvcmtpbmcgYWZ0ZXIgYSByZXRyaWFsLiBUaGlzIGlzIGEgaGFjayB0byBmaXggdGhpcyBpc3N1ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRVbmxvYWRlZEdhcGlNb2R1bGVzKCk6IHZvaWQge1xuICAvLyBDbGVhciBsYXN0IGZhaWxlZCBnYXBpLmxvYWQgc3RhdGUgdG8gZm9yY2UgbmV4dCBnYXBpLmxvYWQgdG8gZmlyc3RcbiAgLy8gbG9hZCB0aGUgZmFpbGVkIGdhcGkuaWZyYW1lcyBtb2R1bGUuXG4gIC8vIEdldCBnYXBpeC5iZWFjb24gY29udGV4dC5cbiAgY29uc3QgYmVhY29uID0gX3dpbmRvdygpLl9fX2pzbDtcbiAgLy8gR2V0IGN1cnJlbnQgaGludC5cbiAgaWYgKGJlYWNvbj8uSCkge1xuICAgIC8vIEdldCBnYXBpIGhpbnQuXG4gICAgZm9yIChjb25zdCBoaW50IG9mIE9iamVjdC5rZXlzKGJlYWNvbi5IKSkge1xuICAgICAgLy8gUmVxdWVzdGVkIG1vZHVsZXMuXG4gICAgICBiZWFjb24uSFtoaW50XS5yID0gYmVhY29uLkhbaGludF0uciB8fCBbXTtcbiAgICAgIC8vIExvYWRlZCBtb2R1bGVzLlxuICAgICAgYmVhY29uLkhbaGludF0uTCA9IGJlYWNvbi5IW2hpbnRdLkwgfHwgW107XG4gICAgICAvLyBTZXQgcmVxdWVzdGVkIG1vZHVsZXMgdG8gYSBjb3B5IG9mIHRoZSBsb2FkZWQgbW9kdWxlcy5cbiAgICAgIGJlYWNvbi5IW2hpbnRdLnIgPSBbLi4uYmVhY29uLkhbaGludF0uTF07XG4gICAgICAvLyBDbGVhciBwZW5kaW5nIGNhbGxiYWNrcy5cbiAgICAgIGlmIChiZWFjb24uQ1ApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZWFjb24uQ1AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAvLyBSZW1vdmUgYWxsIGZhaWxlZCBwZW5kaW5nIGNhbGxiYWNrcy5cbiAgICAgICAgICBiZWFjb24uQ1BbaV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRHYXBpKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8Z2FwaS5pZnJhbWVzLkNvbnRleHQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPGdhcGkuaWZyYW1lcy5Db250ZXh0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gRnVuY3Rpb24gdG8gcnVuIHdoZW4gZ2FwaS5sb2FkIGlzIHJlYWR5LlxuICAgIGZ1bmN0aW9uIGxvYWRHYXBpSWZyYW1lKCk6IHZvaWQge1xuICAgICAgLy8gVGhlIGRldmVsb3BlciBtYXkgaGF2ZSB0cmllZCB0byBwcmV2aW91c2x5IHJ1biBnYXBpLmxvYWQgYW5kIGZhaWxlZC5cbiAgICAgIC8vIFJ1biB0aGlzIHRvIGZpeCB0aGF0LlxuICAgICAgcmVzZXRVbmxvYWRlZEdhcGlNb2R1bGVzKCk7XG4gICAgICBnYXBpLmxvYWQoJ2dhcGkuaWZyYW1lcycsIHtcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGdhcGkuaWZyYW1lcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB9LFxuICAgICAgICBvbnRpbWVvdXQ6ICgpID0+IHtcbiAgICAgICAgICAvLyBUaGUgYWJvdmUgcmVzZXQgbWF5IGJlIHN1ZmZpY2llbnQsIGJ1dCBoYXZpbmcgdGhpcyByZXNldCBhZnRlclxuICAgICAgICAgIC8vIGZhaWx1cmUgZW5zdXJlcyB0aGF0IGlmIHRoZSBkZXZlbG9wZXIgY2FsbHMgZ2FwaS5sb2FkIGFmdGVyIHRoZVxuICAgICAgICAgIC8vIGNvbm5lY3Rpb24gaXMgcmUtZXN0YWJsaXNoZWQgYW5kIGJlZm9yZSBhbm90aGVyIGF0dGVtcHQgdG8gZW1iZWRcbiAgICAgICAgICAvLyB0aGUgaWZyYW1lLCBpdCB3b3VsZCB3b3JrIGFuZCB3b3VsZCBub3QgYmUgYnJva2VuIGJlY2F1c2Ugb2Ygb3VyXG4gICAgICAgICAgLy8gZmFpbGVkIGF0dGVtcHQuXG4gICAgICAgICAgLy8gVGltZW91dCB3aGVuIGdhcGkuaWZyYW1lcy5JZnJhbWUgbm90IGxvYWRlZC5cbiAgICAgICAgICByZXNldFVubG9hZGVkR2FwaU1vZHVsZXMoKTtcbiAgICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRCkpO1xuICAgICAgICB9LFxuICAgICAgICB0aW1lb3V0OiBORVRXT1JLX1RJTUVPVVQuZ2V0KClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChfd2luZG93KCkuZ2FwaT8uaWZyYW1lcz8uSWZyYW1lKSB7XG4gICAgICAvLyBJZiBnYXBpLmlmcmFtZXMuSWZyYW1lIGF2YWlsYWJsZSwgcmVzb2x2ZS5cbiAgICAgIHJlc29sdmUoZ2FwaS5pZnJhbWVzLmdldENvbnRleHQoKSk7XG4gICAgfSBlbHNlIGlmICghIV93aW5kb3coKS5nYXBpPy5sb2FkKSB7XG4gICAgICAvLyBHYXBpIGxvYWRlciByZWFkeSwgbG9hZCBnYXBpLmlmcmFtZXMuXG4gICAgICBsb2FkR2FwaUlmcmFtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgaWZyYW1lIGNhbGxiYWNrIHdoZW4gdGhpcyBpcyBjYWxsZWQgc28gYXMgbm90IHRvIG92ZXJ3cml0ZVxuICAgICAgLy8gYW55IHByZXZpb3VzIGRlZmluZWQgY2FsbGJhY2suIFRoaXMgaGFwcGVucyBpZiB0aGlzIG1ldGhvZCBpcyBjYWxsZWRcbiAgICAgIC8vIG11bHRpcGxlIHRpbWVzIGluIHBhcmFsbGVsIGFuZCBjb3VsZCByZXN1bHQgaW4gdGhlIGxhdGVyIGNhbGxiYWNrXG4gICAgICAvLyBvdmVyd3JpdGluZyB0aGUgcHJldmlvdXMgb25lLiBUaGlzIHdvdWxkIGVuZCB1cCB3aXRoIGEgaWZyYW1lXG4gICAgICAvLyB0aW1lb3V0LlxuICAgICAgY29uc3QgY2JOYW1lID0ganMuX2dlbmVyYXRlQ2FsbGJhY2tOYW1lKCdpZnJhbWVmY2InKTtcbiAgICAgIC8vIEdBcGkgbG9hZGVyIG5vdCBhdmFpbGFibGUsIGR5bmFtaWNhbGx5IGxvYWQgcGxhdGZvcm0uanMuXG4gICAgICBfd2luZG93KClbY2JOYW1lXSA9ICgpID0+IHtcbiAgICAgICAgLy8gR0FwaSBsb2FkZXIgc2hvdWxkIGJlIHJlYWR5LlxuICAgICAgICBpZiAoISFnYXBpLmxvYWQpIHtcbiAgICAgICAgICBsb2FkR2FwaUlmcmFtZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEdhcGkgbG9hZGVyIGZhaWxlZCwgdGhyb3cgZXJyb3IuXG4gICAgICAgICAgcmVqZWN0KF9jcmVhdGVFcnJvcihhdXRoLCBBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRUQpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8vIExvYWQgR0FwaSBsb2FkZXIuXG4gICAgICByZXR1cm4ganNcbiAgICAgICAgLl9sb2FkSlMoYGh0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL2FwaS5qcz9vbmxvYWQ9JHtjYk5hbWV9YClcbiAgICAgICAgLmNhdGNoKGUgPT4gcmVqZWN0KGUpKTtcbiAgICB9XG4gIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAvLyBSZXNldCBjYWNoZWQgcHJvbWlzZSB0byBhbGxvdyBmb3IgcmV0cmlhbC5cbiAgICBjYWNoZWRHQXBpTG9hZGVyID0gbnVsbDtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG5cbmxldCBjYWNoZWRHQXBpTG9hZGVyOiBQcm9taXNlPGdhcGkuaWZyYW1lcy5Db250ZXh0PiB8IG51bGwgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIF9sb2FkR2FwaShhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPGdhcGkuaWZyYW1lcy5Db250ZXh0PiB7XG4gIGNhY2hlZEdBcGlMb2FkZXIgPSBjYWNoZWRHQXBpTG9hZGVyIHx8IGxvYWRHYXBpKGF1dGgpO1xuICByZXR1cm4gY2FjaGVkR0FwaUxvYWRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9yZXNldExvYWRlcigpOiB2b2lkIHtcbiAgY2FjaGVkR0FwaUxvYWRlciA9IG51bGw7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgU0RLX1ZFUlNJT04gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IHF1ZXJ5c3RyaW5nIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgRGVmYXVsdENvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2ludGVybmFsJztcblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQsIF9jcmVhdGVFcnJvciB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgRGVsYXkgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZGVsYXknO1xuaW1wb3J0IHsgX2VtdWxhdG9yVXJsIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2VtdWxhdG9yJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgX3dpbmRvdyB9IGZyb20gJy4uL2F1dGhfd2luZG93JztcbmltcG9ydCAqIGFzIGdhcGlMb2FkZXIgZnJvbSAnLi9nYXBpJztcblxuY29uc3QgUElOR19USU1FT1VUID0gbmV3IERlbGF5KDUwMDAsIDE1MDAwKTtcbmNvbnN0IElGUkFNRV9QQVRIID0gJ19fL2F1dGgvaWZyYW1lJztcbmNvbnN0IEVNVUxBVEVEX0lGUkFNRV9QQVRIID0gJ2VtdWxhdG9yL2F1dGgvaWZyYW1lJztcblxuY29uc3QgSUZSQU1FX0FUVFJJQlVURVMgPSB7XG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnLTEwMHB4JyxcbiAgICB3aWR0aDogJzFweCcsXG4gICAgaGVpZ2h0OiAnMXB4J1xuICB9LFxuICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gIHRhYmluZGV4OiAnLTEnXG59O1xuXG4vLyBNYXAgZnJvbSBhcGlIb3N0IHRvIGVuZHBvaW50IElEIGZvciBwYXNzaW5nIGludG8gaWZyYW1lLiBJbiBjdXJyZW50IFNESywgYXBpSG9zdCBjYW4gYmUgc2V0IHRvXG4vLyBhbnl0aGluZyAobm90IGZyb20gYSBsaXN0IG9mIGVuZHBvaW50cyB3aXRoIElEcyBhcyBpbiBsZWdhY3kpLCBzbyB0aGlzIGlzIHRoZSBjbG9zZXN0IHdlIGNhbiBnZXQuXG5jb25zdCBFSURfRlJPTV9BUElIT1NUID0gbmV3IE1hcChbXG4gIFtEZWZhdWx0Q29uZmlnLkFQSV9IT1NULCAncCddLCAvLyBwcm9kdWN0aW9uXG4gIFsnc3RhZ2luZy1pZGVudGl0eXRvb2xraXQuc2FuZGJveC5nb29nbGVhcGlzLmNvbScsICdzJ10sIC8vIHN0YWdpbmdcbiAgWyd0ZXN0LWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tJywgJ3QnXSAvLyB0ZXN0XG5dKTtcblxuZnVuY3Rpb24gZ2V0SWZyYW1lVXJsKGF1dGg6IEF1dGhJbnRlcm5hbCk6IHN0cmluZyB7XG4gIGNvbnN0IGNvbmZpZyA9IGF1dGguY29uZmlnO1xuICBfYXNzZXJ0KGNvbmZpZy5hdXRoRG9tYWluLCBhdXRoLCBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfQVVUSF9ET01BSU4pO1xuICBjb25zdCB1cmwgPSBjb25maWcuZW11bGF0b3JcbiAgICA/IF9lbXVsYXRvclVybChjb25maWcsIEVNVUxBVEVEX0lGUkFNRV9QQVRIKVxuICAgIDogYGh0dHBzOi8vJHthdXRoLmNvbmZpZy5hdXRoRG9tYWlufS8ke0lGUkFNRV9QQVRIfWA7XG5cbiAgY29uc3QgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIGFwaUtleTogY29uZmlnLmFwaUtleSxcbiAgICBhcHBOYW1lOiBhdXRoLm5hbWUsXG4gICAgdjogU0RLX1ZFUlNJT05cbiAgfTtcbiAgY29uc3QgZWlkID0gRUlEX0ZST01fQVBJSE9TVC5nZXQoYXV0aC5jb25maWcuYXBpSG9zdCk7XG4gIGlmIChlaWQpIHtcbiAgICBwYXJhbXMuZWlkID0gZWlkO1xuICB9XG4gIGNvbnN0IGZyYW1ld29ya3MgPSBhdXRoLl9nZXRGcmFtZXdvcmtzKCk7XG4gIGlmIChmcmFtZXdvcmtzLmxlbmd0aCkge1xuICAgIHBhcmFtcy5mdyA9IGZyYW1ld29ya3Muam9pbignLCcpO1xuICB9XG4gIHJldHVybiBgJHt1cmx9PyR7cXVlcnlzdHJpbmcocGFyYW1zKS5zbGljZSgxKX1gO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX29wZW5JZnJhbWUoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbFxuKTogUHJvbWlzZTxnYXBpLmlmcmFtZXMuSWZyYW1lPiB7XG4gIGNvbnN0IGNvbnRleHQgPSBhd2FpdCBnYXBpTG9hZGVyLl9sb2FkR2FwaShhdXRoKTtcbiAgY29uc3QgZ2FwaSA9IF93aW5kb3coKS5nYXBpO1xuICBfYXNzZXJ0KGdhcGksIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICByZXR1cm4gY29udGV4dC5vcGVuKFxuICAgIHtcbiAgICAgIHdoZXJlOiBkb2N1bWVudC5ib2R5LFxuICAgICAgdXJsOiBnZXRJZnJhbWVVcmwoYXV0aCksXG4gICAgICBtZXNzYWdlSGFuZGxlcnNGaWx0ZXI6IGdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVIsXG4gICAgICBhdHRyaWJ1dGVzOiBJRlJBTUVfQVRUUklCVVRFUyxcbiAgICAgIGRvbnRjbGVhcjogdHJ1ZVxuICAgIH0sXG4gICAgKGlmcmFtZTogZ2FwaS5pZnJhbWVzLklmcmFtZSkgPT5cbiAgICAgIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgYXdhaXQgaWZyYW1lLnJlc3R5bGUoe1xuICAgICAgICAgIC8vIFByZXZlbnQgaWZyYW1lIGZyb20gY2xvc2luZyBvbiBtb3VzZSBvdXQuXG4gICAgICAgICAgc2V0SGlkZU9uTGVhdmU6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG5ldHdvcmtFcnJvciA9IF9jcmVhdGVFcnJvcihcbiAgICAgICAgICBhdXRoLFxuICAgICAgICAgIEF1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRFxuICAgICAgICApO1xuICAgICAgICAvLyBDb25maXJtIGlmcmFtZSBpcyBjb3JyZWN0bHkgbG9hZGVkLlxuICAgICAgICAvLyBUbyBmYWxsYmFjayBvbiBmYWlsdXJlLCBzZXQgYSB0aW1lb3V0LlxuICAgICAgICBjb25zdCBuZXR3b3JrRXJyb3JUaW1lciA9IF93aW5kb3coKS5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICByZWplY3QobmV0d29ya0Vycm9yKTtcbiAgICAgICAgfSwgUElOR19USU1FT1VULmdldCgpKTtcbiAgICAgICAgLy8gQ2xlYXIgdGltZXIgYW5kIHJlc29sdmUgcGVuZGluZyBpZnJhbWUgcmVhZHkgcHJvbWlzZS5cbiAgICAgICAgZnVuY3Rpb24gY2xlYXJUaW1lckFuZFJlc29sdmUoKTogdm9pZCB7XG4gICAgICAgICAgX3dpbmRvdygpLmNsZWFyVGltZW91dChuZXR3b3JrRXJyb3JUaW1lcik7XG4gICAgICAgICAgcmVzb2x2ZShpZnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgcmV0dXJucyBhbiBJVGhlbmFibGUuIEhvd2V2ZXIgdGhlIHJlamVjdCBwYXJ0IGRvZXMgbm90IGNhbGxcbiAgICAgICAgLy8gd2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQuXG4gICAgICAgIGlmcmFtZS5waW5nKGNsZWFyVGltZXJBbmRSZXNvbHZlKS50aGVuKGNsZWFyVGltZXJBbmRSZXNvbHZlLCAoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KG5ldHdvcmtFcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRVQSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7XG4gIF9pc0Nocm9tZUlPUyxcbiAgX2lzRmlyZWZveCxcbiAgX2lzSU9TU3RhbmRhbG9uZVxufSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcblxuY29uc3QgQkFTRV9QT1BVUF9PUFRJT05TID0ge1xuICBsb2NhdGlvbjogJ3llcycsXG4gIHJlc2l6YWJsZTogJ3llcycsXG4gIHN0YXR1c2JhcjogJ3llcycsXG4gIHRvb2xiYXI6ICdubydcbn07XG5cbmNvbnN0IERFRkFVTFRfV0lEVEggPSA1MDA7XG5jb25zdCBERUZBVUxUX0hFSUdIVCA9IDYwMDtcbmNvbnN0IFRBUkdFVF9CTEFOSyA9ICdfYmxhbmsnO1xuXG5jb25zdCBGSVJFRk9YX0VNUFRZX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IGNsYXNzIEF1dGhQb3B1cCB7XG4gIGFzc29jaWF0ZWRFdmVudDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgd2luZG93OiBXaW5kb3cgfCBudWxsKSB7fVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLndpbmRvdykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfb3BlbihcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICB1cmw/OiBzdHJpbmcsXG4gIG5hbWU/OiBzdHJpbmcsXG4gIHdpZHRoID0gREVGQVVMVF9XSURUSCxcbiAgaGVpZ2h0ID0gREVGQVVMVF9IRUlHSFRcbik6IEF1dGhQb3B1cCB7XG4gIGNvbnN0IHRvcCA9IE1hdGgubWF4KCh3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0IC0gaGVpZ2h0KSAvIDIsIDApLnRvU3RyaW5nKCk7XG4gIGNvbnN0IGxlZnQgPSBNYXRoLm1heCgod2luZG93LnNjcmVlbi5hdmFpbFdpZHRoIC0gd2lkdGgpIC8gMiwgMCkudG9TdHJpbmcoKTtcbiAgbGV0IHRhcmdldCA9ICcnO1xuXG4gIGNvbnN0IG9wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgLi4uQkFTRV9QT1BVUF9PUFRJT05TLFxuICAgIHdpZHRoOiB3aWR0aC50b1N0cmluZygpLFxuICAgIGhlaWdodDogaGVpZ2h0LnRvU3RyaW5nKCksXG4gICAgdG9wLFxuICAgIGxlZnRcbiAgfTtcblxuICAvLyBDaHJvbWUgaU9TIDcgYW5kIDggaXMgcmV0dXJuaW5nIGFuIHVuZGVmaW5lZCBwb3B1cCB3aW4gd2hlbiB0YXJnZXQgaXNcbiAgLy8gc3BlY2lmaWVkLCBldmVuIHRob3VnaCB0aGUgcG9wdXAgaXMgbm90IG5lY2Vzc2FyaWx5IGJsb2NrZWQuXG4gIGNvbnN0IHVhID0gZ2V0VUEoKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChuYW1lKSB7XG4gICAgdGFyZ2V0ID0gX2lzQ2hyb21lSU9TKHVhKSA/IFRBUkdFVF9CTEFOSyA6IG5hbWU7XG4gIH1cblxuICBpZiAoX2lzRmlyZWZveCh1YSkpIHtcbiAgICAvLyBGaXJlZm94IGNvbXBsYWlucyB3aGVuIGludmFsaWQgVVJMcyBhcmUgcG9wcGVkIG91dC4gSGFja3kgd2F5IHRvIGJ5cGFzcy5cbiAgICB1cmwgPSB1cmwgfHwgRklSRUZPWF9FTVBUWV9VUkw7XG4gICAgLy8gRmlyZWZveCBkaXNhYmxlcyBieSBkZWZhdWx0IHNjcm9sbGluZyBvbiBwb3B1cCB3aW5kb3dzLCB3aGljaCBjYW4gY3JlYXRlXG4gICAgLy8gaXNzdWVzIHdoZW4gdGhlIHVzZXIgaGFzIG1hbnkgR29vZ2xlIGFjY291bnRzLCBmb3IgaW5zdGFuY2UuXG4gICAgb3B0aW9ucy5zY3JvbGxiYXJzID0gJ3llcyc7XG4gIH1cblxuICBjb25zdCBvcHRpb25zU3RyaW5nID0gT2JqZWN0LmVudHJpZXMob3B0aW9ucykucmVkdWNlKFxuICAgIChhY2N1bSwgW2tleSwgdmFsdWVdKSA9PiBgJHthY2N1bX0ke2tleX09JHt2YWx1ZX0sYCxcbiAgICAnJ1xuICApO1xuXG4gIGlmIChfaXNJT1NTdGFuZGFsb25lKHVhKSAmJiB0YXJnZXQgIT09ICdfc2VsZicpIHtcbiAgICBvcGVuQXNOZXdXaW5kb3dJT1ModXJsIHx8ICcnLCB0YXJnZXQpO1xuICAgIHJldHVybiBuZXcgQXV0aFBvcHVwKG51bGwpO1xuICB9XG5cbiAgLy8gYWJvdXQ6YmxhbmsgZ2V0dGluZyBzYW5pdGl6ZWQgY2F1c2luZyBicm93c2VycyBsaWtlIElFL0VkZ2UgdG8gZGlzcGxheVxuICAvLyBicmllZiBlcnJvciBtZXNzYWdlIGJlZm9yZSByZWRpcmVjdGluZyB0byBoYW5kbGVyLlxuICBjb25zdCBuZXdXaW4gPSB3aW5kb3cub3Blbih1cmwgfHwgJycsIHRhcmdldCwgb3B0aW9uc1N0cmluZyk7XG4gIF9hc3NlcnQobmV3V2luLCBhdXRoLCBBdXRoRXJyb3JDb2RlLlBPUFVQX0JMT0NLRUQpO1xuXG4gIC8vIEZsYWt5IG9uIElFIGVkZ2UsIGVuY2Fwc3VsYXRlIHdpdGggYSB0cnkgYW5kIGNhdGNoLlxuICB0cnkge1xuICAgIG5ld1dpbi5mb2N1cygpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHJldHVybiBuZXcgQXV0aFBvcHVwKG5ld1dpbik7XG59XG5cbmZ1bmN0aW9uIG9wZW5Bc05ld1dpbmRvd0lPUyh1cmw6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGVsLmhyZWYgPSB1cmw7XG4gIGVsLnRhcmdldCA9IHRhcmdldDtcbiAgY29uc3QgY2xpY2sgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICBjbGljay5pbml0TW91c2VFdmVudChcbiAgICAnY2xpY2snLFxuICAgIHRydWUsXG4gICAgdHJ1ZSxcbiAgICB3aW5kb3csXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIGZhbHNlLFxuICAgIGZhbHNlLFxuICAgIGZhbHNlLFxuICAgIGZhbHNlLFxuICAgIDEsXG4gICAgbnVsbFxuICApO1xuICBlbC5kaXNwYXRjaEV2ZW50KGNsaWNrKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgQXBpS2V5LCBBcHBOYW1lLCBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IEF1dGhFdmVudFR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5pbXBvcnQgeyBpc0VtcHR5LCBxdWVyeXN0cmluZyB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IF9lbXVsYXRvclVybCB9IGZyb20gJy4vZW11bGF0b3InO1xuaW1wb3J0IHsgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2ZlZGVyYXRlZCc7XG5pbXBvcnQgeyBCYXNlT0F1dGhQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9vYXV0aCc7XG5cbi8qKlxuICogVVJMIGZvciBBdXRoZW50aWNhdGlvbiB3aWRnZXQgd2hpY2ggd2lsbCBpbml0aWF0ZSB0aGUgT0F1dGggaGFuZHNoYWtlXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFdJREdFVF9QQVRIID0gJ19fL2F1dGgvaGFuZGxlcic7XG5cbi8qKlxuICogVVJMIGZvciBlbXVsYXRlZCBlbnZpcm9ubWVudFxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBFTVVMQVRPUl9XSURHRVRfUEFUSCA9ICdlbXVsYXRvci9hdXRoL2hhbmRsZXInO1xuXG4vKipcbiAqIEZyYWdtZW50IG5hbWUgZm9yIHRoZSBBcHAgQ2hlY2sgdG9rZW4gdGhhdCBnZXRzIHBhc3NlZCB0byB0aGUgd2lkZ2V0XG4gKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IEZJUkVCQVNFX0FQUF9DSEVDS19GUkFHTUVOVF9JRCA9IGVuY29kZVVSSUNvbXBvbmVudCgnZmFjJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWRlZmluaXRpb25zXG50eXBlIFdpZGdldFBhcmFtcyA9IHtcbiAgYXBpS2V5OiBBcGlLZXk7XG4gIGFwcE5hbWU6IEFwcE5hbWU7XG4gIGF1dGhUeXBlOiBBdXRoRXZlbnRUeXBlO1xuICByZWRpcmVjdFVybD86IHN0cmluZztcbiAgdjogc3RyaW5nO1xuICBwcm92aWRlcklkPzogc3RyaW5nO1xuICBzY29wZXM/OiBzdHJpbmc7XG4gIGN1c3RvbVBhcmFtZXRlcnM/OiBzdHJpbmc7XG4gIGV2ZW50SWQ/OiBzdHJpbmc7XG4gIHRpZD86IHN0cmluZztcbn0gJiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZCB9O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2dldFJlZGlyZWN0VXJsKFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIGF1dGhUeXBlOiBBdXRoRXZlbnRUeXBlLFxuICByZWRpcmVjdFVybD86IHN0cmluZyxcbiAgZXZlbnRJZD86IHN0cmluZyxcbiAgYWRkaXRpb25hbFBhcmFtcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIF9hc3NlcnQoYXV0aC5jb25maWcuYXV0aERvbWFpbiwgYXV0aCwgQXV0aEVycm9yQ29kZS5NSVNTSU5HX0FVVEhfRE9NQUlOKTtcbiAgX2Fzc2VydChhdXRoLmNvbmZpZy5hcGlLZXksIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9BUElfS0VZKTtcblxuICBjb25zdCBwYXJhbXM6IFdpZGdldFBhcmFtcyA9IHtcbiAgICBhcGlLZXk6IGF1dGguY29uZmlnLmFwaUtleSxcbiAgICBhcHBOYW1lOiBhdXRoLm5hbWUsXG4gICAgYXV0aFR5cGUsXG4gICAgcmVkaXJlY3RVcmwsXG4gICAgdjogU0RLX1ZFUlNJT04sXG4gICAgZXZlbnRJZFxuICB9O1xuXG4gIGlmIChwcm92aWRlciBpbnN0YW5jZW9mIEZlZGVyYXRlZEF1dGhQcm92aWRlcikge1xuICAgIHByb3ZpZGVyLnNldERlZmF1bHRMYW5ndWFnZShhdXRoLmxhbmd1YWdlQ29kZSk7XG4gICAgcGFyYW1zLnByb3ZpZGVySWQgPSBwcm92aWRlci5wcm92aWRlcklkIHx8ICcnO1xuICAgIGlmICghaXNFbXB0eShwcm92aWRlci5nZXRDdXN0b21QYXJhbWV0ZXJzKCkpKSB7XG4gICAgICBwYXJhbXMuY3VzdG9tUGFyYW1ldGVycyA9IEpTT04uc3RyaW5naWZ5KHByb3ZpZGVyLmdldEN1c3RvbVBhcmFtZXRlcnMoKSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETyBzZXQgYWRkaXRpb25hbFBhcmFtcyBmcm9tIHRoZSBwcm92aWRlciBhcyB3ZWxsP1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFkZGl0aW9uYWxQYXJhbXMgfHwge30pKSB7XG4gICAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm92aWRlciBpbnN0YW5jZW9mIEJhc2VPQXV0aFByb3ZpZGVyKSB7XG4gICAgY29uc3Qgc2NvcGVzID0gcHJvdmlkZXIuZ2V0U2NvcGVzKCkuZmlsdGVyKHNjb3BlID0+IHNjb3BlICE9PSAnJyk7XG4gICAgaWYgKHNjb3Blcy5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJhbXMuc2NvcGVzID0gc2NvcGVzLmpvaW4oJywnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXV0aC50ZW5hbnRJZCkge1xuICAgIHBhcmFtcy50aWQgPSBhdXRoLnRlbmFudElkO1xuICB9XG5cbiAgLy8gVE9ETzogbWF5YmUgc2V0IGVpZCBhcyBlbmRpcG9pbnRJZFxuICAvLyBUT0RPOiBtYXliZSBzZXQgZncgYXMgRnJhbWV3b3Jrcy5qb2luKFwiLFwiKVxuXG4gIGNvbnN0IHBhcmFtc0RpY3QgPSBwYXJhbXMgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPjtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocGFyYW1zRGljdCkpIHtcbiAgICBpZiAocGFyYW1zRGljdFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSBwYXJhbXNEaWN0W2tleV07XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0cyB0aGUgQXBwIENoZWNrIHRva2VuIHRvIHBhc3MgdG8gdGhlIHdpZGdldFxuICBjb25zdCBhcHBDaGVja1Rva2VuID0gYXdhaXQgYXV0aC5fZ2V0QXBwQ2hlY2tUb2tlbigpO1xuICBjb25zdCBhcHBDaGVja1Rva2VuRnJhZ21lbnQgPSBhcHBDaGVja1Rva2VuXG4gICAgPyBgIyR7RklSRUJBU0VfQVBQX0NIRUNLX0ZSQUdNRU5UX0lEfT0ke2VuY29kZVVSSUNvbXBvbmVudChhcHBDaGVja1Rva2VuKX1gXG4gICAgOiAnJztcblxuICAvLyBTdGFydCBhdCBpbmRleCAxIHRvIHNraXAgdGhlIGxlYWRpbmcgJyYnIGluIHRoZSBxdWVyeSBzdHJpbmdcbiAgcmV0dXJuIGAke2dldEhhbmRsZXJCYXNlKGF1dGgpfT8ke3F1ZXJ5c3RyaW5nKHBhcmFtc0RpY3QpLnNsaWNlKFxuICAgIDFcbiAgKX0ke2FwcENoZWNrVG9rZW5GcmFnbWVudH1gO1xufVxuXG5mdW5jdGlvbiBnZXRIYW5kbGVyQmFzZSh7IGNvbmZpZyB9OiBBdXRoSW50ZXJuYWwpOiBzdHJpbmcge1xuICBpZiAoIWNvbmZpZy5lbXVsYXRvcikge1xuICAgIHJldHVybiBgaHR0cHM6Ly8ke2NvbmZpZy5hdXRoRG9tYWlufS8ke1dJREdFVF9QQVRIfWA7XG4gIH1cblxuICByZXR1cm4gX2VtdWxhdG9yVXJsKGNvbmZpZywgRU1VTEFUT1JfV0lER0VUX1BBVEgpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aFByb3ZpZGVyLCBQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBBdXRoRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZS9hdXRoL2F1dGhfZXZlbnRfbWFuYWdlcic7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCwgZGVidWdBc3NlcnQsIF9mYWlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBfZ2VuZXJhdGVFdmVudElkIH0gZnJvbSAnLi4vY29yZS91dGlsL2V2ZW50X2lkJztcbmltcG9ydCB7IF9nZXRDdXJyZW50VXJsIH0gZnJvbSAnLi4vY29yZS91dGlsL2xvY2F0aW9uJztcbmltcG9ydCB7IF92YWxpZGF0ZU9yaWdpbiB9IGZyb20gJy4uL2NvcmUvdXRpbC92YWxpZGF0ZV9vcmlnaW4nO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQge1xuICBBdXRoRXZlbnRUeXBlLFxuICBFdmVudE1hbmFnZXIsXG4gIEdhcGlBdXRoRXZlbnQsXG4gIEdhcGlPdXRjb21lLFxuICBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbFxufSBmcm9tICcuLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBfc2V0V2luZG93TG9jYXRpb24gfSBmcm9tICcuL2F1dGhfd2luZG93JztcbmltcG9ydCB7IF9vcGVuSWZyYW1lIH0gZnJvbSAnLi9pZnJhbWUvaWZyYW1lJztcbmltcG9ydCB7IGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UgfSBmcm9tICcuL3BlcnNpc3RlbmNlL3Nlc3Npb25fc3RvcmFnZSc7XG5pbXBvcnQgeyBfb3BlbiwgQXV0aFBvcHVwIH0gZnJvbSAnLi91dGlsL3BvcHVwJztcbmltcG9ydCB7IF9nZXRSZWRpcmVjdFJlc3VsdCB9IGZyb20gJy4vc3RyYXRlZ2llcy9yZWRpcmVjdCc7XG5pbXBvcnQgeyBfZ2V0UmVkaXJlY3RVcmwgfSBmcm9tICcuLi9jb3JlL3V0aWwvaGFuZGxlcic7XG5pbXBvcnQgeyBfaXNJT1MsIF9pc01vYmlsZUJyb3dzZXIsIF9pc1NhZmFyaSB9IGZyb20gJy4uL2NvcmUvdXRpbC9icm93c2VyJztcbmltcG9ydCB7IF9vdmVycmlkZVJlZGlyZWN0UmVzdWx0IH0gZnJvbSAnLi4vY29yZS9zdHJhdGVnaWVzL3JlZGlyZWN0JztcblxuLyoqXG4gKiBUaGUgc3BlY2lhbCB3ZWIgc3RvcmFnZSBldmVudFxuICpcbiAqL1xuY29uc3QgV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVkgPSAnd2ViU3RvcmFnZVN1cHBvcnQnO1xuXG5pbnRlcmZhY2UgV2ViU3RvcmFnZVN1cHBvcnRNZXNzYWdlIGV4dGVuZHMgZ2FwaS5pZnJhbWVzLk1lc3NhZ2Uge1xuICBbaW5kZXg6IG51bWJlcl06IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xufVxuXG5pbnRlcmZhY2UgTWFuYWdlck9yUHJvbWlzZSB7XG4gIG1hbmFnZXI/OiBFdmVudE1hbmFnZXI7XG4gIHByb21pc2U/OiBQcm9taXNlPEV2ZW50TWFuYWdlcj47XG59XG5cbmNsYXNzIEJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgaW1wbGVtZW50cyBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRNYW5hZ2VyczogUmVjb3JkPHN0cmluZywgTWFuYWdlck9yUHJvbWlzZT4gPSB7fTtcbiAgcHJpdmF0ZSByZWFkb25seSBpZnJhbWVzOiBSZWNvcmQ8c3RyaW5nLCBnYXBpLmlmcmFtZXMuSWZyYW1lPiA9IHt9O1xuICBwcml2YXRlIHJlYWRvbmx5IG9yaWdpblZhbGlkYXRpb25Qcm9taXNlczogUmVjb3JkPHN0cmluZywgUHJvbWlzZTx2b2lkPj4gPSB7fTtcblxuICByZWFkb25seSBfcmVkaXJlY3RQZXJzaXN0ZW5jZSA9IGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2U7XG5cbiAgLy8gV3JhcHBpbmcgaW4gYXN5bmMgZXZlbiB0aG91Z2ggd2UgZG9uJ3QgYXdhaXQgYW55d2hlcmUgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBzdXJlIGVycm9ycyBhcmUgcmFpc2VkIGFzIHByb21pc2UgcmVqZWN0aW9uc1xuICBhc3luYyBfb3BlblBvcHVwKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICAgIGF1dGhUeXBlOiBBdXRoRXZlbnRUeXBlLFxuICAgIGV2ZW50SWQ/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxBdXRoUG9wdXA+IHtcbiAgICBkZWJ1Z0Fzc2VydChcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2Vyc1thdXRoLl9rZXkoKV0/Lm1hbmFnZXIsXG4gICAgICAnX2luaXRpYWxpemUoKSBub3QgY2FsbGVkIGJlZm9yZSBfb3BlblBvcHVwKCknXG4gICAgKTtcblxuICAgIGNvbnN0IHVybCA9IGF3YWl0IF9nZXRSZWRpcmVjdFVybChcbiAgICAgIGF1dGgsXG4gICAgICBwcm92aWRlcixcbiAgICAgIGF1dGhUeXBlLFxuICAgICAgX2dldEN1cnJlbnRVcmwoKSxcbiAgICAgIGV2ZW50SWRcbiAgICApO1xuICAgIHJldHVybiBfb3BlbihhdXRoLCB1cmwsIF9nZW5lcmF0ZUV2ZW50SWQoKSk7XG4gIH1cblxuICBhc3luYyBfb3BlblJlZGlyZWN0KFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICAgIGF1dGhUeXBlOiBBdXRoRXZlbnRUeXBlLFxuICAgIGV2ZW50SWQ/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxuZXZlcj4ge1xuICAgIGF3YWl0IHRoaXMuX29yaWdpblZhbGlkYXRpb24oYXV0aCk7XG4gICAgY29uc3QgdXJsID0gYXdhaXQgX2dldFJlZGlyZWN0VXJsKFxuICAgICAgYXV0aCxcbiAgICAgIHByb3ZpZGVyLFxuICAgICAgYXV0aFR5cGUsXG4gICAgICBfZ2V0Q3VycmVudFVybCgpLFxuICAgICAgZXZlbnRJZFxuICAgICk7XG4gICAgX3NldFdpbmRvd0xvY2F0aW9uKHVybCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbiAgfVxuXG4gIF9pbml0aWFsaXplKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8RXZlbnRNYW5hZ2VyPiB7XG4gICAgY29uc3Qga2V5ID0gYXV0aC5fa2V5KCk7XG4gICAgaWYgKHRoaXMuZXZlbnRNYW5hZ2Vyc1trZXldKSB7XG4gICAgICBjb25zdCB7IG1hbmFnZXIsIHByb21pc2UgfSA9IHRoaXMuZXZlbnRNYW5hZ2Vyc1trZXldO1xuICAgICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYW5hZ2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnQXNzZXJ0KHByb21pc2UsICdJZiBtYW5hZ2VyIGlzIG5vdCBzZXQsIHByb21pc2Ugc2hvdWxkIGJlJyk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmluaXRBbmRHZXRNYW5hZ2VyKGF1dGgpO1xuICAgIHRoaXMuZXZlbnRNYW5hZ2Vyc1trZXldID0geyBwcm9taXNlIH07XG5cbiAgICAvLyBJZiB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCwgdGhlIGtleSBzaG91bGQgYmUgcmVtb3ZlZCBzbyB0aGF0IHRoZVxuICAgIC8vIG9wZXJhdGlvbiBjYW4gYmUgcmV0cmllZCBsYXRlci5cbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHtcbiAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50TWFuYWdlcnNba2V5XTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBpbml0QW5kR2V0TWFuYWdlcihhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPEV2ZW50TWFuYWdlcj4ge1xuICAgIGNvbnN0IGlmcmFtZSA9IGF3YWl0IF9vcGVuSWZyYW1lKGF1dGgpO1xuICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgQXV0aEV2ZW50TWFuYWdlcihhdXRoKTtcbiAgICBpZnJhbWUucmVnaXN0ZXI8R2FwaUF1dGhFdmVudD4oXG4gICAgICAnYXV0aEV2ZW50JyxcbiAgICAgIChpZnJhbWVFdmVudDogR2FwaUF1dGhFdmVudCB8IG51bGwpID0+IHtcbiAgICAgICAgX2Fzc2VydChpZnJhbWVFdmVudD8uYXV0aEV2ZW50LCBhdXRoLCBBdXRoRXJyb3JDb2RlLklOVkFMSURfQVVUSF9FVkVOVCk7XG4gICAgICAgIC8vIFRPRE86IENvbnNpZGVyIHNwbGl0dGluZyByZWRpcmVjdCBhbmQgcG9wdXAgZXZlbnRzIGVhcmxpZXIgb25cblxuICAgICAgICBjb25zdCBoYW5kbGVkID0gbWFuYWdlci5vbkV2ZW50KGlmcmFtZUV2ZW50LmF1dGhFdmVudCk7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogaGFuZGxlZCA/IEdhcGlPdXRjb21lLkFDSyA6IEdhcGlPdXRjb21lLkVSUk9SIH07XG4gICAgICB9LFxuICAgICAgZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUlxuICAgICk7XG5cbiAgICB0aGlzLmV2ZW50TWFuYWdlcnNbYXV0aC5fa2V5KCldID0geyBtYW5hZ2VyIH07XG4gICAgdGhpcy5pZnJhbWVzW2F1dGguX2tleSgpXSA9IGlmcmFtZTtcbiAgICByZXR1cm4gbWFuYWdlcjtcbiAgfVxuXG4gIF9pc0lmcmFtZVdlYlN0b3JhZ2VTdXBwb3J0ZWQoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGNiOiAoc3VwcG9ydGVkOiBib29sZWFuKSA9PiB1bmtub3duXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuaWZyYW1lc1thdXRoLl9rZXkoKV07XG4gICAgaWZyYW1lLnNlbmQ8Z2FwaS5pZnJhbWVzLk1lc3NhZ2UsIFdlYlN0b3JhZ2VTdXBwb3J0TWVzc2FnZT4oXG4gICAgICBXRUJfU1RPUkFHRV9TVVBQT1JUX0tFWSxcbiAgICAgIHsgdHlwZTogV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVkgfSxcbiAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnN0IGlzU3VwcG9ydGVkID0gcmVzdWx0Py5bMF0/LltXRUJfU1RPUkFHRV9TVVBQT1JUX0tFWV07XG4gICAgICAgIGlmIChpc1N1cHBvcnRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2IoISFpc1N1cHBvcnRlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICAgIH0sXG4gICAgICBnYXBpLmlmcmFtZXMuQ1JPU1NfT1JJR0lOX0lGUkFNRVNfRklMVEVSXG4gICAgKTtcbiAgfVxuXG4gIF9vcmlnaW5WYWxpZGF0aW9uKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGtleSA9IGF1dGguX2tleSgpO1xuICAgIGlmICghdGhpcy5vcmlnaW5WYWxpZGF0aW9uUHJvbWlzZXNba2V5XSkge1xuICAgICAgdGhpcy5vcmlnaW5WYWxpZGF0aW9uUHJvbWlzZXNba2V5XSA9IF92YWxpZGF0ZU9yaWdpbihhdXRoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vcmlnaW5WYWxpZGF0aW9uUHJvbWlzZXNba2V5XTtcbiAgfVxuXG4gIGdldCBfc2hvdWxkSW5pdFByb2FjdGl2ZWx5KCk6IGJvb2xlYW4ge1xuICAgIC8vIE1vYmlsZSBicm93c2VycyBhbmQgU2FmYXJpIG5lZWQgdG8gb3B0aW1pc3RpY2FsbHkgaW5pdGlhbGl6ZVxuICAgIHJldHVybiBfaXNNb2JpbGVCcm93c2VyKCkgfHwgX2lzU2FmYXJpKCkgfHwgX2lzSU9TKCk7XG4gIH1cblxuICBfY29tcGxldGVSZWRpcmVjdEZuID0gX2dldFJlZGlyZWN0UmVzdWx0O1xuXG4gIF9vdmVycmlkZVJlZGlyZWN0UmVzdWx0ID0gX292ZXJyaWRlUmVkaXJlY3RSZXN1bHQ7XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBvcHVwUmVkaXJlY3RSZXNvbHZlcn0gc3VpdGFibGUgZm9yIGJyb3dzZXJcbiAqIGJhc2VkIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgPVxuICBCcm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEZhY3RvcklkLCBNdWx0aUZhY3RvckFzc2VydGlvbiB9IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBkZWJ1Z0ZhaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwsIE11bHRpRmFjdG9yU2Vzc2lvblR5cGUgfSBmcm9tICcuL21mYV9zZXNzaW9uJztcbmltcG9ydCB7IEZpbmFsaXplTWZhUmVzcG9uc2UgfSBmcm9tICcuLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsIGltcGxlbWVudHMgTXVsdGlGYWN0b3JBc3NlcnRpb24ge1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocmVhZG9ubHkgZmFjdG9ySWQ6IEZhY3RvcklkKSB7fVxuXG4gIF9wcm9jZXNzKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBzZXNzaW9uOiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLFxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+IHtcbiAgICBzd2l0Y2ggKHNlc3Npb24udHlwZSkge1xuICAgICAgY2FzZSBNdWx0aUZhY3RvclNlc3Npb25UeXBlLkVOUk9MTDpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmFsaXplRW5yb2xsKGF1dGgsIHNlc3Npb24uY3JlZGVudGlhbCwgZGlzcGxheU5hbWUpO1xuICAgICAgY2FzZSBNdWx0aUZhY3RvclNlc3Npb25UeXBlLlNJR05fSU46XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5hbGl6ZVNpZ25JbihhdXRoLCBzZXNzaW9uLmNyZWRlbnRpYWwpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRlYnVnRmFpbCgndW5leHBlY3RlZCBNdWx0aUZhY3RvclNlc3Npb25UeXBlJyk7XG4gICAgfVxuICB9XG5cbiAgYWJzdHJhY3QgX2ZpbmFsaXplRW5yb2xsKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmcsXG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmcgfCBudWxsXG4gICk6IFByb21pc2U8RmluYWxpemVNZmFSZXNwb25zZT47XG4gIGFic3RyYWN0IF9maW5hbGl6ZVNpZ25JbihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHN0cmluZ1xuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+O1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIEZhY3RvcklkLFxuICBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9uXG59IGZyb20gJy4uLy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbCB9IGZyb20gJy4uLy4uLy4uL21mYS9tZmFfYXNzZXJ0aW9uJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgZmluYWxpemVFbnJvbGxQaG9uZU1mYSB9IGZyb20gJy4uLy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvbWZhJztcbmltcG9ydCB7IFBob25lQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2NyZWRlbnRpYWxzL3Bob25lJztcbmltcG9ydCB7XG4gIGZpbmFsaXplU2lnbkluUGhvbmVNZmEsXG4gIEZpbmFsaXplTWZhUmVzcG9uc2Vcbn0gZnJvbSAnLi4vLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5cbi8qKlxuICoge0Bpbmhlcml0ZG9jIFBob25lTXVsdGlGYWN0b3JBc3NlcnRpb259XG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGxcbiAgZXh0ZW5kcyBNdWx0aUZhY3RvckFzc2VydGlvbkltcGxcbiAgaW1wbGVtZW50cyBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9uXG57XG4gIHByaXZhdGUgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjcmVkZW50aWFsOiBQaG9uZUF1dGhDcmVkZW50aWFsKSB7XG4gICAgc3VwZXIoRmFjdG9ySWQuUEhPTkUpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21DcmVkZW50aWFsKFxuICAgIGNyZWRlbnRpYWw6IFBob25lQXV0aENyZWRlbnRpYWxcbiAgKTogUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwge1xuICAgIHJldHVybiBuZXcgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwoY3JlZGVudGlhbCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9maW5hbGl6ZUVucm9sbChcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgaWRUb2tlbjogc3RyaW5nLFxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZmluYWxpemVFbnJvbGxQaG9uZU1mYShhdXRoLCB7XG4gICAgICBpZFRva2VuLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IHRoaXMuY3JlZGVudGlhbC5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmluYWxpemVTaWduSW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIG1mYVBlbmRpbmdDcmVkZW50aWFsOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxGaW5hbGl6ZU1mYVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGZpbmFsaXplU2lnbkluUGhvbmVNZmEoYXV0aCwge1xuICAgICAgbWZhUGVuZGluZ0NyZWRlbnRpYWwsXG4gICAgICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IHRoaXMuY3JlZGVudGlhbC5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYSB7QGxpbmsgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvciB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIHtAbGluayBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9ufSB0byBjb25maXJtIG93bmVyc2hpcCBvZiB0aGUgcGhvbmUgc2Vjb25kIGZhY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHBob25lQXV0aENyZWRlbnRpYWwgLSBBIGNyZWRlbnRpYWwgcHJvdmlkZWQgYnkge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWx9LlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9ufSB3aGljaCBjYW4gYmUgdXNlZCB3aXRoXG4gICAqIHtAbGluayBNdWx0aUZhY3RvclJlc29sdmVyLnJlc29sdmVTaWduSW59XG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0aW9uKGNyZWRlbnRpYWw6IFBob25lQXV0aENyZWRlbnRpYWwpOiBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9uIHtcbiAgICByZXR1cm4gUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwuX2Zyb21DcmVkZW50aWFsKGNyZWRlbnRpYWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBwaG9uZSBzZWNvbmQgZmFjdG9yOiBgcGhvbmVgLlxuICAgKi9cbiAgc3RhdGljIEZBQ1RPUl9JRCA9ICdwaG9uZSc7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtcbiAgVG90cE11bHRpRmFjdG9yQXNzZXJ0aW9uLFxuICBNdWx0aUZhY3RvclNlc3Npb24sXG4gIEZhY3RvcklkXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7XG4gIGZpbmFsaXplRW5yb2xsVG90cE1mYSxcbiAgc3RhcnRFbnJvbGxUb3RwTWZhLFxuICBTdGFydFRvdHBNZmFFbnJvbGxtZW50UmVzcG9uc2UsXG4gIFRvdHBWZXJpZmljYXRpb25JbmZvXG59IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvbWZhJztcbmltcG9ydCB7XG4gIEZpbmFsaXplTWZhUmVzcG9uc2UsXG4gIGZpbmFsaXplU2lnbkluVG90cE1mYVxufSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbCB9IGZyb20gJy4uLy4uL21mYS9tZmFfYXNzZXJ0aW9uJztcbmltcG9ydCB7IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwgfSBmcm9tICcuLi9tZmFfc2Vzc2lvbic7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGEge0BsaW5rIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVG90cE11bHRpRmFjdG9yR2VuZXJhdG9yIHtcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEge0BsaW5rIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbn0gdG8gY29uZmlybSBvd25lcnNoaXAgb2ZcbiAgICogdGhlIFRPVFAgKHRpbWUtYmFzZWQgb25lLXRpbWUgcGFzc3dvcmQpIHNlY29uZCBmYWN0b3IuXG4gICAqIFRoaXMgYXNzZXJ0aW9uIGlzIHVzZWQgdG8gY29tcGxldGUgZW5yb2xsbWVudCBpbiBUT1RQIHNlY29uZCBmYWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSBzZWNyZXQgQSB7QGxpbmsgVG90cFNlY3JldH0gY29udGFpbmluZyB0aGUgc2hhcmVkIHNlY3JldCBrZXkgYW5kIG90aGVyIFRPVFAgcGFyYW1ldGVycy5cbiAgICogQHBhcmFtIG9uZVRpbWVQYXNzd29yZCBPbmUtdGltZSBwYXNzd29yZCBmcm9tIFRPVFAgQXBwLlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBUb3RwTXVsdGlGYWN0b3JBc3NlcnRpb259IHdoaWNoIGNhbiBiZSB1c2VkIHdpdGhcbiAgICoge0BsaW5rIE11bHRpRmFjdG9yVXNlci5lbnJvbGx9LlxuICAgKi9cbiAgc3RhdGljIGFzc2VydGlvbkZvckVucm9sbG1lbnQoXG4gICAgc2VjcmV0OiBUb3RwU2VjcmV0LFxuICAgIG9uZVRpbWVQYXNzd29yZDogc3RyaW5nXG4gICk6IFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbiB7XG4gICAgcmV0dXJuIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbkltcGwuX2Zyb21TZWNyZXQoc2VjcmV0LCBvbmVUaW1lUGFzc3dvcmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEge0BsaW5rIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbn0gdG8gY29uZmlybSBvd25lcnNoaXAgb2YgdGhlIFRPVFAgc2Vjb25kIGZhY3Rvci5cbiAgICogVGhpcyBhc3NlcnRpb24gaXMgdXNlZCB0byBjb21wbGV0ZSBzaWduSW4gd2l0aCBUT1RQIGFzIHRoZSBzZWNvbmQgZmFjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gZW5yb2xsbWVudElkIGlkZW50aWZpZXMgdGhlIGVucm9sbGVkIFRPVFAgc2Vjb25kIGZhY3Rvci5cbiAgICogQHBhcmFtIG9uZVRpbWVQYXNzd29yZCBPbmUtdGltZSBwYXNzd29yZCBmcm9tIFRPVFAgQXBwLlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBUb3RwTXVsdGlGYWN0b3JBc3NlcnRpb259IHdoaWNoIGNhbiBiZSB1c2VkIHdpdGhcbiAgICoge0BsaW5rIE11bHRpRmFjdG9yUmVzb2x2ZXIucmVzb2x2ZVNpZ25Jbn0uXG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0aW9uRm9yU2lnbkluKFxuICAgIGVucm9sbG1lbnRJZDogc3RyaW5nLFxuICAgIG9uZVRpbWVQYXNzd29yZDogc3RyaW5nXG4gICk6IFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbiB7XG4gICAgcmV0dXJuIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbkltcGwuX2Zyb21FbnJvbGxtZW50SWQoXG4gICAgICBlbnJvbGxtZW50SWQsXG4gICAgICBvbmVUaW1lUGFzc3dvcmRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRvIHtAbGluayBUb3RwU2VjcmV0fSB3aGljaCBjb250YWlucyB0aGUgVE9UUCBzaGFyZWQgc2VjcmV0IGtleSBhbmQgb3RoZXIgcGFyYW1ldGVycy5cbiAgICogQ3JlYXRlcyBhIFRPVFAgc2VjcmV0IGFzIHBhcnQgb2YgZW5yb2xsaW5nIGEgVE9UUCBzZWNvbmQgZmFjdG9yLlxuICAgKiBVc2VkIGZvciBnZW5lcmF0aW5nIGEgUVIgY29kZSBVUkwgb3IgaW5wdXR0aW5nIGludG8gYSBUT1RQIGFwcC5cbiAgICogVGhpcyBtZXRob2QgdXNlcyB0aGUgYXV0aCBpbnN0YW5jZSBjb3JyZXNwb25kaW5nIHRvIHRoZSB1c2VyIGluIHRoZSBtdWx0aUZhY3RvclNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSBzZXNzaW9uIFRoZSB7QGxpbmsgTXVsdGlGYWN0b3JTZXNzaW9ufSB0aGF0IHRoZSB1c2VyIGlzIHBhcnQgb2YuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0byB7QGxpbmsgVG90cFNlY3JldH0uXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVTZWNyZXQoXG4gICAgc2Vzc2lvbjogTXVsdGlGYWN0b3JTZXNzaW9uXG4gICk6IFByb21pc2U8VG90cFNlY3JldD4ge1xuICAgIGNvbnN0IG1mYVNlc3Npb24gPSBzZXNzaW9uIGFzIE11bHRpRmFjdG9yU2Vzc2lvbkltcGw7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBtZmFTZXNzaW9uLmF1dGggIT09ICd1bmRlZmluZWQnLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdGFydEVucm9sbFRvdHBNZmEobWZhU2Vzc2lvbi5hdXRoLCB7XG4gICAgICBpZFRva2VuOiBtZmFTZXNzaW9uLmNyZWRlbnRpYWwsXG4gICAgICB0b3RwRW5yb2xsbWVudEluZm86IHt9XG4gICAgfSk7XG4gICAgcmV0dXJuIFRvdHBTZWNyZXQuX2Zyb21TdGFydFRvdHBNZmFFbnJvbGxtZW50UmVzcG9uc2UoXG4gICAgICByZXNwb25zZSxcbiAgICAgIG1mYVNlc3Npb24uYXV0aFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIFRPVFAgc2Vjb25kIGZhY3RvcjogYHRvdHBgLlxuICAgKi9cbiAgc3RhdGljIEZBQ1RPUl9JRDogJ3RvdHAnID0gRmFjdG9ySWQuVE9UUDtcbn1cblxuZXhwb3J0IGNsYXNzIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbkltcGxcbiAgZXh0ZW5kcyBNdWx0aUZhY3RvckFzc2VydGlvbkltcGxcbiAgaW1wbGVtZW50cyBUb3RwTXVsdGlGYWN0b3JBc3NlcnRpb25cbntcbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgb3RwOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgZW5yb2xsbWVudElkPzogc3RyaW5nLFxuICAgIHJlYWRvbmx5IHNlY3JldD86IFRvdHBTZWNyZXRcbiAgKSB7XG4gICAgc3VwZXIoRmFjdG9ySWQuVE9UUCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyBfZnJvbVNlY3JldChcbiAgICBzZWNyZXQ6IFRvdHBTZWNyZXQsXG4gICAgb3RwOiBzdHJpbmdcbiAgKTogVG90cE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbCB7XG4gICAgcmV0dXJuIG5ldyBUb3RwTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsKG90cCwgdW5kZWZpbmVkLCBzZWNyZXQpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21FbnJvbGxtZW50SWQoXG4gICAgZW5yb2xsbWVudElkOiBzdHJpbmcsXG4gICAgb3RwOiBzdHJpbmdcbiAgKTogVG90cE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbCB7XG4gICAgcmV0dXJuIG5ldyBUb3RwTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsKG90cCwgZW5yb2xsbWVudElkKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXN5bmMgX2ZpbmFsaXplRW5yb2xsKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmcsXG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmcgfCBudWxsXG4gICk6IFByb21pc2U8RmluYWxpemVNZmFSZXNwb25zZT4ge1xuICAgIF9hc3NlcnQoXG4gICAgICB0eXBlb2YgdGhpcy5zZWNyZXQgIT09ICd1bmRlZmluZWQnLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIHJldHVybiBmaW5hbGl6ZUVucm9sbFRvdHBNZmEoYXV0aCwge1xuICAgICAgaWRUb2tlbixcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgdG90cFZlcmlmaWNhdGlvbkluZm86IHRoaXMuc2VjcmV0Ll9tYWtlVG90cFZlcmlmaWNhdGlvbkluZm8odGhpcy5vdHApXG4gICAgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIF9maW5hbGl6ZVNpZ25JbihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHN0cmluZ1xuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+IHtcbiAgICBfYXNzZXJ0KFxuICAgICAgdGhpcy5lbnJvbGxtZW50SWQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLm90cCAhPT0gdW5kZWZpbmVkLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIGNvbnN0IHRvdHBWZXJpZmljYXRpb25JbmZvID0geyB2ZXJpZmljYXRpb25Db2RlOiB0aGlzLm90cCB9O1xuICAgIHJldHVybiBmaW5hbGl6ZVNpZ25JblRvdHBNZmEoYXV0aCwge1xuICAgICAgbWZhUGVuZGluZ0NyZWRlbnRpYWwsXG4gICAgICBtZmFFbnJvbGxtZW50SWQ6IHRoaXMuZW5yb2xsbWVudElkLFxuICAgICAgdG90cFZlcmlmaWNhdGlvbkluZm9cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGEge0BsaW5rIFRvdHBNdWx0aUZhY3RvckFzc2VydGlvbn0uXG4gKlxuICogU3RvcmVzIHRoZSBzaGFyZWQgc2VjcmV0IGtleSBhbmQgb3RoZXIgcGFyYW1ldGVycyB0byBnZW5lcmF0ZSB0aW1lLWJhc2VkIE9UUHMuXG4gKiBJbXBsZW1lbnRzIG1ldGhvZHMgdG8gcmV0cmlldmUgdGhlIHNoYXJlZCBzZWNyZXQga2V5IGFuZCBnZW5lcmF0ZSBhIFFSIGNvZGUgVVJMLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVG90cFNlY3JldCB7XG4gIC8qKlxuICAgKiBTaGFyZWQgc2VjcmV0IGtleS9zZWVkIHVzZWQgZm9yIGVucm9sbGluZyBpbiBUT1RQIE1GQSBhbmQgZ2VuZXJhdGluZyBPVFBzLlxuICAgKi9cbiAgcmVhZG9ubHkgc2VjcmV0S2V5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBIYXNoaW5nIGFsZ29yaXRobSB1c2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgaGFzaGluZ0FsZ29yaXRobTogc3RyaW5nO1xuICAvKipcbiAgICogTGVuZ3RoIG9mIHRoZSBvbmUtdGltZSBwYXNzd29yZHMgdG8gYmUgZ2VuZXJhdGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgY29kZUxlbmd0aDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGludGVydmFsIChpbiBzZWNvbmRzKSB3aGVuIHRoZSBPVFAgY29kZXMgc2hvdWxkIGNoYW5nZS5cbiAgICovXG4gIHJlYWRvbmx5IGNvZGVJbnRlcnZhbFNlY29uZHM6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSB0aW1lc3RhbXAgKFVUQyBzdHJpbmcpIGJ5IHdoaWNoIFRPVFAgZW5yb2xsbWVudCBzaG91bGQgYmUgY29tcGxldGVkLlxuICAgKi9cbiAgLy8gVGhpcyBjYW4gYmUgdXNlZCBieSBjYWxsZXJzIHRvIHNob3cgYSBjb3VudGRvd24gb2Ygd2hlbiB0byBlbnRlciBPVFAgY29kZSBieS5cbiAgcmVhZG9ubHkgZW5yb2xsbWVudENvbXBsZXRpb25EZWFkbGluZTogc3RyaW5nO1xuXG4gIC8vIFRoZSBwdWJsaWMgbWVtYmVycyBhcmUgZGVjbGFyZWQgb3V0c2lkZSB0aGUgY29uc3RydWN0b3Igc28gdGhlIGRvY3MgY2FuIGJlIGdlbmVyYXRlZC5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICBzZWNyZXRLZXk6IHN0cmluZyxcbiAgICBoYXNoaW5nQWxnb3JpdGhtOiBzdHJpbmcsXG4gICAgY29kZUxlbmd0aDogbnVtYmVyLFxuICAgIGNvZGVJbnRlcnZhbFNlY29uZHM6IG51bWJlcixcbiAgICBlbnJvbGxtZW50Q29tcGxldGlvbkRlYWRsaW5lOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXNzaW9uSW5mbzogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXV0aDogQXV0aEludGVybmFsXG4gICkge1xuICAgIHRoaXMuc2VjcmV0S2V5ID0gc2VjcmV0S2V5O1xuICAgIHRoaXMuaGFzaGluZ0FsZ29yaXRobSA9IGhhc2hpbmdBbGdvcml0aG07XG4gICAgdGhpcy5jb2RlTGVuZ3RoID0gY29kZUxlbmd0aDtcbiAgICB0aGlzLmNvZGVJbnRlcnZhbFNlY29uZHMgPSBjb2RlSW50ZXJ2YWxTZWNvbmRzO1xuICAgIHRoaXMuZW5yb2xsbWVudENvbXBsZXRpb25EZWFkbGluZSA9IGVucm9sbG1lbnRDb21wbGV0aW9uRGVhZGxpbmU7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyBfZnJvbVN0YXJ0VG90cE1mYUVucm9sbG1lbnRSZXNwb25zZShcbiAgICByZXNwb25zZTogU3RhcnRUb3RwTWZhRW5yb2xsbWVudFJlc3BvbnNlLFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbFxuICApOiBUb3RwU2VjcmV0IHtcbiAgICByZXR1cm4gbmV3IFRvdHBTZWNyZXQoXG4gICAgICByZXNwb25zZS50b3RwU2Vzc2lvbkluZm8uc2hhcmVkU2VjcmV0S2V5LFxuICAgICAgcmVzcG9uc2UudG90cFNlc3Npb25JbmZvLmhhc2hpbmdBbGdvcml0aG0sXG4gICAgICByZXNwb25zZS50b3RwU2Vzc2lvbkluZm8udmVyaWZpY2F0aW9uQ29kZUxlbmd0aCxcbiAgICAgIHJlc3BvbnNlLnRvdHBTZXNzaW9uSW5mby5wZXJpb2RTZWMsXG4gICAgICBuZXcgRGF0ZShyZXNwb25zZS50b3RwU2Vzc2lvbkluZm8uZmluYWxpemVFbnJvbGxtZW50VGltZSkudG9VVENTdHJpbmcoKSxcbiAgICAgIHJlc3BvbnNlLnRvdHBTZXNzaW9uSW5mby5zZXNzaW9uSW5mbyxcbiAgICAgIGF1dGhcbiAgICApO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfbWFrZVRvdHBWZXJpZmljYXRpb25JbmZvKG90cDogc3RyaW5nKTogVG90cFZlcmlmaWNhdGlvbkluZm8ge1xuICAgIHJldHVybiB7IHNlc3Npb25JbmZvOiB0aGlzLnNlc3Npb25JbmZvLCB2ZXJpZmljYXRpb25Db2RlOiBvdHAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUVIgY29kZSBVUkwgYXMgZGVzY3JpYmVkIGluXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvZ29vZ2xlLWF1dGhlbnRpY2F0b3Ivd2lraS9LZXktVXJpLUZvcm1hdFxuICAgKiBUaGlzIGNhbiBiZSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgYXMgYSBRUiBjb2RlIHRvIGJlIHNjYW5uZWQgaW50byBhIFRPVFAgYXBwIGxpa2UgR29vZ2xlIEF1dGhlbnRpY2F0b3IuXG4gICAqIElmIHRoZSBvcHRpb25hbCBwYXJhbWV0ZXJzIGFyZSB1bnNwZWNpZmllZCwgYW4gYWNjb3VudE5hbWUgb2YgPHVzZXJFbWFpbD4gYW5kIGlzc3VlciBvZiA8ZmlyZWJhc2VBcHBOYW1lPiBhcmUgdXNlZC5cbiAgICpcbiAgICogQHBhcmFtIGFjY291bnROYW1lIHRoZSBuYW1lIG9mIHRoZSBhY2NvdW50L2FwcCBhbG9uZyB3aXRoIGEgdXNlciBpZGVudGlmaWVyLlxuICAgKiBAcGFyYW0gaXNzdWVyIGlzc3VlciBvZiB0aGUgVE9UUCAobGlrZWx5IHRoZSBhcHAgbmFtZSkuXG4gICAqIEByZXR1cm5zIEEgUVIgY29kZSBVUkwgc3RyaW5nLlxuICAgKi9cbiAgZ2VuZXJhdGVRckNvZGVVcmwoYWNjb3VudE5hbWU/OiBzdHJpbmcsIGlzc3Vlcj86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHVzZURlZmF1bHRzID0gZmFsc2U7XG4gICAgaWYgKF9pc0VtcHR5U3RyaW5nKGFjY291bnROYW1lKSB8fCBfaXNFbXB0eVN0cmluZyhpc3N1ZXIpKSB7XG4gICAgICB1c2VEZWZhdWx0cyA9IHRydWU7XG4gICAgfVxuICAgIGlmICh1c2VEZWZhdWx0cykge1xuICAgICAgaWYgKF9pc0VtcHR5U3RyaW5nKGFjY291bnROYW1lKSkge1xuICAgICAgICBhY2NvdW50TmFtZSA9IHRoaXMuYXV0aC5jdXJyZW50VXNlcj8uZW1haWwgfHwgJ3Vua25vd251c2VyJztcbiAgICAgIH1cbiAgICAgIGlmIChfaXNFbXB0eVN0cmluZyhpc3N1ZXIpKSB7XG4gICAgICAgIGlzc3VlciA9IHRoaXMuYXV0aC5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYG90cGF1dGg6Ly90b3RwLyR7aXNzdWVyfToke2FjY291bnROYW1lfT9zZWNyZXQ9JHt0aGlzLnNlY3JldEtleX0maXNzdWVyPSR7aXNzdWVyfSZhbGdvcml0aG09JHt0aGlzLmhhc2hpbmdBbGdvcml0aG19JmRpZ2l0cz0ke3RoaXMuY29kZUxlbmd0aH1gO1xuICB9XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIF9pc0VtcHR5U3RyaW5nKGlucHV0Pzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnIHx8IGlucHV0Py5sZW5ndGggPT09IDA7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVbnN1YnNjcmliZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IEZpcmViYXNlQXV0aEludGVybmFsIH0gZnJvbSAnQGZpcmViYXNlL2F1dGgtaW50ZXJvcC10eXBlcyc7XG5cbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbmludGVyZmFjZSBUb2tlbkxpc3RlbmVyIHtcbiAgKHRvazogc3RyaW5nIHwgbnVsbCk6IHVua25vd247XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRoSW50ZXJvcCBpbXBsZW1lbnRzIEZpcmViYXNlQXV0aEludGVybmFsIHtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnRlcm5hbExpc3RlbmVyczogTWFwPFRva2VuTGlzdGVuZXIsIFVuc3Vic2NyaWJlPiA9XG4gICAgbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXV0aDogQXV0aEludGVybmFsKSB7fVxuXG4gIGdldFVpZCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICB0aGlzLmFzc2VydEF1dGhDb25maWd1cmVkKCk7XG4gICAgcmV0dXJuIHRoaXMuYXV0aC5jdXJyZW50VXNlcj8udWlkIHx8IG51bGw7XG4gIH1cblxuICBhc3luYyBnZXRUb2tlbihcbiAgICBmb3JjZVJlZnJlc2g/OiBib29sZWFuXG4gICk6IFByb21pc2U8eyBhY2Nlc3NUb2tlbjogc3RyaW5nIH0gfCBudWxsPiB7XG4gICAgdGhpcy5hc3NlcnRBdXRoQ29uZmlndXJlZCgpO1xuICAgIGF3YWl0IHRoaXMuYXV0aC5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICAgIGlmICghdGhpcy5hdXRoLmN1cnJlbnRVc2VyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuYXV0aC5jdXJyZW50VXNlci5nZXRJZFRva2VuKGZvcmNlUmVmcmVzaCk7XG4gICAgcmV0dXJuIHsgYWNjZXNzVG9rZW4gfTtcbiAgfVxuXG4gIGFkZEF1dGhUb2tlbkxpc3RlbmVyKGxpc3RlbmVyOiBUb2tlbkxpc3RlbmVyKTogdm9pZCB7XG4gICAgdGhpcy5hc3NlcnRBdXRoQ29uZmlndXJlZCgpO1xuICAgIGlmICh0aGlzLmludGVybmFsTGlzdGVuZXJzLmhhcyhsaXN0ZW5lcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHRoaXMuYXV0aC5vbklkVG9rZW5DaGFuZ2VkKHVzZXIgPT4ge1xuICAgICAgbGlzdGVuZXIoXG4gICAgICAgICh1c2VyIGFzIFVzZXJJbnRlcm5hbCB8IG51bGwpPy5zdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW4gfHwgbnVsbFxuICAgICAgKTtcbiAgICB9KTtcbiAgICB0aGlzLmludGVybmFsTGlzdGVuZXJzLnNldChsaXN0ZW5lciwgdW5zdWJzY3JpYmUpO1xuICAgIHRoaXMudXBkYXRlUHJvYWN0aXZlUmVmcmVzaCgpO1xuICB9XG5cbiAgcmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIobGlzdGVuZXI6IFRva2VuTGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLmFzc2VydEF1dGhDb25maWd1cmVkKCk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLmludGVybmFsTGlzdGVuZXJzLmdldChsaXN0ZW5lcik7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB1bnN1YnNjcmliZSgpO1xuICAgIHRoaXMudXBkYXRlUHJvYWN0aXZlUmVmcmVzaCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3NlcnRBdXRoQ29uZmlndXJlZCgpOiB2b2lkIHtcbiAgICBfYXNzZXJ0KFxuICAgICAgdGhpcy5hdXRoLl9pbml0aWFsaXphdGlvblByb21pc2UsXG4gICAgICBBdXRoRXJyb3JDb2RlLkRFUEVOREVOVF9TREtfSU5JVF9CRUZPUkVfQVVUSFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVByb2FjdGl2ZVJlZnJlc2goKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuc2l6ZSA+IDApIHtcbiAgICAgIHRoaXMuYXV0aC5fc3RhcnRQcm9hY3RpdmVSZWZyZXNoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXV0aC5fc3RvcFByb2FjdGl2ZVJlZnJlc2goKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IF9yZWdpc3RlckNvbXBvbmVudCwgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbXBvbmVudFR5cGUsXG4gIEluc3RhbnRpYXRpb25Nb2RlXG59IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBuYW1lLCB2ZXJzaW9uIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRDbGllbnRWZXJzaW9uLCBDbGllbnRQbGF0Zm9ybSB9IGZyb20gJy4uL3V0aWwvdmVyc2lvbic7XG5pbXBvcnQgeyBfY2FzdEF1dGgsIEF1dGhJbXBsLCBEZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgQXV0aEludGVyb3AgfSBmcm9tICcuL2ZpcmViYXNlX2ludGVybmFsJztcbmltcG9ydCB7IENvbmZpZ0ludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgX2luaXRpYWxpemVBdXRoSW5zdGFuY2UgfSBmcm9tICcuL2luaXRpYWxpemUnO1xuXG5leHBvcnQgY29uc3QgZW51bSBfQ29tcG9uZW50TmFtZSB7XG4gIEFVVEggPSAnYXV0aCcsXG4gIEFVVEhfSU5URVJOQUwgPSAnYXV0aC1pbnRlcm5hbCdcbn1cblxuZnVuY3Rpb24gZ2V0VmVyc2lvbkZvclBsYXRmb3JtKFxuICBjbGllbnRQbGF0Zm9ybTogQ2xpZW50UGxhdGZvcm1cbik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIHN3aXRjaCAoY2xpZW50UGxhdGZvcm0pIHtcbiAgICBjYXNlIENsaWVudFBsYXRmb3JtLk5PREU6XG4gICAgICByZXR1cm4gJ25vZGUnO1xuICAgIGNhc2UgQ2xpZW50UGxhdGZvcm0uUkVBQ1RfTkFUSVZFOlxuICAgICAgcmV0dXJuICdybic7XG4gICAgY2FzZSBDbGllbnRQbGF0Zm9ybS5XT1JLRVI6XG4gICAgICByZXR1cm4gJ3dlYndvcmtlcic7XG4gICAgY2FzZSBDbGllbnRQbGF0Zm9ybS5DT1JET1ZBOlxuICAgICAgcmV0dXJuICdjb3Jkb3ZhJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJBdXRoKGNsaWVudFBsYXRmb3JtOiBDbGllbnRQbGF0Zm9ybSk6IHZvaWQge1xuICBfcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgbmV3IENvbXBvbmVudChcbiAgICAgIF9Db21wb25lbnROYW1lLkFVVEgsXG4gICAgICAoY29udGFpbmVyLCB7IG9wdGlvbnM6IGRlcHMgfTogeyBvcHRpb25zPzogRGVwZW5kZW5jaWVzIH0pID0+IHtcbiAgICAgICAgY29uc3QgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKSE7XG4gICAgICAgIGNvbnN0IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlciA9XG4gICAgICAgICAgY29udGFpbmVyLmdldFByb3ZpZGVyPCdoZWFydGJlYXQnPignaGVhcnRiZWF0Jyk7XG4gICAgICAgIGNvbnN0IGFwcENoZWNrU2VydmljZVByb3ZpZGVyID1cbiAgICAgICAgICBjb250YWluZXIuZ2V0UHJvdmlkZXI8J2FwcC1jaGVjay1pbnRlcm5hbCc+KCdhcHAtY2hlY2staW50ZXJuYWwnKTtcbiAgICAgICAgY29uc3QgeyBhcGlLZXksIGF1dGhEb21haW4gfSA9IGFwcC5vcHRpb25zO1xuXG4gICAgICAgIF9hc3NlcnQoXG4gICAgICAgICAgYXBpS2V5ICYmICFhcGlLZXkuaW5jbHVkZXMoJzonKSxcbiAgICAgICAgICBBdXRoRXJyb3JDb2RlLklOVkFMSURfQVBJX0tFWSxcbiAgICAgICAgICB7IGFwcE5hbWU6IGFwcC5uYW1lIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBjb25maWc6IENvbmZpZ0ludGVybmFsID0ge1xuICAgICAgICAgIGFwaUtleSxcbiAgICAgICAgICBhdXRoRG9tYWluLFxuICAgICAgICAgIGNsaWVudFBsYXRmb3JtLFxuICAgICAgICAgIGFwaUhvc3Q6IERlZmF1bHRDb25maWcuQVBJX0hPU1QsXG4gICAgICAgICAgdG9rZW5BcGlIb3N0OiBEZWZhdWx0Q29uZmlnLlRPS0VOX0FQSV9IT1NULFxuICAgICAgICAgIGFwaVNjaGVtZTogRGVmYXVsdENvbmZpZy5BUElfU0NIRU1FLFxuICAgICAgICAgIHNka0NsaWVudFZlcnNpb246IF9nZXRDbGllbnRWZXJzaW9uKGNsaWVudFBsYXRmb3JtKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGF1dGhJbnN0YW5jZSA9IG5ldyBBdXRoSW1wbChcbiAgICAgICAgICBhcHAsXG4gICAgICAgICAgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyLFxuICAgICAgICAgIGFwcENoZWNrU2VydmljZVByb3ZpZGVyLFxuICAgICAgICAgIGNvbmZpZ1xuICAgICAgICApO1xuICAgICAgICBfaW5pdGlhbGl6ZUF1dGhJbnN0YW5jZShhdXRoSW5zdGFuY2UsIGRlcHMpO1xuXG4gICAgICAgIHJldHVybiBhdXRoSW5zdGFuY2U7XG4gICAgICB9LFxuICAgICAgQ29tcG9uZW50VHlwZS5QVUJMSUNcbiAgICApXG4gICAgICAvKipcbiAgICAgICAqIEF1dGggY2FuIG9ubHkgYmUgaW5pdGlhbGl6ZWQgYnkgZXhwbGljaXRseSBjYWxsaW5nIGdldEF1dGgoKSBvciBpbml0aWFsaXplQXV0aCgpXG4gICAgICAgKiBGb3Igd2h5IHdlIGRvIHRoaXMsIFNlZSBnby9maXJlYmFzZS1uZXh0LWF1dGgtaW5pdFxuICAgICAgICovXG4gICAgICAuc2V0SW5zdGFudGlhdGlvbk1vZGUoSW5zdGFudGlhdGlvbk1vZGUuRVhQTElDSVQpXG4gICAgICAvKipcbiAgICAgICAqIEJlY2F1c2UgYWxsIGZpcmViYXNlIHByb2R1Y3RzIHRoYXQgZGVwZW5kIG9uIGF1dGggZGVwZW5kIG9uIGF1dGgtaW50ZXJuYWwgZGlyZWN0bHksXG4gICAgICAgKiB3ZSBuZWVkIHRvIGluaXRpYWxpemUgYXV0aC1pbnRlcm5hbCBhZnRlciBhdXRoIGlzIGluaXRpYWxpemVkIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIG90aGVyIGZpcmViYXNlIHByb2R1Y3RzLlxuICAgICAgICovXG4gICAgICAuc2V0SW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2soXG4gICAgICAgIChjb250YWluZXIsIF9pbnN0YW5jZUlkZW50aWZpZXIsIF9pbnN0YW5jZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1dGhJbnRlcm5hbFByb3ZpZGVyID0gY29udGFpbmVyLmdldFByb3ZpZGVyKFxuICAgICAgICAgICAgX0NvbXBvbmVudE5hbWUuQVVUSF9JTlRFUk5BTFxuICAgICAgICAgICk7XG4gICAgICAgICAgYXV0aEludGVybmFsUHJvdmlkZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICApXG4gICk7XG5cbiAgX3JlZ2lzdGVyQ29tcG9uZW50KFxuICAgIG5ldyBDb21wb25lbnQoXG4gICAgICBfQ29tcG9uZW50TmFtZS5BVVRIX0lOVEVSTkFMLFxuICAgICAgY29udGFpbmVyID0+IHtcbiAgICAgICAgY29uc3QgYXV0aCA9IF9jYXN0QXV0aChcbiAgICAgICAgICBjb250YWluZXIuZ2V0UHJvdmlkZXIoX0NvbXBvbmVudE5hbWUuQVVUSCkuZ2V0SW1tZWRpYXRlKCkhXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAoYXV0aCA9PiBuZXcgQXV0aEludGVyb3AoYXV0aCkpKGF1dGgpO1xuICAgICAgfSxcbiAgICAgIENvbXBvbmVudFR5cGUuUFJJVkFURVxuICAgICkuc2V0SW5zdGFudGlhdGlvbk1vZGUoSW5zdGFudGlhdGlvbk1vZGUuRVhQTElDSVQpXG4gICk7XG5cbiAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sIGdldFZlcnNpb25Gb3JQbGF0Zm9ybShjbGllbnRQbGF0Zm9ybSkpO1xuICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxuICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ19fQlVJTERfVEFSR0VUX18nKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZpcmViYXNlQXBwLCBnZXRBcHAsIF9nZXRQcm92aWRlciB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG5pbXBvcnQge1xuICBpbml0aWFsaXplQXV0aCxcbiAgYmVmb3JlQXV0aFN0YXRlQ2hhbmdlZCxcbiAgb25JZFRva2VuQ2hhbmdlZCxcbiAgY29ubmVjdEF1dGhFbXVsYXRvclxufSBmcm9tICcuLic7XG5pbXBvcnQgeyByZWdpc3RlckF1dGggfSBmcm9tICcuLi9jb3JlL2F1dGgvcmVnaXN0ZXInO1xuaW1wb3J0IHsgQ2xpZW50UGxhdGZvcm0gfSBmcm9tICcuLi9jb3JlL3V0aWwvdmVyc2lvbic7XG5pbXBvcnQgeyBicm93c2VyTG9jYWxQZXJzaXN0ZW5jZSB9IGZyb20gJy4vcGVyc2lzdGVuY2UvbG9jYWxfc3RvcmFnZSc7XG5pbXBvcnQgeyBicm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlIH0gZnJvbSAnLi9wZXJzaXN0ZW5jZS9zZXNzaW9uX3N0b3JhZ2UnO1xuaW1wb3J0IHsgaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZSB9IGZyb20gJy4vcGVyc2lzdGVuY2UvaW5kZXhlZF9kYic7XG5pbXBvcnQgeyBicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyIH0gZnJvbSAnLi9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBBdXRoLCBVc2VyIH0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IGdldERlZmF1bHRFbXVsYXRvckhvc3QsIGdldEV4cGVyaW1lbnRhbFNldHRpbmcgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmNvbnN0IERFRkFVTFRfSURfVE9LRU5fTUFYX0FHRSA9IDUgKiA2MDtcbmNvbnN0IGF1dGhJZFRva2VuTWF4QWdlID1cbiAgZ2V0RXhwZXJpbWVudGFsU2V0dGluZygnYXV0aElkVG9rZW5NYXhBZ2UnKSB8fCBERUZBVUxUX0lEX1RPS0VOX01BWF9BR0U7XG5cbmxldCBsYXN0UG9zdGVkSWRUb2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbCA9IG51bGw7XG5cbmNvbnN0IG1pbnRDb29raWVGYWN0b3J5ID0gKHVybDogc3RyaW5nKSA9PiBhc3luYyAodXNlcjogVXNlciB8IG51bGwpID0+IHtcbiAgY29uc3QgaWRUb2tlblJlc3VsdCA9IHVzZXIgJiYgKGF3YWl0IHVzZXIuZ2V0SWRUb2tlblJlc3VsdCgpKTtcbiAgY29uc3QgaWRUb2tlbkFnZSA9XG4gICAgaWRUb2tlblJlc3VsdCAmJlxuICAgIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIERhdGUucGFyc2UoaWRUb2tlblJlc3VsdC5pc3N1ZWRBdFRpbWUpKSAvIDFfMDAwO1xuICBpZiAoaWRUb2tlbkFnZSAmJiBpZFRva2VuQWdlID4gYXV0aElkVG9rZW5NYXhBZ2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gU3BlY2lmaWNhbGx5IHRyaXAgbnVsbCA9PiB1bmRlZmluZWQgd2hlbiBsb2dnZWQgb3V0LCB0byBkZWxldGUgYW55IGV4aXN0aW5nIGNvb2tpZVxuICBjb25zdCBpZFRva2VuID0gaWRUb2tlblJlc3VsdD8udG9rZW47XG4gIGlmIChsYXN0UG9zdGVkSWRUb2tlbiA9PT0gaWRUb2tlbikge1xuICAgIHJldHVybjtcbiAgfVxuICBsYXN0UG9zdGVkSWRUb2tlbiA9IGlkVG9rZW47XG4gIGF3YWl0IGZldGNoKHVybCwge1xuICAgIG1ldGhvZDogaWRUb2tlbiA/ICdQT1NUJyA6ICdERUxFVEUnLFxuICAgIGhlYWRlcnM6IGlkVG9rZW5cbiAgICAgID8ge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2lkVG9rZW59YFxuICAgICAgICB9XG4gICAgICA6IHt9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBBdXRoIGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9LlxuICogSWYgbm8gaW5zdGFuY2UgZXhpc3RzLCBpbml0aWFsaXplcyBhbiBBdXRoIGluc3RhbmNlIHdpdGggcGxhdGZvcm0tc3BlY2lmaWMgZGVmYXVsdCBkZXBlbmRlbmNpZXMuXG4gKlxuICogQHBhcmFtIGFwcCAtIFRoZSBGaXJlYmFzZSBBcHAuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXV0aChhcHA6IEZpcmViYXNlQXBwID0gZ2V0QXBwKCkpOiBBdXRoIHtcbiAgY29uc3QgcHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnYXV0aCcpO1xuXG4gIGlmIChwcm92aWRlci5pc0luaXRpYWxpemVkKCkpIHtcbiAgICByZXR1cm4gcHJvdmlkZXIuZ2V0SW1tZWRpYXRlKCk7XG4gIH1cblxuICBjb25zdCBhdXRoID0gaW5pdGlhbGl6ZUF1dGgoYXBwLCB7XG4gICAgcG9wdXBSZWRpcmVjdFJlc29sdmVyOiBicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyLFxuICAgIHBlcnNpc3RlbmNlOiBbXG4gICAgICBpbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlLFxuICAgICAgYnJvd3NlckxvY2FsUGVyc2lzdGVuY2UsXG4gICAgICBicm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlXG4gICAgXVxuICB9KTtcblxuICBjb25zdCBhdXRoVG9rZW5TeW5jVXJsID0gZ2V0RXhwZXJpbWVudGFsU2V0dGluZygnYXV0aFRva2VuU3luY1VSTCcpO1xuICBpZiAoYXV0aFRva2VuU3luY1VybCkge1xuICAgIGNvbnN0IG1pbnRDb29raWUgPSBtaW50Q29va2llRmFjdG9yeShhdXRoVG9rZW5TeW5jVXJsKTtcbiAgICBiZWZvcmVBdXRoU3RhdGVDaGFuZ2VkKGF1dGgsIG1pbnRDb29raWUsICgpID0+XG4gICAgICBtaW50Q29va2llKGF1dGguY3VycmVudFVzZXIpXG4gICAgKTtcbiAgICBvbklkVG9rZW5DaGFuZ2VkKGF1dGgsIHVzZXIgPT4gbWludENvb2tpZSh1c2VyKSk7XG4gIH1cblxuICBjb25zdCBhdXRoRW11bGF0b3JIb3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCgnYXV0aCcpO1xuICBpZiAoYXV0aEVtdWxhdG9ySG9zdCkge1xuICAgIGNvbm5lY3RBdXRoRW11bGF0b3IoYXV0aCwgYGh0dHA6Ly8ke2F1dGhFbXVsYXRvckhvc3R9YCk7XG4gIH1cblxuICByZXR1cm4gYXV0aDtcbn1cblxucmVnaXN0ZXJBdXRoKENsaWVudFBsYXRmb3JtLkJST1dTRVIpO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgbmFtZSwgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5cbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnYXBwJyk7XG5leHBvcnQgKiBmcm9tICdAZmlyZWJhc2UvYXBwJztcbiIsImltcG9ydCB7RHJvcGJveCwgRHJvcGJveEF1dGh9IGZyb20gJ2Ryb3Bib3gnXG5pbXBvcnQge1V0aWxzfSBmcm9tICdzdHVmZidcbmltcG9ydCB7dHlwZSBBdXRoLCB0eXBlIFVzZXIsIGdldEF1dGgsIHNpZ25JbldpdGhDdXN0b21Ub2tlbn0gZnJvbSAnZmlyZWJhc2UvYXV0aCdcbmltcG9ydCB7dHlwZSBGaXJlYmFzZUFwcCwgaW5pdGlhbGl6ZUFwcH0gZnJvbSAnZmlyZWJhc2UvYXBwJ1xuXG4vLyBjb25zdCBkYiA9IHJlcXVpcmUoJ2Ryb3Bib3gnKVxuY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XG5cdGFwaUtleTogJ0FJemFTeUR3dGNQalFNajNKQXk5ZDd3d2ppYjE5ZXl3dkdmZFYzQScsXG5cdGF1dGhEb21haW46ICdzcGx1bmdlLTM5MDExMC5maXJlYmFzZWFwcC5jb20nLFxuXHRwcm9qZWN0SWQ6ICdzcGx1bmdlLTM5MDExMCcsXG5cdHN0b3JhZ2VCdWNrZXQ6ICdzcGx1bmdlLTM5MDExMC5hcHBzcG90LmNvbScsXG5cdG1lc3NhZ2luZ1NlbmRlcklkOiAnMTA0MTU0MjczNjg5NScsXG5cdGFwcElkOiAnMToxMDQxNTQyNzM2ODk1OndlYjo2NjNiOWM1YWIzOGY4Mjk1ZWI5NWNhJyxcbn1cblxubGV0IGZpcmViYXNlX2FwcDogRmlyZWJhc2VBcHBcbmxldCBmaXJlYmFzZV9hdXRoOiBBdXRoXG5mdW5jdGlvbiBnZXRDdXJyZW50VXNlcihhdXRoOiBBdXRoKTogUHJvbWlzZTxVc2VyIHwgbnVsbD4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGNvbnN0IHVuc3Vic2NyaWJlID0gYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZWQoKHVzZXIpID0+IHtcblx0XHRcdHVuc3Vic2NyaWJlKClcblx0XHRcdHJlc29sdmUodXNlcilcblx0XHR9LCByZWplY3QpXG5cdH0pXG59XG5cbmV4cG9ydCBjbGFzcyBEcm9wYm94QXV0aGVyIHtcblx0Q0xJRU5UX0lEOiBzdHJpbmcgPSAnanhweWh2MmNxb3p1YjBjJ1xuXHRSRURJUkVDVF9VUkk6IHN0cmluZyA9ICdodHRwOi8vbG9jYWxob3N0OjgwODAvJ1xuXHQvLyBAdHMtaWdub3JlXG5cdGRieDogRHJvcGJveFxuXHQvLyBAdHMtaWdub3JlXG5cdGRieEF1dGg6IERyb3Bib3hBdXRoXG5cdGF1dGhlZDogYm9vbGVhbiA9IGZhbHNlXG5cdC8vIEB0cy1pZ25vcmVcblx0ZmlyZWJhc2VfdXNlcjogVXNlciB8IG51bGxcblxuXHRhc3luYyBpbml0KCkge1xuXHRcdGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50Jykge1xuXHRcdFx0dGhpcy5SRURJUkVDVF9VUkkgPSAnaHR0cHM6Ly93cmlnaHR3cml0ZXIuZ2l0aHViLmlvL3NwbHVuZ2UvJ1xuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyhkYilcblx0XHRmaXJlYmFzZV9hcHAgPSBpbml0aWFsaXplQXBwKGZpcmViYXNlQ29uZmlnKVxuXHRcdGZpcmViYXNlX2F1dGggPSBnZXRBdXRoKGZpcmViYXNlX2FwcClcblx0XHR0aGlzLmZpcmViYXNlX3VzZXIgPSBhd2FpdCBnZXRDdXJyZW50VXNlcihmaXJlYmFzZV9hdXRoKVxuXHRcdC8vIGZpcmViYXNlX2F1dGgub25BdXRoU3RhdGVDaGFuZ2VkKHVzZXIgPT57XG5cblx0XHQvLyB9KVxuXHRcdHRoaXMuZGJ4QXV0aCA9IG5ldyBEcm9wYm94QXV0aCh7XG5cdFx0XHRjbGllbnRJZDogdGhpcy5DTElFTlRfSUQsXG5cdFx0fSlcblxuXHRcdGlmICh0aGlzLmZpcmViYXNlX3VzZXIpIHtcblx0XHRcdGNvbnN0IGlkX3Rva2VuID0gYXdhaXQgZmlyZWJhc2VfYXV0aC5jdXJyZW50VXNlcj8uZ2V0SWRUb2tlbih0cnVlKVxuXG5cdFx0XHRsZXQgcmVzID0gYXdhaXQgKFxuXHRcdFx0XHRhd2FpdCBmZXRjaCgnaHR0cHM6Ly91cy1jZW50cmFsMS1zcGx1bmdlLTM5MDExMC5jbG91ZGZ1bmN0aW9ucy5uZXQvZ2V0RHJvcGJveENvZGUnICsgYD9pZF90b2tlbj0ke2lkX3Rva2VufWApXG5cdFx0XHQpLmpzb24oKVxuXG5cdFx0XHRjb25zdCBhY2Nlc3NfdG9rZW4gPSByZXMudG9rZW5cblx0XHRcdHRoaXMuZGJ4QXV0aC5zZXRBY2Nlc3NUb2tlbihhY2Nlc3NfdG9rZW4pXG5cblx0XHRcdC8vIHRoaXMuZGJ4QXV0aC5zZXRSZWZyZXNoVG9rZW4ocmVzLnRva2VuKVxuXHRcdFx0dGhpcy5kYnggPSBuZXcgRHJvcGJveCh7XG5cdFx0XHRcdGF1dGg6IHRoaXMuZGJ4QXV0aCxcblx0XHRcdH0pXG5cdFx0XHRsZXQgZmlsZXMgPSBhd2FpdCB0aGlzLmRieC5maWxlc0xpc3RGb2xkZXIoe1xuXHRcdFx0XHRwYXRoOiAnJyxcblx0XHRcdH0pXG5cdFx0XHR0aGlzLmF1dGhlZCA9IHRydWVcblxuXHRcdFx0Ly8gY29uc29sZS5sb2coZmlsZXMpXG5cdFx0fVxuXHR9XG5cblx0Y29uc3RydWN0b3IoKSB7fVxuXG5cdHBhcnNlUXVlcnlTdHJpbmcoc3RyKSB7XG5cdFx0Y29uc3QgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG5cdFx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gcmV0XG5cdFx0fVxuXG5cdFx0c3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKC9eKFxcP3wjfCYpLywgJycpXG5cblx0XHRpZiAoIXN0cikge1xuXHRcdFx0cmV0dXJuIHJldFxuXHRcdH1cblxuXHRcdHN0ci5zcGxpdCgnJicpLmZvckVhY2goKHBhcmFtKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jylcblx0XHRcdC8vIEZpcmVmb3ggKHByZSA0MCkgZGVjb2RlcyBgJTNEYCB0byBgPWBcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL3B1bGwvMzdcblx0XHRcdGxldCBrZXkgPSBwYXJ0cy5zaGlmdCgpXG5cdFx0XHRsZXQgdmFsID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzLmpvaW4oJz0nKSA6IHVuZGVmaW5lZFxuXG5cdFx0XHRrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KVxuXG5cdFx0XHQvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdFx0Ly8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuXHRcdFx0dmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbClcblxuXHRcdFx0aWYgKHJldFtrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0W2tleV0gPSB2YWxcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRba2V5XSkpIHtcblx0XHRcdFx0cmV0W2tleV0ucHVzaCh2YWwpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXRba2V5XSA9IFtyZXRba2V5XSwgdmFsXVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRyZXR1cm4gcmV0XG5cdH1cblx0YXN5bmMgZG9BdXRoKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB1cmxfcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcblx0XHRcdFx0J2h0dHBzOi8vdXMtY2VudHJhbDEtc3BsdW5nZS0zOTAxMTAuY2xvdWRmdW5jdGlvbnMubmV0L2dldEF1dGhlbnRpY2F0aW9uVXJsJyArIGA/dXJsPSR7d2luZG93LmxvY2F0aW9uLmhyZWZ9YCxcblx0XHRcdClcblx0XHRcdGxldCB1cmwgPSBhd2FpdCB1cmxfcmVzcG9uc2UuanNvbigpXG5cdFx0XHR1cmwgPSB1cmxbJ2F1dGhfdXJsJ11cblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpXG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgdHJ5X2luaXRfZHJvcGJveCgpIHtcblx0XHRsZXQgY29kZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cdFx0Y29uc3QgZ2V0Q29kZUZyb21VcmwgPSAoKSA9PiB7XG5cdFx0XHRjb2RlID0gdGhpcy5wYXJzZVF1ZXJ5U3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLmNvZGVcblx0XHRcdHJldHVybiBjb2RlXG5cdFx0fVxuXHRcdGNvbnN0IGhhc1JlZGlyZWN0ZWRGcm9tQXV0aCA9ICgpID0+IHtcblx0XHRcdHJldHVybiAhIWdldENvZGVGcm9tVXJsKClcblx0XHR9XG5cdFx0Ly8gbGV0IGNvZGVWZXJpZmllciA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY29kZVZlcmlmaWVyJylcblx0XHQvLyBsZXQgYWNjZXNzVG9rZW4gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FjY2Vzc1Rva2VuJylcblx0XHRsZXQgcmVkaXJlY3RlZEZyb21BdXRoID0gaGFzUmVkaXJlY3RlZEZyb21BdXRoKClcblx0XHRpZiAocmVkaXJlY3RlZEZyb21BdXRoKSB7XG5cdFx0XHRjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuXG5cdFx0XHRjb25zdCBib2R5ID0ge31cblxuXHRcdFx0Ly8gY2FwdHVyZSBhbGwgdXJsIHNlYXJjaCBwYXJhbXMgKGFmdGVyIHRoZSAnPycpXG5cdFx0XHRmb3IgKGxldCBrZXkgb2YgdXJsLnNlYXJjaFBhcmFtcy5rZXlzKCkpIHtcblx0XHRcdFx0aWYgKHVybC5zZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdGJvZHlba2V5XSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSlcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRib2R5W2tleV0gPSB1cmwuc2VhcmNoUGFyYW1zLmdldChrZXkpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSAmJlxuXHRcdFx0XHR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXG5cdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHQnJyxcblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgK1xuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKC9bPyZdY29kZT1bXiZdKy8sICcnKS5yZXBsYWNlKC9eJi8sICc/JykgK1xuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2gsXG5cdFx0XHRcdClcblx0XHRcdGJvZHlbJ3JlZGlyZWN0X3VybCddID0gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuXHRcdFx0Y29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXG5cdFx0XHRcdCdodHRwczovL3VzLWNlbnRyYWwxLXNwbHVuZ2UtMzkwMTEwLmNsb3VkZnVuY3Rpb25zLm5ldC9leGNoYW5nZURyb3Bib3hDb2RlJyArXG5cdFx0XHRcdFx0YD9yZWRpcmVjdF91cmw9JHt3aW5kb3cubG9jYXRpb24uaHJlZn1gICtcblx0XHRcdFx0XHRgJmNvZGU9JHtib2R5Wydjb2RlJ119YCxcblx0XHRcdClcblx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpXG5cdFx0XHRzaWduSW5XaXRoQ3VzdG9tVG9rZW4oZmlyZWJhc2VfYXV0aCwgZGF0YS50b2tlbilcblx0XHR9XG5cblx0XHRyZXR1cm5cblx0fVxufVxuIiwiPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycyAvPlxuXG48ZGl2IGNsYXNzPVwia25vYi1jb250YWluZXJcIj5cblx0PGJ1dHRvbiBvbjpjbGljaz17YXN5bmMoKT0+YXdhaXQgbG9nX2ludG9fZHJvcGJveCgpfSBjbGFzczpoaWRlPXthdXRoZWR9ID5cblx0XHRMT0cgSU5UTyBEQlxuXHQ8L2J1dHRvbj5cblx0PGRpdlxuXHRcdGNsYXNzPVwia25vYlwiXG5cdFx0cm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiMFwiIFxuXHRcdG9uOmNsaWNrPXthc3luYyAoKSA9PiB7XG5cdFx0XHRnYWxsZXJ5X29wZW4gPSAhZ2FsbGVyeV9vcGVuXG5cdFx0XHRsZXQgW19jYW52YXNfaW1hZ2UsIGJsb2JdID0gYXdhaXQgZ2V0X2N1cnJlbnRfY2FudmFzX2FzX2ltYWdlKClcblx0XHRcdGNhbnZhc19pbWFnZSA9IF9jYW52YXNfaW1hZ2Vcblx0XHRcdGNhbnZhc19pbWFnZV9zcmMgPSBjYW52YXNfaW1hZ2Uuc3JjXG5cdFx0XHRjYW52YXNfaW1hZ2VfYmxvYiA9IGJsb2Jcblx0XHRcdGNvbnNvbGUubG9nKGNhbnZhc19pbWFnZS5zcmMpXG5cdFx0fX0+XG5cdFx0e0BodG1sIHNvbHZlSWNvbn1cblx0PC9kaXY+XG5cdHsjaWYgZ2FsbGVyeV9vcGVufVxuXHRcdDxkaXYgaWQ9XCJnYWxsZXJ5LWNvbnRhaW5lci1vdXRlclwiPlxuXHRcdFx0PGRpdiBpZD1cImdhbGxlcnktY29udGFpbmVyXCI+XG5cdFx0XHRcdDxkaXYgaWQ9XCJ0b3AtYmFyXCI+XG5cdFx0XHRcdFx0PGRpdiBpZD1cInByb2plY3QtdGl0bGVcIj5Qcm9qZWN0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0aWQ9XCJiYWNrLWJ1dHRvblwiXG5cdFx0XHRcdFx0XHRyb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgXG5cdFx0XHRcdFx0XHRvbjpjbGljaz17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRnYWxsZXJ5X29wZW4gPSAhZ2FsbGVyeV9vcGVuXG5cdFx0XHRcdFx0XHR9fT5cblx0XHRcdFx0XHRcdHtAaHRtbCBmb3JiaWRJY29ufVxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGRpdiBpZD1cImN1cnJlbnQtcHJvamVjdFwiPlxuXHRcdFx0XHRcdDxpbWcgc3JjPXtjYW52YXNfaW1hZ2Vfc3JjfSBpZD1cImNhbnZhcy1wcmV2aWV3LWltZ1wiIGFsdD1cIlwiIC8+XG5cdFx0XHRcdFx0PGRpdiBpZD1cInByb2plY3Qtb3B0aW9uc1wiPlxuXHRcdFx0XHRcdFx0PGRpdiBpZD1cInByb2plY3Qtc2F2ZS1idXR0b25cIiByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgb246Y2xpY2s9e3NhdmVfdG9fZHJvcGJveH0+XG5cdFx0XHRcdFx0XHRcdDxkaXYgaWQ9XCJwcm9qZWN0LXNhdmUtYnV0dG9uLXRpdGxlXCI+U2F2ZSB0byBkcm9wYm94PC9kaXY+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpY29uXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsMC4ycmVtKTtcIj5cblx0XHRcdFx0XHRcdFx0XHR7QGh0bWwgY2FwdHVyZUljb259XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8IS0tIDxkaXYgaWQ9XCJwcm9qZWN0LXNhdmUtYnV0dG9uXCIgb246Y2xpY2s9eygpPT57XG5cdFx0XHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0JywgSlNPTi5zdHJpbmdpZnkocHJvamVjdCkpXG5cdFx0XHRcdFx0XHR9fT5cblx0XHRcdFx0XHRcdFx0PGRpdiBpZD1cInByb2plY3Qtc2F2ZS1idXR0b24tdGl0bGVcIj5TYXZlIHRvIGxvY2FsU3RvcmFnZTwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaWNvblwiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LDAuMnJlbSk7XCI+XG5cdFx0XHRcdFx0XHRcdFx0e0BodG1sIGNhcHR1cmVJY29ufVxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdDwvZGl2PiAtLT5cblx0XHRcdFx0XHRcdDxkaXYgaWQ9XCJwcm9qZWN0LXNhdmUtYnV0dG9uXCIgb246Y2xpY2s9e2Rvd25sb2FkX2ltYWdlfSByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgPlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGlkPVwicHJvamVjdC1zYXZlLWJ1dHRvbi10aXRsZVwiPkRvd25sb2FkPC9kaXY+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpY29uXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHNjYWxlKDEuMzQpO1wiPlxuXHRcdFx0XHRcdFx0XHRcdHtAaHRtbCBkb3dubG9hZEljb259XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8ZGl2IGlkPVwicHJvamVjdC1zYXZlLWJ1dHRvblwiIGNsYXNzPVwiZGF0ZVwiPlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGlkPVwicHJvamVjdC1zYXZlLWJ1dHRvbi10aXRsZVwiPntmb3JtYXRfdGltZShjdXJyZW50X3Byb2plY3QuaWQpfTwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaWNvblwiPlxuXHRcdFx0XHRcdFx0XHRcdHtAaHRtbCB0aW1lSWNvbn1cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGRpdiBpZD1cIm9wdGlvbnMtYmFyXCI+XG5cdFx0XHRcdFx0PGRpdiBpZD1cImJ1dHRvblwiIG9uOmNsaWNrPXthc3luYyAoKSA9PiB7IFxuXHRcdFx0XHRcdFx0bGV0IHNhZmUgPSBhd2FpdCBpc19zYWZlX3RvX3N3aXRjaF90b19uZXdfcHJvamVjdCgpXG5cdFx0XHRcdFx0XHRzYWZlID0gc2FmZSA/IHNhZmUgOiBjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY3JlYXRlIGFub3RoZXIgcHJvamVjdD8gVGhpcyBvbmUgaXMgbm90IHNhdmVkLicpXG5cdFx0XHRcdFx0XHRpZihzYWZlKXtcblx0XHRcdFx0XHRcdFx0bmV3X3Byb2plY3QoKVxuXHRcdFx0XHRcdFx0XHRnYWxsZXJ5X29wZW4gPSBmYWxzZVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRyb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdFx0TmV3IGZpbGVcblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0e0BodG1sIGxhdW5jaEljb259XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBpZD1cImJ1dHRvblwiIG9uOmNsaWNrPXthc3luYyAoKSA9PiB7IFxuXHRcdFx0XHRcdFx0c2l6ZV9tb2RhbF9vcGVuZWQgPSB0cnVlXG5cdFx0XHRcdFx0XHRyZXNpemVfd2lkZ2V0X2NhbnZhc19zaXplWzBdID0gY3VycmVudF9wcm9qZWN0LmNhbnZhc1Jlc1swXVxuXHRcdFx0XHRcdFx0cmVzaXplX3dpZGdldF9jYW52YXNfc2l6ZVsxXSA9IGN1cnJlbnRfcHJvamVjdC5jYW52YXNSZXNbMV1cblx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIiBcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0XHRSZXNpemVcblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0e0BodG1sIHJlc2l6ZUljb259XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBpZD1cInNpemUtbW9kYWxcIiBzdHlsZT17c2l6ZV9tb2RhbF9vcGVuZWQgPyBcIlwiIDogXCJkaXNwbGF5OiBub25lO1wifT5cblx0XHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdFx0aWQ9XCJiYWNrLWJ1dHRvblwiXG5cdFx0XHRcdFx0XHRcdHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIiBcblx0XHRcdFx0XHRcdFx0b246Y2xpY2s9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRzaXplX21vZGFsX29wZW5lZCA9IGZhbHNlXG5cdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdHN0eWxlPSdtYXJnaW4tYm90dG9tOiAwLjQ1cmVtOydcblx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHR7QGh0bWwgZm9yYmlkSWNvbn1cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PGRpdiBzdHlsZT0nbWFyZ2luLWJvdHRvbTogMXJlbTsnPlxuXHRcdFx0XHRcdFx0XHRSZXNpemUgY2FudmFzXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdDxkaXYgc3R5bGU9J21hcmdpbi1ib3R0b206IDFyZW07Jz5cblx0XHRcdFx0XHRcdFx0e3Jlc2l6ZV93aWRnZXRfY2FudmFzX3NpemVbMF19IHgge3Jlc2l6ZV93aWRnZXRfY2FudmFzX3NpemVbMV19XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdDxkaXYgc3R5bGU9e2Bcblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDogd2hpdGU7XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiAxMHJlbTtcblx0XHRcdFx0XHRcdFx0YXNwZWN0LXJhdGlvOiAxLyR7cmVzaXplX3dpZGdldF9jYW52YXNfc2l6ZVsxXS9yZXNpemVfd2lkZ2V0X2NhbnZhc19zaXplWzBdfVxuXHRcdFx0XHRcdFx0YH0gb246cG9pbnRlcmRvd249e3Jlc2l6ZV93aWRnZXRfcG9pbnRlcl9kb3dufSA+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdFx0cm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiMFwiIFxuXHRcdFx0XHRcdFx0XHRpZD1cImJhY2stYnV0dG9uXCJcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJvay1idXR0b25cIlxuXHRcdFx0XHRcdFx0XHRvbjpjbGljaz17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJlc2l6ZV9wcm9qZWN0KHJlc2l6ZV93aWRnZXRfY2FudmFzX3NpemUpXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZV9tb2RhbF9vcGVuZWQgPSBmYWxzZVxuXHRcdFx0XHRcdFx0XHRcdGdhbGxlcnlfb3BlbiA9IGZhbHNlXG5cdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdHN0eWxlPSdtYXJnaW4tdG9wOiAxLjE0cmVtOydcblx0XHRcdFx0XHRcdFx0ID5cblx0XHRcdFx0XHRcdFx0e0BodG1sIG9rSWNvbn1cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGRpdiBpZD1cImdhbGxlcnktZWxlbWVudHNcIj5cblx0XHRcdFx0XHR7I2VhY2ggZ2FsbGVyeV9lbGVtZW50cyBhcyBlbGVtZW50LCBpfVxuXHRcdFx0XHRcdFx0PGRpdiBpZD1cImVsZW1lbnRcIiBvbjpjbGljaz17YXN5bmMgKCk9Pntcblx0XHRcdFx0XHRcdFx0bGV0IHNhZmUgPSBhd2FpdCBpc19zYWZlX3RvX3N3aXRjaF90b19uZXdfcHJvamVjdCgpXG5cdFx0XHRcdFx0XHRcdHNhZmUgPSBzYWZlID8gc2FmZSA6IGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBzd2l0Y2ggdG8gYW5vdGhlciBwcm9qZWN0PyBUaGlzIG9uZSBpcyBub3Qgc2F2ZWQuJylcblx0XHRcdFx0XHRcdFx0aWYoc2FmZSl7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IHByb2ogPSBhd2FpdCBkYnguZmlsZXNEb3dubG9hZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRwYXRoOiAnLycgKyBlbGVtZW50Lm5hbWUgKyAnLmpzb24nXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdFx0XHRcdGxldCBiaW5hcnkgPSBhd2FpdCBwcm9qLnJlc3VsdC5maWxlQmxvYi50ZXh0KClcblx0XHRcdFx0XHRcdFx0XHRsZXQgYmluYXJ5X2pzb24gPSBKU09OLnBhcnNlKGJpbmFyeSlcblx0XHRcdFx0XHRcdFx0XHRsb2FkX3Byb2plY3QoYmluYXJ5X2pzb24pXG5cdFx0XHRcdFx0XHRcdFx0Z2FsbGVyeV9vcGVuID0gZmFsc2Vcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fX0gXG5cdFx0XHRcdFx0XHRyb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgXG5cdFx0XHRcdFx0XHRzdHlsZT17IE51bWJlcihlbGVtZW50Lm5hbWUpID09PSBjdXJyZW50X3Byb2plY3QuaWQgPyBcImJvcmRlcjogMC4xcmVtIHNvbGlkIHdoaXRlO1wiIDogXCJcIn1cblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PCEtLSB7ZWxlbWVudC5uYW1lfSAtLT5cblx0XHRcdFx0XHRcdFx0PGRpdiBpZD1cImVsZW1lbnQtbmFtZVwiPlxuXHRcdFx0XHRcdFx0XHRcdHtmb3JtYXRfdGltZShlbGVtZW50Lm5hbWUpfVxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0PGltZyBkcmFnZ2FibGU9XCJmYWxzZVwiIHNyYz17ZWxlbWVudC5pbWFnZV9zcmN9IGlkPVwiY2FudmFzLXByZXZpZXctaW1nXCIgYWx0PVwiXCIgLz5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdHsvZWFjaH1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0ey9pZn1cbjwvZGl2PlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHQvLyBAdHMtaWdub3JlXG5cdGltcG9ydCBzb2x2ZUljb24gZnJvbSAnLy4uL3B1YmxpYy9zb2x2ZS5zdmcnXG5cdC8vIEB0cy1pZ25vcmVcblx0aW1wb3J0IGxhdW5jaEljb24gZnJvbSAnLy4uL3B1YmxpYy9sYXVuY2guc3ZnJ1xuXHQvLyBAdHMtaWdub3JlXG5cdGltcG9ydCByZXNpemVJY29uIGZyb20gJy8uLi9wdWJsaWMvcmVzaXplLnN2Zydcblx0Ly8gQHRzLWlnbm9yZVxuXHRpbXBvcnQgZm9yYmlkSWNvbiBmcm9tICcvLi4vcHVibGljL2ZvcmJpZC5zdmcnXG5cdC8vIEB0cy1pZ25vcmVcblx0aW1wb3J0IG9rSWNvbiBmcm9tICcvLi4vcHVibGljL29rLnN2Zydcblx0Ly8gQHRzLWlnbm9yZVxuXHRpbXBvcnQgY2FwdHVyZUljb24gZnJvbSAnLy4uL3B1YmxpYy9jYXB0dXJlLnN2Zydcblx0Ly8gQHRzLWlnbm9yZVxuXHRpbXBvcnQgZG93bmxvYWRJY29uIGZyb20gJy8uLi9wdWJsaWMvZG93bmxvYWQuc3ZnJ1xuXHQvLyBAdHMtaWdub3JlXG5cdGltcG9ydCB0aW1lSWNvbiBmcm9tICcvLi4vcHVibGljL3RpbWUuc3ZnJ1xuXHRpbXBvcnQge0Ryb3Bib3gsIERyb3Bib3hBdXRofSBmcm9tICdkcm9wYm94J1xuXHRpbXBvcnQgdHlwZSB7UHJvamVjdH0gZnJvbSAnc3R1ZmYnXG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXG5cdGltcG9ydCB7IERyb3Bib3hBdXRoZXIgfSBmcm9tICdkcm9wYm94X2F1dGgnXG5cdGltcG9ydCB7ZmxvYXRpbmdfbW9kYWxfbWVzc2FnZX0gZnJvbSAnc3RvcmUnXG5cblx0ZXhwb3J0IGxldCBjdXJyZW50X3Byb2plY3Q6IFByb2plY3Rcblx0ZXhwb3J0IGxldCBnZXRfY3VycmVudF9jYW52YXNfYXNfaW1hZ2U6ICgpID0+IFByb21pc2U8W0hUTUxJbWFnZUVsZW1lbnQsIEJsb2JdPlxuXHRleHBvcnQgbGV0IHJlc2l6ZV9wcm9qZWN0OiAobmV3X3NpemU6IG51bWJlcltdKSA9PiB2b2lkXG5cdGV4cG9ydCBsZXQgbmV3X3Byb2plY3Q6ICgpID0+IHZvaWRcblx0ZXhwb3J0IGxldCBsb2FkX3Byb2plY3Q6IChwcm9qZWN0OiBQcm9qZWN0KSA9PiB2b2lkXG5cdGV4cG9ydCBsZXQgcHJvamVjdF9oYXNfYmVlbl9tb2RpZmllZDogYm9vbGVhblxuXG5cdGNvbnN0IGZvcm1hdF90aW1lID0gKHQ6IG51bWJlciB8IHN0cmluZyk6IHN0cmluZyA9Pntcblx0XHRyZXR1cm4gbmV3IERhdGUoTnVtYmVyKHQpKS50b0xvY2FsZVN0cmluZygnZW4tR0InLCB7XG5cdFx0XHRob3VyQ3ljbGU6ICdoMjMnLFxuXHRcdFx0ZGF5OiBcIjItZGlnaXRcIixcblx0XHRcdG1vbnRoOiBcIjItZGlnaXRcIixcblx0XHRcdHllYXI6IFwibnVtZXJpY1wiLFxuXHRcdFx0aG91cjogXCIyLWRpZ2l0XCIsXG5cdFx0XHRtaW51dGU6IFwiMi1kaWdpdFwiXG5cdFx0fSkucmVwbGFjZSgnLCcsJycpXG5cdH1cblxuXHRsZXQgZ2FsbGVyeV9vcGVuID0gZmFsc2Vcblx0bGV0IHNpemVfbW9kYWxfb3BlbmVkID0gZmFsc2VcblxuXHRsZXQgY2FudmFzX2ltYWdlOiBIVE1MSW1hZ2VFbGVtZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cdGxldCBjYW52YXNfaW1hZ2VfYmxvYjogQmxvYiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuXHRsZXQgY2FudmFzX2ltYWdlX3NyYzogc3RyaW5nID0gJydcblx0XG5cblxuXHRjbGFzcyBFbGVtZW50IHtcblx0XHRuYW1lOiBzdHJpbmdcblx0XHRpbWFnZV9zcmM6IHN0cmluZ1xuXHRcdGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgaW1hZ2Vfc3JjOiBzdHJpbmcpIHtcblx0XHRcdHRoaXMubmFtZSA9IG5hbWVcblx0XHRcdHRoaXMuaW1hZ2Vfc3JjID0gaW1hZ2Vfc3JjXG5cdFx0fVxuXHR9XG5cdFxuXHRsZXQgZGJ4OiBEcm9wYm94XG5cdGNvbnN0IGRieF9hdXRoZXIgPSBuZXcgRHJvcGJveEF1dGhlcigpXG5cdFxuXG5cdGxldCBhdXRoZWQgPSBmYWxzZVxuXHRsZXQgZ2FsbGVyeV9lbGVtZW50czogRWxlbWVudFtdID0gW11cblxuXHRjb25zdCBsb2dfaW50b19kcm9wYm94ID0gYXN5bmMgKCk9PiB7XG5cdFx0YXdhaXQgZGJ4X2F1dGhlci5kb0F1dGgoKVxuXHR9XG5cdFxuXHRleHBvcnQgY29uc3QgaXNfc2FmZV90b19zd2l0Y2hfdG9fbmV3X3Byb2plY3QgPSBhc3luYyAoKTogUHJvbWlzZTxib29sZWFuPiA9Pntcblx0XHRsZXQgcHJvamVjdF9pc19zYXZlZF90b19kcm9wYm94ID0gZmFsc2VcblxuXHRcdGlmKCFkYnhfYXV0aGVyLmF1dGhlZCl7XG5cdFx0XHRwcm9qZWN0X2lzX3NhdmVkX3RvX2Ryb3Bib3ggPSB0cnVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCByZXNwb25zZSA9IGF3YWl0IGRieC5maWxlc0xpc3RGb2xkZXIoe3BhdGg6ICcnfSlcblx0XHRcdGZvciAobGV0IGVsZW1lbnQgb2YgcmVzcG9uc2UucmVzdWx0LmVudHJpZXMpIHtcblx0XHRcdFx0bGV0IHByb2pfbmFtZSA9IE51bWJlcihlbGVtZW50Lm5hbWUuc2xpY2UoMCwtNSkpXG5cdFx0XHRcdGlmKHByb2pfbmFtZSA9PT0gY3VycmVudF9wcm9qZWN0LmlkKXtcblx0XHRcdFx0XHRwcm9qZWN0X2lzX3NhdmVkX3RvX2Ryb3Bib3ggPSB0cnVlXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHByb2plY3RfaGFzX2JlZW5fbW9kaWZpZWQgfHwgIXByb2plY3RfaXNfc2F2ZWRfdG9fZHJvcGJveCl7XG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHR9XG5cdH1cblxuXHRjb25zdCBkb3dubG9hZF9pbWFnZSA9IGFzeW5jICgpPT57XG5cdFx0Y29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0XHRsaW5rLmhyZWYgPSAoY2FudmFzX2ltYWdlIGFzIEhUTUxJbWFnZUVsZW1lbnQpLnNyY1xuXHRcdGxpbmsuZG93bmxvYWQgPSBjdXJyZW50X3Byb2plY3QuaWQgKyAnLnBuZyc7XG5cdFx0bGluay5jbGljaygpO1xuXHR9XG5cdGNvbnN0IHJlZmV0Y2hfY2FudmFzZXMgPSBhc3luYyAoKSA9PiB7XG5cdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgZGJ4LmZpbGVzTGlzdEZvbGRlcih7cGF0aDogJyd9KVxuXHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlKVxuXHRcdGdhbGxlcnlfZWxlbWVudHMgPSBbXVxuXHRcdGZvciAobGV0IGVsZW1lbnQgb2YgcmVzcG9uc2UucmVzdWx0LmVudHJpZXMpIHtcblx0XHRcdGlmKGVsZW1lbnQubmFtZS5lbmRzV2l0aChcIi5qc29uXCIpKXtcblx0XHRcdFx0bGV0IHByb2pfbmFtZSA9IGVsZW1lbnQubmFtZS5zbGljZSgwLC01KVxuXHRcdFx0XHRsZXQgaW1hZ2UgPSBhd2FpdCBkYnguZmlsZXNEb3dubG9hZCh7XG5cdFx0XHRcdFx0cGF0aDogJy8nICsgcHJval9uYW1lICsgJy5wbmcnXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0bGV0IGJpbmFyeTogQmxvYiA9IGltYWdlLnJlc3VsdC5maWxlQmxvYlxuXHRcdFx0XHRjb25zdCBibG9iVG9EYXRhVVJMID0gKGJsb2I6IEJsb2IpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cdFx0XHRcdFx0XHRyZWFkZXIub25sb2FkID0gX2UgPT4gcmVzb2x2ZShyZWFkZXIucmVzdWx0IGFzIHN0cmluZyk7XG5cdFx0XHRcdFx0XHRyZWFkZXIub25lcnJvciA9IF9lID0+IHJlamVjdChyZWFkZXIuZXJyb3IpO1xuXHRcdFx0XHRcdFx0cmVhZGVyLm9uYWJvcnQgPSBfZSA9PiByZWplY3QobmV3IEVycm9yKFwiUmVhZCBhYm9ydGVkXCIpKTtcblx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKFxuXHRcdFx0XHQvLyBcdFx0YXdhaXQgYmxvYlRvRGF0YVVSTChiaW5hcnkpXG5cdFx0XHRcdC8vIClcblx0XHRcdFx0Ly8gZ2FsbGVyeV9lbGVtZW50cy5wdXNoKG5ldyBFbGVtZW50KFxuXHRcdFx0XHQvLyBcdHByb2pfbmFtZSxcblx0XHRcdFx0Ly8gXHRhd2FpdCBibG9iVG9EYXRhVVJMKGJpbmFyeSlcblx0XHRcdFx0Ly8gKSlcblx0XHRcdFx0Z2FsbGVyeV9lbGVtZW50cyA9IFsuLi4gZ2FsbGVyeV9lbGVtZW50cywgbmV3IEVsZW1lbnQoXG5cdFx0XHRcdFx0cHJval9uYW1lLFxuXHRcdFx0XHRcdGF3YWl0IGJsb2JUb0RhdGFVUkwoYmluYXJ5KVxuXHRcdFx0XHQpXVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjb25zdCBzYXZlX3RvX2Ryb3Bib3ggPSBhc3luYyAoKT0+e1xuXHRcdGZsb2F0aW5nX21vZGFsX21lc3NhZ2Uuc2V0KFwiU3RhcnRpbmcgdXBsb2FkIHRvIGRyb3Bib3guXCIpXG5cdFx0bGV0IHIgPSBhd2FpdCBkYnguZmlsZXNVcGxvYWQoe1xuXHRcdFx0cGF0aDogJy8nICsgY3VycmVudF9wcm9qZWN0LmlkICsgJy5qc29uJyxcblx0XHRcdGNvbnRlbnRzOiBKU09OLnN0cmluZ2lmeShjdXJyZW50X3Byb2plY3QpLFxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0bW9kZTogXCJvdmVyd3JpdGVcIlxuXHRcdH0pXG5cdFx0ciA9IGF3YWl0IGRieC5maWxlc1VwbG9hZCh7XG5cdFx0XHRwYXRoOiAnLycgKyBjdXJyZW50X3Byb2plY3QuaWQgKyAnLnBuZycsXG5cdFx0XHRjb250ZW50czogYXdhaXQgKGF3YWl0IGZldGNoKCgoY2FudmFzX2ltYWdlIGFzIEhUTUxJbWFnZUVsZW1lbnQpLnNyYykpKS5ibG9iKCksXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRtb2RlOiBcIm92ZXJ3cml0ZVwiXG5cdFx0fSlcblx0XHRmbG9hdGluZ19tb2RhbF9tZXNzYWdlLnNldChcIlVwbG9hZCB0byBkcm9wYm94IHN1Y2Nlc2Z1bC5cIilcblx0XHRwcm9qZWN0X2hhc19iZWVuX21vZGlmaWVkID0gZmFsc2Vcblx0XHRhd2FpdCByZWZldGNoX2NhbnZhc2VzKClcblx0fVxuXG5cdGNvbnN0IHJlc2l6ZV93aWRnZXRfcGl4ZWxfcmFuZ2UgPSAyMDBcblx0Y29uc3QgbWluID0gMFxuXHRjb25zdCBtYXggPSA0XG5cblx0bGV0IHJlc2l6ZV93aWRnZXRfY2FudmFzX3NpemUgPSBbMCwwXVxuXHRsZXQgcmVzaXplX3dpZGdldF9zdGFydF95ID0gMFxuXHRsZXQgcmVzaXplX3dkaWdldF9zdGFydF92YWx1ZSA9IFswLCAwXVxuXHRsZXQgcmVzaXplX3dpZGdldF9zdGFydF94ID0gMFxuXG5cdCQ6IHZhbHVlUmFuZ2UgPSBtYXggLSBtaW5cblxuXHRmdW5jdGlvbiByZXNpemVfd2lkZ2V0X3BvaW50ZXJfbW92ZSh7Y2xpZW50WCwgY2xpZW50WX0pIHtcblx0XHRsZXQgdmFsdWVEaWZmWSA9ICh2YWx1ZVJhbmdlICogKHJlc2l6ZV93aWRnZXRfc3RhcnRfeSAtIGNsaWVudFkpKSAvIHJlc2l6ZV93aWRnZXRfcGl4ZWxfcmFuZ2Vcblx0XHRsZXQgdmFsdWVEaWZmWCA9ICh2YWx1ZVJhbmdlICogKHJlc2l6ZV93aWRnZXRfc3RhcnRfeCAtIGNsaWVudFgpKSAvIHJlc2l6ZV93aWRnZXRfcGl4ZWxfcmFuZ2VcblxuXHRcdHJlc2l6ZV93aWRnZXRfY2FudmFzX3NpemVbMF0gPSByZXNpemVfd2RpZ2V0X3N0YXJ0X3ZhbHVlWzBdIC0gdmFsdWVEaWZmWCoxMDAwXG5cdFx0cmVzaXplX3dpZGdldF9jYW52YXNfc2l6ZVsxXSA9IHJlc2l6ZV93ZGlnZXRfc3RhcnRfdmFsdWVbMV0gKyB2YWx1ZURpZmZZKjEwMDBcblx0XHQvLyBicnVzaF9zelswXSA9IGNsYW1wKHN0YXJ0VmFsdWVbMF0gLSB2YWx1ZURpZmZYLCBtaW4sIG1heClcblx0XHQvLyBicnVzaF9zelsxXSA9IGNsYW1wKHN0YXJ0VmFsdWVbMV0gKyB2YWx1ZURpZmZZLCBtaW4sIG1heClcblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2l6ZV93aWRnZXRfcG9pbnRlcl9kb3duKGU6IFBvaW50ZXJFdmVudCkge1xuXHRcdGxldCB7Y2xpZW50WCwgY2xpZW50WX0gPSBlXG5cdFx0Ly8gY29uc29sZS5sb2coeyBjbGllbnRZIH0pO1xuXHRcdGNvbnNvbGUubG9nKCdkb3duJylcblxuXHRcdHJlc2l6ZV93aWRnZXRfc3RhcnRfeSA9IGNsaWVudFlcblx0XHRyZXNpemVfd2lkZ2V0X3N0YXJ0X3ggPSBjbGllbnRYXG5cdFx0cmVzaXplX3dkaWdldF9zdGFydF92YWx1ZSA9IFsuLi5yZXNpemVfd2lkZ2V0X2NhbnZhc19zaXplXVxuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgcmVzaXplX3dpZGdldF9wb2ludGVyX21vdmUpXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHJlc2l6ZV93aWRnZXRfcG9pbnRlcl91cClcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpXG5cdH1cblxuXHRmdW5jdGlvbiByZXNpemVfd2lkZ2V0X3BvaW50ZXJfdXAoKSB7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgcmVzaXplX3dpZGdldF9wb2ludGVyX21vdmUpXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHJlc2l6ZV93aWRnZXRfcG9pbnRlcl91cClcblx0fVxuXG5cdG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuXHRcdGF3YWl0IGRieF9hdXRoZXIuaW5pdCgpXG5cdFx0YXdhaXQgZGJ4X2F1dGhlci50cnlfaW5pdF9kcm9wYm94KClcblx0XHRhdXRoZWQgPSBkYnhfYXV0aGVyLmF1dGhlZFxuXHRcdGRieCA9IGRieF9hdXRoZXIuZGJ4XG5cdFx0aWYoYXV0aGVkKXtcblx0XHRcdHJlZmV0Y2hfY2FudmFzZXMoKVxuXHRcdH1cblx0fSlcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5cdCoge1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdH1cblx0I2NhbnZhcy1wcmV2aWV3LWltZyB7XG5cdFx0LyogbWF4LXdpZHRoOiAxMnJlbTsgKi9cblx0XHRoZWlnaHQ6IDEycmVtO1xuXHRcdC8qIG1heC13aWR0aDogNXJlbTsgKi9cblx0XHQvKiBhc3BlY3QtcmF0aW86dW5zZXQ7ICovXG5cdH1cblx0LmhpZGV7XG5cdFx0ZGlzcGxheTogbm9uZTtcblx0fVxuXHQ6Z2xvYmFsKCNnYWxsZXJ5LWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIpe1xuXHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHR9XG5cdDpnbG9iYWwoI2dhbGxlcnktY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10cmFjayl7XG5cdFx0YmFja2dyb3VuZDogZ3JleTtcblx0fVxuXHQ6Z2xvYmFsKCNnYWxsZXJ5LWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIpe1xuXHRcdGJhY2tncm91bmQ6IHdoaXRlOyBcblx0fVxuXHQjc2l6ZS1tb2RhbCB7XG5cdFx0cG9zaXRpb246IGZpeGVkO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdHdpZHRoOiAxMDB2dztcblx0XHRoZWlnaHQ6IDEwMHZoO1xuXHRcdGxlZnQ6IDA7XG5cdFx0dG9wOiAwO1xuXHRcdHotaW5kZXg6IDEwMTtcblx0XHRiYWNrZ3JvdW5kOiBibGFjaztcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0fVxuXHQjZ2FsbGVyeS1jb250YWluZXItb3V0ZXIge1xuXHRcdHBvc2l0aW9uOiBmaXhlZDtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHR3aWR0aDogMTAwdnc7XG5cdFx0aGVpZ2h0OiAxMDB2aDtcblx0XHRsZWZ0OiAwO1xuXHRcdHRvcDogMDtcblx0XHR6LWluZGV4OiAxMDA7XG5cdFx0YmFja2dyb3VuZDogYmxhY2s7XG5cdFx0I2dhbGxlcnktY29udGFpbmVyIHtcblx0XHRcdC8vIHNjcm9sbGJhci1jb2xvcjogIzY5NjlkZCAjZTBlMGUwO1xuXHRcdFx0Ly8gc2Nyb2xsYmFyLXdpZHRoOiB0aGluO1xuXHRcdFx0b3ZlcmZsb3cteTogb3ZlcmxheTtcblx0XHRcdHNjcm9sbGJhci1ndXR0ZXI6IHN0YWJsZSBib3RoLWVkZ2VzO1xuXHRcdFx0bWFyZ2luLXRvcDogMXJlbTtcblx0XHRcdC8vIG92ZXJmbG93OiBzY3JvbGw7XG5cdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0XHRtYXgtd2lkdGg6IDQwcmVtO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHQjdG9wLWJhciB7XG5cdFx0XHRcdCNwcm9qZWN0LXRpdGxlIHtcblx0XHRcdFx0XHRtYXJnaW4tbGVmdDogMC41cmVtO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDFyZW07XG5cdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRmb250LXNpemU6IDJyZW07XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdH1cblx0XHRcdCNvcHRpb25zLWJhciB7XG5cdFx0XHRcdCoge1xuXHRcdFx0XHRcdGZvbnQtc2l6ZTogMC45NXJlbTtcblx0XHRcdFx0XHQ6Z2xvYmFsKHN2Zyl7XG5cdFx0XHRcdFx0XHRmaWxsOiB3aGl0ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0I2J1dHRvbntcblx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdFx0XHRwYWRkaW5nOiAwcmVtIDAuMnJlbTtcblx0XHRcdFx0XHQ6Z2xvYmFsKHN2Zyl7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCY6YWN0aXZle1xuXHRcdFx0XHRcdFx0ZmlsdGVyOiBpbnZlcnQoMSk7XG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBibGFjaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMXJlbTtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdGZvbnQtc2l6ZTogMnJlbTtcblx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRcdFx0fVxuXHRcdFx0Lm9rLWJ1dHRvbiA6Z2xvYmFsKHN2Zykge1xuXHRcdFx0XHR0cmFuc2Zvcm06IHNjYWxlKDAuOTYpICFpbXBvcnRhbnQ7IFxuXHRcdFx0fVxuXHRcdFx0I2JhY2stYnV0dG9uID4gOmdsb2JhbChzdmcpIHtcblx0XHRcdFx0JjphY3RpdmV7XG5cdFx0XHRcdFx0ZmlsdGVyOiBpbnZlcnQoMSk7XG5cdFx0XHRcdFx0YmFja2dyb3VuZDogYmxhY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJhbnNmb3JtOiBzY2FsZSgxLjUpIHRyYW5zbGF0ZSgwLjJyZW0sIDBweCk7XG5cdFx0XHRcdGZpbGw6IHdoaXRlO1xuXHRcdFx0XHR3aWR0aDogM3JlbTtcblx0XHRcdFx0YXNwZWN0LXJhdGlvOiAxLzE7XG5cdFx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdH1cblx0XHRcdCNnYWxsZXJ5LWVsZW1lbnRzIHtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdGRpc3BsYXk6IGdyaWQ7XG5cdFx0XHRcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XG5cdFx0XHRcdGdhcDogMTBweDtcblx0XHRcdFx0Z3JpZC1hdXRvLXJvd3M6IG1pbm1heCgxMDBweCwgYXV0byk7XG5cdFx0XHRcdCNlbGVtZW50e1xuXHRcdFx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdFx0XHQvLyBwb2ludGVyLWV2ZW50czogbm9uZTtcblx0XHRcdFx0XHR1c2VyLXNlbGVjdDogbm9uZTtcblx0XHRcdFx0XHQjZWxlbWVudC1uYW1le1xuXHRcdFx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMC41cmVtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQmOmFjdGl2ZXtcblx0XHRcdFx0XHRcdGJhY2tncm91bmQ6IHdoaXRlO1xuXHRcdFx0XHRcdFx0Kntcblx0XHRcdFx0XHRcdFx0Y29sb3I6IGJsYWNrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0I2N1cnJlbnQtcHJvamVjdCB7XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDFyZW07XG5cblx0XHRcdFx0I3Byb2plY3Qtb3B0aW9ucyB7XG5cdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdFx0XHQqIHtcblx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMS4zcmVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCNwcm9qZWN0LXNhdmUtYnV0dG9uLXRpdGxlIHtcblx0XHRcdFx0XHRcdC8vIG1hcmdpbjogYXV0bztcblx0XHRcdFx0XHRcdG1hcmdpbi1yaWdodDogMC41cmVtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQjcHJvamVjdC1zYXZlLWJ1dHRvbiB7XG5cdFx0XHRcdFx0XHQmOmFjdGl2ZXtcblx0XHRcdFx0XHRcdFx0ZmlsdGVyOiBpbnZlcnQoMSk7XG5cdFx0XHRcdFx0XHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Lmljb24ge1xuXHRcdFx0XHRcdFx0XHR3aWR0aDogMnJlbTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hcmdpbi1yaWdodDogMS41cmVtO1xuXHRcdFx0XHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdFx0XHRcdFx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0XHRcdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHRcdFx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0XHRcdGhlaWdodDogMnJlbTtcblx0XHRcdFx0XHRcdG1heC13aWR0aDogMzByZW07XG5cdFx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHRcdCoge1xuXHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDEuMHJlbTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vICYuZGF0ZXtcblx0XHRcdFx0XHRcdC8vIFx0KiB7XG5cdFx0XHRcdFx0XHQvLyBcdFx0Zm9udC1zaXplOiAwLjZyZW07XG5cdFx0XHRcdFx0XHQvLyBcdH1cblx0XHRcdFx0XHRcdC8vIH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0I3Byb2plY3Qtc2F2ZS1idXR0b24gOmdsb2JhbChzdmcpIHtcblx0XHRcdFx0XHRcdC8vIG1hcmdpbi1yaWdodDogMHJlbTtcblx0XHRcdFx0XHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdFx0XHRcdFx0ZmlsbDogd2hpdGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdC5rbm9iLWNvbnRhaW5lciB7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHQtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Lyogd2lkdGg6IDQwcHg7XG4gICAgaGVpZ2h0OiA0MHB4OyAqL1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdG1heC1oZWlnaHQ6IDUwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdG1hcmdpbi1yaWdodDogMXJlbTtcblx0XHRwb2ludGVyLWV2ZW50czogYWxsO1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdG1hcmdpbi1ib3R0b206IGF1dG87XG5cdFx0bWFyZ2luLXRvcDogYXV0bztcbiAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG5cdH1cblxuXHQua25vYiB7XG5cdFx0JjphY3RpdmUge1xuXHRcdFx0ZmlsdGVyOiBpbnZlcnQoMSk7XG5cdFx0XHRiYWNrZ3JvdW5kOiBibGFjaztcblx0XHR9XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHQvKiBoZWlnaHQ6IDgwJTsgKi9cblx0XHRwYWRkaW5nOiAwO1xuXHRcdGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcblx0XHR0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xuXHR9XG5cblx0Lmtub2IgOmdsb2JhbChzdmcpIHtcblx0XHRmaWxsOiB3aGl0ZTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdH1cbjwvc3R5bGU+XG5cblxuXHRcdDwhLS0gY29uc3QgZGF0YVVSTFRvQmxvYiA9IGFzeW5jIChkYXRhVVJMKSA9PiB7XG5cdFx0XHRsZXQgQkFTRTY0X01BUktFUiA9ICc7YmFzZTY0LCc7XG5cblx0XHRcdGlmIChkYXRhVVJMLmluZGV4T2YoQkFTRTY0X01BUktFUikgPT0gLTEpIHtcblx0XHRcdFx0XHRsZXQgcGFydHMgPSBkYXRhVVJMLnNwbGl0KCcsJyk7XG5cdFx0XHRcdFx0bGV0IGNvbnRlbnRUeXBlID0gcGFydHNbMF0uc3BsaXQoJzonKVsxXTtcblx0XHRcdFx0XHRsZXQgcmF3ID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzFdKTtcblxuXHRcdFx0XHRcdHJldHVybiBuZXcgQmxvYihbcmF3XSwge3R5cGU6IGNvbnRlbnRUeXBlfSk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBwYXJ0cyA9IGRhdGFVUkwuc3BsaXQoQkFTRTY0X01BUktFUik7XG5cdFx0XHRsZXQgY29udGVudFR5cGUgPSBwYXJ0c1swXS5zcGxpdCgnOicpWzFdO1xuXHRcdFx0bGV0IHJhdyA9IHdpbmRvdy5hdG9iKHBhcnRzWzFdKTtcblx0XHRcdGxldCByYXdMZW5ndGggPSByYXcubGVuZ3RoO1xuXG5cdFx0XHRsZXQgdUludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KHJhd0xlbmd0aCk7XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmF3TGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHR1SW50OEFycmF5W2ldID0gcmF3LmNoYXJDb2RlQXQoaSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUT0RPOiBSRVBMQUNFIFdJVEggVEhJUz8/XG5cdFx0XHRjb25zdCBibG9iID0gYXdhaXQgKGF3YWl0IGZldGNoKGRhdGFVUkwpKS5ibG9iKCk7IFxuXHRcdFx0cmV0dXJuIGJsb2Jcblx0XHRcdC8vIGFkZCBjb25uZWN0LXNyYyBkYXRhOiB0byB5b3VyIENvbnRlbnQtU2VjdXJpdHktUG9saWN5XG5cblx0XHRcdHJldHVybiBuZXcgQmxvYihbdUludDhBcnJheV0sIHt0eXBlOiBjb250ZW50VHlwZX0pO1xuXHRcdH0gLS0+IiwiPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycyAvPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQge2Zsb2F0aW5nX21vZGFsX21lc3NhZ2V9IGZyb20gXCJzdG9yZVwiXG4gIGxldCBzZWNvbmRzX3NpbmNlX21vZGFsOiBudW1iZXIgPSAwXG5cbiAgbGV0IGRpc3BsYXllZF9tZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgXG4gIGNvbnN0IGRpc3BsYXlfdGltZSA9IDFcbiAgY29uc3QgZmFkZV9pbl90ID0gMC4yXG4gIGNvbnN0IGZhZGVfb3V0X3QgPSAxXG4gIFxuICBsZXQgZmFkaW5nX2luID0gdHJ1ZVxuXG4gIGxldCBvcGFjaXR5ID0gMFxuICBcbiAgZmxvYXRpbmdfbW9kYWxfbWVzc2FnZS5zdWJzY3JpYmUobWVzc2FnZT0+e1xuICAgIGlmKG1lc3NhZ2Upe1xuICAgICAgZGlzcGxheWVkX21lc3NhZ2UgPSBtZXNzYWdlXG4gICAgICBvcGFjaXR5ID0gMVxuICAgICAgZmFkaW5nX2luID0gdHJ1ZVxuICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICBvcGFjaXR5ID0gMFxuICAgICAgICBmYWRpbmdfaW4gPSBmYWxzZVxuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgZGlzcGxheWVkX21lc3NhZ2UgPSB1bmRlZmluZWRcbiAgICAgICAgfSwgZmFkZV9vdXRfdCAqIDEwMDApXG4gICAgICB9LCBkaXNwbGF5X3RpbWUgKiAxMDAwKVxuICAgICAgZmxvYXRpbmdfbW9kYWxfbWVzc2FnZS5zZXQodW5kZWZpbmVkKVxuICAgIH1cbiAgfSlcbjwvc2NyaXB0PlxuXG5cbjwhLS0geyNpZiBkaXNwbGF5ZWRfbWVzc2FnZX0gLS0+XG4gIDxkaXYgaWQ9XCJmbG9hdGluZy1tb2RhbFwiPlxuICAgPGRpdiBpZD1cInRleHRcIiBzdHlsZT17XG4gICAgYG9wYWNpdHk6ICR7b3BhY2l0eX07XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAke2ZhZGluZ19pbiA/IGZhZGVfaW5fdCA6IGZhZGVfb3V0X3R9cztgXG4gIH0gPlxuICAgIHtkaXNwbGF5ZWRfbWVzc2FnZX1cbiAgIDwvZGl2PlxuICA8L2Rpdj5cbjwhLS0gey9pZn0gLS0+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuICAqe1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG4gIC5mYWRlLWluIHtcbiAgICBcbiAgfVxuICAjZmxvYXRpbmctbW9kYWwge1xuXHRcdHBvc2l0aW9uOiBmaXhlZDtcblx0XHR3aWR0aDogZml0LWNvbnRlbnQ7XG5cdFx0aGVpZ2h0OiBmaXQtY29udGVudDtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG5cdFx0ei1pbmRleDogMTAwO1xuICAgICN0ZXh0e1xuICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDAuM3JlbSkgaW52ZXJ0KDAuMyk7XG4gICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgfVxuICB9XG48L3N0eWxlPiIsIjxzdmVsdGU6b3B0aW9ucyBhY2Nlc3NvcnMgLz5cblxuPGRpdiBiaW5kOnRoaXM9e3BpY2tlckVsZW1lbnR9IG9uOnBvaW50ZXJkb3duPXtwb2ludGVyRG93bn0gY2xhc3M9XCJrbm9iLWNvbnRhaW5lclwiPlxuXHQ8ZGl2IGNsYXNzPVwia25vYlwiIGNsYXNzOnBpY2tpbmc9e3BpY2tpbmd9PlxuXHRcdHtAaHRtbCBwaWNrSWNvbn1cblx0PC9kaXY+XG48L2Rpdj5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cblx0Ly8gQHRzLWlnbm9yZVxuXHRpbXBvcnQgcGlja0ljb24gZnJvbSAnLy4uL3B1YmxpYy9wbHVnLnN2ZydcblxuXHRleHBvcnQgbGV0IHBpY2tfZnJvbV9jYW52YXM6ICgpID0+IG51bWJlcltdXG4gIFxuICBsZXQgcGlja2VyRWxlbWVudDogSFRNTEVsZW1lbnRcbiAgXG4gIGV4cG9ydCBsZXQgcGlja2luZyA9IGZhbHNlXG4gIGxldCBwaWNrZWRfY29sID0gWzAsMCwwXVxuICBleHBvcnQgbGV0IGp1c3RfZmluaXNoZWRfcGljayA9IGZhbHNlXG5cblx0ZnVuY3Rpb24gcG9pbnRlck1vdmUoeyBjbGllbnRYLCBjbGllbnRZIH0pIHtcbiAgIHBpY2tfZnJvbV9jYW52YXMoKVxuXG4gICAgLy8gcGlja2VkX2NvbCA9IFsuLi5jXVxuICAgIC8vIHBpY2tlZF9jb2xbMF0gPSBjWzBdLzI1NVxuICAgIC8vIHBpY2tlZF9jb2xbMV0gPSBjWzFdLzI1NVxuICAgIC8vIHBpY2tlZF9jb2xbMl0gPSBjWzJdLzI1NVxuXHRcdC8vIGxldCB2YWx1ZURpZmYgPSB2YWx1ZVJhbmdlICogKHN0YXJ0WSAtIGNsaWVudFkpIC8gcGl4ZWxSYW5nZTtcblx0XHQvLyB2YWx1ZURpZmYgLT0gdmFsdWVSYW5nZSAqIChzdGFydFggLSBjbGllbnRYKSAvIHBpeGVsUmFuZ2U7XG5cdFx0Ly8gdmFsdWUgPSBjbGFtcChzdGFydFZhbHVlICsgdmFsdWVEaWZmLCBtaW4sIG1heClcblx0fVxuXHRjb25zdCBwb2ludGVyVXAgPSAoKSA9PiB7XG4gICAgcGlja2luZyA9IGZhbHNlXG4gICAganVzdF9maW5pc2hlZF9waWNrID0gdHJ1ZVxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHBvaW50ZXJNb3ZlKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgcG9pbnRlclVwKTtcblx0fVxuXHRcblx0Y29uc3QgcG9pbnRlckRvd24gPSAoZTogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgcGlja2luZyA9IHRydWVcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBwb2ludGVyTW92ZSk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHBvaW50ZXJVcCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKSBcblx0fVxuXHRcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdC5waWNraW5ne1xuXHRcdGZpbHRlcjogaW52ZXJ0KCk7XG5cdFx0YmFja2dyb3VuZDogYmxhY2s7XG5cdH1cblx0KiB7XG5cdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdFx0LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcblx0fVxuXHQua25vYi1jb250YWluZXIge1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHQmOmhvdmVyIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHQtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Lyogd2lkdGg6IDQwcHg7XG4gICAgaGVpZ2h0OiA0MHB4OyAqL1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdG1heC1oZWlnaHQ6IDUwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdC8qIGJvcmRlci1yYWRpdXM6IDUwJTsgKi9cbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IGF1dG87XG5cdFx0bWFyZ2luLXJpZ2h0OiAxcmVtO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBhbGw7XG5cdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdH1cblxuXHQua25vYiB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0YXNwZWN0LXJhdGlvOiAxLzE7XG5cdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdC8qIGhlaWdodDogODAlOyAqL1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0LyogYm9yZGVyLXJhZGl1czogNTAlOyAqL1xuXHRcdGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcblx0XHRmaWxsOiB3aGl0ZTtcblx0XHR0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xuXHR9XG5cblx0Lmtub2IgOmdsb2JhbChzdmcpIHtcblx0XHRmaWxsOiB3aGl0ZTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdH1cbjwvc3R5bGU+XG4iLCI8c3ZlbHRlOm9wdGlvbnMgYWNjZXNzb3JzIC8+XG5cbjxkaXYgY2xhc3M9XCJrbm9iLWNvbnRhaW5lci1jb250YWluZXJcIj5cblx0PGltZ1xuXHRcdHNyYz17c2VsZWN0ZWRfYnJ1c2hfdGV4dHVyZSA/IHNlbGVjdGVkX2JydXNoX3RleHR1cmUucGF0aCA6ICcnfVxuXHRcdG9uOmNsaWNrPXsoKSA9PiB7XG5cdFx0XHRkcm9wZG93bl90b2dnbGVkID0gIWRyb3Bkb3duX3RvZ2dsZWRcblx0XHR9fSAvPlxuXHR7I2lmIGRyb3Bkb3duX3RvZ2dsZWR9XG5cdFx0PGRpdiBpZD1cImRyb3Bkb3duXCI+XG5cdFx0XHR7I2VhY2ggYnJ1c2hfdGV4dHVyZXMgYXMgdGV4dHVyZSwgaX1cblx0XHRcdFx0eyNpZiB0ZXh0dXJlICE9PSBzZWxlY3RlZF9icnVzaF90ZXh0dXJlfVxuXHRcdFx0XHRcdDxpbWdcblx0XHRcdFx0XHRcdHNyYz17dGV4dHVyZS5wYXRofVxuXHRcdFx0XHRcdFx0b246Y2xpY2s9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0c2VsZWN0ZWRfYnJ1c2hfdGV4dHVyZSA9IHRleHR1cmVcblx0XHRcdFx0XHRcdFx0ZHJvcGRvd25fdG9nZ2xlZCA9IGZhbHNlXG5cdFx0XHRcdFx0XHR9fSAvPlxuXHRcdFx0XHR7L2lmfVxuXHRcdFx0ey9lYWNofVxuXHRcdDwvZGl2PlxuXHR7L2lmfVxuPC9kaXY+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7QnJ1c2hUeXBlfSBmcm9tICdicnVzaF9zdHJva2UnXG5cdGltcG9ydCB0eXBlIHtCcnVzaFRleHR1cmV9IGZyb20gJ3N0dWZmJ1xuXHRpbXBvcnQge29uTW91bnR9IGZyb20gJ3N2ZWx0ZSdcblxuXHRleHBvcnQgbGV0IGJydXNoX3RleHR1cmVzOiBBcnJheTxCcnVzaFRleHR1cmU+XG5cdGV4cG9ydCBsZXQgc2VsZWN0ZWRfYnJ1c2hfdGV4dHVyZTogQnJ1c2hUZXh0dXJlXG5cblx0bGV0IGRyb3Bkb3duX3RvZ2dsZWQgPSBmYWxzZVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5cdCoge1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdH1cblx0aW1nIHtcblx0XHQmOmFjdGl2ZSB7XG5cdFx0XHRmaWx0ZXI6IGludmVydCgxKTtcblx0XHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHRcdH1cblx0XHQvLyBwb2ludGVyLWV2ZW50czogbm9uZTtcblx0fVxuXHQua25vYi1jb250YWluZXItY29udGFpbmVyIHtcblx0XHR6LWluZGV4OiA5OTk5OTk5OTk5OTk5O1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdG1heC1oZWlnaHQ6IDUwJTtcblx0XHRtYXJnaW4tYm90dG9tOiBhdXRvO1xuXHRcdG1hcmdpbi10b3A6IGF1dG87XG5cdFx0bWFyZ2luLXJpZ2h0OiAxLjVyZW07XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBhbGw7XG5cdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdG1pbi13aWR0aDogN3JlbTtcblxuXHRcdGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xuXHRcdG1pbi13aWR0aDogMHB4O1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHQjZHJvcGRvd24ge1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0XHRwb3NpdGlvbjogc3RhdGljO1xuXHRcdFx0aGVpZ2h0OiB1bnNldDtcblx0XHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHRcdFx0Ly8gdG9wOiA4OHB4O1xuXHRcdFx0PiBpbWcge1xuXHRcdFx0XHR6LWluZGV4OiAxMDAwMDAwMDtcblx0XHRcdFx0YXNwZWN0LXJhdGlvOiAxLzE7XG5cdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHQvLyBwb3NpdGlvbjogc3RhdGljO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQ+IGltZyB7XG5cdFx0XHRhc3BlY3QtcmF0aW86IDEvMTtcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHR9XG5cdH1cbjwvc3R5bGU+XG4iLCI8c3ZlbHRlOm9wdGlvbnMgYWNjZXNzb3JzIC8+XG5cbjxkaXYgY2xhc3M9XCJrbm9iLWNvbnRhaW5lci1jb250YWluZXJcIj5cblx0PGRpdj57QmxlbmRpbmdDb2xvdXJTcGFjZVtzZWxlY3RlZF9jb2xvdXJfc3BhY2VdfTwvZGl2PlxuXHR7I2lmIGRyb3Bkb3duX3RvZ2dsZWR9XG5cdFx0PGRpdiBpZD1cImRyb3Bkb3duXCI+XG5cdFx0XHR7I2VhY2ggT2JqZWN0LmtleXMoQmxlbmRpbmdDb2xvdXJTcGFjZSkgYXMgY29sb3VyX3NwYWNlLCBpfVxuXHRcdFx0XHR7I2lmIEJsZW5kaW5nQ29sb3VyU3BhY2VbY29sb3VyX3NwYWNlXSAgIT09IHNlbGVjdGVkX2NvbG91cl9zcGFjZSAmJiBpc05hTihCbGVuZGluZ0NvbG91clNwYWNlW2NvbG91cl9zcGFjZV0pfVxuXHRcdFx0XHRcdDxkaXYgcm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiMFwiIG9uOmNsaWNrPXsoKT0+e1xuXHRcdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdFx0c2VsZWN0ZWRfY29sb3VyX3NwYWNlID0gY29sb3VyX3NwYWNlXG5cdFx0XHRcdFx0fX0+XG5cdFx0XHRcdFx0XHR7QmxlbmRpbmdDb2xvdXJTcGFjZVtjb2xvdXJfc3BhY2VdfVxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDwhLS0gPGltZ1xuXHRcdFx0XHRcdFx0c3JjPXt0ZXh0dXJlLnBhdGh9XG5cdFx0XHRcdFx0XHRvbjpjbGljaz17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRzZWxlY3RlZF9icnVzaF90ZXh0dXJlID0gdGV4dHVyZVxuXHRcdFx0XHRcdFx0XHRkcm9wZG93bl90b2dnbGVkID0gZmFsc2Vcblx0XHRcdFx0XHRcdH19IC8+IC0tPlxuXHRcdFx0XHR7L2lmfVxuXHRcdFx0ey9lYWNofVxuXHRcdDwvZGl2PlxuXHR7L2lmfVxuPC9kaXY+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7QmxlbmRpbmdDb2xvdXJTcGFjZSwgQnJ1c2hUeXBlfSBmcm9tICdicnVzaF9zdHJva2UnXG5cdGltcG9ydCB0eXBlIHtCcnVzaFRleHR1cmV9IGZyb20gJ3N0dWZmJ1xuXHRpbXBvcnQge29uTW91bnR9IGZyb20gJ3N2ZWx0ZSdcblxuXHQvLyBleHBvcnQgbGV0IGJydXNoX3RleHR1cmVzOiBBcnJheTxCcnVzaFRleHR1cmU+XG5cdGV4cG9ydCBsZXQgc2VsZWN0ZWRfY29sb3VyX3NwYWNlOiBCbGVuZGluZ0NvbG91clNwYWNlXG5cblx0bGV0IGRyb3Bkb3duX3RvZ2dsZWQgPSB0cnVlXG5cblx0b25Nb3VudCgoKSA9PiB7XG5cdH0pXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5cdCoge1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdH1cblx0ZGl2IHtcblx0XHQmOmFjdGl2ZSB7XG5cdFx0XHRmaWx0ZXI6IGludmVydCgxKTtcblx0XHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHRcdH1cblx0XHQvLyBwb2ludGVyLWV2ZW50czogbm9uZTtcblx0fVxuXHQua25vYi1jb250YWluZXItY29udGFpbmVyIHtcblx0XHR6LWluZGV4OiA5OTk5OTk5OTk5OTk5O1xuXHRcdGFzcGVjdC1yYXRpbzogMS8xO1xuXHRcdG1heC1oZWlnaHQ6IDUwJTtcblx0XHRtYXJnaW4tYm90dG9tOiBhdXRvO1xuXHRcdG1hcmdpbi10b3A6IGF1dG87XG5cdFx0bWFyZ2luLXJpZ2h0OiAxLjVyZW07XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBhbGw7XG5cdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdG1pbi13aWR0aDogN3JlbTtcblxuXHRcdGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xuXHRcdG1pbi13aWR0aDogMHB4O1xuXHRcdCNkcm9wZG93biB7XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRcdHBvc2l0aW9uOiBzdGF0aWM7XG5cdFx0XHRoZWlnaHQ6IHVuc2V0O1xuXHRcdFx0YmFja2dyb3VuZDogYmxhY2s7XG5cdFx0XHQvLyB0b3A6IDg4cHg7XG5cdFx0XHQ+IGRpdiB7XG5cdFx0XHRcdHotaW5kZXg6IDEwMDAwMDAwO1xuXHRcdFx0XHQvLyBhc3BlY3QtcmF0aW86IDEvMTtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdC8vIHBvc2l0aW9uOiBzdGF0aWM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdD4gZGl2IHtcblx0XHR9XG5cdH1cbjwvc3R5bGU+XG4iLCI8c3ZlbHRlOm9wdGlvbnMgYWNjZXNzb3JzIC8+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7IG1vZCB9IGZyb20gXCJAMGI1dnIvZXhwZXJpbWVudGFsXCJcblx0aW1wb3J0IGNocm9tYSBmcm9tIFwiY2hyb21hLWpzXCJcblxuXHRleHBvcnQgbGV0IGNvbG91cjogQXJyYXk8bnVtYmVyPjtcblx0Ly8gZXhwb3J0IGxldCBjb2xvdXJfcjogbnVtYmVyO1xuXHQvLyBleHBvcnQgbGV0IGNvbG91cl9nOiBudW1iZXI7XG5cdC8vIGV4cG9ydCBsZXQgY29sb3VyX2I6IG51bWJlcjtcblx0Ly8gZXhwb3J0IGxldCBqdXN0X2ZpbmlzaGVkX3BpY2s6IGJvb2xlYW5cblx0XG5cdC8vICQ6IHZhbHVlUmFuZ2UgPSBtYXggLSBtaW47XG5cdC8vICQ6IHJvdGF0aW9uID0gc3RhcnRSb3RhdGlvbiArICh2YWx1ZSAtIG1pbikgLyB2YWx1ZVJhbmdlICogcm90UmFuZ2U7XG4gIFxuXG5cblxuICBsZXQgY29udGFpbmVyXG5cblx0Ly8gb25Nb3VudCgoKSA9PiB7XG4gIC8vICAgLy8gQHRzLWlnbm9yZVxuICAvLyAgIHdpbmRvdy5jb250YWluZXIgPSBjb250YWluZXJcblx0Ly8gfSlcblxuICBjb25zdCByZV9yZW5kZXJfY29sb3VyID0gKGNvbG91cl9yLCBjb2xvdXJfZywgY29sb3VyX2IpPT57XG4gICAgaWYoY29udGFpbmVyKXtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jb2xvcicsIGByZ2JhKCR7XG4gICAgICAyNTUgKiBNYXRoLnBvdyhjb2xvdXJfciwgMC40NTQ1NDU0NTQ1NDU0NTQ1NDU0NSl9LCAke1xuICAgICAgMjU1ICogTWF0aC5wb3coY29sb3VyX2csIDAuNDU0NTQ1NDU0NTQ1NDU0NTQ1NDUpfSwgJHtcbiAgICAgIDI1NSAqIE1hdGgucG93KGNvbG91cl9iLCAwLjQ1NDU0NTQ1NDU0NTQ1NDU0NTQ1KX0sICR7XG4gICAgICAyNTUgKiBNYXRoLnBvdygxLjAsIDAuNDU0NTQ1NDU0NTQ1NDU0NTQ1NDUpfSlgKVxuICAgIH1cbiAgfVxuXG5cdGV4cG9ydCBsZXQgdXBkYXRlX2Rpc3BsYXkgPSAoY29sb3VyX3IsIGNvbG91cl9nLCBjb2xvdXJfYik9PntyZV9yZW5kZXJfY29sb3VyKGNvbG91cl9yLCBjb2xvdXJfZywgY29sb3VyX2IpfVxuICBcblx0Ly8gJDogY29sID0gYHJnYmEoJHtjb2xvdXJbMF19LCAke2NvbG91clsxXX0sICR7Y29sb3VyWzJdfSwgJHtjb2xvdXJbM119KWA7XG5cdCQ6IHJlX3JlbmRlcl9jb2xvdXIoY29sb3VyWzBdLCBjb2xvdXJbMV0sIGNvbG91clsyXSk7XG5cdC8vICQ6IGlmKHVwZGF0ZV9kaXNwbGF5KSB7cmVfcmVuZGVyX2NvbG91cihjb2xvdXJfciwgY29sb3VyX2csIGNvbG91cl9iKTsgdXBkYXRlX2Rpc3BsYXkgPSBmYWxzZX1cblxuXHRjb25zdCBwaXhlbFJhbmdlID0gMjAwXG5cdGxldCB2YWx1ZSA9IFswLCAwXVxuXHRjb25zdCBtaW4gPSAwXG5cdGNvbnN0IG1heCA9IDRcblxuXHRleHBvcnQgbGV0IGRyYWdnaW5nOiBib29sZWFuID0gZmFsc2Vcblx0ZXhwb3J0IGxldCBzdG9wcGVkX2RyYWdnaW5nOiBib29sZWFuID0gZmFsc2VcblxuXHRsZXQgc3RhcnRZID0gMCxcblx0XHRzdGFydFZhbHVlID0gWzAsIDBdLFxuXHRcdHN0YXJ0WCA9IDBcblxuXHQkOiB2YWx1ZVJhbmdlID0gbWF4IC0gbWluXG5cdC8vICQ6IHJvdGF0aW9uID0gc3RhcnRSb3RhdGlvbiArICh2YWx1ZSAtIG1pbikgLyB2YWx1ZVJhbmdlICogcm90UmFuZ2U7XG5cblx0ZnVuY3Rpb24gY2xhbXAobnVtLCBtaW4sIG1heCkge1xuXHRcdHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG51bSwgbWF4KSlcblx0fVxuXG5cdGZ1bmN0aW9uIHBvaW50ZXJNb3ZlKHtjbGllbnRYLCBjbGllbnRZfSkge1xuXHRcdGNvbnN0IHZhbHVlRGlmZlkgPSAodmFsdWVSYW5nZSAqIChzdGFydFkgLSBjbGllbnRZKSkgLyBwaXhlbFJhbmdlXG5cdFx0Y29uc3QgIHZhbHVlRGlmZlggPSAodmFsdWVSYW5nZSAqIChzdGFydFggLSBjbGllbnRYKSkgLyBwaXhlbFJhbmdlXG5cbiAgICBjb25zdCBjaHJvbWFfZ2wgPSAoY29sOiBudW1iZXJbXSkgPT4ge1xuICAgICAgcmV0dXJuIGNocm9tYS5nbChjb2xbMF0sIGNvbFsxXSwgY29sWzJdKVxuICAgIH1cbiAgICBjb25zdCBjaHJvbWFfb2tsY2ggPSAoY29sOiBudW1iZXJbXSkgPT4ge1xuICAgICAgcmV0dXJuIGNocm9tYS5va2xjaChjb2xbMF0sIGNvbFsxXSwgY29sWzJdKVxuICAgIH1cblxuICAgIFxuICAgIGxldCBjb2wgPSBjaHJvbWFfZ2woc3RhcnRWYWx1ZSkub2tsY2goKVxuXG4gICAgY29sWzBdICs9IHZhbHVlRGlmZlkqMC4zXG4gICAgY29sWzJdICs9IHZhbHVlRGlmZlgqMzYwKjAuM1xuICAgIGNvbFswXSA9IGNsYW1wKGNvbFswXSwgMCwgMSlcbiAgICBjb2xbMV0gPSBjbGFtcChjb2xbMV0sIDAsIDEpXG4gICAgY29sWzJdID0gbW9kKGNvbFsyXSwgMzYwKVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbCA9IGNocm9tYV9va2xjaChjb2wpLmdsKClcbiAgICBjb2xvdXJbMF0gPSBjb2xbMF1cbiAgICBjb2xvdXJbMV0gPSBjb2xbMV1cbiAgICBjb2xvdXJbMl0gPSBjb2xbMl1cblx0fVxuXG5cdGZ1bmN0aW9uIHBvaW50ZXJEb3duKGU6IFBvaW50ZXJFdmVudCkge1xuXHRcdGRyYWdnaW5nID0gdHJ1ZVxuXHRcdGNvbnN0IHtjbGllbnRYLCBjbGllbnRZfSA9IGVcblx0XHRzdGFydFkgPSBjbGllbnRZXG5cdFx0c3RhcnRYID0gY2xpZW50WFxuXHRcdHN0YXJ0VmFsdWUgPSBbY29sb3VyWzBdLCBjb2xvdXJbMV0sIGNvbG91clsyXSwgMV1cblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHBvaW50ZXJNb3ZlKVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBwb2ludGVyVXApXG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKVxuXHR9XG5cblx0ZnVuY3Rpb24gcG9pbnRlclVwKCkge1xuXHRcdGRyYWdnaW5nID0gZmFsc2Vcblx0XHRzdG9wcGVkX2RyYWdnaW5nID0gdHJ1ZVxuXHRcdGNvbnNvbGUubG9nKCd1cCcpXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgcG9pbnRlck1vdmUpXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHBvaW50ZXJVcClcblx0fVxuXHRcbjwvc2NyaXB0PlxuXG48ZGl2IGRyYWdnYWJsZT1cImZhbHNlXCIgY2xhc3M9J2tub2ItY29udGFpbmVyJyBiaW5kOnRoaXM9e2NvbnRhaW5lcn0gb246cG9pbnRlcmRvd249e3BvaW50ZXJEb3dufSA+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAua25vYi1jb250YWluZXJ7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgJjpob3ZlcntcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XG4gICAgYXNwZWN0LXJhdGlvOiAyLzE7XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvcik7XG4gIH0gIFxuPC9zdHlsZT4iLCJpbXBvcnQge21pbiwgc3FydH0gZnJvbSAnd21hdGgnXG5cbmludGVyZmFjZSBrZXlTdGF0ZSB7XG5cdGRvd246IGJvb2xlYW5cblx0anVzdF9wcmVzc2VkOiBib29sZWFuXG5cdGp1c3RfdW5wcmVzc2VkOiBib29sZWFuXG59XG5cbnR5cGUgQnRuQ29kZSA9XG5cdHwgJ0tleUEnXG5cdHwgJ0tleUInXG5cdHwgJ0tleUMnXG5cdHwgJ0tleUQnXG5cdHwgJ0tleUUnXG5cdHwgJ0tleUYnXG5cdHwgJ0tleUcnXG5cdHwgJ0tleUgnXG5cdHwgJ0tleUknXG5cdHwgJ0tleUonXG5cdHwgJ0tleUsnXG5cdHwgJ0tleUwnXG5cdHwgJ0tleU0nXG5cdHwgJ0tleU4nXG5cdHwgJ0tleU8nXG5cdHwgJ0tleVAnXG5cdHwgJ0tleVEnXG5cdHwgJ0tleVInXG5cdHwgJ0tleVMnXG5cdHwgJ0tleVQnXG5cdHwgJ0tleVUnXG5cdHwgJ0tleUknXG5cdHwgJ0tleVYnXG5cdHwgJ0tleVcnXG5cdHwgJ0tleVgnXG5cdHwgJ0tleVknXG5cdHwgJ0tleVonXG5cdHwgJ0RpZ2l0MSdcblx0fCAnRGlnaXQyJ1xuXHR8ICdEaWdpdDMnXG5cdHwgJ0RpZ2l0NCdcblx0fCAnRGlnaXQ1J1xuXHR8ICdEaWdpdDYnXG5cdHwgJ0RpZ2l0Nydcblx0fCAnRGlnaXQ4J1xuXHR8ICdEaWdpdDknXG5cdHwgJ0RpZ2l0MCdcblx0fCAnQ29udHJvbExlZnQnXG5cdHwgJ0FsdExlZnQnXG5cdHwgJ1NoaWZ0TGVmdCdcblx0fCAnU3BhY2UnXG5cbmV4cG9ydCBjbGFzcyBJTyB7XG5cdHByaXZhdGUga2V5cyA9IG5ldyBNYXA8QnRuQ29kZSwga2V5U3RhdGU+KClcblxuXHQvLyB0b3VjaF9wb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KDgpXG5cdC8vIHRvdWNoX3Bvc2l0aW9uc19jbnQgPSAwXG5cdHRvdWNoZXM6IHtba2V5OiBudW1iZXJdOiBudW1iZXJbXX0gPSB7fVxuXHR0d29fZmluZ2VyX3BpbmNoX3ByZXYgPSBmYWxzZVxuXHR0d29fZmluZ2VyX3BpbmNoID0gZmFsc2Vcblx0anVzdF9maW5pc2hlZF9waW5jaCA9IGZhbHNlXG5cdGp1c3Rfc3RhcnRlZF9waW5jaCA9IGZhbHNlXG5cdHRvdWNoZXNfc3RhcnRpbmdfcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSg0KVxuXHR0b3VjaGVzX3N0YXJ0aW5nX21pZF9wb2ludCA9IG5ldyBGbG9hdDMyQXJyYXkoMilcblx0dG91Y2hlc19zdGFydGluZ19sZW5ndGggPSAwXG5cdHRvdWNoZXNfbWlkX3BvaW50X3ByZXYgPSBuZXcgRmxvYXQzMkFycmF5KDIpXG5cdHBpbmNoX3BvcyA9IG5ldyBGbG9hdDMyQXJyYXkoMilcblx0cGluY2hfem9vbSA9IDBcblxuXHQvLyBtb3VzZV9wb3M6IEFycmF5PG51bWJlcj4gPSBbMCwgMF1cblx0bW91c2VfcG9zOiBGbG9hdDMyQXJyYXkgPSBGbG9hdDMyQXJyYXkuZnJvbShbMCwgMF0pXG5cdGRlbHRhX21vdXNlX3BvczogRmxvYXQzMkFycmF5ID0gRmxvYXQzMkFycmF5LmZyb20oWzAsIDBdKVxuXHRtb3VzZV9wb3NfcHJldjogRmxvYXQzMkFycmF5ID0gRmxvYXQzMkFycmF5LmZyb20oWzAsIDBdKVxuXHRtb3VzZV9kb3duOiBib29sZWFuID0gZmFsc2VcblxuXHRwcml2YXRlIF9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWUgPSBuZXcgRmxvYXQzMkFycmF5KDUwKVxuXHRwcml2YXRlIF9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfYiA9IG5ldyBGbG9hdDMyQXJyYXkoNTApXG5cdF9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfY250ID0gMFxuXHRfbW91c2VfcG9zaXRpb25zX2R1cmluZ19sYXN0X2ZyYW1lX2NudF9iID0gMFxuXHRtb3VzZV9wb3NpdGlvbnNfYXJyX2lkeCA9IDBcblxuXHRnZXQgbW91c2VfcG9zaXRpb25zX2R1cmluZ19sYXN0X2ZyYW1lKCk6IEZsb2F0MzJBcnJheSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VfcG9zaXRpb25zX2Fycl9pZHggPT09IDBcblx0XHRcdD8gdGhpcy5fbW91c2VfcG9zaXRpb25zX2R1cmluZ19sYXN0X2ZyYW1lXG5cdFx0XHQ6IHRoaXMuX21vdXNlX3Bvc2l0aW9uc19kdXJpbmdfbGFzdF9mcmFtZV9iXG5cdH1cblx0Z2V0IG1vdXNlX3Bvc2l0aW9uc19kdXJpbmdfbGFzdF9mcmFtZV9jbnQoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZV9wb3NpdGlvbnNfYXJyX2lkeCA9PT0gMFxuXHRcdFx0PyB0aGlzLl9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfY250XG5cdFx0XHQ6IHRoaXMuX21vdXNlX3Bvc2l0aW9uc19kdXJpbmdfbGFzdF9mcmFtZV9jbnRfYlxuXHR9XG5cblx0cG9pbnRlclR5cGU6IHN0cmluZyA9ICdtb3VzZSdcblxuXHRtb3VzZV9kb3duX3ByZXYgPSBmYWxzZVxuXHRtb3VzZV9qdXN0X3VucHJlc3NlZCA9IGZhbHNlXG5cdG1vdXNlX2p1c3RfcHJlc3NlZCA9IGZhbHNlXG5cdG1vdXNlX2p1c3RfbW92ZWQgPSBmYWxzZVxuXG5cdG1tYl9qdXN0X3VucHJlc3NlZCA9IGZhbHNlXG5cdG1tYl9qdXN0X3ByZXNzZWQgPSBmYWxzZVxuXHRtbWJfZG93biA9IGZhbHNlXG5cblx0bW91c2Vfd2hlZWw6IG51bWJlciA9IDBcblxuXHRwcmVzc3VyZTogbnVtYmVyID0gMC4wXG5cblx0dGlsdDogbnVtYmVyW10gPSBbMCwgMF1cblxuXHR0aWNrKCkge1xuXHRcdHRoaXMuZGVsdGFfbW91c2VfcG9zWzBdID0gdGhpcy5tb3VzZV9wb3NbMF0gLSB0aGlzLm1vdXNlX3Bvc19wcmV2WzBdXG5cdFx0dGhpcy5kZWx0YV9tb3VzZV9wb3NbMV0gPSB0aGlzLm1vdXNlX3Bvc1sxXSAtIHRoaXMubW91c2VfcG9zX3ByZXZbMV1cblx0XHR0aGlzLm1vdXNlX3Bvc19wcmV2WzBdID0gdGhpcy5tb3VzZV9wb3NbMF1cblx0XHR0aGlzLm1vdXNlX3Bvc19wcmV2WzFdID0gdGhpcy5tb3VzZV9wb3NbMV1cblxuXHRcdGlmICh0aGlzLm1vdXNlX3Bvc2l0aW9uc19hcnJfaWR4ID09PSAwKSB7XG5cdFx0XHR0aGlzLl9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfY250ID0gMFxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfY250X2IgPSAwXG5cdFx0fVxuXHRcdHRoaXMubW91c2VfcG9zaXRpb25zX2Fycl9pZHggPSAxIC0gdGhpcy5tb3VzZV9wb3NpdGlvbnNfYXJyX2lkeFxuXG5cdFx0aWYgKHRoaXMudHdvX2Zpbmdlcl9waW5jaCA9PT0gZmFsc2UgJiYgdGhpcy50d29fZmluZ2VyX3BpbmNoX3ByZXYgPT09IHRydWUpIHtcblx0XHRcdHRoaXMuanVzdF9maW5pc2hlZF9waW5jaCA9IHRydWVcblx0XHR9IGVsc2UgaWYgKHRoaXMudHdvX2Zpbmdlcl9waW5jaCA9PT0gdHJ1ZSAmJiB0aGlzLnR3b19maW5nZXJfcGluY2hfcHJldiA9PT0gZmFsc2UpIHtcblx0XHRcdHRoaXMuanVzdF9zdGFydGVkX3BpbmNoID0gdHJ1ZVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLm1vdXNlX2Rvd24gIT09IHRoaXMubW91c2VfZG93bl9wcmV2KSB7XG5cdFx0XHRpZiAodGhpcy5tb3VzZV9kb3duKSB7XG5cdFx0XHRcdC8vIHRoaXMubW91c2VfcHJlc3NlZCA9IHRydWVcblx0XHRcdFx0dGhpcy5tb3VzZV9qdXN0X3ByZXNzZWQgPSB0cnVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyB0aGlzLm1vdXNlX3ByZXNzZWQgPSBmYWxzZVxuXHRcdFx0XHR0aGlzLm1vdXNlX2p1c3RfdW5wcmVzc2VkID0gdHJ1ZVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHR0aWNrX2VuZCgpIHtcblx0XHR0aGlzLm1vdXNlX2p1c3RfcHJlc3NlZCA9IGZhbHNlXG5cdFx0dGhpcy5tb3VzZV9qdXN0X3VucHJlc3NlZCA9IGZhbHNlXG5cdFx0dGhpcy5tb3VzZV9qdXN0X21vdmVkID0gZmFsc2Vcblx0XHR0aGlzLm1vdXNlX2Rvd25fcHJldiA9IHRoaXMubW91c2VfZG93blxuXHRcdHRoaXMubW1iX2p1c3RfdW5wcmVzc2VkID0gZmFsc2Vcblx0XHR0aGlzLm1tYl9qdXN0X3ByZXNzZWQgPSBmYWxzZVxuXHRcdHRoaXMubW91c2Vfd2hlZWwgPSAwXG5cdFx0dGhpcy50d29fZmluZ2VyX3BpbmNoX3ByZXYgPSB0aGlzLnR3b19maW5nZXJfcGluY2hcblx0XHR0aGlzLmp1c3RfZmluaXNoZWRfcGluY2ggPSBmYWxzZVxuXHRcdHRoaXMuanVzdF9zdGFydGVkX3BpbmNoID0gZmFsc2Vcblx0XHRPYmplY3QudmFsdWVzKHRoaXMua2V5cykuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRrZXkuanVzdF91bnByZXNzZWQgPSBmYWxzZVxuXHRcdFx0a2V5Lmp1c3RfcHJlc3NlZCA9IGZhbHNlXG5cdFx0fSlcblx0fVxuXHRwdWJsaWMgZ2V0S2V5KGNvZGU6IEJ0bkNvZGUpOiBrZXlTdGF0ZSB7XG5cdFx0bGV0IGtleSA9IHRoaXMua2V5c1tjb2RlXVxuXHRcdGlmIChrZXkpIHtcblx0XHRcdHJldHVybiBrZXlcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHtkb3duOiBmYWxzZSwganVzdF9wcmVzc2VkOiBmYWxzZSwganVzdF91bnByZXNzZWQ6IGZhbHNlfVxuXHRcdH1cblx0fVxuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG5cdFx0XHR0aGlzLmtleXNbZXZlbnQuY29kZV0gPSB7ZG93bjogdHJ1ZSwganVzdF9wcmVzc2VkOiB0cnVlLCBqdXN0X3VucHJlc3NlZDogZmFsc2V9XG5cdFx0XHRpZiAoZXZlbnQuY29kZSA9PT0gJ0FsdExlZnQnKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0fSlcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcblx0XHRcdGxldCBqdXN0X3VucHJlc3NlZCA9IGZhbHNlXG5cdFx0XHRpZiAodGhpcy5nZXRLZXkoZXZlbnQuY29kZSBhcyBCdG5Db2RlKS5kb3duKSBqdXN0X3VucHJlc3NlZCA9IHRydWVcblx0XHRcdHRoaXMua2V5c1tldmVudC5jb2RlXSA9IHtkb3duOiBmYWxzZSwganVzdF9wcmVzc2VkOiBmYWxzZSwganVzdF91bnByZXNzZWQ6IGp1c3RfdW5wcmVzc2VkfVxuXHRcdH0pXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgKGUpID0+IHtcblx0XHRcdHRoaXMubW91c2Vfd2hlZWwgPSBlLmRlbHRhWSA8IDAgPyAxIDogZS5kZWx0YVkgPiAwID8gLTEgOiAwXG5cdFx0fSlcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIChlKSA9PiB7XG5cdFx0XHRpZiAoZS5idXR0b24gPT09IDEpIHtcblx0XHRcdFx0dGhpcy5tbWJfZG93biA9IGZhbHNlXG5cdFx0XHRcdHRoaXMubW1iX2p1c3RfdW5wcmVzc2VkID0gdHJ1ZVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG5cdFx0XHRpZiAoZS5idXR0b24gPT09IDEpIHtcblx0XHRcdFx0dGhpcy5tbWJfZG93biA9IHRydWVcblx0XHRcdFx0dGhpcy5tbWJfanVzdF9wcmVzc2VkID0gdHJ1ZVxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KClcblx0XHRcdH1cblx0XHR9KVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcblx0XHRcdGxldCBsX2FsdCA9IHRoaXMuZ2V0S2V5KCdBbHRMZWZ0Jylcblx0XHRcdGlmIChsX2FsdC5kb3duKSB7XG5cdFx0XHRcdGxfYWx0Lmp1c3RfdW5wcmVzc2VkID0gdHJ1ZVxuXHRcdFx0XHRsX2FsdC5kb3duID0gZmFsc2Vcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0Ly8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgKGUpID0+IHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgKGUpID0+IHtcblx0XHRcdGZ1bmN0aW9uIGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgdGFyZ2V0KSB7XG5cdFx0XHRcdHRhcmdldCA9IHRhcmdldCB8fCBldmVudC50YXJnZXRcblx0XHRcdFx0dmFyIHJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHg6IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQsXG5cdFx0XHRcdFx0eTogZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wLFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmdW5jdGlvbiBnZXROb1BhZGRpbmdOb0JvcmRlckNhbnZhc1JlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgdGFyZ2V0KSB7XG5cdFx0XHRcdHRhcmdldCA9IHRhcmdldCB8fCBldmVudC50YXJnZXRcblx0XHRcdFx0dmFyIHBvcyA9IGdldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgdGFyZ2V0KVxuXG5cdFx0XHRcdHBvcy54ID0gKHBvcy54ICogdGFyZ2V0LndpZHRoKSAvIHRhcmdldC5jbGllbnRXaWR0aFxuXHRcdFx0XHRwb3MueSA9IChwb3MueSAqIHRhcmdldC5oZWlnaHQpIC8gdGFyZ2V0LmNsaWVudEhlaWdodFxuXG5cdFx0XHRcdHJldHVybiBwb3Ncblx0XHRcdH1cblx0XHRcdC8vIGlmIChlLnBvaW50ZXJUeXBlID09PSAncGVuJykge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZSlcblx0XHRcdGxldCBnbCA9IHdpbmRvdy5nbFxuXHRcdFx0Y29uc3QgcG9zID0gZ2V0Tm9QYWRkaW5nTm9Cb3JkZXJDYW52YXNSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZSwgZ2wuY2FudmFzKVxuXG5cdFx0XHRjb25zdCB4ID0gKHBvcy54IC8gZ2wuY2FudmFzLndpZHRoKSAqIDIgLSAxXG5cdFx0XHRjb25zdCB5ID0gKHBvcy55IC8gZ2wuY2FudmFzLmhlaWdodCkgKiAtMiArIDFcblxuXHRcdFx0Ly8gdGhpcy5tb3VzZV9wb3MgPSBbeCwgeV1cblx0XHRcdHRoaXMubW91c2VfcG9zWzBdID0geFxuXHRcdFx0dGhpcy5tb3VzZV9wb3NbMV0gPSB5XG5cblx0XHRcdGNvbnN0IGlzX2JhY2sgPSB0aGlzLm1vdXNlX3Bvc2l0aW9uc19hcnJfaWR4ID09PSAwXG5cdFx0XHRjb25zdCBwb3NpdGlvbnMgPSBpc19iYWNrID8gdGhpcy5fbW91c2VfcG9zaXRpb25zX2R1cmluZ19sYXN0X2ZyYW1lX2IgOiB0aGlzLl9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVcblx0XHRcdGNvbnN0IGlkeCA9IGlzX2JhY2sgPyB0aGlzLl9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfY250X2IgOiB0aGlzLl9tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVfY250XG5cdFx0XHRwb3NpdGlvbnNbaWR4ICogMl0gPSB4XG5cdFx0XHRwb3NpdGlvbnNbaWR4ICogMiArIDFdID0geVxuXHRcdFx0aWYgKGlzX2JhY2spIHRoaXMuX21vdXNlX3Bvc2l0aW9uc19kdXJpbmdfbGFzdF9mcmFtZV9jbnRfYisrXG5cdFx0XHRlbHNlIHRoaXMuX21vdXNlX3Bvc2l0aW9uc19kdXJpbmdfbGFzdF9mcmFtZV9jbnQrK1xuXG5cdFx0XHR0aGlzLnByZXNzdXJlID0gZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyA/IDEgOiBlLnByZXNzdXJlID8/IHRoaXMucHJlc3N1cmVcblx0XHRcdHRoaXMubW91c2VfanVzdF9tb3ZlZCA9IHRydWVcblxuXHRcdFx0dGhpcy50aWx0WzBdID0gZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyA/IDAgOiBlLmFsdGl0dWRlQW5nbGUgPz8gdGhpcy50aWx0WzBdXG5cdFx0XHR0aGlzLnRpbHRbMV0gPSBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnID8gMCA6IGUuYXppbXV0aEFuZ2xlID8/IHRoaXMudGlsdFsxXVxuXHRcdFx0Ly8gfVxuXHRcdH0pXG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJykuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIChlKSA9PiB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGUudGFyZ2V0VG91Y2hlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCB0b3VjaCA9IGUudGFyZ2V0VG91Y2hlc1tpXVxuXHRcdFx0XHRjb25zdCB0b3VjaF9pZCA9IHRvdWNoLmlkZW50aWZpZXJcblx0XHRcdFx0dGhpcy50b3VjaGVzW3RvdWNoX2lkXSA9IFt0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZXVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRjb25zdCBsZW5ndGggPSAoYXg6IG51bWJlciwgYXk6IG51bWJlciwgYng6IG51bWJlciwgYnk6IG51bWJlcik6IG51bWJlciA9PiB7XG5cdFx0XHRyZXR1cm4gc3FydCgoYXggLSBieCkgKiAoYXggLSBieCkgKyAoYXkgLSBieSkgKiAoYXkgLSBieSkpXG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChlKSA9PiB7XG5cdFx0XHRpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRpZiAodGhpcy50d29fZmluZ2VyX3BpbmNoID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdC8vIGJlZ2luIHBpbmNoXG5cdFx0XHRcdFx0dGhpcy50b3VjaGVzX3N0YXJ0aW5nX3Bvc2l0aW9uc1swXSA9IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYXG5cdFx0XHRcdFx0dGhpcy50b3VjaGVzX3N0YXJ0aW5nX3Bvc2l0aW9uc1sxXSA9IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZXG5cdFx0XHRcdFx0dGhpcy50b3VjaGVzX3N0YXJ0aW5nX3Bvc2l0aW9uc1syXSA9IGUudGFyZ2V0VG91Y2hlc1sxXS5jbGllbnRYXG5cdFx0XHRcdFx0dGhpcy50b3VjaGVzX3N0YXJ0aW5nX3Bvc2l0aW9uc1szXSA9IGUudGFyZ2V0VG91Y2hlc1sxXS5jbGllbnRZXG5cdFx0XHRcdFx0dGhpcy50b3VjaGVzX3N0YXJ0aW5nX21pZF9wb2ludFswXSA9IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYICogMC41ICsgZS50YXJnZXRUb3VjaGVzWzFdLmNsaWVudFggKiAwLjVcblx0XHRcdFx0XHR0aGlzLnRvdWNoZXNfc3RhcnRpbmdfbWlkX3BvaW50WzFdID0gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgKiAwLjUgKyBlLnRhcmdldFRvdWNoZXNbMV0uY2xpZW50WSAqIDAuNVxuXHRcdFx0XHRcdHRoaXMucGluY2hfem9vbSA9IDBcblx0XHRcdFx0XHR0aGlzLnRvdWNoZXNfc3RhcnRpbmdfbGVuZ3RoID0gbGVuZ3RoKFxuXHRcdFx0XHRcdFx0ZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFgsXG5cdFx0XHRcdFx0XHRlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSxcblx0XHRcdFx0XHRcdGUudGFyZ2V0VG91Y2hlc1sxXS5jbGllbnRYLFxuXHRcdFx0XHRcdFx0ZS50YXJnZXRUb3VjaGVzWzFdLmNsaWVudFksXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHRcdHRoaXMudG91Y2hlc19taWRfcG9pbnRfcHJldlswXSA9IHRoaXMudG91Y2hlc19zdGFydGluZ19taWRfcG9pbnRbMF1cblx0XHRcdFx0XHR0aGlzLnRvdWNoZXNfbWlkX3BvaW50X3ByZXZbMV0gPSB0aGlzLnRvdWNoZXNfc3RhcnRpbmdfbWlkX3BvaW50WzFdXG5cdFx0XHRcdFx0dGhpcy5waW5jaF9wb3NbMF0gPSAwXG5cdFx0XHRcdFx0dGhpcy5waW5jaF9wb3NbMV0gPSAwXG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy50d29fZmluZ2VyX3BpbmNoID0gdHJ1ZVxuXHRcdFx0XHRjb25zdCBtaWRfcG9pbnRfeCA9IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYICogMC41ICsgZS50YXJnZXRUb3VjaGVzWzFdLmNsaWVudFggKiAwLjVcblx0XHRcdFx0Y29uc3QgbWlkX3BvaW50X3kgPSBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSAqIDAuNSArIGUudGFyZ2V0VG91Y2hlc1sxXS5jbGllbnRZICogMC41XG5cblx0XHRcdFx0Y29uc3QgbGVuID0gbGVuZ3RoKFxuXHRcdFx0XHRcdGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYLFxuXHRcdFx0XHRcdGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZLFxuXHRcdFx0XHRcdGUudGFyZ2V0VG91Y2hlc1sxXS5jbGllbnRYLFxuXHRcdFx0XHRcdGUudGFyZ2V0VG91Y2hlc1sxXS5jbGllbnRZLFxuXHRcdFx0XHQpXG5cdFx0XHRcdGNvbnN0IHJlcyA9IG1pbih3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuXHRcdFx0XHR0aGlzLnBpbmNoX3pvb20gPSAoKGxlbiAtIHRoaXMudG91Y2hlc19zdGFydGluZ19sZW5ndGgpIC8gcmVzKSAqIDRcblxuXHRcdFx0XHR0aGlzLnBpbmNoX3Bvc1swXSArPSAoKChtaWRfcG9pbnRfeCAtIHRoaXMudG91Y2hlc19taWRfcG9pbnRfcHJldlswXSkgLyByZXMpICogMikgLyB3aW5kb3cuem9vbVswXVxuXHRcdFx0XHR0aGlzLnBpbmNoX3Bvc1sxXSArPSAoKChtaWRfcG9pbnRfeSAtIHRoaXMudG91Y2hlc19taWRfcG9pbnRfcHJldlsxXSkgLyByZXMpICogMikgLyB3aW5kb3cuem9vbVswXVxuXHRcdFx0XHR0aGlzLnRvdWNoZXNfbWlkX3BvaW50X3ByZXZbMF0gPSBtaWRfcG9pbnRfeFxuXHRcdFx0XHR0aGlzLnRvdWNoZXNfbWlkX3BvaW50X3ByZXZbMV0gPSBtaWRfcG9pbnRfeVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRoaXMudHdvX2Zpbmdlcl9waW5jaCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdHRoaXMudHdvX2Zpbmdlcl9waW5jaCA9IGZhbHNlXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0Y29uc3QgdG91Y2hfZW5kID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcblx0XHRcdGZvciAoY29uc3QgaWQgaW4gT2JqZWN0LmtleXModGhpcy50b3VjaGVzKSkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy50b3VjaGVzW2lkXVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50d29fZmluZ2VyX3BpbmNoID0gZmFsc2Vcblx0XHR9XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJykuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCAoZSkgPT4ge1xuXHRcdFx0dG91Y2hfZW5kKGUpXG5cdFx0fSlcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJykuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZSkgPT4ge1xuXHRcdFx0dG91Y2hfZW5kKGUpXG5cdFx0fSlcblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIChlKSA9PiB7XG5cdFx0XHR0aGlzLnBvaW50ZXJUeXBlID0gZS5wb2ludGVyVHlwZVxuXHRcdFx0aWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScgJiYgZS5idXR0b24gIT09IDApIHJldHVyblxuXHRcdFx0dGhpcy5tb3VzZV9kb3duID0gdHJ1ZVxuXHRcdH0pXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLm1vdXNlX2Rvd24gPSBmYWxzZVxuXHRcdH0pXG5cdH1cbn1cbiIsImltcG9ydCB7cGF1c2Vfb25fZ2xfZXJyb3J9IGZyb20gJ2dsX3V0aWxzJ1xuaW1wb3J0IHt0eXBlIEF0dHJpYlBvaW50ZXJQYXJhbXN9IGZyb20gJy4vVGhpbmcnXG5cbmV4cG9ydCBjbGFzcyBVQk8ge1xuXHQvLyBidWZmOiBXZWJHTEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpIGFzIFdlYkdMQnVmZmVyXG5cdGJ1ZmY6IFZlcnRleEJ1ZmZlclxuXHR1bmlmb3JtczogKG51bWJlciB8IHN0cmluZylbXSA9IFtdXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIGdsLmJpbmRCdWZmZXIoZ2wuVU5JRk9STV9CVUZGRVIsIHRoaXMuYnVmZilcblx0XHQvLyBnbC5idWZmZXJEYXRhKGdsLlVOSUZPUk1fQlVGRkVSLCAzMiAqIDQsIGdsLkRZTkFNSUNfRFJBVylcblx0XHQvLyB0aGlzLmJ1ZmYgPSBuZXcgVmVydGV4QnVmZmVyKDAsIGdsLkZMT0FULCAzMiAqIDQgKiA0ICogNCwgZ2wuVU5JRk9STV9CVUZGRVIpXG5cdFx0dGhpcy5idWZmID0gbmV3IFZlcnRleEJ1ZmZlcigwLCBnbC5GTE9BVCwgOTYsIGdsLlVOSUZPUk1fQlVGRkVSKVxuXHRcdGdsLmJpbmRCdWZmZXJCYXNlKGdsLlVOSUZPUk1fQlVGRkVSLCAwLCB0aGlzLmJ1ZmYuYnVmZilcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVmVydGV4QnVmZmVyIHtcblx0YnVmZjogV2ViR0xCdWZmZXJcblxuXHRjcHVfYnVmZjogRmxvYXQzMkFycmF5IHwgSW50MzJBcnJheSB8IFVpbnQzMkFycmF5XG5cdHR5cGU6IG51bWJlclxuXHR1c2FnZTogbnVtYmVyXG5cblx0c3RyaWRlOiBudW1iZXJcblx0c2luZ2xlX3ZlcnRfc3o6IG51bWJlclxuXHRzejogbnVtYmVyXG5cdG1heF9zejogbnVtYmVyXG5cblx0Y29uc3RydWN0b3Ioc2luZ2xlX3ZlcnRfc3o6IG51bWJlciwgdHlwZTogbnVtYmVyID0gZ2wuRkxPQVQsIG1heF9zaXplOiBudW1iZXIgPSAxMDAwMDAwMCwgdXNhZ2U6IG51bWJlciA9IGdsLkFSUkFZX0JVRkZFUikge1xuXHRcdHRoaXMuYnVmZiA9IGdsLmNyZWF0ZUJ1ZmZlcigpIGFzIFdlYkdMQnVmZmVyXG5cdFx0dGhpcy51c2FnZSA9IHVzYWdlXG5cdFx0Z2wuYmluZEJ1ZmZlcih1c2FnZSwgdGhpcy5idWZmKVxuXHRcdHRoaXMudHlwZSA9IHR5cGVcblxuXHRcdHRoaXMuc2luZ2xlX3ZlcnRfc3ogPSBzaW5nbGVfdmVydF9zelxuXHRcdHRoaXMubWF4X3N6ID0gbWF4X3NpemVcblx0XHR0aGlzLnN0cmlkZSA9IDBcblxuXHRcdGlmICh0eXBlID09PSBnbC5GTE9BVCkge1xuXHRcdFx0dGhpcy5jcHVfYnVmZiA9IG5ldyBGbG9hdDMyQXJyYXkobWF4X3NpemUpXG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSBnbC5JTlQpIHtcblx0XHRcdHRoaXMuY3B1X2J1ZmYgPSBuZXcgSW50MzJBcnJheShtYXhfc2l6ZSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jcHVfYnVmZiA9IG5ldyBVaW50MzJBcnJheShtYXhfc2l6ZSlcblx0XHR9XG5cblx0XHQvLyBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5jcHVfYnVmZiwgZ2wuRFlOQU1JQ19EUkFXKVxuXHRcdC8vIGdsLmJ1ZmZlckRhdGEodXNhZ2UsIHRoaXMuY3B1X2J1ZmYubGVuZ3RoICogdGhpcy5jcHVfYnVmZi5CWVRFU19QRVJfRUxFTUVOVCwgZ2wuRFlOQU1JQ19EUkFXKVxuXHRcdGdsLmJ1ZmZlckRhdGEodXNhZ2UsIHRoaXMuY3B1X2J1ZmYuYnl0ZUxlbmd0aCwgZ2wuRFlOQU1JQ19EUkFXKVxuXHRcdHRoaXMuc3ogPSAwXG5cdH1cblxuXHRiaW5kVG9BdHRyaWIoaWR4OiBudW1iZXIsIHBhcmFtczogQXR0cmliUG9pbnRlclBhcmFtcyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuXHRcdGlmIChwYXJhbXMpIHtcblx0XHRcdGdsLmJpbmRCdWZmZXIodGhpcy51c2FnZSwgdGhpcy5idWZmKVxuXHRcdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihcblx0XHRcdFx0aWR4LFxuXHRcdFx0XHRwYXJhbXMudmVydF9zeiA/PyB0aGlzLnNpbmdsZV92ZXJ0X3N6LFxuXHRcdFx0XHRwYXJhbXMudHlwZSA/PyB0aGlzLnR5cGUsXG5cdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRwYXJhbXMuc3RyaWRlID8/IHRoaXMuc3RyaWRlLFxuXHRcdFx0XHRwYXJhbXMub2Zmc2V0ID8/IDAsXG5cdFx0XHQpXG5cdFx0fSBlbHNlIHtcblx0XHRcdGdsLmJpbmRCdWZmZXIodGhpcy51c2FnZSwgdGhpcy5idWZmKVxuXHRcdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihpZHgsIHRoaXMuc2luZ2xlX3ZlcnRfc3osIHRoaXMudHlwZSwgZmFsc2UsIHRoaXMuc3RyaWRlLCAwKVxuXHRcdH1cblx0fVxuXHRwdXNoX3ZlcnQodmVydDogbnVtYmVyW10pIHtcblx0XHRpZiAodmVydC5sZW5ndGggIT09IHRoaXMuc2luZ2xlX3ZlcnRfc3opIHtcblx0XHRcdC8vIGRlYnVnZ2VyXG5cdFx0fVxuXHRcdGZvciAobGV0IHYgb2YgdmVydCkge1xuXHRcdFx0dGhpcy5jcHVfYnVmZlt0aGlzLnN6KytdID0gdlxuXHRcdH1cblx0fVxuXHR1cGxvYWRfZXh0ZXJuYWxfYXJyYXkoaW5wdXRfYnVmZjogbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkpIHtcblx0XHRpZiAoaW5wdXRfYnVmZiBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRnbC5iaW5kQnVmZmVyKHRoaXMudXNhZ2UsIHRoaXMuYnVmZilcblx0XHRcdGxldCBfYnVmZiA9IEZsb2F0MzJBcnJheS5mcm9tKGlucHV0X2J1ZmYpXG5cdFx0XHR0aGlzLnN6ID0gX2J1ZmYubGVuZ3RoXG5cdFx0XHQvLyBjb25zdCBzel9pbl9ieXRlcyA9IF9idWZmLmxlbmd0aCAqIF9idWZmLkJZVEVTX1BFUl9FTEVNRU5UXG5cdFx0XHRjb25zdCBzel9pbl9ieXRlcyA9IF9idWZmLmJ5dGVMZW5ndGhcblxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ0JFR0lOIEJVRkYgUFJJTlQnKVxuXHRcdFx0Ly8gY29uc29sZS5sb2coX2J1ZmYpXG5cdFx0XHQvLyBjb25zb2xlLmxvZygnbGVuJylcblx0XHRcdC8vIGNvbnNvbGUubG9nKF9idWZmLmxlbmd0aClcblx0XHRcdC8vIGNvbnNvbGUubG9nKCdzeiBieWVzJylcblx0XHRcdC8vIGNvbnNvbGUubG9nKHN6X2luX2J5dGVzKVxuXHRcdFx0Ly8gaWYgKF9idWZmLmxlbmd0aCA+IDApIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBfYnVmZiwgZ2wuRFlOQU1JQ19EUkFXLCAwLCBzel9pbl9ieXRlcylcblx0XHRcdC8vIGlmIChfYnVmZi5sZW5ndGggPiAwKSBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgX2J1ZmYsIGdsLkRZTkFNSUNfRFJBVywgMClcblx0XHRcdC8vIGlmIChfYnVmZi5sZW5ndGggPiAwKSBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgX2J1ZmYsIGdsLkRZTkFNSUNfRFJBVywgMCwgc3pfaW5fYnl0ZXMpXG5cdFx0XHQvLyBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgX2J1ZmYsIGdsLkRZTkFNSUNfRFJBVywgMCwgc3pfaW5fYnl0ZXMpXG5cblx0XHRcdC8vIGdsLmJ1ZmZlclN1YkRhdGEodGhpcy51c2FnZSwgMCwgX2J1ZmYsIDAsIHN6X2luX2J5dGVzKVxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSh0aGlzLnVzYWdlLCAwLCBfYnVmZilcblx0XHRcdHBhdXNlX29uX2dsX2Vycm9yKClcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wuYmluZEJ1ZmZlcih0aGlzLnVzYWdlLCB0aGlzLmJ1ZmYpXG5cdFx0XHQvLyBjb25zdCBzel9pbl9ieXRlcyA9IGlucHV0X2J1ZmYubGVuZ3RoICogaW5wdXRfYnVmZi5CWVRFU19QRVJfRUxFTUVOVFxuXHRcdFx0Y29uc3Qgc3pfaW5fYnl0ZXMgPSBpbnB1dF9idWZmLmJ5dGVMZW5ndGhcblx0XHRcdC8vIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBpbnB1dF9idWZmLCBnbC5EWU5BTUlDX0RSQVcsIDAsIHN6X2luX2J5dGVzKVxuXHRcdFx0Ly8gZ2wuYnVmZmVyU3ViRGF0YShnbC5BUlJBWV9CVUZGRVIsIDAsIGlucHV0X2J1ZmYsIDAsIHN6X2luX2J5dGVzKVxuXHRcdFx0Ly8gZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHN6X2luX2J5dGVzLCBnbC5EWU5BTUlDX0RSQVcpXG5cdFx0XHQvLyBnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgMCwgaW5wdXRfYnVmZiwgMCwgc3pfaW5fYnl0ZXMpXG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKHRoaXMudXNhZ2UsIDAsIGlucHV0X2J1ZmYpXG5cblx0XHRcdC8vIGdsLmJ1ZmZlclN1YkRhdGEoZ2wuQVJSQVlfQlVGRkVSLDAsIGlucHV0X2J1ZmYuYnVmZmVyLCBnbC5EWU5BTUlDX0RSQVcpXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHQvLyBnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgaW5wdXRfYnVmZi5idWZmZXIsIGdsLkRZTkFNSUNfRFJBVylcblx0XHRcdHBhdXNlX29uX2dsX2Vycm9yKClcblx0XHR9XG5cdH1cblx0dXBsb2FkKCkge1xuXHRcdGdsLmJpbmRCdWZmZXIodGhpcy51c2FnZSwgdGhpcy5idWZmKVxuXHRcdGNvbnN0IHN6X2luX2J5dGVzID0gdGhpcy5zeiAqIHRoaXMuY3B1X2J1ZmYuQllURVNfUEVSX0VMRU1FTlRcblx0XHQvLyBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5jcHVfYnVmZiwgZ2wuRFlOQU1JQ19EUkFXLCAwLCBzel9pbl9ieXRlcylcblx0XHRnbC5idWZmZXJTdWJEYXRhKHRoaXMudXNhZ2UsIDAsIHRoaXMuY3B1X2J1ZmYsIDAsIHN6X2luX2J5dGVzKVxuXHRcdHBhdXNlX29uX2dsX2Vycm9yKClcblx0fVxufVxuIiwiaW1wb3J0IHtUZXh0dXJlfSBmcm9tICcuL1RleHR1cmUnXG5cbmV4cG9ydCBjbGFzcyBTaGFkZXJQcm9ncmFtIHtcblx0cHJvZ3JhbTogV2ViR0xQcm9ncmFtXG5cdGxvYWRTaGFkZXIodHlwZTogbnVtYmVyLCBzb3VyY2U6IHN0cmluZykge1xuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlQWxsKCdleHBvcnQgZGVmYXVsdCBcIicsIGBgKVxuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlQWxsKCdcIjsnLCBgYClcblx0XHRzb3VyY2UgPSBzb3VyY2UucmVwbGFjZUFsbCgnXCInLCBgYClcblx0XHRzb3VyY2UgPSBzb3VyY2UucmVwbGFjZUFsbChcblx0XHRcdGBcXFxcbmAsXG5cdFx0XHRgXG5cdFx0YCxcblx0XHQpXG5cdFx0c291cmNlID0gc291cmNlLnJlcGxhY2UoXG5cdFx0XHQvKC4qKSgjdmVyc2lvbiAzMDAgZXMpW1xcdFxcc10qL2csXG5cdFx0XHRgJDJcblx0XHRcdGAsXG5cdFx0KVxuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlQWxsKFxuXHRcdFx0LygjZGVmaW5lIC4rKVtcXHRcXHNdKi9nLFxuXHRcdFx0YFxuXHRcdCQxXG5cdFx0YCxcblx0XHQpXG5cdFx0c291cmNlID0gc291cmNlLnJlcGxhY2VBbGwoXG5cdFx0XHQvXHQrcHJlY2lzaW9uIGhpZ2hwIGZsb2F0Oy9nbSxcblx0XHRcdGBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0XHRgLFxuXHRcdClcblx0XHRzb3VyY2UgPSBzb3VyY2UucmVwbGFjZUFsbChgXFxcXHRgLCBgXHRgKVxuXHRcdGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKSBhcyBXZWJHTFNoYWRlclxuXG5cdFx0Z2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKVxuXHRcdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKVxuXHRcdGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcnM6ICR7Z2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpfWApXG5cdFx0XHRjb25zb2xlLmVycm9yKHNvdXJjZSlcblx0XHR9XG5cdFx0cmV0dXJuIHNoYWRlclxuXHR9XG5cdGNvbnN0cnVjdG9yKHZzLCBmcykge1xuXHRcdGNvbnN0IHZlcnRleFNoYWRlciA9IHRoaXMubG9hZFNoYWRlcihnbC5WRVJURVhfU0hBREVSLCB2cylcblx0XHRjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMubG9hZFNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIsIGZzKVxuXG5cdFx0Y29uc3Qgc2hhZGVyUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKSBhcyBXZWJHTFByb2dyYW1cblx0XHRnbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydGV4U2hhZGVyKVxuXHRcdGdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcilcblx0XHRnbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKVxuXG5cdFx0aWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHNoYWRlclByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgVW5hYmxlIHRvIGluaXRpYWxpemUgdGhlIHNoYWRlciBwcm9ncmFtOiAke2dsLmdldFByb2dyYW1JbmZvTG9nKHNoYWRlclByb2dyYW0pfWApXG5cdFx0XHRjb25zb2xlLmVycm9yKHZzKVxuXHRcdFx0Y29uc29sZS5lcnJvcihmcylcblx0XHR9XG5cblx0XHR0aGlzLnByb2dyYW0gPSBzaGFkZXJQcm9ncmFtXG5cdFx0Z2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pXG5cdFx0Z2wudW5pZm9ybUJsb2NrQmluZGluZyh0aGlzLnByb2dyYW0sIDAsIDApXG5cdH1cblx0dXNlKCkge1xuXHRcdGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKVxuXHR9XG5cdHNldFVuaWZvcm1WZWMobmFtZTogc3RyaW5nLCB2ZWM6IG51bWJlcltdKSB7XG5cdFx0aWYgKHZlYy5sZW5ndGggPT0gMikgZ2wudW5pZm9ybTJmdihnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBuYW1lKSwgdmVjKVxuXHRcdGVsc2UgaWYgKHZlYy5sZW5ndGggPT0gMykgZ2wudW5pZm9ybTNmdihnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBuYW1lKSwgdmVjKVxuXHRcdGVsc2UgaWYgKHZlYy5sZW5ndGggPT0gNCkgZ2wudW5pZm9ybTRmdihnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBuYW1lKSwgdmVjKVxuXHR9XG5cdHNldFVuaWZvcm1GbG9hdChuYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpIHtcblx0XHRnbC51bmlmb3JtMWYoZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgbmFtZSksIHZhbHVlKVxuXHR9XG5cdHNldFVuaWZvcm1JbnQobmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSB7XG5cdFx0Z2wudW5pZm9ybTFpKGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIG5hbWUpLCB2YWx1ZSlcblx0fVxuXHRzZXRVbmlmb3JtVGV4dHVyZShuYW1lOiBzdHJpbmcsIHRleHR1cmU6IFRleHR1cmUsIGJpbmRpbmc6IG51bWJlciA9IDApIHtcblx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgYmluZGluZylcblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlLnRleClcblx0XHRnbC51bmlmb3JtMWkoZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgbmFtZSksIGJpbmRpbmcpXG5cdH1cbn1cbiIsImltcG9ydCB7VmVydGV4QnVmZmVyfSBmcm9tICcuL0J1ZmZlcidcbmltcG9ydCB7U2hhZGVyUHJvZ3JhbX0gZnJvbSAnLi9TaGFkZXJQcm9ncmFtJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZmZCaW5kaW5nIHtcblx0YnVmZjogVmVydGV4QnVmZmVyXG5cdHBhcmFtcz86IEF0dHJpYlBvaW50ZXJQYXJhbXNcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQXR0cmliUG9pbnRlclBhcmFtcyB7XG5cdHZlcnRfc3o/OiBudW1iZXJcblx0c3RyaWRlPzogbnVtYmVyXG5cdHR5cGU/OiBudW1iZXJcblx0b2Zmc2V0PzogbnVtYmVyXG59XG5leHBvcnQgaW50ZXJmYWNlIERyYXdQYXJhbXMge1xuXHRwcmltX3R5cGU/OiBudW1iZXJcblx0ZHJhd19jbnQ/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNsYXNzIFRoaW5nIHtcblx0dmFvOiBXZWJHTFZlcnRleEFycmF5T2JqZWN0XG5cdGJ1ZmZzOiBWZXJ0ZXhCdWZmZXJbXVxuXHRzaGFkZXI6IFNoYWRlclByb2dyYW1cblx0cHJpbV90eXBlOiBudW1iZXJcblxuXHRjb25zdHJ1Y3RvcihidWZmczogVmVydGV4QnVmZmVyW10sIHByaW1fdHlwZTogbnVtYmVyID0gZ2wuVFJJQU5HTEVTLCBzaGFkZXI6IFNoYWRlclByb2dyYW0pIHtcblx0XHR0aGlzLnByaW1fdHlwZSA9IHByaW1fdHlwZVxuXHRcdHRoaXMuc2hhZGVyID0gc2hhZGVyXG5cdFx0dGhpcy52YW8gPSBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpIGFzIFdlYkdMVmVydGV4QXJyYXlPYmplY3Rcblx0XHR0aGlzLmJ1ZmZzID0gWy4uLmJ1ZmZzXVxuXHRcdGdsLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLnZhbylcblx0XHRsZXQgaSA9IDBcblx0XHRmb3IgKGxldCBidWZmIG9mIHRoaXMuYnVmZnMpIHtcblx0XHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGkpXG5cdFx0XHRidWZmLmJpbmRUb0F0dHJpYihpKVxuXHRcdFx0aSsrXG5cdFx0fVxuXHR9XG5cdHN0YXRpYyBkcmF3X2V4dGVybmFsX2J1ZmZzX2FuZF9zaGFkZXIoYnVmZnM6IEJ1ZmZCaW5kaW5nW10sIHNoYWRlcjogU2hhZGVyUHJvZ3JhbSwgcGFyYW1zOiBEcmF3UGFyYW1zKSB7XG5cdFx0c2hhZGVyLnVzZSgpXG5cdFx0Ly8gZ2wuYmluZFZlcnRleEFycmF5KGdsLmRlZmF1bHRWYW8pXG5cdFx0Ly8gZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KDApXG5cdFx0Ly8gZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KDEpXG5cdFx0bGV0IGkgPSAwXG5cdFx0Ly8gZm9yIChsZXQgYnVmZiBvZiBidWZmcykge1xuXHRcdC8vIFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaSlcblx0XHQvLyBcdGJ1ZmYuYnVmZi5iaW5kVG9BdHRyaWIoaSwgYnVmZi5wYXJhbXMgPz8gdW5kZWZpbmVkKVxuXHRcdC8vIFx0aSsrXG5cdFx0Ly8gfVxuXHRcdHBhcmFtcy5wcmltX3R5cGUgPSBwYXJhbXMucHJpbV90eXBlID8/IGdsLlRSSUFOR0xFU1xuXHRcdHBhcmFtcy5kcmF3X2NudCA9IHBhcmFtcy5kcmF3X2NudCA/PyBidWZmc1swXS5idWZmLnN6IC8gYnVmZnNbMF0uYnVmZi5zaW5nbGVfdmVydF9zelxuXG5cdFx0aWYgKHBhcmFtcy5wcmltX3R5cGUgPT09IGdsLlRSSUFOR0xFUykge1xuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIHBhcmFtcy5kcmF3X2NudClcblx0XHRcdGNvbnNvbGUubG9nKCdEUkVXJylcblx0XHRcdGNvbnNvbGUubG9nKHBhcmFtcy5kcmF3X2NudClcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWxlcnQoJ2JsZWVwIGJsb29wIGVycnJvcnJyJylcblx0XHR9XG5cdH1cblxuXHR1cGxvYWRfYWxsX2J1ZmZzKCkge1xuXHRcdGZvciAobGV0IGJ1ZmYgb2YgdGhpcy5idWZmcykge1xuXHRcdFx0YnVmZi51cGxvYWQoKVxuXHRcdH1cblx0fVxuXHRkcmF3X3dpdGhfZXh0ZXJuYWxfc2hhZGVyKHNoYWRlcjogU2hhZGVyUHJvZ3JhbSkge1xuXHRcdHNoYWRlci51c2UoKVxuXHRcdGlmICh0aGlzLnByaW1fdHlwZSA9PT0gZ2wuVFJJQU5HTEVTKSB7XG5cdFx0XHRsZXQgZHJhd19jbnQgPSB0aGlzLmJ1ZmZzWzBdLnN6IC8gdGhpcy5idWZmc1swXS5zaW5nbGVfdmVydF9zelxuXHRcdFx0Z2wuZHJhd0FycmF5cyh0aGlzLnByaW1fdHlwZSwgMCwgZHJhd19jbnQpXG5cdFx0fSBlbHNlIHtcblx0XHRcdGFsZXJ0KCdibGVlcCBibG9vcCBlcnJyb3JycicpXG5cdFx0fVxuXHRcdC8vIGdsLmJpbmRWZXJ0ZXhBcnJheShnbC5kZWZhdWx0VmFvKVxuXHR9XG5cblx0ZHJhdyhvZmZzOiBudW1iZXIgPSAwKSB7XG5cdFx0dGhpcy5kcmF3X3dpdGhfZXh0ZXJuYWxfc2hhZGVyKHRoaXMuc2hhZGVyKVxuXHR9XG59XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tICdzdHVmZidcbmltcG9ydCB7QnJ1c2hTdHJva2UsIEJydXNoVHlwZX0gZnJvbSAnYnJ1c2hfc3Ryb2tlJ1xuaW1wb3J0IHtjb3MsIGZsb29yLCBzaW59IGZyb20gJ3dtYXRoJ1xuaW1wb3J0IGVhcmN1dCBmcm9tICdlYXJjdXQnXG5pbXBvcnQgbGlidGVzcyBmcm9tICdsaWJ0ZXNzJ1xuaW1wb3J0IHtGcmFtZWJ1ZmZlcn0gZnJvbSAnZ2wvRnJhbWVidWZmZXInXG5pbXBvcnQge1RleHR1cmV9IGZyb20gJ2dsL1RleHR1cmUnXG5pbXBvcnQge1RoaW5nfSBmcm9tICdnbC9UaGluZydcbmNvbnN0IHRlc3N5ID0gKGZ1bmN0aW9uIGluaXRUZXNzZWxhdG9yKCkge1xuXHQvLyBmdW5jdGlvbiBjYWxsZWQgZm9yIGVhY2ggdmVydGV4IG9mIHRlc3NlbGF0b3Igb3V0cHV0XG5cdGZ1bmN0aW9uIHZlcnRleENhbGxiYWNrKGRhdGEsIHBvbHlWZXJ0QXJyYXkpIHtcblx0XHQvLyBjb25zb2xlLmxvZyhkYXRhWzBdLCBkYXRhWzFdKTtcblx0XHRwb2x5VmVydEFycmF5W3BvbHlWZXJ0QXJyYXkubGVuZ3RoXSA9IGRhdGFbMF1cblx0XHRwb2x5VmVydEFycmF5W3BvbHlWZXJ0QXJyYXkubGVuZ3RoXSA9IGRhdGFbMV1cblx0fVxuXHRmdW5jdGlvbiBiZWdpbmNhbGxiYWNrKHR5cGUpIHtcblx0XHRpZiAodHlwZSAhPT0gbGlidGVzcy5wcmltaXRpdmVUeXBlLkdMX1RSSUFOR0xFUykge1xuXHRcdFx0Y29uc29sZS5sb2coJ2V4cGVjdGVkIFRSSUFOR0xFUyBidXQgZ290IHR5cGU6ICcgKyB0eXBlKVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBlcnJvcmNhbGxiYWNrKGVycm5vKSB7XG5cdFx0Y29uc29sZS5sb2coJ2Vycm9yIGNhbGxiYWNrJylcblx0XHRjb25zb2xlLmxvZygnZXJyb3IgbnVtYmVyOiAnICsgZXJybm8pXG5cdH1cblx0Ly8gY2FsbGJhY2sgZm9yIHdoZW4gc2VnbWVudHMgaW50ZXJzZWN0IGFuZCBtdXN0IGJlIHNwbGl0XG5cdGZ1bmN0aW9uIGNvbWJpbmVjYWxsYmFjayhjb29yZHMsIGRhdGEsIHdlaWdodCkge1xuXHRcdC8vIGNvbnNvbGUubG9nKCdjb21iaW5lIGNhbGxiYWNrJyk7XG5cdFx0cmV0dXJuIFtjb29yZHNbMF0sIGNvb3Jkc1sxXSwgY29vcmRzWzJdXVxuXHR9XG5cdGZ1bmN0aW9uIGVkZ2VDYWxsYmFjayhmbGFnKSB7XG5cdFx0Ly8gZG9uJ3QgcmVhbGx5IGNhcmUgYWJvdXQgdGhlIGZsYWcsIGJ1dCBuZWVkIG5vLXN0cmlwL25vLWZhbiBiZWhhdmlvclxuXHRcdC8vIGNvbnNvbGUubG9nKCdlZGdlIGZsYWc6ICcgKyBmbGFnKTtcblx0fVxuXG5cdGNvbnN0IHRlc3N5ID0gbmV3IGxpYnRlc3MuR2x1VGVzc2VsYXRvcigpXG5cdC8vIHRlc3N5LmdsdVRlc3NQcm9wZXJ0eShsaWJ0ZXNzLmdsdUVudW0uR0xVX1RFU1NfV0lORElOR19SVUxFLCBsaWJ0ZXNzLndpbmRpbmdSdWxlLkdMVV9URVNTX1dJTkRJTkdfUE9TSVRJVkUpO1xuXHR0ZXNzeS5nbHVUZXNzQ2FsbGJhY2sobGlidGVzcy5nbHVFbnVtLkdMVV9URVNTX1ZFUlRFWF9EQVRBLCB2ZXJ0ZXhDYWxsYmFjaylcblx0dGVzc3kuZ2x1VGVzc0NhbGxiYWNrKGxpYnRlc3MuZ2x1RW51bS5HTFVfVEVTU19CRUdJTiwgYmVnaW5jYWxsYmFjaylcblx0dGVzc3kuZ2x1VGVzc0NhbGxiYWNrKGxpYnRlc3MuZ2x1RW51bS5HTFVfVEVTU19FUlJPUiwgZXJyb3JjYWxsYmFjaylcblx0dGVzc3kuZ2x1VGVzc0NhbGxiYWNrKGxpYnRlc3MuZ2x1RW51bS5HTFVfVEVTU19DT01CSU5FLCBjb21iaW5lY2FsbGJhY2spXG5cdHRlc3N5LmdsdVRlc3NDYWxsYmFjayhsaWJ0ZXNzLmdsdUVudW0uR0xVX1RFU1NfRURHRV9GTEFHLCBlZGdlQ2FsbGJhY2spXG5cblx0cmV0dXJuIHRlc3N5XG59KSgpXG5cbmZ1bmN0aW9uIHRyaWFuZ3VsYXRlKGNvbnRvdXJzKSB7XG5cdC8vIGxpYnRlc3Mgd2lsbCB0YWtlIDNkIHZlcnRzIGFuZCBmbGF0dGVuIHRvIGEgcGxhbmUgZm9yIHRlc3NlbGF0aW9uXG5cdC8vIHNpbmNlIG9ubHkgZG9pbmcgMmQgdGVzc2VsYXRpb24gaGVyZSwgcHJvdmlkZSB6PTEgbm9ybWFsIHRvIHNraXBcblx0Ly8gaXRlcmF0aW5nIG92ZXIgdmVydHMgb25seSB0byBnZXQgdGhlIHNhbWUgYW5zd2VyLlxuXHQvLyBjb21tZW50IG91dCB0byB0ZXN0IG5vcm1hbC1nZW5lcmF0aW9uIGNvZGVcblx0dGVzc3kuZ2x1VGVzc05vcm1hbCgwLCAwLCAxKVxuXG5cdGNvbnN0IHRyaWFuZ2xlVmVydHMgPSBbXVxuXHR0ZXNzeS5nbHVUZXNzQmVnaW5Qb2x5Z29uKHRyaWFuZ2xlVmVydHMpXG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb250b3Vycy5sZW5ndGg7IGkrKykge1xuXHRcdHRlc3N5LmdsdVRlc3NCZWdpbkNvbnRvdXIoKVxuXHRcdGxldCBjb250b3VyID0gY29udG91cnNbaV1cblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbnRvdXIubGVuZ3RoOyBqICs9IDIpIHtcblx0XHRcdGNvbnN0IGNvb3JkcyA9IFtjb250b3VyW2pdLCBjb250b3VyW2ogKyAxXSwgMF1cblx0XHRcdHRlc3N5LmdsdVRlc3NWZXJ0ZXgoY29vcmRzLCBjb29yZHMpXG5cdFx0fVxuXHRcdHRlc3N5LmdsdVRlc3NFbmRDb250b3VyKClcblx0fVxuXG5cdC8vIGZpbmlzaCBwb2x5Z29uIChhbmQgdGltZSB0cmlhbmd1bGF0aW9uIHByb2Nlc3MpXG5cdC8vIGNvbnN0IHN0YXJ0VGltZSA9IHdpbmRvdy5ub3dpc2goKVxuXHR0ZXNzeS5nbHVUZXNzRW5kUG9seWdvbigpXG5cdC8vIGNvbnN0IGVuZFRpbWUgPSB3aW5kb3cubm93aXNoKClcblx0Ly8gY29uc29sZS5sb2coJ3Rlc3NlbGF0aW9uIHRpbWU6ICcgKyAoZW5kVGltZSAtIHN0YXJ0VGltZSkudG9GaXhlZCgyKSArICdtcycpXG5cblx0cmV0dXJuIHRyaWFuZ2xlVmVydHNcbn1cblxuY29uc3QgZ2V0X3N1YmFycmF5ID0gKGFycjogRmxvYXQzMkFycmF5LCBvZmZzX2JlZ2luOiBudW1iZXIsIG9mZnNfZW5kOiBudW1iZXIpOiBbRmxvYXQzMkFycmF5LCBudW1iZXJdID0+IHtcblx0cmV0dXJuIFthcnIuc3ViYXJyYXkob2Zmc19iZWdpbiwgb2Zmc19lbmQpLCBvZmZzX2VuZCAtIDFdXG59XG5cbmNvbnN0IGdldF9jaXJjX3Bvc19mcm9tX2FuZyA9IChhOiBudW1iZXIpID0+IHtcblx0Y29uc3QgYyA9IGNvcygtYSlcblx0Y29uc3QgcyA9IHNpbigtYSlcblx0cmV0dXJuIFtjLCBzXVxufVxuXG5sZXQgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHRcbmV4cG9ydCBjbGFzcyBEcmF3ZXIge1xuXHRjYW52YXNfdGV4OiBUZXh0dXJlXG5cdGRlZmF1bHRfZnJhbWVidWZmZXI6IEZyYW1lYnVmZmVyXG5cdC8vIEB0cy1pZ25vcmVcblx0YnJ1c2hfYnVmZmVyOiBUaGluZ1xuXHR6b29tOiBudW1iZXIgPSAwXG5cdHBhbm5pbmc6IG51bWJlcltdID0gWzAsIDBdXG5cdHQ6IG51bWJlciA9IDBcblx0aWR4OiBudW1iZXIgPSAwXG5cdHRlbXBfYXJyYXlfYTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxXzAwMF8wMClcblx0dGVtcF9hcnJheV9iOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDFfMDAwXzAwKVxuXG5cdHJlY29yZGVkX2RyYXdjYWxsczogbnVtYmVyW10gPSBbXVxuXG5cdGNvbnN0cnVjdG9yKF9nbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCwgY2FudmFzX3RleDogVGV4dHVyZSwgZGVmYXVsdF9mcmFtZWJ1ZmZlcjogRnJhbWVidWZmZXIpIHtcblx0XHR0aGlzLmNhbnZhc190ZXggPSBjYW52YXNfdGV4XG5cdFx0dGhpcy5kZWZhdWx0X2ZyYW1lYnVmZmVyID0gZGVmYXVsdF9mcmFtZWJ1ZmZlclxuXHRcdGdsID0gX2dsXG5cdH1cblxuXHRyZXNldCgpIHtcblx0XHR0aGlzLmlkeCA9IDBcblx0XHR0aGlzLnJlY29yZGVkX2RyYXdjYWxscy5sZW5ndGggPSAwXG5cdFx0Ly8gdGhpcy5yZWNvcmRlZF9kcmF3Y2FsbHMgPSBbXVxuXHRcdHRoaXMuYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnN6ID0gMFxuXHRcdHRoaXMuYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnN6ID0gMFxuXHR9XG5cblx0ZmlsbF9idWZmX2Zvcl9ibG9iX2JydXNoKHN0cm9rZTogQnJ1c2hTdHJva2UpIHtcblx0XHRjb25zdCBicnVzaF9idWZmZXIgPSB0aGlzLmJydXNoX2J1ZmZlclxuXHRcdGNvbnN0IGl0ZXJzID0gc3Ryb2tlLnBvc2l0aW9ucy5sZW5ndGggLyAyIC0gMVxuXHRcdC8vIGxldCBhc3BlY3RfY29ycmVjdGlvbiA9IFV0aWxzLnNjcmVlbl9ORENfdG9fY2FudmFzX05EQyhcblx0XHQvLyBcdFsxLCAxXSxcblx0XHQvLyBcdHRoaXMuZGVmYXVsdF9mcmFtZWJ1ZmZlci50ZXh0dXJlc1swXSxcblx0XHQvLyBcdHRoaXMuY2FudmFzX3RleCxcblx0XHQvLyBcdDEsXG5cdFx0Ly8gXHRbMCwgMF0sXG5cdFx0Ly8gKVxuXHRcdC8vIGFzcGVjdF9jb3JyZWN0aW9uWzBdID0gYXNwZWN0X2NvcnJlY3Rpb25bMF1cblx0XHQvLyBhc3BlY3RfY29ycmVjdGlvblsxXSA9IGFzcGVjdF9jb3JyZWN0aW9uWzFdXG5cblx0XHRsZXQgYXNwZWN0X2NvcnJlY3Rpb24gPSBbMCwgMF1cblx0XHRpZiAodGhpcy5jYW52YXNfdGV4LnJlc1swXSA+IHRoaXMuY2FudmFzX3RleC5yZXNbMV0pIHtcblx0XHRcdGFzcGVjdF9jb3JyZWN0aW9uWzBdID0gdGhpcy5jYW52YXNfdGV4LnJlc1sxXSAvIHRoaXMuY2FudmFzX3RleC5yZXNbMF1cblx0XHRcdGFzcGVjdF9jb3JyZWN0aW9uWzFdID0gMVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRhc3BlY3RfY29ycmVjdGlvblswXSA9IDFcblx0XHRcdGFzcGVjdF9jb3JyZWN0aW9uWzFdID0gdGhpcy5jYW52YXNfdGV4LnJlc1swXSAvIHRoaXMuY2FudmFzX3RleC5yZXNbMV1cblx0XHR9XG5cblx0XHRjb25zdCBhZGRfYW5nX3RvX3BvcyA9IChcblx0XHRcdHBvczogbnVtYmVyW10sXG5cdFx0XHRhbmdfeDogbnVtYmVyW10sXG5cdFx0XHRhbmdfeTogbnVtYmVyW10sXG5cdFx0XHRwb3NpdGl2ZTogYm9vbGVhbixcblx0XHRcdHN6X3g6IG51bWJlcixcblx0XHRcdHN6X3k6IG51bWJlcixcblx0XHQpOiBudW1iZXJbXSA9PiB7XG5cdFx0XHRpZiAocG9zaXRpdmUpIHtcblx0XHRcdFx0cG9zWzBdICs9IGFuZ194WzBdICogc3pfeCAqIGFzcGVjdF9jb3JyZWN0aW9uWzBdXG5cdFx0XHRcdHBvc1sxXSArPSBhbmdfeFsxXSAqIHN6X3ggKiBhc3BlY3RfY29ycmVjdGlvblsxXVxuXHRcdFx0XHRwb3NbMF0gKz0gYW5nX3lbMF0gKiBzel95ICogYXNwZWN0X2NvcnJlY3Rpb25bMF1cblx0XHRcdFx0cG9zWzFdICs9IGFuZ195WzFdICogc3pfeSAqIGFzcGVjdF9jb3JyZWN0aW9uWzFdXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3NbMF0gLT0gYW5nX3hbMF0gKiBzel94ICogYXNwZWN0X2NvcnJlY3Rpb25bMF1cblx0XHRcdFx0cG9zWzFdIC09IGFuZ194WzFdICogc3pfeCAqIGFzcGVjdF9jb3JyZWN0aW9uWzFdXG5cdFx0XHRcdHBvc1swXSArPSBhbmdfeVswXSAqIHN6X3kgKiBhc3BlY3RfY29ycmVjdGlvblswXVxuXHRcdFx0XHRwb3NbMV0gKz0gYW5nX3lbMV0gKiBzel95ICogYXNwZWN0X2NvcnJlY3Rpb25bMV1cblx0XHRcdH1cblx0XHRcdHJldHVybiBwb3Ncblx0XHR9XG5cblx0XHRsZXQgaWR4ID0gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnN6XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyczsgaSsrKSB7XG5cdFx0XHRsZXQgc3pfeCA9IHN0cm9rZS5zaXplc1tpICogMl0gLyAyXG5cdFx0XHRsZXQgc3pfeSA9IHN0cm9rZS5zaXplc1tpICogMiArIDFdIC8gMlxuXHRcdFx0Ly8gbGV0IG5leHRfc3ogPSBicnVzaF9zdHJva2Uuc2l6ZXNbaSAqIDIgKyAyXVxuXG5cdFx0XHRsZXQgYW5nX3ggPSBnZXRfY2lyY19wb3NfZnJvbV9hbmcoc3Ryb2tlLnJvdGF0aW9uc1tpICogMiArIDFdKVxuXHRcdFx0bGV0IGFuZ195ID0gW2FuZ194WzFdLCAtYW5nX3hbMF1dXG5cdFx0XHQvLyBsZXQgbmV4dF9hbmcgPSBnZXRfY2lyY19wb3NfZnJvbV9hbmcoYnJ1c2hfc3Ryb2tlLnJvdGF0aW9uc1tpICogMiArIDNdKVxuXHRcdFx0Ly8gbGV0IG5leHRfYW5nX2IgPSBbY3Vycl9hbmdbMV0sLWN1cnJfYW5nWzBdXVxuXG5cdFx0XHRsZXQgY3Vycl9wb3MgPSBbc3Ryb2tlLnBvc2l0aW9uc1tpICogMl0sIHN0cm9rZS5wb3NpdGlvbnNbaSAqIDIgKyAxXV1cblx0XHRcdC8vIGN1cnJfcG9zWzBdICs9IG9mZnNfeFxuXHRcdFx0Ly8gY3Vycl9wb3NbMV0gKz0gb2Zmc195XG5cdFx0XHQvLyBsZXQgbmV4dF9wb3MgPSBbYnJ1c2hfc3Ryb2tlLnBvc2l0aW9uc1tpICogMiArIDJdLCBicnVzaF9zdHJva2UucG9zaXRpb25zW2kgKiAyICsgM11dXG5cblx0XHRcdGxldCBjdXJyX3Bvc19sZWZ0ID0gYWRkX2FuZ190b19wb3MoWy4uLmN1cnJfcG9zXSwgYW5nX3gsIGFuZ195LCB0cnVlLCBzel94LCBzel95KVxuXHRcdFx0bGV0IGN1cnJfcG9zX3JpZ2h0ID0gYWRkX2FuZ190b19wb3MoWy4uLmN1cnJfcG9zXSwgYW5nX3gsIGFuZ195LCBmYWxzZSwgc3pfeCwgc3pfeSlcblxuXHRcdFx0bGV0IG5leHRfcG9zX2xlZnQgPSBbLi4uY3Vycl9wb3NfbGVmdF1cblx0XHRcdGxldCBuZXh0X3Bvc19yaWdodCA9IFsuLi5jdXJyX3Bvc19yaWdodF1cblxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0gT0ZGU1xuXHRcdFx0bmV4dF9wb3NfbGVmdFswXSAtPSBhbmdfeVswXSAqIHN6X3kgKiBhc3BlY3RfY29ycmVjdGlvblswXSAqIDJcblx0XHRcdG5leHRfcG9zX2xlZnRbMV0gLT0gYW5nX3lbMV0gKiBzel95ICogYXNwZWN0X2NvcnJlY3Rpb25bMV0gKiAyXG5cdFx0XHRuZXh0X3Bvc19yaWdodFswXSAtPSBhbmdfeVswXSAqIHN6X3kgKiBhc3BlY3RfY29ycmVjdGlvblswXSAqIDJcblx0XHRcdG5leHRfcG9zX3JpZ2h0WzFdIC09IGFuZ195WzFdICogc3pfeSAqIGFzcGVjdF9jb3JyZWN0aW9uWzFdICogMlxuXHRcdFx0Ly8gcG9zWzFdICs9IChhbmdfb2Zmc19iWzFdICogYW10X2IpIC8gYXNwZWN0X2NvcnJlY3Rpb25bMV1cblxuXHRcdFx0bGV0IGN1cnJfY29sID0gW3N0cm9rZS5jb2xvdXJzW2kgKiAzXSwgc3Ryb2tlLmNvbG91cnNbaSAqIDMgKyAxXSwgc3Ryb2tlLmNvbG91cnNbaSAqIDMgKyAyXV1cblx0XHRcdGxldCBjdXJyX29wYWNpdHkgPSBzdHJva2Uub3BhY2l0aWVzW2ldXG5cblx0XHRcdGNvbnN0IGN1cnJfdiA9IGkgLyBpdGVyc1xuXHRcdFx0Y29uc3QgbmV4dF92ID0gKGkgKyAxKSAvIGl0ZXJzXG5cblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1swXS5wdXNoX3ZlcnQoWy4uLmN1cnJfcG9zX2xlZnQsIDAsIGN1cnJfdl0pXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMV0ucHVzaF92ZXJ0KFsuLi5jdXJyX2NvbCwgY3Vycl9vcGFjaXR5XSlcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gY3Vycl9wb3NfbGVmdFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfcG9zX2xlZnRbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAwXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMFxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfb3BhY2l0eVxuXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFsuLi5jdXJyX3Bvc19yaWdodCwgMSwgY3Vycl92XSlcblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1sxXS5wdXNoX3ZlcnQoWy4uLmN1cnJfY29sLCBjdXJyX29wYWNpdHldKVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBjdXJyX3Bvc19yaWdodFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfcG9zX3JpZ2h0WzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzJdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IDBcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX29wYWNpdHlcblxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnB1c2hfdmVydChbLi4ubmV4dF9wb3NfbGVmdCwgMCwgbmV4dF92XSlcblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1sxXS5wdXNoX3ZlcnQoWy4uLmN1cnJfY29sLCBjdXJyX29wYWNpdHldKVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBuZXh0X3Bvc19sZWZ0WzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gbmV4dF9wb3NfbGVmdFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IDBcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFsyXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAxXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9vcGFjaXR5XG5cblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1swXS5wdXNoX3ZlcnQoWy4uLmN1cnJfcG9zX3JpZ2h0LCAxLCBjdXJyX3ZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbLi4uY3Vycl9jb2wsIGN1cnJfb3BhY2l0eV0pXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfcG9zX3JpZ2h0WzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gY3Vycl9wb3NfcmlnaHRbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAxXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMFxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfb3BhY2l0eVxuXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFsuLi5uZXh0X3Bvc19sZWZ0LCAwLCBuZXh0X3ZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbLi4uY3Vycl9jb2wsIGN1cnJfb3BhY2l0eV0pXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IG5leHRfcG9zX2xlZnRbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBuZXh0X3Bvc19sZWZ0WzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMFxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzJdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IDFcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX29wYWNpdHlcblxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnB1c2hfdmVydChbLi4ubmV4dF9wb3NfcmlnaHQsIDEsIG5leHRfdl0pXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMV0ucHVzaF92ZXJ0KFsuLi5jdXJyX2NvbCwgY3Vycl9vcGFjaXR5XSlcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gbmV4dF9wb3NfcmlnaHRbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBuZXh0X3Bvc19yaWdodFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IDFcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFsyXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAxXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9vcGFjaXR5XG5cdFx0fVxuXHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5zeiArPSBpdGVycyAqIDYgKiA0XG5cdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnN6ICs9IGl0ZXJzICogNiAqIDRcblx0XHR0aGlzLnJlY29yZGVkX2RyYXdjYWxscy5wdXNoKHRoaXMuYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnN6KVxuXHR9XG5cblx0ZmlsbF9idWZmX2Zvcl9sb25nX2JydXNoKHN0cm9rZTogQnJ1c2hTdHJva2UpIHtcblx0XHRjb25zdCBicnVzaF9idWZmZXIgPSB0aGlzLmJydXNoX2J1ZmZlclxuXHRcdGNvbnN0IGl0ZXJzID0gc3Ryb2tlLnBvc2l0aW9ucy5sZW5ndGggLyAyIC0gMVxuXHRcdGxldCBhc3BlY3RfY29ycmVjdGlvbiA9IFswLCAwXVxuXHRcdGlmICh0aGlzLmNhbnZhc190ZXgucmVzWzBdID4gdGhpcy5jYW52YXNfdGV4LnJlc1sxXSkge1xuXHRcdFx0YXNwZWN0X2NvcnJlY3Rpb25bMF0gPSB0aGlzLmNhbnZhc190ZXgucmVzWzFdIC8gdGhpcy5jYW52YXNfdGV4LnJlc1swXVxuXHRcdFx0YXNwZWN0X2NvcnJlY3Rpb25bMV0gPSAxXG5cdFx0fSBlbHNlIHtcblx0XHRcdGFzcGVjdF9jb3JyZWN0aW9uWzBdID0gMVxuXHRcdFx0YXNwZWN0X2NvcnJlY3Rpb25bMV0gPSB0aGlzLmNhbnZhc190ZXgucmVzWzBdIC8gdGhpcy5jYW52YXNfdGV4LnJlc1sxXVxuXHRcdH1cblxuXHRcdGNvbnN0IGFkZF9hbmdfdG9fcG9zID0gKFxuXHRcdFx0cG9zOiBudW1iZXJbXSxcblx0XHRcdGFuZ19vZmZzOiBudW1iZXJbXSxcblx0XHRcdHBvc2l0aXZlOiBib29sZWFuLFxuXHRcdFx0YW10OiBudW1iZXIsXG5cdFx0XHRhc3BlY3RfY29ycmVjdGlvbjogbnVtYmVyW10sXG5cdFx0KTogbnVtYmVyW10gPT4ge1xuXHRcdFx0aWYgKHBvc2l0aXZlKSB7XG5cdFx0XHRcdHBvc1swXSArPSBhbmdfb2Zmc1swXSAqIGFtdCAqIGFzcGVjdF9jb3JyZWN0aW9uWzBdXG5cdFx0XHRcdHBvc1sxXSArPSBhbmdfb2Zmc1sxXSAqIGFtdCAqIGFzcGVjdF9jb3JyZWN0aW9uWzFdXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3NbMF0gLT0gYW5nX29mZnNbMF0gKiBhbXQgKiBhc3BlY3RfY29ycmVjdGlvblswXVxuXHRcdFx0XHRwb3NbMV0gLT0gYW5nX29mZnNbMV0gKiBhbXQgKiBhc3BlY3RfY29ycmVjdGlvblsxXVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBvc1xuXHRcdH1cblxuXHRcdGxldCBpZHggPSBicnVzaF9idWZmZXIuYnVmZnNbMF0uc3pcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcnM7IGkrKykge1xuXHRcdFx0Ly8gI2RlZmluZSByb3QoYSkgbWF0Mihjb3MoYSksLXNpbihhKSxzaW4oYSksY29zKGEpKVxuXHRcdFx0Ly8gYnJ1c2hfc3Ryb2tlLlxuXHRcdFx0bGV0IGN1cnJfc3ogPSBzdHJva2Uuc2l6ZXNbaSAqIDJdXG5cdFx0XHRsZXQgbmV4dF9zeiA9IHN0cm9rZS5zaXplc1tpICogMiArIDJdXG5cblx0XHRcdGxldCBjdXJyX2FuZyA9IGdldF9jaXJjX3Bvc19mcm9tX2FuZyhzdHJva2Uucm90YXRpb25zW2kgKiAyICsgMV0pXG5cdFx0XHRsZXQgbmV4dF9hbmcgPSBnZXRfY2lyY19wb3NfZnJvbV9hbmcoc3Ryb2tlLnJvdGF0aW9uc1tpICogMiArIDNdKVxuXG5cdFx0XHRsZXQgY3Vycl9wb3MgPSBbc3Ryb2tlLnBvc2l0aW9uc1tpICogMl0sIHN0cm9rZS5wb3NpdGlvbnNbaSAqIDIgKyAxXV1cblx0XHRcdGxldCBuZXh0X3BvcyA9IFtzdHJva2UucG9zaXRpb25zW2kgKiAyICsgMl0sIHN0cm9rZS5wb3NpdGlvbnNbaSAqIDIgKyAzXV1cblxuXHRcdFx0bGV0IGN1cnJfcG9zX2xlZnQgPSBhZGRfYW5nX3RvX3BvcyhbLi4uY3Vycl9wb3NdLCBjdXJyX2FuZywgdHJ1ZSwgY3Vycl9zeiwgYXNwZWN0X2NvcnJlY3Rpb24pXG5cdFx0XHRsZXQgY3Vycl9wb3NfcmlnaHQgPSBhZGRfYW5nX3RvX3BvcyhbLi4uY3Vycl9wb3NdLCBjdXJyX2FuZywgZmFsc2UsIGN1cnJfc3osIGFzcGVjdF9jb3JyZWN0aW9uKVxuXG5cdFx0XHRsZXQgbmV4dF9wb3NfbGVmdCA9IGFkZF9hbmdfdG9fcG9zKFsuLi5uZXh0X3Bvc10sIG5leHRfYW5nLCB0cnVlLCBuZXh0X3N6LCBhc3BlY3RfY29ycmVjdGlvbilcblx0XHRcdGxldCBuZXh0X3Bvc19yaWdodCA9IGFkZF9hbmdfdG9fcG9zKFsuLi5uZXh0X3Bvc10sIG5leHRfYW5nLCBmYWxzZSwgbmV4dF9zeiwgYXNwZWN0X2NvcnJlY3Rpb24pXG5cblx0XHRcdGxldCBjdXJyX2NvbCA9IFtzdHJva2UuY29sb3Vyc1tpICogM10sIHN0cm9rZS5jb2xvdXJzW2kgKiAzICsgMV0sIHN0cm9rZS5jb2xvdXJzW2kgKiAzICsgMl1dXG5cdFx0XHRsZXQgY3Vycl9vcGFjaXR5ID0gc3Ryb2tlLm9wYWNpdGllc1tpXVxuXG5cdFx0XHRsZXQgbmV4dF9jb2wgPSBbc3Ryb2tlLmNvbG91cnNbaSAqIDMgKyAzXSwgc3Ryb2tlLmNvbG91cnNbaSAqIDMgKyA0XSwgc3Ryb2tlLmNvbG91cnNbaSAqIDMgKyA1XV1cblx0XHRcdGxldCBuZXh0X29wYWNpdHkgPSBzdHJva2Uub3BhY2l0aWVzW2kgKyAxXVxuXG5cdFx0XHRjb25zdCBjdXJyX3YgPSBpIC8gaXRlcnNcblx0XHRcdGNvbnN0IG5leHRfdiA9IChpICsgMSkgLyBpdGVyc1xuXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFsuLi5jdXJyX3Bvc19sZWZ0LCAwLCBjdXJyX3ZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbLi4uY3Vycl9jb2wsIGN1cnJfb3BhY2l0eV0pXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfcG9zX2xlZnRbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBjdXJyX3Bvc19sZWZ0WzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMFxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzJdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfdlxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfb3BhY2l0eVxuXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFsuLi5jdXJyX3Bvc19yaWdodCwgMSwgY3Vycl92XSlcblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1sxXS5wdXNoX3ZlcnQoWy4uLmN1cnJfY29sLCBjdXJyX29wYWNpdHldKVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBjdXJyX3Bvc19yaWdodFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfcG9zX3JpZ2h0WzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfY29sWzJdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfdlxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGN1cnJfb3BhY2l0eVxuXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFsuLi5uZXh0X3Bvc19sZWZ0LCAwLCBuZXh0X3ZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbLi4ubmV4dF9jb2wsIG5leHRfb3BhY2l0eV0pXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IG5leHRfcG9zX2xlZnRbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBuZXh0X2NvbFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBuZXh0X3Bvc19sZWZ0WzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gbmV4dF9jb2xbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMFxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IG5leHRfY29sWzJdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IG5leHRfdlxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IG5leHRfb3BhY2l0eVxuXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFsuLi5jdXJyX3Bvc19yaWdodCwgMSwgY3Vycl92XSlcblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1sxXS5wdXNoX3ZlcnQoWy4uLmN1cnJfY29sLCBjdXJyX29wYWNpdHldKVxuXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGN1cnJfcG9zX3JpZ2h0WzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gY3Vycl9wb3NfcmlnaHRbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjdXJyX2NvbFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAxXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9jb2xbMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gY3Vycl92XG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY3Vycl9vcGFjaXR5XG5cblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1swXS5wdXNoX3ZlcnQoWy4uLm5leHRfcG9zX2xlZnQsIDAsIG5leHRfdl0pXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMV0ucHVzaF92ZXJ0KFsuLi5uZXh0X2NvbCwgbmV4dF9vcGFjaXR5XSlcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gbmV4dF9wb3NfbGVmdFswXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IG5leHRfY29sWzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IG5leHRfcG9zX2xlZnRbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBuZXh0X2NvbFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAwXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gbmV4dF9jb2xbMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gbmV4dF92XG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gbmV4dF9vcGFjaXR5XG5cblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1swXS5wdXNoX3ZlcnQoWy4uLm5leHRfcG9zX3JpZ2h0LCAxLCBuZXh0X3ZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbLi4ubmV4dF9jb2wsIG5leHRfb3BhY2l0eV0pXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IG5leHRfcG9zX3JpZ2h0WzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gbmV4dF9jb2xbMF1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gbmV4dF9wb3NfcmlnaHRbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBuZXh0X2NvbFsxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAxXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gbmV4dF9jb2xbMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gbmV4dF92XG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gbmV4dF9vcGFjaXR5XG5cdFx0fVxuXHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5zeiArPSBpdGVycyAqIDYgKiA0XG5cdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnN6ICs9IGl0ZXJzICogNiAqIDRcblx0XHR0aGlzLnJlY29yZGVkX2RyYXdjYWxscy5wdXNoKHRoaXMuYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnN6KVxuXHR9XG5cdGZpbGxfYnVmZl9mb3JfdHJpYW5ndWxhdGVkX2JydXNoKHN0cm9rZTogQnJ1c2hTdHJva2UpIHtcblx0XHRjb25zdCBicnVzaF9idWZmZXIgPSB0aGlzLmJydXNoX2J1ZmZlclxuXHRcdGNvbnN0IHtjb2xvdXJzLCBvcGFjaXRpZXMsIHBvc2l0aW9uc30gPSBzdHJva2Vcblx0XHQvLyBsZXQgcG9zaXRpb25zID0gWy4uLnN0cm9rZS5wb3NpdGlvbnNdXG5cdFx0Ly8gY29uc3QgW25ld190cmlhbmdsZXMsIG9mZnNdID0gZ2V0X3N1YmFycmF5KHRoaXMudGVtcF9hcnJheV9hLCAwLCBwb3NpdGlvbnMubGVuZ3RoICogMylcblx0XHQvLyBjb25zdCBbbmV3X2NvbHNdID0gZ2V0X3N1YmFycmF5KHRoaXMudGVtcF9hcnJheV9hLCBvZmZzLCBvZmZzICsgKHBvc2l0aW9ucy5sZW5ndGggLyAyKSAqIDMgKiA0KVxuXHRcdGNvbnN0IGl0ZXJzID0gcG9zaXRpb25zLmxlbmd0aCAvIDIgLSAxXG5cdFx0bGV0IGlkeCA9IGJydXNoX2J1ZmZlci5idWZmc1swXS5zelxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcnM7IGkrKykge1xuXHRcdFx0bGV0IHUgPSAwXG5cdFx0XHRsZXQgdiA9IDBcblx0XHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1sxXS5wdXNoX3ZlcnQoWy4uLmN1cnJfY29sLCBjdXJyX29wYWNpdHldKVxuXG5cdFx0XHQvLyBuZXdfdHJpYW5nbGVzW2kgKiAzICogMl0gPSBwb3NpdGlvbnNbMF1cblx0XHRcdC8vIG5ld190cmlhbmdsZXNbaSAqIDMgKiAyICsgMV0gPSBwb3NpdGlvbnNbMCArIDFdXG5cdFx0XHQvLyBuZXdfY29sc1tpICogMyAqIDRdID0gc3Ryb2tlLmNvbG91cnNbMF1cblx0XHRcdC8vIG5ld19jb2xzW2kgKiAzICogNCArIDFdID0gc3Ryb2tlLmNvbG91cnNbMV1cblx0XHRcdC8vIG5ld19jb2xzW2kgKiAzICogNCArIDJdID0gc3Ryb2tlLmNvbG91cnNbMl1cblx0XHRcdC8vIG5ld19jb2xzW2kgKiAzICogNCArIDNdID0gc3Ryb2tlLm9wYWNpdGllc1swXVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnB1c2hfdmVydChbcG9zaXRpb25zWzBdLCBwb3NpdGlvbnNbMV0sIHUsIHZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbY29sb3Vyc1swXSwgY29sb3Vyc1sxXSwgY29sb3Vyc1syXSwgb3BhY2l0aWVzWzFdXSlcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gcG9zaXRpb25zWzBdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY29sb3Vyc1swXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBwb3NpdGlvbnNbMV1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjb2xvdXJzWzFdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IGkgLyAoaXRlcnMgKyAxKVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGNvbG91cnNbMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMFxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IG9wYWNpdGllc1sxXVxuXG5cdFx0XHQvLyBuZXdfdHJpYW5nbGVzW2kgKiAzICogMiArIDJdID0gcG9zaXRpb25zW2kgKiAyXVxuXHRcdFx0Ly8gbmV3X3RyaWFuZ2xlc1tpICogMyAqIDIgKyAzXSA9IHBvc2l0aW9uc1tpICogMiArIDFdXG5cdFx0XHQvLyBuZXdfY29sc1tpICogMyAqIDQgKyA0XSA9IHN0cm9rZS5jb2xvdXJzW2kgKiAzXVxuXHRcdFx0Ly8gbmV3X2NvbHNbaSAqIDMgKiA0ICsgNV0gPSBzdHJva2UuY29sb3Vyc1tpICogMyArIDFdXG5cdFx0XHQvLyBuZXdfY29sc1tpICogMyAqIDQgKyA2XSA9IHN0cm9rZS5jb2xvdXJzW2kgKiAzICsgMl1cblx0XHRcdC8vIG5ld19jb2xzW2kgKiAzICogNCArIDddID0gc3Ryb2tlLm9wYWNpdGllc1tpXVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnB1c2hfdmVydChbcG9zaXRpb25zW2kgKiAyXSwgcG9zaXRpb25zW2kgKiAyICsgMV0sIHUsIHZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbY29sb3Vyc1tpICogM10sIGNvbG91cnNbaSAqIDMgKyAxXSwgY29sb3Vyc1tpICogMyArIDJdLCBvcGFjaXRpZXNbaV1dKVxuXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IHBvc2l0aW9uc1tpICogMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjb2xvdXJzW2kgKiAzXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBwb3NpdGlvbnNbaSAqIDIgKyAxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGNvbG91cnNbaSAqIDMgKyAxXVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSBpIC8gKGl0ZXJzICsgMSlcblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5jcHVfYnVmZltpZHgrK10gPSBjb2xvdXJzW2kgKiAzICsgMl1cblx0XHRcdGJydXNoX2J1ZmZlci5idWZmc1swXS5jcHVfYnVmZltpZHhdID0gMVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IG9wYWNpdGllc1tpXVxuXG5cdFx0XHQvLyBuZXdfdHJpYW5nbGVzW2kgKiAzICogMiArIDRdID0gcG9zaXRpb25zW2kgKiAyICsgMl1cblx0XHRcdC8vIG5ld190cmlhbmdsZXNbaSAqIDMgKiAyICsgNV0gPSBwb3NpdGlvbnNbaSAqIDIgKyAzXVxuXHRcdFx0Ly8gbmV3X2NvbHNbaSAqIDMgKiA0ICsgOF0gPSBzdHJva2UuY29sb3Vyc1tpICogMyArIDNdXG5cdFx0XHQvLyBuZXdfY29sc1tpICogMyAqIDQgKyA5XSA9IHN0cm9rZS5jb2xvdXJzW2kgKiAzICsgNF1cblx0XHRcdC8vIG5ld19jb2xzW2kgKiAzICogNCArIDEwXSA9IHN0cm9rZS5jb2xvdXJzW2kgKiAzICsgNV1cblx0XHRcdC8vIG5ld19jb2xzW2kgKiAzICogNCArIDExXSA9IHN0cm9rZS5vcGFjaXRpZXNbaSArIDFdXG5cdFx0XHQvLyBicnVzaF9idWZmZXIuYnVmZnNbMF0ucHVzaF92ZXJ0KFtwb3NpdGlvbnNbaSAqIDIgKyAyXSwgcG9zaXRpb25zW2kgKiAyICsgM10sIHUsIHZdKVxuXHRcdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLnB1c2hfdmVydChbY29sb3Vyc1tpICogMyArIDNdLCBjb2xvdXJzW2kgKiAzICsgNF0sIGNvbG91cnNbaSAqIDMgKyA1XSwgb3BhY2l0aWVzW2kgKyAxXV0pXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IHBvc2l0aW9uc1tpICogMiArIDJdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY29sb3Vyc1tpICogMyArIDNdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IHBvc2l0aW9uc1tpICogMiArIDNdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gY29sb3Vyc1tpICogMyArIDRdXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uY3B1X2J1ZmZbaWR4XSA9IChpICsgMSkgLyAoaXRlcnMgKyAxKVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzFdLmNwdV9idWZmW2lkeCsrXSA9IGNvbG91cnNbaSAqIDMgKyA1XVxuXHRcdFx0YnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLmNwdV9idWZmW2lkeF0gPSAxXG5cdFx0XHRicnVzaF9idWZmZXIuYnVmZnNbMV0uY3B1X2J1ZmZbaWR4KytdID0gb3BhY2l0aWVzW2kgKyAxXVxuXHRcdH1cblx0XHRicnVzaF9idWZmZXIuYnVmZnNbMF0uc3ogKz0gaXRlcnMgKiAzICogNFxuXHRcdGJydXNoX2J1ZmZlci5idWZmc1sxXS5zeiArPSBpdGVycyAqIDMgKiA0XG5cdFx0Ly8gYnJ1c2hfYnVmZmVyLmJ1ZmZzWzBdLnVwbG9hZF9leHRlcm5hbF9hcnJheShuZXdfdHJpYW5nbGVzKVxuXHRcdC8vIGJydXNoX2J1ZmZlci5idWZmc1sxXS51cGxvYWRfZXh0ZXJuYWxfYXJyYXkobmV3X2NvbHMpXG5cdFx0dGhpcy5yZWNvcmRlZF9kcmF3Y2FsbHMucHVzaCh0aGlzLmJydXNoX2J1ZmZlci5idWZmc1swXS5zeilcblx0fVxuXG5cdHB1c2hfYW55X3N0cm9rZShzdHJva2U6IEJydXNoU3Ryb2tlKSB7XG5cdFx0Ly8gY29uc29sZS5sb2coJ1NUQVJUIFBVU0hJTkcnKVxuXHRcdC8vIGNvbnNvbGUudGltZSgnU0lOR0xFIFNUUk9LRScpXG5cdFx0aWYgKHN0cm9rZS5icnVzaF90eXBlID09PSBCcnVzaFR5cGUuQmxvYnMpIHtcblx0XHRcdHRoaXMuZmlsbF9idWZmX2Zvcl9ibG9iX2JydXNoKHN0cm9rZSlcblx0XHR9IGVsc2UgaWYgKHN0cm9rZS5icnVzaF90eXBlID09PSBCcnVzaFR5cGUuTG9uZykge1xuXHRcdFx0dGhpcy5maWxsX2J1ZmZfZm9yX2xvbmdfYnJ1c2goc3Ryb2tlKVxuXHRcdH0gZWxzZSBpZiAoc3Ryb2tlLmJydXNoX3R5cGUgPT09IEJydXNoVHlwZS5UcmkpIHtcblx0XHRcdHRoaXMuZmlsbF9idWZmX2Zvcl90cmlhbmd1bGF0ZWRfYnJ1c2goc3Ryb2tlKVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLnRpbWVFbmQoJ1NJTkdMRSBTVFJPS0UnKVxuXHR9XG5cdGRyYXdfc3Ryb2tlX2lkeChpZHg6IG51bWJlcikge1xuXHRcdGxldCBkcmF3X3N0YXJ0ID0gaWR4ID09PSAwID8gMCA6IHRoaXMucmVjb3JkZWRfZHJhd2NhbGxzW2lkeCAtIDFdXG5cdFx0bGV0IGRyYXdfY250ID0gaWR4ID09PSAwID8gdGhpcy5yZWNvcmRlZF9kcmF3Y2FsbHNbMF0gOiB0aGlzLnJlY29yZGVkX2RyYXdjYWxsc1tpZHhdIC0gdGhpcy5yZWNvcmRlZF9kcmF3Y2FsbHNbaWR4IC0gMV1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgZHJhd19zdGFydCAvIDQsIGRyYXdfY250IC8gNClcblx0fVxuXG5cdGRyYXdfYW55X3N0cm9rZShzdHJva2U6IEJydXNoU3Ryb2tlLCB0OiBudW1iZXIsIGJydXNoX2J1ZmZlcjogVGhpbmcsIHpvb206IG51bWJlciwgcGFubmluZzogbnVtYmVyW10pIHtcblx0XHR0aGlzLmJydXNoX2J1ZmZlciA9IGJydXNoX2J1ZmZlclxuXHRcdGNvbnNvbGUubG9nKCdTVEFSVCBEUkFXSU5HJylcblx0XHR0aGlzLnQgPSB0XG5cdFx0dGhpcy56b29tID0gem9vbVxuXHRcdHRoaXMucGFubmluZyA9IFsuLi5wYW5uaW5nXVxuXG5cdFx0YnJ1c2hfYnVmZmVyLmRyYXcoKVxuXHR9XG59XG5cbi8vIGRyYXdfYmxvYnNfc3Ryb2tlKFxuLy8gXHRfY29sOiBudW1iZXJbXSxcbi8vIFx0X29wYWNpdHk6IG51bWJlcixcbi8vIFx0X3BvczogbnVtYmVyW10sXG4vLyBcdF9yb3Q6IG51bWJlcltdLFxuLy8gXHRfc3o6IG51bWJlcltdLFxuLy8gXHRfdGV4X2xjaF9keW5hbWljczogbnVtYmVyW10sXG4vLyBcdF90ZXhfc3RyZXRjaDogbnVtYmVyW10sXG4vLyApIHtcbi8vIFx0bGV0IGRyYXdfYmxvYnNfc3Ryb2tlX3Byb2dyYW0gPSB0aGlzLmRyYXdfYmxvYnNfc3Ryb2tlX3Byb2dyYW1cbi8vIFx0bGV0IHNldF9zaGFyZWRfdW5pZm9ybXMgPSB0aGlzLnNldF9zaGFyZWRfdW5pZm9ybXNcbi8vIFx0ZHJhd19ibG9ic19zdHJva2VfcHJvZ3JhbS51c2UoKVxuLy8gXHRzZXRfc2hhcmVkX3VuaWZvcm1zKGRyYXdfYmxvYnNfc3Ryb2tlX3Byb2dyYW0sIF9jb2wsIHRoaXMudClcblxuLy8gXHRkcmF3X2Jsb2JzX3N0cm9rZV9wcm9ncmFtLnNldFVuaWZvcm1GbG9hdCgnc3Ryb2tlX29wYWNpdHknLCBfb3BhY2l0eSlcbi8vIFx0ZHJhd19ibG9ic19zdHJva2VfcHJvZ3JhbS5zZXRVbmlmb3JtVmVjKCd0ZXhfbGNoX2R5bmFtaWNzJywgW1xuLy8gXHRcdF90ZXhfbGNoX2R5bmFtaWNzWzBdLFxuLy8gXHRcdF90ZXhfbGNoX2R5bmFtaWNzWzFdLFxuLy8gXHRcdF90ZXhfbGNoX2R5bmFtaWNzWzJdLFxuLy8gXHRdKVxuLy8gXHRkcmF3X2Jsb2JzX3N0cm9rZV9wcm9ncmFtLnNldFVuaWZvcm1WZWMoJ3RleF9zdHJldGNoJywgW190ZXhfc3RyZXRjaFswXSwgX3RleF9zdHJldGNoWzFdXSlcblxuLy8gXHRjb25zdCBwdXNoX3dpdGhfb2ZmcyA9ICh2YWxzOiBudW1iZXJbXSwgb2ZmczogbnVtYmVyKSA9PiB7XG4vLyBcdFx0dmFscy5mb3JFYWNoKCh2LCBpKSA9PiB7XG4vLyBcdFx0XHR3aW5kb3cudWJvLmJ1ZmYuY3B1X2J1ZmZbb2ZmcyArIGldID0gdlxuLy8gXHRcdH0pXG4vLyBcdH1cblxuLy8gXHRwdXNoX3dpdGhfb2ZmcyhfY29sLCAwKVxuLy8gXHRwdXNoX3dpdGhfb2ZmcyhfcG9zLCA4KVxuLy8gXHRwdXNoX3dpdGhfb2Zmcyhfc3osIDE0KVxuLy8gXHRwdXNoX3dpdGhfb2Zmcyhfcm90LCAxNilcbi8vIFx0cHVzaF93aXRoX29mZnMoW19vcGFjaXR5XSwgMjEpXG5cbi8vIFx0d2luZG93LnViby5idWZmLnVwbG9hZCgpXG4vLyBcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpXG4vLyB9XG4iLCI8bWFpbj5cblx0PGRpdiBpZD1cImJhci1jb250YWluZXJcIj5cblx0XHQ8ZGl2IGlkPVwiYmFyXCI+XG5cdFx0XHQ8S25vYiBiaW5kOnZhbHVlPXtzdHJva2VfY29sWzBdfSB0aXRsZT17J1InfSAvPlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17c3Ryb2tlX2NvbFsxXX0gdGl0bGU9eydHJ30gLz5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e3N0cm9rZV9jb2xbMl19IHRpdGxlPXsnQid9IC8+XG5cdFx0XHQ8Q29sb3VyRGlzcGxheSBcblx0XHRcdFx0YmluZDpjb2xvdXI9e3N0cm9rZV9jb2x9IFxuXHRcdFx0XHRiaW5kOnVwZGF0ZV9kaXNwbGF5PXt0cmlnZ2VyX2NvbG91cl9kaXNwbGF5X3VwZGF0ZX0gLz5cblxuXHRcdFx0PEtub2IgYmluZDp0aGlzPXtjaGFvc0tub2J9IGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2guY2hhb3N9IHRpdGxlPXsnQ2hhb3MnfSB0cmlnZ2VyTW9kYWw9e29wZW5Nb2RhbH0gbW9kYWw9e2NoYW9zU2VtaU1vZGFsfSAvPlxuXHRcdFx0PEJydXNoU2l6ZVdpZGdldFxuXHRcdFx0XHRiaW5kOmJydXNoX3N6PXticnVzaF9zen1cblx0XHRcdFx0YmluZDpkcmFnZ2luZz17YnJ1c2hTaXplV2lkZ2V0RHJhZ2dpbmd9XG5cdFx0XHRcdGJpbmQ6c3RvcHBlZF9kcmFnZ2luZz17YnJ1c2hTaXplV2lkZ2V0U3RvcHBlZERyYWdnaW5nfSAvPlxuXHRcdFx0PEtub2Jcblx0XHRcdFx0YmluZDp0aGlzPXtkeW5hbWljc0tub2J9XG5cdFx0XHRcdGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2guZHluYW1pY3N9XG5cdFx0XHRcdHRpdGxlPXsnRHluYW1pY3MnfVxuXHRcdFx0XHR0cmlnZ2VyTW9kYWw9e29wZW5Nb2RhbH1cblx0XHRcdFx0bW9kYWw9e2R5bmFtaWNzU2VtaU1vZGFsfSAvPlxuXHRcdFx0PEtub2Jcblx0XHRcdFx0YmluZDp0aGlzPXt0ZXhEeW5hbWljc0tub2J9XG5cdFx0XHRcdGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2gudGV4X2R5bmFtaWNzfVxuXHRcdFx0XHR0aXRsZT17J1RleCd9XG5cdFx0XHRcdHRyaWdnZXJNb2RhbD17b3Blbk1vZGFsfVxuXHRcdFx0XHRtb2RhbD17dGV4RHluYW1pY3NTZW1pTW9kYWx9IC8+XG5cdFx0XHQ8IS0tIDxCcnVzaFR5cGVXaWRnZXQgYmluZDpzZWxlY3RlZF9icnVzaF90eXBlPXtjdXJyX2JydXNoLnNlbGVjdGVkX2JydXNoX3R5cGV9IC8+IC0tPlxuXHRcdFx0PEJydXNoVHlwZVdpZGdldCBiaW5kOmN1cnJfYnJ1c2g9e2N1cnJfYnJ1c2h9IC8+XG5cdFx0XHQ8QnJ1c2hQcmVzZXRXaWRnZXQgYmluZDpicnVzaF9wcmVzZXRzPXticnVzaF9wcmVzZXRzfSBiaW5kOnNlbGVjdGVkX2JydXNoX3ByZXNldD17Y3Vycl9icnVzaH0gLz5cblx0XHRcdDxVbmRvUmVkb1dpZGdldFxuXHRcdFx0XHR1bmRvPXsoKSA9PiB7XG5cdFx0XHRcdFx0dW5kb19wZW5kaW5nID0gdHJ1ZVxuXHRcdFx0XHRcdGZsb2F0aW5nX21vZGFsX21lc3NhZ2Uuc2V0KFwidW5kb1wiKVxuXHRcdFx0XHR9fVxuXHRcdFx0XHRyZWRvPXsoKSA9PiB7XG5cdFx0XHRcdFx0cmVkb19wZW5kaW5nID0gdHJ1ZVxuXHRcdFx0XHR9fSAvPlxuXHRcdFx0PEdhbGxlcnlXaWRnZXRcblx0XHRcdFx0YmluZDpjdXJyZW50X3Byb2plY3Q9e3Byb2plY3R9XG5cdFx0XHRcdGdldF9jdXJyZW50X2NhbnZhc19hc19pbWFnZT17YXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGxldCBbaW1nLCBibG9iXSA9IGF3YWl0IGNhbnZhc19yZWFkX3RleC5yZWFkX2JhY2tfaW1hZ2UodHJ1ZSlcblx0XHRcdFx0XHRyZXR1cm4gW2ltZywgYmxvYl1cblx0XHRcdFx0fX0gXG5cdFx0XHRcdG5ld19wcm9qZWN0PXsoKT0+eyBcblx0XHRcdFx0XHRuZXdfcHJvamVjdF9wZW5kaW5nID0gdHJ1ZSBcblx0XHRcdFx0fX1cblx0XHRcdFx0bG9hZF9wcm9qZWN0PXsocHJvamVjdCk9PnsgXG5cdFx0XHRcdFx0cHJvamVjdF9wZW5kaW5nX2xvYWQgPSBwcm9qZWN0XG5cdFx0XHRcdH19XG5cdFx0XHRcdGJpbmQ6cmVzaXplX3Byb2plY3Q9e3Jlc2l6ZV9wcm9qZWN0fVxuXHRcdFx0XHRiaW5kOnByb2plY3RfaGFzX2JlZW5fbW9kaWZpZWQ9e3Byb2plY3RfaGFzX2JlZW5fbW9kaWZpZWR9XG5cdFx0XHRcdGJpbmQ6aXNfc2FmZV90b19zd2l0Y2hfdG9fbmV3X3Byb2plY3Q9e2lzX3NhZmVfdG9fc3dpdGNoX3RvX25ld19wcm9qZWN0fVxuXHRcdFx0XHQvPlxuXHRcdFx0PEZsb2F0aW5nTW9kYWwgLz5cblx0XHRcdDxQaWNrQ29sb3VyV2lkZ2V0XG5cdFx0XHRcdHBpY2tfZnJvbV9jYW52YXM9eygpID0+IHBpY2tfZnJvbV9jYW52YXMoKX1cblx0XHRcdFx0YmluZDpwaWNraW5nPXtwaWNraW5nfVxuXHRcdFx0XHRiaW5kOmp1c3RfZmluaXNoZWRfcGljaz17anVzdF9maW5pc2hlZF9waWNrfSAvPlxuXHRcdFx0PEJsZW5kaW5nQ29sb3VyU3BhY2VXaWRnZXQgYmluZDpzZWxlY3RlZF9jb2xvdXJfc3BhY2U9e2JsZW5kaW5nX2NvbG91cl9zcGFjZX0vPlxuXHRcdDwvZGl2PlxuXHRcdDxTZW1pTW9kYWwgYmluZDp0aGlzPXtjaGFvc1NlbWlNb2RhbH0ga25vYj17Y2hhb3NLbm9ifT5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2guY2hhb3NfbGNoWzBdfSB0aXRsZT17J0NoYW9zIEwnfSAvPlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17Y3Vycl9icnVzaC5jaGFvc19sY2hbMV19IHRpdGxlPXsnQ2hhb3MgQyd9IC8+XG5cdFx0XHQ8S25vYiBiaW5kOnZhbHVlPXtjdXJyX2JydXNoLmNoYW9zX2xjaFsyXX0gdGl0bGU9eydDaGFvcyBIJ30gLz5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2guY2hhb3Nfc3BlZWR9IHRpdGxlPXsnQ2hhb3MgU3BlZWQnfSAvPlxuXHRcdDwvU2VtaU1vZGFsPlxuXHRcdDxTZW1pTW9kYWwgYmluZDp0aGlzPXtkeW5hbWljc1NlbWlNb2RhbH0ga25vYj17ZHluYW1pY3NLbm9ifT5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2guc3Ryb2tlX29wYWNpdHlfZHluYW1pY3NbMF19IHRpdGxlPXsnT3BhY2l0eSBtaW4nfSAvPlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17Y3Vycl9icnVzaC5zdHJva2Vfb3BhY2l0eV9keW5hbWljc1sxXX0gdGl0bGU9eydPcGFjaXR5IG1heCd9IC8+XG5cdFx0XHQ8S25vYiBiaW5kOnZhbHVlPXtjdXJyX2JydXNoLnN0cm9rZV9zaXplX2R5bmFtaWNzWzBdfSB0aXRsZT17J1NpemUgbWluJ30gLz5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2guc3Ryb2tlX3NpemVfZHluYW1pY3NbMV19IHRpdGxlPXsnU2l6ZSBtYXgnfSAvPlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17Y3Vycl9icnVzaC5yb3Rfaml0dGVyfSB0aXRsZT17J1JvdCBqaXR0J30gLz5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2gucG9zX2ppdHRlcn0gdGl0bGU9eydQb3Mgaml0dCd9IC8+XG5cdFx0PC9TZW1pTW9kYWw+XG5cdFx0PFNlbWlNb2RhbCBiaW5kOnRoaXM9e3RleER5bmFtaWNzU2VtaU1vZGFsfSBrbm9iPXt0ZXhEeW5hbWljc0tub2J9PlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17Y3Vycl9icnVzaC50ZXhfc3RyZXRjaFswXX0gdGl0bGU9eydTdHJldGNoIFgnfSAvPlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17Y3Vycl9icnVzaC50ZXhfc3RyZXRjaFsxXX0gdGl0bGU9eydTdHJldGNoIFknfSAvPlxuXHRcdFx0PEtub2IgYmluZDp2YWx1ZT17Y3Vycl9icnVzaC50ZXhfbGNoX2R5bmFtaWNzWzBdfSB0aXRsZT17J1RleCBWJ30gLz5cblx0XHRcdDxLbm9iIGJpbmQ6dmFsdWU9e2N1cnJfYnJ1c2gudGV4X2xjaF9keW5hbWljc1sxXX0gdGl0bGU9eydUZXggUyd9IC8+XG5cdFx0XHQ8S25vYiBiaW5kOnZhbHVlPXtjdXJyX2JydXNoLnRleF9sY2hfZHluYW1pY3NbMl19IHRpdGxlPXsnVGV4IEgnfSAvPlxuXHRcdFx0PFRleHR1cmVXaWRnZXQgYmluZDpicnVzaF90ZXh0dXJlcz17YnJ1c2hfdGV4dHVyZXN9IGJpbmQ6c2VsZWN0ZWRfYnJ1c2hfdGV4dHVyZT17Y3Vycl9icnVzaC5zZWxlY3RlZF9icnVzaF90ZXh0dXJlfSAvPlxuXHRcdDwvU2VtaU1vZGFsPlxuXHQ8L2Rpdj5cblx0PGNhbnZhcyBpZD1cImNhbnZhc1wiIGJpbmQ6dGhpcz17Y2FudmFzRWxlbWVudH0gLz5cbjwvbWFpbj5cblxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuXHQvLyBpbXBvcnQgdHlwZSBtb25hY28gZnJvbSAnbW9uYWNvLWVkaXRvcic7XG5cdGltcG9ydCB7b25Nb3VudH0gZnJvbSAnc3ZlbHRlJ1xuXHRpbXBvcnQge29uRGVzdHJveX0gZnJvbSAnc3ZlbHRlJ1xuXHRpbXBvcnQge2Zsb2F0aW5nX21vZGFsX21lc3NhZ2V9IGZyb20gJ3N0b3JlJ1xuXG5cdGltcG9ydCB7cmVzaXplSWZOZWVkZWQgYXMgcmVzaXplRGVmYXVsdEZyYW1lYnVmZmVySWZOZWVkZWQsIHByaW50X29uX2dsX2Vycm9yLCBpbml0X2dsX2Vycm9yX2hhbmRsaW5nLCBjb3B5X2ZiX3RvX3RleHR1cmUsIGNvcHlfZmJfdG9fZmJ9IGZyb20gJ2dsX3V0aWxzJ1xuXG5cdGltcG9ydCBLbm9iIGZyb20gJy4vS25vYi5zdmVsdGUnXG5cdGltcG9ydCBCcnVzaFNpemVXaWRnZXQgZnJvbSAnLi9CcnVzaFNpemVXaWRnZXQuc3ZlbHRlJ1xuXHRpbXBvcnQgQnJ1c2hUeXBlV2lkZ2V0IGZyb20gJy4vQnJ1c2hUeXBlV2lkZ2V0LnN2ZWx0ZSdcblx0aW1wb3J0IEJydXNoUHJlc2V0V2lkZ2V0IGZyb20gJy4vQnJ1c2hQcmVzZXRXaWRnZXQuc3ZlbHRlJ1xuXHRpbXBvcnQgVW5kb1JlZG9XaWRnZXQgZnJvbSAnLi9VbmRvUmVkb1dpZGdldC5zdmVsdGUnXG5cdGltcG9ydCBHYWxsZXJ5V2lkZ2V0IGZyb20gJy4vR2FsbGVyeVdpZGdldC5zdmVsdGUnXG5cdGltcG9ydCBGbG9hdGluZ01vZGFsIGZyb20gJy4vRmxvYXRpbmdNb2RhbC5zdmVsdGUnXG5cdGltcG9ydCBQaWNrQ29sb3VyV2lkZ2V0IGZyb20gJy4vUGlja0NvbG91cldpZGdldC5zdmVsdGUnXG5cdGltcG9ydCBUZXh0dXJlV2lkZ2V0IGZyb20gJy4vVGV4dHVyZVdpZGdldC5zdmVsdGUnXG5cdGltcG9ydCBCbGVuZGluZ0NvbG91clNwYWNlV2lkZ2V0IGZyb20gJy4vQmxlbmRpbmdDb2xvdXJTcGFjZVdpZGdldC5zdmVsdGUnXG5cblx0aW1wb3J0IENvbG91ckRpc3BsYXkgZnJvbSAnLi9Db2xvdXJEaXNwbGF5LnN2ZWx0ZSdcblx0aW1wb3J0IFNlbWlNb2RhbCBmcm9tICcuL1NlbWlNb2RhbC5zdmVsdGUnXG5cdGltcG9ydCB7SU99IGZyb20gJ0lPJ1xuXHRpbXBvcnQgY2hyb21hIGZyb20gJ2Nocm9tYS1qcydcblx0aW1wb3J0IHtIYXNoLCBhYnMsIGNvcywgZmxvb3IsIHBvdywgc2luLCB0YXUsIHRyaSwgbWl4LCBtYXgsIGxvZzJ9IGZyb20gJ3dtYXRoJ1xuXHRpbXBvcnQge2NsYW1wLCBsZXJwLCBtb2QsIHNtb290aGVzdHN0ZXAsIHNtb290aHN0ZXB9IGZyb20gJ0AwYjV2ci9leHBlcmltZW50YWwnXG5cdGltcG9ydCB7QnJ1c2hUZXh0dXJlLCBQcm9qZWN0LCBVdGlsc30gZnJvbSAnc3R1ZmYnXG5cdGltcG9ydCB7QmxlbmRpbmdDb2xvdXJTcGFjZSwgQnJ1c2hQcmVzZXQsIEJydXNoU3Ryb2tlLCBCcnVzaFR5cGUsIERyYXdQYXJhbXN9IGZyb20gJ2JydXNoX3N0cm9rZSdcblx0aW1wb3J0IHtEcmF3ZXJ9IGZyb20gJ2RyYXdlcidcblx0aW1wb3J0IHsgRnJhbWVidWZmZXIgfSBmcm9tICdnbC9GcmFtZWJ1ZmZlcidcblx0aW1wb3J0IHsgVmVydGV4QnVmZmVyLCBVQk8gfSBmcm9tICdnbC9CdWZmZXInXG5cdGltcG9ydCB7IFRleHR1cmUgfSBmcm9tICdnbC9UZXh0dXJlJ1xuXHRpbXBvcnQgeyBTaGFkZXJQcm9ncmFtIH0gZnJvbSAnZ2wvU2hhZGVyUHJvZ3JhbSdcblx0aW1wb3J0IHsgVGhpbmcgfSBmcm9tICdnbC9UaGluZydcblxuXHQvLyBJbml0XG5cdGNvbnN0IHVuZG9fY2FjaGVfc3RlcHMgPSAyNVxuXHRsZXQgaGFzaCA9IG5ldyBIYXNoKClcblx0bGV0IGlvOiBJT1xuXHRsZXQgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHRcblx0bGV0IHpvb20gPSBGbG9hdDMyQXJyYXkuZnJvbShbMV0pXG5cdHdpbmRvdy56b29tID0gem9vbVxuXHRsZXQgZGVzaXJlZF96b29tID0gMVxuXHRsZXQgcGFubmluZ190ZW1wX3BpbmNoOiBudW1iZXJbXSA9IFswLCAwXVxuXHRsZXQgcGFubmluZzogbnVtYmVyW10gPSBbMCwgMF1cblx0bGV0IHVzZXJBZ2VudFJlczogQXJyYXk8bnVtYmVyPiA9IFswLCAwXVxuXHRsZXQgZGVmYXVsdF9mcmFtZWJ1ZmZlcjogRnJhbWVidWZmZXJcblxuXHQvLyBFbGVtZW50c1xuXHRsZXQgY2FudmFzRWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnRcblx0bGV0IGNoYW9zU2VtaU1vZGFsOiBTZW1pTW9kYWxcblx0bGV0IGR5bmFtaWNzU2VtaU1vZGFsOiBTZW1pTW9kYWxcblx0bGV0IHRleER5bmFtaWNzU2VtaU1vZGFsOiBTZW1pTW9kYWxcblx0bGV0IG1vZGFsczogU2VtaU1vZGFsW10gPSBbXVxuXHRsZXQgYnJ1c2hTaXplV2lkZ2V0RHJhZ2dpbmc6IGJvb2xlYW5cblx0bGV0IGJydXNoU2l6ZVdpZGdldFN0b3BwZWREcmFnZ2luZzogYm9vbGVhblxuXHRsZXQgY2hhb3NLbm9iOiBLbm9iXG5cdGxldCBkeW5hbWljc0tub2I6IEtub2Jcblx0bGV0IHRleER5bmFtaWNzS25vYjogS25vYlxuXG5cdC8vIERyYXdpbmcgcGFyYW1zXG5cdGxldCBzdHJva2VfY29sOiBBcnJheTxudW1iZXI+ID0gWzAuNSwgMC40LCAwLjMsIDFdXG5cdGxldCBzdHJva2Vfb3BhY2l0eSA9IDBcblx0bGV0IGJydXNoX3JvdDogbnVtYmVyW10gPSBbMCwgMF1cblx0bGV0IGJydXNoX3Bvc19uZGNfc2NyZWVuOiBudW1iZXJbXSA9IFswLCAwXVxuXHRsZXQgYnJ1c2hfcG9zX25kY19jYW52YXM6IG51bWJlcltdID0gWzAsIDBdXG5cdGxldCBicnVzaF9zejogbnVtYmVyW10gPSBbMSwgMC4yXVxuXHRcblx0XG5cdGxldCBicnVzaF9wcmVzZXRzOiBCcnVzaFByZXNldFtdID0gW11cblx0Zm9yKGxldCBpID0gMDsgaSA8IDY7IGkrKyl7XG5cdFx0YnJ1c2hfcHJlc2V0cy5wdXNoKG5ldyBCcnVzaFByZXNldCgpKVxuXHR9XG5cdGxldCBjdXJyX2JydXNoOiBCcnVzaFByZXNldCA9IGJydXNoX3ByZXNldHNbMF1cblxuXHRsZXQgYmxlbmRpbmdfY29sb3VyX3NwYWNlID0gQmxlbmRpbmdDb2xvdXJTcGFjZS5Pa0xDSFxuXG5cdGxldCBicnVzaF90ZXh0dXJlczogQXJyYXk8QnJ1c2hUZXh0dXJlPiA9IFtdXG5cblx0bGV0IG5ld19wcm9qZWN0X3BlbmRpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXHRsZXQgdW5kb19wZW5kaW5nOiBib29sZWFuID0gZmFsc2Vcblx0bGV0IHJlZG9fcGVuZGluZzogYm9vbGVhbiA9IGZhbHNlXG5cdGxldCBwaWNraW5nOiBib29sZWFuXG5cdGxldCBqdXN0X2ZpbmlzaGVkX3BpY2s6IGJvb2xlYW5cblx0bGV0IHBpY2tlZF9jb2w6IG51bWJlcltdID0gWzAsIDAsIDBdXG5cblx0bGV0IHByb2plY3QgPSBuZXcgUHJvamVjdCgpXG5cdGxldCBwcm9qZWN0X3BlbmRpbmdfbG9hZDogUHJvamVjdFxuXHRsZXQgcHJvamVjdF9oYXNfYmVlbl9tb2RpZmllZCA9IGZhbHNlXG5cdGxldCByZXNpemVfcHJvamVjdDogKHN6OiBudW1iZXJbXSk9PnZvaWRcblx0bGV0IGlzX3NhZmVfdG9fc3dpdGNoX3RvX25ld19wcm9qZWN0XG5cdFxuXHRsZXQgZnVsbF9yZWRyYXdfbmVlZGVkOiBib29sZWFuID0gZmFsc2Vcblx0bGV0IHRyaWdnZXJfY29sb3VyX2Rpc3BsYXlfdXBkYXRlOiAoY29sb3VyX3IsIGNvbG91cl9nLCBjb2xvdXJfYik9PnZvaWRcblxuXHRsZXQgY2FudmFzX2ZiOiBGcmFtZWJ1ZmZlclxuXHRsZXQgY2FudmFzX3JlYWRfdGV4OiBUZXh0dXJlXG5cblx0bGV0IHRlbXBfdW5kb19mYjogRnJhbWVidWZmZXJcblxuXHRsZXQgZHJhd2VyOiBEcmF3ZXJcblx0bGV0IHVibzogVUJPXG5cblx0Y29uc3Qgc2V0X3NoYXJlZF91bmlmb3JtcyA9ICgpID0+IHtcblx0XHR1Ym8uYnVmZi5zeiA9IDBcblx0XHR1Ym8uYnVmZi5jcHVfYnVmZlswXSA9IGNhbnZhc19mYi5fdGV4dHVyZXNbMF0ucmVzWzBdXG5cdFx0dWJvLmJ1ZmYuY3B1X2J1ZmZbMV0gPSBjYW52YXNfZmIuX3RleHR1cmVzWzBdLnJlc1sxXVxuXHRcdHViby5idWZmLmNwdV9idWZmWzJdID0gZGVmYXVsdF9mcmFtZWJ1ZmZlci50ZXh0dXJlc1swXS5yZXNbMF1cblx0XHR1Ym8uYnVmZi5jcHVfYnVmZlszXSA9IGRlZmF1bHRfZnJhbWVidWZmZXIudGV4dHVyZXNbMF0ucmVzWzFdXG5cdFx0dWJvLmJ1ZmYuY3B1X2J1ZmZbNF0gPSBpc09uTW9iaWxlID8gMSA6IDBcblx0XHR1Ym8uYnVmZi51cGxvYWQoKVxuXHR9XG5cblx0Y29uc3QgcGlja19mcm9tX2NhbnZhcyA9ICgpID0+IHtcblx0XHRsZXQgY29vcmQgPSBVdGlscy50ZXh0dXJlX05EQ190b190ZXh0dXJlX3BpeGVsX2Nvb3Jkcyhcblx0XHRcdFV0aWxzLnNjcmVlbl9ORENfdG9fY2FudmFzX05EQyhbLi4uaW8ubW91c2VfcG9zXSwgZGVmYXVsdF9mcmFtZWJ1ZmZlci50ZXh0dXJlc1swXSwgY2FudmFzX3JlYWRfdGV4LCB6b29tWzBdLCBwYW5uaW5nKSxcblx0XHRcdGNhbnZhc19yZWFkX3RleCxcblx0XHQpXG5cdFx0bGV0IGMgPSBjYW52YXNfcmVhZF90ZXgucmVhZF9iYWNrX3BpeGVsKGNvb3JkKVxuXHRcdC8vIGNvbnNvbGUubG9nKGMpXG5cblx0XHRwaWNrZWRfY29sID0gWy4uLmNdXG5cdFx0cGlja2VkX2NvbFswXSA9IGNbMF0gLyAyNTVcblx0XHRwaWNrZWRfY29sWzFdID0gY1sxXSAvIDI1NVxuXHRcdHBpY2tlZF9jb2xbMl0gPSBjWzJdIC8gMjU1XG5cdFx0cGlja2VkX2NvbFswXSA9IHBvdyhwaWNrZWRfY29sWzBdLCAwLjQ1NDU0NTQ1NDU0NTQ1KVxuXHRcdHBpY2tlZF9jb2xbMV0gPSBwb3cocGlja2VkX2NvbFsxXSwgMC40NTQ1NDU0NTQ1NDU0NSlcblx0XHRwaWNrZWRfY29sWzJdID0gcG93KHBpY2tlZF9jb2xbMl0sIDAuNDU0NTQ1NDU0NTQ1NDUpXG5cdFx0cGlja2VkX2NvbC5wb3AoKVxuXHRcdHJldHVybiBjXG5cdH1cblxuXHRjb25zdCBvcGVuTW9kYWwgPSAobW9kYWw6IFNlbWlNb2RhbCkgPT4ge1xuXHRcdGZvciAobGV0IG0gb2YgbW9kYWxzKSB7XG5cdFx0XHRpZiAobSA9PT0gbW9kYWwpIHtcblx0XHRcdFx0aWYgKG0uaGlkZGVuKSB7XG5cdFx0XHRcdFx0bS5oaWRkZW4gPSBmYWxzZVxuXHRcdFx0XHRcdG0ua25vYi5tb2RhbEhpZGRlbiA9IGZhbHNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bS5oaWRkZW4gPSB0cnVlXG5cdFx0XHRcdFx0bS5rbm9iLm1vZGFsSGlkZGVuID0gdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBtLmhpZGUoKVxuXHRcdFx0XHRtLmhpZGRlbiA9IHRydWVcblx0XHRcdFx0bS5rbm9iLm1vZGFsSGlkZGVuID0gdHJ1ZVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGluaXRfd2ViX2dsID0gKCkgPT4ge1xuXHRcdHdpbmRvdy5pc09uTW9iaWxlID0gVXRpbHMuaXNPbk1vYmlsZSgpXG5cdFx0Ly9AdHMtaWdub3JlXG5cdFx0d2luZG93LmdsID0gZ2wgPSBjYW52YXNFbGVtZW50LmdldENvbnRleHQoJ3dlYmdsMicsIHtcblx0XHRcdHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdHJ1ZSxcblx0XHRcdGFscGhhOiBmYWxzZSxcblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYTogZmFsc2UsXG5cdFx0XHRhbnRpYWxpYXM6IHRydWVcblx0XHR9KVxuXHRcdGdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXQnKTtcblx0XHRnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuXHRcdGdsLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuXG5cblx0XHRnbC5kZWJ1Z0VuYWJsZWQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xuXHRcdGdsLmRlYnVnRW5hYmxlZCA9IGZhbHNlXG5cdFx0aW5pdF9nbF9lcnJvcl9oYW5kbGluZygpXG5cblx0XHR1c2VyQWdlbnRSZXMgPSBbY2FudmFzRWxlbWVudC5jbGllbnRXaWR0aCwgY2FudmFzRWxlbWVudC5jbGllbnRXaWR0aF1cblxuXHRcdGRlZmF1bHRfZnJhbWVidWZmZXIgPSBPYmplY3QuY3JlYXRlKEZyYW1lYnVmZmVyLnByb3RvdHlwZSlcblx0XHRkZWZhdWx0X2ZyYW1lYnVmZmVyLmRlZmF1bHQgPSB0cnVlXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5wb25nYWJsZSA9IGZhbHNlXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5uZWVkc19wb25nID0gZmFsc2Vcblx0XHRkZWZhdWx0X2ZyYW1lYnVmZmVyLnBvbmdfaWR4ID0gMFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWZhdWx0X2ZyYW1lYnVmZmVyLl9mYiA9IG51bGxcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5fdGV4dHVyZXMgPSBbT2JqZWN0LmNyZWF0ZShUZXh0dXJlLnByb3RvdHlwZSldXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci50ZXh0dXJlc1swXS5yZXMgPSBbLi4udXNlckFnZW50UmVzXVxuXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5iaW5kKClcblxuXHRcdGNhbnZhc19mYiA9IG5ldyBGcmFtZWJ1ZmZlcihbXG5cdFx0XHRuZXcgVGV4dHVyZShbcHJvamVjdC5jYW52YXNSZXNbMF0sIHByb2plY3QuY2FudmFzUmVzWzFdXSwgZ2wuUkdCQTE2RiwgIWlzT25Nb2JpbGUpIFxuXHRcdF0sIHRydWUpXG5cblx0XHR0ZW1wX3VuZG9fZmIgPSBuZXcgRnJhbWVidWZmZXIoW1xuXHRcdFx0bmV3IFRleHR1cmUoW3Byb2plY3QuY2FudmFzUmVzWzBdLCBwcm9qZWN0LmNhbnZhc1Jlc1sxXV0sIGdsLlJHQkExNkYsIGZhbHNlKSBcblx0XHRdLCBmYWxzZSlcblx0XHRcblxuXHRcdHVibyA9IG5ldyBVQk8oKVxuXHRcdHdpbmRvdy51Ym8gPSB1Ym9cblx0XHRcblxuXHRcdHJlc2l6ZURlZmF1bHRGcmFtZWJ1ZmZlcklmTmVlZGVkKGNhbnZhc0VsZW1lbnQsIGRlZmF1bHRfZnJhbWVidWZmZXIsIHVzZXJBZ2VudFJlcywgKGUpID0+IHt9LCAoKT0+e3NldF9zaGFyZWRfdW5pZm9ybXMoKX0pXG5cdFx0c2V0X3NoYXJlZF91bmlmb3JtcygpXG5cblx0XHRnbC5kaXNhYmxlKGdsLkNVTExfRkFDRSlcblx0XHRnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpXG5cdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKVxuXHRcdFxuXHRcdC8vIGdsLmJsZW5kXG5cdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBLCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsKTtcblx0XHRnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoZ2wuRlVOQ19BREQsIGdsLkZVTkNfQUREKSBcblx0fVxuXHRjb25zdCBpbml0X290aGVyX3N0dWZmID0gYXN5bmMgKCkgPT4ge1xuXHRcdGlvID0gbmV3IElPKClcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChldmVudCkgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKSlcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKT0+IHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cdFx0fSk7XG5cblx0XHRicnVzaF90ZXh0dXJlcy5wdXNoKFxuXHRcdFx0YXdhaXQgQnJ1c2hUZXh0dXJlLmNyZWF0ZShyZXF1aXJlKFwiLy4uL3B1YmxpYy9pbWFnZXMvYnJvdy53ZWJwXCIpLmRlZmF1bHQsIDApXG5cdFx0KVxuXHRcdGJydXNoX3RleHR1cmVzLnB1c2goXG5cdFx0XHRhd2FpdCBCcnVzaFRleHR1cmUuY3JlYXRlKHJlcXVpcmUoXCIvLi4vcHVibGljL2ltYWdlcy9jaGFyY29hbC53ZWJwXCIpLmRlZmF1bHQsIDEpXG5cdFx0KVxuXHRcdGJydXNoX3RleHR1cmVzLnB1c2goXG5cdFx0XHRhd2FpdCBCcnVzaFRleHR1cmUuY3JlYXRlKHJlcXVpcmUoXCIvLi4vcHVibGljL2ltYWdlcy9jaXJjbGUud2VicFwiKS5kZWZhdWx0LCAyKVxuXHRcdClcblx0XHRicnVzaF90ZXh0dXJlcy5wdXNoKFxuXHRcdFx0YXdhaXQgQnJ1c2hUZXh0dXJlLmNyZWF0ZShyZXF1aXJlKFwiLy4uL3B1YmxpYy9pbWFnZXMvZ3JhZGllbnRfYm90dG9tX3RvX3RvcC53ZWJwXCIpLmRlZmF1bHQsIDMpXG5cdFx0KVxuXHRcdGJydXNoX3RleHR1cmVzLnB1c2goXG5cdFx0XHRhd2FpdCBCcnVzaFRleHR1cmUuY3JlYXRlKHJlcXVpcmUoXCIvLi4vcHVibGljL2ltYWdlcy9vaWxfMDEud2VicFwiKS5kZWZhdWx0LCA0KVxuXHRcdClcblx0XHRicnVzaF90ZXh0dXJlcy5wdXNoKFxuXHRcdFx0YXdhaXQgQnJ1c2hUZXh0dXJlLmNyZWF0ZShyZXF1aXJlKFwiLy4uL3B1YmxpYy9pbWFnZXMvb2lsX3RhcGVyLndlYnBcIikuZGVmYXVsdCwgNSlcblx0XHQpXG5cdFx0YnJ1c2hfdGV4dHVyZXMucHVzaChcblx0XHRcdGF3YWl0IEJydXNoVGV4dHVyZS5jcmVhdGUocmVxdWlyZShcIi8uLi9wdWJsaWMvaW1hZ2VzL3NxdWFyZS53ZWJwXCIpLmRlZmF1bHQsIDYpXG5cdFx0KVxuXHRcdGJydXNoX3RleHR1cmVzID0gWy4uLmJydXNoX3RleHR1cmVzXVxuXG5cdFx0Zm9yKGxldCBicnVzaCBvZiBicnVzaF9wcmVzZXRzKXtcblx0XHRcdGJydXNoLnNlbGVjdGVkX2JydXNoX3RleHR1cmUgPSBicnVzaF90ZXh0dXJlc1swXVxuXHRcdH1cblx0XHRcblx0XHQvLyB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBhc3luYyAoKT0+IHtcblx0XHQvLyBcdGNvbnN0IGlzX3NhZmUgPSBhd2FpdCBpc19zYWZlX3RvX3N3aXRjaF90b19uZXdfcHJvamVjdCgpXG5cdFx0Ly8gXHRjb25zb2xlLmxvZyhpc19zYWZlKVxuXHRcdC8vIFx0Ly8gaWYoISl7XG5cdFx0Ly8gXHRcdHJldHVybiAnRG8geW91IHdhbnQgdG8gbGVhdmUgdGhpcyBwYWdlPyc7XG5cdFx0Ly8gXHQvLyB9IGVsc2Uge1xuXHRcdC8vIFx0cmV0dXJuIFwiYW1vZ1wiXG5cdFx0Ly8gXHQvLyB9XG5cdFx0Ly8gfVxuXHRcdG1vZGFscyA9IFtjaGFvc1NlbWlNb2RhbCwgZHluYW1pY3NTZW1pTW9kYWwsIHRleER5bmFtaWNzU2VtaU1vZGFsXVxuXHR9XG5cblx0b25Nb3VudChhc3luYyAoKSA9PiB7XG5cdFx0aW5pdF93ZWJfZ2woKVxuXHRcdGF3YWl0IGluaXRfb3RoZXJfc3R1ZmYoKVxuXG5cdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5iaW5kKClcblx0XHRkZWZhdWx0X2ZyYW1lYnVmZmVyLmNsZWFyKFswLCAwLCAwLCAxXSlcbiBcblx0XHRjYW52YXNfZmIuY2xlYXIoWzAsIDAsIDAsIDBdKVxuXHRcdGNhbnZhc19mYi5wb25nKClcblx0XHRjYW52YXNfZmIuYmFja190ZXh0dXJlc1swXS5iaW5kX3RvX3VuaXQoMSlcblx0XHRjYW52YXNfZmIuY2xlYXIoWzAsIDAsIDAsIDBdKVxuXG5cdFx0Y29uc3QgdGVtcF9zdHJva2VfZmIgPSBuZXcgRnJhbWVidWZmZXIoW1xuXHRcdFx0bmV3IFRleHR1cmUoW3Byb2plY3QuY2FudmFzUmVzWzBdLCBwcm9qZWN0LmNhbnZhc1Jlc1sxXV0sIGdsLlJHQkExNkYsICFpc09uTW9iaWxlKVxuXHRcdF0pXG5cdFx0dGVtcF9zdHJva2VfZmIuY2xlYXIoWzAsIDAsIDAsIDBdKVxuXG5cdFx0Ly8hIC0tLS0tLS0tLS0tLS0tLS0tLS0gU0hBREVSU1xuXHRcdGNvbnN0IGluaXRfdGV4dHVyZV91bmlmb3JtcyA9IChwcm9ncmFtOiBTaGFkZXJQcm9ncmFtKSA9Pntcblx0XHRcdHByb2dyYW0uc2V0VW5pZm9ybVRleHR1cmUoJ3RlbXBfdGV4JywgdGVtcF9zdHJva2VfZmIudGV4dHVyZXNbMF0sIDApXG5cdFx0XHRwcm9ncmFtLnNldFVuaWZvcm1UZXh0dXJlKCdjYW52YXNfYmFjaycsIGNhbnZhc19mYi5iYWNrX3RleHR1cmVzWzBdLCAxKVxuXHRcdFx0cHJvZ3JhbS5zZXRVbmlmb3JtVGV4dHVyZSgnY2FudmFzX2InLCBjYW52YXNfZmIuX3RleHR1cmVzWzBdLCAyKVxuXHRcdFx0cHJvZ3JhbS5zZXRVbmlmb3JtVGV4dHVyZSgnY2FudmFzX2EnLCBjYW52YXNfZmIuX2JhY2tfdGV4dHVyZXNbMF0sIDMpXG5cdFx0XHQvLyBwcm9ncmFtLnNldFVuaWZvcm1UZXh0dXJlKCdjYW52YXNfYScsIGNhbnZhc19mYi5fYmFja190ZXh0dXJlc1swXSwgMylcblx0XHRcdFxuXHRcdFx0Y29uc3QgYnJ1c2hfdGV4X3N0YXJ0X2lkeCA9IDVcblx0XHRcdGJydXNoX3RleHR1cmVzLmZvckVhY2goKGJydXNoX3RleCwgaSApPT57XG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBgYnJ1c2hfdGV4dHVyZVske2l9XWBcblx0XHRcdFx0Y29uc29sZS5sb2cobmFtZSlcblx0XHRcdFx0Y29uc3QgYnJ1c2hfdGV4dHVyZXNfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0ucHJvZ3JhbSwgbmFtZSlcblx0XHRcdFx0YnJ1c2hfdGV4LmdwdV90ZXguYmluZF90b191bml0KGJydXNoX3RleF9zdGFydF9pZHggKyBpKVx0XHRcdFx0XG5cdFx0XHRcdGdsLnVuaWZvcm0xaShicnVzaF90ZXh0dXJlc19sb2MsIGJydXNoX3RleF9zdGFydF9pZHggKyBpKTtcblx0XHRcdH0pXG5cdFx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKSAvLyBUT0RFTEVURVxuXHRcdH1cblx0XHRjb25zdCBicnVzaF9wcmV2aWV3X3Byb2dyYW0gPSBuZXcgU2hhZGVyUHJvZ3JhbShyZXF1aXJlKCdzaGFkZXJzL2JydXNoX3ByZXZpZXcudmVydCcpLCByZXF1aXJlKCdzaGFkZXJzL2JydXNoX3ByZXZpZXcuZnJhZycpKVxuXHRcdGNvbnN0IHBpY2tlcl9wcm9ncmFtID0gbmV3IFNoYWRlclByb2dyYW0ocmVxdWlyZSgnc2hhZGVycy9waWNrZXIudmVydCcpLCByZXF1aXJlKCdzaGFkZXJzL3BpY2tlci5mcmFnJykpXG5cdFx0Y29uc3QgY29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfcHJvZ3JhbSA9IG5ldyBTaGFkZXJQcm9ncmFtKFxuXHRcdFx0cmVxdWlyZSgnc2hhZGVycy9jb21wb3NpdGVfdGVtcF9zdHJva2VfdG9fY2FudmFzLnZlcnQnKSxcblx0XHRcdHJlcXVpcmUoJ3NoYWRlcnMvY29tcG9zaXRlX3RlbXBfc3Ryb2tlX3RvX2NhbnZhcy5mcmFnJyksXG5cdFx0KVxuXHRcdGNvbnN0IGNvbXBvc2l0ZV9zdHJva2VfdG9fY2FudmFzX2JfcHJvZ3JhbSA9IG5ldyBTaGFkZXJQcm9ncmFtKFxuXHRcdFx0cmVxdWlyZSgnc2hhZGVycy9jb21wb3NpdGVfdGVtcF9zdHJva2VfdG9fY2FudmFzLnZlcnQnKSxcblx0XHRcdHJlcXVpcmUoJ3NoYWRlcnMvY29tcG9zaXRlX3RlbXBfc3Ryb2tlX3RvX2NhbnZhc19iLmZyYWcnKSxcblx0XHQpXG5cdFx0Y29uc3QgcG9zdF9jYW52YXNfcHJvZ3JhbSA9IG5ldyBTaGFkZXJQcm9ncmFtKHJlcXVpcmUoJ3NoYWRlcnMvcG9zdF9jYW52YXMudmVydCcpLCByZXF1aXJlKCdzaGFkZXJzL3Bvc3RfY2FudmFzLmZyYWcnKSlcblx0XHQvL0B0cy1pZ25vcmVcblx0XHRwb3N0X2NhbnZhc19wcm9ncmFtLnpvb21fbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHBvc3RfY2FudmFzX3Byb2dyYW0ucHJvZ3JhbSwgXCJ6b29tXCIpXG5cdFx0Ly9AdHMtaWdub3JlXG5cdFx0cG9zdF9jYW52YXNfcHJvZ3JhbS5wYW5uaW5nX2xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwb3N0X2NhbnZhc19wcm9ncmFtLnByb2dyYW0sIFwicGFubmluZ1wiKVxuXHRcdC8vQHRzLWlnbm9yZVxuXHRcdHBvc3RfY2FudmFzX3Byb2dyYW0uYmxlbmRpbmdfY29sb3VyX3NwYWNlX2xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwb3N0X2NhbnZhc19wcm9ncmFtLnByb2dyYW0sIFwiYmxlbmRpbmdfY29sb3VyX3NwYWNlXCIpXG5cdFx0XG5cdFx0Y29uc3QgYnJ1c2hfbG9uZ19wcm9ncmFtID0gbmV3IFNoYWRlclByb2dyYW0ocmVxdWlyZSgnc2hhZGVycy9icnVzaF9sb25nLnZlcnQnKSwgcmVxdWlyZSgnc2hhZGVycy9icnVzaF9sb25nLmZyYWcnKSlcblxuXHRcdGJydXNoX3ByZXZpZXdfcHJvZ3JhbS51c2UoKVxuXHRcdGluaXRfdGV4dHVyZV91bmlmb3JtcyhicnVzaF9wcmV2aWV3X3Byb2dyYW0pXG5cdFx0cGlja2VyX3Byb2dyYW0udXNlKClcblx0XHRpbml0X3RleHR1cmVfdW5pZm9ybXMocGlja2VyX3Byb2dyYW0pXG5cdFx0Y29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfcHJvZ3JhbS51c2UoKVxuXHRcdGluaXRfdGV4dHVyZV91bmlmb3Jtcyhjb21wb3NpdGVfc3Ryb2tlX3RvX2NhbnZhc19wcm9ncmFtKVxuXHRcdGNvbXBvc2l0ZV9zdHJva2VfdG9fY2FudmFzX2JfcHJvZ3JhbS51c2UoKVxuXHRcdGluaXRfdGV4dHVyZV91bmlmb3Jtcyhjb21wb3NpdGVfc3Ryb2tlX3RvX2NhbnZhc19iX3Byb2dyYW0pXG5cdFx0Ly9AdHMtaWdub3JlXG5cdFx0Y29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfcHJvZ3JhbS5ibGVuZGluZ19jb2xvdXJfc3BhY2VfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKGNvbXBvc2l0ZV9zdHJva2VfdG9fY2FudmFzX3Byb2dyYW0ucHJvZ3JhbSwgXCJibGVuZGluZ19jb2xvdXJfc3BhY2VcIilcblxuXHRcdC8vQHRzLWlnbm9yZVxuXHRcdGNvbXBvc2l0ZV9zdHJva2VfdG9fY2FudmFzX2JfcHJvZ3JhbS5ibGVuZGluZ19jb2xvdXJfc3BhY2VfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKGNvbXBvc2l0ZV9zdHJva2VfdG9fY2FudmFzX2JfcHJvZ3JhbS5wcm9ncmFtLCBcImJsZW5kaW5nX2NvbG91cl9zcGFjZVwiKVxuXG5cdFx0cG9zdF9jYW52YXNfcHJvZ3JhbS51c2UoKVxuXHRcdGluaXRfdGV4dHVyZV91bmlmb3Jtcyhwb3N0X2NhbnZhc19wcm9ncmFtKVxuXG5cdFx0YnJ1c2hfbG9uZ19wcm9ncmFtLnVzZSgpXG5cdFx0aW5pdF90ZXh0dXJlX3VuaWZvcm1zKGJydXNoX2xvbmdfcHJvZ3JhbSlcblx0XHQvL0B0cy1pZ25vcmVcblx0XHRicnVzaF9sb25nX3Byb2dyYW0uYnJ1c2hfdGV4dHVyZV9pZHhfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKGJydXNoX2xvbmdfcHJvZ3JhbS5wcm9ncmFtLCBcImJydXNoX3RleHR1cmVfaWR4XCIpXG5cdFx0Ly9AdHMtaWdub3JlXG5cdFx0YnJ1c2hfbG9uZ19wcm9ncmFtLnRleF9oc3ZfZHluYW1pY3NfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKGJydXNoX2xvbmdfcHJvZ3JhbS5wcm9ncmFtLCBcInRleF9oc3ZfZHluYW1pY3NcIilcblx0XHQvL0B0cy1pZ25vcmVcblx0XHRicnVzaF9sb25nX3Byb2dyYW0udGV4X3N0cmV0Y2hfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKGJydXNoX2xvbmdfcHJvZ3JhbS5wcm9ncmFtLCBcInRleF9zdHJldGNoXCIpXG5cdFx0XG5cblx0XHQvLyEgLS0tLS0tLS0tLS0tLS0tLS0tLSBQT1NUXG5cdFx0bGV0IGZyYW1lID0gMFxuXHRcdGNhbnZhc19yZWFkX3RleCA9IGNhbnZhc19mYi50ZXh0dXJlc1swXVxuXG5cblx0XHRsZXQgYnJ1c2hfYnVmZmVyID0gbmV3IFRoaW5nKFxuXHRcdFx0W25ldyBWZXJ0ZXhCdWZmZXIoNCwgZ2wuRkxPQVQpLCBuZXcgVmVydGV4QnVmZmVyKDQsIGdsLkZMT0FUKV0sXG5cdFx0XHRnbC5UUklBTkdMRVMsXG5cdFx0XHRicnVzaF9sb25nX3Byb2dyYW1cblx0XHQpXG5cdFx0Z2wuYmluZFZlcnRleEFycmF5KGJydXNoX2J1ZmZlci52YW8pXG5cdFx0XG5cblx0XHRsZXQgdDogbnVtYmVyID0gMFxuXHRcdGxldCBkZWx0YV90OiBudW1iZXIgPSAwXG5cdFx0bGV0IHJlZHJhd19uZWVkZWQgPSBmYWxzZVxuXHRcdGxldCByZWRyYXdpbmcgPSBmYWxzZVxuXG5cdFx0bGV0IHJlZG9faGlzdG9yeV9sZW5ndGggPSAwXG5cblx0XHRsZXQgYnJ1c2hfc3Ryb2tlID0gbmV3IEJydXNoU3Ryb2tlKFxuXHRcdFx0Y3Vycl9icnVzaC5zZWxlY3RlZF9icnVzaF90eXBlLCBcblx0XHRcdG5ldyBEcmF3UGFyYW1zKGN1cnJfYnJ1c2gudGV4X2R5bmFtaWNzLCBjdXJyX2JydXNoLnRleF9sY2hfZHluYW1pY3MsIGN1cnJfYnJ1c2gudGV4X3N0cmV0Y2gsIEJsZW5kaW5nQ29sb3VyU3BhY2UuUGlnbWVudHMpLFxuXHRcdFx0XHRjdXJyX2JydXNoLnNlbGVjdGVkX2JydXNoX3RleHR1cmVcblx0XHRcdClcblxuXG5cdFx0ZHJhd2VyID0gbmV3IERyYXdlcihcblx0XHRcdGdsLFxuXHRcdFx0Y2FudmFzX2ZiLnRleHR1cmVzWzBdLFxuXHRcdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlcixcblx0XHQpXG5cdFx0Y29uc3QgY29tcG9zaXRlX3N0cm9rZSA9ICgpID0+IHtcblx0XHRcdC8vIGdsLmRpc2FibGUoZ2wuQkxFTkQpXG5cdFx0XHRjYW52YXNfZmIuYmluZCgpXG5cdFx0XHRjYW52YXNfZmIuY2xlYXIoKVxuXG5cdFx0XHRjb25zdCBjb21wX3Byb2dyYW0gPSBjYW52YXNfZmIucG9uZ19pZHggPT09IDAgPyBjb21wb3NpdGVfc3Ryb2tlX3RvX2NhbnZhc19wcm9ncmFtIDogY29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfYl9wcm9ncmFtXG5cdFx0XHRpZihjYW52YXNfZmIucG9uZ19pZHggPT09IDApe1xuXHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdGNvbXBfcHJvZ3JhbS51c2UoKVxuXHRcdFx0Ly8gY29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfcHJvZ3JhbS5zZXRVbmlmb3JtRmxvYXQoXCJwb25nX2lkeFwiLCBjYW52YXNfZmIucG9uZ19pZHgpXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRnbC51bmlmb3JtMWkoY29tcF9wcm9ncmFtLmJsZW5kaW5nX2NvbG91cl9zcGFjZV9sb2MsIGJsZW5kaW5nX2NvbG91cl9zcGFjZSlcblx0XHRcdGNhbnZhc19mYi5iYWNrX3RleHR1cmVzWzBdLmJpbmRfdG9fdW5pdCgxKVxuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNClcblx0XHRcdHRlbXBfc3Ryb2tlX2ZiLmNsZWFyKClcblx0XHR9XG5cdFx0XG5cdFx0Y29uc3QgZHJhd19uX3N0cm9rZXMgPSAoc3RhcnRfaWR4OiBudW1iZXIgfCB1bmRlZmluZWQsIGVuZF9pZHg6IG51bWJlciB8IHVuZGVmaW5lZCwgZnVsbF9yZWRyYXc6IGJvb2xlYW4gPSBmYWxzZSk9Pntcblx0XHRcdGxldCBrID0gMFxuXHRcdFx0XG5cdFx0XHRkcmF3ZXIuYnJ1c2hfYnVmZmVyID0gYnJ1c2hfYnVmZmVyXG5cdFx0XHRkcmF3ZXIucmVzZXQoKVxuXHRcdFx0XG5cdFx0XHRzdGFydF9pZHggPSBzdGFydF9pZHggPz8gMFxuXHRcdFx0ZW5kX2lkeCA9IGVuZF9pZHggPz8gcHJvamVjdC5icnVzaF9zdHJva2VzLmxlbmd0aFxuXHRcdFx0XG5cblx0XHRcdC8vIGNvbnN0IHN0YXJ0X2lkeCA9IHByb2plY3QuYnJ1c2hfc3Ryb2tlcy5sZW5ndGggLSBzdHJva2VfY250XG5cdFx0XHQvLyBjb25zdCBlbmRfaWR4ID0gcHJvamVjdC5icnVzaF9zdHJva2VzLmxlbmd0aCAtIHN0cm9rZV9jbnRcblx0XHRcdGZvcihrID0gc3RhcnRfaWR4OyBrIDwgZW5kX2lkeDsgaysrKXtcblx0XHRcdFx0ZHJhd2VyLnB1c2hfYW55X3N0cm9rZShwcm9qZWN0LmJydXNoX3N0cm9rZXNba10pXG5cdFx0XHR9XG5cblx0XHRcdGRyYXdlci5icnVzaF9idWZmZXIudXBsb2FkX2FsbF9idWZmcygpXG5cdFx0XHRjb25zdCBicnVzaF9zaGFkZXIgPSBkcmF3ZXIuYnJ1c2hfYnVmZmVyLnNoYWRlclxuXHRcdFx0YnJ1c2hfc2hhZGVyLnVzZSgpXG5cblx0XHRcdGxldCBwcmV2X2NvbG91cl9zcGFjZSA9IC0xXG5cdFx0XHRsZXQgcHJldl9jb2xvdXJfc3BhY2VfYiA9IC0xXG5cdFx0XHRsZXQgcHJldl9icnVzaF90ZXhfaWR4ID0gLTFcblx0XHRcdFxuXHRcdFx0bGV0IHByZXZfaHN2X2R5bmFtaWNzID0gWzAsMCwwXVxuXHRcdFx0bGV0IHByZXZfdGV4X3N0cmV0Y2ggPSBbMCwwXVxuXG5cdFx0XHRnbC51c2VQcm9ncmFtKGNvbXBvc2l0ZV9zdHJva2VfdG9fY2FudmFzX3Byb2dyYW0ucHJvZ3JhbSlcblxuXHRcdFx0Y2FudmFzX2ZiLl90ZXh0dXJlc1swXS5iaW5kX3RvX3VuaXQoMilcblx0XHRcdGNhbnZhc19mYi5fYmFja190ZXh0dXJlc1swXS5iaW5kX3RvX3VuaXQoMylcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMTUpXG5cdFx0XHRsZXQgY29tcF9wcm9ncmFtID0gY29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfcHJvZ3JhbVxuXHRcdFx0Z2wuY2xlYXJDb2xvcigwLDAsMCwwKVxuXHRcdFx0Z2wudmlld3BvcnQoMCwgMCwgcHJvamVjdC5jYW52YXNSZXNbMF0sIHByb2plY3QuY2FudmFzUmVzWzFdKVxuXG5cdFx0XHRrID0gc3RhcnRfaWR4XG5cdFx0XHRsZXQgaiA9IDBcblx0XHRcdGZvcihsZXQgYW1vZ3VzIG9mIGRyYXdlci5yZWNvcmRlZF9kcmF3Y2FsbHMpe1xuXHRcdFx0XHRjb25zdCBuZXdfdGV4X3N0cmV0Y2ggPSBwcm9qZWN0LmJydXNoX3N0cm9rZXNba10uZHJhd19wYXJhbXMudGV4X3N0cmV0Y2hcblx0XHRcdFx0Y29uc3QgbmV3X2hzdl9keW5hbWljcyA9IHByb2plY3QuYnJ1c2hfc3Ryb2tlc1trXS5kcmF3X3BhcmFtcy50ZXhfbGNoX2R5bmFtaWNzXG5cblx0XHRcdFx0Y29uc3QgbmV3X2JydXNoX3RleF9pZHggPSBwcm9qZWN0LmJydXNoX3N0cm9rZXNba10uYnJ1c2hfdGV4dHVyZS5pZHhcblx0XHRcdFx0Y29uc3QgbmV3X2NvbF9zcGFjZSA9IHByb2plY3QuYnJ1c2hfc3Ryb2tlc1trXS5kcmF3X3BhcmFtcy5ibGVuZGluZ19jb2xvdXJfc3BhY2VcblxuXHRcdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRlbXBfc3Ryb2tlX2ZiLmZiKVxuXHRcdFx0XHRnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKVxuXG5cdFx0XHRcdGJydXNoX3NoYWRlci51c2UoKVxuXG5cdFx0XHRcdGlmKG5ld19icnVzaF90ZXhfaWR4ICE9PSBwcmV2X2JydXNoX3RleF9pZHgpe1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRnbC51bmlmb3JtMWkoYnJ1c2hfc2hhZGVyLmJydXNoX3RleHR1cmVfaWR4X2xvYywgcHJldl9icnVzaF90ZXhfaWR4ID0gbmV3X2JydXNoX3RleF9pZHggKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKFxuXHRcdFx0XHRcdHByZXZfaHN2X2R5bmFtaWNzWzBdICE9PSBuZXdfaHN2X2R5bmFtaWNzWzBdIHx8IFxuXHRcdFx0XHRcdHByZXZfaHN2X2R5bmFtaWNzWzFdICE9PSBuZXdfaHN2X2R5bmFtaWNzWzFdIHx8IFxuXHRcdFx0XHRcdHByZXZfaHN2X2R5bmFtaWNzWzJdICE9PSBuZXdfaHN2X2R5bmFtaWNzWzJdIFxuXHRcdFx0XHQpe1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRnbC51bmlmb3JtM2Z2KGJydXNoX3NoYWRlci50ZXhfaHN2X2R5bmFtaWNzX2xvYywgcHJvamVjdC5icnVzaF9zdHJva2VzW2tdLmRyYXdfcGFyYW1zLnRleF9sY2hfZHluYW1pY3MgKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKFxuXHRcdFx0XHRcdHByZXZfdGV4X3N0cmV0Y2hbMF0gIT09IG5ld190ZXhfc3RyZXRjaFswXSB8fCBcblx0XHRcdFx0XHRwcmV2X3RleF9zdHJldGNoWzFdICE9PSBuZXdfdGV4X3N0cmV0Y2hbMV0gXG5cdFx0XHRcdCl7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdGdsLnVuaWZvcm0yZnYoYnJ1c2hfc2hhZGVyLnRleF9zdHJldGNoX2xvYywgcHJvamVjdC5icnVzaF9zdHJva2VzW2tdLmRyYXdfcGFyYW1zLnRleF9zdHJldGNoIClcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRyYXdlci5kcmF3X3N0cm9rZV9pZHgoailcblxuXHRcdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGNhbnZhc19mYi5mYilcblxuXHRcdFx0XHRjb21wX3Byb2dyYW0gPSBjYW52YXNfZmIucG9uZ19pZHggPT09IDAgPyBjb21wb3NpdGVfc3Ryb2tlX3RvX2NhbnZhc19wcm9ncmFtIDogY29tcG9zaXRlX3N0cm9rZV90b19jYW52YXNfYl9wcm9ncmFtXG5cdFx0XHRcdGNvbXBfcHJvZ3JhbS51c2UoKVxuXG5cdFx0XHRcdGlmKGNhbnZhc19mYi5wb25nX2lkeCA9PT0gMCl7XG5cdFx0XHRcdFx0aWYobmV3X2NvbF9zcGFjZSAhPT0gcHJldl9jb2xvdXJfc3BhY2Upe1xuXHRcdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdFx0Z2wudW5pZm9ybTFpKGNvbXBfcHJvZ3JhbS5ibGVuZGluZ19jb2xvdXJfc3BhY2VfbG9jLCBwcmV2X2NvbG91cl9zcGFjZSA9IG5ld19jb2xfc3BhY2UpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmKG5ld19jb2xfc3BhY2UgIT09IHByZXZfY29sb3VyX3NwYWNlX2Ipe1xuXHRcdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdFx0Z2wudW5pZm9ybTFpKGNvbXBfcHJvZ3JhbS5ibGVuZGluZ19jb2xvdXJfc3BhY2VfbG9jLCBwcmV2X2NvbG91cl9zcGFjZV9iID0gbmV3X2NvbF9zcGFjZSlcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KVxuXG5cdFx0XHRcdGNhbnZhc19mYi5wb25nKClcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGZ1bGxfcmVkcmF3ICYmIGogPT09IGVuZF9pZHggLSAoZW5kX2lkeCAlIHVuZG9fY2FjaGVfc3RlcHMpIC0gMSl7XG5cdFx0XHRcdFx0Y29weV9mYl90b19mYihjYW52YXNfZmIuZmJfYmFjaywgdGVtcF91bmRvX2ZiLmZiLCBjYW52YXNfZmIuX3RleHR1cmVzWzBdLnJlcylcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cHJldl9oc3ZfZHluYW1pY3NbMF0gPSBuZXdfaHN2X2R5bmFtaWNzWzBdXG5cdFx0XHRcdHByZXZfaHN2X2R5bmFtaWNzWzFdID0gbmV3X2hzdl9keW5hbWljc1sxXVxuXHRcdFx0XHRwcmV2X2hzdl9keW5hbWljc1syXSA9IG5ld19oc3ZfZHluYW1pY3NbMl0gXG5cdFx0XHRcdHByZXZfdGV4X3N0cmV0Y2hbMF0gPSBuZXdfdGV4X3N0cmV0Y2hbMF1cblx0XHRcdFx0cHJldl90ZXhfc3RyZXRjaFsxXSA9IG5ld190ZXhfc3RyZXRjaFsxXVxuXHRcdFx0XHRrKytcblx0XHRcdFx0aisrXG5cdFx0XHR9XG5cdFx0XHRyZWRyYXdfbmVlZGVkID0gdHJ1ZVxuXHRcdFx0dGVtcF9zdHJva2VfZmIuY2xlYXIoKVxuXG5cdFx0fVxuXHRcdFxuXHRcdC8vIGNvbnN0IHJlZHJhd191bmRvX3N0cm9rZXMgPSAoKT0+e1xuXHRcdC8vIFx0Y29weV9mYl90b190ZXh0dXJlKHRlbXBfdW5kb19mYiwgY2FudmFzX2ZiLmJhY2tfdGV4dHVyZXNbMF0pXG5cdFx0Ly8gXHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGNhbnZhc19mYi5mYilcblx0XHQvLyBcdGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpXG5cdFx0Ly8gXHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRlbXBfc3Ryb2tlX2ZiLmZiKVxuXHRcdC8vIFx0Z2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVClcblxuXHRcdFx0XG5cdFx0Ly8gfVxuXG5cdFx0Y29uc3QgcmVkcmF3X3dob2xlX3Byb2plY3QgPSAoKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygnUkVEUkFXIEVWRVJZVEhJTkcnKVxuXHRcdFx0Y29uc29sZS50aW1lKFwiUkVEUkFXIEFMTFwiKVxuXHRcdFx0Y2FudmFzX2ZiLmNsZWFyKClcblx0XHRcdGNhbnZhc19mYi5wb25nKClcblx0XHRcdGNhbnZhc19mYi5iYWNrX3RleHR1cmVzWzBdLmJpbmRfdG9fdW5pdCgxKVxuXHRcdFx0Y2FudmFzX2ZiLmNsZWFyKClcblx0XHRcdHRlbXBfc3Ryb2tlX2ZiLmNsZWFyKClcblxuXG5cdFx0XHRkcmF3X25fc3Ryb2tlcygwLCBwcm9qZWN0LmJydXNoX3N0cm9rZXMubGVuZ3RoIC0gcmVkb19oaXN0b3J5X2xlbmd0aCwgdHJ1ZSlcblxuXHRcdFx0Y29uc29sZS50aW1lRW5kKFwiUkVEUkFXIEFMTFwiKVxuXHRcdH1cblx0XHRyZXNpemVfcHJvamVjdCA9IChuZXdfc3o6IG51bWJlcltdKTogdm9pZCA9PiB7XG5cdFx0XHRwcm9qZWN0LmNhbnZhc1JlcyA9IFsuLi5uZXdfc3pdXG5cdFx0XHR0ZW1wX3N0cm9rZV9mYi50ZXh0dXJlc1swXS5yZXNpemUobmV3X3N6KVxuXHRcdFx0Y2FudmFzX2ZiLmJhY2tfdGV4dHVyZXNbMF0ucmVzaXplKG5ld19zeilcblx0XHRcdGNhbnZhc19mYi50ZXh0dXJlc1swXS5yZXNpemUobmV3X3N6KVxuXHRcdFx0Y2FudmFzX2ZiLnJlY3JlYXRlKClcblx0XHRcdGNhbnZhc19mYi5iYWNrX3RleHR1cmVzWzBdLmJpbmRfdG9fdW5pdCgxKVxuXHRcdFx0dGVtcF9zdHJva2VfZmIucmVjcmVhdGUoKVxuXHRcdFx0dGVtcF9zdHJva2VfZmIudGV4dHVyZXNbMF0uYmluZF90b191bml0KDApXG5cdFx0XHR0ZW1wX3VuZG9fZmIudGV4dHVyZXNbMF0ucmVzaXplKG5ld19zeilcblx0XHRcdHRlbXBfdW5kb19mYi5yZWNyZWF0ZSgpXG5cdFx0XHRzZXRfc2hhcmVkX3VuaWZvcm1zKClcblx0XHRcdGZ1bGxfcmVkcmF3X25lZWRlZCA9IHRydWVcblx0XHRcdHByb2plY3RfaGFzX2JlZW5fbW9kaWZpZWQgPSBmYWxzZVxuXHRcdFx0cmVkb19oaXN0b3J5X2xlbmd0aCA9IDBcblx0XHR9XG5cdFx0XG5cdFx0bGV0IGxvYWRfcHJvamVjdCA9IChuZXdfcHJvamVjdDogUHJvamVjdCkgPT57XG5cdFx0XHRwcm9qZWN0ID0gbmV3IFByb2plY3QoKVxuXHRcdFx0cHJvamVjdF9oYXNfYmVlbl9tb2RpZmllZCA9IGZhbHNlXG5cdFx0XHRyZWRvX2hpc3RvcnlfbGVuZ3RoID0gMFxuXHRcdFx0Zm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKG5ld19wcm9qZWN0IGFzIE9iamVjdCkpIHtcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRwcm9qZWN0W2tleV0gPSBuZXdfcHJvamVjdFtrZXldXG5cdFx0XHR9XG5cdFx0XHRwcm9qZWN0LmNhbnZhc1JlcyA9IFsuLi5uZXdfcHJvamVjdC5jYW52YXNSZXNdXG5cdFx0XHRyZXNpemVfcHJvamVjdChwcm9qZWN0LmNhbnZhc1Jlcylcblx0XHRcdHJlZHJhd193aG9sZV9wcm9qZWN0KClcblx0XHR9XG5cdFx0bGV0IGxvY2FsX3N0b3JhZ2VfcHJvaiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0JylcblxuXHRcdGlmIChsb2NhbF9zdG9yYWdlX3Byb2opIHtcblx0XHRcdGxvY2FsX3N0b3JhZ2VfcHJvaiA9IEpTT04ucGFyc2UobG9jYWxfc3RvcmFnZV9wcm9qKVxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0bG9hZF9wcm9qZWN0KGxvY2FsX3N0b3JhZ2VfcHJvailcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gbG9hZF9wcm9qZWN0KG5ldyBQcm9qZWN0KCkpXG5cdFx0XHRsb2FkX3Byb2plY3QobmV3IFByb2plY3QoKSlcblx0XHR9XG5cdFx0XG5cdFx0Y29uc3QgaGFuZGxlX2lucHV0X2FjdGlvbnMgPSAoKT0+e1xuXHRcdFx0aWYgKGlvLmdldEtleSgnQWx0TGVmdCcpLmRvd24pIHtcblx0XHRcdFx0aWYgKGlvLmdldEtleSgnQWx0TGVmdCcpLmp1c3RfcHJlc3NlZCkge1xuXHRcdFx0XHRcdHBpY2tpbmcgPSB0cnVlXG5cdFx0XHRcdH1cblx0XHRcdFx0cGlja19mcm9tX2NhbnZhcygpXG5cdFx0XHR9IGVsc2UgaWYgKGlvLmdldEtleSgnQWx0TGVmdCcpLmp1c3RfdW5wcmVzc2VkKSB7XG5cdFx0XHRcdGp1c3RfZmluaXNoZWRfcGljayA9IHRydWVcblx0XHRcdFx0cGlja2luZyA9IGZhbHNlXG5cdFx0XHR9XG5cblx0XHRcdHJlZHJhd19uZWVkZWQgPSB0cnVlIC8vIFRPUkVNT1ZFXG5cblx0XHRcdGlmKGlvLmp1c3RfZmluaXNoZWRfcGluY2gpe1xuXHRcdFx0XHR6b29tWzBdID0gZGVzaXJlZF96b29tID0gcG93KDIsIGxvZzIoZGVzaXJlZF96b29tKSArIGlvLnBpbmNoX3pvb20pXG5cdFx0XHR9XG5cdFx0XHRpZihpby50d29fZmluZ2VyX3BpbmNoKXtcblx0XHRcdFx0cmVkcmF3X25lZWRlZCA9IHRydWVcblx0XHRcdFx0em9vbVswXSA9IHBvdygyLGxvZzIoZGVzaXJlZF96b29tKSAgKyBpby5waW5jaF96b29tKVxuXHRcdFx0XHRpZihpby5qdXN0X3N0YXJ0ZWRfcGluY2gpe1xuXHRcdFx0XHRcdHBhbm5pbmdfdGVtcF9waW5jaFswXSA9IHBhbm5pbmdbMF1cblx0XHRcdFx0XHRwYW5uaW5nX3RlbXBfcGluY2hbMV0gPSBwYW5uaW5nWzFdXG5cdFx0XHRcdH1cblx0XHRcdFx0cGFubmluZ1swXSA9IHBhbm5pbmdfdGVtcF9waW5jaFswXSArIGlvLnBpbmNoX3Bvc1swXVxuXHRcdFx0XHRwYW5uaW5nWzFdID0gcGFubmluZ190ZW1wX3BpbmNoWzFdIC0gaW8ucGluY2hfcG9zWzFdXG5cdFx0XHR9IGVsc2UgaWYoYWJzKGRlc2lyZWRfem9vbSAtIHpvb21bMF0pID4gMC4wMDAwMDAwMSApe1xuXHRcdFx0XHRyZWRyYXdfbmVlZGVkID0gdHJ1ZVxuXHRcdFx0XHR6b29tWzBdID0gbWl4KHpvb21bMF0sZGVzaXJlZF96b29tLGRlbHRhX3QqMjApXG5cdFx0XHR9XG5cdFx0XHRpZiAoZnJhbWUgPT09IDAgfHwgcGlja2luZyB8fCBqdXN0X2ZpbmlzaGVkX3BpY2sgfHwgaW8ubW91c2Vfd2hlZWwgfHwgaW8ubW1iX2Rvd24pIHtcblx0XHRcdFx0cmVkcmF3X25lZWRlZCA9IHRydWVcblx0XHRcdFx0aWYgKGp1c3RfZmluaXNoZWRfcGljaykge1xuXHRcdFx0XHRcdGxldCBjb29yZHMgPSBVdGlscy5zY3JlZW5fTkRDX3RvX2NhbnZhc19OREMoXG5cdFx0XHRcdFx0XHRbLi4uaW8ubW91c2VfcG9zXSxcblx0XHRcdFx0XHRcdGRlZmF1bHRfZnJhbWVidWZmZXIudGV4dHVyZXNbMF0sXG5cdFx0XHRcdFx0XHRjYW52YXNfZmIuX3RleHR1cmVzWzBdLFxuXHRcdFx0XHRcdFx0em9vbVswXSxcblx0XHRcdFx0XHRcdHBhbm5pbmcsXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHRcdGlmIChjb29yZHNbMF0gPiAwICYmIGNvb3Jkc1swXSA8IDEgJiYgY29vcmRzWzFdID4gMCAmJiBjb29yZHNbMV0gPCAxKSB7XG5cdFx0XHRcdFx0XHQvLyBzdHJva2VfY29sID0gWy4uLnBpY2tlZF9jb2xdXG5cdFx0XHRcdFx0XHRzdHJva2VfY29sWzBdID0gcGlja2VkX2NvbFswXVxuXHRcdFx0XHRcdFx0c3Ryb2tlX2NvbFsxXSA9IHBpY2tlZF9jb2xbMV1cblx0XHRcdFx0XHRcdHN0cm9rZV9jb2xbMl0gPSBwaWNrZWRfY29sWzJdXG5cdFx0XHRcdFx0XHRVdGlscy5nYW1tYV9jb3JyZWN0KHN0cm9rZV9jb2wsIHRydWUsIHRydWUpXG5cdFx0XHRcdFx0XHRzdHJva2VfY29sWzNdID0gMVxuXHRcdFx0XHRcdFx0Ly8gc3Ryb2tlX2NvbCA9IFsuLi5zdHJva2VfY29sXVxuXHRcdFx0XHRcdFx0anVzdF9maW5pc2hlZF9waWNrID0gZmFsc2Vcblx0XHRcdFx0XHRcdHRyaWdnZXJfY29sb3VyX2Rpc3BsYXlfdXBkYXRlKHN0cm9rZV9jb2xbMF0sIHN0cm9rZV9jb2xbMV0sIHN0cm9rZV9jb2xbMl0pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpby5tbWJfZG93bikge1xuXHRcdFx0XHRcdHBhbm5pbmdbMF0gKz0gaW8uZGVsdGFfbW91c2VfcG9zWzBdIC8gem9vbVswXVxuXHRcdFx0XHRcdHBhbm5pbmdbMV0gKz0gaW8uZGVsdGFfbW91c2VfcG9zWzFdIC8gem9vbVswXVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpby5tb3VzZV93aGVlbCkge1xuXHRcdFx0XHRcdGlmIChpby5tb3VzZV93aGVlbCA+IDApIHtcblx0XHRcdFx0XHRcdGRlc2lyZWRfem9vbSAqPSAxLjJcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGVzaXJlZF96b29tIC89IDEuMlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyAtLS0tLSBVTkRPX1JFRE9cblx0XHRcdGxldCBsX2N0cmxfZG93biA9IGlvLmdldEtleSgnQ29udHJvbExlZnQnKS5kb3duXG5cdFx0XHRsZXQgbF9zaGlmdF9kb3duID0gaW8uZ2V0S2V5KCdTaGlmdExlZnQnKS5kb3duXG5cdFx0XHRsZXQgel9qdXN0X3ByZXNzZWQgPSBpby5nZXRLZXkoJ0tleVonKS5qdXN0X3ByZXNzZWRcblx0XHRcdGNvbnN0IGlkeF9iZWZvcmUgPSBwcm9qZWN0LmJydXNoX3N0cm9rZXMubGVuZ3RoIC0gcmVkb19oaXN0b3J5X2xlbmd0aFxuXHRcdFx0aWYgKHJlZG9fcGVuZGluZyB8fCAobF9zaGlmdF9kb3duICYmIGxfY3RybF9kb3duICYmIHpfanVzdF9wcmVzc2VkKSkge1xuXHRcdFx0XHRyZWRvX2hpc3RvcnlfbGVuZ3RoIC09IDFcblx0XHRcdFx0Y29uc3QgaWR4X25vdyA9IGlkeF9iZWZvcmUgKyAxXG5cdFx0XHRcdGlmIChyZWRvX2hpc3RvcnlfbGVuZ3RoID49IDApIHsgXG5cdFx0XHRcdFx0aWYoaWR4X25vdyAlIHVuZG9fY2FjaGVfc3RlcHMgPT09IDApe1xuXHRcdFx0XHRcdFx0Ly8gdGVtcF91bmRvX2ZiLmNsZWFyKClcblx0XHRcdFx0XHRcdHRlbXBfc3Ryb2tlX2ZiLmNsZWFyKClcblx0XHRcdFx0XHRcdGRyYXdfbl9zdHJva2VzKGlkeF9iZWZvcmUsIGlkeF9iZWZvcmUgKyAxKVxuXHRcdFx0XHRcdFx0Y29weV9mYl90b19mYihjYW52YXNfZmIuZmJfYmFjayx0ZW1wX3VuZG9fZmIuZmIsIGNhbnZhc19mYi50ZXh0dXJlc1swXS5yZXMpXG5cdFx0XHRcdFx0XHQvLyBkcmF3X25fc3Ryb2tlcyggaWR4IC0gdW5kb19jYWNoZV9zdGVwcyAtIDEsIHByb2plY3QuYnJ1c2hfc3Ryb2tlcy5sZW5ndGggLSByZWRvX2hpc3RvcnlfbGVuZ3RoKVxuXHRcdFx0XHRcdFx0Ly8gdGVtcF91bmRvX2ZiLmJpbmQoKVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0ZW1wX3N0cm9rZV9mYi5jbGVhcigpXG5cdFx0XHRcdFx0XHRkcmF3X25fc3Ryb2tlcyhpZHhfYmVmb3JlLCBpZHhfYmVmb3JlICsgMSlcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7IFxuXHRcdFx0XHRcdC8vIGNsYW1wXG5cdFx0XHRcdFx0cmVkb19oaXN0b3J5X2xlbmd0aCA9IDAgXG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodW5kb19wZW5kaW5nIHx8IChsX2N0cmxfZG93biAmJiB6X2p1c3RfcHJlc3NlZCkpIHtcblx0XHRcdFx0cmVkb19oaXN0b3J5X2xlbmd0aCArPSAxXG5cdFx0XHRcdGNvbnN0IGlkeF9ub3cgPSBpZHhfYmVmb3JlIC0gMVxuXHRcdFx0XHRpZiAocmVkb19oaXN0b3J5X2xlbmd0aCA8PSBwcm9qZWN0LmJydXNoX3N0cm9rZXMubGVuZ3RoKSB7IFxuXHRcdFx0XHRcdGlmKGlkeF9iZWZvcmUgJSB1bmRvX2NhY2hlX3N0ZXBzID09PSAwKXtcblx0XHRcdFx0XHRcdC8vIHJlZHJhdyBhbGxcblx0XHRcdFx0XHRcdGNhbnZhc19mYi5jbGVhcigpXG5cdFx0XHRcdFx0XHRjYW52YXNfZmIucG9uZygpXG5cdFx0XHRcdFx0XHRjYW52YXNfZmIuYmFja190ZXh0dXJlc1swXS5iaW5kX3RvX3VuaXQoMSlcblx0XHRcdFx0XHRcdGNhbnZhc19mYi5jbGVhcigpXG5cdFx0XHRcdFx0XHR0ZW1wX3N0cm9rZV9mYi5jbGVhcigpXG5cdFx0XHRcdFx0XHRkcmF3X25fc3Ryb2tlcygwLCBpZHhfYmVmb3JlIC0gdW5kb19jYWNoZV9zdGVwcylcblx0XHRcdFx0XHRcdGNvcHlfZmJfdG9fZmIoY2FudmFzX2ZiLmZiX2JhY2ssdGVtcF91bmRvX2ZiLmZiLCBjYW52YXNfZmIudGV4dHVyZXNbMF0ucmVzKVxuXHRcdFx0XHRcdFx0dGVtcF9zdHJva2VfZmIuY2xlYXIoKVxuXHRcdFx0XHRcdFx0ZHJhd19uX3N0cm9rZXMoIGlkeF9iZWZvcmUgLSB1bmRvX2NhY2hlX3N0ZXBzLCBwcm9qZWN0LmJydXNoX3N0cm9rZXMubGVuZ3RoIC0gcmVkb19oaXN0b3J5X2xlbmd0aClcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29weV9mYl90b19mYih0ZW1wX3VuZG9fZmIuZmIsY2FudmFzX2ZiLmZiX2JhY2ssIGNhbnZhc19mYi50ZXh0dXJlc1swXS5yZXMpXG5cdFx0XHRcdFx0XHRjYW52YXNfZmIuYmFja190ZXh0dXJlc1swXS5iaW5kX3RvX3VuaXQoMSlcblx0XHRcdFx0XHRcdHRlbXBfc3Ryb2tlX2ZiLmNsZWFyKClcblx0XHRcdFx0XHRcdGNvbnN0IHVuZG9fbW9kX29mZnMgPSBpZHhfbm93ICUgdW5kb19jYWNoZV9zdGVwc1xuXHRcdFx0XHRcdFx0ZHJhd19uX3N0cm9rZXMoIGlkeF9ub3cgLSB1bmRvX21vZF9vZmZzLCBwcm9qZWN0LmJydXNoX3N0cm9rZXMubGVuZ3RoIC0gcmVkb19oaXN0b3J5X2xlbmd0aClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Z2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMTUpXG5cdFx0XHRcdH0gZWxzZSB7IFxuXHRcdFx0XHRcdC8vIGNsYW1wXG5cdFx0XHRcdFx0cmVkb19oaXN0b3J5X2xlbmd0aCAtPSAxIFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IHJlY29yZF9zdHJva2UgPSAoKT0+e1xuXHRcdFx0XHRpZiAoaW8ubW91c2VfanVzdF9wcmVzc2VkICYmICEocmVkb19wZW5kaW5nIHx8IHVuZG9fcGVuZGluZykpIHtcblx0XHRcdFx0XHRicnVzaF9zdHJva2UgPSBuZXcgQnJ1c2hTdHJva2UoY3Vycl9icnVzaC5zZWxlY3RlZF9icnVzaF90eXBlLCBuZXcgRHJhd1BhcmFtcyhcblx0XHRcdFx0XHRcdGN1cnJfYnJ1c2gudGV4X2R5bmFtaWNzLCBjdXJyX2JydXNoLnRleF9sY2hfZHluYW1pY3MsIGN1cnJfYnJ1c2gudGV4X3N0cmV0Y2gsXG5cdFx0XHRcdFx0XHRibGVuZGluZ19jb2xvdXJfc3BhY2Vcblx0XHRcdFx0XHRcdCksIGN1cnJfYnJ1c2guc2VsZWN0ZWRfYnJ1c2hfdGV4dHVyZSlcblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJlZG9faGlzdG9yeV9sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0cHJvamVjdC5icnVzaF9zdHJva2VzLnBvcCgpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlZG9faGlzdG9yeV9sZW5ndGggPSAwXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coYnJ1c2hfc3Ryb2tlKVxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdTRVQgUkVETyBISVNUT1JZIFRPIDAnKVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJ1c2hfcm90ID0gWy4uLmlvLnRpbHRdXG5cblx0XHRcdFx0Zm9yKGxldCBpID0gMDsgaSA8IGlvLm1vdXNlX3Bvc2l0aW9uc19kdXJpbmdfbGFzdF9mcmFtZV9jbnQ7IGkrKyl7XG5cdFx0XHRcdFx0Ly8gYnJ1c2hfcG9zX25kY19zY3JlZW4gPSBbLi4uaW8ubW91c2VfcG9zXVxuXHRcdFx0XHRcdGJydXNoX3Bvc19uZGNfc2NyZWVuID0gW1xuXHRcdFx0XHRcdFx0aW8ubW91c2VfcG9zaXRpb25zX2R1cmluZ19sYXN0X2ZyYW1lW2kqMl0sXG5cdFx0XHRcdFx0XHRpby5tb3VzZV9wb3NpdGlvbnNfZHVyaW5nX2xhc3RfZnJhbWVbaSoyICsgMV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0YnJ1c2hfcG9zX25kY19jYW52YXMgPSBVdGlscy5zY3JlZW5fTkRDX3RvX2NhbnZhc19OREMoXG5cdFx0XHRcdFx0XHRicnVzaF9wb3NfbmRjX3NjcmVlbixcblx0XHRcdFx0XHRcdGRlZmF1bHRfZnJhbWVidWZmZXIudGV4dHVyZXNbMF0sXG5cdFx0XHRcdFx0XHRjYW52YXNfcmVhZF90ZXgsXG5cdFx0XHRcdFx0XHR6b29tWzBdLFxuXHRcdFx0XHRcdFx0cGFubmluZyxcblx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0YnJ1c2hfcG9zX25kY19jYW52YXNbMF0gKz0gY3Vycl9icnVzaC5wb3Nfaml0dGVyICogKDIgKiBoYXNoLnZhbHVlTm9pc2VTbW9vdGgodCAqIDEwMCArIDI1MSwgMikgLSAxKVxuXHRcdFx0XHRcdGJydXNoX3Bvc19uZGNfY2FudmFzWzFdICs9IGN1cnJfYnJ1c2gucG9zX2ppdHRlciAqICgyICogaGFzaC52YWx1ZU5vaXNlU21vb3RoKHQgKiAxMDAgKyAxMjUxLCAyKSAtIDEpXG5cblx0XHRcdFx0XHRsZXQgY29sID0gWy4uLnN0cm9rZV9jb2xdXG5cblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRjb25zdCBjaHJvbWFfZ2wgPSAoY29sOiBudW1iZXJbXSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY2hyb21hLmdsKGNvbFswXSwgY29sWzFdLCBjb2xbMl0pXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb25zdCBjaHJvbWFfb2tsY2ggPSAoY29sOiBudW1iZXJbXSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY2hyb21hLm9rbGNoKGNvbFswXSwgY29sWzFdLCBjb2xbMl0pXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y29sID0gY2hyb21hX2dsKGNvbCkub2tsY2goKVxuXHRcdFx0XHRcdFx0Y29uc3QgYyA9IGNvbFsxXVxuXG5cdFx0XHRcdFx0XHRsZXQgaHVlX2ppdHRfYW10ID0gKDEtcG93KGMgLDAuMikqMS4yKSo0XG5cdFx0XHRcdFx0XHRodWVfaml0dF9hbXQgPSBtYXgoaHVlX2ppdHRfYW10LDApXG5cdFx0XHRcdFx0XHRodWVfaml0dF9hbXQgKz0gcG93KHNtb290aHN0ZXAoMC4sMS4sMS1jKSAsNTcuKSoyLjJcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRjb2xbMF0gKz0gKC0wLjUgKyBoYXNoLnZhbHVlTm9pc2VTbW9vdGgodCAqIDEwMCAqIGN1cnJfYnJ1c2guY2hhb3Nfc3BlZWQsIDIpKSAqIGN1cnJfYnJ1c2guY2hhb3MgKiBjdXJyX2JydXNoLmNoYW9zX2xjaFswXVxuXHRcdFx0XHRcdFx0Y29sWzFdICs9ICgtMC41ICsgaGFzaC52YWx1ZU5vaXNlU21vb3RoKHQgKiAxMDAgKiBjdXJyX2JydXNoLmNoYW9zX3NwZWVkICsgMTAwLCAyKSkgKiBjdXJyX2JydXNoLmNoYW9zICogY3Vycl9icnVzaC5jaGFvc19sY2hbMV0gXG5cdFx0XHRcdFx0XHRjb2xbMl0gKz0gaHVlX2ppdHRfYW10KigtMC41ICsgaGFzaC52YWx1ZU5vaXNlU21vb3RoKHQgKiAxMDAgKiBjdXJyX2JydXNoLmNoYW9zX3NwZWVkICsgMjAwLCAyKSkgKiAzMDAgKiBjdXJyX2JydXNoLmNoYW9zICogY3Vycl9icnVzaC5jaGFvc19sY2hbMl1cblx0XHRcdFx0XHRcdGNvbFswXSA9IGNsYW1wKGNvbFswXSwgMCwgMSlcblx0XHRcdFx0XHRcdGNvbFsxXSA9IGNsYW1wKGNvbFsxXSwgMCwgMSlcblx0XHRcdFx0XHRcdGNvbFsyXSA9IG1vZChjb2xbMl0sIDM2MClcblxuXHRcdFx0XHRcdFx0Y29sID0gY2hyb21hX29rbGNoKGNvbCkuZ2woKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRzdHJva2Vfb3BhY2l0eSA9IGxlcnAoY3Vycl9icnVzaC5zdHJva2Vfb3BhY2l0eV9keW5hbWljc1swXSwgY3Vycl9icnVzaC5zdHJva2Vfb3BhY2l0eV9keW5hbWljc1sxXSwgaW8ucHJlc3N1cmUpXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJ1c2hfcm90WzFdICs9IDEwKmN1cnJfYnJ1c2gucm90X2ppdHRlciAqICgyICogaGFzaC52YWx1ZU5vaXNlU21vb3RoKHQgKiAxMCArIDEwMCwgMikgLSAxKVxuXG5cdFx0XHRcdFx0bGV0IHN6ID0gWy4uLmJydXNoX3N6XVxuXG5cdFx0XHRcdFx0bGV0IHNpemVfcHJlc3N1cmVfd2VpZ2h0ID0gbGVycChjdXJyX2JydXNoLnN0cm9rZV9zaXplX2R5bmFtaWNzWzBdLGN1cnJfYnJ1c2guIHN0cm9rZV9zaXplX2R5bmFtaWNzWzFdLCBpby5wcmVzc3VyZSlcblx0XHRcdFx0XHRsZXQgc2l6ZV90aWx0X3dlaWdodCA9IGxlcnAoMC40LCAxLCBpby50aWx0WzBdIC8gdGF1KVxuXHRcdFx0XHRcdC8vIFRPRE86IHN6IGR5bmFtaWNzXG5cdFx0XHRcdFx0c3pbMF0gKj0gc2l6ZV9wcmVzc3VyZV93ZWlnaHQgKiBzaXplX3RpbHRfd2VpZ2h0XG5cdFx0XHRcdFx0c3pbMV0gKj0gc2l6ZV9wcmVzc3VyZV93ZWlnaHQgKiBzaXplX3RpbHRfd2VpZ2h0XG5cblx0XHRcdFx0XHRicnVzaF9zdHJva2UucHVzaF9zdHJva2UoYnJ1c2hfcG9zX25kY19jYW52YXMsIGJydXNoX3JvdCwgc3osIHN0cm9rZV9vcGFjaXR5LCBjb2wpXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBkcmF3ID0gKF90OiBudW1iZXIpID0+IHtcblx0XHRcdHJlZHJhd19uZWVkZWQgPSBmYWxzZVxuXHRcdFx0Y29uc3QgbmV3X3QgPSBfdCAvIDEwMDBcblx0XHRcdGRlbHRhX3QgPSBuZXdfdCAtIHRcblx0XHRcdHQgPSBuZXdfdFxuXHRcdFx0cmVzaXplRGVmYXVsdEZyYW1lYnVmZmVySWZOZWVkZWQoY2FudmFzRWxlbWVudCwgZGVmYXVsdF9mcmFtZWJ1ZmZlciwgdXNlckFnZW50UmVzLCAodjogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHRyZWRyYXdfbmVlZGVkID0gdlxuXHRcdFx0fSwoKT0+e3NldF9zaGFyZWRfdW5pZm9ybXMoKX0pXG5cdFx0XHRpby50aWNrKClcblx0XHRcdFxuXHRcdFx0aWYobmV3X3Byb2plY3RfcGVuZGluZyl7XG5cdFx0XHRcdGxvYWRfcHJvamVjdChuZXcgUHJvamVjdCgpKVxuXHRcdFx0XHRuZXdfcHJvamVjdF9wZW5kaW5nID0gZmFsc2Vcblx0XHRcdH1cblx0XHRcdGlmKHByb2plY3RfcGVuZGluZ19sb2FkKXtcblx0XHRcdFx0bG9hZF9wcm9qZWN0KHByb2plY3RfcGVuZGluZ19sb2FkKVxuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdHByb2plY3RfcGVuZGluZ19sb2FkID0gdW5kZWZpbmVkXG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGZ1bGxfcmVkcmF3X25lZWRlZCl7XG5cdFx0XHRcdHJlZHJhd193aG9sZV9wcm9qZWN0KClcblx0XHRcdH1cblxuXHRcdFx0aGFuZGxlX2lucHV0X2FjdGlvbnMoKVxuXG5cdFx0XHQvLyAtLS0tLSBSRUNPUkQgU1RST0tFIC8gRFJBV1xuXHRcdFx0aWYgKChpby5tb3VzZV9qdXN0X3ByZXNzZWQgfHwgKGlvLm1vdXNlX2Rvd24gJiYgaW8ubW91c2VfanVzdF9tb3ZlZCkpICYmIGlvLnBvaW50ZXJUeXBlICE9PSAndG91Y2gnKSB7XG5cdFx0XHRcdHByb2plY3RfaGFzX2JlZW5fbW9kaWZpZWQgPSB0cnVlXG5cdFx0XHRcdHJlZHJhd19uZWVkZWQgPSB0cnVlXG5cdFx0XHRcdHJlY29yZF9zdHJva2UoKVxuXHRcdFx0XHQvLyBnbC5lbmFibGUoZ2wuQkxFTkQpXG5cdFx0XHRcdHRlbXBfc3Ryb2tlX2ZiLmNsZWFyKClcblx0XHRcdFx0dGVtcF9zdHJva2VfZmIuYmluZCgpXG5cdFx0XHRcdC8vIGRyYXdlci5kcmF3X2FueV9zdHJva2UoYnJ1c2hfc3Ryb2tlLCB0LCBicnVzaF9idWZmZXIsIHpvb20sIHBhbm5pbmcpXG5cdFx0XHRcdGRyYXdlci5icnVzaF9idWZmZXIgPSBicnVzaF9idWZmZXJcblx0XHRcdFx0ZHJhd2VyLnJlc2V0KClcblx0XHRcdFx0ZHJhd2VyLnB1c2hfYW55X3N0cm9rZShicnVzaF9zdHJva2UpXG5cdFx0XHRcdGRyYXdlci5icnVzaF9idWZmZXIudXBsb2FkX2FsbF9idWZmcygpXG5cdFx0XHRcdGNvbnN0IGJydXNoX3NoYWRlciA9IGRyYXdlci5icnVzaF9idWZmZXIuc2hhZGVyXG5cdFx0XHRcdGJydXNoX3NoYWRlci51c2UoKVxuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdGdsLnVuaWZvcm0xaShicnVzaF9zaGFkZXIuYnJ1c2hfdGV4dHVyZV9pZHhfbG9jLCBjdXJyX2JydXNoLnNlbGVjdGVkX2JydXNoX3RleHR1cmUuaWR4IClcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRnbC51bmlmb3JtM2Z2KGJydXNoX3NoYWRlci50ZXhfaHN2X2R5bmFtaWNzX2xvYywgY3Vycl9icnVzaC50ZXhfbGNoX2R5bmFtaWNzIClcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRnbC51bmlmb3JtMmZ2KGJydXNoX3NoYWRlci50ZXhfc3RyZXRjaF9sb2MsIGN1cnJfYnJ1c2gudGV4X3N0cmV0Y2ggKVxuXHRcdFx0XHRkcmF3ZXIuZHJhd19zdHJva2VfaWR4KDApXG5cdFx0XHR9XG5cdFx0XHQvLyAtLS0tLSBDT01QT1NJVEUgTkVXIFNUUk9LRVxuXHRcdFx0aWYgKGlvLm1vdXNlX2p1c3RfdW5wcmVzc2VkICYmIGlvLnBvaW50ZXJUeXBlICE9PSAndG91Y2gnICYmICEodW5kb19wZW5kaW5nIHx8IHJlZG9fcGVuZGluZykpIHtcblx0XHRcdFx0aWYoZnJhbWUgJSAxNSA9PT0gMCB8fCAhaXNPbk1vYmlsZSl7XG5cdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3QnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0KSlcblx0XHRcdFx0XHQvLyBmbG9hdGluZ19tb2RhbF9tZXNzYWdlLnNldChcInNhdmVkXCIpXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYnJ1c2hfc3Ryb2tlKVxuXHRcdFx0XHRwcm9qZWN0LnB1c2hfc3Ryb2tlKGJydXNoX3N0cm9rZSlcblx0XHRcdFx0cmVkcmF3X25lZWRlZCA9IHRydWVcblx0XHRcdFx0Y29tcG9zaXRlX3N0cm9rZSgpXG5cdFx0XHRcdGNhbnZhc19mYi5wb25nKClcblx0XHRcdFx0Y2FudmFzX2ZiLmJhY2tfdGV4dHVyZXNbMF0uYmluZF90b191bml0KDEpXG5cdFx0XHRcdGlmKHByb2plY3QuYnJ1c2hfc3Ryb2tlcy5sZW5ndGggJSB1bmRvX2NhY2hlX3N0ZXBzID09PSAwKXtcblx0XHRcdFx0XHRjb3B5X2ZiX3RvX2ZiKGNhbnZhc19mYi5mYl9iYWNrLCB0ZW1wX3VuZG9fZmIuZmIsIGNhbnZhc19mYi50ZXh0dXJlc1swXS5yZXMpXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGJydXNoU2l6ZVdpZGdldERyYWdnaW5nIHx8IGJydXNoU2l6ZVdpZGdldFN0b3BwZWREcmFnZ2luZykgcmVkcmF3X25lZWRlZCA9IHRydWVcblxuXHRcdFx0Ly8gLS0tLS0gUkVEUkFXXG5cdFx0XHRpZiAocmVkcmF3X25lZWRlZCkge1xuXHRcdFx0XHQvLyBnbC5kaXNhYmxlKGdsLkJMRU5EKVxuXHRcdFx0XHRpZihjYW52YXNfZmIuX3RleHR1cmVzWzBdLm1pcG1hcHBlZCl7XG5cdFx0XHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgY2FudmFzX2ZiLl90ZXh0dXJlc1swXS50ZXgpXG5cdFx0XHRcdFx0Z2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRClcblx0XHRcdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBjYW52YXNfZmIuX2JhY2tfdGV4dHVyZXNbMF0udGV4KVxuXHRcdFx0XHRcdGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpXG5cdFx0XHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbClcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih0ZW1wX3N0cm9rZV9mYi50ZXh0dXJlc1swXS5taXBtYXBwZWQpe1xuXHRcdFx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRlbXBfc3Ryb2tlX2ZiLnRleHR1cmVzWzBdLnRleClcblx0XHRcdFx0XHRnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKVxuXHRcdFx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWZhdWx0X2ZyYW1lYnVmZmVyLmNsZWFyKFswLCAwLCAwLCAxXSlcblx0XHRcdFx0ZGVmYXVsdF9mcmFtZWJ1ZmZlci5iaW5kKClcblxuXHRcdFx0XHRwb3N0X2NhbnZhc19wcm9ncmFtLnVzZSgpXG5cblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRnbC51bmlmb3JtMWYocG9zdF9jYW52YXNfcHJvZ3JhbS56b29tX2xvYywgem9vbSlcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRnbC51bmlmb3JtMmZ2KHBvc3RfY2FudmFzX3Byb2dyYW0ucGFubmluZ19sb2MsIHBhbm5pbmcpXG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0Z2wudW5pZm9ybTFpKHBvc3RfY2FudmFzX3Byb2dyYW0uYmxlbmRpbmdfY29sb3VyX3NwYWNlX2xvYywgYmxlbmRpbmdfY29sb3VyX3NwYWNlKVxuXHRcdFx0XHRjYW52YXNfZmIuYmFja190ZXh0dXJlc1swXS5iaW5kX3RvX3VuaXQoMSlcblx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNClcblxuXHRcdFx0XHRpZiAoYnJ1c2hTaXplV2lkZ2V0RHJhZ2dpbmcpIHtcblx0XHRcdFx0XHRicnVzaF9wcmV2aWV3X3Byb2dyYW0udXNlKClcblx0XHRcdFx0XHRicnVzaF9wcmV2aWV3X3Byb2dyYW0uc2V0VW5pZm9ybUZsb2F0KFwiem9vbVwiLCB6b29tWzBdKVxuXHRcdFx0XHRcdGJydXNoX3ByZXZpZXdfcHJvZ3JhbS5zZXRVbmlmb3JtVmVjKFwiYnJ1c2hfc3pcIiwgYnJ1c2hfc3opXG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNClcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChwaWNraW5nKSB7XG5cdFx0XHRcdFx0cGlja2VyX3Byb2dyYW0udXNlKClcblx0XHRcdFx0XHRwaWNrZXJfcHJvZ3JhbS5zZXRVbmlmb3JtVmVjKCdwaWNrZWRfY29sJywgcGlja2VkX2NvbClcblx0XHRcdFx0XHRwaWNrZXJfcHJvZ3JhbS5zZXRVbmlmb3JtVmVjKCdwaWNrZXJfcG9zJywgWy4uLmlvLm1vdXNlX3Bvc10pXG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cHJpbnRfb25fZ2xfZXJyb3IoKVxuXHRcdFx0YnJ1c2hTaXplV2lkZ2V0U3RvcHBlZERyYWdnaW5nID0gZmFsc2Vcblx0XHRcdHJlZG9fcGVuZGluZyA9IGZhbHNlXG5cdFx0XHR1bmRvX3BlbmRpbmcgPSBmYWxzZVxuXHRcdFx0ZnVsbF9yZWRyYXdfbmVlZGVkID0gZmFsc2Vcblx0XHRcdGlvLnRpY2tfZW5kKClcblx0XHRcdGZyYW1lKytcblx0XHRcdGZvciAobGV0IGZyYW1lYnVmZmVyIG9mIEZyYW1lYnVmZmVyLmZyYW1lYnVmZmVycykge1xuXHRcdFx0XHRpZiAoZnJhbWVidWZmZXIubmVlZHNfcG9uZykge1xuXHRcdFx0XHRcdGZyYW1lYnVmZmVyLnBvbmcoKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdylcblx0XHR9XG5cdFx0OygoKSA9PiB7XG5cdFx0XHRkcmF3KDApXG5cdFx0fSkoKVxuXHR9KVxuXG5cdG9uRGVzdHJveSgoKSA9PiB7fSlcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cblx0Lmtub2ItY29udGFpbmVyIHtcblx0XHRwYWRkaW5nOiAxcmVtIDByZW07XG5cdH1cblx0KiB7XG5cdFx0KiB7XG5cdFx0XHRjb2xvcjogd2hpdGU7XG5cdFx0XHRmb250LWZhbWlseTogJ0pldGJyYWlucyBNb25vJztcblx0XHR9XG5cdH1cblx0bWFpbiB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHQjYmFyLWNvbnRhaW5lciB7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0I2JhciB7XG5cdFx0XHRcdD46Z2xvYmFsKGRpdikge1xuXHRcdFx0XHRcdG1heC1oZWlnaHQ6IDIuNXJlbTtcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdGZsZXgtd3JhcDogd3JhcDtcblx0XHRcdFx0YmFja2dyb3VuZDogYmxhY2s7XG5cdFx0XHRcdC8vIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdGhlaWdodDogMTAwcHg7XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdHBhZGRpbmc6IDByZW0gMXJlbTtcblx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0PiAqOmxhc3Qtb2YtdHlwZSB7XG5cdFx0XHRcdFx0bWFyZ2luLWxlZnQ6IGF1dG87XG5cdFx0XHRcdFx0bWFyZ2luLXJpZ2h0OiAwcHg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Y2FudmFzIHtcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHRtYXJnaW46IGF1dG87XG5cdFx0XHRwYWRkaW5nOiAwO1xuXHRcdFx0Ly8gYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuXHRcdH1cblx0fVxuPC9zdHlsZT5cbiIsImltcG9ydCAnLi4vcHVibGljL0pldEJyYWluc01vbm8tUmVndWxhci50dGYnXG5pbXBvcnQgJy4uL3B1YmxpYy9zdHlsZS5jc3MnXG5cbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL0FwcC5zdmVsdGUnXG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoe1xuXHR0YXJnZXQ6IGRvY3VtZW50LmJvZHksXG5cdHByb3BzOiB7fSxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGFwcFxuIl0sIm5hbWVzIjpbInN0cmluZ1RvQnl0ZUFycmF5IiwiYXBwTmFtZSIsImFwcENvbXBhdE5hbWUiLCJhbmFseXRpY3NOYW1lIiwiYW5hbHl0aWNzQ29tcGF0TmFtZSIsImFwcENoZWNrTmFtZSIsImFwcENoZWNrQ29tcGF0TmFtZSIsImF1dGhOYW1lIiwiYXV0aENvbXBhdE5hbWUiLCJkYXRhYmFzZU5hbWUiLCJkYXRhYmFzZUNvbXBhdE5hbWUiLCJmdW5jdGlvbnNOYW1lIiwiZnVuY3Rpb25zQ29tcGF0TmFtZSIsImluc3RhbGxhdGlvbnNOYW1lIiwiaW5zdGFsbGF0aW9uc0NvbXBhdE5hbWUiLCJtZXNzYWdpbmdOYW1lIiwibWVzc2FnaW5nQ29tcGF0TmFtZSIsInBlcmZvcm1hbmNlTmFtZSIsInBlcmZvcm1hbmNlQ29tcGF0TmFtZSIsInJlbW90ZUNvbmZpZ05hbWUiLCJyZW1vdGVDb25maWdDb21wYXROYW1lIiwic3RvcmFnZU5hbWUiLCJzdG9yYWdlQ29tcGF0TmFtZSIsImZpcmVzdG9yZU5hbWUiLCJmaXJlc3RvcmVDb21wYXROYW1lIiwicGFja2FnZU5hbWUiLCJzZXRMb2dMZXZlbEltcGwiLCJuYW1lIiwidmVyc2lvbiIsImpzSGVscGVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuX2xvYWRKUyIsImFwcGx5QWN0aW9uQ29kZSIsInNlbmRFbWFpbFZlcmlmaWNhdGlvbiIsInNlbmRQYXNzd29yZFJlc2V0RW1haWwiLCJzZW5kU2lnbkluTGlua1RvRW1haWwiLCJzaWduSW5XaXRoRW1haWxMaW5rIiwiSURQX1JFUVVFU1RfVVJJIiwic2lnbkluV2l0aFBob25lTnVtYmVyIiwibGlua1dpdGhQaG9uZU51bWJlciIsIl9saW5rIiwic2lnbkluV2l0aEN1c3RvbVRva2VuIiwiZ2V0SWRUb2tlblJlc3BvbnNlIiwiYXV0aGVudGljYXRpb24uc2VuZFBhc3N3b3JkUmVzZXRFbWFpbCIsImF1dGhlbnRpY2F0aW9uXHJcbiAgICAgICAgICAgIC5zZW5kUGFzc3dvcmRSZXNldEVtYWlsIiwiYWNjb3VudC5yZXNldFBhc3N3b3JkIiwiYWNjb3VudC5hcHBseUFjdGlvbkNvZGUiLCJhcGkuc2VuZFNpZ25JbkxpbmtUb0VtYWlsIiwiYXBpXHJcbiAgICAgICAgICAgIC5zZW5kU2lnbkluTGlua1RvRW1haWwiLCJhcGkuc2VuZEVtYWlsVmVyaWZpY2F0aW9uIiwiYXBpLnZlcmlmeUFuZENoYW5nZUVtYWlsIiwidXBkYXRlUHJvZmlsZSIsImFwaVVwZGF0ZVByb2ZpbGUiLCJhcGlVcGRhdGVFbWFpbFBhc3N3b3JkIiwiX1BPTExJTkdfSU5URVJWQUxfTVMiLCJqc0hlbHBlcnMuX2dlbmVyYXRlQ2FsbGJhY2tOYW1lIiwianNIZWxwZXJzLl9sb2FkSlMiLCJfbGlua1VzZXIiLCJqcy5fZ2VuZXJhdGVDYWxsYmFja05hbWUiLCJqc1xyXG4gICAgICAgICAgICAgICAgLl9sb2FkSlMiLCJnYXBpTG9hZGVyLl9sb2FkR2FwaSJdLCJzb3VyY2VSb290IjoiIn0=